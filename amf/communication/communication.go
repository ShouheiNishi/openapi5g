// Package communication provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package communication

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime"
	"mime/multipart"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// NonUeN2MessageTransferMultipartBody defines parameters for NonUeN2MessageTransfer.
type NonUeN2MessageTransferMultipartBody struct {
	BinaryDataN2Information *openapi_types.File `json:"binaryDataN2Information,omitempty"`

	// JsonData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationTransferReqData
	JsonData             *externalRef0.N2InformationTransferReqData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}                     `json:"-"`
}

// CreateUEContextMultipartBody defines parameters for CreateUEContext.
type CreateUEContextMultipartBody struct {
	BinaryDataN2Information      *openapi_types.File `json:"binaryDataN2Information,omitempty"`
	BinaryDataN2InformationExt1  *openapi_types.File `json:"binaryDataN2InformationExt1,omitempty"`
	BinaryDataN2InformationExt10 *openapi_types.File `json:"binaryDataN2InformationExt10,omitempty"`
	BinaryDataN2InformationExt11 *openapi_types.File `json:"binaryDataN2InformationExt11,omitempty"`
	BinaryDataN2InformationExt12 *openapi_types.File `json:"binaryDataN2InformationExt12,omitempty"`
	BinaryDataN2InformationExt13 *openapi_types.File `json:"binaryDataN2InformationExt13,omitempty"`
	BinaryDataN2InformationExt14 *openapi_types.File `json:"binaryDataN2InformationExt14,omitempty"`
	BinaryDataN2InformationExt15 *openapi_types.File `json:"binaryDataN2InformationExt15,omitempty"`
	BinaryDataN2InformationExt16 *openapi_types.File `json:"binaryDataN2InformationExt16,omitempty"`
	BinaryDataN2InformationExt2  *openapi_types.File `json:"binaryDataN2InformationExt2,omitempty"`
	BinaryDataN2InformationExt3  *openapi_types.File `json:"binaryDataN2InformationExt3,omitempty"`
	BinaryDataN2InformationExt4  *openapi_types.File `json:"binaryDataN2InformationExt4,omitempty"`
	BinaryDataN2InformationExt5  *openapi_types.File `json:"binaryDataN2InformationExt5,omitempty"`
	BinaryDataN2InformationExt6  *openapi_types.File `json:"binaryDataN2InformationExt6,omitempty"`
	BinaryDataN2InformationExt7  *openapi_types.File `json:"binaryDataN2InformationExt7,omitempty"`
	BinaryDataN2InformationExt8  *openapi_types.File `json:"binaryDataN2InformationExt8,omitempty"`
	BinaryDataN2InformationExt9  *openapi_types.File `json:"binaryDataN2InformationExt9,omitempty"`

	// JsonData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextCreateData
	JsonData             *externalRef0.UeContextCreateData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// CancelRelocateUEContextMultipartBody defines parameters for CancelRelocateUEContext.
type CancelRelocateUEContextMultipartBody struct {
	BinaryDataGtpcMessage *openapi_types.File `json:"binaryDataGtpcMessage,omitempty"`

	// JsonData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextCancelRelocateData
	JsonData             *externalRef0.UeContextCancelRelocateData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}                    `json:"-"`
}

// N1N2MessageTransferMultipartBody defines parameters for N1N2MessageTransfer.
type N1N2MessageTransferMultipartBody struct {
	BinaryDataN1Message     *openapi_types.File `json:"binaryDataN1Message,omitempty"`
	BinaryDataN2Information *openapi_types.File `json:"binaryDataN2Information,omitempty"`
	BinaryMtData            *openapi_types.File `json:"binaryMtData,omitempty"`

	// JsonData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferReqData
	JsonData             *externalRef0.N1N2MessageTransferReqData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}                   `json:"-"`
}

// RelocateUEContextMultipartBody defines parameters for RelocateUEContext.
type RelocateUEContextMultipartBody struct {
	BinaryDataGtpcMessage        *openapi_types.File `json:"binaryDataGtpcMessage,omitempty"`
	BinaryDataN2Information      *openapi_types.File `json:"binaryDataN2Information,omitempty"`
	BinaryDataN2InformationExt1  *openapi_types.File `json:"binaryDataN2InformationExt1,omitempty"`
	BinaryDataN2InformationExt10 *openapi_types.File `json:"binaryDataN2InformationExt10,omitempty"`
	BinaryDataN2InformationExt11 *openapi_types.File `json:"binaryDataN2InformationExt11,omitempty"`
	BinaryDataN2InformationExt12 *openapi_types.File `json:"binaryDataN2InformationExt12,omitempty"`
	BinaryDataN2InformationExt13 *openapi_types.File `json:"binaryDataN2InformationExt13,omitempty"`
	BinaryDataN2InformationExt14 *openapi_types.File `json:"binaryDataN2InformationExt14,omitempty"`
	BinaryDataN2InformationExt15 *openapi_types.File `json:"binaryDataN2InformationExt15,omitempty"`
	BinaryDataN2InformationExt16 *openapi_types.File `json:"binaryDataN2InformationExt16,omitempty"`
	BinaryDataN2InformationExt2  *openapi_types.File `json:"binaryDataN2InformationExt2,omitempty"`
	BinaryDataN2InformationExt3  *openapi_types.File `json:"binaryDataN2InformationExt3,omitempty"`
	BinaryDataN2InformationExt4  *openapi_types.File `json:"binaryDataN2InformationExt4,omitempty"`
	BinaryDataN2InformationExt5  *openapi_types.File `json:"binaryDataN2InformationExt5,omitempty"`
	BinaryDataN2InformationExt6  *openapi_types.File `json:"binaryDataN2InformationExt6,omitempty"`
	BinaryDataN2InformationExt7  *openapi_types.File `json:"binaryDataN2InformationExt7,omitempty"`
	BinaryDataN2InformationExt8  *openapi_types.File `json:"binaryDataN2InformationExt8,omitempty"`
	BinaryDataN2InformationExt9  *openapi_types.File `json:"binaryDataN2InformationExt9,omitempty"`

	// JsonData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextRelocateData
	JsonData             *externalRef0.UeContextRelocateData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}              `json:"-"`
}

// UEContextTransferMultipartBody defines parameters for UEContextTransfer.
type UEContextTransferMultipartBody struct {
	BinaryDataN1Message *openapi_types.File `json:"binaryDataN1Message,omitempty"`

	// JsonData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextTransferReqData
	JsonData             *externalRef0.UeContextTransferReqData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}                 `json:"-"`
}

// NonUeN2InfoSubscribeJSONRequestBody defines body for NonUeN2InfoSubscribe for application/json ContentType.
type NonUeN2InfoSubscribeJSONRequestBody = externalRef0.NonUeN2InfoSubscriptionCreateData

// NonUeN2MessageTransferJSONRequestBody defines body for NonUeN2MessageTransfer for application/json ContentType.
type NonUeN2MessageTransferJSONRequestBody = externalRef0.N2InformationTransferReqData

// NonUeN2MessageTransferMultipartRequestBody defines body for NonUeN2MessageTransfer for multipart/related ContentType.
type NonUeN2MessageTransferMultipartRequestBody NonUeN2MessageTransferMultipartBody

// AMFStatusChangeSubscribeJSONRequestBody defines body for AMFStatusChangeSubscribe for application/json ContentType.
type AMFStatusChangeSubscribeJSONRequestBody = externalRef0.SubscriptionData

// AMFStatusChangeSubscribeModfyJSONRequestBody defines body for AMFStatusChangeSubscribeModfy for application/json ContentType.
type AMFStatusChangeSubscribeModfyJSONRequestBody = externalRef0.SubscriptionData

// CreateUEContextMultipartRequestBody defines body for CreateUEContext for multipart/related ContentType.
type CreateUEContextMultipartRequestBody CreateUEContextMultipartBody

// EBIAssignmentJSONRequestBody defines body for EBIAssignment for application/json ContentType.
type EBIAssignmentJSONRequestBody = externalRef0.AssignEbiData

// CancelRelocateUEContextMultipartRequestBody defines body for CancelRelocateUEContext for multipart/related ContentType.
type CancelRelocateUEContextMultipartRequestBody CancelRelocateUEContextMultipartBody

// N1N2MessageTransferJSONRequestBody defines body for N1N2MessageTransfer for application/json ContentType.
type N1N2MessageTransferJSONRequestBody = externalRef0.N1N2MessageTransferReqData

// N1N2MessageTransferMultipartRequestBody defines body for N1N2MessageTransfer for multipart/related ContentType.
type N1N2MessageTransferMultipartRequestBody N1N2MessageTransferMultipartBody

// N1N2MessageSubscribeJSONRequestBody defines body for N1N2MessageSubscribe for application/json ContentType.
type N1N2MessageSubscribeJSONRequestBody = externalRef0.UeN1N2InfoSubscriptionCreateData

// ReleaseUEContextJSONRequestBody defines body for ReleaseUEContext for application/json ContentType.
type ReleaseUEContextJSONRequestBody = externalRef0.UEContextRelease

// RelocateUEContextMultipartRequestBody defines body for RelocateUEContext for multipart/related ContentType.
type RelocateUEContextMultipartRequestBody RelocateUEContextMultipartBody

// UEContextTransferJSONRequestBody defines body for UEContextTransfer for application/json ContentType.
type UEContextTransferJSONRequestBody = externalRef0.UeContextTransferReqData

// UEContextTransferMultipartRequestBody defines body for UEContextTransfer for multipart/related ContentType.
type UEContextTransferMultipartRequestBody UEContextTransferMultipartBody

// RegistrationStatusUpdateJSONRequestBody defines body for RegistrationStatusUpdate for application/json ContentType.
type RegistrationStatusUpdateJSONRequestBody = externalRef0.UeRegStatusUpdateReqData

// Getter for additional properties for NonUeN2MessageTransferMultipartBody. Returns the specified
// element and whether it was found
func (a NonUeN2MessageTransferMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NonUeN2MessageTransferMultipartBody
func (a *NonUeN2MessageTransferMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NonUeN2MessageTransferMultipartBody to handle AdditionalProperties
func (a *NonUeN2MessageTransferMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN2Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2Information': %w", err)
		}
		delete(object, "binaryDataN2Information")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NonUeN2MessageTransferMultipartBody to handle AdditionalProperties
func (a NonUeN2MessageTransferMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN2Information != nil {
		object["binaryDataN2Information"], err = json.Marshal(a.BinaryDataN2Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2Information': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateUEContextMultipartBody. Returns the specified
// element and whether it was found
func (a CreateUEContextMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateUEContextMultipartBody
func (a *CreateUEContextMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateUEContextMultipartBody to handle AdditionalProperties
func (a *CreateUEContextMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN2Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2Information': %w", err)
		}
		delete(object, "binaryDataN2Information")
	}

	if raw, found := object["binaryDataN2InformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt1': %w", err)
		}
		delete(object, "binaryDataN2InformationExt1")
	}

	if raw, found := object["binaryDataN2InformationExt10"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt10)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt10': %w", err)
		}
		delete(object, "binaryDataN2InformationExt10")
	}

	if raw, found := object["binaryDataN2InformationExt11"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt11)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt11': %w", err)
		}
		delete(object, "binaryDataN2InformationExt11")
	}

	if raw, found := object["binaryDataN2InformationExt12"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt12)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt12': %w", err)
		}
		delete(object, "binaryDataN2InformationExt12")
	}

	if raw, found := object["binaryDataN2InformationExt13"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt13)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt13': %w", err)
		}
		delete(object, "binaryDataN2InformationExt13")
	}

	if raw, found := object["binaryDataN2InformationExt14"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt14)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt14': %w", err)
		}
		delete(object, "binaryDataN2InformationExt14")
	}

	if raw, found := object["binaryDataN2InformationExt15"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt15)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt15': %w", err)
		}
		delete(object, "binaryDataN2InformationExt15")
	}

	if raw, found := object["binaryDataN2InformationExt16"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt16)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt16': %w", err)
		}
		delete(object, "binaryDataN2InformationExt16")
	}

	if raw, found := object["binaryDataN2InformationExt2"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt2)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt2': %w", err)
		}
		delete(object, "binaryDataN2InformationExt2")
	}

	if raw, found := object["binaryDataN2InformationExt3"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt3)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt3': %w", err)
		}
		delete(object, "binaryDataN2InformationExt3")
	}

	if raw, found := object["binaryDataN2InformationExt4"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt4)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt4': %w", err)
		}
		delete(object, "binaryDataN2InformationExt4")
	}

	if raw, found := object["binaryDataN2InformationExt5"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt5)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt5': %w", err)
		}
		delete(object, "binaryDataN2InformationExt5")
	}

	if raw, found := object["binaryDataN2InformationExt6"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt6)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt6': %w", err)
		}
		delete(object, "binaryDataN2InformationExt6")
	}

	if raw, found := object["binaryDataN2InformationExt7"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt7)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt7': %w", err)
		}
		delete(object, "binaryDataN2InformationExt7")
	}

	if raw, found := object["binaryDataN2InformationExt8"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt8)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt8': %w", err)
		}
		delete(object, "binaryDataN2InformationExt8")
	}

	if raw, found := object["binaryDataN2InformationExt9"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt9)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt9': %w", err)
		}
		delete(object, "binaryDataN2InformationExt9")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateUEContextMultipartBody to handle AdditionalProperties
func (a CreateUEContextMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN2Information != nil {
		object["binaryDataN2Information"], err = json.Marshal(a.BinaryDataN2Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2Information': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt1 != nil {
		object["binaryDataN2InformationExt1"], err = json.Marshal(a.BinaryDataN2InformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt1': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt10 != nil {
		object["binaryDataN2InformationExt10"], err = json.Marshal(a.BinaryDataN2InformationExt10)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt10': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt11 != nil {
		object["binaryDataN2InformationExt11"], err = json.Marshal(a.BinaryDataN2InformationExt11)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt11': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt12 != nil {
		object["binaryDataN2InformationExt12"], err = json.Marshal(a.BinaryDataN2InformationExt12)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt12': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt13 != nil {
		object["binaryDataN2InformationExt13"], err = json.Marshal(a.BinaryDataN2InformationExt13)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt13': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt14 != nil {
		object["binaryDataN2InformationExt14"], err = json.Marshal(a.BinaryDataN2InformationExt14)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt14': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt15 != nil {
		object["binaryDataN2InformationExt15"], err = json.Marshal(a.BinaryDataN2InformationExt15)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt15': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt16 != nil {
		object["binaryDataN2InformationExt16"], err = json.Marshal(a.BinaryDataN2InformationExt16)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt16': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt2 != nil {
		object["binaryDataN2InformationExt2"], err = json.Marshal(a.BinaryDataN2InformationExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt2': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt3 != nil {
		object["binaryDataN2InformationExt3"], err = json.Marshal(a.BinaryDataN2InformationExt3)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt3': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt4 != nil {
		object["binaryDataN2InformationExt4"], err = json.Marshal(a.BinaryDataN2InformationExt4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt4': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt5 != nil {
		object["binaryDataN2InformationExt5"], err = json.Marshal(a.BinaryDataN2InformationExt5)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt5': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt6 != nil {
		object["binaryDataN2InformationExt6"], err = json.Marshal(a.BinaryDataN2InformationExt6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt6': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt7 != nil {
		object["binaryDataN2InformationExt7"], err = json.Marshal(a.BinaryDataN2InformationExt7)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt7': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt8 != nil {
		object["binaryDataN2InformationExt8"], err = json.Marshal(a.BinaryDataN2InformationExt8)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt8': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt9 != nil {
		object["binaryDataN2InformationExt9"], err = json.Marshal(a.BinaryDataN2InformationExt9)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt9': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CancelRelocateUEContextMultipartBody. Returns the specified
// element and whether it was found
func (a CancelRelocateUEContextMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CancelRelocateUEContextMultipartBody
func (a *CancelRelocateUEContextMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CancelRelocateUEContextMultipartBody to handle AdditionalProperties
func (a *CancelRelocateUEContextMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataGtpcMessage"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataGtpcMessage)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataGtpcMessage': %w", err)
		}
		delete(object, "binaryDataGtpcMessage")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CancelRelocateUEContextMultipartBody to handle AdditionalProperties
func (a CancelRelocateUEContextMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataGtpcMessage != nil {
		object["binaryDataGtpcMessage"], err = json.Marshal(a.BinaryDataGtpcMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataGtpcMessage': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1N2MessageTransferMultipartBody. Returns the specified
// element and whether it was found
func (a N1N2MessageTransferMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1N2MessageTransferMultipartBody
func (a *N1N2MessageTransferMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1N2MessageTransferMultipartBody to handle AdditionalProperties
func (a *N1N2MessageTransferMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1Message"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1Message)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1Message': %w", err)
		}
		delete(object, "binaryDataN1Message")
	}

	if raw, found := object["binaryDataN2Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2Information': %w", err)
		}
		delete(object, "binaryDataN2Information")
	}

	if raw, found := object["binaryMtData"]; found {
		err = json.Unmarshal(raw, &a.BinaryMtData)
		if err != nil {
			return fmt.Errorf("error reading 'binaryMtData': %w", err)
		}
		delete(object, "binaryMtData")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1N2MessageTransferMultipartBody to handle AdditionalProperties
func (a N1N2MessageTransferMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1Message != nil {
		object["binaryDataN1Message"], err = json.Marshal(a.BinaryDataN1Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1Message': %w", err)
		}
	}

	if a.BinaryDataN2Information != nil {
		object["binaryDataN2Information"], err = json.Marshal(a.BinaryDataN2Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2Information': %w", err)
		}
	}

	if a.BinaryMtData != nil {
		object["binaryMtData"], err = json.Marshal(a.BinaryMtData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryMtData': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RelocateUEContextMultipartBody. Returns the specified
// element and whether it was found
func (a RelocateUEContextMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RelocateUEContextMultipartBody
func (a *RelocateUEContextMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RelocateUEContextMultipartBody to handle AdditionalProperties
func (a *RelocateUEContextMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataGtpcMessage"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataGtpcMessage)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataGtpcMessage': %w", err)
		}
		delete(object, "binaryDataGtpcMessage")
	}

	if raw, found := object["binaryDataN2Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2Information': %w", err)
		}
		delete(object, "binaryDataN2Information")
	}

	if raw, found := object["binaryDataN2InformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt1': %w", err)
		}
		delete(object, "binaryDataN2InformationExt1")
	}

	if raw, found := object["binaryDataN2InformationExt10"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt10)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt10': %w", err)
		}
		delete(object, "binaryDataN2InformationExt10")
	}

	if raw, found := object["binaryDataN2InformationExt11"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt11)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt11': %w", err)
		}
		delete(object, "binaryDataN2InformationExt11")
	}

	if raw, found := object["binaryDataN2InformationExt12"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt12)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt12': %w", err)
		}
		delete(object, "binaryDataN2InformationExt12")
	}

	if raw, found := object["binaryDataN2InformationExt13"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt13)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt13': %w", err)
		}
		delete(object, "binaryDataN2InformationExt13")
	}

	if raw, found := object["binaryDataN2InformationExt14"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt14)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt14': %w", err)
		}
		delete(object, "binaryDataN2InformationExt14")
	}

	if raw, found := object["binaryDataN2InformationExt15"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt15)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt15': %w", err)
		}
		delete(object, "binaryDataN2InformationExt15")
	}

	if raw, found := object["binaryDataN2InformationExt16"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt16)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt16': %w", err)
		}
		delete(object, "binaryDataN2InformationExt16")
	}

	if raw, found := object["binaryDataN2InformationExt2"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt2)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt2': %w", err)
		}
		delete(object, "binaryDataN2InformationExt2")
	}

	if raw, found := object["binaryDataN2InformationExt3"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt3)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt3': %w", err)
		}
		delete(object, "binaryDataN2InformationExt3")
	}

	if raw, found := object["binaryDataN2InformationExt4"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt4)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt4': %w", err)
		}
		delete(object, "binaryDataN2InformationExt4")
	}

	if raw, found := object["binaryDataN2InformationExt5"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt5)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt5': %w", err)
		}
		delete(object, "binaryDataN2InformationExt5")
	}

	if raw, found := object["binaryDataN2InformationExt6"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt6)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt6': %w", err)
		}
		delete(object, "binaryDataN2InformationExt6")
	}

	if raw, found := object["binaryDataN2InformationExt7"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt7)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt7': %w", err)
		}
		delete(object, "binaryDataN2InformationExt7")
	}

	if raw, found := object["binaryDataN2InformationExt8"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt8)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt8': %w", err)
		}
		delete(object, "binaryDataN2InformationExt8")
	}

	if raw, found := object["binaryDataN2InformationExt9"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2InformationExt9)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2InformationExt9': %w", err)
		}
		delete(object, "binaryDataN2InformationExt9")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RelocateUEContextMultipartBody to handle AdditionalProperties
func (a RelocateUEContextMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataGtpcMessage != nil {
		object["binaryDataGtpcMessage"], err = json.Marshal(a.BinaryDataGtpcMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataGtpcMessage': %w", err)
		}
	}

	if a.BinaryDataN2Information != nil {
		object["binaryDataN2Information"], err = json.Marshal(a.BinaryDataN2Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2Information': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt1 != nil {
		object["binaryDataN2InformationExt1"], err = json.Marshal(a.BinaryDataN2InformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt1': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt10 != nil {
		object["binaryDataN2InformationExt10"], err = json.Marshal(a.BinaryDataN2InformationExt10)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt10': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt11 != nil {
		object["binaryDataN2InformationExt11"], err = json.Marshal(a.BinaryDataN2InformationExt11)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt11': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt12 != nil {
		object["binaryDataN2InformationExt12"], err = json.Marshal(a.BinaryDataN2InformationExt12)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt12': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt13 != nil {
		object["binaryDataN2InformationExt13"], err = json.Marshal(a.BinaryDataN2InformationExt13)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt13': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt14 != nil {
		object["binaryDataN2InformationExt14"], err = json.Marshal(a.BinaryDataN2InformationExt14)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt14': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt15 != nil {
		object["binaryDataN2InformationExt15"], err = json.Marshal(a.BinaryDataN2InformationExt15)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt15': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt16 != nil {
		object["binaryDataN2InformationExt16"], err = json.Marshal(a.BinaryDataN2InformationExt16)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt16': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt2 != nil {
		object["binaryDataN2InformationExt2"], err = json.Marshal(a.BinaryDataN2InformationExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt2': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt3 != nil {
		object["binaryDataN2InformationExt3"], err = json.Marshal(a.BinaryDataN2InformationExt3)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt3': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt4 != nil {
		object["binaryDataN2InformationExt4"], err = json.Marshal(a.BinaryDataN2InformationExt4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt4': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt5 != nil {
		object["binaryDataN2InformationExt5"], err = json.Marshal(a.BinaryDataN2InformationExt5)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt5': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt6 != nil {
		object["binaryDataN2InformationExt6"], err = json.Marshal(a.BinaryDataN2InformationExt6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt6': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt7 != nil {
		object["binaryDataN2InformationExt7"], err = json.Marshal(a.BinaryDataN2InformationExt7)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt7': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt8 != nil {
		object["binaryDataN2InformationExt8"], err = json.Marshal(a.BinaryDataN2InformationExt8)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt8': %w", err)
		}
	}

	if a.BinaryDataN2InformationExt9 != nil {
		object["binaryDataN2InformationExt9"], err = json.Marshal(a.BinaryDataN2InformationExt9)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2InformationExt9': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEContextTransferMultipartBody. Returns the specified
// element and whether it was found
func (a UEContextTransferMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEContextTransferMultipartBody
func (a *UEContextTransferMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEContextTransferMultipartBody to handle AdditionalProperties
func (a *UEContextTransferMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1Message"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1Message)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1Message': %w", err)
		}
		delete(object, "binaryDataN1Message")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEContextTransferMultipartBody to handle AdditionalProperties
func (a UEContextTransferMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1Message != nil {
		object["binaryDataN1Message"], err = json.Marshal(a.BinaryDataN1Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1Message': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NonUeN2InfoSubscribeWithBody request with any body
	NonUeN2InfoSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NonUeN2InfoSubscribe(ctx context.Context, body NonUeN2InfoSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NonUeN2InfoUnSubscribe request
	NonUeN2InfoUnSubscribe(ctx context.Context, n2NotifySubscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NonUeN2MessageTransferWithBody request with any body
	NonUeN2MessageTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NonUeN2MessageTransfer(ctx context.Context, body NonUeN2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AMFStatusChangeSubscribeWithBody request with any body
	AMFStatusChangeSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AMFStatusChangeSubscribe(ctx context.Context, body AMFStatusChangeSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AMFStatusChangeUnSubscribe request
	AMFStatusChangeUnSubscribe(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AMFStatusChangeSubscribeModfyWithBody request with any body
	AMFStatusChangeSubscribeModfyWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AMFStatusChangeSubscribeModfy(ctx context.Context, subscriptionId string, body AMFStatusChangeSubscribeModfyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUEContextWithBody request with any body
	CreateUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EBIAssignmentWithBody request with any body
	EBIAssignmentWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EBIAssignment(ctx context.Context, ueContextId string, body EBIAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelRelocateUEContextWithBody request with any body
	CancelRelocateUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// N1N2MessageTransferWithBody request with any body
	N1N2MessageTransferWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	N1N2MessageTransfer(ctx context.Context, ueContextId string, body N1N2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// N1N2MessageSubscribeWithBody request with any body
	N1N2MessageSubscribeWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	N1N2MessageSubscribe(ctx context.Context, ueContextId string, body N1N2MessageSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// N1N2MessageUnSubscribe request
	N1N2MessageUnSubscribe(ctx context.Context, ueContextId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleaseUEContextWithBody request with any body
	ReleaseUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReleaseUEContext(ctx context.Context, ueContextId string, body ReleaseUEContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RelocateUEContextWithBody request with any body
	RelocateUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UEContextTransferWithBody request with any body
	UEContextTransferWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UEContextTransfer(ctx context.Context, ueContextId string, body UEContextTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegistrationStatusUpdateWithBody request with any body
	RegistrationStatusUpdateWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegistrationStatusUpdate(ctx context.Context, ueContextId string, body RegistrationStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NonUeN2InfoSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNonUeN2InfoSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NonUeN2InfoSubscribe(ctx context.Context, body NonUeN2InfoSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNonUeN2InfoSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NonUeN2InfoUnSubscribe(ctx context.Context, n2NotifySubscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNonUeN2InfoUnSubscribeRequest(c.Server, n2NotifySubscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NonUeN2MessageTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNonUeN2MessageTransferRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NonUeN2MessageTransfer(ctx context.Context, body NonUeN2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNonUeN2MessageTransferRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AMFStatusChangeSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAMFStatusChangeSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AMFStatusChangeSubscribe(ctx context.Context, body AMFStatusChangeSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAMFStatusChangeSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AMFStatusChangeUnSubscribe(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAMFStatusChangeUnSubscribeRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AMFStatusChangeSubscribeModfyWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAMFStatusChangeSubscribeModfyRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AMFStatusChangeSubscribeModfy(ctx context.Context, subscriptionId string, body AMFStatusChangeSubscribeModfyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAMFStatusChangeSubscribeModfyRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUEContextRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EBIAssignmentWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEBIAssignmentRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EBIAssignment(ctx context.Context, ueContextId string, body EBIAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEBIAssignmentRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelRelocateUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelRelocateUEContextRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N1N2MessageTransferWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN1N2MessageTransferRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N1N2MessageTransfer(ctx context.Context, ueContextId string, body N1N2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN1N2MessageTransferRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N1N2MessageSubscribeWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN1N2MessageSubscribeRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N1N2MessageSubscribe(ctx context.Context, ueContextId string, body N1N2MessageSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN1N2MessageSubscribeRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N1N2MessageUnSubscribe(ctx context.Context, ueContextId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN1N2MessageUnSubscribeRequest(c.Server, ueContextId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseUEContextRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseUEContext(ctx context.Context, ueContextId string, body ReleaseUEContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseUEContextRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RelocateUEContextWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRelocateUEContextRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UEContextTransferWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUEContextTransferRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UEContextTransfer(ctx context.Context, ueContextId string, body UEContextTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUEContextTransferRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegistrationStatusUpdateWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegistrationStatusUpdateRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegistrationStatusUpdate(ctx context.Context, ueContextId string, body RegistrationStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegistrationStatusUpdateRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNonUeN2InfoSubscribeRequest calls the generic NonUeN2InfoSubscribe builder with application/json body
func NewNonUeN2InfoSubscribeRequest(server string, body NonUeN2InfoSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNonUeN2InfoSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewNonUeN2InfoSubscribeRequestWithBody generates requests for NonUeN2InfoSubscribe with any type of body
func NewNonUeN2InfoSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/non-ue-n2-messages/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNonUeN2InfoUnSubscribeRequest generates requests for NonUeN2InfoUnSubscribe
func NewNonUeN2InfoUnSubscribeRequest(server string, n2NotifySubscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "n2NotifySubscriptionId", runtime.ParamLocationPath, n2NotifySubscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/non-ue-n2-messages/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNonUeN2MessageTransferRequest calls the generic NonUeN2MessageTransfer builder with application/json body
func NewNonUeN2MessageTransferRequest(server string, body NonUeN2MessageTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNonUeN2MessageTransferRequestWithBody(server, "application/json", bodyReader)
}

// NewNonUeN2MessageTransferRequestWithBody generates requests for NonUeN2MessageTransfer with any type of body
func NewNonUeN2MessageTransferRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/non-ue-n2-messages/transfer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAMFStatusChangeSubscribeRequest calls the generic AMFStatusChangeSubscribe builder with application/json body
func NewAMFStatusChangeSubscribeRequest(server string, body AMFStatusChangeSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAMFStatusChangeSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewAMFStatusChangeSubscribeRequestWithBody generates requests for AMFStatusChangeSubscribe with any type of body
func NewAMFStatusChangeSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAMFStatusChangeUnSubscribeRequest generates requests for AMFStatusChangeUnSubscribe
func NewAMFStatusChangeUnSubscribeRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAMFStatusChangeSubscribeModfyRequest calls the generic AMFStatusChangeSubscribeModfy builder with application/json body
func NewAMFStatusChangeSubscribeModfyRequest(server string, subscriptionId string, body AMFStatusChangeSubscribeModfyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAMFStatusChangeSubscribeModfyRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewAMFStatusChangeSubscribeModfyRequestWithBody generates requests for AMFStatusChangeSubscribeModfy with any type of body
func NewAMFStatusChangeSubscribeModfyRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUEContextRequestWithBody generates requests for CreateUEContext with any type of body
func NewCreateUEContextRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEBIAssignmentRequest calls the generic EBIAssignment builder with application/json body
func NewEBIAssignmentRequest(server string, ueContextId string, body EBIAssignmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEBIAssignmentRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewEBIAssignmentRequestWithBody generates requests for EBIAssignment with any type of body
func NewEBIAssignmentRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/assign-ebi", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelRelocateUEContextRequestWithBody generates requests for CancelRelocateUEContext with any type of body
func NewCancelRelocateUEContextRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/cancel-relocate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewN1N2MessageTransferRequest calls the generic N1N2MessageTransfer builder with application/json body
func NewN1N2MessageTransferRequest(server string, ueContextId string, body N1N2MessageTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewN1N2MessageTransferRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewN1N2MessageTransferRequestWithBody generates requests for N1N2MessageTransfer with any type of body
func NewN1N2MessageTransferRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/n1-n2-messages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewN1N2MessageSubscribeRequest calls the generic N1N2MessageSubscribe builder with application/json body
func NewN1N2MessageSubscribeRequest(server string, ueContextId string, body N1N2MessageSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewN1N2MessageSubscribeRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewN1N2MessageSubscribeRequestWithBody generates requests for N1N2MessageSubscribe with any type of body
func NewN1N2MessageSubscribeRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/n1-n2-messages/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewN1N2MessageUnSubscribeRequest generates requests for N1N2MessageUnSubscribe
func NewN1N2MessageUnSubscribeRequest(server string, ueContextId string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/n1-n2-messages/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReleaseUEContextRequest calls the generic ReleaseUEContext builder with application/json body
func NewReleaseUEContextRequest(server string, ueContextId string, body ReleaseUEContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReleaseUEContextRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewReleaseUEContextRequestWithBody generates requests for ReleaseUEContext with any type of body
func NewReleaseUEContextRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRelocateUEContextRequestWithBody generates requests for RelocateUEContext with any type of body
func NewRelocateUEContextRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/relocate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUEContextTransferRequest calls the generic UEContextTransfer builder with application/json body
func NewUEContextTransferRequest(server string, ueContextId string, body UEContextTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUEContextTransferRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewUEContextTransferRequestWithBody generates requests for UEContextTransfer with any type of body
func NewUEContextTransferRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegistrationStatusUpdateRequest calls the generic RegistrationStatusUpdate builder with application/json body
func NewRegistrationStatusUpdateRequest(server string, ueContextId string, body RegistrationStatusUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegistrationStatusUpdateRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewRegistrationStatusUpdateRequestWithBody generates requests for RegistrationStatusUpdate with any type of body
func NewRegistrationStatusUpdateRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/transfer-update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NonUeN2InfoSubscribeWithBodyWithResponse request with any body
	NonUeN2InfoSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NonUeN2InfoSubscribeResponse, error)

	NonUeN2InfoSubscribeWithResponse(ctx context.Context, body NonUeN2InfoSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*NonUeN2InfoSubscribeResponse, error)

	// NonUeN2InfoUnSubscribeWithResponse request
	NonUeN2InfoUnSubscribeWithResponse(ctx context.Context, n2NotifySubscriptionId string, reqEditors ...RequestEditorFn) (*NonUeN2InfoUnSubscribeResponse, error)

	// NonUeN2MessageTransferWithBodyWithResponse request with any body
	NonUeN2MessageTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NonUeN2MessageTransferResponse, error)

	NonUeN2MessageTransferWithResponse(ctx context.Context, body NonUeN2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*NonUeN2MessageTransferResponse, error)

	// AMFStatusChangeSubscribeWithBodyWithResponse request with any body
	AMFStatusChangeSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeResponse, error)

	AMFStatusChangeSubscribeWithResponse(ctx context.Context, body AMFStatusChangeSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeResponse, error)

	// AMFStatusChangeUnSubscribeWithResponse request
	AMFStatusChangeUnSubscribeWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*AMFStatusChangeUnSubscribeResponse, error)

	// AMFStatusChangeSubscribeModfyWithBodyWithResponse request with any body
	AMFStatusChangeSubscribeModfyWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeModfyResponse, error)

	AMFStatusChangeSubscribeModfyWithResponse(ctx context.Context, subscriptionId string, body AMFStatusChangeSubscribeModfyJSONRequestBody, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeModfyResponse, error)

	// CreateUEContextWithBodyWithResponse request with any body
	CreateUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUEContextResponse, error)

	// EBIAssignmentWithBodyWithResponse request with any body
	EBIAssignmentWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EBIAssignmentResponse, error)

	EBIAssignmentWithResponse(ctx context.Context, ueContextId string, body EBIAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*EBIAssignmentResponse, error)

	// CancelRelocateUEContextWithBodyWithResponse request with any body
	CancelRelocateUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelRelocateUEContextResponse, error)

	// N1N2MessageTransferWithBodyWithResponse request with any body
	N1N2MessageTransferWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N1N2MessageTransferResponse, error)

	N1N2MessageTransferWithResponse(ctx context.Context, ueContextId string, body N1N2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*N1N2MessageTransferResponse, error)

	// N1N2MessageSubscribeWithBodyWithResponse request with any body
	N1N2MessageSubscribeWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N1N2MessageSubscribeResponse, error)

	N1N2MessageSubscribeWithResponse(ctx context.Context, ueContextId string, body N1N2MessageSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*N1N2MessageSubscribeResponse, error)

	// N1N2MessageUnSubscribeWithResponse request
	N1N2MessageUnSubscribeWithResponse(ctx context.Context, ueContextId string, subscriptionId string, reqEditors ...RequestEditorFn) (*N1N2MessageUnSubscribeResponse, error)

	// ReleaseUEContextWithBodyWithResponse request with any body
	ReleaseUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseUEContextResponse, error)

	ReleaseUEContextWithResponse(ctx context.Context, ueContextId string, body ReleaseUEContextJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseUEContextResponse, error)

	// RelocateUEContextWithBodyWithResponse request with any body
	RelocateUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelocateUEContextResponse, error)

	// UEContextTransferWithBodyWithResponse request with any body
	UEContextTransferWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UEContextTransferResponse, error)

	UEContextTransferWithResponse(ctx context.Context, ueContextId string, body UEContextTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*UEContextTransferResponse, error)

	// RegistrationStatusUpdateWithBodyWithResponse request with any body
	RegistrationStatusUpdateWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegistrationStatusUpdateResponse, error)

	RegistrationStatusUpdateWithResponse(ctx context.Context, ueContextId string, body RegistrationStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegistrationStatusUpdateResponse, error)
}

type NonUeN2InfoSubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.NonUeN2InfoSubscriptionCreatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NonUeN2InfoSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NonUeN2InfoSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NonUeN2InfoUnSubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NonUeN2InfoUnSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NonUeN2InfoUnSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NonUeN2MessageTransferResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.N2InformationTransferRspData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	JSON400                       *externalRef0.N2InformationTransferError
	ApplicationproblemJSON400     *externalRef0.ProblemDetails
	JSON403                       *externalRef0.N2InformationTransferError
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	JSON404                       *externalRef0.N2InformationTransferError
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	JSON500                       *externalRef0.N2InformationTransferError
	ApplicationproblemJSON500     *externalRef0.ProblemDetails
	JSON503                       *externalRef0.N2InformationTransferError
	ApplicationproblemJSON503     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NonUeN2MessageTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NonUeN2MessageTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AMFStatusChangeSubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.SubscriptionData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AMFStatusChangeSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AMFStatusChangeSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AMFStatusChangeUnSubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AMFStatusChangeUnSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AMFStatusChangeUnSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AMFStatusChangeSubscribeModfyResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SubscriptionData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AMFStatusChangeSubscribeModfyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AMFStatusChangeSubscribeModfyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUEContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.UeContextCreatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	JSON400                       *externalRef0.UeContextCreateError
	ApplicationproblemJSON400     *externalRef0.ProblemDetails
	JSON403                       *externalRef0.UeContextCreateError
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	JSON500                       *externalRef0.UeContextCreateError
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateUEContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUEContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EBIAssignmentResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AssignedEbiData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	JSON400                       *externalRef0.AssignEbiError
	ApplicationproblemJSON400     *externalRef0.ProblemDetails
	JSON403                       *externalRef0.AssignEbiError
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	JSON409                       *externalRef0.AssignEbiError
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	JSON500                       *externalRef0.AssignEbiError
	ApplicationproblemJSON500     *externalRef0.ProblemDetails
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r EBIAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EBIAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelRelocateUEContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CancelRelocateUEContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelRelocateUEContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type N1N2MessageTransferResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.N1N2MessageTransferRspData
	JSON202                       *externalRef0.N1N2MessageTransferRspData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	JSON409                       *externalRef0.N1N2MessageTransferError
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	JSON504                       *externalRef0.N1N2MessageTransferError
	ApplicationproblemJSON504     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r N1N2MessageTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r N1N2MessageTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type N1N2MessageSubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.UeN1N2InfoSubscriptionCreatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r N1N2MessageSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r N1N2MessageSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type N1N2MessageUnSubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r N1N2MessageUnSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r N1N2MessageUnSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleaseUEContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ReleaseUEContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleaseUEContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RelocateUEContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.UeContextRelocatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r RelocateUEContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RelocateUEContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UEContextTransferResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.UeContextTransferRspData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UEContextTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UEContextTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegistrationStatusUpdateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.UeRegStatusUpdateRspData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RegistrationStatusUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegistrationStatusUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NonUeN2InfoSubscribeWithBodyWithResponse request with arbitrary body returning *NonUeN2InfoSubscribeResponse
func (c *ClientWithResponses) NonUeN2InfoSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NonUeN2InfoSubscribeResponse, error) {
	rsp, err := c.NonUeN2InfoSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNonUeN2InfoSubscribeResponse(rsp)
}

func (c *ClientWithResponses) NonUeN2InfoSubscribeWithResponse(ctx context.Context, body NonUeN2InfoSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*NonUeN2InfoSubscribeResponse, error) {
	rsp, err := c.NonUeN2InfoSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNonUeN2InfoSubscribeResponse(rsp)
}

// NonUeN2InfoUnSubscribeWithResponse request returning *NonUeN2InfoUnSubscribeResponse
func (c *ClientWithResponses) NonUeN2InfoUnSubscribeWithResponse(ctx context.Context, n2NotifySubscriptionId string, reqEditors ...RequestEditorFn) (*NonUeN2InfoUnSubscribeResponse, error) {
	rsp, err := c.NonUeN2InfoUnSubscribe(ctx, n2NotifySubscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNonUeN2InfoUnSubscribeResponse(rsp)
}

// NonUeN2MessageTransferWithBodyWithResponse request with arbitrary body returning *NonUeN2MessageTransferResponse
func (c *ClientWithResponses) NonUeN2MessageTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NonUeN2MessageTransferResponse, error) {
	rsp, err := c.NonUeN2MessageTransferWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNonUeN2MessageTransferResponse(rsp)
}

func (c *ClientWithResponses) NonUeN2MessageTransferWithResponse(ctx context.Context, body NonUeN2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*NonUeN2MessageTransferResponse, error) {
	rsp, err := c.NonUeN2MessageTransfer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNonUeN2MessageTransferResponse(rsp)
}

// AMFStatusChangeSubscribeWithBodyWithResponse request with arbitrary body returning *AMFStatusChangeSubscribeResponse
func (c *ClientWithResponses) AMFStatusChangeSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeResponse, error) {
	rsp, err := c.AMFStatusChangeSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAMFStatusChangeSubscribeResponse(rsp)
}

func (c *ClientWithResponses) AMFStatusChangeSubscribeWithResponse(ctx context.Context, body AMFStatusChangeSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeResponse, error) {
	rsp, err := c.AMFStatusChangeSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAMFStatusChangeSubscribeResponse(rsp)
}

// AMFStatusChangeUnSubscribeWithResponse request returning *AMFStatusChangeUnSubscribeResponse
func (c *ClientWithResponses) AMFStatusChangeUnSubscribeWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*AMFStatusChangeUnSubscribeResponse, error) {
	rsp, err := c.AMFStatusChangeUnSubscribe(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAMFStatusChangeUnSubscribeResponse(rsp)
}

// AMFStatusChangeSubscribeModfyWithBodyWithResponse request with arbitrary body returning *AMFStatusChangeSubscribeModfyResponse
func (c *ClientWithResponses) AMFStatusChangeSubscribeModfyWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeModfyResponse, error) {
	rsp, err := c.AMFStatusChangeSubscribeModfyWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAMFStatusChangeSubscribeModfyResponse(rsp)
}

func (c *ClientWithResponses) AMFStatusChangeSubscribeModfyWithResponse(ctx context.Context, subscriptionId string, body AMFStatusChangeSubscribeModfyJSONRequestBody, reqEditors ...RequestEditorFn) (*AMFStatusChangeSubscribeModfyResponse, error) {
	rsp, err := c.AMFStatusChangeSubscribeModfy(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAMFStatusChangeSubscribeModfyResponse(rsp)
}

// CreateUEContextWithBodyWithResponse request with arbitrary body returning *CreateUEContextResponse
func (c *ClientWithResponses) CreateUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUEContextResponse, error) {
	rsp, err := c.CreateUEContextWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUEContextResponse(rsp)
}

// EBIAssignmentWithBodyWithResponse request with arbitrary body returning *EBIAssignmentResponse
func (c *ClientWithResponses) EBIAssignmentWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EBIAssignmentResponse, error) {
	rsp, err := c.EBIAssignmentWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEBIAssignmentResponse(rsp)
}

func (c *ClientWithResponses) EBIAssignmentWithResponse(ctx context.Context, ueContextId string, body EBIAssignmentJSONRequestBody, reqEditors ...RequestEditorFn) (*EBIAssignmentResponse, error) {
	rsp, err := c.EBIAssignment(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEBIAssignmentResponse(rsp)
}

// CancelRelocateUEContextWithBodyWithResponse request with arbitrary body returning *CancelRelocateUEContextResponse
func (c *ClientWithResponses) CancelRelocateUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelRelocateUEContextResponse, error) {
	rsp, err := c.CancelRelocateUEContextWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelRelocateUEContextResponse(rsp)
}

// N1N2MessageTransferWithBodyWithResponse request with arbitrary body returning *N1N2MessageTransferResponse
func (c *ClientWithResponses) N1N2MessageTransferWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N1N2MessageTransferResponse, error) {
	rsp, err := c.N1N2MessageTransferWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN1N2MessageTransferResponse(rsp)
}

func (c *ClientWithResponses) N1N2MessageTransferWithResponse(ctx context.Context, ueContextId string, body N1N2MessageTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*N1N2MessageTransferResponse, error) {
	rsp, err := c.N1N2MessageTransfer(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN1N2MessageTransferResponse(rsp)
}

// N1N2MessageSubscribeWithBodyWithResponse request with arbitrary body returning *N1N2MessageSubscribeResponse
func (c *ClientWithResponses) N1N2MessageSubscribeWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N1N2MessageSubscribeResponse, error) {
	rsp, err := c.N1N2MessageSubscribeWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN1N2MessageSubscribeResponse(rsp)
}

func (c *ClientWithResponses) N1N2MessageSubscribeWithResponse(ctx context.Context, ueContextId string, body N1N2MessageSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*N1N2MessageSubscribeResponse, error) {
	rsp, err := c.N1N2MessageSubscribe(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN1N2MessageSubscribeResponse(rsp)
}

// N1N2MessageUnSubscribeWithResponse request returning *N1N2MessageUnSubscribeResponse
func (c *ClientWithResponses) N1N2MessageUnSubscribeWithResponse(ctx context.Context, ueContextId string, subscriptionId string, reqEditors ...RequestEditorFn) (*N1N2MessageUnSubscribeResponse, error) {
	rsp, err := c.N1N2MessageUnSubscribe(ctx, ueContextId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN1N2MessageUnSubscribeResponse(rsp)
}

// ReleaseUEContextWithBodyWithResponse request with arbitrary body returning *ReleaseUEContextResponse
func (c *ClientWithResponses) ReleaseUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseUEContextResponse, error) {
	rsp, err := c.ReleaseUEContextWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseUEContextResponse(rsp)
}

func (c *ClientWithResponses) ReleaseUEContextWithResponse(ctx context.Context, ueContextId string, body ReleaseUEContextJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseUEContextResponse, error) {
	rsp, err := c.ReleaseUEContext(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseUEContextResponse(rsp)
}

// RelocateUEContextWithBodyWithResponse request with arbitrary body returning *RelocateUEContextResponse
func (c *ClientWithResponses) RelocateUEContextWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RelocateUEContextResponse, error) {
	rsp, err := c.RelocateUEContextWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRelocateUEContextResponse(rsp)
}

// UEContextTransferWithBodyWithResponse request with arbitrary body returning *UEContextTransferResponse
func (c *ClientWithResponses) UEContextTransferWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UEContextTransferResponse, error) {
	rsp, err := c.UEContextTransferWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUEContextTransferResponse(rsp)
}

func (c *ClientWithResponses) UEContextTransferWithResponse(ctx context.Context, ueContextId string, body UEContextTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*UEContextTransferResponse, error) {
	rsp, err := c.UEContextTransfer(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUEContextTransferResponse(rsp)
}

// RegistrationStatusUpdateWithBodyWithResponse request with arbitrary body returning *RegistrationStatusUpdateResponse
func (c *ClientWithResponses) RegistrationStatusUpdateWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegistrationStatusUpdateResponse, error) {
	rsp, err := c.RegistrationStatusUpdateWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegistrationStatusUpdateResponse(rsp)
}

func (c *ClientWithResponses) RegistrationStatusUpdateWithResponse(ctx context.Context, ueContextId string, body RegistrationStatusUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RegistrationStatusUpdateResponse, error) {
	rsp, err := c.RegistrationStatusUpdate(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegistrationStatusUpdateResponse(rsp)
}

// ParseNonUeN2InfoSubscribeResponse parses an HTTP response from a NonUeN2InfoSubscribeWithResponse call
func ParseNonUeN2InfoSubscribeResponse(rsp *http.Response) (*NonUeN2InfoSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NonUeN2InfoSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.NonUeN2InfoSubscriptionCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNonUeN2InfoUnSubscribeResponse parses an HTTP response from a NonUeN2InfoUnSubscribeWithResponse call
func ParseNonUeN2InfoUnSubscribeResponse(rsp *http.Response) (*NonUeN2InfoUnSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NonUeN2InfoUnSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNonUeN2MessageTransferResponse parses an HTTP response from a NonUeN2MessageTransferWithResponse call
func ParseNonUeN2MessageTransferResponse(rsp *http.Response) (*NonUeN2MessageTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NonUeN2MessageTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.N2InformationTransferRspData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest externalRef0.N2InformationTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest externalRef0.N2InformationTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N2InformationTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest externalRef0.N2InformationTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest externalRef0.N2InformationTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAMFStatusChangeSubscribeResponse parses an HTTP response from a AMFStatusChangeSubscribeWithResponse call
func ParseAMFStatusChangeSubscribeResponse(rsp *http.Response) (*AMFStatusChangeSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AMFStatusChangeSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.SubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAMFStatusChangeUnSubscribeResponse parses an HTTP response from a AMFStatusChangeUnSubscribeWithResponse call
func ParseAMFStatusChangeUnSubscribeResponse(rsp *http.Response) (*AMFStatusChangeUnSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AMFStatusChangeUnSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAMFStatusChangeSubscribeModfyResponse parses an HTTP response from a AMFStatusChangeSubscribeModfyWithResponse call
func ParseAMFStatusChangeSubscribeModfyResponse(rsp *http.Response) (*AMFStatusChangeSubscribeModfyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AMFStatusChangeSubscribeModfyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateUEContextResponse parses an HTTP response from a CreateUEContextWithResponse call
func ParseCreateUEContextResponse(rsp *http.Response) (*CreateUEContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUEContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.UeContextCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest externalRef0.UeContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest externalRef0.UeContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.UeContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseEBIAssignmentResponse parses an HTTP response from a EBIAssignmentWithResponse call
func ParseEBIAssignmentResponse(rsp *http.Response) (*EBIAssignmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EBIAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AssignedEbiData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest externalRef0.AssignEbiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest externalRef0.AssignEbiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest externalRef0.AssignEbiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest externalRef0.AssignEbiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCancelRelocateUEContextResponse parses an HTTP response from a CancelRelocateUEContextWithResponse call
func ParseCancelRelocateUEContextResponse(rsp *http.Response) (*CancelRelocateUEContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelRelocateUEContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseN1N2MessageTransferResponse parses an HTTP response from a N1N2MessageTransferWithResponse call
func ParseN1N2MessageTransferResponse(rsp *http.Response) (*N1N2MessageTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &N1N2MessageTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.N1N2MessageTransferRspData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest externalRef0.N1N2MessageTransferRspData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest externalRef0.N1N2MessageTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 504:
		var dest externalRef0.N1N2MessageTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 504:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseN1N2MessageSubscribeResponse parses an HTTP response from a N1N2MessageSubscribeWithResponse call
func ParseN1N2MessageSubscribeResponse(rsp *http.Response) (*N1N2MessageSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &N1N2MessageSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.UeN1N2InfoSubscriptionCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseN1N2MessageUnSubscribeResponse parses an HTTP response from a N1N2MessageUnSubscribeWithResponse call
func ParseN1N2MessageUnSubscribeResponse(rsp *http.Response) (*N1N2MessageUnSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &N1N2MessageUnSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReleaseUEContextResponse parses an HTTP response from a ReleaseUEContextWithResponse call
func ParseReleaseUEContextResponse(rsp *http.Response) (*ReleaseUEContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleaseUEContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRelocateUEContextResponse parses an HTTP response from a RelocateUEContextWithResponse call
func ParseRelocateUEContextResponse(rsp *http.Response) (*RelocateUEContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RelocateUEContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.UeContextRelocatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUEContextTransferResponse parses an HTTP response from a UEContextTransferWithResponse call
func ParseUEContextTransferResponse(rsp *http.Response) (*UEContextTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UEContextTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UeContextTransferRspData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRegistrationStatusUpdateResponse parses an HTTP response from a RegistrationStatusUpdateWithResponse call
func ParseRegistrationStatusUpdateResponse(rsp *http.Response) (*RegistrationStatusUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegistrationStatusUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UeRegStatusUpdateRspData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Namf_Communication Non UE N2 Info Subscribe service Operation
	// (POST /non-ue-n2-messages/subscriptions)
	NonUeN2InfoSubscribe(c *gin.Context)
	// Namf_Communication Non UE N2 Info UnSubscribe service Operation
	// (DELETE /non-ue-n2-messages/subscriptions/{n2NotifySubscriptionId})
	NonUeN2InfoUnSubscribe(c *gin.Context, n2NotifySubscriptionId string)
	// Namf_Communication Non UE N2 Message Transfer service Operation
	// (POST /non-ue-n2-messages/transfer)
	NonUeN2MessageTransfer(c *gin.Context)
	// Namf_Communication AMF Status Change Subscribe service Operation
	// (POST /subscriptions)
	AMFStatusChangeSubscribe(c *gin.Context)
	// Namf_Communication AMF Status Change UnSubscribe service Operation
	// (DELETE /subscriptions/{subscriptionId})
	AMFStatusChangeUnSubscribe(c *gin.Context, subscriptionId string)
	// Namf_Communication AMF Status Change Subscribe Modify service Operation
	// (PUT /subscriptions/{subscriptionId})
	AMFStatusChangeSubscribeModfy(c *gin.Context, subscriptionId string)
	// Namf_Communication CreateUEContext service Operation
	// (PUT /ue-contexts/{ueContextId})
	CreateUEContext(c *gin.Context, ueContextId string)
	// Namf_Communication EBI Assignment service Operation
	// (POST /ue-contexts/{ueContextId}/assign-ebi)
	EBIAssignment(c *gin.Context, ueContextId string)
	// Namf_Communication CancelRelocateUEContext service Operation
	// (POST /ue-contexts/{ueContextId}/cancel-relocate)
	CancelRelocateUEContext(c *gin.Context, ueContextId string)
	// Namf_Communication N1N2 Message Transfer (UE Specific) service Operation
	// (POST /ue-contexts/{ueContextId}/n1-n2-messages)
	N1N2MessageTransfer(c *gin.Context, ueContextId string)
	// Namf_Communication N1N2 Message Subscribe (UE Specific) service Operation
	// (POST /ue-contexts/{ueContextId}/n1-n2-messages/subscriptions)
	N1N2MessageSubscribe(c *gin.Context, ueContextId string)
	// Namf_Communication N1N2 Message UnSubscribe (UE Specific) service Operation
	// (DELETE /ue-contexts/{ueContextId}/n1-n2-messages/subscriptions/{subscriptionId})
	N1N2MessageUnSubscribe(c *gin.Context, ueContextId string, subscriptionId string)
	// Namf_Communication ReleaseUEContext service Operation
	// (POST /ue-contexts/{ueContextId}/release)
	ReleaseUEContext(c *gin.Context, ueContextId string)
	// Namf_Communication RelocateUEContext service Operation
	// (POST /ue-contexts/{ueContextId}/relocate)
	RelocateUEContext(c *gin.Context, ueContextId string)
	// Namf_Communication UEContextTransfer service Operation
	// (POST /ue-contexts/{ueContextId}/transfer)
	UEContextTransfer(c *gin.Context, ueContextId string)
	// Namf_Communication RegistrationStatusUpdate service Operation
	// (POST /ue-contexts/{ueContextId}/transfer-update)
	RegistrationStatusUpdate(c *gin.Context, ueContextId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// NonUeN2InfoSubscribe operation middleware
func (siw *ServerInterfaceWrapper) NonUeN2InfoSubscribe(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NonUeN2InfoSubscribe(c)
}

// NonUeN2InfoUnSubscribe operation middleware
func (siw *ServerInterfaceWrapper) NonUeN2InfoUnSubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "n2NotifySubscriptionId" -------------
	var n2NotifySubscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "n2NotifySubscriptionId", c.Param("n2NotifySubscriptionId"), &n2NotifySubscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter n2NotifySubscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NonUeN2InfoUnSubscribe(c, n2NotifySubscriptionId)
}

// NonUeN2MessageTransfer operation middleware
func (siw *ServerInterfaceWrapper) NonUeN2MessageTransfer(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NonUeN2MessageTransfer(c)
}

// AMFStatusChangeSubscribe operation middleware
func (siw *ServerInterfaceWrapper) AMFStatusChangeSubscribe(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AMFStatusChangeSubscribe(c)
}

// AMFStatusChangeUnSubscribe operation middleware
func (siw *ServerInterfaceWrapper) AMFStatusChangeUnSubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AMFStatusChangeUnSubscribe(c, subscriptionId)
}

// AMFStatusChangeSubscribeModfy operation middleware
func (siw *ServerInterfaceWrapper) AMFStatusChangeSubscribeModfy(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AMFStatusChangeSubscribeModfy(c, subscriptionId)
}

// CreateUEContext operation middleware
func (siw *ServerInterfaceWrapper) CreateUEContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUEContext(c, ueContextId)
}

// EBIAssignment operation middleware
func (siw *ServerInterfaceWrapper) EBIAssignment(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EBIAssignment(c, ueContextId)
}

// CancelRelocateUEContext operation middleware
func (siw *ServerInterfaceWrapper) CancelRelocateUEContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelRelocateUEContext(c, ueContextId)
}

// N1N2MessageTransfer operation middleware
func (siw *ServerInterfaceWrapper) N1N2MessageTransfer(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.N1N2MessageTransfer(c, ueContextId)
}

// N1N2MessageSubscribe operation middleware
func (siw *ServerInterfaceWrapper) N1N2MessageSubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.N1N2MessageSubscribe(c, ueContextId)
}

// N1N2MessageUnSubscribe operation middleware
func (siw *ServerInterfaceWrapper) N1N2MessageUnSubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.N1N2MessageUnSubscribe(c, ueContextId, subscriptionId)
}

// ReleaseUEContext operation middleware
func (siw *ServerInterfaceWrapper) ReleaseUEContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReleaseUEContext(c, ueContextId)
}

// RelocateUEContext operation middleware
func (siw *ServerInterfaceWrapper) RelocateUEContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RelocateUEContext(c, ueContextId)
}

// UEContextTransfer operation middleware
func (siw *ServerInterfaceWrapper) UEContextTransfer(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UEContextTransfer(c, ueContextId)
}

// RegistrationStatusUpdate operation middleware
func (siw *ServerInterfaceWrapper) RegistrationStatusUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameterWithOptions("simple", "ueContextId", c.Param("ueContextId"), &ueContextId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-comm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegistrationStatusUpdate(c, ueContextId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/non-ue-n2-messages/subscriptions", wrapper.NonUeN2InfoSubscribe)
	router.DELETE(options.BaseURL+"/non-ue-n2-messages/subscriptions/:n2NotifySubscriptionId", wrapper.NonUeN2InfoUnSubscribe)
	router.POST(options.BaseURL+"/non-ue-n2-messages/transfer", wrapper.NonUeN2MessageTransfer)
	router.POST(options.BaseURL+"/subscriptions", wrapper.AMFStatusChangeSubscribe)
	router.DELETE(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.AMFStatusChangeUnSubscribe)
	router.PUT(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.AMFStatusChangeSubscribeModfy)
	router.PUT(options.BaseURL+"/ue-contexts/:ueContextId", wrapper.CreateUEContext)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/assign-ebi", wrapper.EBIAssignment)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/cancel-relocate", wrapper.CancelRelocateUEContext)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/n1-n2-messages", wrapper.N1N2MessageTransfer)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/n1-n2-messages/subscriptions", wrapper.N1N2MessageSubscribe)
	router.DELETE(options.BaseURL+"/ue-contexts/:ueContextId/n1-n2-messages/subscriptions/:subscriptionId", wrapper.N1N2MessageUnSubscribe)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/release", wrapper.ReleaseUEContext)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/relocate", wrapper.RelocateUEContext)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/transfer", wrapper.UEContextTransfer)
	router.POST(options.BaseURL+"/ue-contexts/:ueContextId/transfer-update", wrapper.RegistrationStatusUpdate)
}

type NonUeN2InfoSubscribeRequestObject struct {
	Body *NonUeN2InfoSubscribeJSONRequestBody
}

type NonUeN2InfoSubscribeResponseObject interface {
	VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error
}

type NonUeN2InfoSubscribe201ResponseHeaders struct {
	Location string
}

type NonUeN2InfoSubscribe201JSONResponse struct {
	Body    externalRef0.NonUeN2InfoSubscriptionCreatedData
	Headers NonUeN2InfoSubscribe201ResponseHeaders
}

func (response NonUeN2InfoSubscribe201JSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2InfoSubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NonUeN2InfoSubscribe307JSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2InfoSubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NonUeN2InfoSubscribe308JSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2InfoSubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe400ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribe403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe403ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribe411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe411ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribe413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe413ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribe415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe415ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe429ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe500ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoSubscribe503ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoSubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NonUeN2InfoSubscribedefaultApplicationProblemPlusJSONResponse) VisitNonUeN2InfoSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2InfoUnSubscribeRequestObject struct {
	N2NotifySubscriptionId string `json:"n2NotifySubscriptionId"`
}

type NonUeN2InfoUnSubscribeResponseObject interface {
	VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error
}

type NonUeN2InfoUnSubscribe204Response struct {
}

func (response NonUeN2InfoUnSubscribe204Response) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type NonUeN2InfoUnSubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NonUeN2InfoUnSubscribe307JSONResponse) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2InfoUnSubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NonUeN2InfoUnSubscribe308JSONResponse) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2InfoUnSubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoUnSubscribe400ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoUnSubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoUnSubscribe429ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoUnSubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoUnSubscribe500ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoUnSubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NonUeN2InfoUnSubscribe503ApplicationProblemPlusJSONResponse) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NonUeN2InfoUnSubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NonUeN2InfoUnSubscribedefaultApplicationProblemPlusJSONResponse) VisitNonUeN2InfoUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2MessageTransferRequestObject struct {
	JSONBody      *NonUeN2MessageTransferJSONRequestBody
	MultipartBody *multipart.Reader
}

type NonUeN2MessageTransferResponseObject interface {
	VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error
}

type NonUeN2MessageTransfer200JSONResponse externalRef0.N2InformationTransferRspData

func (response NonUeN2MessageTransfer200JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.N2InformationTransferRspData(response))
}

type NonUeN2MessageTransfer307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NonUeN2MessageTransfer307JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2MessageTransfer308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NonUeN2MessageTransfer308JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NonUeN2MessageTransfer400JSONResponse externalRef0.N2InformationTransferError

func (response NonUeN2MessageTransfer400JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.N2InformationTransferError(response))
}

type NonUeN2MessageTransfer400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response NonUeN2MessageTransfer400ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type NonUeN2MessageTransfer403JSONResponse externalRef0.N2InformationTransferError

func (response NonUeN2MessageTransfer403JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.N2InformationTransferError(response))
}

type NonUeN2MessageTransfer403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response NonUeN2MessageTransfer403ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type NonUeN2MessageTransfer404JSONResponse externalRef0.N2InformationTransferError

func (response NonUeN2MessageTransfer404JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.N2InformationTransferError(response))
}

type NonUeN2MessageTransfer411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NonUeN2MessageTransfer411ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type NonUeN2MessageTransfer413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NonUeN2MessageTransfer413ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type NonUeN2MessageTransfer415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NonUeN2MessageTransfer415ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type NonUeN2MessageTransfer429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NonUeN2MessageTransfer429ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NonUeN2MessageTransfer500JSONResponse externalRef0.N2InformationTransferError

func (response NonUeN2MessageTransfer500JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.N2InformationTransferError(response))
}

type NonUeN2MessageTransfer500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response NonUeN2MessageTransfer500ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type NonUeN2MessageTransfer503JSONResponse externalRef0.N2InformationTransferError

func (response NonUeN2MessageTransfer503JSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.N2InformationTransferError(response))
}

type NonUeN2MessageTransfer503ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response NonUeN2MessageTransfer503ApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type NonUeN2MessageTransferdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NonUeN2MessageTransferdefaultApplicationProblemPlusJSONResponse) VisitNonUeN2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeSubscribeRequestObject struct {
	Body *AMFStatusChangeSubscribeJSONRequestBody
}

type AMFStatusChangeSubscribeResponseObject interface {
	VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error
}

type AMFStatusChangeSubscribe201ResponseHeaders struct {
	Location string
}

type AMFStatusChangeSubscribe201JSONResponse struct {
	Body    externalRef0.SubscriptionData
	Headers AMFStatusChangeSubscribe201ResponseHeaders
}

func (response AMFStatusChangeSubscribe201JSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeSubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response AMFStatusChangeSubscribe307JSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeSubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response AMFStatusChangeSubscribe308JSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeSubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe400ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribe403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe403ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribe411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe411ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribe413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe413ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribe415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe415ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe429ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe500ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribe503ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response AMFStatusChangeSubscribedefaultApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeUnSubscribeRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type AMFStatusChangeUnSubscribeResponseObject interface {
	VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error
}

type AMFStatusChangeUnSubscribe204Response struct {
}

func (response AMFStatusChangeUnSubscribe204Response) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AMFStatusChangeUnSubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response AMFStatusChangeUnSubscribe307JSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeUnSubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response AMFStatusChangeUnSubscribe308JSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeUnSubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeUnSubscribe400ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeUnSubscribe404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeUnSubscribe404ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeUnSubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeUnSubscribe429ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeUnSubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeUnSubscribe500ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeUnSubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeUnSubscribe503ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeUnSubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response AMFStatusChangeUnSubscribedefaultApplicationProblemPlusJSONResponse) VisitAMFStatusChangeUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeSubscribeModfyRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Body           *AMFStatusChangeSubscribeModfyJSONRequestBody
}

type AMFStatusChangeSubscribeModfyResponseObject interface {
	VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error
}

type AMFStatusChangeSubscribeModfy200JSONResponse externalRef0.SubscriptionData

func (response AMFStatusChangeSubscribeModfy200JSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.SubscriptionData(response))
}

type AMFStatusChangeSubscribeModfy307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response AMFStatusChangeSubscribeModfy307JSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeSubscribeModfy308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response AMFStatusChangeSubscribeModfy308JSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type AMFStatusChangeSubscribeModfy400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy400ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfy403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy403ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfy411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy411ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfy413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy413ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfy415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy415ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfy429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy429ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfy500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy500ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfy503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response AMFStatusChangeSubscribeModfy503ApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type AMFStatusChangeSubscribeModfydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response AMFStatusChangeSubscribeModfydefaultApplicationProblemPlusJSONResponse) VisitAMFStatusChangeSubscribeModfyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUEContextRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *multipart.Reader
}

type CreateUEContextResponseObject interface {
	VisitCreateUEContextResponse(w http.ResponseWriter) error
}

type CreateUEContext201ResponseHeaders struct {
	Location string
}

type CreateUEContext201JSONResponse struct {
	Body    externalRef0.UeContextCreatedData
	Headers CreateUEContext201ResponseHeaders
}

func (response CreateUEContext201JSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUEContext201MultipartResponse struct {
	Body    func(writer *multipart.Writer) error
	Headers CreateUEContext201ResponseHeaders
}

func (response CreateUEContext201MultipartResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	defer writer.Close()
	return response.Body(writer)
}

type CreateUEContext307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response CreateUEContext307JSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUEContext308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response CreateUEContext308JSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUEContext400JSONResponse externalRef0.UeContextCreateError

func (response CreateUEContext400JSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.UeContextCreateError(response))
}

type CreateUEContext400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateUEContext400ApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type CreateUEContext403JSONResponse externalRef0.UeContextCreateError

func (response CreateUEContext403JSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.UeContextCreateError(response))
}

type CreateUEContext403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateUEContext403ApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type CreateUEContext403MultipartResponse func(writer *multipart.Writer) error

func (response CreateUEContext403MultipartResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type CreateUEContext411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateUEContext411ApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateUEContext413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateUEContext413ApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateUEContext415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateUEContext415ApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateUEContext429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateUEContext429ApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateUEContext500JSONResponse externalRef0.UeContextCreateError

func (response CreateUEContext500JSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.UeContextCreateError(response))
}

type CreateUEContext503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateUEContext503ApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateUEContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateUEContextdefaultApplicationProblemPlusJSONResponse) VisitCreateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EBIAssignmentRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *EBIAssignmentJSONRequestBody
}

type EBIAssignmentResponseObject interface {
	VisitEBIAssignmentResponse(w http.ResponseWriter) error
}

type EBIAssignment200JSONResponse externalRef0.AssignedEbiData

func (response EBIAssignment200JSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AssignedEbiData(response))
}

type EBIAssignment307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response EBIAssignment307JSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type EBIAssignment308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response EBIAssignment308JSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type EBIAssignment400JSONResponse externalRef0.AssignEbiError

func (response EBIAssignment400JSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.AssignEbiError(response))
}

type EBIAssignment400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response EBIAssignment400ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type EBIAssignment403JSONResponse externalRef0.AssignEbiError

func (response EBIAssignment403JSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.AssignEbiError(response))
}

type EBIAssignment403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response EBIAssignment403ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type EBIAssignment409JSONResponse externalRef0.AssignEbiError

func (response EBIAssignment409JSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(externalRef0.AssignEbiError(response))
}

type EBIAssignment411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response EBIAssignment411ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type EBIAssignment413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response EBIAssignment413ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type EBIAssignment415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response EBIAssignment415ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type EBIAssignment429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response EBIAssignment429ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type EBIAssignment500JSONResponse externalRef0.AssignEbiError

func (response EBIAssignment500JSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.AssignEbiError(response))
}

type EBIAssignment500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response EBIAssignment500ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type EBIAssignment503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response EBIAssignment503ApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type EBIAssignmentdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response EBIAssignmentdefaultApplicationProblemPlusJSONResponse) VisitEBIAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CancelRelocateUEContextRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *multipart.Reader
}

type CancelRelocateUEContextResponseObject interface {
	VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error
}

type CancelRelocateUEContext204Response struct {
}

func (response CancelRelocateUEContext204Response) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CancelRelocateUEContext307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response CancelRelocateUEContext307JSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type CancelRelocateUEContext308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response CancelRelocateUEContext308JSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type CancelRelocateUEContext400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext400ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext403ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext404ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext411ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext413ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext415ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext429ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext500ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContext503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CancelRelocateUEContext503ApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CancelRelocateUEContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CancelRelocateUEContextdefaultApplicationProblemPlusJSONResponse) VisitCancelRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageTransferRequestObject struct {
	UeContextId   string `json:"ueContextId"`
	JSONBody      *N1N2MessageTransferJSONRequestBody
	MultipartBody *multipart.Reader
}

type N1N2MessageTransferResponseObject interface {
	VisitN1N2MessageTransferResponse(w http.ResponseWriter) error
}

type N1N2MessageTransfer200JSONResponse externalRef0.N1N2MessageTransferRspData

func (response N1N2MessageTransfer200JSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.N1N2MessageTransferRspData(response))
}

type N1N2MessageTransfer202ResponseHeaders struct {
	Location string
}

type N1N2MessageTransfer202JSONResponse struct {
	Body    externalRef0.N1N2MessageTransferRspData
	Headers N1N2MessageTransfer202ResponseHeaders
}

func (response N1N2MessageTransfer202JSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageTransfer307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response N1N2MessageTransfer307JSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageTransfer308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response N1N2MessageTransfer308JSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageTransfer400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer400ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer403ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer404ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer409JSONResponse externalRef0.N1N2MessageTransferError

func (response N1N2MessageTransfer409JSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(externalRef0.N1N2MessageTransferError(response))
}

type N1N2MessageTransfer411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer411ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer413ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer415ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer429ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer500ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageTransfer503ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type N1N2MessageTransfer504JSONResponse externalRef0.N1N2MessageTransferError

func (response N1N2MessageTransfer504JSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef0.N1N2MessageTransferError(response))
}

type N1N2MessageTransfer504ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response N1N2MessageTransfer504ApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type N1N2MessageTransferdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response N1N2MessageTransferdefaultApplicationProblemPlusJSONResponse) VisitN1N2MessageTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageSubscribeRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *N1N2MessageSubscribeJSONRequestBody
}

type N1N2MessageSubscribeResponseObject interface {
	VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error
}

type N1N2MessageSubscribe201ResponseHeaders struct {
	Location string
}

type N1N2MessageSubscribe201JSONResponse struct {
	Body    externalRef0.UeN1N2InfoSubscriptionCreatedData
	Headers N1N2MessageSubscribe201ResponseHeaders
}

func (response N1N2MessageSubscribe201JSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageSubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response N1N2MessageSubscribe307JSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageSubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response N1N2MessageSubscribe308JSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageSubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageSubscribe400ApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type N1N2MessageSubscribe411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageSubscribe411ApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type N1N2MessageSubscribe413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageSubscribe413ApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type N1N2MessageSubscribe415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageSubscribe415ApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type N1N2MessageSubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageSubscribe429ApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type N1N2MessageSubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageSubscribe500ApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type N1N2MessageSubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageSubscribe503ApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type N1N2MessageSubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response N1N2MessageSubscribedefaultApplicationProblemPlusJSONResponse) VisitN1N2MessageSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageUnSubscribeRequestObject struct {
	UeContextId    string `json:"ueContextId"`
	SubscriptionId string `json:"subscriptionId"`
}

type N1N2MessageUnSubscribeResponseObject interface {
	VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error
}

type N1N2MessageUnSubscribe204Response struct {
}

func (response N1N2MessageUnSubscribe204Response) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type N1N2MessageUnSubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response N1N2MessageUnSubscribe307JSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageUnSubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response N1N2MessageUnSubscribe308JSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type N1N2MessageUnSubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageUnSubscribe400ApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type N1N2MessageUnSubscribe411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageUnSubscribe411ApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type N1N2MessageUnSubscribe413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageUnSubscribe413ApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type N1N2MessageUnSubscribe415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageUnSubscribe415ApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type N1N2MessageUnSubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageUnSubscribe429ApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type N1N2MessageUnSubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageUnSubscribe500ApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type N1N2MessageUnSubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response N1N2MessageUnSubscribe503ApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type N1N2MessageUnSubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response N1N2MessageUnSubscribedefaultApplicationProblemPlusJSONResponse) VisitN1N2MessageUnSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseUEContextRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *ReleaseUEContextJSONRequestBody
}

type ReleaseUEContextResponseObject interface {
	VisitReleaseUEContextResponse(w http.ResponseWriter) error
}

type ReleaseUEContext204Response struct {
}

func (response ReleaseUEContext204Response) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReleaseUEContext307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ReleaseUEContext307JSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseUEContext308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ReleaseUEContext308JSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseUEContext400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext400ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext403ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext404ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext411ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext413ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext415ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext429ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext500ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContext503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReleaseUEContext503ApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReleaseUEContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReleaseUEContextdefaultApplicationProblemPlusJSONResponse) VisitReleaseUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RelocateUEContextRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *multipart.Reader
}

type RelocateUEContextResponseObject interface {
	VisitRelocateUEContextResponse(w http.ResponseWriter) error
}

type RelocateUEContext201ResponseHeaders struct {
	Location string
}

type RelocateUEContext201JSONResponse struct {
	Body    externalRef0.UeContextRelocatedData
	Headers RelocateUEContext201ResponseHeaders
}

func (response RelocateUEContext201JSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type RelocateUEContext307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response RelocateUEContext307JSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type RelocateUEContext308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response RelocateUEContext308JSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type RelocateUEContext400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext400ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type RelocateUEContext403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext403ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type RelocateUEContext411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext411ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type RelocateUEContext413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext413ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type RelocateUEContext415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext415ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type RelocateUEContext429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext429ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type RelocateUEContext500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext500ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type RelocateUEContext503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response RelocateUEContext503ApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type RelocateUEContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RelocateUEContextdefaultApplicationProblemPlusJSONResponse) VisitRelocateUEContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UEContextTransferRequestObject struct {
	UeContextId   string `json:"ueContextId"`
	JSONBody      *UEContextTransferJSONRequestBody
	MultipartBody *multipart.Reader
}

type UEContextTransferResponseObject interface {
	VisitUEContextTransferResponse(w http.ResponseWriter) error
}

type UEContextTransfer200JSONResponse externalRef0.UeContextTransferRspData

func (response UEContextTransfer200JSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.UeContextTransferRspData(response))
}

type UEContextTransfer200MultipartResponse func(writer *multipart.Writer) error

func (response UEContextTransfer200MultipartResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type UEContextTransfer307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response UEContextTransfer307JSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UEContextTransfer308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response UEContextTransfer308JSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UEContextTransfer400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer400ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer403ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer404ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer411ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer413ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer415ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer429ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer500ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UEContextTransfer503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UEContextTransfer503ApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UEContextTransferdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UEContextTransferdefaultApplicationProblemPlusJSONResponse) VisitUEContextTransferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RegistrationStatusUpdateRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *RegistrationStatusUpdateJSONRequestBody
}

type RegistrationStatusUpdateResponseObject interface {
	VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error
}

type RegistrationStatusUpdate200JSONResponse externalRef0.UeRegStatusUpdateRspData

func (response RegistrationStatusUpdate200JSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.UeRegStatusUpdateRspData(response))
}

type RegistrationStatusUpdate307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response RegistrationStatusUpdate307JSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type RegistrationStatusUpdate308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response RegistrationStatusUpdate308JSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type RegistrationStatusUpdate400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate400ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate403ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate404ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate411ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate413ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate415ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate429ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate500ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdate503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response RegistrationStatusUpdate503ApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type RegistrationStatusUpdatedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RegistrationStatusUpdatedefaultApplicationProblemPlusJSONResponse) VisitRegistrationStatusUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Namf_Communication Non UE N2 Info Subscribe service Operation
	// (POST /non-ue-n2-messages/subscriptions)
	NonUeN2InfoSubscribe(ctx context.Context, request NonUeN2InfoSubscribeRequestObject) (NonUeN2InfoSubscribeResponseObject, error)
	// Namf_Communication Non UE N2 Info UnSubscribe service Operation
	// (DELETE /non-ue-n2-messages/subscriptions/{n2NotifySubscriptionId})
	NonUeN2InfoUnSubscribe(ctx context.Context, request NonUeN2InfoUnSubscribeRequestObject) (NonUeN2InfoUnSubscribeResponseObject, error)
	// Namf_Communication Non UE N2 Message Transfer service Operation
	// (POST /non-ue-n2-messages/transfer)
	NonUeN2MessageTransfer(ctx context.Context, request NonUeN2MessageTransferRequestObject) (NonUeN2MessageTransferResponseObject, error)
	// Namf_Communication AMF Status Change Subscribe service Operation
	// (POST /subscriptions)
	AMFStatusChangeSubscribe(ctx context.Context, request AMFStatusChangeSubscribeRequestObject) (AMFStatusChangeSubscribeResponseObject, error)
	// Namf_Communication AMF Status Change UnSubscribe service Operation
	// (DELETE /subscriptions/{subscriptionId})
	AMFStatusChangeUnSubscribe(ctx context.Context, request AMFStatusChangeUnSubscribeRequestObject) (AMFStatusChangeUnSubscribeResponseObject, error)
	// Namf_Communication AMF Status Change Subscribe Modify service Operation
	// (PUT /subscriptions/{subscriptionId})
	AMFStatusChangeSubscribeModfy(ctx context.Context, request AMFStatusChangeSubscribeModfyRequestObject) (AMFStatusChangeSubscribeModfyResponseObject, error)
	// Namf_Communication CreateUEContext service Operation
	// (PUT /ue-contexts/{ueContextId})
	CreateUEContext(ctx context.Context, request CreateUEContextRequestObject) (CreateUEContextResponseObject, error)
	// Namf_Communication EBI Assignment service Operation
	// (POST /ue-contexts/{ueContextId}/assign-ebi)
	EBIAssignment(ctx context.Context, request EBIAssignmentRequestObject) (EBIAssignmentResponseObject, error)
	// Namf_Communication CancelRelocateUEContext service Operation
	// (POST /ue-contexts/{ueContextId}/cancel-relocate)
	CancelRelocateUEContext(ctx context.Context, request CancelRelocateUEContextRequestObject) (CancelRelocateUEContextResponseObject, error)
	// Namf_Communication N1N2 Message Transfer (UE Specific) service Operation
	// (POST /ue-contexts/{ueContextId}/n1-n2-messages)
	N1N2MessageTransfer(ctx context.Context, request N1N2MessageTransferRequestObject) (N1N2MessageTransferResponseObject, error)
	// Namf_Communication N1N2 Message Subscribe (UE Specific) service Operation
	// (POST /ue-contexts/{ueContextId}/n1-n2-messages/subscriptions)
	N1N2MessageSubscribe(ctx context.Context, request N1N2MessageSubscribeRequestObject) (N1N2MessageSubscribeResponseObject, error)
	// Namf_Communication N1N2 Message UnSubscribe (UE Specific) service Operation
	// (DELETE /ue-contexts/{ueContextId}/n1-n2-messages/subscriptions/{subscriptionId})
	N1N2MessageUnSubscribe(ctx context.Context, request N1N2MessageUnSubscribeRequestObject) (N1N2MessageUnSubscribeResponseObject, error)
	// Namf_Communication ReleaseUEContext service Operation
	// (POST /ue-contexts/{ueContextId}/release)
	ReleaseUEContext(ctx context.Context, request ReleaseUEContextRequestObject) (ReleaseUEContextResponseObject, error)
	// Namf_Communication RelocateUEContext service Operation
	// (POST /ue-contexts/{ueContextId}/relocate)
	RelocateUEContext(ctx context.Context, request RelocateUEContextRequestObject) (RelocateUEContextResponseObject, error)
	// Namf_Communication UEContextTransfer service Operation
	// (POST /ue-contexts/{ueContextId}/transfer)
	UEContextTransfer(ctx context.Context, request UEContextTransferRequestObject) (UEContextTransferResponseObject, error)
	// Namf_Communication RegistrationStatusUpdate service Operation
	// (POST /ue-contexts/{ueContextId}/transfer-update)
	RegistrationStatusUpdate(ctx context.Context, request RegistrationStatusUpdateRequestObject) (RegistrationStatusUpdateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// NonUeN2InfoSubscribe operation middleware
func (sh *strictHandler) NonUeN2InfoSubscribe(ctx *gin.Context) {
	var request NonUeN2InfoSubscribeRequestObject

	var body NonUeN2InfoSubscribeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NonUeN2InfoSubscribe(ctx, request.(NonUeN2InfoSubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NonUeN2InfoSubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NonUeN2InfoSubscribeResponseObject); ok {
		if err := validResponse.VisitNonUeN2InfoSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NonUeN2InfoUnSubscribe operation middleware
func (sh *strictHandler) NonUeN2InfoUnSubscribe(ctx *gin.Context, n2NotifySubscriptionId string) {
	var request NonUeN2InfoUnSubscribeRequestObject

	request.N2NotifySubscriptionId = n2NotifySubscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NonUeN2InfoUnSubscribe(ctx, request.(NonUeN2InfoUnSubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NonUeN2InfoUnSubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NonUeN2InfoUnSubscribeResponseObject); ok {
		if err := validResponse.VisitNonUeN2InfoUnSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NonUeN2MessageTransfer operation middleware
func (sh *strictHandler) NonUeN2MessageTransfer(ctx *gin.Context) {
	var request NonUeN2MessageTransferRequestObject

	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body NonUeN2MessageTransferJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NonUeN2MessageTransfer(ctx, request.(NonUeN2MessageTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NonUeN2MessageTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NonUeN2MessageTransferResponseObject); ok {
		if err := validResponse.VisitNonUeN2MessageTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AMFStatusChangeSubscribe operation middleware
func (sh *strictHandler) AMFStatusChangeSubscribe(ctx *gin.Context) {
	var request AMFStatusChangeSubscribeRequestObject

	var body AMFStatusChangeSubscribeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AMFStatusChangeSubscribe(ctx, request.(AMFStatusChangeSubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AMFStatusChangeSubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AMFStatusChangeSubscribeResponseObject); ok {
		if err := validResponse.VisitAMFStatusChangeSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AMFStatusChangeUnSubscribe operation middleware
func (sh *strictHandler) AMFStatusChangeUnSubscribe(ctx *gin.Context, subscriptionId string) {
	var request AMFStatusChangeUnSubscribeRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AMFStatusChangeUnSubscribe(ctx, request.(AMFStatusChangeUnSubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AMFStatusChangeUnSubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AMFStatusChangeUnSubscribeResponseObject); ok {
		if err := validResponse.VisitAMFStatusChangeUnSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AMFStatusChangeSubscribeModfy operation middleware
func (sh *strictHandler) AMFStatusChangeSubscribeModfy(ctx *gin.Context, subscriptionId string) {
	var request AMFStatusChangeSubscribeModfyRequestObject

	request.SubscriptionId = subscriptionId

	var body AMFStatusChangeSubscribeModfyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AMFStatusChangeSubscribeModfy(ctx, request.(AMFStatusChangeSubscribeModfyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AMFStatusChangeSubscribeModfy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AMFStatusChangeSubscribeModfyResponseObject); ok {
		if err := validResponse.VisitAMFStatusChangeSubscribeModfyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUEContext operation middleware
func (sh *strictHandler) CreateUEContext(ctx *gin.Context, ueContextId string) {
	var request CreateUEContextRequestObject

	request.UeContextId = ueContextId

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUEContext(ctx, request.(CreateUEContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUEContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUEContextResponseObject); ok {
		if err := validResponse.VisitCreateUEContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EBIAssignment operation middleware
func (sh *strictHandler) EBIAssignment(ctx *gin.Context, ueContextId string) {
	var request EBIAssignmentRequestObject

	request.UeContextId = ueContextId

	var body EBIAssignmentJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EBIAssignment(ctx, request.(EBIAssignmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EBIAssignment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EBIAssignmentResponseObject); ok {
		if err := validResponse.VisitEBIAssignmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CancelRelocateUEContext operation middleware
func (sh *strictHandler) CancelRelocateUEContext(ctx *gin.Context, ueContextId string) {
	var request CancelRelocateUEContextRequestObject

	request.UeContextId = ueContextId

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CancelRelocateUEContext(ctx, request.(CancelRelocateUEContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelRelocateUEContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CancelRelocateUEContextResponseObject); ok {
		if err := validResponse.VisitCancelRelocateUEContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// N1N2MessageTransfer operation middleware
func (sh *strictHandler) N1N2MessageTransfer(ctx *gin.Context, ueContextId string) {
	var request N1N2MessageTransferRequestObject

	request.UeContextId = ueContextId
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body N1N2MessageTransferJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.N1N2MessageTransfer(ctx, request.(N1N2MessageTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "N1N2MessageTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(N1N2MessageTransferResponseObject); ok {
		if err := validResponse.VisitN1N2MessageTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// N1N2MessageSubscribe operation middleware
func (sh *strictHandler) N1N2MessageSubscribe(ctx *gin.Context, ueContextId string) {
	var request N1N2MessageSubscribeRequestObject

	request.UeContextId = ueContextId

	var body N1N2MessageSubscribeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.N1N2MessageSubscribe(ctx, request.(N1N2MessageSubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "N1N2MessageSubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(N1N2MessageSubscribeResponseObject); ok {
		if err := validResponse.VisitN1N2MessageSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// N1N2MessageUnSubscribe operation middleware
func (sh *strictHandler) N1N2MessageUnSubscribe(ctx *gin.Context, ueContextId string, subscriptionId string) {
	var request N1N2MessageUnSubscribeRequestObject

	request.UeContextId = ueContextId
	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.N1N2MessageUnSubscribe(ctx, request.(N1N2MessageUnSubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "N1N2MessageUnSubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(N1N2MessageUnSubscribeResponseObject); ok {
		if err := validResponse.VisitN1N2MessageUnSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReleaseUEContext operation middleware
func (sh *strictHandler) ReleaseUEContext(ctx *gin.Context, ueContextId string) {
	var request ReleaseUEContextRequestObject

	request.UeContextId = ueContextId

	var body ReleaseUEContextJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReleaseUEContext(ctx, request.(ReleaseUEContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReleaseUEContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReleaseUEContextResponseObject); ok {
		if err := validResponse.VisitReleaseUEContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RelocateUEContext operation middleware
func (sh *strictHandler) RelocateUEContext(ctx *gin.Context, ueContextId string) {
	var request RelocateUEContextRequestObject

	request.UeContextId = ueContextId

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RelocateUEContext(ctx, request.(RelocateUEContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RelocateUEContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RelocateUEContextResponseObject); ok {
		if err := validResponse.VisitRelocateUEContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UEContextTransfer operation middleware
func (sh *strictHandler) UEContextTransfer(ctx *gin.Context, ueContextId string) {
	var request UEContextTransferRequestObject

	request.UeContextId = ueContextId
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body UEContextTransferJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UEContextTransfer(ctx, request.(UEContextTransferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UEContextTransfer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UEContextTransferResponseObject); ok {
		if err := validResponse.VisitUEContextTransferResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegistrationStatusUpdate operation middleware
func (sh *strictHandler) RegistrationStatusUpdate(ctx *gin.Context, ueContextId string) {
	var request RegistrationStatusUpdateRequestObject

	request.UeContextId = ueContextId

	var body RegistrationStatusUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegistrationStatusUpdate(ctx, request.(RegistrationStatusUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegistrationStatusUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegistrationStatusUpdateResponseObject); ok {
		if err := validResponse.VisitRegistrationStatusUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
