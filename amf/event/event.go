// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package event

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/nrf/management"
	externalRef2 "github.com/ShouheiNishi/openapi5g/nssf/selection"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for N5GsUserState.
const (
	N5GsUserStateCONNECTEDNOTREACHABLEFORPAGING N5GsUserState = "CONNECTED_NOT_REACHABLE_FOR_PAGING"
	N5GsUserStateCONNECTEDREACHABLEFORPAGING    N5GsUserState = "CONNECTED_REACHABLE_FOR_PAGING"
	N5GsUserStateDEREGISTERED                   N5GsUserState = "DEREGISTERED"
	N5GsUserStateNOTPROVIDEDFROMAMF             N5GsUserState = "NOT_PROVIDED_FROM_AMF"
)

// Defines values for AmfEventTrigger.
const (
	CONTINUOUS AmfEventTrigger = "CONTINUOUS"
	ONETIME    AmfEventTrigger = "ONE_TIME"
	PERIODIC   AmfEventTrigger = "PERIODIC"
)

// Defines values for AmfEventType.
const (
	ACCESSTYPEREPORT                   AmfEventType = "ACCESS_TYPE_REPORT"
	AVAILABILITYAFTERDDNFAILURE        AmfEventType = "AVAILABILITY_AFTER_DDN_FAILURE"
	COMMUNICATIONFAILUREREPORT         AmfEventType = "COMMUNICATION_FAILURE_REPORT"
	CONNECTIVITYSTATEREPORT            AmfEventType = "CONNECTIVITY_STATE_REPORT"
	FREQUENTMOBILITYREGISTRATIONREPORT AmfEventType = "FREQUENT_MOBILITY_REGISTRATION_REPORT"
	LOCATIONREPORT                     AmfEventType = "LOCATION_REPORT"
	LOSSOFCONNECTIVITY                 AmfEventType = "LOSS_OF_CONNECTIVITY"
	N5GSUSERSTATEREPORT                AmfEventType = "5GS_USER_STATE_REPORT"
	PRESENCEINAOIREPORT                AmfEventType = "PRESENCE_IN_AOI_REPORT"
	REACHABILITYREPORT                 AmfEventType = "REACHABILITY_REPORT"
	REGISTRATIONSTATEREPORT            AmfEventType = "REGISTRATION_STATE_REPORT"
	SUBSCRIPTIONIDADDITION             AmfEventType = "SUBSCRIPTION_ID_ADDITION"
	SUBSCRIPTIONIDCHANGE               AmfEventType = "SUBSCRIPTION_ID_CHANGE"
	TIMEZONEREPORT                     AmfEventType = "TIMEZONE_REPORT"
	TYPEALLOCATIONCODEREPORT           AmfEventType = "TYPE_ALLOCATION_CODE_REPORT"
	UESINAREAREPORT                    AmfEventType = "UES_IN_AREA_REPORT"
)

// Defines values for AmfUpdateEventOptionItemOp.
const (
	AmfUpdateEventOptionItemOpReplace AmfUpdateEventOptionItemOp = "replace"
)

// Defines values for AmfUpdateEventSubscriptionItemOp.
const (
	AmfUpdateEventSubscriptionItemOpAdd     AmfUpdateEventSubscriptionItemOp = "add"
	AmfUpdateEventSubscriptionItemOpRemove  AmfUpdateEventSubscriptionItemOp = "remove"
	AmfUpdateEventSubscriptionItemOpReplace AmfUpdateEventSubscriptionItemOp = "replace"
)

// Defines values for CmState.
const (
	CONNECTED CmState = "CONNECTED"
	IDLE      CmState = "IDLE"
)

// Defines values for LocationFilter.
const (
	CELLID  LocationFilter = "CELL_ID"
	GLI     LocationFilter = "GLI"
	N3IWF   LocationFilter = "N3IWF"
	TAI     LocationFilter = "TAI"
	TNAPID  LocationFilter = "TNAP_ID"
	TWAPID  LocationFilter = "TWAP_ID"
	UDPPORT LocationFilter = "UDP_PORT"
	UEIP    LocationFilter = "UE_IP"
)

// Defines values for LossOfConnectivityReason.
const (
	LossOfConnectivityReasonDEREGISTERED            LossOfConnectivityReason = "DEREGISTERED"
	LossOfConnectivityReasonMAXDETECTIONTIMEEXPIRED LossOfConnectivityReason = "MAX_DETECTION_TIME_EXPIRED"
	LossOfConnectivityReasonPURGED                  LossOfConnectivityReason = "PURGED"
)

// Defines values for ReachabilityFilter.
const (
	UEREACHABILITYSTATUSCHANGE ReachabilityFilter = "UE_REACHABILITY_STATUS_CHANGE"
	UEREACHABLEDLTRAFFIC       ReachabilityFilter = "UE_REACHABLE_DL_TRAFFIC"
)

// Defines values for RmState.
const (
	DEREGISTERED RmState = "DEREGISTERED"
	REGISTERED   RmState = "REGISTERED"
)

// Defines values for UeReachability.
const (
	REACHABLE      UeReachability = "REACHABLE"
	REGULATORYONLY UeReachability = "REGULATORY_ONLY"
	UNREACHABLE    UeReachability = "UNREACHABLE"
)

// N5GsUserState defines model for 5GsUserState.
type N5GsUserState string

// N5GsUserStateInfo defines model for 5GsUserStateInfo.
type N5GsUserStateInfo struct {
	N5gsUserState        N5GsUserState           `json:"5gsUserState"`
	AccessType           externalRef0.AccessType `json:"accessType"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// AmfCreateEventSubscription defines model for AmfCreateEventSubscription.
type AmfCreateEventSubscription struct {
	OldGuami             *externalRef0.Guami             `json:"oldGuami,omitempty"`
	Subscription         AmfEventSubscription            `json:"subscription"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AmfCreatedEventSubscription defines model for AmfCreatedEventSubscription.
type AmfCreatedEventSubscription struct {
	ReportList           *[]AmfEventReport               `json:"reportList,omitempty"`
	Subscription         AmfEventSubscription            `json:"subscription"`
	SubscriptionId       externalRef0.Uri                `json:"subscriptionId"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AmfEvent defines model for AmfEvent.
type AmfEvent struct {
	AreaList               *[]AmfEventArea           `json:"areaList,omitempty"`
	IdleStatusInd          *bool                     `json:"idleStatusInd,omitempty"`
	ImmediateFlag          *bool                     `json:"immediateFlag,omitempty"`
	LocationFilterList     *[]LocationFilter         `json:"locationFilterList,omitempty"`
	MaxReports             *int                      `json:"maxReports,omitempty"`
	MaxResponseTime        *externalRef0.DurationSec `json:"maxResponseTime,omitempty"`
	NextPeriodicReportTime *externalRef0.DateTime    `json:"nextPeriodicReportTime,omitempty"`
	ReachabilityFilter     *ReachabilityFilter       `json:"reachabilityFilter,omitempty"`

	// RefId Original reference TS29503_Nudm_EE.yaml#/components/schemas/ReferenceId
	RefId                 *interface{}           `json:"refId,omitempty"`
	ReportUeReachable     *bool                  `json:"reportUeReachable,omitempty"`
	TrafficDescriptorList *[]TrafficDescriptor   `json:"trafficDescriptorList,omitempty"`
	Type                  AmfEventType           `json:"type"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// AmfEventArea defines model for AmfEventArea.
type AmfEventArea struct {
	LadnInfo             *LadnInfo                  `json:"ladnInfo,omitempty"`
	NsiId                *externalRef2.NsiId        `json:"nsiId,omitempty"`
	PresenceInfo         *externalRef0.PresenceInfo `json:"presenceInfo,omitempty"`
	SNssai               *externalRef0.Snssai       `json:"sNssai,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// AmfEventMode defines model for AmfEventMode.
type AmfEventMode struct {
	Expiry               *externalRef0.DateTime      `json:"expiry,omitempty"`
	MaxReports           *int                        `json:"maxReports,omitempty"`
	RepPeriod            *externalRef0.DurationSec   `json:"repPeriod,omitempty"`
	SampRatio            *externalRef0.SamplingRatio `json:"sampRatio,omitempty"`
	Trigger              AmfEventTrigger             `json:"trigger"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// AmfEventNotification defines model for AmfEventNotification.
type AmfEventNotification struct {
	EventSubsSyncInfo             *AmfEventSubsSyncInfo  `json:"eventSubsSyncInfo,omitempty"`
	NotifyCorrelationId           *string                `json:"notifyCorrelationId,omitempty"`
	ReportList                    *[]AmfEventReport      `json:"reportList,omitempty"`
	SubsChangeNotifyCorrelationId *string                `json:"subsChangeNotifyCorrelationId,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// AmfEventReport defines model for AmfEventReport.
type AmfEventReport struct {
	N5gsUserStateList    *[]N5GsUserStateInfo       `json:"5gsUserStateList,omitempty"`
	AccessTypeList       *[]externalRef0.AccessType `json:"accessTypeList,omitempty"`
	AdditionalLocation   *externalRef0.UserLocation `json:"additionalLocation,omitempty"`
	AnyUe                *bool                      `json:"anyUe,omitempty"`
	AreaList             *[]AmfEventArea            `json:"areaList,omitempty"`
	CmInfoList           *[]CmInfo                  `json:"cmInfoList,omitempty"`
	CommFailure          *CommunicationFailure      `json:"commFailure,omitempty"`
	Gpsi                 *externalRef0.Gpsi         `json:"gpsi,omitempty"`
	IdleStatusIndication *IdleStatusIndication      `json:"idleStatusIndication,omitempty"`
	Location             *externalRef0.UserLocation `json:"location,omitempty"`
	LossOfConnectReason  *LossOfConnectivityReason  `json:"lossOfConnectReason,omitempty"`
	MaxAvailabilityTime  *externalRef0.DateTime     `json:"maxAvailabilityTime,omitempty"`
	NumberOfUes          *int                       `json:"numberOfUes,omitempty"`
	Pei                  *externalRef0.Pei          `json:"pei,omitempty"`
	Reachability         *UeReachability            `json:"reachability,omitempty"`

	// RefId Original reference TS29503_Nudm_EE.yaml#/components/schemas/ReferenceId
	RefId                *interface{}           `json:"refId,omitempty"`
	RegistrationNumber   *int                   `json:"registrationNumber,omitempty"`
	RmInfoList           *[]RmInfo              `json:"rmInfoList,omitempty"`
	State                AmfEventState          `json:"state"`
	SubscriptionId       *externalRef0.Uri      `json:"subscriptionId,omitempty"`
	Supi                 *externalRef0.Supi     `json:"supi,omitempty"`
	TimeStamp            externalRef0.DateTime  `json:"timeStamp"`
	Timezone             *externalRef0.TimeZone `json:"timezone,omitempty"`
	Type                 AmfEventType           `json:"type"`
	TypeCode             *string                `json:"typeCode,omitempty"`
	UeIdExt              *[]UEIdExt             `json:"ueIdExt,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventState defines model for AmfEventState.
type AmfEventState struct {
	Active               bool                      `json:"active"`
	RemainDuration       *externalRef0.DurationSec `json:"remainDuration,omitempty"`
	RemainReports        *int                      `json:"remainReports,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// AmfEventSubsSyncInfo defines model for AmfEventSubsSyncInfo.
type AmfEventSubsSyncInfo struct {
	SubscriptionList     []AmfEventSubscriptionInfo `json:"subscriptionList"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// AmfEventSubscription defines model for AmfEventSubscription.
type AmfEventSubscription struct {
	AnyUE               *bool                     `json:"anyUE,omitempty"`
	EventList           []AmfEvent                `json:"eventList"`
	EventNotifyUri      externalRef0.Uri          `json:"eventNotifyUri"`
	Gpsi                *externalRef0.Gpsi        `json:"gpsi,omitempty"`
	GroupId             *externalRef0.GroupId     `json:"groupId,omitempty"`
	NfId                externalRef0.NfInstanceId `json:"nfId"`
	NotifyCorrelationId string                    `json:"notifyCorrelationId"`
	Options             *AmfEventMode             `json:"options,omitempty"`
	Pei                 *externalRef0.Pei         `json:"pei,omitempty"`

	// SourceNfType NF types known to NRF
	SourceNfType                  *externalRef1.NFType   `json:"sourceNfType,omitempty"`
	SubsChangeNotifyCorrelationId *string                `json:"subsChangeNotifyCorrelationId,omitempty"`
	SubsChangeNotifyUri           *externalRef0.Uri      `json:"subsChangeNotifyUri,omitempty"`
	Supi                          *externalRef0.Supi     `json:"supi,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// AmfEventSubscriptionInfo defines model for AmfEventSubscriptionInfo.
type AmfEventSubscriptionInfo struct {
	NotifyCorrelationId  *string                `json:"notifyCorrelationId,omitempty"`
	OldSubId             *externalRef0.Uri      `json:"oldSubId,omitempty"`
	RefIdList            []interface{}          `json:"refIdList"`
	SubId                externalRef0.Uri       `json:"subId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventTrigger defines model for AmfEventTrigger.
type AmfEventTrigger string

// AmfEventType defines model for AmfEventType.
type AmfEventType string

// AmfUpdateEventOptionItem defines model for AmfUpdateEventOptionItem.
type AmfUpdateEventOptionItem struct {
	Op                   AmfUpdateEventOptionItemOp `json:"op"`
	Path                 string                     `json:"path"`
	Value                externalRef0.DateTime      `json:"value"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// AmfUpdateEventOptionItemOp defines model for AmfUpdateEventOptionItem.Op.
type AmfUpdateEventOptionItemOp string

// AmfUpdateEventSubscriptionItem defines model for AmfUpdateEventSubscriptionItem.
type AmfUpdateEventSubscriptionItem struct {
	Op                   AmfUpdateEventSubscriptionItemOp `json:"op"`
	Path                 string                           `json:"path"`
	Value                *AmfEvent                        `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// AmfUpdateEventSubscriptionItemOp defines model for AmfUpdateEventSubscriptionItem.Op.
type AmfUpdateEventSubscriptionItemOp string

// AmfUpdatedEventSubscription defines model for AmfUpdatedEventSubscription.
type AmfUpdatedEventSubscription struct {
	ReportList           *[]AmfEventReport      `json:"reportList,omitempty"`
	Subscription         AmfEventSubscription   `json:"subscription"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CmInfo defines model for CmInfo.
type CmInfo struct {
	AccessType           externalRef0.AccessType `json:"accessType"`
	CmState              CmState                 `json:"cmState"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// CmState defines model for CmState.
type CmState string

// CommunicationFailure defines model for CommunicationFailure.
type CommunicationFailure struct {
	NasReleaseCode       *string                 `json:"nasReleaseCode,omitempty"`
	RanReleaseCode       *externalRef0.NgApCause `json:"ranReleaseCode,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// IdleStatusIndication defines model for IdleStatusIndication.
type IdleStatusIndication struct {
	ActiveTime              *externalRef0.DurationSec `json:"activeTime,omitempty"`
	EdrxCycleLength         *int                      `json:"edrxCycleLength,omitempty"`
	SubsRegTimer            *externalRef0.DurationSec `json:"subsRegTimer,omitempty"`
	SuggestedNumOfDlPackets *int                      `json:"suggestedNumOfDlPackets,omitempty"`
	TimeStamp               *externalRef0.DateTime    `json:"timeStamp,omitempty"`
	AdditionalProperties    map[string]interface{}    `json:"-"`
}

// LadnInfo defines model for LadnInfo.
type LadnInfo struct {
	Ladn                 string                      `json:"ladn"`
	Presence             *externalRef0.PresenceState `json:"presence,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// LocationFilter defines model for LocationFilter.
type LocationFilter string

// LossOfConnectivityReason defines model for LossOfConnectivityReason.
type LossOfConnectivityReason string

// ReachabilityFilter defines model for ReachabilityFilter.
type ReachabilityFilter string

// RmInfo defines model for RmInfo.
type RmInfo struct {
	AccessType           externalRef0.AccessType `json:"accessType"`
	RmState              RmState                 `json:"rmState"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// RmState defines model for RmState.
type RmState string

// TrafficDescriptor defines model for TrafficDescriptor.
type TrafficDescriptor struct {
	DddTrafficDescriptorList *[]externalRef0.DddTrafficDescriptor `json:"dddTrafficDescriptorList,omitempty"`
	Dnn                      *externalRef0.Dnn                    `json:"dnn,omitempty"`
	SNssai                   *externalRef0.Snssai                 `json:"sNssai,omitempty"`
	AdditionalProperties     map[string]interface{}               `json:"-"`
}

// UEIdExt defines model for UEIdExt.
type UEIdExt struct {
	Gpsi                 *externalRef0.Gpsi     `json:"gpsi,omitempty"`
	Supi                 *externalRef0.Supi     `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeReachability defines model for UeReachability.
type UeReachability string

// ModifySubscriptionApplicationJSONPatchPlusJSONBody defines parameters for ModifySubscription.
type ModifySubscriptionApplicationJSONPatchPlusJSONBody struct {
	union json.RawMessage
}

// ModifySubscriptionApplicationJSONPatchPlusJSONBody0 defines parameters for ModifySubscription.
type ModifySubscriptionApplicationJSONPatchPlusJSONBody0 = []AmfUpdateEventSubscriptionItem

// ModifySubscriptionApplicationJSONPatchPlusJSONBody1 defines parameters for ModifySubscription.
type ModifySubscriptionApplicationJSONPatchPlusJSONBody1 = []AmfUpdateEventOptionItem

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = AmfCreateEventSubscription

// ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody defines body for ModifySubscription for application/json-patch+json ContentType.
type ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody ModifySubscriptionApplicationJSONPatchPlusJSONBody

// Getter for additional properties for N5GsUserStateInfo. Returns the specified
// element and whether it was found
func (a N5GsUserStateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N5GsUserStateInfo
func (a *N5GsUserStateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N5GsUserStateInfo to handle AdditionalProperties
func (a *N5GsUserStateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gsUserState"]; found {
		err = json.Unmarshal(raw, &a.N5gsUserState)
		if err != nil {
			return fmt.Errorf("error reading '5gsUserState': %w", err)
		}
		delete(object, "5gsUserState")
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N5GsUserStateInfo to handle AdditionalProperties
func (a N5GsUserStateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5gsUserState"], err = json.Marshal(a.N5gsUserState)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5gsUserState': %w", err)
	}

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfCreateEventSubscription. Returns the specified
// element and whether it was found
func (a AmfCreateEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfCreateEventSubscription
func (a *AmfCreateEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfCreateEventSubscription to handle AdditionalProperties
func (a *AmfCreateEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["subscription"]; found {
		err = json.Unmarshal(raw, &a.Subscription)
		if err != nil {
			return fmt.Errorf("error reading 'subscription': %w", err)
		}
		delete(object, "subscription")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfCreateEventSubscription to handle AdditionalProperties
func (a AmfCreateEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	object["subscription"], err = json.Marshal(a.Subscription)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscription': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfCreatedEventSubscription. Returns the specified
// element and whether it was found
func (a AmfCreatedEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfCreatedEventSubscription
func (a *AmfCreatedEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfCreatedEventSubscription to handle AdditionalProperties
func (a *AmfCreatedEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["reportList"]; found {
		err = json.Unmarshal(raw, &a.ReportList)
		if err != nil {
			return fmt.Errorf("error reading 'reportList': %w", err)
		}
		delete(object, "reportList")
	}

	if raw, found := object["subscription"]; found {
		err = json.Unmarshal(raw, &a.Subscription)
		if err != nil {
			return fmt.Errorf("error reading 'subscription': %w", err)
		}
		delete(object, "subscription")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfCreatedEventSubscription to handle AdditionalProperties
func (a AmfCreatedEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ReportList != nil {
		object["reportList"], err = json.Marshal(a.ReportList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportList': %w", err)
		}
	}

	object["subscription"], err = json.Marshal(a.Subscription)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscription': %w", err)
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEvent. Returns the specified
// element and whether it was found
func (a AmfEvent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEvent
func (a *AmfEvent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEvent to handle AdditionalProperties
func (a *AmfEvent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areaList"]; found {
		err = json.Unmarshal(raw, &a.AreaList)
		if err != nil {
			return fmt.Errorf("error reading 'areaList': %w", err)
		}
		delete(object, "areaList")
	}

	if raw, found := object["idleStatusInd"]; found {
		err = json.Unmarshal(raw, &a.IdleStatusInd)
		if err != nil {
			return fmt.Errorf("error reading 'idleStatusInd': %w", err)
		}
		delete(object, "idleStatusInd")
	}

	if raw, found := object["immediateFlag"]; found {
		err = json.Unmarshal(raw, &a.ImmediateFlag)
		if err != nil {
			return fmt.Errorf("error reading 'immediateFlag': %w", err)
		}
		delete(object, "immediateFlag")
	}

	if raw, found := object["locationFilterList"]; found {
		err = json.Unmarshal(raw, &a.LocationFilterList)
		if err != nil {
			return fmt.Errorf("error reading 'locationFilterList': %w", err)
		}
		delete(object, "locationFilterList")
	}

	if raw, found := object["maxReports"]; found {
		err = json.Unmarshal(raw, &a.MaxReports)
		if err != nil {
			return fmt.Errorf("error reading 'maxReports': %w", err)
		}
		delete(object, "maxReports")
	}

	if raw, found := object["maxResponseTime"]; found {
		err = json.Unmarshal(raw, &a.MaxResponseTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxResponseTime': %w", err)
		}
		delete(object, "maxResponseTime")
	}

	if raw, found := object["nextPeriodicReportTime"]; found {
		err = json.Unmarshal(raw, &a.NextPeriodicReportTime)
		if err != nil {
			return fmt.Errorf("error reading 'nextPeriodicReportTime': %w", err)
		}
		delete(object, "nextPeriodicReportTime")
	}

	if raw, found := object["reachabilityFilter"]; found {
		err = json.Unmarshal(raw, &a.ReachabilityFilter)
		if err != nil {
			return fmt.Errorf("error reading 'reachabilityFilter': %w", err)
		}
		delete(object, "reachabilityFilter")
	}

	if raw, found := object["refId"]; found {
		err = json.Unmarshal(raw, &a.RefId)
		if err != nil {
			return fmt.Errorf("error reading 'refId': %w", err)
		}
		delete(object, "refId")
	}

	if raw, found := object["reportUeReachable"]; found {
		err = json.Unmarshal(raw, &a.ReportUeReachable)
		if err != nil {
			return fmt.Errorf("error reading 'reportUeReachable': %w", err)
		}
		delete(object, "reportUeReachable")
	}

	if raw, found := object["trafficDescriptorList"]; found {
		err = json.Unmarshal(raw, &a.TrafficDescriptorList)
		if err != nil {
			return fmt.Errorf("error reading 'trafficDescriptorList': %w", err)
		}
		delete(object, "trafficDescriptorList")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEvent to handle AdditionalProperties
func (a AmfEvent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AreaList != nil {
		object["areaList"], err = json.Marshal(a.AreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaList': %w", err)
		}
	}

	if a.IdleStatusInd != nil {
		object["idleStatusInd"], err = json.Marshal(a.IdleStatusInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'idleStatusInd': %w", err)
		}
	}

	if a.ImmediateFlag != nil {
		object["immediateFlag"], err = json.Marshal(a.ImmediateFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immediateFlag': %w", err)
		}
	}

	if a.LocationFilterList != nil {
		object["locationFilterList"], err = json.Marshal(a.LocationFilterList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationFilterList': %w", err)
		}
	}

	if a.MaxReports != nil {
		object["maxReports"], err = json.Marshal(a.MaxReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxReports': %w", err)
		}
	}

	if a.MaxResponseTime != nil {
		object["maxResponseTime"], err = json.Marshal(a.MaxResponseTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxResponseTime': %w", err)
		}
	}

	if a.NextPeriodicReportTime != nil {
		object["nextPeriodicReportTime"], err = json.Marshal(a.NextPeriodicReportTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nextPeriodicReportTime': %w", err)
		}
	}

	if a.ReachabilityFilter != nil {
		object["reachabilityFilter"], err = json.Marshal(a.ReachabilityFilter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachabilityFilter': %w", err)
		}
	}

	if a.RefId != nil {
		object["refId"], err = json.Marshal(a.RefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refId': %w", err)
		}
	}

	if a.ReportUeReachable != nil {
		object["reportUeReachable"], err = json.Marshal(a.ReportUeReachable)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportUeReachable': %w", err)
		}
	}

	if a.TrafficDescriptorList != nil {
		object["trafficDescriptorList"], err = json.Marshal(a.TrafficDescriptorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficDescriptorList': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventArea. Returns the specified
// element and whether it was found
func (a AmfEventArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventArea
func (a *AmfEventArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventArea to handle AdditionalProperties
func (a *AmfEventArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ladnInfo"]; found {
		err = json.Unmarshal(raw, &a.LadnInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ladnInfo': %w", err)
		}
		delete(object, "ladnInfo")
	}

	if raw, found := object["nsiId"]; found {
		err = json.Unmarshal(raw, &a.NsiId)
		if err != nil {
			return fmt.Errorf("error reading 'nsiId': %w", err)
		}
		delete(object, "nsiId")
	}

	if raw, found := object["presenceInfo"]; found {
		err = json.Unmarshal(raw, &a.PresenceInfo)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInfo': %w", err)
		}
		delete(object, "presenceInfo")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventArea to handle AdditionalProperties
func (a AmfEventArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.LadnInfo != nil {
		object["ladnInfo"], err = json.Marshal(a.LadnInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ladnInfo': %w", err)
		}
	}

	if a.NsiId != nil {
		object["nsiId"], err = json.Marshal(a.NsiId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiId': %w", err)
		}
	}

	if a.PresenceInfo != nil {
		object["presenceInfo"], err = json.Marshal(a.PresenceInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInfo': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventMode. Returns the specified
// element and whether it was found
func (a AmfEventMode) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventMode
func (a *AmfEventMode) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventMode to handle AdditionalProperties
func (a *AmfEventMode) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["maxReports"]; found {
		err = json.Unmarshal(raw, &a.MaxReports)
		if err != nil {
			return fmt.Errorf("error reading 'maxReports': %w", err)
		}
		delete(object, "maxReports")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["sampRatio"]; found {
		err = json.Unmarshal(raw, &a.SampRatio)
		if err != nil {
			return fmt.Errorf("error reading 'sampRatio': %w", err)
		}
		delete(object, "sampRatio")
	}

	if raw, found := object["trigger"]; found {
		err = json.Unmarshal(raw, &a.Trigger)
		if err != nil {
			return fmt.Errorf("error reading 'trigger': %w", err)
		}
		delete(object, "trigger")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventMode to handle AdditionalProperties
func (a AmfEventMode) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if a.MaxReports != nil {
		object["maxReports"], err = json.Marshal(a.MaxReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxReports': %w", err)
		}
	}

	if a.RepPeriod != nil {
		object["repPeriod"], err = json.Marshal(a.RepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
		}
	}

	if a.SampRatio != nil {
		object["sampRatio"], err = json.Marshal(a.SampRatio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sampRatio': %w", err)
		}
	}

	object["trigger"], err = json.Marshal(a.Trigger)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trigger': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventNotification. Returns the specified
// element and whether it was found
func (a AmfEventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventNotification
func (a *AmfEventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventNotification to handle AdditionalProperties
func (a *AmfEventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventSubsSyncInfo"]; found {
		err = json.Unmarshal(raw, &a.EventSubsSyncInfo)
		if err != nil {
			return fmt.Errorf("error reading 'eventSubsSyncInfo': %w", err)
		}
		delete(object, "eventSubsSyncInfo")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["reportList"]; found {
		err = json.Unmarshal(raw, &a.ReportList)
		if err != nil {
			return fmt.Errorf("error reading 'reportList': %w", err)
		}
		delete(object, "reportList")
	}

	if raw, found := object["subsChangeNotifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyCorrelationId': %w", err)
		}
		delete(object, "subsChangeNotifyCorrelationId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventNotification to handle AdditionalProperties
func (a AmfEventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EventSubsSyncInfo != nil {
		object["eventSubsSyncInfo"], err = json.Marshal(a.EventSubsSyncInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventSubsSyncInfo': %w", err)
		}
	}

	if a.NotifyCorrelationId != nil {
		object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
		}
	}

	if a.ReportList != nil {
		object["reportList"], err = json.Marshal(a.ReportList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportList': %w", err)
		}
	}

	if a.SubsChangeNotifyCorrelationId != nil {
		object["subsChangeNotifyCorrelationId"], err = json.Marshal(a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyCorrelationId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventReport. Returns the specified
// element and whether it was found
func (a AmfEventReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventReport
func (a *AmfEventReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventReport to handle AdditionalProperties
func (a *AmfEventReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gsUserStateList"]; found {
		err = json.Unmarshal(raw, &a.N5gsUserStateList)
		if err != nil {
			return fmt.Errorf("error reading '5gsUserStateList': %w", err)
		}
		delete(object, "5gsUserStateList")
	}

	if raw, found := object["accessTypeList"]; found {
		err = json.Unmarshal(raw, &a.AccessTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'accessTypeList': %w", err)
		}
		delete(object, "accessTypeList")
	}

	if raw, found := object["additionalLocation"]; found {
		err = json.Unmarshal(raw, &a.AdditionalLocation)
		if err != nil {
			return fmt.Errorf("error reading 'additionalLocation': %w", err)
		}
		delete(object, "additionalLocation")
	}

	if raw, found := object["anyUe"]; found {
		err = json.Unmarshal(raw, &a.AnyUe)
		if err != nil {
			return fmt.Errorf("error reading 'anyUe': %w", err)
		}
		delete(object, "anyUe")
	}

	if raw, found := object["areaList"]; found {
		err = json.Unmarshal(raw, &a.AreaList)
		if err != nil {
			return fmt.Errorf("error reading 'areaList': %w", err)
		}
		delete(object, "areaList")
	}

	if raw, found := object["cmInfoList"]; found {
		err = json.Unmarshal(raw, &a.CmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'cmInfoList': %w", err)
		}
		delete(object, "cmInfoList")
	}

	if raw, found := object["commFailure"]; found {
		err = json.Unmarshal(raw, &a.CommFailure)
		if err != nil {
			return fmt.Errorf("error reading 'commFailure': %w", err)
		}
		delete(object, "commFailure")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["idleStatusIndication"]; found {
		err = json.Unmarshal(raw, &a.IdleStatusIndication)
		if err != nil {
			return fmt.Errorf("error reading 'idleStatusIndication': %w", err)
		}
		delete(object, "idleStatusIndication")
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if raw, found := object["lossOfConnectReason"]; found {
		err = json.Unmarshal(raw, &a.LossOfConnectReason)
		if err != nil {
			return fmt.Errorf("error reading 'lossOfConnectReason': %w", err)
		}
		delete(object, "lossOfConnectReason")
	}

	if raw, found := object["maxAvailabilityTime"]; found {
		err = json.Unmarshal(raw, &a.MaxAvailabilityTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxAvailabilityTime': %w", err)
		}
		delete(object, "maxAvailabilityTime")
	}

	if raw, found := object["numberOfUes"]; found {
		err = json.Unmarshal(raw, &a.NumberOfUes)
		if err != nil {
			return fmt.Errorf("error reading 'numberOfUes': %w", err)
		}
		delete(object, "numberOfUes")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["reachability"]; found {
		err = json.Unmarshal(raw, &a.Reachability)
		if err != nil {
			return fmt.Errorf("error reading 'reachability': %w", err)
		}
		delete(object, "reachability")
	}

	if raw, found := object["refId"]; found {
		err = json.Unmarshal(raw, &a.RefId)
		if err != nil {
			return fmt.Errorf("error reading 'refId': %w", err)
		}
		delete(object, "refId")
	}

	if raw, found := object["registrationNumber"]; found {
		err = json.Unmarshal(raw, &a.RegistrationNumber)
		if err != nil {
			return fmt.Errorf("error reading 'registrationNumber': %w", err)
		}
		delete(object, "registrationNumber")
	}

	if raw, found := object["rmInfoList"]; found {
		err = json.Unmarshal(raw, &a.RmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'rmInfoList': %w", err)
		}
		delete(object, "rmInfoList")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if raw, found := object["timezone"]; found {
		err = json.Unmarshal(raw, &a.Timezone)
		if err != nil {
			return fmt.Errorf("error reading 'timezone': %w", err)
		}
		delete(object, "timezone")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["typeCode"]; found {
		err = json.Unmarshal(raw, &a.TypeCode)
		if err != nil {
			return fmt.Errorf("error reading 'typeCode': %w", err)
		}
		delete(object, "typeCode")
	}

	if raw, found := object["ueIdExt"]; found {
		err = json.Unmarshal(raw, &a.UeIdExt)
		if err != nil {
			return fmt.Errorf("error reading 'ueIdExt': %w", err)
		}
		delete(object, "ueIdExt")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventReport to handle AdditionalProperties
func (a AmfEventReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gsUserStateList != nil {
		object["5gsUserStateList"], err = json.Marshal(a.N5gsUserStateList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gsUserStateList': %w", err)
		}
	}

	if a.AccessTypeList != nil {
		object["accessTypeList"], err = json.Marshal(a.AccessTypeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTypeList': %w", err)
		}
	}

	if a.AdditionalLocation != nil {
		object["additionalLocation"], err = json.Marshal(a.AdditionalLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalLocation': %w", err)
		}
	}

	if a.AnyUe != nil {
		object["anyUe"], err = json.Marshal(a.AnyUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUe': %w", err)
		}
	}

	if a.AreaList != nil {
		object["areaList"], err = json.Marshal(a.AreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaList': %w", err)
		}
	}

	if a.CmInfoList != nil {
		object["cmInfoList"], err = json.Marshal(a.CmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cmInfoList': %w", err)
		}
	}

	if a.CommFailure != nil {
		object["commFailure"], err = json.Marshal(a.CommFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commFailure': %w", err)
		}
	}

	if a.Gpsi != nil {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.IdleStatusIndication != nil {
		object["idleStatusIndication"], err = json.Marshal(a.IdleStatusIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'idleStatusIndication': %w", err)
		}
	}

	if a.Location != nil {
		object["location"], err = json.Marshal(a.Location)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'location': %w", err)
		}
	}

	if a.LossOfConnectReason != nil {
		object["lossOfConnectReason"], err = json.Marshal(a.LossOfConnectReason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lossOfConnectReason': %w", err)
		}
	}

	if a.MaxAvailabilityTime != nil {
		object["maxAvailabilityTime"], err = json.Marshal(a.MaxAvailabilityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxAvailabilityTime': %w", err)
		}
	}

	if a.NumberOfUes != nil {
		object["numberOfUes"], err = json.Marshal(a.NumberOfUes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numberOfUes': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.Reachability != nil {
		object["reachability"], err = json.Marshal(a.Reachability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachability': %w", err)
		}
	}

	if a.RefId != nil {
		object["refId"], err = json.Marshal(a.RefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refId': %w", err)
		}
	}

	if a.RegistrationNumber != nil {
		object["registrationNumber"], err = json.Marshal(a.RegistrationNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationNumber': %w", err)
		}
	}

	if a.RmInfoList != nil {
		object["rmInfoList"], err = json.Marshal(a.RmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rmInfoList': %w", err)
		}
	}

	object["state"], err = json.Marshal(a.State)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'state': %w", err)
	}

	if a.SubscriptionId != nil {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	if a.Timezone != nil {
		object["timezone"], err = json.Marshal(a.Timezone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timezone': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.TypeCode != nil {
		object["typeCode"], err = json.Marshal(a.TypeCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'typeCode': %w", err)
		}
	}

	if a.UeIdExt != nil {
		object["ueIdExt"], err = json.Marshal(a.UeIdExt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIdExt': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventState. Returns the specified
// element and whether it was found
func (a AmfEventState) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventState
func (a *AmfEventState) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventState to handle AdditionalProperties
func (a *AmfEventState) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["active"]; found {
		err = json.Unmarshal(raw, &a.Active)
		if err != nil {
			return fmt.Errorf("error reading 'active': %w", err)
		}
		delete(object, "active")
	}

	if raw, found := object["remainDuration"]; found {
		err = json.Unmarshal(raw, &a.RemainDuration)
		if err != nil {
			return fmt.Errorf("error reading 'remainDuration': %w", err)
		}
		delete(object, "remainDuration")
	}

	if raw, found := object["remainReports"]; found {
		err = json.Unmarshal(raw, &a.RemainReports)
		if err != nil {
			return fmt.Errorf("error reading 'remainReports': %w", err)
		}
		delete(object, "remainReports")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventState to handle AdditionalProperties
func (a AmfEventState) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["active"], err = json.Marshal(a.Active)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'active': %w", err)
	}

	if a.RemainDuration != nil {
		object["remainDuration"], err = json.Marshal(a.RemainDuration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainDuration': %w", err)
		}
	}

	if a.RemainReports != nil {
		object["remainReports"], err = json.Marshal(a.RemainReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainReports': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventSubsSyncInfo. Returns the specified
// element and whether it was found
func (a AmfEventSubsSyncInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventSubsSyncInfo
func (a *AmfEventSubsSyncInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventSubsSyncInfo to handle AdditionalProperties
func (a *AmfEventSubsSyncInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["subscriptionList"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionList)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionList': %w", err)
		}
		delete(object, "subscriptionList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventSubsSyncInfo to handle AdditionalProperties
func (a AmfEventSubsSyncInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["subscriptionList"], err = json.Marshal(a.SubscriptionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventSubscription. Returns the specified
// element and whether it was found
func (a AmfEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventSubscription
func (a *AmfEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventSubscription to handle AdditionalProperties
func (a *AmfEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anyUE"]; found {
		err = json.Unmarshal(raw, &a.AnyUE)
		if err != nil {
			return fmt.Errorf("error reading 'anyUE': %w", err)
		}
		delete(object, "anyUE")
	}

	if raw, found := object["eventList"]; found {
		err = json.Unmarshal(raw, &a.EventList)
		if err != nil {
			return fmt.Errorf("error reading 'eventList': %w", err)
		}
		delete(object, "eventList")
	}

	if raw, found := object["eventNotifyUri"]; found {
		err = json.Unmarshal(raw, &a.EventNotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'eventNotifyUri': %w", err)
		}
		delete(object, "eventNotifyUri")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["nfId"]; found {
		err = json.Unmarshal(raw, &a.NfId)
		if err != nil {
			return fmt.Errorf("error reading 'nfId': %w", err)
		}
		delete(object, "nfId")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["options"]; found {
		err = json.Unmarshal(raw, &a.Options)
		if err != nil {
			return fmt.Errorf("error reading 'options': %w", err)
		}
		delete(object, "options")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["sourceNfType"]; found {
		err = json.Unmarshal(raw, &a.SourceNfType)
		if err != nil {
			return fmt.Errorf("error reading 'sourceNfType': %w", err)
		}
		delete(object, "sourceNfType")
	}

	if raw, found := object["subsChangeNotifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyCorrelationId': %w", err)
		}
		delete(object, "subsChangeNotifyCorrelationId")
	}

	if raw, found := object["subsChangeNotifyUri"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyUri': %w", err)
		}
		delete(object, "subsChangeNotifyUri")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventSubscription to handle AdditionalProperties
func (a AmfEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnyUE != nil {
		object["anyUE"], err = json.Marshal(a.AnyUE)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUE': %w", err)
		}
	}

	object["eventList"], err = json.Marshal(a.EventList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventList': %w", err)
	}

	object["eventNotifyUri"], err = json.Marshal(a.EventNotifyUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventNotifyUri': %w", err)
	}

	if a.Gpsi != nil {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	object["nfId"], err = json.Marshal(a.NfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfId': %w", err)
	}

	object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
	}

	if a.Options != nil {
		object["options"], err = json.Marshal(a.Options)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'options': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.SourceNfType != nil {
		object["sourceNfType"], err = json.Marshal(a.SourceNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceNfType': %w", err)
		}
	}

	if a.SubsChangeNotifyCorrelationId != nil {
		object["subsChangeNotifyCorrelationId"], err = json.Marshal(a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyCorrelationId': %w", err)
		}
	}

	if a.SubsChangeNotifyUri != nil {
		object["subsChangeNotifyUri"], err = json.Marshal(a.SubsChangeNotifyUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyUri': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventSubscriptionInfo. Returns the specified
// element and whether it was found
func (a AmfEventSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventSubscriptionInfo
func (a *AmfEventSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventSubscriptionInfo to handle AdditionalProperties
func (a *AmfEventSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["oldSubId"]; found {
		err = json.Unmarshal(raw, &a.OldSubId)
		if err != nil {
			return fmt.Errorf("error reading 'oldSubId': %w", err)
		}
		delete(object, "oldSubId")
	}

	if raw, found := object["refIdList"]; found {
		err = json.Unmarshal(raw, &a.RefIdList)
		if err != nil {
			return fmt.Errorf("error reading 'refIdList': %w", err)
		}
		delete(object, "refIdList")
	}

	if raw, found := object["subId"]; found {
		err = json.Unmarshal(raw, &a.SubId)
		if err != nil {
			return fmt.Errorf("error reading 'subId': %w", err)
		}
		delete(object, "subId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventSubscriptionInfo to handle AdditionalProperties
func (a AmfEventSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NotifyCorrelationId != nil {
		object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
		}
	}

	if a.OldSubId != nil {
		object["oldSubId"], err = json.Marshal(a.OldSubId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSubId': %w", err)
		}
	}

	object["refIdList"], err = json.Marshal(a.RefIdList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refIdList': %w", err)
	}

	object["subId"], err = json.Marshal(a.SubId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfUpdateEventOptionItem. Returns the specified
// element and whether it was found
func (a AmfUpdateEventOptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfUpdateEventOptionItem
func (a *AmfUpdateEventOptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfUpdateEventOptionItem to handle AdditionalProperties
func (a *AmfUpdateEventOptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfUpdateEventOptionItem to handle AdditionalProperties
func (a AmfUpdateEventOptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfUpdateEventSubscriptionItem. Returns the specified
// element and whether it was found
func (a AmfUpdateEventSubscriptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfUpdateEventSubscriptionItem
func (a *AmfUpdateEventSubscriptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfUpdateEventSubscriptionItem to handle AdditionalProperties
func (a *AmfUpdateEventSubscriptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfUpdateEventSubscriptionItem to handle AdditionalProperties
func (a AmfUpdateEventSubscriptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfUpdatedEventSubscription. Returns the specified
// element and whether it was found
func (a AmfUpdatedEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfUpdatedEventSubscription
func (a *AmfUpdatedEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfUpdatedEventSubscription to handle AdditionalProperties
func (a *AmfUpdatedEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["reportList"]; found {
		err = json.Unmarshal(raw, &a.ReportList)
		if err != nil {
			return fmt.Errorf("error reading 'reportList': %w", err)
		}
		delete(object, "reportList")
	}

	if raw, found := object["subscription"]; found {
		err = json.Unmarshal(raw, &a.Subscription)
		if err != nil {
			return fmt.Errorf("error reading 'subscription': %w", err)
		}
		delete(object, "subscription")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfUpdatedEventSubscription to handle AdditionalProperties
func (a AmfUpdatedEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ReportList != nil {
		object["reportList"], err = json.Marshal(a.ReportList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportList': %w", err)
		}
	}

	object["subscription"], err = json.Marshal(a.Subscription)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscription': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CmInfo. Returns the specified
// element and whether it was found
func (a CmInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CmInfo
func (a *CmInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CmInfo to handle AdditionalProperties
func (a *CmInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["cmState"]; found {
		err = json.Unmarshal(raw, &a.CmState)
		if err != nil {
			return fmt.Errorf("error reading 'cmState': %w", err)
		}
		delete(object, "cmState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CmInfo to handle AdditionalProperties
func (a CmInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	object["cmState"], err = json.Marshal(a.CmState)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cmState': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommunicationFailure. Returns the specified
// element and whether it was found
func (a CommunicationFailure) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommunicationFailure
func (a *CommunicationFailure) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommunicationFailure to handle AdditionalProperties
func (a *CommunicationFailure) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nasReleaseCode"]; found {
		err = json.Unmarshal(raw, &a.NasReleaseCode)
		if err != nil {
			return fmt.Errorf("error reading 'nasReleaseCode': %w", err)
		}
		delete(object, "nasReleaseCode")
	}

	if raw, found := object["ranReleaseCode"]; found {
		err = json.Unmarshal(raw, &a.RanReleaseCode)
		if err != nil {
			return fmt.Errorf("error reading 'ranReleaseCode': %w", err)
		}
		delete(object, "ranReleaseCode")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommunicationFailure to handle AdditionalProperties
func (a CommunicationFailure) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NasReleaseCode != nil {
		object["nasReleaseCode"], err = json.Marshal(a.NasReleaseCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nasReleaseCode': %w", err)
		}
	}

	if a.RanReleaseCode != nil {
		object["ranReleaseCode"], err = json.Marshal(a.RanReleaseCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranReleaseCode': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IdleStatusIndication. Returns the specified
// element and whether it was found
func (a IdleStatusIndication) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IdleStatusIndication
func (a *IdleStatusIndication) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IdleStatusIndication to handle AdditionalProperties
func (a *IdleStatusIndication) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["activeTime"]; found {
		err = json.Unmarshal(raw, &a.ActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'activeTime': %w", err)
		}
		delete(object, "activeTime")
	}

	if raw, found := object["edrxCycleLength"]; found {
		err = json.Unmarshal(raw, &a.EdrxCycleLength)
		if err != nil {
			return fmt.Errorf("error reading 'edrxCycleLength': %w", err)
		}
		delete(object, "edrxCycleLength")
	}

	if raw, found := object["subsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.SubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'subsRegTimer': %w", err)
		}
		delete(object, "subsRegTimer")
	}

	if raw, found := object["suggestedNumOfDlPackets"]; found {
		err = json.Unmarshal(raw, &a.SuggestedNumOfDlPackets)
		if err != nil {
			return fmt.Errorf("error reading 'suggestedNumOfDlPackets': %w", err)
		}
		delete(object, "suggestedNumOfDlPackets")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IdleStatusIndication to handle AdditionalProperties
func (a IdleStatusIndication) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ActiveTime != nil {
		object["activeTime"], err = json.Marshal(a.ActiveTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'activeTime': %w", err)
		}
	}

	if a.EdrxCycleLength != nil {
		object["edrxCycleLength"], err = json.Marshal(a.EdrxCycleLength)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'edrxCycleLength': %w", err)
		}
	}

	if a.SubsRegTimer != nil {
		object["subsRegTimer"], err = json.Marshal(a.SubsRegTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsRegTimer': %w", err)
		}
	}

	if a.SuggestedNumOfDlPackets != nil {
		object["suggestedNumOfDlPackets"], err = json.Marshal(a.SuggestedNumOfDlPackets)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suggestedNumOfDlPackets': %w", err)
		}
	}

	if a.TimeStamp != nil {
		object["timeStamp"], err = json.Marshal(a.TimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LadnInfo. Returns the specified
// element and whether it was found
func (a LadnInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LadnInfo
func (a *LadnInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LadnInfo to handle AdditionalProperties
func (a *LadnInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ladn"]; found {
		err = json.Unmarshal(raw, &a.Ladn)
		if err != nil {
			return fmt.Errorf("error reading 'ladn': %w", err)
		}
		delete(object, "ladn")
	}

	if raw, found := object["presence"]; found {
		err = json.Unmarshal(raw, &a.Presence)
		if err != nil {
			return fmt.Errorf("error reading 'presence': %w", err)
		}
		delete(object, "presence")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LadnInfo to handle AdditionalProperties
func (a LadnInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ladn"], err = json.Marshal(a.Ladn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ladn': %w", err)
	}

	if a.Presence != nil {
		object["presence"], err = json.Marshal(a.Presence)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presence': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RmInfo. Returns the specified
// element and whether it was found
func (a RmInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RmInfo
func (a *RmInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RmInfo to handle AdditionalProperties
func (a *RmInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["rmState"]; found {
		err = json.Unmarshal(raw, &a.RmState)
		if err != nil {
			return fmt.Errorf("error reading 'rmState': %w", err)
		}
		delete(object, "rmState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RmInfo to handle AdditionalProperties
func (a RmInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	object["rmState"], err = json.Marshal(a.RmState)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rmState': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficDescriptor. Returns the specified
// element and whether it was found
func (a TrafficDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficDescriptor
func (a *TrafficDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficDescriptor to handle AdditionalProperties
func (a *TrafficDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dddTrafficDescriptorList"]; found {
		err = json.Unmarshal(raw, &a.DddTrafficDescriptorList)
		if err != nil {
			return fmt.Errorf("error reading 'dddTrafficDescriptorList': %w", err)
		}
		delete(object, "dddTrafficDescriptorList")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficDescriptor to handle AdditionalProperties
func (a TrafficDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DddTrafficDescriptorList != nil {
		object["dddTrafficDescriptorList"], err = json.Marshal(a.DddTrafficDescriptorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddTrafficDescriptorList': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEIdExt. Returns the specified
// element and whether it was found
func (a UEIdExt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEIdExt
func (a *UEIdExt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEIdExt to handle AdditionalProperties
func (a *UEIdExt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEIdExt to handle AdditionalProperties
func (a UEIdExt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Gpsi != nil {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateSubscriptionWithBody request with any body
	CreateSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSubscription(ctx context.Context, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubscription request
	DeleteSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifySubscriptionWithBody request with any body
	ModifySubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifySubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, subscriptionId string, body ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSubscription(ctx context.Context, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubscriptionRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySubscriptionRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySubscriptionWithApplicationJSONPatchPlusJSONBody(ctx context.Context, subscriptionId string, body ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySubscriptionRequestWithApplicationJSONPatchPlusJSONBody(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateSubscriptionRequest calls the generic CreateSubscription builder with application/json body
func NewCreateSubscriptionRequest(server string, body CreateSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSubscriptionRequestWithBody generates requests for CreateSubscription with any type of body
func NewCreateSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubscriptionRequest generates requests for DeleteSubscription
func NewDeleteSubscriptionRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifySubscriptionRequestWithApplicationJSONPatchPlusJSONBody calls the generic ModifySubscription builder with application/json-patch+json body
func NewModifySubscriptionRequestWithApplicationJSONPatchPlusJSONBody(server string, subscriptionId string, body ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifySubscriptionRequestWithBody(server, subscriptionId, "application/json-patch+json", bodyReader)
}

// NewModifySubscriptionRequestWithBody generates requests for ModifySubscription with any type of body
func NewModifySubscriptionRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateSubscriptionWithBodyWithResponse request with any body
	CreateSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubscriptionResponse, error)

	CreateSubscriptionWithResponse(ctx context.Context, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubscriptionResponse, error)

	// DeleteSubscriptionWithResponse request
	DeleteSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteSubscriptionResponse, error)

	// ModifySubscriptionWithBodyWithResponse request with any body
	ModifySubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySubscriptionResponse, error)

	ModifySubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, body ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySubscriptionResponse, error)
}

type CreateSubscriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *AmfCreatedEventSubscription
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON411 *externalRef0.N411
	ApplicationproblemJSON413 *externalRef0.N413
	ApplicationproblemJSON415 *externalRef0.N415
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r CreateSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubscriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON411 *externalRef0.N411
	ApplicationproblemJSON413 *externalRef0.N413
	ApplicationproblemJSON415 *externalRef0.N415
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r DeleteSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifySubscriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AmfUpdatedEventSubscription
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON411 *externalRef0.N411
	ApplicationproblemJSON413 *externalRef0.N413
	ApplicationproblemJSON415 *externalRef0.N415
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r ModifySubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifySubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateSubscriptionResponse
func (c *ClientWithResponses) CreateSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSubscriptionResponse, error) {
	rsp, err := c.CreateSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateSubscriptionWithResponse(ctx context.Context, body CreateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSubscriptionResponse, error) {
	rsp, err := c.CreateSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSubscriptionResponse(rsp)
}

// DeleteSubscriptionWithResponse request returning *DeleteSubscriptionResponse
func (c *ClientWithResponses) DeleteSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteSubscriptionResponse, error) {
	rsp, err := c.DeleteSubscription(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubscriptionResponse(rsp)
}

// ModifySubscriptionWithBodyWithResponse request with arbitrary body returning *ModifySubscriptionResponse
func (c *ClientWithResponses) ModifySubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySubscriptionResponse, error) {
	rsp, err := c.ModifySubscriptionWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ModifySubscriptionWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, body ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySubscriptionResponse, error) {
	rsp, err := c.ModifySubscriptionWithApplicationJSONPatchPlusJSONBody(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySubscriptionResponse(rsp)
}

// ParseCreateSubscriptionResponse parses an HTTP response from a CreateSubscriptionWithResponse call
func ParseCreateSubscriptionResponse(rsp *http.Response) (*CreateSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AmfCreatedEventSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseDeleteSubscriptionResponse parses an HTTP response from a DeleteSubscriptionWithResponse call
func ParseDeleteSubscriptionResponse(rsp *http.Response) (*DeleteSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseModifySubscriptionResponse parses an HTTP response from a ModifySubscriptionWithResponse call
func ParseModifySubscriptionResponse(rsp *http.Response) (*ModifySubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifySubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AmfUpdatedEventSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Namf_EventExposure Subscribe service Operation
	// (POST /subscriptions)
	CreateSubscription(c *gin.Context)
	// Namf_EventExposure Unsubscribe service Operation
	// (DELETE /subscriptions/{subscriptionId})
	DeleteSubscription(c *gin.Context, subscriptionId string)
	// Namf_EventExposure Subscribe Modify service Operation
	// (PATCH /subscriptions/{subscriptionId})
	ModifySubscription(c *gin.Context, subscriptionId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-evts"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSubscription(c)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-evts"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSubscription(c, subscriptionId)
}

// ModifySubscription operation middleware
func (siw *ServerInterfaceWrapper) ModifySubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-evts"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifySubscription(c, subscriptionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/subscriptions", wrapper.CreateSubscription)
	router.DELETE(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.DeleteSubscription)
	router.PATCH(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.ModifySubscription)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201ResponseHeaders struct {
	Location string
}

type CreateSubscription201JSONResponse struct {
	Body    AmfCreatedEventSubscription
	Headers CreateSubscription201ResponseHeaders
}

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSubscription307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response CreateSubscription307JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSubscription308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response CreateSubscription308JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription403ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription411ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription413ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription415ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription429ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateSubscription503ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptiondefaultResponse struct {
	StatusCode int
}

func (response CreateSubscriptiondefaultResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteSubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription204Response struct {
}

func (response DeleteSubscription204Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSubscription307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeleteSubscription307JSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSubscription308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeleteSubscription308JSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription411ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription413ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription415ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptiondefaultResponse struct {
	StatusCode int
}

func (response DeleteSubscriptiondefaultResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ModifySubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Body           *ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody
}

type ModifySubscriptionResponseObject interface {
	VisitModifySubscriptionResponse(w http.ResponseWriter) error
}

type ModifySubscription200JSONResponse AmfUpdatedEventSubscription

func (response ModifySubscription200JSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ModifySubscription307JSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifySubscription308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ModifySubscription308JSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifySubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription400ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription403ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription404ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription411ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription413ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription415ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription429ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription500ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ModifySubscription503ApplicationProblemPlusJSONResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ModifySubscriptiondefaultResponse struct {
	StatusCode int
}

func (response ModifySubscriptiondefaultResponse) VisitModifySubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Namf_EventExposure Subscribe service Operation
	// (POST /subscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Namf_EventExposure Unsubscribe service Operation
	// (DELETE /subscriptions/{subscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Namf_EventExposure Subscribe Modify service Operation
	// (PATCH /subscriptions/{subscriptionId})
	ModifySubscription(ctx context.Context, request ModifySubscriptionRequestObject) (ModifySubscriptionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(ctx *gin.Context) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(ctx *gin.Context, subscriptionId string) {
	var request DeleteSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifySubscription operation middleware
func (sh *strictHandler) ModifySubscription(ctx *gin.Context, subscriptionId string) {
	var request ModifySubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	var body ModifySubscriptionApplicationJSONPatchPlusJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifySubscription(ctx, request.(ModifySubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifySubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifySubscriptionResponseObject); ok {
		if err := validResponse.VisitModifySubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
