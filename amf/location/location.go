// Package location provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package location

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/udm/uecm"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for LocationEvent.
const (
	ACTIVATIONOFDEFERREDLOCATION   LocationEvent = "ACTIVATION_OF_DEFERRED_LOCATION"
	CANCELLATIONOFDEFERREDLOCATION LocationEvent = "CANCELLATION_OF_DEFERRED_LOCATION"
	EMERGENCYCALLHANDOVER          LocationEvent = "EMERGENCY_CALL_HANDOVER"
	EMERGENCYCALLORIGINATION       LocationEvent = "EMERGENCY_CALL_ORIGINATION"
	EMERGENCYCALLRELEASE           LocationEvent = "EMERGENCY_CALL_RELEASE"
	UEMOBILITYFORDEFERREDLOCATION  LocationEvent = "UE_MOBILITY_FOR_DEFERRED_LOCATION"
)

// Defines values for LocationPrivacyVerResult.
const (
	LOCATIONALLOWED    LocationPrivacyVerResult = "LOCATION_ALLOWED"
	LOCATIONNOTALLOWED LocationPrivacyVerResult = "LOCATION_NOT_ALLOWED"
	RESPONSETIMEOUT    LocationPrivacyVerResult = "RESPONSE_TIME_OUT"
)

// Defines values for LocationType.
const (
	CURRENTLOCATION              LocationType = "CURRENT_LOCATION"
	CURRENTORLASTKNOWNLOCATION   LocationType = "CURRENT_OR_LAST_KNOWN_LOCATION"
	DEFERREDLOCATION             LocationType = "DEFERRED_LOCATION"
	NOTIFICATIONVERIFICATIONONLY LocationType = "NOTIFICATION_VERIFICATION_ONLY"
)

// CancelPosInfo defines model for CancelPosInfo.
type CancelPosInfo struct {
	HgmlcCallBackURI externalRef0.Uri `json:"hgmlcCallBackURI"`

	// LdrReference Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrReference
	LdrReference interface{} `json:"ldrReference"`

	// ServingLMFIdentification Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	ServingLMFIdentification *interface{}                    `json:"servingLMFIdentification,omitempty"`
	Supi                     externalRef0.Supi               `json:"supi"`
	SupportedFeatures        *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties     map[string]interface{}          `json:"-"`
}

// LocationEvent defines model for LocationEvent.
type LocationEvent string

// LocationPrivacyVerResult defines model for LocationPrivacyVerResult.
type LocationPrivacyVerResult string

// LocationType defines model for LocationType.
type LocationType string

// NotifiedPosInfo defines model for NotifiedPosInfo.
type NotifiedPosInfo struct {
	// AgeOfLocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AgeOfLocationEstimate
	AgeOfLocationEstimate *interface{} `json:"ageOfLocationEstimate,omitempty"`

	// Altitude Original reference TS29572_Nlmf_Location.yaml#/components/schemas/Altitude
	Altitude *interface{} `json:"altitude,omitempty"`

	// BarometricPressure Original reference TS29572_Nlmf_Location.yaml#/components/schemas/BarometricPressure
	BarometricPressure *interface{} `json:"barometricPressure,omitempty"`

	// CivicAddress Original reference TS29572_Nlmf_Location.yaml#/components/schemas/CivicAddress
	CivicAddress            *interface{}       `json:"civicAddress,omitempty"`
	Ecgi                    *externalRef0.Ecgi `json:"ecgi,omitempty"`
	GnssPositioningDataList *[]interface{}     `json:"gnssPositioningDataList,omitempty"`
	Gpsi                    *externalRef0.Gpsi `json:"gpsi,omitempty"`
	HgmlcCallBackURI        *externalRef0.Uri  `json:"hgmlcCallBackURI,omitempty"`

	// LdrReference Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrReference
	LdrReference *interface{} `json:"ldrReference,omitempty"`

	// LocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/GeographicArea
	LocationEstimate    *interface{}             `json:"locationEstimate,omitempty"`
	LocationEvent       LocationEvent            `json:"locationEvent"`
	MscServerId         *externalRef1.E164Number `json:"mscServerId,omitempty"`
	Ncgi                *externalRef0.Ncgi       `json:"ncgi,omitempty"`
	Pei                 *externalRef0.Pei        `json:"pei,omitempty"`
	PositioningDataList *[]interface{}           `json:"positioningDataList,omitempty"`

	// ServingLMFIdentification Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	ServingLMFIdentification *interface{}                   `json:"servingLMFIdentification,omitempty"`
	ServingNode              *externalRef0.NfInstanceId     `json:"servingNode,omitempty"`
	Supi                     *externalRef0.Supi             `json:"supi,omitempty"`
	TargetMmeName            *externalRef0.DiameterIdentity `json:"targetMmeName,omitempty"`
	TargetMmeRealm           *externalRef0.DiameterIdentity `json:"targetMmeRealm,omitempty"`

	// TerminationCause Original reference TS29572_Nlmf_Location.yaml#/components/schemas/TerminationCause
	TerminationCause *interface{} `json:"terminationCause,omitempty"`
	UtranSrvccInd    *bool        `json:"utranSrvccInd,omitempty"`

	// VelocityEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/VelocityEstimate
	VelocityEstimate     *interface{}           `json:"velocityEstimate,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProvideLocInfo defines model for ProvideLocInfo.
type ProvideLocInfo struct {
	AdditionalLocation *externalRef0.UserLocation `json:"additionalLocation,omitempty"`
	CurrentLoc         *bool                      `json:"currentLoc,omitempty"`

	// GeoInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/GeographicArea
	GeoInfo  *interface{}               `json:"geoInfo,omitempty"`
	Location *externalRef0.UserLocation `json:"location,omitempty"`

	// LocationAge Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AgeOfLocationEstimate
	LocationAge          *interface{}                    `json:"locationAge,omitempty"`
	OldGuami             *externalRef0.Guami             `json:"oldGuami,omitempty"`
	RatType              *externalRef0.RatType           `json:"ratType,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	Timezone             *externalRef0.TimeZone          `json:"timezone,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// ProvidePosInfo defines model for ProvidePosInfo.
type ProvidePosInfo struct {
	// AccuracyFulfilmentIndicator Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AccuracyFulfilmentIndicator
	AccuracyFulfilmentIndicator *interface{} `json:"accuracyFulfilmentIndicator,omitempty"`

	// AgeOfLocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AgeOfLocationEstimate
	AgeOfLocationEstimate *interface{} `json:"ageOfLocationEstimate,omitempty"`

	// Altitude Original reference TS29572_Nlmf_Location.yaml#/components/schemas/Altitude
	Altitude *interface{} `json:"altitude,omitempty"`

	// BarometricPressure Original reference TS29572_Nlmf_Location.yaml#/components/schemas/BarometricPressure
	BarometricPressure *interface{} `json:"barometricPressure,omitempty"`

	// CivicAddress Original reference TS29572_Nlmf_Location.yaml#/components/schemas/CivicAddress
	CivicAddress            *interface{}       `json:"civicAddress,omitempty"`
	Ecgi                    *externalRef0.Ecgi `json:"ecgi,omitempty"`
	GnssPositioningDataList *[]interface{}     `json:"gnssPositioningDataList,omitempty"`

	// LocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/GeographicArea
	LocationEstimate         *interface{}              `json:"locationEstimate,omitempty"`
	LocationPrivacyVerResult *LocationPrivacyVerResult `json:"locationPrivacyVerResult,omitempty"`
	Ncgi                     *externalRef0.Ncgi        `json:"ncgi,omitempty"`
	PositioningDataList      *[]interface{}            `json:"positioningDataList,omitempty"`

	// ServingLMFIdentification Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	ServingLMFIdentification *interface{}                    `json:"servingLMFIdentification,omitempty"`
	SupportedFeatures        *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	TargetMmeName            *externalRef0.DiameterIdentity  `json:"targetMmeName,omitempty"`
	TargetMmeRealm           *externalRef0.DiameterIdentity  `json:"targetMmeRealm,omitempty"`
	TargetServingNode        *externalRef0.NfInstanceId      `json:"targetServingNode,omitempty"`
	UtranSrvccInd            *bool                           `json:"utranSrvccInd,omitempty"`

	// VelocityEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/VelocityEstimate
	VelocityEstimate     *interface{}           `json:"velocityEstimate,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RequestLocInfo defines model for RequestLocInfo.
type RequestLocInfo struct {
	Req5gsLoc            *bool                           `json:"req5gsLoc,omitempty"`
	ReqCurrentLoc        *bool                           `json:"reqCurrentLoc,omitempty"`
	ReqRatType           *bool                           `json:"reqRatType,omitempty"`
	ReqTimeZone          *bool                           `json:"reqTimeZone,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// RequestPosInfo defines model for RequestPosInfo.
type RequestPosInfo struct {
	AdditionalLcsSuppGADShapes *[]interface{}             `json:"additionalLcsSuppGADShapes,omitempty"`
	AfID                       *externalRef0.NfInstanceId `json:"afID,omitempty"`

	// AreaEventInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AreaEventInfo
	AreaEventInfo *interface{} `json:"areaEventInfo,omitempty"`

	// CodeWord Original reference TS29515_Ngmlc_Location.yaml#/components/schemas/CodeWord
	CodeWord *interface{} `json:"codeWord,omitempty"`

	// ExternalClientIdentification Original reference TS29515_Ngmlc_Location.yaml#/components/schemas/ExternalClientIdentification
	ExternalClientIdentification *interface{}       `json:"externalClientIdentification,omitempty"`
	Gpsi                         *externalRef0.Gpsi `json:"gpsi,omitempty"`
	HgmlcCallBackURI             *externalRef0.Uri  `json:"hgmlcCallBackURI,omitempty"`

	// LcsClientType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/ExternalClientType
	LcsClientType interface{}  `json:"lcsClientType"`
	LcsLocation   LocationType `json:"lcsLocation"`

	// LcsQoS Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LocationQoS
	LcsQoS *interface{} `json:"lcsQoS,omitempty"`

	// LcsServiceType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LcsServiceType
	LcsServiceType *interface{} `json:"lcsServiceType,omitempty"`

	// LcsSupportedGADShapes Original reference TS29572_Nlmf_Location.yaml#/components/schemas/SupportedGADShapes
	LcsSupportedGADShapes *interface{} `json:"lcsSupportedGADShapes,omitempty"`

	// LdrReference Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrReference
	LdrReference *interface{} `json:"ldrReference,omitempty"`

	// LdrType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrType
	LdrType                 *interface{}      `json:"ldrType,omitempty"`
	LocationNotificationUri *externalRef0.Uri `json:"locationNotificationUri,omitempty"`

	// MotionEventInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/MotionEventInfo
	MotionEventInfo *interface{}        `json:"motionEventInfo,omitempty"`
	OldGuami        *externalRef0.Guami `json:"oldGuami,omitempty"`
	Pei             *externalRef0.Pei   `json:"pei,omitempty"`

	// PeriodicEventInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/PeriodicEventInfo
	PeriodicEventInfo *interface{} `json:"periodicEventInfo,omitempty"`

	// Priority Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LcsPriority
	Priority          *interface{}                    `json:"priority,omitempty"`
	Supi              *externalRef0.Supi              `json:"supi,omitempty"`
	SupportedFeatures *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`

	// UePrivacyRequirements Original reference TS29515_Ngmlc_Location.yaml#/components/schemas/UePrivacyRequirements
	UePrivacyRequirements *interface{} `json:"uePrivacyRequirements,omitempty"`

	// VelocityRequested Original reference TS29572_Nlmf_Location.yaml#/components/schemas/VelocityRequested
	VelocityRequested    *interface{}           `json:"velocityRequested,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CancelLocationJSONRequestBody defines body for CancelLocation for application/json ContentType.
type CancelLocationJSONRequestBody = CancelPosInfo

// ProvideLocationInfoJSONRequestBody defines body for ProvideLocationInfo for application/json ContentType.
type ProvideLocationInfoJSONRequestBody = RequestLocInfo

// ProvidePositioningInfoJSONRequestBody defines body for ProvidePositioningInfo for application/json ContentType.
type ProvidePositioningInfoJSONRequestBody = RequestPosInfo

// Getter for additional properties for CancelPosInfo. Returns the specified
// element and whether it was found
func (a CancelPosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CancelPosInfo
func (a *CancelPosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CancelPosInfo to handle AdditionalProperties
func (a *CancelPosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hgmlcCallBackURI"]; found {
		err = json.Unmarshal(raw, &a.HgmlcCallBackURI)
		if err != nil {
			return fmt.Errorf("error reading 'hgmlcCallBackURI': %w", err)
		}
		delete(object, "hgmlcCallBackURI")
	}

	if raw, found := object["ldrReference"]; found {
		err = json.Unmarshal(raw, &a.LdrReference)
		if err != nil {
			return fmt.Errorf("error reading 'ldrReference': %w", err)
		}
		delete(object, "ldrReference")
	}

	if raw, found := object["servingLMFIdentification"]; found {
		err = json.Unmarshal(raw, &a.ServingLMFIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'servingLMFIdentification': %w", err)
		}
		delete(object, "servingLMFIdentification")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CancelPosInfo to handle AdditionalProperties
func (a CancelPosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hgmlcCallBackURI"], err = json.Marshal(a.HgmlcCallBackURI)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hgmlcCallBackURI': %w", err)
	}

	object["ldrReference"], err = json.Marshal(a.LdrReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ldrReference': %w", err)
	}

	if a.ServingLMFIdentification != nil {
		object["servingLMFIdentification"], err = json.Marshal(a.ServingLMFIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingLMFIdentification': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotifiedPosInfo. Returns the specified
// element and whether it was found
func (a NotifiedPosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotifiedPosInfo
func (a *NotifiedPosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotifiedPosInfo to handle AdditionalProperties
func (a *NotifiedPosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationEstimate"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationEstimate': %w", err)
		}
		delete(object, "ageOfLocationEstimate")
	}

	if raw, found := object["altitude"]; found {
		err = json.Unmarshal(raw, &a.Altitude)
		if err != nil {
			return fmt.Errorf("error reading 'altitude': %w", err)
		}
		delete(object, "altitude")
	}

	if raw, found := object["barometricPressure"]; found {
		err = json.Unmarshal(raw, &a.BarometricPressure)
		if err != nil {
			return fmt.Errorf("error reading 'barometricPressure': %w", err)
		}
		delete(object, "barometricPressure")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["gnssPositioningDataList"]; found {
		err = json.Unmarshal(raw, &a.GnssPositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'gnssPositioningDataList': %w", err)
		}
		delete(object, "gnssPositioningDataList")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hgmlcCallBackURI"]; found {
		err = json.Unmarshal(raw, &a.HgmlcCallBackURI)
		if err != nil {
			return fmt.Errorf("error reading 'hgmlcCallBackURI': %w", err)
		}
		delete(object, "hgmlcCallBackURI")
	}

	if raw, found := object["ldrReference"]; found {
		err = json.Unmarshal(raw, &a.LdrReference)
		if err != nil {
			return fmt.Errorf("error reading 'ldrReference': %w", err)
		}
		delete(object, "ldrReference")
	}

	if raw, found := object["locationEstimate"]; found {
		err = json.Unmarshal(raw, &a.LocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'locationEstimate': %w", err)
		}
		delete(object, "locationEstimate")
	}

	if raw, found := object["locationEvent"]; found {
		err = json.Unmarshal(raw, &a.LocationEvent)
		if err != nil {
			return fmt.Errorf("error reading 'locationEvent': %w", err)
		}
		delete(object, "locationEvent")
	}

	if raw, found := object["mscServerId"]; found {
		err = json.Unmarshal(raw, &a.MscServerId)
		if err != nil {
			return fmt.Errorf("error reading 'mscServerId': %w", err)
		}
		delete(object, "mscServerId")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["positioningDataList"]; found {
		err = json.Unmarshal(raw, &a.PositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'positioningDataList': %w", err)
		}
		delete(object, "positioningDataList")
	}

	if raw, found := object["servingLMFIdentification"]; found {
		err = json.Unmarshal(raw, &a.ServingLMFIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'servingLMFIdentification': %w", err)
		}
		delete(object, "servingLMFIdentification")
	}

	if raw, found := object["servingNode"]; found {
		err = json.Unmarshal(raw, &a.ServingNode)
		if err != nil {
			return fmt.Errorf("error reading 'servingNode': %w", err)
		}
		delete(object, "servingNode")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["targetMmeName"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeName)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeName': %w", err)
		}
		delete(object, "targetMmeName")
	}

	if raw, found := object["targetMmeRealm"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeRealm)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeRealm': %w", err)
		}
		delete(object, "targetMmeRealm")
	}

	if raw, found := object["terminationCause"]; found {
		err = json.Unmarshal(raw, &a.TerminationCause)
		if err != nil {
			return fmt.Errorf("error reading 'terminationCause': %w", err)
		}
		delete(object, "terminationCause")
	}

	if raw, found := object["utranSrvccInd"]; found {
		err = json.Unmarshal(raw, &a.UtranSrvccInd)
		if err != nil {
			return fmt.Errorf("error reading 'utranSrvccInd': %w", err)
		}
		delete(object, "utranSrvccInd")
	}

	if raw, found := object["velocityEstimate"]; found {
		err = json.Unmarshal(raw, &a.VelocityEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'velocityEstimate': %w", err)
		}
		delete(object, "velocityEstimate")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotifiedPosInfo to handle AdditionalProperties
func (a NotifiedPosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationEstimate != nil {
		object["ageOfLocationEstimate"], err = json.Marshal(a.AgeOfLocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationEstimate': %w", err)
		}
	}

	if a.Altitude != nil {
		object["altitude"], err = json.Marshal(a.Altitude)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altitude': %w", err)
		}
	}

	if a.BarometricPressure != nil {
		object["barometricPressure"], err = json.Marshal(a.BarometricPressure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'barometricPressure': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	if a.Ecgi != nil {
		object["ecgi"], err = json.Marshal(a.Ecgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
		}
	}

	if a.GnssPositioningDataList != nil {
		object["gnssPositioningDataList"], err = json.Marshal(a.GnssPositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gnssPositioningDataList': %w", err)
		}
	}

	if a.Gpsi != nil {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HgmlcCallBackURI != nil {
		object["hgmlcCallBackURI"], err = json.Marshal(a.HgmlcCallBackURI)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hgmlcCallBackURI': %w", err)
		}
	}

	if a.LdrReference != nil {
		object["ldrReference"], err = json.Marshal(a.LdrReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ldrReference': %w", err)
		}
	}

	if a.LocationEstimate != nil {
		object["locationEstimate"], err = json.Marshal(a.LocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationEstimate': %w", err)
		}
	}

	object["locationEvent"], err = json.Marshal(a.LocationEvent)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'locationEvent': %w", err)
	}

	if a.MscServerId != nil {
		object["mscServerId"], err = json.Marshal(a.MscServerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mscServerId': %w", err)
		}
	}

	if a.Ncgi != nil {
		object["ncgi"], err = json.Marshal(a.Ncgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PositioningDataList != nil {
		object["positioningDataList"], err = json.Marshal(a.PositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'positioningDataList': %w", err)
		}
	}

	if a.ServingLMFIdentification != nil {
		object["servingLMFIdentification"], err = json.Marshal(a.ServingLMFIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingLMFIdentification': %w", err)
		}
	}

	if a.ServingNode != nil {
		object["servingNode"], err = json.Marshal(a.ServingNode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNode': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.TargetMmeName != nil {
		object["targetMmeName"], err = json.Marshal(a.TargetMmeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeName': %w", err)
		}
	}

	if a.TargetMmeRealm != nil {
		object["targetMmeRealm"], err = json.Marshal(a.TargetMmeRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeRealm': %w", err)
		}
	}

	if a.TerminationCause != nil {
		object["terminationCause"], err = json.Marshal(a.TerminationCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'terminationCause': %w", err)
		}
	}

	if a.UtranSrvccInd != nil {
		object["utranSrvccInd"], err = json.Marshal(a.UtranSrvccInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'utranSrvccInd': %w", err)
		}
	}

	if a.VelocityEstimate != nil {
		object["velocityEstimate"], err = json.Marshal(a.VelocityEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'velocityEstimate': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProvideLocInfo. Returns the specified
// element and whether it was found
func (a ProvideLocInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProvideLocInfo
func (a *ProvideLocInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProvideLocInfo to handle AdditionalProperties
func (a *ProvideLocInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalLocation"]; found {
		err = json.Unmarshal(raw, &a.AdditionalLocation)
		if err != nil {
			return fmt.Errorf("error reading 'additionalLocation': %w", err)
		}
		delete(object, "additionalLocation")
	}

	if raw, found := object["currentLoc"]; found {
		err = json.Unmarshal(raw, &a.CurrentLoc)
		if err != nil {
			return fmt.Errorf("error reading 'currentLoc': %w", err)
		}
		delete(object, "currentLoc")
	}

	if raw, found := object["geoInfo"]; found {
		err = json.Unmarshal(raw, &a.GeoInfo)
		if err != nil {
			return fmt.Errorf("error reading 'geoInfo': %w", err)
		}
		delete(object, "geoInfo")
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if raw, found := object["locationAge"]; found {
		err = json.Unmarshal(raw, &a.LocationAge)
		if err != nil {
			return fmt.Errorf("error reading 'locationAge': %w", err)
		}
		delete(object, "locationAge")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["timezone"]; found {
		err = json.Unmarshal(raw, &a.Timezone)
		if err != nil {
			return fmt.Errorf("error reading 'timezone': %w", err)
		}
		delete(object, "timezone")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProvideLocInfo to handle AdditionalProperties
func (a ProvideLocInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalLocation != nil {
		object["additionalLocation"], err = json.Marshal(a.AdditionalLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalLocation': %w", err)
		}
	}

	if a.CurrentLoc != nil {
		object["currentLoc"], err = json.Marshal(a.CurrentLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentLoc': %w", err)
		}
	}

	if a.GeoInfo != nil {
		object["geoInfo"], err = json.Marshal(a.GeoInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geoInfo': %w", err)
		}
	}

	if a.Location != nil {
		object["location"], err = json.Marshal(a.Location)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'location': %w", err)
		}
	}

	if a.LocationAge != nil {
		object["locationAge"], err = json.Marshal(a.LocationAge)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationAge': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Timezone != nil {
		object["timezone"], err = json.Marshal(a.Timezone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timezone': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProvidePosInfo. Returns the specified
// element and whether it was found
func (a ProvidePosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProvidePosInfo
func (a *ProvidePosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProvidePosInfo to handle AdditionalProperties
func (a *ProvidePosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accuracyFulfilmentIndicator"]; found {
		err = json.Unmarshal(raw, &a.AccuracyFulfilmentIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'accuracyFulfilmentIndicator': %w", err)
		}
		delete(object, "accuracyFulfilmentIndicator")
	}

	if raw, found := object["ageOfLocationEstimate"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationEstimate': %w", err)
		}
		delete(object, "ageOfLocationEstimate")
	}

	if raw, found := object["altitude"]; found {
		err = json.Unmarshal(raw, &a.Altitude)
		if err != nil {
			return fmt.Errorf("error reading 'altitude': %w", err)
		}
		delete(object, "altitude")
	}

	if raw, found := object["barometricPressure"]; found {
		err = json.Unmarshal(raw, &a.BarometricPressure)
		if err != nil {
			return fmt.Errorf("error reading 'barometricPressure': %w", err)
		}
		delete(object, "barometricPressure")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["gnssPositioningDataList"]; found {
		err = json.Unmarshal(raw, &a.GnssPositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'gnssPositioningDataList': %w", err)
		}
		delete(object, "gnssPositioningDataList")
	}

	if raw, found := object["locationEstimate"]; found {
		err = json.Unmarshal(raw, &a.LocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'locationEstimate': %w", err)
		}
		delete(object, "locationEstimate")
	}

	if raw, found := object["locationPrivacyVerResult"]; found {
		err = json.Unmarshal(raw, &a.LocationPrivacyVerResult)
		if err != nil {
			return fmt.Errorf("error reading 'locationPrivacyVerResult': %w", err)
		}
		delete(object, "locationPrivacyVerResult")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["positioningDataList"]; found {
		err = json.Unmarshal(raw, &a.PositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'positioningDataList': %w", err)
		}
		delete(object, "positioningDataList")
	}

	if raw, found := object["servingLMFIdentification"]; found {
		err = json.Unmarshal(raw, &a.ServingLMFIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'servingLMFIdentification': %w", err)
		}
		delete(object, "servingLMFIdentification")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetMmeName"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeName)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeName': %w", err)
		}
		delete(object, "targetMmeName")
	}

	if raw, found := object["targetMmeRealm"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeRealm)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeRealm': %w", err)
		}
		delete(object, "targetMmeRealm")
	}

	if raw, found := object["targetServingNode"]; found {
		err = json.Unmarshal(raw, &a.TargetServingNode)
		if err != nil {
			return fmt.Errorf("error reading 'targetServingNode': %w", err)
		}
		delete(object, "targetServingNode")
	}

	if raw, found := object["utranSrvccInd"]; found {
		err = json.Unmarshal(raw, &a.UtranSrvccInd)
		if err != nil {
			return fmt.Errorf("error reading 'utranSrvccInd': %w", err)
		}
		delete(object, "utranSrvccInd")
	}

	if raw, found := object["velocityEstimate"]; found {
		err = json.Unmarshal(raw, &a.VelocityEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'velocityEstimate': %w", err)
		}
		delete(object, "velocityEstimate")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProvidePosInfo to handle AdditionalProperties
func (a ProvidePosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccuracyFulfilmentIndicator != nil {
		object["accuracyFulfilmentIndicator"], err = json.Marshal(a.AccuracyFulfilmentIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accuracyFulfilmentIndicator': %w", err)
		}
	}

	if a.AgeOfLocationEstimate != nil {
		object["ageOfLocationEstimate"], err = json.Marshal(a.AgeOfLocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationEstimate': %w", err)
		}
	}

	if a.Altitude != nil {
		object["altitude"], err = json.Marshal(a.Altitude)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altitude': %w", err)
		}
	}

	if a.BarometricPressure != nil {
		object["barometricPressure"], err = json.Marshal(a.BarometricPressure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'barometricPressure': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	if a.Ecgi != nil {
		object["ecgi"], err = json.Marshal(a.Ecgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
		}
	}

	if a.GnssPositioningDataList != nil {
		object["gnssPositioningDataList"], err = json.Marshal(a.GnssPositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gnssPositioningDataList': %w", err)
		}
	}

	if a.LocationEstimate != nil {
		object["locationEstimate"], err = json.Marshal(a.LocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationEstimate': %w", err)
		}
	}

	if a.LocationPrivacyVerResult != nil {
		object["locationPrivacyVerResult"], err = json.Marshal(a.LocationPrivacyVerResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationPrivacyVerResult': %w", err)
		}
	}

	if a.Ncgi != nil {
		object["ncgi"], err = json.Marshal(a.Ncgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
		}
	}

	if a.PositioningDataList != nil {
		object["positioningDataList"], err = json.Marshal(a.PositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'positioningDataList': %w", err)
		}
	}

	if a.ServingLMFIdentification != nil {
		object["servingLMFIdentification"], err = json.Marshal(a.ServingLMFIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingLMFIdentification': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.TargetMmeName != nil {
		object["targetMmeName"], err = json.Marshal(a.TargetMmeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeName': %w", err)
		}
	}

	if a.TargetMmeRealm != nil {
		object["targetMmeRealm"], err = json.Marshal(a.TargetMmeRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeRealm': %w", err)
		}
	}

	if a.TargetServingNode != nil {
		object["targetServingNode"], err = json.Marshal(a.TargetServingNode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetServingNode': %w", err)
		}
	}

	if a.UtranSrvccInd != nil {
		object["utranSrvccInd"], err = json.Marshal(a.UtranSrvccInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'utranSrvccInd': %w", err)
		}
	}

	if a.VelocityEstimate != nil {
		object["velocityEstimate"], err = json.Marshal(a.VelocityEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'velocityEstimate': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestLocInfo. Returns the specified
// element and whether it was found
func (a RequestLocInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestLocInfo
func (a *RequestLocInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestLocInfo to handle AdditionalProperties
func (a *RequestLocInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["req5gsLoc"]; found {
		err = json.Unmarshal(raw, &a.Req5gsLoc)
		if err != nil {
			return fmt.Errorf("error reading 'req5gsLoc': %w", err)
		}
		delete(object, "req5gsLoc")
	}

	if raw, found := object["reqCurrentLoc"]; found {
		err = json.Unmarshal(raw, &a.ReqCurrentLoc)
		if err != nil {
			return fmt.Errorf("error reading 'reqCurrentLoc': %w", err)
		}
		delete(object, "reqCurrentLoc")
	}

	if raw, found := object["reqRatType"]; found {
		err = json.Unmarshal(raw, &a.ReqRatType)
		if err != nil {
			return fmt.Errorf("error reading 'reqRatType': %w", err)
		}
		delete(object, "reqRatType")
	}

	if raw, found := object["reqTimeZone"]; found {
		err = json.Unmarshal(raw, &a.ReqTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'reqTimeZone': %w", err)
		}
		delete(object, "reqTimeZone")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestLocInfo to handle AdditionalProperties
func (a RequestLocInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Req5gsLoc != nil {
		object["req5gsLoc"], err = json.Marshal(a.Req5gsLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'req5gsLoc': %w", err)
		}
	}

	if a.ReqCurrentLoc != nil {
		object["reqCurrentLoc"], err = json.Marshal(a.ReqCurrentLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqCurrentLoc': %w", err)
		}
	}

	if a.ReqRatType != nil {
		object["reqRatType"], err = json.Marshal(a.ReqRatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqRatType': %w", err)
		}
	}

	if a.ReqTimeZone != nil {
		object["reqTimeZone"], err = json.Marshal(a.ReqTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqTimeZone': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestPosInfo. Returns the specified
// element and whether it was found
func (a RequestPosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestPosInfo
func (a *RequestPosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestPosInfo to handle AdditionalProperties
func (a *RequestPosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalLcsSuppGADShapes"]; found {
		err = json.Unmarshal(raw, &a.AdditionalLcsSuppGADShapes)
		if err != nil {
			return fmt.Errorf("error reading 'additionalLcsSuppGADShapes': %w", err)
		}
		delete(object, "additionalLcsSuppGADShapes")
	}

	if raw, found := object["afID"]; found {
		err = json.Unmarshal(raw, &a.AfID)
		if err != nil {
			return fmt.Errorf("error reading 'afID': %w", err)
		}
		delete(object, "afID")
	}

	if raw, found := object["areaEventInfo"]; found {
		err = json.Unmarshal(raw, &a.AreaEventInfo)
		if err != nil {
			return fmt.Errorf("error reading 'areaEventInfo': %w", err)
		}
		delete(object, "areaEventInfo")
	}

	if raw, found := object["codeWord"]; found {
		err = json.Unmarshal(raw, &a.CodeWord)
		if err != nil {
			return fmt.Errorf("error reading 'codeWord': %w", err)
		}
		delete(object, "codeWord")
	}

	if raw, found := object["externalClientIdentification"]; found {
		err = json.Unmarshal(raw, &a.ExternalClientIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'externalClientIdentification': %w", err)
		}
		delete(object, "externalClientIdentification")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hgmlcCallBackURI"]; found {
		err = json.Unmarshal(raw, &a.HgmlcCallBackURI)
		if err != nil {
			return fmt.Errorf("error reading 'hgmlcCallBackURI': %w", err)
		}
		delete(object, "hgmlcCallBackURI")
	}

	if raw, found := object["lcsClientType"]; found {
		err = json.Unmarshal(raw, &a.LcsClientType)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientType': %w", err)
		}
		delete(object, "lcsClientType")
	}

	if raw, found := object["lcsLocation"]; found {
		err = json.Unmarshal(raw, &a.LcsLocation)
		if err != nil {
			return fmt.Errorf("error reading 'lcsLocation': %w", err)
		}
		delete(object, "lcsLocation")
	}

	if raw, found := object["lcsQoS"]; found {
		err = json.Unmarshal(raw, &a.LcsQoS)
		if err != nil {
			return fmt.Errorf("error reading 'lcsQoS': %w", err)
		}
		delete(object, "lcsQoS")
	}

	if raw, found := object["lcsServiceType"]; found {
		err = json.Unmarshal(raw, &a.LcsServiceType)
		if err != nil {
			return fmt.Errorf("error reading 'lcsServiceType': %w", err)
		}
		delete(object, "lcsServiceType")
	}

	if raw, found := object["lcsSupportedGADShapes"]; found {
		err = json.Unmarshal(raw, &a.LcsSupportedGADShapes)
		if err != nil {
			return fmt.Errorf("error reading 'lcsSupportedGADShapes': %w", err)
		}
		delete(object, "lcsSupportedGADShapes")
	}

	if raw, found := object["ldrReference"]; found {
		err = json.Unmarshal(raw, &a.LdrReference)
		if err != nil {
			return fmt.Errorf("error reading 'ldrReference': %w", err)
		}
		delete(object, "ldrReference")
	}

	if raw, found := object["ldrType"]; found {
		err = json.Unmarshal(raw, &a.LdrType)
		if err != nil {
			return fmt.Errorf("error reading 'ldrType': %w", err)
		}
		delete(object, "ldrType")
	}

	if raw, found := object["locationNotificationUri"]; found {
		err = json.Unmarshal(raw, &a.LocationNotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'locationNotificationUri': %w", err)
		}
		delete(object, "locationNotificationUri")
	}

	if raw, found := object["motionEventInfo"]; found {
		err = json.Unmarshal(raw, &a.MotionEventInfo)
		if err != nil {
			return fmt.Errorf("error reading 'motionEventInfo': %w", err)
		}
		delete(object, "motionEventInfo")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["periodicEventInfo"]; found {
		err = json.Unmarshal(raw, &a.PeriodicEventInfo)
		if err != nil {
			return fmt.Errorf("error reading 'periodicEventInfo': %w", err)
		}
		delete(object, "periodicEventInfo")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["uePrivacyRequirements"]; found {
		err = json.Unmarshal(raw, &a.UePrivacyRequirements)
		if err != nil {
			return fmt.Errorf("error reading 'uePrivacyRequirements': %w", err)
		}
		delete(object, "uePrivacyRequirements")
	}

	if raw, found := object["velocityRequested"]; found {
		err = json.Unmarshal(raw, &a.VelocityRequested)
		if err != nil {
			return fmt.Errorf("error reading 'velocityRequested': %w", err)
		}
		delete(object, "velocityRequested")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestPosInfo to handle AdditionalProperties
func (a RequestPosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalLcsSuppGADShapes != nil {
		object["additionalLcsSuppGADShapes"], err = json.Marshal(a.AdditionalLcsSuppGADShapes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalLcsSuppGADShapes': %w", err)
		}
	}

	if a.AfID != nil {
		object["afID"], err = json.Marshal(a.AfID)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afID': %w", err)
		}
	}

	if a.AreaEventInfo != nil {
		object["areaEventInfo"], err = json.Marshal(a.AreaEventInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaEventInfo': %w", err)
		}
	}

	if a.CodeWord != nil {
		object["codeWord"], err = json.Marshal(a.CodeWord)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWord': %w", err)
		}
	}

	if a.ExternalClientIdentification != nil {
		object["externalClientIdentification"], err = json.Marshal(a.ExternalClientIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalClientIdentification': %w", err)
		}
	}

	if a.Gpsi != nil {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HgmlcCallBackURI != nil {
		object["hgmlcCallBackURI"], err = json.Marshal(a.HgmlcCallBackURI)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hgmlcCallBackURI': %w", err)
		}
	}

	object["lcsClientType"], err = json.Marshal(a.LcsClientType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsClientType': %w", err)
	}

	object["lcsLocation"], err = json.Marshal(a.LcsLocation)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsLocation': %w", err)
	}

	if a.LcsQoS != nil {
		object["lcsQoS"], err = json.Marshal(a.LcsQoS)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsQoS': %w", err)
		}
	}

	if a.LcsServiceType != nil {
		object["lcsServiceType"], err = json.Marshal(a.LcsServiceType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsServiceType': %w", err)
		}
	}

	if a.LcsSupportedGADShapes != nil {
		object["lcsSupportedGADShapes"], err = json.Marshal(a.LcsSupportedGADShapes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsSupportedGADShapes': %w", err)
		}
	}

	if a.LdrReference != nil {
		object["ldrReference"], err = json.Marshal(a.LdrReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ldrReference': %w", err)
		}
	}

	if a.LdrType != nil {
		object["ldrType"], err = json.Marshal(a.LdrType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ldrType': %w", err)
		}
	}

	if a.LocationNotificationUri != nil {
		object["locationNotificationUri"], err = json.Marshal(a.LocationNotificationUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationNotificationUri': %w", err)
		}
	}

	if a.MotionEventInfo != nil {
		object["motionEventInfo"], err = json.Marshal(a.MotionEventInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'motionEventInfo': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PeriodicEventInfo != nil {
		object["periodicEventInfo"], err = json.Marshal(a.PeriodicEventInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicEventInfo': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UePrivacyRequirements != nil {
		object["uePrivacyRequirements"], err = json.Marshal(a.UePrivacyRequirements)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePrivacyRequirements': %w", err)
		}
	}

	if a.VelocityRequested != nil {
		object["velocityRequested"], err = json.Marshal(a.VelocityRequested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'velocityRequested': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CancelLocationWithBody request with any body
	CancelLocationWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelLocation(ctx context.Context, ueContextId string, body CancelLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProvideLocationInfoWithBody request with any body
	ProvideLocationInfoWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProvideLocationInfo(ctx context.Context, ueContextId string, body ProvideLocationInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProvidePositioningInfoWithBody request with any body
	ProvidePositioningInfoWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProvidePositioningInfo(ctx context.Context, ueContextId string, body ProvidePositioningInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CancelLocationWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelLocationRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelLocation(ctx context.Context, ueContextId string, body CancelLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelLocationRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProvideLocationInfoWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProvideLocationInfoRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProvideLocationInfo(ctx context.Context, ueContextId string, body ProvideLocationInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProvideLocationInfoRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProvidePositioningInfoWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProvidePositioningInfoRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProvidePositioningInfo(ctx context.Context, ueContextId string, body ProvidePositioningInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProvidePositioningInfoRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCancelLocationRequest calls the generic CancelLocation builder with application/json body
func NewCancelLocationRequest(server string, ueContextId string, body CancelLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelLocationRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewCancelLocationRequestWithBody generates requests for CancelLocation with any type of body
func NewCancelLocationRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cancel-pos-info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProvideLocationInfoRequest calls the generic ProvideLocationInfo builder with application/json body
func NewProvideLocationInfoRequest(server string, ueContextId string, body ProvideLocationInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProvideLocationInfoRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewProvideLocationInfoRequestWithBody generates requests for ProvideLocationInfo with any type of body
func NewProvideLocationInfoRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/provide-loc-info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProvidePositioningInfoRequest calls the generic ProvidePositioningInfo builder with application/json body
func NewProvidePositioningInfoRequest(server string, ueContextId string, body ProvidePositioningInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProvidePositioningInfoRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewProvidePositioningInfoRequestWithBody generates requests for ProvidePositioningInfo with any type of body
func NewProvidePositioningInfoRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/provide-pos-info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CancelLocationWithBodyWithResponse request with any body
	CancelLocationWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelLocationResponse, error)

	CancelLocationWithResponse(ctx context.Context, ueContextId string, body CancelLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelLocationResponse, error)

	// ProvideLocationInfoWithBodyWithResponse request with any body
	ProvideLocationInfoWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProvideLocationInfoResponse, error)

	ProvideLocationInfoWithResponse(ctx context.Context, ueContextId string, body ProvideLocationInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*ProvideLocationInfoResponse, error)

	// ProvidePositioningInfoWithBodyWithResponse request with any body
	ProvidePositioningInfoWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProvidePositioningInfoResponse, error)

	ProvidePositioningInfoWithResponse(ctx context.Context, ueContextId string, body ProvidePositioningInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*ProvidePositioningInfoResponse, error)
}

type CancelLocationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON401 *externalRef0.N401
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON411 *externalRef0.N411
	ApplicationproblemJSON413 *externalRef0.N413
	ApplicationproblemJSON415 *externalRef0.N415
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
	ApplicationproblemJSON504 *externalRef0.N504
}

// Status returns HTTPResponse.Status
func (r CancelLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProvideLocationInfoResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ProvideLocInfo
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON411 *externalRef0.N411
	ApplicationproblemJSON413 *externalRef0.N413
	ApplicationproblemJSON415 *externalRef0.N415
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r ProvideLocationInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProvideLocationInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProvidePositioningInfoResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ProvidePosInfo
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON411 *externalRef0.N411
	ApplicationproblemJSON413 *externalRef0.N413
	ApplicationproblemJSON415 *externalRef0.N415
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
	ApplicationproblemJSON504 *externalRef0.N504
}

// Status returns HTTPResponse.Status
func (r ProvidePositioningInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProvidePositioningInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CancelLocationWithBodyWithResponse request with arbitrary body returning *CancelLocationResponse
func (c *ClientWithResponses) CancelLocationWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelLocationResponse, error) {
	rsp, err := c.CancelLocationWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelLocationResponse(rsp)
}

func (c *ClientWithResponses) CancelLocationWithResponse(ctx context.Context, ueContextId string, body CancelLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelLocationResponse, error) {
	rsp, err := c.CancelLocation(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelLocationResponse(rsp)
}

// ProvideLocationInfoWithBodyWithResponse request with arbitrary body returning *ProvideLocationInfoResponse
func (c *ClientWithResponses) ProvideLocationInfoWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProvideLocationInfoResponse, error) {
	rsp, err := c.ProvideLocationInfoWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProvideLocationInfoResponse(rsp)
}

func (c *ClientWithResponses) ProvideLocationInfoWithResponse(ctx context.Context, ueContextId string, body ProvideLocationInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*ProvideLocationInfoResponse, error) {
	rsp, err := c.ProvideLocationInfo(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProvideLocationInfoResponse(rsp)
}

// ProvidePositioningInfoWithBodyWithResponse request with arbitrary body returning *ProvidePositioningInfoResponse
func (c *ClientWithResponses) ProvidePositioningInfoWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProvidePositioningInfoResponse, error) {
	rsp, err := c.ProvidePositioningInfoWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProvidePositioningInfoResponse(rsp)
}

func (c *ClientWithResponses) ProvidePositioningInfoWithResponse(ctx context.Context, ueContextId string, body ProvidePositioningInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*ProvidePositioningInfoResponse, error) {
	rsp, err := c.ProvidePositioningInfo(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProvidePositioningInfoResponse(rsp)
}

// ParseCancelLocationResponse parses an HTTP response from a CancelLocationWithResponse call
func ParseCancelLocationResponse(rsp *http.Response) (*CancelLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.N504
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	}

	return response, nil
}

// ParseProvideLocationInfoResponse parses an HTTP response from a ProvideLocationInfoWithResponse call
func ParseProvideLocationInfoResponse(rsp *http.Response) (*ProvideLocationInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProvideLocationInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvideLocInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseProvidePositioningInfoResponse parses an HTTP response from a ProvidePositioningInfoWithResponse call
func ParseProvidePositioningInfoResponse(rsp *http.Response) (*ProvidePositioningInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProvidePositioningInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvidePosInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.N504
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Namf_Location CancelLocation service operation
	// (POST /{ueContextId}/cancel-pos-info)
	CancelLocation(c *gin.Context, ueContextId string)
	// Namf_Location ProvideLocationInfo service Operation
	// (POST /{ueContextId}/provide-loc-info)
	ProvideLocationInfo(c *gin.Context, ueContextId string)
	// Namf_Location ProvidePositioningInfo service Operation
	// (POST /{ueContextId}/provide-pos-info)
	ProvidePositioningInfo(c *gin.Context, ueContextId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CancelLocation operation middleware
func (siw *ServerInterfaceWrapper) CancelLocation(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameter("simple", false, "ueContextId", c.Param("ueContextId"), &ueContextId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-loc"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelLocation(c, ueContextId)
}

// ProvideLocationInfo operation middleware
func (siw *ServerInterfaceWrapper) ProvideLocationInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameter("simple", false, "ueContextId", c.Param("ueContextId"), &ueContextId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-loc"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProvideLocationInfo(c, ueContextId)
}

// ProvidePositioningInfo operation middleware
func (siw *ServerInterfaceWrapper) ProvidePositioningInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameter("simple", false, "ueContextId", c.Param("ueContextId"), &ueContextId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-loc"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProvidePositioningInfo(c, ueContextId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/:ueContextId/cancel-pos-info", wrapper.CancelLocation)
	router.POST(options.BaseURL+"/:ueContextId/provide-loc-info", wrapper.ProvideLocationInfo)
	router.POST(options.BaseURL+"/:ueContextId/provide-pos-info", wrapper.ProvidePositioningInfo)
}

type CancelLocationRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *CancelLocationJSONRequestBody
}

type CancelLocationResponseObject interface {
	VisitCancelLocationResponse(w http.ResponseWriter) error
}

type CancelLocation204Response struct {
}

func (response CancelLocation204Response) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CancelLocation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response CancelLocation307JSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type CancelLocation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response CancelLocation308JSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type CancelLocation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CancelLocation400ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CancelLocation401ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CancelLocation403ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CancelLocation404ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CancelLocation411ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CancelLocation413ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CancelLocation415ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CancelLocation429ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CancelLocation500ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CancelLocation503ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocation504ApplicationProblemPlusJSONResponse struct {
	externalRef0.N504ApplicationProblemPlusJSONResponse
}

func (response CancelLocation504ApplicationProblemPlusJSONResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type CancelLocationdefaultResponse struct {
	StatusCode int
}

func (response CancelLocationdefaultResponse) VisitCancelLocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ProvideLocationInfoRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *ProvideLocationInfoJSONRequestBody
}

type ProvideLocationInfoResponseObject interface {
	VisitProvideLocationInfoResponse(w http.ResponseWriter) error
}

type ProvideLocationInfo200JSONResponse ProvideLocInfo

func (response ProvideLocationInfo200JSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ProvideLocationInfo307JSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProvideLocationInfo308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ProvideLocationInfo308JSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProvideLocationInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo400ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo403ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo404ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo411ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo413ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo415ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo429ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo500ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ProvideLocationInfo503ApplicationProblemPlusJSONResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ProvideLocationInfodefaultResponse struct {
	StatusCode int
}

func (response ProvideLocationInfodefaultResponse) VisitProvideLocationInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ProvidePositioningInfoRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *ProvidePositioningInfoJSONRequestBody
}

type ProvidePositioningInfoResponseObject interface {
	VisitProvidePositioningInfoResponse(w http.ResponseWriter) error
}

type ProvidePositioningInfo200JSONResponse ProvidePosInfo

func (response ProvidePositioningInfo200JSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo204Response struct {
}

func (response ProvidePositioningInfo204Response) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ProvidePositioningInfo307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ProvidePositioningInfo307JSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProvidePositioningInfo308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ProvidePositioningInfo308JSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProvidePositioningInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo400ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo403ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo411ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo413ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo415ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo429ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo500ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo503ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfo504ApplicationProblemPlusJSONResponse struct {
	externalRef0.N504ApplicationProblemPlusJSONResponse
}

func (response ProvidePositioningInfo504ApplicationProblemPlusJSONResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type ProvidePositioningInfodefaultResponse struct {
	StatusCode int
}

func (response ProvidePositioningInfodefaultResponse) VisitProvidePositioningInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Namf_Location CancelLocation service operation
	// (POST /{ueContextId}/cancel-pos-info)
	CancelLocation(ctx context.Context, request CancelLocationRequestObject) (CancelLocationResponseObject, error)
	// Namf_Location ProvideLocationInfo service Operation
	// (POST /{ueContextId}/provide-loc-info)
	ProvideLocationInfo(ctx context.Context, request ProvideLocationInfoRequestObject) (ProvideLocationInfoResponseObject, error)
	// Namf_Location ProvidePositioningInfo service Operation
	// (POST /{ueContextId}/provide-pos-info)
	ProvidePositioningInfo(ctx context.Context, request ProvidePositioningInfoRequestObject) (ProvidePositioningInfoResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CancelLocation operation middleware
func (sh *strictHandler) CancelLocation(ctx *gin.Context, ueContextId string) {
	var request CancelLocationRequestObject

	request.UeContextId = ueContextId

	var body CancelLocationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CancelLocation(ctx, request.(CancelLocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelLocation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CancelLocationResponseObject); ok {
		if err := validResponse.VisitCancelLocationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProvideLocationInfo operation middleware
func (sh *strictHandler) ProvideLocationInfo(ctx *gin.Context, ueContextId string) {
	var request ProvideLocationInfoRequestObject

	request.UeContextId = ueContextId

	var body ProvideLocationInfoJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProvideLocationInfo(ctx, request.(ProvideLocationInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProvideLocationInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProvideLocationInfoResponseObject); ok {
		if err := validResponse.VisitProvideLocationInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProvidePositioningInfo operation middleware
func (sh *strictHandler) ProvidePositioningInfo(ctx *gin.Context, ueContextId string) {
	var request ProvidePositioningInfoRequestObject

	request.UeContextId = ueContextId

	var body ProvidePositioningInfoJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProvidePositioningInfo(ctx, request.(ProvidePositioningInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProvidePositioningInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProvidePositioningInfoResponseObject); ok {
		if err := validResponse.VisitProvidePositioningInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
