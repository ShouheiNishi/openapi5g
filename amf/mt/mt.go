// Package mt provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package mt

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/amf/event"
	externalRef1 "github.com/ShouheiNishi/openapi5g/commondata"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for UeContextInfoClass.
const (
	TADS UeContextInfoClass = "TADS"
)

// AdditionInfoEnableUeReachability defines model for AdditionInfoEnableUeReachability.
type AdditionInfoEnableUeReachability struct {
	MaxWaitingTime       *externalRef1.DurationSec `json:"maxWaitingTime,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// EnableUeReachabilityReqData defines model for EnableUeReachabilityReqData.
type EnableUeReachabilityReqData struct {
	ExtBufSupport        *bool                           `json:"extBufSupport,omitempty"`
	OldGuami             *externalRef1.Guami             `json:"oldGuami,omitempty"`
	Reachability         externalRef0.UeReachability     `json:"reachability"`
	SupportedFeatures    *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// EnableUeReachabilityRspData defines model for EnableUeReachabilityRspData.
type EnableUeReachabilityRspData struct {
	Reachability         externalRef0.UeReachability     `json:"reachability"`
	SupportedFeatures    *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// ProblemDetailsEnableUeReachability defines model for ProblemDetailsEnableUeReachability.
type ProblemDetailsEnableUeReachability struct {
	// AccessTokenError Error returned in the access token response message (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError interface{} `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   interface{}                     `json:"accessTokenRequest,omitempty"`
	Cause                *string                         `json:"cause,omitempty"`
	Detail               *string                         `json:"detail,omitempty"`
	Instance             *externalRef1.Uri               `json:"instance,omitempty"`
	InvalidParams        []externalRef1.InvalidParam     `json:"invalidParams,omitempty"`
	MaxWaitingTime       *externalRef1.DurationSec       `json:"maxWaitingTime,omitempty"`
	NrfId                *string                         `json:"nrfId,omitempty"`
	Status               *int                            `json:"status,omitempty"`
	SupportedFeatures    *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	Title                *string                         `json:"title,omitempty"`
	Type                 *externalRef1.Uri               `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// UeContextInfo defines model for UeContextInfo.
type UeContextInfo struct {
	AccessType           externalRef1.AccessType         `json:"accessType,omitempty"`
	LastActTime          *externalRef1.DateTime          `json:"lastActTime,omitempty"`
	RatType              *externalRef1.RatType           `json:"ratType,omitempty"`
	SupportVoPS          *bool                           `json:"supportVoPS,omitempty"`
	SupportVoPSn3gpp     *bool                           `json:"supportVoPSn3gpp,omitempty"`
	SupportedFeatures    *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// UeContextInfoClass defines model for UeContextInfoClass.
type UeContextInfoClass string

// ProvideDomainSelectionInfoParams defines parameters for ProvideDomainSelectionInfo.
type ProvideDomainSelectionInfoParams struct {
	// InfoClass UE Context Information Class
	InfoClass *UeContextInfoClass `form:"info-class,omitempty" json:"info-class,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef1.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// OldGuami Old GUAMI
	OldGuami *externalRef1.Guami `form:"old-guami,omitempty" json:"old-guami,omitempty"`
}

// EnableUeReachabilityJSONRequestBody defines body for EnableUeReachability for application/json ContentType.
type EnableUeReachabilityJSONRequestBody = EnableUeReachabilityReqData

// Getter for additional properties for AdditionInfoEnableUeReachability. Returns the specified
// element and whether it was found
func (a AdditionInfoEnableUeReachability) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionInfoEnableUeReachability
func (a *AdditionInfoEnableUeReachability) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionInfoEnableUeReachability to handle AdditionalProperties
func (a *AdditionInfoEnableUeReachability) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionInfoEnableUeReachability to handle AdditionalProperties
func (a AdditionInfoEnableUeReachability) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnableUeReachabilityReqData. Returns the specified
// element and whether it was found
func (a EnableUeReachabilityReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnableUeReachabilityReqData
func (a *EnableUeReachabilityReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnableUeReachabilityReqData to handle AdditionalProperties
func (a *EnableUeReachabilityReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["extBufSupport"]; found {
		err = json.Unmarshal(raw, &a.ExtBufSupport)
		if err != nil {
			return fmt.Errorf("error reading 'extBufSupport': %w", err)
		}
		delete(object, "extBufSupport")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["reachability"]; found {
		err = json.Unmarshal(raw, &a.Reachability)
		if err != nil {
			return fmt.Errorf("error reading 'reachability': %w", err)
		}
		delete(object, "reachability")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnableUeReachabilityReqData to handle AdditionalProperties
func (a EnableUeReachabilityReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ExtBufSupport != nil {
		object["extBufSupport"], err = json.Marshal(a.ExtBufSupport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extBufSupport': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	object["reachability"], err = json.Marshal(a.Reachability)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reachability': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnableUeReachabilityRspData. Returns the specified
// element and whether it was found
func (a EnableUeReachabilityRspData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnableUeReachabilityRspData
func (a *EnableUeReachabilityRspData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnableUeReachabilityRspData to handle AdditionalProperties
func (a *EnableUeReachabilityRspData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["reachability"]; found {
		err = json.Unmarshal(raw, &a.Reachability)
		if err != nil {
			return fmt.Errorf("error reading 'reachability': %w", err)
		}
		delete(object, "reachability")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnableUeReachabilityRspData to handle AdditionalProperties
func (a EnableUeReachabilityRspData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["reachability"], err = json.Marshal(a.Reachability)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reachability': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetailsEnableUeReachability. Returns the specified
// element and whether it was found
func (a ProblemDetailsEnableUeReachability) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetailsEnableUeReachability
func (a *ProblemDetailsEnableUeReachability) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetailsEnableUeReachability to handle AdditionalProperties
func (a *ProblemDetailsEnableUeReachability) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetailsEnableUeReachability to handle AdditionalProperties
func (a ProblemDetailsEnableUeReachability) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInfo. Returns the specified
// element and whether it was found
func (a UeContextInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInfo
func (a *UeContextInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInfo to handle AdditionalProperties
func (a *UeContextInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["lastActTime"]; found {
		err = json.Unmarshal(raw, &a.LastActTime)
		if err != nil {
			return fmt.Errorf("error reading 'lastActTime': %w", err)
		}
		delete(object, "lastActTime")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["supportVoPS"]; found {
		err = json.Unmarshal(raw, &a.SupportVoPS)
		if err != nil {
			return fmt.Errorf("error reading 'supportVoPS': %w", err)
		}
		delete(object, "supportVoPS")
	}

	if raw, found := object["supportVoPSn3gpp"]; found {
		err = json.Unmarshal(raw, &a.SupportVoPSn3gpp)
		if err != nil {
			return fmt.Errorf("error reading 'supportVoPSn3gpp': %w", err)
		}
		delete(object, "supportVoPSn3gpp")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInfo to handle AdditionalProperties
func (a UeContextInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.LastActTime != nil {
		object["lastActTime"], err = json.Marshal(a.LastActTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lastActTime': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.SupportVoPS != nil {
		object["supportVoPS"], err = json.Marshal(a.SupportVoPS)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportVoPS': %w", err)
		}
	}

	if a.SupportVoPSn3gpp != nil {
		object["supportVoPSn3gpp"], err = json.Marshal(a.SupportVoPSn3gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportVoPSn3gpp': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ProvideDomainSelectionInfo request
	ProvideDomainSelectionInfo(ctx context.Context, ueContextId string, params *ProvideDomainSelectionInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableUeReachabilityWithBody request with any body
	EnableUeReachabilityWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableUeReachability(ctx context.Context, ueContextId string, body EnableUeReachabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ProvideDomainSelectionInfo(ctx context.Context, ueContextId string, params *ProvideDomainSelectionInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProvideDomainSelectionInfoRequest(c.Server, ueContextId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableUeReachabilityWithBody(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableUeReachabilityRequestWithBody(c.Server, ueContextId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableUeReachability(ctx context.Context, ueContextId string, body EnableUeReachabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableUeReachabilityRequest(c.Server, ueContextId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewProvideDomainSelectionInfoRequest generates requests for ProvideDomainSelectionInfo
func NewProvideDomainSelectionInfoRequest(server string, ueContextId string, params *ProvideDomainSelectionInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InfoClass != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "info-class", runtime.ParamLocationQuery, *params.InfoClass); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OldGuami != nil {

			if queryParamBuf, err := json.Marshal(*params.OldGuami); err != nil {
				return nil, err
			} else {
				queryValues.Add("old-guami", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnableUeReachabilityRequest calls the generic EnableUeReachability builder with application/json body
func NewEnableUeReachabilityRequest(server string, ueContextId string, body EnableUeReachabilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableUeReachabilityRequestWithBody(server, ueContextId, "application/json", bodyReader)
}

// NewEnableUeReachabilityRequestWithBody generates requests for EnableUeReachability with any type of body
func NewEnableUeReachabilityRequestWithBody(server string, ueContextId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueContextId", runtime.ParamLocationPath, ueContextId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-contexts/%s/ue-reachind", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ProvideDomainSelectionInfoWithResponse request
	ProvideDomainSelectionInfoWithResponse(ctx context.Context, ueContextId string, params *ProvideDomainSelectionInfoParams, reqEditors ...RequestEditorFn) (*ProvideDomainSelectionInfoResponse, error)

	// EnableUeReachabilityWithBodyWithResponse request with any body
	EnableUeReachabilityWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableUeReachabilityResponse, error)

	EnableUeReachabilityWithResponse(ctx context.Context, ueContextId string, body EnableUeReachabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableUeReachabilityResponse, error)
}

type ProvideDomainSelectionInfoResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *UeContextInfo
	JSON307                   *externalRef1.N307
	JSON308                   *externalRef1.N308
	ApplicationproblemJSON400 *externalRef1.N400
	ApplicationproblemJSON403 *externalRef1.N403
	ApplicationproblemJSON404 *externalRef1.N404
	ApplicationproblemJSON414 *externalRef1.N414
	ApplicationproblemJSON429 *externalRef1.N429
	ApplicationproblemJSON500 *externalRef1.N500
	ApplicationproblemJSON503 *externalRef1.N503
}

// Status returns HTTPResponse.Status
func (r ProvideDomainSelectionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProvideDomainSelectionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableUeReachabilityResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *EnableUeReachabilityRspData
	JSON307                   *externalRef1.N307
	JSON308                   *externalRef1.N308
	ApplicationproblemJSON400 *externalRef1.N400
	ApplicationproblemJSON403 *ProblemDetailsEnableUeReachability
	ApplicationproblemJSON404 *externalRef1.N404
	ApplicationproblemJSON411 *externalRef1.N411
	ApplicationproblemJSON413 *externalRef1.N413
	ApplicationproblemJSON415 *externalRef1.N415
	ApplicationproblemJSON429 *externalRef1.N429
	ApplicationproblemJSON500 *externalRef1.N500
	ApplicationproblemJSON503 *externalRef1.N503
	ApplicationproblemJSON504 *ProblemDetailsEnableUeReachability
}

// Status returns HTTPResponse.Status
func (r EnableUeReachabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableUeReachabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ProvideDomainSelectionInfoWithResponse request returning *ProvideDomainSelectionInfoResponse
func (c *ClientWithResponses) ProvideDomainSelectionInfoWithResponse(ctx context.Context, ueContextId string, params *ProvideDomainSelectionInfoParams, reqEditors ...RequestEditorFn) (*ProvideDomainSelectionInfoResponse, error) {
	rsp, err := c.ProvideDomainSelectionInfo(ctx, ueContextId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProvideDomainSelectionInfoResponse(rsp)
}

// EnableUeReachabilityWithBodyWithResponse request with arbitrary body returning *EnableUeReachabilityResponse
func (c *ClientWithResponses) EnableUeReachabilityWithBodyWithResponse(ctx context.Context, ueContextId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableUeReachabilityResponse, error) {
	rsp, err := c.EnableUeReachabilityWithBody(ctx, ueContextId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableUeReachabilityResponse(rsp)
}

func (c *ClientWithResponses) EnableUeReachabilityWithResponse(ctx context.Context, ueContextId string, body EnableUeReachabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableUeReachabilityResponse, error) {
	rsp, err := c.EnableUeReachability(ctx, ueContextId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableUeReachabilityResponse(rsp)
}

// ParseProvideDomainSelectionInfoResponse parses an HTTP response from a ProvideDomainSelectionInfoWithResponse call
func ParseProvideDomainSelectionInfoResponse(rsp *http.Response) (*ProvideDomainSelectionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProvideDomainSelectionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UeContextInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef1.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseEnableUeReachabilityResponse parses an HTTP response from a EnableUeReachabilityWithResponse call
func ParseEnableUeReachabilityResponse(rsp *http.Response) (*EnableUeReachabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableUeReachabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnableUeReachabilityRspData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetailsEnableUeReachability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest ProblemDetailsEnableUeReachability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Namf_MT Provide Domain Selection Info service Operation
	// (GET /ue-contexts/{ueContextId})
	ProvideDomainSelectionInfo(c *gin.Context, ueContextId string, params ProvideDomainSelectionInfoParams)
	// Namf_MT EnableUEReachability service Operation
	// (PUT /ue-contexts/{ueContextId}/ue-reachind)
	EnableUeReachability(c *gin.Context, ueContextId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProvideDomainSelectionInfo operation middleware
func (siw *ServerInterfaceWrapper) ProvideDomainSelectionInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameter("simple", false, "ueContextId", c.Param("ueContextId"), &ueContextId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-mt"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProvideDomainSelectionInfoParams

	// ------------- Optional query parameter "info-class" -------------

	err = runtime.BindQueryParameter("form", true, false, "info-class", c.Request.URL.Query(), &params.InfoClass)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter info-class: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "old-guami" -------------

	if paramValue := c.Query("old-guami"); paramValue != "" {

		var value externalRef1.Guami
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'old-guami' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.OldGuami = &value

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProvideDomainSelectionInfo(c, ueContextId, params)
}

// EnableUeReachability operation middleware
func (siw *ServerInterfaceWrapper) EnableUeReachability(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueContextId" -------------
	var ueContextId string

	err = runtime.BindStyledParameter("simple", false, "ueContextId", c.Param("ueContextId"), &ueContextId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueContextId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"namf-mt"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EnableUeReachability(c, ueContextId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/ue-contexts/:ueContextId", wrapper.ProvideDomainSelectionInfo)
	router.PUT(options.BaseURL+"/ue-contexts/:ueContextId/ue-reachind", wrapper.EnableUeReachability)
}

type ProvideDomainSelectionInfoRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Params      ProvideDomainSelectionInfoParams
}

type ProvideDomainSelectionInfoResponseObject interface {
	VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error
}

type ProvideDomainSelectionInfo200JSONResponse UeContextInfo

func (response ProvideDomainSelectionInfo200JSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfo307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response ProvideDomainSelectionInfo307JSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProvideDomainSelectionInfo308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response ProvideDomainSelectionInfo308JSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ProvideDomainSelectionInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response ProvideDomainSelectionInfo400ApplicationProblemPlusJSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfo403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response ProvideDomainSelectionInfo403ApplicationProblemPlusJSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfo404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response ProvideDomainSelectionInfo404ApplicationProblemPlusJSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfo414ApplicationProblemPlusJSONResponse struct {
	externalRef1.N414ApplicationProblemPlusJSONResponse
}

func (response ProvideDomainSelectionInfo414ApplicationProblemPlusJSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfo429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response ProvideDomainSelectionInfo429ApplicationProblemPlusJSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response ProvideDomainSelectionInfo500ApplicationProblemPlusJSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response ProvideDomainSelectionInfo503ApplicationProblemPlusJSONResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ProvideDomainSelectionInfodefaultResponse struct {
	StatusCode int
}

func (response ProvideDomainSelectionInfodefaultResponse) VisitProvideDomainSelectionInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type EnableUeReachabilityRequestObject struct {
	UeContextId string `json:"ueContextId"`
	Body        *EnableUeReachabilityJSONRequestBody
}

type EnableUeReachabilityResponseObject interface {
	VisitEnableUeReachabilityResponse(w http.ResponseWriter) error
}

type EnableUeReachability200JSONResponse EnableUeReachabilityRspData

func (response EnableUeReachability200JSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response EnableUeReachability307JSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type EnableUeReachability308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response EnableUeReachability308JSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type EnableUeReachability400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability400ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability403ApplicationProblemPlusJSONResponse ProblemDetailsEnableUeReachability

func (response EnableUeReachability403ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability404ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability411ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability413ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability415ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability429ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability500ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response EnableUeReachability503ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachability504ApplicationProblemPlusJSONResponse ProblemDetailsEnableUeReachability

func (response EnableUeReachability504ApplicationProblemPlusJSONResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(response)
}

type EnableUeReachabilitydefaultResponse struct {
	StatusCode int
}

func (response EnableUeReachabilitydefaultResponse) VisitEnableUeReachabilityResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Namf_MT Provide Domain Selection Info service Operation
	// (GET /ue-contexts/{ueContextId})
	ProvideDomainSelectionInfo(ctx context.Context, request ProvideDomainSelectionInfoRequestObject) (ProvideDomainSelectionInfoResponseObject, error)
	// Namf_MT EnableUEReachability service Operation
	// (PUT /ue-contexts/{ueContextId}/ue-reachind)
	EnableUeReachability(ctx context.Context, request EnableUeReachabilityRequestObject) (EnableUeReachabilityResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ProvideDomainSelectionInfo operation middleware
func (sh *strictHandler) ProvideDomainSelectionInfo(ctx *gin.Context, ueContextId string, params ProvideDomainSelectionInfoParams) {
	var request ProvideDomainSelectionInfoRequestObject

	request.UeContextId = ueContextId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProvideDomainSelectionInfo(ctx, request.(ProvideDomainSelectionInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProvideDomainSelectionInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ProvideDomainSelectionInfoResponseObject); ok {
		if err := validResponse.VisitProvideDomainSelectionInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EnableUeReachability operation middleware
func (sh *strictHandler) EnableUeReachability(ctx *gin.Context, ueContextId string) {
	var request EnableUeReachabilityRequestObject

	request.UeContextId = ueContextId

	var body EnableUeReachabilityJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EnableUeReachability(ctx, request.(EnableUeReachabilityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EnableUeReachability")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EnableUeReachabilityResponseObject); ok {
		if err := validResponse.VisitEnableUeReachabilityResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
