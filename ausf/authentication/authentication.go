// Package authentication provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package authentication

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/udm/ueau"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for AuthResult.
const (
	AUTHENTICATIONFAILURE AuthResult = "AUTHENTICATION_FAILURE"
	AUTHENTICATIONONGOING AuthResult = "AUTHENTICATION_ONGOING"
	AUTHENTICATIONSUCCESS AuthResult = "AUTHENTICATION_SUCCESS"
)

// Defines values for AuthType.
const (
	EAPAKAPRIME AuthType = "EAP_AKA_PRIME"
	EAPTLS      AuthType = "EAP_TLS"
	N5GAKA      AuthType = "5G_AKA"
)

// AuthResult defines model for AuthResult.
type AuthResult string

// AuthType defines model for AuthType.
type AuthType string

// AuthenticationInfo defines model for AuthenticationInfo.
type AuthenticationInfo struct {
	CellCagInfo           []externalRef0.CagId                `json:"cellCagInfo,omitempty"`
	N5gcInd               *bool                               `json:"n5gcInd,omitempty"`
	Pei                   externalRef0.Pei                    `json:"pei,omitempty"`
	ResynchronizationInfo *externalRef1.ResynchronizationInfo `json:"resynchronizationInfo,omitempty"`
	RoutingIndicator      string                              `json:"routingIndicator,omitempty"`
	ServingNetworkName    externalRef1.ServingNetworkName     `json:"servingNetworkName"`
	SupiOrSuci            externalRef0.SupiOrSuci             `json:"supiOrSuci"`
	SupportedFeatures     *externalRef0.SupportedFeatures     `json:"supportedFeatures,omitempty"`
	TraceData             *externalRef0.TraceData             `json:"traceData"`
	UdmGroupId            *externalRef0.NfGroupId             `json:"udmGroupId,omitempty"`
	AdditionalProperties  map[string]interface{}              `json:"-"`
}

// Av5gAka defines model for Av5gAka.
type Av5gAka struct {
	Autn                 externalRef1.Autn      `json:"autn"`
	HxresStar            HxresStar              `json:"hxresStar"`
	Rand                 externalRef1.Rand      `json:"rand"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConfirmationData defines model for ConfirmationData.
type ConfirmationData struct {
	ResStar              *ResStar                        `json:"resStar"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// ConfirmationDataResponse defines model for ConfirmationDataResponse.
type ConfirmationDataResponse struct {
	AuthResult           AuthResult             `json:"authResult"`
	Kseaf                Kseaf                  `json:"kseaf,omitempty"`
	Supi                 externalRef0.Supi      `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeregistrationInfo defines model for DeregistrationInfo.
type DeregistrationInfo struct {
	Supi                 externalRef0.Supi               `json:"supi"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// EapPayload contains an EAP packet
type EapPayload = string

// EapSession defines model for EapSession.
type EapSession struct {
	Links      *map[string]externalRef0.LinksValueSchema `json:"_links,omitempty"`
	AuthResult AuthResult                                `json:"authResult,omitempty"`

	// EapPayload contains an EAP packet
	EapPayload           *EapPayload                     `json:"eapPayload"`
	KSeaf                Kseaf                           `json:"kSeaf,omitempty"`
	Supi                 externalRef0.Supi               `json:"supi,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// HxresStar defines model for HxresStar.
type HxresStar = string

// Kseaf defines model for Kseaf.
type Kseaf = string

// ResStar defines model for ResStar.
type ResStar = string

// RgAuthCtx defines model for RgAuthCtx.
type RgAuthCtx struct {
	AuthInd              *bool                  `json:"authInd,omitempty"`
	AuthResult           AuthResult             `json:"authResult"`
	Supi                 externalRef0.Supi      `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RgAuthenticationInfo defines model for RgAuthenticationInfo.
type RgAuthenticationInfo struct {
	AuthenticatedInd     bool                            `json:"authenticatedInd"`
	Suci                 Suci                            `json:"suci"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// Suci defines model for Suci.
type Suci = string

// UEAuthenticationCtx defines model for UEAuthenticationCtx.
type UEAuthenticationCtx struct {
	N5gAuthData          UEAuthenticationCtx_5gAuthData           `json:"5gAuthData"`
	Links                map[string]externalRef0.LinksValueSchema `json:"_links"`
	AuthType             AuthType                                 `json:"authType"`
	ServingNetworkName   externalRef1.ServingNetworkName          `json:"servingNetworkName,omitempty"`
	AdditionalProperties map[string]interface{}                   `json:"-"`
}

// UEAuthenticationCtx_5gAuthData defines model for UEAuthenticationCtx.5gAuthData.
type UEAuthenticationCtx_5gAuthData struct {
	union json.RawMessage
}

// PostRgAuthenticationsJSONRequestBody defines body for PostRgAuthentications for application/json ContentType.
type PostRgAuthenticationsJSONRequestBody = RgAuthenticationInfo

// PostUeAuthenticationsJSONRequestBody defines body for PostUeAuthentications for application/json ContentType.
type PostUeAuthenticationsJSONRequestBody = AuthenticationInfo

// PostUeAuthenticationsDeregisterJSONRequestBody defines body for PostUeAuthenticationsDeregister for application/json ContentType.
type PostUeAuthenticationsDeregisterJSONRequestBody = DeregistrationInfo

// PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody defines body for PutUeAuthenticationsAuthCtxId5gAkaConfirmation for application/json ContentType.
type PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody = ConfirmationData

// EapAuthMethodJSONRequestBody defines body for EapAuthMethod for application/json ContentType.
type EapAuthMethodJSONRequestBody = EapSession

// Getter for additional properties for AuthenticationInfo. Returns the specified
// element and whether it was found
func (a AuthenticationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationInfo
func (a *AuthenticationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationInfo to handle AdditionalProperties
func (a *AuthenticationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellCagInfo"]; found {
		err = json.Unmarshal(raw, &a.CellCagInfo)
		if err != nil {
			return fmt.Errorf("error reading 'cellCagInfo': %w", err)
		}
		delete(object, "cellCagInfo")
	}

	if raw, found := object["n5gcInd"]; found {
		err = json.Unmarshal(raw, &a.N5gcInd)
		if err != nil {
			return fmt.Errorf("error reading 'n5gcInd': %w", err)
		}
		delete(object, "n5gcInd")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["resynchronizationInfo"]; found {
		err = json.Unmarshal(raw, &a.ResynchronizationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'resynchronizationInfo': %w", err)
		}
		delete(object, "resynchronizationInfo")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if raw, found := object["supiOrSuci"]; found {
		err = json.Unmarshal(raw, &a.SupiOrSuci)
		if err != nil {
			return fmt.Errorf("error reading 'supiOrSuci': %w", err)
		}
		delete(object, "supiOrSuci")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationInfo to handle AdditionalProperties
func (a AuthenticationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CellCagInfo) != 0 {
		object["cellCagInfo"], err = json.Marshal(a.CellCagInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellCagInfo': %w", err)
		}
	}

	if a.N5gcInd != nil {
		object["n5gcInd"], err = json.Marshal(a.N5gcInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n5gcInd': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.ResynchronizationInfo != nil {
		object["resynchronizationInfo"], err = json.Marshal(a.ResynchronizationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resynchronizationInfo': %w", err)
		}
	}

	if len(a.RoutingIndicator) != 0 {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
	}

	object["supiOrSuci"], err = json.Marshal(a.SupiOrSuci)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supiOrSuci': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Av5gAka. Returns the specified
// element and whether it was found
func (a Av5gAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Av5gAka
func (a *Av5gAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Av5gAka to handle AdditionalProperties
func (a *Av5gAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["hxresStar"]; found {
		err = json.Unmarshal(raw, &a.HxresStar)
		if err != nil {
			return fmt.Errorf("error reading 'hxresStar': %w", err)
		}
		delete(object, "hxresStar")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Av5gAka to handle AdditionalProperties
func (a Av5gAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["hxresStar"], err = json.Marshal(a.HxresStar)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hxresStar': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConfirmationData. Returns the specified
// element and whether it was found
func (a ConfirmationData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConfirmationData
func (a *ConfirmationData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConfirmationData to handle AdditionalProperties
func (a *ConfirmationData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["resStar"]; found {
		err = json.Unmarshal(raw, &a.ResStar)
		if err != nil {
			return fmt.Errorf("error reading 'resStar': %w", err)
		}
		delete(object, "resStar")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConfirmationData to handle AdditionalProperties
func (a ConfirmationData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["resStar"], err = json.Marshal(a.ResStar)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resStar': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConfirmationDataResponse. Returns the specified
// element and whether it was found
func (a ConfirmationDataResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConfirmationDataResponse
func (a *ConfirmationDataResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConfirmationDataResponse to handle AdditionalProperties
func (a *ConfirmationDataResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authResult"]; found {
		err = json.Unmarshal(raw, &a.AuthResult)
		if err != nil {
			return fmt.Errorf("error reading 'authResult': %w", err)
		}
		delete(object, "authResult")
	}

	if raw, found := object["kseaf"]; found {
		err = json.Unmarshal(raw, &a.Kseaf)
		if err != nil {
			return fmt.Errorf("error reading 'kseaf': %w", err)
		}
		delete(object, "kseaf")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConfirmationDataResponse to handle AdditionalProperties
func (a ConfirmationDataResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authResult"], err = json.Marshal(a.AuthResult)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authResult': %w", err)
	}

	if len(a.Kseaf) != 0 {
		object["kseaf"], err = json.Marshal(a.Kseaf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'kseaf': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeregistrationInfo. Returns the specified
// element and whether it was found
func (a DeregistrationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeregistrationInfo
func (a *DeregistrationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeregistrationInfo to handle AdditionalProperties
func (a *DeregistrationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeregistrationInfo to handle AdditionalProperties
func (a DeregistrationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EapSession. Returns the specified
// element and whether it was found
func (a EapSession) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EapSession
func (a *EapSession) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EapSession to handle AdditionalProperties
func (a *EapSession) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading '_links': %w", err)
		}
		delete(object, "_links")
	}

	if raw, found := object["authResult"]; found {
		err = json.Unmarshal(raw, &a.AuthResult)
		if err != nil {
			return fmt.Errorf("error reading 'authResult': %w", err)
		}
		delete(object, "authResult")
	}

	if raw, found := object["eapPayload"]; found {
		err = json.Unmarshal(raw, &a.EapPayload)
		if err != nil {
			return fmt.Errorf("error reading 'eapPayload': %w", err)
		}
		delete(object, "eapPayload")
	}

	if raw, found := object["kSeaf"]; found {
		err = json.Unmarshal(raw, &a.KSeaf)
		if err != nil {
			return fmt.Errorf("error reading 'kSeaf': %w", err)
		}
		delete(object, "kSeaf")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EapSession to handle AdditionalProperties
func (a EapSession) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["_links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_links': %w", err)
		}
	}

	if len(a.AuthResult) != 0 {
		object["authResult"], err = json.Marshal(a.AuthResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authResult': %w", err)
		}
	}

	object["eapPayload"], err = json.Marshal(a.EapPayload)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eapPayload': %w", err)
	}

	if len(a.KSeaf) != 0 {
		object["kSeaf"], err = json.Marshal(a.KSeaf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'kSeaf': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RgAuthCtx. Returns the specified
// element and whether it was found
func (a RgAuthCtx) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RgAuthCtx
func (a *RgAuthCtx) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RgAuthCtx to handle AdditionalProperties
func (a *RgAuthCtx) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authInd"]; found {
		err = json.Unmarshal(raw, &a.AuthInd)
		if err != nil {
			return fmt.Errorf("error reading 'authInd': %w", err)
		}
		delete(object, "authInd")
	}

	if raw, found := object["authResult"]; found {
		err = json.Unmarshal(raw, &a.AuthResult)
		if err != nil {
			return fmt.Errorf("error reading 'authResult': %w", err)
		}
		delete(object, "authResult")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RgAuthCtx to handle AdditionalProperties
func (a RgAuthCtx) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AuthInd != nil {
		object["authInd"], err = json.Marshal(a.AuthInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authInd': %w", err)
		}
	}

	object["authResult"], err = json.Marshal(a.AuthResult)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authResult': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RgAuthenticationInfo. Returns the specified
// element and whether it was found
func (a RgAuthenticationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RgAuthenticationInfo
func (a *RgAuthenticationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RgAuthenticationInfo to handle AdditionalProperties
func (a *RgAuthenticationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authenticatedInd"]; found {
		err = json.Unmarshal(raw, &a.AuthenticatedInd)
		if err != nil {
			return fmt.Errorf("error reading 'authenticatedInd': %w", err)
		}
		delete(object, "authenticatedInd")
	}

	if raw, found := object["suci"]; found {
		err = json.Unmarshal(raw, &a.Suci)
		if err != nil {
			return fmt.Errorf("error reading 'suci': %w", err)
		}
		delete(object, "suci")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RgAuthenticationInfo to handle AdditionalProperties
func (a RgAuthenticationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authenticatedInd"], err = json.Marshal(a.AuthenticatedInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authenticatedInd': %w", err)
	}

	object["suci"], err = json.Marshal(a.Suci)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suci': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEAuthenticationCtx. Returns the specified
// element and whether it was found
func (a UEAuthenticationCtx) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEAuthenticationCtx
func (a *UEAuthenticationCtx) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEAuthenticationCtx to handle AdditionalProperties
func (a *UEAuthenticationCtx) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gAuthData"]; found {
		err = json.Unmarshal(raw, &a.N5gAuthData)
		if err != nil {
			return fmt.Errorf("error reading '5gAuthData': %w", err)
		}
		delete(object, "5gAuthData")
	}

	if raw, found := object["_links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading '_links': %w", err)
		}
		delete(object, "_links")
	}

	if raw, found := object["authType"]; found {
		err = json.Unmarshal(raw, &a.AuthType)
		if err != nil {
			return fmt.Errorf("error reading 'authType': %w", err)
		}
		delete(object, "authType")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEAuthenticationCtx to handle AdditionalProperties
func (a UEAuthenticationCtx) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5gAuthData"], err = json.Marshal(a.N5gAuthData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5gAuthData': %w", err)
	}

	object["_links"], err = json.Marshal(a.Links)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '_links': %w", err)
	}

	object["authType"], err = json.Marshal(a.AuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authType': %w", err)
	}

	if len(a.ServingNetworkName) != 0 {
		object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsAv5gAka returns the union data inside the UEAuthenticationCtx_5gAuthData as a Av5gAka
func (t UEAuthenticationCtx_5gAuthData) AsAv5gAka() (Av5gAka, error) {
	var body Av5gAka
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAv5gAka overwrites any union data inside the UEAuthenticationCtx_5gAuthData as the provided Av5gAka
func (t *UEAuthenticationCtx_5gAuthData) FromAv5gAka(v Av5gAka) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAv5gAka performs a merge with any union data inside the UEAuthenticationCtx_5gAuthData, using the provided Av5gAka
func (t *UEAuthenticationCtx_5gAuthData) MergeAv5gAka(v Av5gAka) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEapPayload returns the union data inside the UEAuthenticationCtx_5gAuthData as a EapPayload
func (t UEAuthenticationCtx_5gAuthData) AsEapPayload() (EapPayload, error) {
	var body EapPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEapPayload overwrites any union data inside the UEAuthenticationCtx_5gAuthData as the provided EapPayload
func (t *UEAuthenticationCtx_5gAuthData) FromEapPayload(v EapPayload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEapPayload performs a merge with any union data inside the UEAuthenticationCtx_5gAuthData, using the provided EapPayload
func (t *UEAuthenticationCtx_5gAuthData) MergeEapPayload(v EapPayload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UEAuthenticationCtx_5gAuthData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UEAuthenticationCtx_5gAuthData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostRgAuthenticationsWithBody request with any body
	PostRgAuthenticationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRgAuthentications(ctx context.Context, body PostRgAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUeAuthenticationsWithBody request with any body
	PostUeAuthenticationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUeAuthentications(ctx context.Context, body PostUeAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUeAuthenticationsDeregisterWithBody request with any body
	PostUeAuthenticationsDeregisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUeAuthenticationsDeregister(ctx context.Context, body PostUeAuthenticationsDeregisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete5gAkaAuthenticationResult request
	Delete5gAkaAuthenticationResult(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBody request with any body
	PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBody(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUeAuthenticationsAuthCtxId5gAkaConfirmation(ctx context.Context, authCtxId string, body PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEapAuthenticationResult request
	DeleteEapAuthenticationResult(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EapAuthMethodWithBody request with any body
	EapAuthMethodWithBody(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EapAuthMethod(ctx context.Context, authCtxId string, body EapAuthMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostRgAuthenticationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRgAuthenticationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRgAuthentications(ctx context.Context, body PostRgAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRgAuthenticationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUeAuthenticationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUeAuthenticationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUeAuthentications(ctx context.Context, body PostUeAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUeAuthenticationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUeAuthenticationsDeregisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUeAuthenticationsDeregisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUeAuthenticationsDeregister(ctx context.Context, body PostUeAuthenticationsDeregisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUeAuthenticationsDeregisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete5gAkaAuthenticationResult(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete5gAkaAuthenticationResultRequest(c.Server, authCtxId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBody(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestWithBody(c.Server, authCtxId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUeAuthenticationsAuthCtxId5gAkaConfirmation(ctx context.Context, authCtxId string, body PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUeAuthenticationsAuthCtxId5gAkaConfirmationRequest(c.Server, authCtxId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEapAuthenticationResult(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEapAuthenticationResultRequest(c.Server, authCtxId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EapAuthMethodWithBody(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEapAuthMethodRequestWithBody(c.Server, authCtxId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EapAuthMethod(ctx context.Context, authCtxId string, body EapAuthMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEapAuthMethodRequest(c.Server, authCtxId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostRgAuthenticationsRequest calls the generic PostRgAuthentications builder with application/json body
func NewPostRgAuthenticationsRequest(server string, body PostRgAuthenticationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRgAuthenticationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRgAuthenticationsRequestWithBody generates requests for PostRgAuthentications with any type of body
func NewPostRgAuthenticationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rg-authentications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUeAuthenticationsRequest calls the generic PostUeAuthentications builder with application/json body
func NewPostUeAuthenticationsRequest(server string, body PostUeAuthenticationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUeAuthenticationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUeAuthenticationsRequestWithBody generates requests for PostUeAuthentications with any type of body
func NewPostUeAuthenticationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-authentications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUeAuthenticationsDeregisterRequest calls the generic PostUeAuthenticationsDeregister builder with application/json body
func NewPostUeAuthenticationsDeregisterRequest(server string, body PostUeAuthenticationsDeregisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUeAuthenticationsDeregisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUeAuthenticationsDeregisterRequestWithBody generates requests for PostUeAuthenticationsDeregister with any type of body
func NewPostUeAuthenticationsDeregisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-authentications/deregister")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete5gAkaAuthenticationResultRequest generates requests for Delete5gAkaAuthenticationResult
func NewDelete5gAkaAuthenticationResultRequest(server string, authCtxId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authCtxId", runtime.ParamLocationPath, authCtxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-authentications/%s/5g-aka-confirmation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUeAuthenticationsAuthCtxId5gAkaConfirmationRequest calls the generic PutUeAuthenticationsAuthCtxId5gAkaConfirmation builder with application/json body
func NewPutUeAuthenticationsAuthCtxId5gAkaConfirmationRequest(server string, authCtxId string, body PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestWithBody(server, authCtxId, "application/json", bodyReader)
}

// NewPutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestWithBody generates requests for PutUeAuthenticationsAuthCtxId5gAkaConfirmation with any type of body
func NewPutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestWithBody(server string, authCtxId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authCtxId", runtime.ParamLocationPath, authCtxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-authentications/%s/5g-aka-confirmation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEapAuthenticationResultRequest generates requests for DeleteEapAuthenticationResult
func NewDeleteEapAuthenticationResultRequest(server string, authCtxId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authCtxId", runtime.ParamLocationPath, authCtxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-authentications/%s/eap-session", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEapAuthMethodRequest calls the generic EapAuthMethod builder with application/json body
func NewEapAuthMethodRequest(server string, authCtxId string, body EapAuthMethodJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEapAuthMethodRequestWithBody(server, authCtxId, "application/json", bodyReader)
}

// NewEapAuthMethodRequestWithBody generates requests for EapAuthMethod with any type of body
func NewEapAuthMethodRequestWithBody(server string, authCtxId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authCtxId", runtime.ParamLocationPath, authCtxId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ue-authentications/%s/eap-session", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostRgAuthenticationsWithBodyWithResponse request with any body
	PostRgAuthenticationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRgAuthenticationsResponse, error)

	PostRgAuthenticationsWithResponse(ctx context.Context, body PostRgAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRgAuthenticationsResponse, error)

	// PostUeAuthenticationsWithBodyWithResponse request with any body
	PostUeAuthenticationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsResponse, error)

	PostUeAuthenticationsWithResponse(ctx context.Context, body PostUeAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsResponse, error)

	// PostUeAuthenticationsDeregisterWithBodyWithResponse request with any body
	PostUeAuthenticationsDeregisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsDeregisterResponse, error)

	PostUeAuthenticationsDeregisterWithResponse(ctx context.Context, body PostUeAuthenticationsDeregisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsDeregisterResponse, error)

	// Delete5gAkaAuthenticationResultWithResponse request
	Delete5gAkaAuthenticationResultWithResponse(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*Delete5gAkaAuthenticationResultResponse, error)

	// PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBodyWithResponse request with any body
	PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBodyWithResponse(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse, error)

	PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithResponse(ctx context.Context, authCtxId string, body PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse, error)

	// DeleteEapAuthenticationResultWithResponse request
	DeleteEapAuthenticationResultWithResponse(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*DeleteEapAuthenticationResultResponse, error)

	// EapAuthMethodWithBodyWithResponse request with any body
	EapAuthMethodWithBodyWithResponse(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EapAuthMethodResponse, error)

	EapAuthMethodWithResponse(ctx context.Context, authCtxId string, body EapAuthMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*EapAuthMethodResponse, error)
}

type PostRgAuthenticationsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *RgAuthCtx
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.ProblemDetails
	ApplicationproblemJSON403 *externalRef0.ProblemDetails
	ApplicationproblemJSON404 *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostRgAuthenticationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRgAuthenticationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUeAuthenticationsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	Application3gppHalJSON201 *UEAuthenticationCtx
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.ProblemDetails
	ApplicationproblemJSON403 *externalRef0.ProblemDetails
	ApplicationproblemJSON404 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.ProblemDetails
	ApplicationproblemJSON501 *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostUeAuthenticationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUeAuthenticationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUeAuthenticationsDeregisterResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON404 *externalRef0.N404
}

// Status returns HTTPResponse.Status
func (r PostUeAuthenticationsDeregisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUeAuthenticationsDeregisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete5gAkaAuthenticationResultResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r Delete5gAkaAuthenticationResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete5gAkaAuthenticationResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ConfirmationDataResponse
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEapAuthenticationResultResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r DeleteEapAuthenticationResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEapAuthenticationResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EapAuthMethodResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	Application3gppHalJSON200 *struct {
		// Links URI : /{eapSessionUri}
		Links map[string]externalRef0.LinksValueSchema `json:"_links"`

		// EapPayload contains an EAP packet
		EapPayload           *EapPayload            `json:"eapPayload"`
		AdditionalProperties map[string]interface{} `json:"-"`
	}
	JSON200                   *EapSession
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r EapAuthMethodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EapAuthMethodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostRgAuthenticationsWithBodyWithResponse request with arbitrary body returning *PostRgAuthenticationsResponse
func (c *ClientWithResponses) PostRgAuthenticationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRgAuthenticationsResponse, error) {
	rsp, err := c.PostRgAuthenticationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRgAuthenticationsResponse(rsp)
}

func (c *ClientWithResponses) PostRgAuthenticationsWithResponse(ctx context.Context, body PostRgAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRgAuthenticationsResponse, error) {
	rsp, err := c.PostRgAuthentications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRgAuthenticationsResponse(rsp)
}

// PostUeAuthenticationsWithBodyWithResponse request with arbitrary body returning *PostUeAuthenticationsResponse
func (c *ClientWithResponses) PostUeAuthenticationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsResponse, error) {
	rsp, err := c.PostUeAuthenticationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUeAuthenticationsResponse(rsp)
}

func (c *ClientWithResponses) PostUeAuthenticationsWithResponse(ctx context.Context, body PostUeAuthenticationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsResponse, error) {
	rsp, err := c.PostUeAuthentications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUeAuthenticationsResponse(rsp)
}

// PostUeAuthenticationsDeregisterWithBodyWithResponse request with arbitrary body returning *PostUeAuthenticationsDeregisterResponse
func (c *ClientWithResponses) PostUeAuthenticationsDeregisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsDeregisterResponse, error) {
	rsp, err := c.PostUeAuthenticationsDeregisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUeAuthenticationsDeregisterResponse(rsp)
}

func (c *ClientWithResponses) PostUeAuthenticationsDeregisterWithResponse(ctx context.Context, body PostUeAuthenticationsDeregisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUeAuthenticationsDeregisterResponse, error) {
	rsp, err := c.PostUeAuthenticationsDeregister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUeAuthenticationsDeregisterResponse(rsp)
}

// Delete5gAkaAuthenticationResultWithResponse request returning *Delete5gAkaAuthenticationResultResponse
func (c *ClientWithResponses) Delete5gAkaAuthenticationResultWithResponse(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*Delete5gAkaAuthenticationResultResponse, error) {
	rsp, err := c.Delete5gAkaAuthenticationResult(ctx, authCtxId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete5gAkaAuthenticationResultResponse(rsp)
}

// PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBodyWithResponse request with arbitrary body returning *PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse
func (c *ClientWithResponses) PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBodyWithResponse(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse, error) {
	rsp, err := c.PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithBody(ctx, authCtxId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(rsp)
}

func (c *ClientWithResponses) PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithResponse(ctx context.Context, authCtxId string, body PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse, error) {
	rsp, err := c.PutUeAuthenticationsAuthCtxId5gAkaConfirmation(ctx, authCtxId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(rsp)
}

// DeleteEapAuthenticationResultWithResponse request returning *DeleteEapAuthenticationResultResponse
func (c *ClientWithResponses) DeleteEapAuthenticationResultWithResponse(ctx context.Context, authCtxId string, reqEditors ...RequestEditorFn) (*DeleteEapAuthenticationResultResponse, error) {
	rsp, err := c.DeleteEapAuthenticationResult(ctx, authCtxId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEapAuthenticationResultResponse(rsp)
}

// EapAuthMethodWithBodyWithResponse request with arbitrary body returning *EapAuthMethodResponse
func (c *ClientWithResponses) EapAuthMethodWithBodyWithResponse(ctx context.Context, authCtxId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EapAuthMethodResponse, error) {
	rsp, err := c.EapAuthMethodWithBody(ctx, authCtxId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEapAuthMethodResponse(rsp)
}

func (c *ClientWithResponses) EapAuthMethodWithResponse(ctx context.Context, authCtxId string, body EapAuthMethodJSONRequestBody, reqEditors ...RequestEditorFn) (*EapAuthMethodResponse, error) {
	rsp, err := c.EapAuthMethod(ctx, authCtxId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEapAuthMethodResponse(rsp)
}

// ParsePostRgAuthenticationsResponse parses an HTTP response from a PostRgAuthenticationsWithResponse call
func ParsePostRgAuthenticationsResponse(rsp *http.Response) (*PostRgAuthenticationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRgAuthenticationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RgAuthCtx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ParsePostUeAuthenticationsResponse parses an HTTP response from a PostUeAuthenticationsWithResponse call
func ParsePostUeAuthenticationsResponse(rsp *http.Response) (*PostUeAuthenticationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUeAuthenticationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UEAuthenticationCtx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.Application3gppHalJSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	}

	return response, nil
}

// ParsePostUeAuthenticationsDeregisterResponse parses an HTTP response from a PostUeAuthenticationsDeregisterWithResponse call
func ParsePostUeAuthenticationsDeregisterResponse(rsp *http.Response) (*PostUeAuthenticationsDeregisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUeAuthenticationsDeregisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ParseDelete5gAkaAuthenticationResultResponse parses an HTTP response from a Delete5gAkaAuthenticationResultWithResponse call
func ParseDelete5gAkaAuthenticationResultResponse(rsp *http.Response) (*Delete5gAkaAuthenticationResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete5gAkaAuthenticationResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParsePutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse parses an HTTP response from a PutUeAuthenticationsAuthCtxId5gAkaConfirmationWithResponse call
func ParsePutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(rsp *http.Response) (*PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfirmationDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteEapAuthenticationResultResponse parses an HTTP response from a DeleteEapAuthenticationResultWithResponse call
func ParseDeleteEapAuthenticationResultResponse(rsp *http.Response) (*DeleteEapAuthenticationResultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEapAuthenticationResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseEapAuthMethodResponse parses an HTTP response from a EapAuthMethodWithResponse call
func ParseEapAuthMethodResponse(rsp *http.Response) (*EapAuthMethodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EapAuthMethodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/3gppHal+json" && rsp.StatusCode == 200:
		var dest struct {
			// Links URI : /{eapSessionUri}
			Links map[string]externalRef0.LinksValueSchema `json:"_links"`

			// EapPayload contains an EAP packet
			EapPayload           *EapPayload            `json:"eapPayload"`
			AdditionalProperties map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.Application3gppHalJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest EapSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /rg-authentications)
	PostRgAuthentications(c *gin.Context)

	// (POST /ue-authentications)
	PostUeAuthentications(c *gin.Context)

	// (POST /ue-authentications/deregister)
	PostUeAuthenticationsDeregister(c *gin.Context)
	// Deletes the authentication result in the UDM
	// (DELETE /ue-authentications/{authCtxId}/5g-aka-confirmation)
	Delete5gAkaAuthenticationResult(c *gin.Context, authCtxId string)

	// (PUT /ue-authentications/{authCtxId}/5g-aka-confirmation)
	PutUeAuthenticationsAuthCtxId5gAkaConfirmation(c *gin.Context, authCtxId string)
	// Deletes the authentication result in the UDM
	// (DELETE /ue-authentications/{authCtxId}/eap-session)
	DeleteEapAuthenticationResult(c *gin.Context, authCtxId string)

	// (POST /ue-authentications/{authCtxId}/eap-session)
	EapAuthMethod(c *gin.Context, authCtxId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostRgAuthentications operation middleware
func (siw *ServerInterfaceWrapper) PostRgAuthentications(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nausf-auth"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRgAuthentications(c)
}

// PostUeAuthentications operation middleware
func (siw *ServerInterfaceWrapper) PostUeAuthentications(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nausf-auth"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUeAuthentications(c)
}

// PostUeAuthenticationsDeregister operation middleware
func (siw *ServerInterfaceWrapper) PostUeAuthenticationsDeregister(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nausf-auth"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUeAuthenticationsDeregister(c)
}

// Delete5gAkaAuthenticationResult operation middleware
func (siw *ServerInterfaceWrapper) Delete5gAkaAuthenticationResult(c *gin.Context) {

	var err error

	// ------------- Path parameter "authCtxId" -------------
	var authCtxId string

	err = runtime.BindStyledParameter("simple", false, "authCtxId", c.Param("authCtxId"), &authCtxId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authCtxId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nausf-auth"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Delete5gAkaAuthenticationResult(c, authCtxId)
}

// PutUeAuthenticationsAuthCtxId5gAkaConfirmation operation middleware
func (siw *ServerInterfaceWrapper) PutUeAuthenticationsAuthCtxId5gAkaConfirmation(c *gin.Context) {

	var err error

	// ------------- Path parameter "authCtxId" -------------
	var authCtxId string

	err = runtime.BindStyledParameter("simple", false, "authCtxId", c.Param("authCtxId"), &authCtxId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authCtxId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nausf-auth"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUeAuthenticationsAuthCtxId5gAkaConfirmation(c, authCtxId)
}

// DeleteEapAuthenticationResult operation middleware
func (siw *ServerInterfaceWrapper) DeleteEapAuthenticationResult(c *gin.Context) {

	var err error

	// ------------- Path parameter "authCtxId" -------------
	var authCtxId string

	err = runtime.BindStyledParameter("simple", false, "authCtxId", c.Param("authCtxId"), &authCtxId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authCtxId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nausf-auth"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEapAuthenticationResult(c, authCtxId)
}

// EapAuthMethod operation middleware
func (siw *ServerInterfaceWrapper) EapAuthMethod(c *gin.Context) {

	var err error

	// ------------- Path parameter "authCtxId" -------------
	var authCtxId string

	err = runtime.BindStyledParameter("simple", false, "authCtxId", c.Param("authCtxId"), &authCtxId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authCtxId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nausf-auth"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EapAuthMethod(c, authCtxId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/rg-authentications", wrapper.PostRgAuthentications)
	router.POST(options.BaseURL+"/ue-authentications", wrapper.PostUeAuthentications)
	router.POST(options.BaseURL+"/ue-authentications/deregister", wrapper.PostUeAuthenticationsDeregister)
	router.DELETE(options.BaseURL+"/ue-authentications/:authCtxId/5g-aka-confirmation", wrapper.Delete5gAkaAuthenticationResult)
	router.PUT(options.BaseURL+"/ue-authentications/:authCtxId/5g-aka-confirmation", wrapper.PutUeAuthenticationsAuthCtxId5gAkaConfirmation)
	router.DELETE(options.BaseURL+"/ue-authentications/:authCtxId/eap-session", wrapper.DeleteEapAuthenticationResult)
	router.POST(options.BaseURL+"/ue-authentications/:authCtxId/eap-session", wrapper.EapAuthMethod)
}

type PostRgAuthenticationsRequestObject struct {
	Body *PostRgAuthenticationsJSONRequestBody
}

type PostRgAuthenticationsResponseObject interface {
	VisitPostRgAuthenticationsResponse(w http.ResponseWriter) error
}

type PostRgAuthentications201ResponseHeaders struct {
	Location string
}

type PostRgAuthentications201JSONResponse struct {
	Body    RgAuthCtx
	Headers PostRgAuthentications201ResponseHeaders
}

func (response PostRgAuthentications201JSONResponse) VisitPostRgAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRgAuthentications307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PostRgAuthentications307JSONResponse) VisitPostRgAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRgAuthentications308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PostRgAuthentications308JSONResponse) VisitPostRgAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostRgAuthentications400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostRgAuthentications400ApplicationProblemPlusJSONResponse) VisitPostRgAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRgAuthentications403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostRgAuthentications403ApplicationProblemPlusJSONResponse) VisitPostRgAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostRgAuthentications404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostRgAuthentications404ApplicationProblemPlusJSONResponse) VisitPostRgAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUeAuthenticationsRequestObject struct {
	Body *PostUeAuthenticationsJSONRequestBody
}

type PostUeAuthenticationsResponseObject interface {
	VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error
}

type PostUeAuthentications201ResponseHeaders struct {
	Location string
}

type PostUeAuthentications201Application3gppHalPlusJSONResponse struct {
	Body    UEAuthenticationCtx
	Headers PostUeAuthentications201ResponseHeaders
}

func (response PostUeAuthentications201Application3gppHalPlusJSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/3gppHal+json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUeAuthentications307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PostUeAuthentications307JSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUeAuthentications308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PostUeAuthentications308JSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUeAuthentications400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostUeAuthentications400ApplicationProblemPlusJSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUeAuthentications403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostUeAuthentications403ApplicationProblemPlusJSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostUeAuthentications404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostUeAuthentications404ApplicationProblemPlusJSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostUeAuthentications500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostUeAuthentications500ApplicationProblemPlusJSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUeAuthentications501ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostUeAuthentications501ApplicationProblemPlusJSONResponse) VisitPostUeAuthenticationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type PostUeAuthenticationsDeregisterRequestObject struct {
	Body *PostUeAuthenticationsDeregisterJSONRequestBody
}

type PostUeAuthenticationsDeregisterResponseObject interface {
	VisitPostUeAuthenticationsDeregisterResponse(w http.ResponseWriter) error
}

type PostUeAuthenticationsDeregister204Response struct {
}

func (response PostUeAuthenticationsDeregister204Response) VisitPostUeAuthenticationsDeregisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostUeAuthenticationsDeregister307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PostUeAuthenticationsDeregister307JSONResponse) VisitPostUeAuthenticationsDeregisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUeAuthenticationsDeregister308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PostUeAuthenticationsDeregister308JSONResponse) VisitPostUeAuthenticationsDeregisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUeAuthenticationsDeregister404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PostUeAuthenticationsDeregister404ApplicationProblemPlusJSONResponse) VisitPostUeAuthenticationsDeregisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Delete5gAkaAuthenticationResultRequestObject struct {
	AuthCtxId string `json:"authCtxId"`
}

type Delete5gAkaAuthenticationResultResponseObject interface {
	VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error
}

type Delete5gAkaAuthenticationResult204Response struct {
}

func (response Delete5gAkaAuthenticationResult204Response) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Delete5gAkaAuthenticationResult307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response Delete5gAkaAuthenticationResult307JSONResponse) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type Delete5gAkaAuthenticationResult308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response Delete5gAkaAuthenticationResult308JSONResponse) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type Delete5gAkaAuthenticationResult400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Delete5gAkaAuthenticationResult400ApplicationProblemPlusJSONResponse) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Delete5gAkaAuthenticationResult404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Delete5gAkaAuthenticationResult404ApplicationProblemPlusJSONResponse) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Delete5gAkaAuthenticationResult500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Delete5gAkaAuthenticationResult500ApplicationProblemPlusJSONResponse) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Delete5gAkaAuthenticationResult503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Delete5gAkaAuthenticationResult503ApplicationProblemPlusJSONResponse) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Delete5gAkaAuthenticationResultdefaultResponse struct {
	StatusCode int
}

func (response Delete5gAkaAuthenticationResultdefaultResponse) VisitDelete5gAkaAuthenticationResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestObject struct {
	AuthCtxId string `json:"authCtxId"`
	Body      *PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponseObject interface {
	VisitPutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(w http.ResponseWriter) error
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmation200JSONResponse ConfirmationDataResponse

func (response PutUeAuthenticationsAuthCtxId5gAkaConfirmation200JSONResponse) VisitPutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PutUeAuthenticationsAuthCtxId5gAkaConfirmation307JSONResponse) VisitPutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PutUeAuthenticationsAuthCtxId5gAkaConfirmation308JSONResponse) VisitPutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmation400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PutUeAuthenticationsAuthCtxId5gAkaConfirmation400ApplicationProblemPlusJSONResponse) VisitPutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUeAuthenticationsAuthCtxId5gAkaConfirmation500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PutUeAuthenticationsAuthCtxId5gAkaConfirmation500ApplicationProblemPlusJSONResponse) VisitPutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEapAuthenticationResultRequestObject struct {
	AuthCtxId string `json:"authCtxId"`
}

type DeleteEapAuthenticationResultResponseObject interface {
	VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error
}

type DeleteEapAuthenticationResult204Response struct {
}

func (response DeleteEapAuthenticationResult204Response) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEapAuthenticationResult307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeleteEapAuthenticationResult307JSONResponse) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEapAuthenticationResult308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeleteEapAuthenticationResult308JSONResponse) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEapAuthenticationResult400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteEapAuthenticationResult400ApplicationProblemPlusJSONResponse) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEapAuthenticationResult404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteEapAuthenticationResult404ApplicationProblemPlusJSONResponse) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEapAuthenticationResult500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteEapAuthenticationResult500ApplicationProblemPlusJSONResponse) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEapAuthenticationResult503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteEapAuthenticationResult503ApplicationProblemPlusJSONResponse) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEapAuthenticationResultdefaultResponse struct {
	StatusCode int
}

func (response DeleteEapAuthenticationResultdefaultResponse) VisitDeleteEapAuthenticationResultResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type EapAuthMethodRequestObject struct {
	AuthCtxId string `json:"authCtxId"`
	Body      *EapAuthMethodJSONRequestBody
}

type EapAuthMethodResponseObject interface {
	VisitEapAuthMethodResponse(w http.ResponseWriter) error
}

type EapAuthMethod200Application3gppHalPlusJSONResponse struct {
	// Links URI : /{eapSessionUri}
	Links map[string]externalRef0.LinksValueSchema `json:"_links"`

	// EapPayload contains an EAP packet
	EapPayload           *EapPayload            `json:"eapPayload"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

func (response EapAuthMethod200Application3gppHalPlusJSONResponse) VisitEapAuthMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/3gppHal+json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EapAuthMethod200JSONResponse EapSession

func (response EapAuthMethod200JSONResponse) VisitEapAuthMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EapAuthMethod307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response EapAuthMethod307JSONResponse) VisitEapAuthMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type EapAuthMethod308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response EapAuthMethod308JSONResponse) VisitEapAuthMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type EapAuthMethod400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response EapAuthMethod400ApplicationProblemPlusJSONResponse) VisitEapAuthMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type EapAuthMethod500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response EapAuthMethod500ApplicationProblemPlusJSONResponse) VisitEapAuthMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /rg-authentications)
	PostRgAuthentications(ctx context.Context, request PostRgAuthenticationsRequestObject) (PostRgAuthenticationsResponseObject, error)

	// (POST /ue-authentications)
	PostUeAuthentications(ctx context.Context, request PostUeAuthenticationsRequestObject) (PostUeAuthenticationsResponseObject, error)

	// (POST /ue-authentications/deregister)
	PostUeAuthenticationsDeregister(ctx context.Context, request PostUeAuthenticationsDeregisterRequestObject) (PostUeAuthenticationsDeregisterResponseObject, error)
	// Deletes the authentication result in the UDM
	// (DELETE /ue-authentications/{authCtxId}/5g-aka-confirmation)
	Delete5gAkaAuthenticationResult(ctx context.Context, request Delete5gAkaAuthenticationResultRequestObject) (Delete5gAkaAuthenticationResultResponseObject, error)

	// (PUT /ue-authentications/{authCtxId}/5g-aka-confirmation)
	PutUeAuthenticationsAuthCtxId5gAkaConfirmation(ctx context.Context, request PutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestObject) (PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponseObject, error)
	// Deletes the authentication result in the UDM
	// (DELETE /ue-authentications/{authCtxId}/eap-session)
	DeleteEapAuthenticationResult(ctx context.Context, request DeleteEapAuthenticationResultRequestObject) (DeleteEapAuthenticationResultResponseObject, error)

	// (POST /ue-authentications/{authCtxId}/eap-session)
	EapAuthMethod(ctx context.Context, request EapAuthMethodRequestObject) (EapAuthMethodResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostRgAuthentications operation middleware
func (sh *strictHandler) PostRgAuthentications(ctx *gin.Context) {
	var request PostRgAuthenticationsRequestObject

	var body PostRgAuthenticationsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRgAuthentications(ctx, request.(PostRgAuthenticationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRgAuthentications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostRgAuthenticationsResponseObject); ok {
		if err := validResponse.VisitPostRgAuthenticationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUeAuthentications operation middleware
func (sh *strictHandler) PostUeAuthentications(ctx *gin.Context) {
	var request PostUeAuthenticationsRequestObject

	var body PostUeAuthenticationsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUeAuthentications(ctx, request.(PostUeAuthenticationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUeAuthentications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUeAuthenticationsResponseObject); ok {
		if err := validResponse.VisitPostUeAuthenticationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUeAuthenticationsDeregister operation middleware
func (sh *strictHandler) PostUeAuthenticationsDeregister(ctx *gin.Context) {
	var request PostUeAuthenticationsDeregisterRequestObject

	var body PostUeAuthenticationsDeregisterJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUeAuthenticationsDeregister(ctx, request.(PostUeAuthenticationsDeregisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUeAuthenticationsDeregister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUeAuthenticationsDeregisterResponseObject); ok {
		if err := validResponse.VisitPostUeAuthenticationsDeregisterResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Delete5gAkaAuthenticationResult operation middleware
func (sh *strictHandler) Delete5gAkaAuthenticationResult(ctx *gin.Context, authCtxId string) {
	var request Delete5gAkaAuthenticationResultRequestObject

	request.AuthCtxId = authCtxId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Delete5gAkaAuthenticationResult(ctx, request.(Delete5gAkaAuthenticationResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Delete5gAkaAuthenticationResult")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Delete5gAkaAuthenticationResultResponseObject); ok {
		if err := validResponse.VisitDelete5gAkaAuthenticationResultResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutUeAuthenticationsAuthCtxId5gAkaConfirmation operation middleware
func (sh *strictHandler) PutUeAuthenticationsAuthCtxId5gAkaConfirmation(ctx *gin.Context, authCtxId string) {
	var request PutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestObject

	request.AuthCtxId = authCtxId

	var body PutUeAuthenticationsAuthCtxId5gAkaConfirmationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUeAuthenticationsAuthCtxId5gAkaConfirmation(ctx, request.(PutUeAuthenticationsAuthCtxId5gAkaConfirmationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUeAuthenticationsAuthCtxId5gAkaConfirmation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutUeAuthenticationsAuthCtxId5gAkaConfirmationResponseObject); ok {
		if err := validResponse.VisitPutUeAuthenticationsAuthCtxId5gAkaConfirmationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEapAuthenticationResult operation middleware
func (sh *strictHandler) DeleteEapAuthenticationResult(ctx *gin.Context, authCtxId string) {
	var request DeleteEapAuthenticationResultRequestObject

	request.AuthCtxId = authCtxId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEapAuthenticationResult(ctx, request.(DeleteEapAuthenticationResultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEapAuthenticationResult")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteEapAuthenticationResultResponseObject); ok {
		if err := validResponse.VisitDeleteEapAuthenticationResultResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EapAuthMethod operation middleware
func (sh *strictHandler) EapAuthMethod(ctx *gin.Context, authCtxId string) {
	var request EapAuthMethodRequestObject

	request.AuthCtxId = authCtxId

	var body EapAuthMethodJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EapAuthMethod(ctx, request.(EapAuthMethodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EapAuthMethod")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EapAuthMethodResponseObject); ok {
		if err := validResponse.VisitEapAuthMethodResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
