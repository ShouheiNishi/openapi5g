// Package management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package management

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// GetPCFBindingsParams defines parameters for GetPCFBindings.
type GetPCFBindingsParams struct {
	// Ipv4Addr The IPv4 Address of the served UE.
	Ipv4Addr *externalRef0.Ipv4Addr `form:"ipv4Addr,omitempty" json:"ipv4Addr,omitempty"`

	// Ipv6Prefix The IPv6 Address of the served UE. The NF service consumer shall append '/128' to the IPv6 address in the attribute value. E.g. '2001:db8:85a3::8a2e:370:7334/128'.
	Ipv6Prefix *externalRef0.Ipv6Prefix `form:"ipv6Prefix,omitempty" json:"ipv6Prefix,omitempty"`

	// MacAddr48 The MAC Address of the served UE.
	MacAddr48 *externalRef0.MacAddr48 `form:"macAddr48,omitempty" json:"macAddr48,omitempty"`

	// Dnn DNN.
	Dnn *externalRef0.Dnn `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Supi Subscription Permanent Identifier.
	Supi *externalRef0.Supi `form:"supi,omitempty" json:"supi,omitempty"`

	// Gpsi Generic Public Subscription Identifier
	Gpsi *externalRef0.Gpsi `form:"gpsi,omitempty" json:"gpsi,omitempty"`

	// Snssai The identification of slice.
	Snssai *externalRef0.Snssai `form:"snssai,omitempty" json:"snssai,omitempty"`

	// IpDomain The IPv4 address domain identifier.
	IpDomain *string `form:"ipDomain,omitempty" json:"ipDomain,omitempty"`

	// SuppFeat To filter irrelevant responses related to unsupported features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// CreatePCFBindingJSONRequestBody defines body for CreatePCFBinding for application/json ContentType.
type CreatePCFBindingJSONRequestBody = externalRef0.PcfBinding

// UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndPCFBinding for application/merge-patch+json ContentType.
type UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody = externalRef0.PcfBindingPatch

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPCFBindings request
	GetPCFBindings(ctx context.Context, params *GetPCFBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePCFBindingWithBody request with any body
	CreatePCFBindingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePCFBinding(ctx context.Context, body CreatePCFBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndPCFBinding request
	DeleteIndPCFBinding(ctx context.Context, bindingId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndPCFBindingWithBody request with any body
	UpdateIndPCFBindingWithBody(ctx context.Context, bindingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndPCFBindingWithApplicationMergePatchPlusJSONBody(ctx context.Context, bindingId string, body UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPCFBindings(ctx context.Context, params *GetPCFBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPCFBindingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePCFBindingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePCFBindingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePCFBinding(ctx context.Context, body CreatePCFBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePCFBindingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndPCFBinding(ctx context.Context, bindingId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndPCFBindingRequest(c.Server, bindingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndPCFBindingWithBody(ctx context.Context, bindingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndPCFBindingRequestWithBody(c.Server, bindingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndPCFBindingWithApplicationMergePatchPlusJSONBody(ctx context.Context, bindingId string, body UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndPCFBindingRequestWithApplicationMergePatchPlusJSONBody(c.Server, bindingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPCFBindingsRequest generates requests for GetPCFBindings
func NewGetPCFBindingsRequest(server string, params *GetPCFBindingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pcfBindings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ipv4Addr != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipv4Addr", runtime.ParamLocationQuery, *params.Ipv4Addr); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ipv6Prefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipv6Prefix", runtime.ParamLocationQuery, *params.Ipv6Prefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MacAddr48 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "macAddr48", runtime.ParamLocationQuery, *params.MacAddr48); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supi", runtime.ParamLocationQuery, *params.Supi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Gpsi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gpsi", runtime.ParamLocationQuery, *params.Gpsi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssai != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssai", string(queryParamBuf))
			}

		}

		if params.IpDomain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipDomain", runtime.ParamLocationQuery, *params.IpDomain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePCFBindingRequest calls the generic CreatePCFBinding builder with application/json body
func NewCreatePCFBindingRequest(server string, body CreatePCFBindingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePCFBindingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePCFBindingRequestWithBody generates requests for CreatePCFBinding with any type of body
func NewCreatePCFBindingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pcfBindings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndPCFBindingRequest generates requests for DeleteIndPCFBinding
func NewDeleteIndPCFBindingRequest(server string, bindingId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bindingId", runtime.ParamLocationPath, bindingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pcfBindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndPCFBindingRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndPCFBinding builder with application/merge-patch+json body
func NewUpdateIndPCFBindingRequestWithApplicationMergePatchPlusJSONBody(server string, bindingId string, body UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndPCFBindingRequestWithBody(server, bindingId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndPCFBindingRequestWithBody generates requests for UpdateIndPCFBinding with any type of body
func NewUpdateIndPCFBindingRequestWithBody(server string, bindingId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bindingId", runtime.ParamLocationPath, bindingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pcfBindings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPCFBindingsWithResponse request
	GetPCFBindingsWithResponse(ctx context.Context, params *GetPCFBindingsParams, reqEditors ...RequestEditorFn) (*GetPCFBindingsResponse, error)

	// CreatePCFBindingWithBodyWithResponse request with any body
	CreatePCFBindingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePCFBindingResponse, error)

	CreatePCFBindingWithResponse(ctx context.Context, body CreatePCFBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePCFBindingResponse, error)

	// DeleteIndPCFBindingWithResponse request
	DeleteIndPCFBindingWithResponse(ctx context.Context, bindingId string, reqEditors ...RequestEditorFn) (*DeleteIndPCFBindingResponse, error)

	// UpdateIndPCFBindingWithBodyWithResponse request with any body
	UpdateIndPCFBindingWithBodyWithResponse(ctx context.Context, bindingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndPCFBindingResponse, error)

	UpdateIndPCFBindingWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bindingId string, body UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndPCFBindingResponse, error)
}

type GetPCFBindingsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PcfBinding
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetPCFBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPCFBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePCFBindingResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.PcfBinding
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.BsfExtProblemDetails
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreatePCFBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePCFBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndPCFBindingResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndPCFBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndPCFBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndPCFBindingResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PcfBinding
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndPCFBindingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndPCFBindingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPCFBindingsWithResponse request returning *GetPCFBindingsResponse
func (c *ClientWithResponses) GetPCFBindingsWithResponse(ctx context.Context, params *GetPCFBindingsParams, reqEditors ...RequestEditorFn) (*GetPCFBindingsResponse, error) {
	rsp, err := c.GetPCFBindings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPCFBindingsResponse(rsp)
}

// CreatePCFBindingWithBodyWithResponse request with arbitrary body returning *CreatePCFBindingResponse
func (c *ClientWithResponses) CreatePCFBindingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePCFBindingResponse, error) {
	rsp, err := c.CreatePCFBindingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePCFBindingResponse(rsp)
}

func (c *ClientWithResponses) CreatePCFBindingWithResponse(ctx context.Context, body CreatePCFBindingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePCFBindingResponse, error) {
	rsp, err := c.CreatePCFBinding(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePCFBindingResponse(rsp)
}

// DeleteIndPCFBindingWithResponse request returning *DeleteIndPCFBindingResponse
func (c *ClientWithResponses) DeleteIndPCFBindingWithResponse(ctx context.Context, bindingId string, reqEditors ...RequestEditorFn) (*DeleteIndPCFBindingResponse, error) {
	rsp, err := c.DeleteIndPCFBinding(ctx, bindingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndPCFBindingResponse(rsp)
}

// UpdateIndPCFBindingWithBodyWithResponse request with arbitrary body returning *UpdateIndPCFBindingResponse
func (c *ClientWithResponses) UpdateIndPCFBindingWithBodyWithResponse(ctx context.Context, bindingId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndPCFBindingResponse, error) {
	rsp, err := c.UpdateIndPCFBindingWithBody(ctx, bindingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndPCFBindingResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndPCFBindingWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bindingId string, body UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndPCFBindingResponse, error) {
	rsp, err := c.UpdateIndPCFBindingWithApplicationMergePatchPlusJSONBody(ctx, bindingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndPCFBindingResponse(rsp)
}

// ParseGetPCFBindingsResponse parses an HTTP response from a GetPCFBindingsWithResponse call
func ParseGetPCFBindingsResponse(rsp *http.Response) (*GetPCFBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPCFBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PcfBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePCFBindingResponse parses an HTTP response from a CreatePCFBindingWithResponse call
func ParseCreatePCFBindingResponse(rsp *http.Response) (*CreatePCFBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePCFBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.PcfBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.BsfExtProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndPCFBindingResponse parses an HTTP response from a DeleteIndPCFBindingWithResponse call
func ParseDeleteIndPCFBindingResponse(rsp *http.Response) (*DeleteIndPCFBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndPCFBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndPCFBindingResponse parses an HTTP response from a UpdateIndPCFBindingWithResponse call
func ParseUpdateIndPCFBindingResponse(rsp *http.Response) (*UpdateIndPCFBindingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndPCFBindingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PcfBinding
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Read PCF Bindings information
	// (GET /pcfBindings)
	GetPCFBindings(c *gin.Context, params GetPCFBindingsParams)
	// Create a new Individual PCF binding information
	// (POST /pcfBindings)
	CreatePCFBinding(c *gin.Context)
	// Delete an existing Individual PCF Binding information
	// (DELETE /pcfBindings/{bindingId})
	DeleteIndPCFBinding(c *gin.Context, bindingId string)
	// Update an existing Individual PCF Binding information
	// (PATCH /pcfBindings/{bindingId})
	UpdateIndPCFBinding(c *gin.Context, bindingId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPCFBindings operation middleware
func (siw *ServerInterfaceWrapper) GetPCFBindings(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nbsf-management"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPCFBindingsParams

	// ------------- Optional query parameter "ipv4Addr" -------------

	err = runtime.BindQueryParameter("form", true, false, "ipv4Addr", c.Request.URL.Query(), &params.Ipv4Addr)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ipv4Addr: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ipv6Prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "ipv6Prefix", c.Request.URL.Query(), &params.Ipv6Prefix)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ipv6Prefix: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "macAddr48" -------------

	err = runtime.BindQueryParameter("form", true, false, "macAddr48", c.Request.URL.Query(), &params.MacAddr48)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter macAddr48: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supi" -------------

	err = runtime.BindQueryParameter("form", true, false, "supi", c.Request.URL.Query(), &params.Supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gpsi" -------------

	err = runtime.BindQueryParameter("form", true, false, "gpsi", c.Request.URL.Query(), &params.Gpsi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gpsi: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssai" -------------

	if paramValue := c.Query("snssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssai = &value

	}

	// ------------- Optional query parameter "ipDomain" -------------

	err = runtime.BindQueryParameter("form", true, false, "ipDomain", c.Request.URL.Query(), &params.IpDomain)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ipDomain: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPCFBindings(c, params)
}

// CreatePCFBinding operation middleware
func (siw *ServerInterfaceWrapper) CreatePCFBinding(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nbsf-management"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePCFBinding(c)
}

// DeleteIndPCFBinding operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndPCFBinding(c *gin.Context) {

	var err error

	// ------------- Path parameter "bindingId" -------------
	var bindingId string

	err = runtime.BindStyledParameterWithOptions("simple", "bindingId", c.Param("bindingId"), &bindingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bindingId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nbsf-management"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndPCFBinding(c, bindingId)
}

// UpdateIndPCFBinding operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndPCFBinding(c *gin.Context) {

	var err error

	// ------------- Path parameter "bindingId" -------------
	var bindingId string

	err = runtime.BindStyledParameterWithOptions("simple", "bindingId", c.Param("bindingId"), &bindingId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bindingId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nbsf-management"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndPCFBinding(c, bindingId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/pcfBindings", wrapper.GetPCFBindings)
	router.POST(options.BaseURL+"/pcfBindings", wrapper.CreatePCFBinding)
	router.DELETE(options.BaseURL+"/pcfBindings/:bindingId", wrapper.DeleteIndPCFBinding)
	router.PATCH(options.BaseURL+"/pcfBindings/:bindingId", wrapper.UpdateIndPCFBinding)
}

type GetPCFBindingsRequestObject struct {
	Params GetPCFBindingsParams
}

type GetPCFBindingsResponseObject interface {
	VisitGetPCFBindingsResponse(w http.ResponseWriter) error
}

type GetPCFBindings200JSONResponse externalRef0.PcfBinding

func (response GetPCFBindings200JSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PcfBinding(response))
}

type GetPCFBindings204Response struct {
}

func (response GetPCFBindings204Response) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetPCFBindings400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings400ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetPCFBindings401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings401ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type GetPCFBindings403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings403ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GetPCFBindings404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings404ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetPCFBindings406Response externalRef0.N406Response

func (response GetPCFBindings406Response) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type GetPCFBindings414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings414ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type GetPCFBindings429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings429ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type GetPCFBindings500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings500ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetPCFBindings503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetPCFBindings503ApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetPCFBindingsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetPCFBindingsdefaultApplicationProblemPlusJSONResponse) VisitGetPCFBindingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePCFBindingRequestObject struct {
	Body *CreatePCFBindingJSONRequestBody
}

type CreatePCFBindingResponseObject interface {
	VisitCreatePCFBindingResponse(w http.ResponseWriter) error
}

type CreatePCFBinding201ResponseHeaders struct {
	Location string
}

type CreatePCFBinding201JSONResponse struct {
	Body    externalRef0.PcfBinding
	Headers CreatePCFBinding201ResponseHeaders
}

func (response CreatePCFBinding201JSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePCFBinding400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding400ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding401ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding403ApplicationProblemPlusJSONResponse externalRef0.BsfExtProblemDetails

func (response CreatePCFBinding403ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.BsfExtProblemDetails(response))
}

type CreatePCFBinding404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding404ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding411ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding413ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding415ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding429ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding500ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreatePCFBinding503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreatePCFBinding503ApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreatePCFBindingdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreatePCFBindingdefaultApplicationProblemPlusJSONResponse) VisitCreatePCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndPCFBindingRequestObject struct {
	BindingId string `json:"bindingId"`
}

type DeleteIndPCFBindingResponseObject interface {
	VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error
}

type DeleteIndPCFBinding204Response struct {
}

func (response DeleteIndPCFBinding204Response) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndPCFBinding307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeleteIndPCFBinding307JSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndPCFBinding308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeleteIndPCFBinding308JSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndPCFBinding400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndPCFBinding400ApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndPCFBinding401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndPCFBinding401ApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndPCFBinding403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndPCFBinding403ApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndPCFBinding404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndPCFBinding404ApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndPCFBinding429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndPCFBinding429ApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndPCFBinding500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndPCFBinding500ApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndPCFBinding503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndPCFBinding503ApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndPCFBindingdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndPCFBindingdefaultApplicationProblemPlusJSONResponse) VisitDeleteIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndPCFBindingRequestObject struct {
	BindingId string `json:"bindingId"`
	Body      *UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndPCFBindingResponseObject interface {
	VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error
}

type UpdateIndPCFBinding200JSONResponse externalRef0.PcfBinding

func (response UpdateIndPCFBinding200JSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.PcfBinding(response))
}

type UpdateIndPCFBinding307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response UpdateIndPCFBinding307JSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndPCFBinding308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response UpdateIndPCFBinding308JSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndPCFBinding400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding400ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding401ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding403ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding404ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding411ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding413ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding415ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding429ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding500ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBinding503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndPCFBinding503ApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateIndPCFBindingdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndPCFBindingdefaultApplicationProblemPlusJSONResponse) VisitUpdateIndPCFBindingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Read PCF Bindings information
	// (GET /pcfBindings)
	GetPCFBindings(ctx context.Context, request GetPCFBindingsRequestObject) (GetPCFBindingsResponseObject, error)
	// Create a new Individual PCF binding information
	// (POST /pcfBindings)
	CreatePCFBinding(ctx context.Context, request CreatePCFBindingRequestObject) (CreatePCFBindingResponseObject, error)
	// Delete an existing Individual PCF Binding information
	// (DELETE /pcfBindings/{bindingId})
	DeleteIndPCFBinding(ctx context.Context, request DeleteIndPCFBindingRequestObject) (DeleteIndPCFBindingResponseObject, error)
	// Update an existing Individual PCF Binding information
	// (PATCH /pcfBindings/{bindingId})
	UpdateIndPCFBinding(ctx context.Context, request UpdateIndPCFBindingRequestObject) (UpdateIndPCFBindingResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetPCFBindings operation middleware
func (sh *strictHandler) GetPCFBindings(ctx *gin.Context, params GetPCFBindingsParams) {
	var request GetPCFBindingsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPCFBindings(ctx, request.(GetPCFBindingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPCFBindings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPCFBindingsResponseObject); ok {
		if err := validResponse.VisitGetPCFBindingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePCFBinding operation middleware
func (sh *strictHandler) CreatePCFBinding(ctx *gin.Context) {
	var request CreatePCFBindingRequestObject

	var body CreatePCFBindingJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePCFBinding(ctx, request.(CreatePCFBindingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePCFBinding")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePCFBindingResponseObject); ok {
		if err := validResponse.VisitCreatePCFBindingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndPCFBinding operation middleware
func (sh *strictHandler) DeleteIndPCFBinding(ctx *gin.Context, bindingId string) {
	var request DeleteIndPCFBindingRequestObject

	request.BindingId = bindingId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndPCFBinding(ctx, request.(DeleteIndPCFBindingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndPCFBinding")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndPCFBindingResponseObject); ok {
		if err := validResponse.VisitDeleteIndPCFBindingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndPCFBinding operation middleware
func (sh *strictHandler) UpdateIndPCFBinding(ctx *gin.Context, bindingId string) {
	var request UpdateIndPCFBindingRequestObject

	request.BindingId = bindingId

	var body UpdateIndPCFBindingApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndPCFBinding(ctx, request.(UpdateIndPCFBindingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndPCFBinding")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndPCFBindingResponseObject); ok {
		if err := validResponse.VisitUpdateIndPCFBindingResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
