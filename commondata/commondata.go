// Package commondata provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package commondata

import (
	"encoding/json"
	"fmt"
	"time"

	f5gcModels "github.com/free5gc/openapi/models"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AccessType.
const (
	N3GPPACCESS   AccessType = "3GPP_ACCESS"
	NON3GPPACCESS AccessType = "NON_3GPP_ACCESS"
)

// Defines values for AdditionalQosFlowInfo0.
const (
	MORELIKELY AdditionalQosFlowInfo0 = "MORE_LIKELY"
)

// Defines values for AuthStatus.
const (
	EAPFAILURE AuthStatus = "EAP_FAILURE"
	EAPSUCCESS AuthStatus = "EAP_SUCCESS"
	PENDING    AuthStatus = "PENDING"
)

// Defines values for ChangeType.
const (
	ADD     ChangeType = "ADD"
	MOVE    ChangeType = "MOVE"
	REMOVE  ChangeType = "REMOVE"
	REPLACE ChangeType = "REPLACE"
)

// Defines values for CollectionPeriodRmmLteMdt.
const (
	CollectionPeriodRmmLteMdtN1024  CollectionPeriodRmmLteMdt = "1024"
	CollectionPeriodRmmLteMdtN10240 CollectionPeriodRmmLteMdt = "10240"
	CollectionPeriodRmmLteMdtN1280  CollectionPeriodRmmLteMdt = "1280"
	CollectionPeriodRmmLteMdtN2048  CollectionPeriodRmmLteMdt = "2048"
	CollectionPeriodRmmLteMdtN2560  CollectionPeriodRmmLteMdt = "2560"
	CollectionPeriodRmmLteMdtN5120  CollectionPeriodRmmLteMdt = "5120"
	CollectionPeriodRmmLteMdtN60000 CollectionPeriodRmmLteMdt = "60000"
)

// Defines values for CollectionPeriodRmmNrMdt.
const (
	CollectionPeriodRmmNrMdtN1024  CollectionPeriodRmmNrMdt = "1024"
	CollectionPeriodRmmNrMdtN10240 CollectionPeriodRmmNrMdt = "10240"
	CollectionPeriodRmmNrMdtN2048  CollectionPeriodRmmNrMdt = "2048"
	CollectionPeriodRmmNrMdtN5120  CollectionPeriodRmmNrMdt = "5120"
	CollectionPeriodRmmNrMdtN60000 CollectionPeriodRmmNrMdt = "60000"
)

// Defines values for CoreNetworkType.
const (
	EPC  CoreNetworkType = "EPC"
	N5GC CoreNetworkType = "5GC"
)

// Defines values for DlDataDeliveryStatus.
const (
	BUFFERED    DlDataDeliveryStatus = "BUFFERED"
	DISCARDED   DlDataDeliveryStatus = "DISCARDED"
	TRANSMITTED DlDataDeliveryStatus = "TRANSMITTED"
)

// Defines values for DnaiChangeType.
const (
	EARLY     DnaiChangeType = "EARLY"
	EARLYLATE DnaiChangeType = "EARLY_LATE"
	LATE      DnaiChangeType = "LATE"
)

// Defines values for EventForMdt.
const (
	A2EVENT      EventForMdt = "A2_EVENT"
	OUTOFCOVERAG EventForMdt = "OUT_OF_COVERAG"
)

// Defines values for ExtSnssaiWildcardSd.
const (
	ExtSnssaiWildcardSdTrue ExtSnssaiWildcardSd = true
)

// Defines values for HttpMethod.
const (
	CONNECT HttpMethod = "CONNECT"
	DELETE  HttpMethod = "DELETE"
	GET     HttpMethod = "GET"
	HEAD    HttpMethod = "HEAD"
	OPTIONS HttpMethod = "OPTIONS"
	PATCH   HttpMethod = "PATCH"
	POST    HttpMethod = "POST"
	PUT     HttpMethod = "PUT"
	TRACE   HttpMethod = "TRACE"
)

// Defines values for JobType.
const (
	IMMEDIATEMDTANDTRACE JobType = "IMMEDIATE_MDT_AND_TRACE"
	IMMEDIATEMDTONLY     JobType = "IMMEDIATE_MDT_ONLY"
	LOGGEDMBSFNMDT       JobType = "LOGGED_MBSFN_MDT"
	LOGGEDMDTONLY        JobType = "LOGGED_MDT_ONLY"
	RCEFREPORTSONLY      JobType = "RCEF_REPORTS_ONLY"
	RLFREPORTSONLY       JobType = "RLF_REPORTS_ONLY"
	TRACEONLY            JobType = "TRACE_ONLY"
)

// Defines values for LcsServiceAuth.
const (
	LOCATIONALLOWEDWITHNOTIFICATION    LcsServiceAuth = "LOCATION_ALLOWED_WITH_NOTIFICATION"
	LOCATIONALLOWEDWITHOUTNOTIFICATION LcsServiceAuth = "LOCATION_ALLOWED_WITHOUT_NOTIFICATION"
	LOCATIONALLOWEDWITHOUTRESPONSE     LcsServiceAuth = "LOCATION_ALLOWED_WITHOUT_RESPONSE"
	LOCATIONRESTRICTEDWITHOUTRESPONSE  LcsServiceAuth = "LOCATION_RESTRICTED_WITHOUT_RESPONSE"
	NOTIFICATIONANDVERIFICATIONONLY    LcsServiceAuth = "NOTIFICATION_AND_VERIFICATION_ONLY"
	NOTIFICATIONONLY                   LcsServiceAuth = "NOTIFICATION_ONLY"
)

// Defines values for LineType.
const (
	DSL LineType = "DSL"
	PON LineType = "PON"
)

// Defines values for LoggingDurationMdt.
const (
	LoggingDurationMdtN1200 LoggingDurationMdt = "1200"
	LoggingDurationMdtN2400 LoggingDurationMdt = "2400"
	LoggingDurationMdtN3600 LoggingDurationMdt = "3600"
	LoggingDurationMdtN5400 LoggingDurationMdt = "5400"
	LoggingDurationMdtN600  LoggingDurationMdt = "600"
	LoggingDurationMdtN7200 LoggingDurationMdt = "7200"
)

// Defines values for LoggingDurationNrMdt.
const (
	LoggingDurationNrMdtN1200 LoggingDurationNrMdt = "1200"
	LoggingDurationNrMdtN2400 LoggingDurationNrMdt = "2400"
	LoggingDurationNrMdtN3600 LoggingDurationNrMdt = "3600"
	LoggingDurationNrMdtN5400 LoggingDurationNrMdt = "5400"
	LoggingDurationNrMdtN600  LoggingDurationNrMdt = "600"
	LoggingDurationNrMdtN7200 LoggingDurationNrMdt = "7200"
)

// Defines values for LoggingIntervalMdt.
const (
	LoggingIntervalMdtN1024 LoggingIntervalMdt = "1024"
	LoggingIntervalMdtN128  LoggingIntervalMdt = "128"
	LoggingIntervalMdtN2048 LoggingIntervalMdt = "2048"
	LoggingIntervalMdtN256  LoggingIntervalMdt = "256"
	LoggingIntervalMdtN3072 LoggingIntervalMdt = "3072"
	LoggingIntervalMdtN4096 LoggingIntervalMdt = "4096"
	LoggingIntervalMdtN512  LoggingIntervalMdt = "512"
	LoggingIntervalMdtN6144 LoggingIntervalMdt = "6144"
)

// Defines values for LoggingIntervalNrMdt.
const (
	LoggingIntervalNrMdtInfinity LoggingIntervalNrMdt = "infinity"
	LoggingIntervalNrMdtN1024    LoggingIntervalNrMdt = "1024"
	LoggingIntervalNrMdtN128     LoggingIntervalNrMdt = "128"
	LoggingIntervalNrMdtN2048    LoggingIntervalNrMdt = "2048"
	LoggingIntervalNrMdtN256     LoggingIntervalNrMdt = "256"
	LoggingIntervalNrMdtN3072    LoggingIntervalNrMdt = "3072"
	LoggingIntervalNrMdtN320     LoggingIntervalNrMdt = "320"
	LoggingIntervalNrMdtN4096    LoggingIntervalNrMdt = "4096"
	LoggingIntervalNrMdtN512     LoggingIntervalNrMdt = "512"
	LoggingIntervalNrMdtN6144    LoggingIntervalNrMdt = "6144"
	LoggingIntervalNrMdtN640     LoggingIntervalNrMdt = "640"
)

// Defines values for MeasurementLteForMdt.
const (
	MeasurementLteForMdtM1   MeasurementLteForMdt = "M1"
	MeasurementLteForMdtM2   MeasurementLteForMdt = "M2"
	MeasurementLteForMdtM3   MeasurementLteForMdt = "M3"
	MeasurementLteForMdtM4DL MeasurementLteForMdt = "M4_DL"
	MeasurementLteForMdtM4UL MeasurementLteForMdt = "M4_UL"
	MeasurementLteForMdtM5DL MeasurementLteForMdt = "M5_DL"
	MeasurementLteForMdtM5UL MeasurementLteForMdt = "M5_UL"
	MeasurementLteForMdtM6DL MeasurementLteForMdt = "M6_DL"
	MeasurementLteForMdtM6UL MeasurementLteForMdt = "M6_UL"
	MeasurementLteForMdtM7DL MeasurementLteForMdt = "M7_DL"
	MeasurementLteForMdtM7UL MeasurementLteForMdt = "M7_UL"
	MeasurementLteForMdtM8   MeasurementLteForMdt = "M8"
	MeasurementLteForMdtM9   MeasurementLteForMdt = "M9"
)

// Defines values for MeasurementNrForMdt.
const (
	MeasurementNrForMdtM1   MeasurementNrForMdt = "M1"
	MeasurementNrForMdtM2   MeasurementNrForMdt = "M2"
	MeasurementNrForMdtM3   MeasurementNrForMdt = "M3"
	MeasurementNrForMdtM4DL MeasurementNrForMdt = "M4_DL"
	MeasurementNrForMdtM4UL MeasurementNrForMdt = "M4_UL"
	MeasurementNrForMdtM5DL MeasurementNrForMdt = "M5_DL"
	MeasurementNrForMdtM5UL MeasurementNrForMdt = "M5_UL"
	MeasurementNrForMdtM6DL MeasurementNrForMdt = "M6_DL"
	MeasurementNrForMdtM6UL MeasurementNrForMdt = "M6_UL"
	MeasurementNrForMdtM7DL MeasurementNrForMdt = "M7_DL"
	MeasurementNrForMdtM7UL MeasurementNrForMdt = "M7_UL"
	MeasurementNrForMdtM8   MeasurementNrForMdt = "M8"
	MeasurementNrForMdtM9   MeasurementNrForMdt = "M9"
)

// Defines values for MeasurementPeriodLteMdt.
const (
	MeasurementPeriodLteMdtN1024  MeasurementPeriodLteMdt = "1024"
	MeasurementPeriodLteMdtN10240 MeasurementPeriodLteMdt = "10240"
	MeasurementPeriodLteMdtN1280  MeasurementPeriodLteMdt = "1280"
	MeasurementPeriodLteMdtN2048  MeasurementPeriodLteMdt = "2048"
	MeasurementPeriodLteMdtN2560  MeasurementPeriodLteMdt = "2560"
	MeasurementPeriodLteMdtN5120  MeasurementPeriodLteMdt = "5120"
	MeasurementPeriodLteMdtN60000 MeasurementPeriodLteMdt = "60000"
)

// Defines values for NotificationControl.
const (
	NOTREQUESTED NotificationControl = "NOT_REQUESTED"
	REQUESTED    NotificationControl = "REQUESTED"
)

// Defines values for OdbPacketServices0.
const (
	ALLPACKETSERVICES   OdbPacketServices0 = "ALL_PACKET_SERVICES"
	ROAMERACCESSHPLMNAP OdbPacketServices0 = "ROAMER_ACCESS_HPLMN_AP"
	ROAMERACCESSVPLMNAP OdbPacketServices0 = "ROAMER_ACCESS_VPLMN_AP"
)

// Defines values for PatchOperation.
const (
	Add     PatchOperation = "add"
	Copy    PatchOperation = "copy"
	Move    PatchOperation = "move"
	Remove  PatchOperation = "remove"
	Replace PatchOperation = "replace"
	Test    PatchOperation = "test"
)

// Defines values for PduSessionType.
const (
	ETHERNET     PduSessionType = "ETHERNET"
	IPV4         PduSessionType = "IPV4"
	IPV4V6       PduSessionType = "IPV4V6"
	IPV6         PduSessionType = "IPV6"
	UNSTRUCTURED PduSessionType = "UNSTRUCTURED"
)

// Defines values for PositioningMethodMdt.
const (
	ECELLID PositioningMethodMdt = "E_CELL_ID"
	GNSS    PositioningMethodMdt = "GNSS"
)

// Defines values for PreemptionCapability.
const (
	MAYPREEMPT PreemptionCapability = "MAY_PREEMPT"
	NOTPREEMPT PreemptionCapability = "NOT_PREEMPT"
)

// Defines values for PreemptionVulnerability.
const (
	NOTPREEMPTABLE PreemptionVulnerability = "NOT_PREEMPTABLE"
	PREEMPTABLE    PreemptionVulnerability = "PREEMPTABLE"
)

// Defines values for PresenceState.
const (
	INACTIVE  PresenceState = "INACTIVE"
	INAREA    PresenceState = "IN_AREA"
	OUTOFAREA PresenceState = "OUT_OF_AREA"
	UNKNOWN   PresenceState = "UNKNOWN"
)

// Defines values for QosResourceType.
const (
	CRITICALGBR    QosResourceType = "CRITICAL_GBR"
	NONCRITICALGBR QosResourceType = "NON_CRITICAL_GBR"
	NONGBR         QosResourceType = "NON_GBR"
)

// Defines values for RatType.
const (
	EUTRA         RatType = "EUTRA"
	EUTRAU        RatType = "EUTRA_U"
	GERA          RatType = "GERA"
	LTEM          RatType = "LTE-M"
	NBIOT         RatType = "NBIOT"
	NR            RatType = "NR"
	NRU           RatType = "NR_U"
	TRUSTEDN3GA   RatType = "TRUSTED_N3GA"
	TRUSTEDWLAN   RatType = "TRUSTED_WLAN"
	UTRA          RatType = "UTRA"
	VIRTUAL       RatType = "VIRTUAL"
	WIRELINE      RatType = "WIRELINE"
	WIRELINEBBF   RatType = "WIRELINE_BBF"
	WIRELINECABLE RatType = "WIRELINE_CABLE"
	WLAN          RatType = "WLAN"
)

// Defines values for ReflectiveQoSAttribute.
const (
	NORQOS ReflectiveQoSAttribute = "NO_RQOS"
	RQOS   ReflectiveQoSAttribute = "RQOS"
)

// Defines values for ReportAmountMdt.
const (
	Infinity ReportAmountMdt = "infinity"
	N1       ReportAmountMdt = "1"
	N16      ReportAmountMdt = "16"
	N2       ReportAmountMdt = "2"
	N32      ReportAmountMdt = "32"
	N4       ReportAmountMdt = "4"
	N64      ReportAmountMdt = "64"
	N8       ReportAmountMdt = "8"
)

// Defines values for ReportIntervalMdt.
const (
	ReportIntervalMdtN1024   ReportIntervalMdt = "1024"
	ReportIntervalMdtN10240  ReportIntervalMdt = "10240"
	ReportIntervalMdtN120    ReportIntervalMdt = "120"
	ReportIntervalMdtN18e06  ReportIntervalMdt = "1.8e+06"
	ReportIntervalMdtN2048   ReportIntervalMdt = "2048"
	ReportIntervalMdtN240    ReportIntervalMdt = "240"
	ReportIntervalMdtN360000 ReportIntervalMdt = "360000"
	ReportIntervalMdtN36e06  ReportIntervalMdt = "3.6e+06"
	ReportIntervalMdtN480    ReportIntervalMdt = "480"
	ReportIntervalMdtN5120   ReportIntervalMdt = "5120"
	ReportIntervalMdtN60000  ReportIntervalMdt = "60000"
	ReportIntervalMdtN640    ReportIntervalMdt = "640"
	ReportIntervalMdtN720000 ReportIntervalMdt = "720000"
)

// Defines values for ReportIntervalNrMdt.
const (
	N1024   ReportIntervalNrMdt = "1024"
	N10240  ReportIntervalNrMdt = "10240"
	N120    ReportIntervalNrMdt = "120"
	N18e06  ReportIntervalNrMdt = "1.8e+06"
	N2048   ReportIntervalNrMdt = "2048"
	N20480  ReportIntervalNrMdt = "20480"
	N240    ReportIntervalNrMdt = "240"
	N360000 ReportIntervalNrMdt = "360000"
	N36e06  ReportIntervalNrMdt = "3.6e+06"
	N40960  ReportIntervalNrMdt = "40960"
	N480    ReportIntervalNrMdt = "480"
	N5120   ReportIntervalNrMdt = "5120"
	N60000  ReportIntervalNrMdt = "60000"
	N640    ReportIntervalNrMdt = "640"
	N720000 ReportIntervalNrMdt = "720000"
)

// Defines values for ReportTypeMdt.
const (
	ReportTypeMdtEVENTTRIGGED ReportTypeMdt = "EVENT_TRIGGED"
	ReportTypeMdtPERIODICAL   ReportTypeMdt = "PERIODICAL"
)

// Defines values for ReportingTrigger.
const (
	ReportingTriggerALLRRMEVENTTRIGGERS ReportingTrigger = "ALL_RRM_EVENT_TRIGGERS"
	ReportingTriggerEVENTA2             ReportingTrigger = "EVENT_A2"
	ReportingTriggerEVENTA2PERIODIC     ReportingTrigger = "EVENT_A2_PERIODIC"
	ReportingTriggerPERIODICAL          ReportingTrigger = "PERIODICAL"
)

// Defines values for RestrictionType.
const (
	ALLOWEDAREAS    RestrictionType = "ALLOWED_AREAS"
	NOTALLOWEDAREAS RestrictionType = "NOT_ALLOWED_AREAS"
)

// Defines values for RoamingOdb.
const (
	OUTSIDEHOMEPLMN        RoamingOdb = "OUTSIDE_HOME_PLMN"
	OUTSIDEHOMEPLMNCOUNTRY RoamingOdb = "OUTSIDE_HOME_PLMN_COUNTRY"
)

// Defines values for ScheduledCommunicationType.
const (
	BIDIRECTIONAL ScheduledCommunicationType = "BIDIRECTIONAL"
	DOWNLINKONLY  ScheduledCommunicationType = "DOWNLINK_ONLY"
	UPLINKONLY    ScheduledCommunicationType = "UPLINK_ONLY"
)

// Defines values for SensorMeasurement.
const (
	BAROMETRICPRESSURE SensorMeasurement = "BAROMETRIC_PRESSURE"
	UEORIENTATION      SensorMeasurement = "UE_ORIENTATION"
	UESPEED            SensorMeasurement = "UE_SPEED"
)

// Defines values for SnssaiExtensionWildcardSd.
const (
	SnssaiExtensionWildcardSdTrue SnssaiExtensionWildcardSd = true
)

// Defines values for SscMode.
const (
	SSCMODE1 SscMode = "SSC_MODE_1"
	SSCMODE2 SscMode = "SSC_MODE_2"
	SSCMODE3 SscMode = "SSC_MODE_3"
)

// Defines values for StationaryIndication.
const (
	MOBILE     StationaryIndication = "MOBILE"
	STATIONARY StationaryIndication = "STATIONARY"
)

// Defines values for TraceDepth.
const (
	MAXIMUM                  TraceDepth = "MAXIMUM"
	MAXIMUMWOVENDOREXTENSION TraceDepth = "MAXIMUM_WO_VENDOR_EXTENSION"
	MEDIUM                   TraceDepth = "MEDIUM"
	MEDIUMWOVENDOREXTENSION  TraceDepth = "MEDIUM_WO_VENDOR_EXTENSION"
	MINIMUM                  TraceDepth = "MINIMUM"
	MINIMUMWOVENDOREXTENSION TraceDepth = "MINIMUM_WO_VENDOR_EXTENSION"
)

// Defines values for TrafficProfile.
const (
	DUALTRANSDLFIRST TrafficProfile = "DUAL_TRANS_DL_FIRST"
	DUALTRANSULFIRST TrafficProfile = "DUAL_TRANS_UL_FIRST"
	MULTITRANS       TrafficProfile = "MULTI_TRANS"
	SINGLETRANSDL    TrafficProfile = "SINGLE_TRANS_DL"
	SINGLETRANSUL    TrafficProfile = "SINGLE_TRANS_UL"
)

// Defines values for TransportProtocol.
const (
	TCP TransportProtocol = "TCP"
	UDP TransportProtocol = "UDP"
)

// Defines values for UeAuth.
const (
	AUTHORIZED    UeAuth = "AUTHORIZED"
	NOTAUTHORIZED UeAuth = "NOT_AUTHORIZED"
)

// Defines values for UpConfidentiality.
const (
	UpConfidentialityNOTNEEDED UpConfidentiality = "NOT_NEEDED"
	UpConfidentialityPREFERRED UpConfidentiality = "PREFERRED"
	UpConfidentialityREQUIRED  UpConfidentiality = "REQUIRED"
)

// Defines values for UpIntegrity.
const (
	UpIntegrityNOTNEEDED UpIntegrity = "NOT_NEEDED"
	UpIntegrityPREFERRED UpIntegrity = "PREFERRED"
	UpIntegrityREQUIRED  UpIntegrity = "REQUIRED"
)

// Defines values for UriScheme.
const (
	Http  UriScheme = "http"
	Https UriScheme = "https"
)

// N5GMmCause defines model for 5GMmCause.
type N5GMmCause = Uinteger

// N5Qi defines model for 5Qi.
type N5Qi = int

// N5QiPriorityLevel defines model for 5QiPriorityLevel.
type N5QiPriorityLevel = int

// N5QiPriorityLevelRm defines model for 5QiPriorityLevelRm.
type N5QiPriorityLevelRm = int

// N5QiRm defines model for 5QiRm.
type N5QiRm = int

// AccessType defines model for AccessType.
type AccessType string

// AccessTypeRm defines model for AccessTypeRm.
type AccessTypeRm struct {
	union json.RawMessage
}

// AcsInfo defines model for AcsInfo.
type AcsInfo struct {
	AcsIpv4Addr          Ipv4Addr               `json:"acsIpv4Addr,omitempty"`
	AcsIpv6Addr          *Ipv6Addr              `json:"acsIpv6Addr,omitempty"`
	AcsUrl               *Uri                   `json:"acsUrl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AcsInfoRm defines model for AcsInfoRm.
type AcsInfoRm struct {
	union json.RawMessage
}

// AdditionalQosFlowInfo defines model for AdditionalQosFlowInfo.
type AdditionalQosFlowInfo struct {
	union json.RawMessage
}

// AdditionalQosFlowInfo0 defines model for AdditionalQosFlowInfo.0.
type AdditionalQosFlowInfo0 string

// Ambr defines model for Ambr.
type Ambr struct {
	Downlink             BitRate                `json:"downlink"`
	Uplink               BitRate                `json:"uplink"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmbrRm defines model for AmbrRm.
type AmbrRm struct {
	union json.RawMessage
}

// AmfId defines model for AmfId.
type AmfId = string

// AmfName defines model for AmfName.
type AmfName = string

// AmfRegionId defines model for AmfRegionId.
type AmfRegionId = string

// AmfSetId defines model for AmfSetId.
type AmfSetId = string

// ApnRateStatus defines model for ApnRateStatus.
type ApnRateStatus struct {
	RemainExReportsDl    *int                   `json:"remainExReportsDl,omitempty"`
	RemainExReportsUl    *int                   `json:"remainExReportsUl,omitempty"`
	RemainPacketsDl      *int                   `json:"remainPacketsDl,omitempty"`
	RemainPacketsUl      *int                   `json:"remainPacketsUl,omitempty"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ApplicationChargingId defines model for ApplicationChargingId.
type ApplicationChargingId = string

// ApplicationId defines model for ApplicationId.
type ApplicationId = string

// ApplicationIdRm defines model for ApplicationIdRm.
type ApplicationIdRm = string

// Area defines model for Area.
type Area struct {
	AreaCode             *AreaCode              `json:"areaCode,omitempty"`
	Tacs                 []Tac                  `json:"tacs,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AreaCode defines model for AreaCode.
type AreaCode = string

// AreaCodeRm defines model for AreaCodeRm.
type AreaCodeRm = string

// AreaScope defines model for AreaScope.
type AreaScope struct {
	EutraCellIdList      []EutraCellId          `json:"eutraCellIdList,omitempty"`
	NrCellIdList         []NrCellId             `json:"nrCellIdList,omitempty"`
	TacInfoPerPlmn       *map[string]TacInfo    `json:"tacInfoPerPlmn,omitempty"`
	TacList              []Tac                  `json:"tacList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ArfcnValueNR defines model for ArfcnValueNR.
type ArfcnValueNR = int

// Arp defines model for Arp.
type Arp struct {
	PreemptCap  PreemptionCapability    `json:"preemptCap"`
	PreemptVuln PreemptionVulnerability `json:"preemptVuln"`

	// PriorityLevel nullable true shall not be used for this attribute
	PriorityLevel        *ArpPriorityLevel      `json:"priorityLevel"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ArpPriorityLevel nullable true shall not be used for this attribute
type ArpPriorityLevel = int

// ArpPriorityLevelRm defines model for ArpPriorityLevelRm.
type ArpPriorityLevelRm = int

// ArpRm defines model for ArpRm.
type ArpRm struct {
	union json.RawMessage
}

// Atom defines model for Atom.
type Atom struct {
	Attr                 string                 `json:"attr"`
	Negative             *bool                  `json:"negative,omitempty"`
	Value                interface{}            `json:"value"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AtsssCapability defines model for AtsssCapability.
type AtsssCapability struct {
	AtsssLL              *bool                  `json:"atsssLL,omitempty"`
	Mptcp                *bool                  `json:"mptcp,omitempty"`
	RttWithoutPmf        *bool                  `json:"rttWithoutPmf,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthStatus Possible values are - "EAP_SUCCESS": The NSSAA status is EAP-Success. - "EAP_FAILURE": The NSSAA status is EAP-Failure. - "PENDING": The NSSAA status is Pending.
type AuthStatus string

// AverWindow defines model for AverWindow.
type AverWindow = int

// AverWindowRm defines model for AverWindowRm.
type AverWindowRm = int

// BackupAmfInfo defines model for BackupAmfInfo.
type BackupAmfInfo struct {
	BackupAmf            AmfName                `json:"backupAmf"`
	GuamiList            []Guami                `json:"guamiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BatteryIndication defines model for BatteryIndication.
type BatteryIndication struct {
	BatteryInd           *bool                  `json:"batteryInd,omitempty"`
	RechargeableInd      *bool                  `json:"rechargeableInd,omitempty"`
	ReplaceableInd       *bool                  `json:"replaceableInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BatteryIndicationRm defines model for BatteryIndicationRm.
type BatteryIndicationRm struct {
	union json.RawMessage
}

// Binary defines model for Binary.
type Binary = openapi_types.File

// BinaryRm defines model for BinaryRm.
type BinaryRm = openapi_types.File

// BitRate defines model for BitRate.
type BitRate = string

// BitRateRm defines model for BitRateRm.
type BitRateRm = string

// Bytes defines model for Bytes.
type Bytes = []byte

// BytesRm defines model for BytesRm.
type BytesRm = []byte

// CMsisdn defines model for CMsisdn.
type CMsisdn = string

// CMsisdnRm defines model for CMsisdnRm.
type CMsisdnRm = string

// CagId defines model for CagId.
type CagId = string

// CellGlobalId defines model for CellGlobalId.
type CellGlobalId struct {
	CellId               string                 `json:"cellId"`
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ChangeItem defines model for ChangeItem.
type ChangeItem struct {
	From                 *string                `json:"from,omitempty"`
	NewValue             *interface{}           `json:"newValue,omitempty"`
	Op                   ChangeType             `json:"op"`
	OrigValue            *interface{}           `json:"origValue,omitempty"`
	Path                 string                 `json:"path"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ChangeType defines model for ChangeType.
type ChangeType string

// ChargingId defines model for ChargingId.
type ChargingId = Uint32

// Cnf defines model for Cnf.
type Cnf struct {
	CnfUnits             []CnfUnit              `json:"cnfUnits"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CnfUnit defines model for CnfUnit.
type CnfUnit struct {
	CnfUnit              []Atom                 `json:"cnfUnit"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CollectionPeriodRmmLteMdt defines model for CollectionPeriodRmmLteMdt.
type CollectionPeriodRmmLteMdt string

// CollectionPeriodRmmNrMdt defines model for CollectionPeriodRmmNrMdt.
type CollectionPeriodRmmNrMdt string

// ComplexQuery defines model for ComplexQuery.
type ComplexQuery struct {
	union json.RawMessage
}

// CoreNetworkType defines model for CoreNetworkType.
type CoreNetworkType string

// CoreNetworkTypeRm defines model for CoreNetworkTypeRm.
type CoreNetworkTypeRm struct {
	union json.RawMessage
}

// Date defines model for Date.
type Date = openapi_types.Date

// DateRm defines model for DateRm.
type DateRm = openapi_types.Date

// DateTime defines model for DateTime.
type DateTime = time.Time

// DateTimeRm defines model for DateTimeRm.
type DateTimeRm = time.Time

// DayOfWeek integer between and including 1 and 7 denoting a weekday. 1 shall indicate Monday, and the subsequent weekdays shall be indicated with the next higher numbers. 7 shall indicate Sunday.
type DayOfWeek = int

// DddTrafficDescriptor defines model for DddTrafficDescriptor.
type DddTrafficDescriptor struct {
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	MacAddr              MacAddr48              `json:"macAddr,omitempty"`
	PortNumber           *Uinteger              `json:"portNumber,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DiameterIdentity defines model for DiameterIdentity.
type DiameterIdentity = string

// DiameterIdentityRm defines model for DiameterIdentityRm.
type DiameterIdentityRm = string

// DlDataDeliveryStatus Possible values are - BUFFERED: The first downlink data is buffered with extended buffering matching the source of the downlink traffic. - TRANSMITTED: The first downlink data matching the source of the downlink traffic is transmitted after previous buffering or discarding of corresponding packet(s) because the UE of the PDU Session becomes ACTIVE, and buffered data can be delivered to UE. - DISCARDED: The first downlink data matching the source of the downlink traffic is discarded because the Extended Buffering time, as determined by the SMF, expires or the amount of downlink data to be buffered is exceeded.
type DlDataDeliveryStatus string

// DlDataDeliveryStatusRm defines model for DlDataDeliveryStatusRm.
type DlDataDeliveryStatusRm struct {
	union json.RawMessage
}

// Dnai defines model for Dnai.
type Dnai = string

// DnaiChangeType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
type DnaiChangeType string

// DnaiChangeTypeRm defines model for DnaiChangeTypeRm.
type DnaiChangeTypeRm struct {
	union json.RawMessage
}

// DnaiRm defines model for DnaiRm.
type DnaiRm = string

// Dnf defines model for Dnf.
type Dnf struct {
	DnfUnits             []DnfUnit              `json:"dnfUnits"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DnfUnit defines model for DnfUnit.
type DnfUnit struct {
	DnfUnit              []Atom                 `json:"dnfUnit"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Dnn defines model for Dnn.
type Dnn = string

// DnnRm defines model for DnnRm.
type DnnRm = string

// Double defines model for Double.
type Double = float64

// DoubleRm defines model for DoubleRm.
type DoubleRm = float64

// DurationSec defines model for DurationSec.
type DurationSec = int

// DurationSecRm defines model for DurationSecRm.
type DurationSecRm = int

// Dynamic5Qi defines model for Dynamic5Qi.
type Dynamic5Qi struct {
	AverWindow            AverWindow             `json:"averWindow,omitempty"`
	CnPacketDelayBudgetDl ExtPacketDelBudget     `json:"cnPacketDelayBudgetDl,omitempty"`
	CnPacketDelayBudgetUl ExtPacketDelBudget     `json:"cnPacketDelayBudgetUl,omitempty"`
	ExtMaxDataBurstVol    ExtMaxDataBurstVol     `json:"extMaxDataBurstVol,omitempty"`
	ExtPacketDelBudget    ExtPacketDelBudget     `json:"extPacketDelBudget,omitempty"`
	MaxDataBurstVol       MaxDataBurstVol        `json:"maxDataBurstVol,omitempty"`
	PacketDelayBudget     PacketDelBudget        `json:"packetDelayBudget"`
	PacketErrRate         PacketErrRate          `json:"packetErrRate"`
	PriorityLevel         N5QiPriorityLevel      `json:"priorityLevel"`
	ResourceType          QosResourceType        `json:"resourceType"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// ENbId defines model for ENbId.
type ENbId = string

// Ecgi defines model for Ecgi.
type Ecgi struct {
	EutraCellId          EutraCellId            `json:"eutraCellId"`
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EcgiRm defines model for EcgiRm.
type EcgiRm struct {
	union json.RawMessage
}

// EutraCellId defines model for EutraCellId.
type EutraCellId = string

// EutraCellIdRm defines model for EutraCellIdRm.
type EutraCellIdRm = string

// EutraLocation defines model for EutraLocation.
type EutraLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	Ecgi                     Ecgi                   `json:"ecgi"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	GlobalENbId              *GlobalRanNodeId       `json:"globalENbId,omitempty"`
	GlobalNgenbId            *GlobalRanNodeId       `json:"globalNgenbId,omitempty"`
	IgnoreEcgi               *bool                  `json:"ignoreEcgi,omitempty"`
	IgnoreTai                *bool                  `json:"ignoreTai,omitempty"`
	Tai                      Tai                    `json:"tai"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// EutraLocationRm defines model for EutraLocationRm.
type EutraLocationRm struct {
	union json.RawMessage
}

// EventForMdt defines model for EventForMdt.
type EventForMdt string

// ExtMaxDataBurstVol defines model for ExtMaxDataBurstVol.
type ExtMaxDataBurstVol = int

// ExtMaxDataBurstVolRm defines model for ExtMaxDataBurstVolRm.
type ExtMaxDataBurstVolRm = int

// ExtPacketDelBudget defines model for ExtPacketDelBudget.
type ExtPacketDelBudget = int

// ExtPacketDelBudgetRm defines model for ExtPacketDelBudgetRm.
type ExtPacketDelBudgetRm = int

// ExtSnssai defines model for ExtSnssai.
type ExtSnssai struct {
	Sd string `json:"sd,omitempty"`

	// SdRanges When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	SdRanges []SdRange `json:"sdRanges,omitempty"`
	Sst      int       `json:"sst"`

	// WildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	WildcardSd           *ExtSnssaiWildcardSd   `json:"wildcardSd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExtSnssaiWildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
type ExtSnssaiWildcardSd bool

// ExternalGroupId defines model for ExternalGroupId.
type ExternalGroupId = string

// ExternalGroupIdRm defines model for ExternalGroupIdRm.
type ExternalGroupIdRm = string

// Float defines model for Float.
type Float = float32

// FloatRm defines model for FloatRm.
type FloatRm = float32

// GNbId defines model for GNbId.
type GNbId struct {
	BitLength            int                    `json:"bitLength"`
	GNBValue             string                 `json:"gNBValue"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Gci defines model for Gci.
type Gci = string

// GeraLocation defines model for GeraLocation.
type GeraLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	Cgi                      *CellGlobalId          `json:"cgi,omitempty"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	Lai                      *LocationAreaId        `json:"lai,omitempty"`
	LocationNumber           *string                `json:"locationNumber,omitempty"`
	MscNumber                *string                `json:"mscNumber,omitempty"`
	Rai                      *RoutingAreaId         `json:"rai,omitempty"`
	Sai                      *ServiceAreaId         `json:"sai,omitempty"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	VlrNumber                *string                `json:"vlrNumber,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// Gli defines model for Gli.
type Gli = Bytes

// GlobalRanNodeId defines model for GlobalRanNodeId.
type GlobalRanNodeId struct {
	ENbId                ENbId                  `json:"eNbId,omitempty"`
	GNbId                *GNbId                 `json:"gNbId,omitempty"`
	N3IwfId              N3IwfId                `json:"n3IwfId,omitempty"`
	NgeNbId              NgeNbId                `json:"ngeNbId,omitempty"`
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	TngfId               TngfId                 `json:"tngfId,omitempty"`
	WagfId               WAgfId                 `json:"wagfId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Gpsi defines model for Gpsi.
type Gpsi = string

// GpsiRm defines model for GpsiRm.
type GpsiRm = string

// GroupId defines model for GroupId.
type GroupId = string

// GroupIdRm defines model for GroupIdRm.
type GroupIdRm = string

// Guami defines model for Guami.
type Guami = f5gcModels.Guami

// GuamiRm defines model for GuamiRm.
type GuamiRm struct {
	union json.RawMessage
}

// HalTemplate defines model for HalTemplate.
type HalTemplate struct {
	ContentType          *string                `json:"contentType,omitempty"`
	Method               HttpMethod             `json:"method"`
	Properties           []Property             `json:"properties,omitempty"`
	Title                *string                `json:"title,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HfcNId defines model for HfcNId.
type HfcNId = string

// HfcNIdRm defines model for HfcNIdRm.
type HfcNIdRm = string

// HfcNodeId defines model for HfcNodeId.
type HfcNodeId struct {
	HfcNId               HfcNId                 `json:"hfcNId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HfcNodeIdRm defines model for HfcNodeIdRm.
type HfcNodeIdRm struct {
	union json.RawMessage
}

// HttpMethod defines model for HttpMethod.
type HttpMethod string

// Int32 defines model for Int32.
type Int32 = int32

// Int32Rm defines model for Int32Rm.
type Int32Rm = int32

// Int64 defines model for Int64.
type Int64 = int64

// Int64Rm defines model for Int64Rm.
type Int64Rm = int64

// InterFreqTargetInfo defines model for InterFreqTargetInfo.
type InterFreqTargetInfo struct {
	CellIdList           []PhysCellId           `json:"cellIdList,omitempty"`
	DlCarrierFreq        ArfcnValueNR           `json:"dlCarrierFreq"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// InvalidParam defines model for InvalidParam.
type InvalidParam struct {
	Param                string                 `json:"param"`
	Reason               *string                `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Ipv4Addr defines model for Ipv4Addr.
type Ipv4Addr = string

// Ipv4AddrMask defines model for Ipv4AddrMask.
type Ipv4AddrMask = string

// Ipv4AddrMaskRm defines model for Ipv4AddrMaskRm.
type Ipv4AddrMaskRm = string

// Ipv4AddrRm defines model for Ipv4AddrRm.
type Ipv4AddrRm = string

// Ipv6Addr defines model for Ipv6Addr.
type Ipv6Addr = string

// Ipv6AddrRm defines model for Ipv6AddrRm.
type Ipv6AddrRm = string

// Ipv6Prefix defines model for Ipv6Prefix.
type Ipv6Prefix = string

// Ipv6PrefixRm defines model for Ipv6PrefixRm.
type Ipv6PrefixRm = string

// JobType defines model for JobType.
type JobType string

// LcsServiceAuth Possible values are - "LOCATION_ALLOWED_WITH_NOTIFICATION": Location allowed with notification - "LOCATION_ALLOWED_WITHOUT_NOTIFICATION": Location allowed without notification - "LOCATION_ALLOWED_WITHOUT_RESPONSE": Location with notification and privacy verification; location allowed if no response - "LOCATION_RESTRICTED_WITHOUT_RESPONSE": Location with notification and privacy verification; location restricted if no response - "NOTIFICATION_ONLY": Notification only - "NOTIFICATION_AND_VERIFICATION_ONLY": Notification and privacy verification only
type LcsServiceAuth string

// LineType Possible values are - DSL: Identifies a DSL line - PON: Identifies a PON line
type LineType string

// LineTypeRm defines model for LineTypeRm.
type LineTypeRm struct {
	union json.RawMessage
}

// Link defines model for Link.
type Link struct {
	Href                 *Uri                   `json:"href,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LinkRm defines model for LinkRm.
type LinkRm struct {
	Href                 *Uri                   `json:"href,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LinksValueSchema defines model for LinksValueSchema.
type LinksValueSchema struct {
	union json.RawMessage
}

// LinksValueSchema0 defines model for .
type LinksValueSchema0 = []Link

// LocationAreaId defines model for LocationAreaId.
type LocationAreaId struct {
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LoggingDurationMdt defines model for LoggingDurationMdt.
type LoggingDurationMdt string

// LoggingDurationNrMdt defines model for LoggingDurationNrMdt.
type LoggingDurationNrMdt string

// LoggingIntervalMdt defines model for LoggingIntervalMdt.
type LoggingIntervalMdt string

// LoggingIntervalNrMdt defines model for LoggingIntervalNrMdt.
type LoggingIntervalNrMdt string

// LteV2xAuth defines model for LteV2xAuth.
type LteV2xAuth struct {
	PedestrianUeAuth     *UeAuth                `json:"pedestrianUeAuth,omitempty"`
	VehicleUeAuth        *UeAuth                `json:"vehicleUeAuth,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MacAddr48 defines model for MacAddr48.
type MacAddr48 = string

// MacAddr48Rm defines model for MacAddr48Rm.
type MacAddr48Rm = string

// ManAssiUeRadioCapId defines model for ManAssiUeRadioCapId.
type ManAssiUeRadioCapId = Bytes

// MaxDataBurstVol defines model for MaxDataBurstVol.
type MaxDataBurstVol = int

// MaxDataBurstVolRm defines model for MaxDataBurstVolRm.
type MaxDataBurstVolRm = int

// MbsfnArea defines model for MbsfnArea.
type MbsfnArea struct {
	CarrierFrequency     *int                   `json:"carrierFrequency,omitempty"`
	MbsfnAreaId          *int                   `json:"mbsfnAreaId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Mcc defines model for Mcc.
type Mcc = string

// MccRm defines model for MccRm.
type MccRm = string

// MdtConfiguration defines model for MdtConfiguration.
type MdtConfiguration struct {
	AddPositioningMethodList []PositioningMethodMdt     `json:"addPositioningMethodList,omitempty"`
	AreaScope                *AreaScope                 `json:"areaScope,omitempty"`
	CollectionPeriodRmmLte   *CollectionPeriodRmmLteMdt `json:"collectionPeriodRmmLte,omitempty"`
	CollectionPeriodRmmNr    *CollectionPeriodRmmNrMdt  `json:"collectionPeriodRmmNr,omitempty"`
	EventList                []EventForMdt              `json:"eventList,omitempty"`
	EventThresholdRsrp       *int                       `json:"eventThresholdRsrp,omitempty"`
	EventThresholdRsrpNr     *int                       `json:"eventThresholdRsrpNr,omitempty"`
	EventThresholdRsrq       *int                       `json:"eventThresholdRsrq,omitempty"`
	EventThresholdRsrqNr     *int                       `json:"eventThresholdRsrqNr,omitempty"`
	InterFreqTargetList      []InterFreqTargetInfo      `json:"interFreqTargetList,omitempty"`
	JobType                  JobType                    `json:"jobType"`
	LoggingDuration          *LoggingDurationMdt        `json:"loggingDuration,omitempty"`
	LoggingDurationNr        *LoggingDurationNrMdt      `json:"loggingDurationNr,omitempty"`
	LoggingInterval          *LoggingIntervalMdt        `json:"loggingInterval,omitempty"`
	LoggingIntervalNr        *LoggingIntervalNrMdt      `json:"loggingIntervalNr,omitempty"`
	MbsfnAreaList            []MbsfnArea                `json:"mbsfnAreaList,omitempty"`
	MdtAllowedPlmnIdList     []PlmnId                   `json:"mdtAllowedPlmnIdList,omitempty"`
	MeasurementLteList       *[]MeasurementLteForMdt    `json:"measurementLteList,omitempty"`
	MeasurementNrList        []MeasurementNrForMdt      `json:"measurementNrList,omitempty"`
	MeasurementPeriodLte     *MeasurementPeriodLteMdt   `json:"measurementPeriodLte,omitempty"`
	PositioningMethod        *PositioningMethodMdt      `json:"positioningMethod,omitempty"`
	ReportAmount             *ReportAmountMdt           `json:"reportAmount,omitempty"`
	ReportInterval           *ReportIntervalMdt         `json:"reportInterval,omitempty"`
	ReportIntervalNr         *ReportIntervalNrMdt       `json:"reportIntervalNr,omitempty"`
	ReportType               *ReportTypeMdt             `json:"reportType,omitempty"`
	ReportingTriggerList     []ReportingTrigger         `json:"reportingTriggerList,omitempty"`
	SensorMeasurementList    []SensorMeasurement        `json:"sensorMeasurementList,omitempty"`
	AdditionalProperties     map[string]interface{}     `json:"-"`
}

// MeasurementLteForMdt defines model for MeasurementLteForMdt.
type MeasurementLteForMdt string

// MeasurementNrForMdt defines model for MeasurementNrForMdt.
type MeasurementNrForMdt string

// MeasurementPeriodLteMdt defines model for MeasurementPeriodLteMdt.
type MeasurementPeriodLteMdt string

// Mnc defines model for Mnc.
type Mnc = string

// MncRm defines model for MncRm.
type MncRm = string

// MoExpDataCounter defines model for MoExpDataCounter.
type MoExpDataCounter struct {
	Counter              int                    `json:"counter"`
	TimeStamp            *DateTime              `json:"timeStamp,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MtcProviderInformation defines model for MtcProviderInformation.
type MtcProviderInformation = string

// N3IwfId defines model for N3IwfId.
type N3IwfId = string

// N3gaLocation defines model for N3gaLocation.
type N3gaLocation struct {
	Gci        *Gci       `json:"gci,omitempty"`
	Gli        *Gli       `json:"gli,omitempty"`
	HfcNodeId  *HfcNodeId `json:"hfcNodeId,omitempty"`
	N3IwfId    string     `json:"n3IwfId,omitempty"`
	N3gppTai   *Tai       `json:"n3gppTai,omitempty"`
	PortNumber *Uinteger  `json:"portNumber,omitempty"`

	// Protocol Possible values are - UDP: User Datagram Protocol. - TCP: Transmission Control Protocol.
	Protocol   *TransportProtocol `json:"protocol,omitempty"`
	TnapId     *TnapId            `json:"tnapId,omitempty"`
	TwapId     *TwapId            `json:"twapId,omitempty"`
	UeIpv4Addr Ipv4Addr           `json:"ueIpv4Addr,omitempty"`
	UeIpv6Addr *Ipv6Addr          `json:"ueIpv6Addr,omitempty"`

	// W5gbanLineType Possible values are - DSL: Identifies a DSL line - PON: Identifies a PON line
	W5gbanLineType       *LineType              `json:"w5gbanLineType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Ncgi defines model for Ncgi.
type Ncgi struct {
	Nid                  Nid                    `json:"nid,omitempty"`
	NrCellId             NrCellId               `json:"nrCellId"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NcgiRm defines model for NcgiRm.
type NcgiRm struct {
	union json.RawMessage
}

// NetworkId defines model for NetworkId.
type NetworkId struct {
	Mcc                  Mcc                    `json:"mcc,omitempty"`
	Mnc                  Mnc                    `json:"mnc,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfGroupId defines model for NfGroupId.
type NfGroupId = string

// NfInstanceId defines model for NfInstanceId.
type NfInstanceId = openapi_types.UUID

// NfServiceSetId defines model for NfServiceSetId.
type NfServiceSetId = string

// NfSetId defines model for NfSetId.
type NfSetId = string

// NgApCause defines model for NgApCause.
type NgApCause struct {
	Group                Uinteger               `json:"group"`
	Value                Uinteger               `json:"value"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NgeNbId defines model for NgeNbId.
type NgeNbId = string

// Nid defines model for Nid.
type Nid = string

// NidRm defines model for NidRm.
type NidRm = string

// NonDynamic5Qi defines model for NonDynamic5Qi.
type NonDynamic5Qi struct {
	AverWindow            AverWindow             `json:"averWindow,omitempty"`
	CnPacketDelayBudgetDl ExtPacketDelBudget     `json:"cnPacketDelayBudgetDl,omitempty"`
	CnPacketDelayBudgetUl ExtPacketDelBudget     `json:"cnPacketDelayBudgetUl,omitempty"`
	ExtMaxDataBurstVol    ExtMaxDataBurstVol     `json:"extMaxDataBurstVol,omitempty"`
	MaxDataBurstVol       MaxDataBurstVol        `json:"maxDataBurstVol,omitempty"`
	PriorityLevel         N5QiPriorityLevel      `json:"priorityLevel,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// NotificationControl defines model for NotificationControl.
type NotificationControl string

// NotificationControlRm defines model for NotificationControlRm.
type NotificationControlRm struct {
	union json.RawMessage
}

// NotifyItem defines model for NotifyItem.
type NotifyItem struct {
	Changes              []ChangeItem           `json:"changes"`
	ResourceId           Uri                    `json:"resourceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NrCellId defines model for NrCellId.
type NrCellId = string

// NrCellIdRm defines model for NrCellIdRm.
type NrCellIdRm = string

// NrLocation defines model for NrLocation.
type NrLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	GlobalGnbId              *GlobalRanNodeId       `json:"globalGnbId,omitempty"`
	IgnoreNcgi               *bool                  `json:"ignoreNcgi,omitempty"`
	Ncgi                     Ncgi                   `json:"ncgi"`
	Tai                      Tai                    `json:"tai"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// NrLocationRm defines model for NrLocationRm.
type NrLocationRm struct {
	union json.RawMessage
}

// NrV2xAuth defines model for NrV2xAuth.
type NrV2xAuth struct {
	PedestrianUeAuth     *UeAuth                `json:"pedestrianUeAuth,omitempty"`
	VehicleUeAuth        *UeAuth                `json:"vehicleUeAuth,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NssaaStatus defines model for NssaaStatus.
type NssaaStatus struct {
	Snssai Snssai `json:"snssai"`

	// Status Possible values are - "EAP_SUCCESS": The NSSAA status is EAP-Success. - "EAP_FAILURE": The NSSAA status is EAP-Failure. - "PENDING": The NSSAA status is Pending.
	Status               AuthStatus             `json:"status"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NssaaStatusRm defines model for NssaaStatusRm.
type NssaaStatusRm struct {
	union json.RawMessage
}

// NullValue defines model for NullValue.
type NullValue = interface{}

// OdbData defines model for OdbData.
type OdbData struct {
	RoamingOdb           *RoamingOdb            `json:"roamingOdb,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// OdbPacketServices defines model for OdbPacketServices.
type OdbPacketServices struct {
	union json.RawMessage
}

// OdbPacketServices0 defines model for OdbPacketServices.0.
type OdbPacketServices0 string

// PacketDelBudget defines model for PacketDelBudget.
type PacketDelBudget = int

// PacketDelBudgetRm defines model for PacketDelBudgetRm.
type PacketDelBudgetRm = int

// PacketErrRate defines model for PacketErrRate.
type PacketErrRate = string

// PacketErrRateRm defines model for PacketErrRateRm.
type PacketErrRateRm = string

// PacketLossRate defines model for PacketLossRate.
type PacketLossRate = int

// PacketLossRateRm defines model for PacketLossRateRm.
type PacketLossRateRm = int

// PatchItem defines model for PatchItem.
type PatchItem struct {
	From                 *string                `json:"from,omitempty"`
	Op                   PatchOperation         `json:"op"`
	Path                 string                 `json:"path"`
	Value                *interface{}           `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PatchOperation defines model for PatchOperation.
type PatchOperation string

// PatchResult defines model for PatchResult.
type PatchResult struct {
	Report               []ReportItem           `json:"report"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Pc5FlowBitRates defines model for Pc5FlowBitRates.
type Pc5FlowBitRates struct {
	GuaFbr               BitRate                `json:"guaFbr,omitempty"`
	MaxFbr               BitRate                `json:"maxFbr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Pc5QoSPara defines model for Pc5QoSPara.
type Pc5QoSPara struct {
	Pc5LinkAmbr          BitRate                `json:"pc5LinkAmbr,omitempty"`
	Pc5QosFlowList       []Pc5QosFlowItem       `json:"pc5QosFlowList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Pc5QosFlowItem defines model for Pc5QosFlowItem.
type Pc5QosFlowItem struct {
	Pc5FlowBitRates      *Pc5FlowBitRates       `json:"pc5FlowBitRates,omitempty"`
	Pqi                  N5Qi                   `json:"pqi"`
	Range                *Uinteger              `json:"range,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionId defines model for PduSessionId.
type PduSessionId = int

// PduSessionType defines model for PduSessionType.
type PduSessionType string

// PduSessionTypeRm defines model for PduSessionTypeRm.
type PduSessionTypeRm struct {
	union json.RawMessage
}

// Pei defines model for Pei.
type Pei = string

// PeiRm defines model for PeiRm.
type PeiRm = string

// PhysCellId defines model for PhysCellId.
type PhysCellId = int

// PlmnAssiUeRadioCapId defines model for PlmnAssiUeRadioCapId.
type PlmnAssiUeRadioCapId = Bytes

// PlmnId defines model for PlmnId.
type PlmnId = f5gcModels.PlmnId

// PlmnIdNid defines model for PlmnIdNid.
type PlmnIdNid struct {
	Mcc                  Mcc                    `json:"mcc"`
	Mnc                  Mnc                    `json:"mnc"`
	Nid                  Nid                    `json:"nid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PlmnIdRm defines model for PlmnIdRm.
type PlmnIdRm struct {
	union json.RawMessage
}

// PositioningMethodMdt defines model for PositioningMethodMdt.
type PositioningMethodMdt string

// PreemptionCapability defines model for PreemptionCapability.
type PreemptionCapability string

// PreemptionCapabilityRm defines model for PreemptionCapabilityRm.
type PreemptionCapabilityRm struct {
	union json.RawMessage
}

// PreemptionVulnerability defines model for PreemptionVulnerability.
type PreemptionVulnerability string

// PreemptionVulnerabilityRm defines model for PreemptionVulnerabilityRm.
type PreemptionVulnerabilityRm struct {
	union json.RawMessage
}

// PresenceInfo defines model for PresenceInfo.
type PresenceInfo struct {
	AdditionalPraId      *string                `json:"additionalPraId,omitempty"`
	EcgiList             []Ecgi                 `json:"ecgiList,omitempty"`
	GlobalRanNodeIdList  []GlobalRanNodeId      `json:"globalRanNodeIdList,omitempty"`
	GlobaleNbIdList      []GlobalRanNodeId      `json:"globaleNbIdList,omitempty"`
	NcgiList             []Ncgi                 `json:"ncgiList,omitempty"`
	PraId                *string                `json:"praId,omitempty"`
	PresenceState        *PresenceState         `json:"presenceState,omitempty"`
	TrackingAreaList     []Tai                  `json:"trackingAreaList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PresenceInfoRm defines model for PresenceInfoRm.
type PresenceInfoRm struct {
	AdditionalPraId      *string                `json:"additionalPraId,omitempty"`
	EcgiList             *[]Ecgi                `json:"ecgiList,omitempty"`
	GlobalRanNodeIdList  *[]GlobalRanNodeId     `json:"globalRanNodeIdList,omitempty"`
	GlobaleNbIdList      []GlobalRanNodeId      `json:"globaleNbIdList,omitempty"`
	NcgiList             *[]Ncgi                `json:"ncgiList,omitempty"`
	PraId                *string                `json:"praId,omitempty"`
	PresenceState        *PresenceState         `json:"presenceState,omitempty"`
	TrackingAreaList     *[]Tai                 `json:"trackingAreaList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PresenceState defines model for PresenceState.
type PresenceState string

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AccessTokenError Error returned in the access token response message (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError interface{} `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   interface{}            `json:"accessTokenRequest,omitempty"`
	Cause                *string                `json:"cause,omitempty"`
	Detail               *string                `json:"detail,omitempty"`
	Instance             *Uri                   `json:"instance,omitempty"`
	InvalidParams        []InvalidParam         `json:"invalidParams,omitempty"`
	NrfId                *string                `json:"nrfId,omitempty"`
	Status               int                    `json:"status,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *Uri                   `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Property defines model for Property.
type Property struct {
	Name                 string                 `json:"name"`
	Regex                *string                `json:"regex,omitempty"`
	Required             *bool                  `json:"required,omitempty"`
	Value                *string                `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Qfi defines model for Qfi.
type Qfi = int

// QfiRm defines model for QfiRm.
type QfiRm = int

// QosFlowUsageReport defines model for QosFlowUsageReport.
type QosFlowUsageReport struct {
	DownlinkVolume       Int64                  `json:"downlinkVolume"`
	EndTimeStamp         DateTime               `json:"endTimeStamp"`
	Qfi                  Qfi                    `json:"qfi"`
	StartTimeStamp       DateTime               `json:"startTimeStamp"`
	UplinkVolume         Int64                  `json:"uplinkVolume"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosResourceType defines model for QosResourceType.
type QosResourceType string

// QosResourceTypeRm defines model for QosResourceTypeRm.
type QosResourceTypeRm struct {
	union json.RawMessage
}

// RatType defines model for RatType.
type RatType string

// RatTypeRm defines model for RatTypeRm.
type RatTypeRm struct {
	union json.RawMessage
}

// RatingGroup defines model for RatingGroup.
type RatingGroup = Uint32

// RedirectResponse defines model for RedirectResponse.
type RedirectResponse struct {
	Cause                *string                `json:"cause,omitempty"`
	TargetScp            *Uri                   `json:"targetScp,omitempty"`
	TargetSepp           *Uri                   `json:"targetSepp,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RefToBinaryData defines model for RefToBinaryData.
type RefToBinaryData struct {
	ContentId            string                 `json:"contentId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RefToBinaryDataRm defines model for RefToBinaryDataRm.
type RefToBinaryDataRm struct {
	union json.RawMessage
}

// ReflectiveQoSAttribute defines model for ReflectiveQoSAttribute.
type ReflectiveQoSAttribute string

// ReflectiveQoSAttributeRm defines model for ReflectiveQoSAttributeRm.
type ReflectiveQoSAttributeRm struct {
	union json.RawMessage
}

// ReportAmountMdt defines model for ReportAmountMdt.
type ReportAmountMdt string

// ReportIntervalMdt defines model for ReportIntervalMdt.
type ReportIntervalMdt string

// ReportIntervalNrMdt defines model for ReportIntervalNrMdt.
type ReportIntervalNrMdt string

// ReportItem defines model for ReportItem.
type ReportItem struct {
	Path                 string                 `json:"path"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReportTypeMdt defines model for ReportTypeMdt.
type ReportTypeMdt string

// ReportingTrigger defines model for ReportingTrigger.
type ReportingTrigger string

// RestrictionType defines model for RestrictionType.
type RestrictionType string

// RestrictionTypeRm defines model for RestrictionTypeRm.
type RestrictionTypeRm struct {
	union json.RawMessage
}

// RfspIndex defines model for RfspIndex.
type RfspIndex = int

// RfspIndexRm defines model for RfspIndexRm.
type RfspIndexRm = int

// RgWirelineCharacteristics defines model for RgWirelineCharacteristics.
type RgWirelineCharacteristics = Bytes

// RgWirelineCharacteristicsRm defines model for RgWirelineCharacteristicsRm.
type RgWirelineCharacteristicsRm struct {
	union json.RawMessage
}

// RoamingOdb defines model for RoamingOdb.
type RoamingOdb string

// RouteInformation defines model for RouteInformation.
type RouteInformation struct {
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	PortNumber           Uinteger               `json:"portNumber"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RouteToLocation defines model for RouteToLocation.
type RouteToLocation struct {
	Dnai                 Dnai                   `json:"dnai"`
	RouteInfo            *RouteInformation      `json:"routeInfo"`
	RouteProfId          *string                `json:"routeProfId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RoutingAreaId defines model for RoutingAreaId.
type RoutingAreaId struct {
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	Rac                  string                 `json:"rac"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SamplingRatio defines model for SamplingRatio.
type SamplingRatio = int

// SamplingRatioRm defines model for SamplingRatioRm.
type SamplingRatioRm = int

// ScheduledCommunicationTime defines model for ScheduledCommunicationTime.
type ScheduledCommunicationTime struct {
	// DaysOfWeek Identifies the day(s) of the week. If absent, it indicates every day of the week.
	DaysOfWeek []DayOfWeek `json:"daysOfWeek,omitempty"`

	// TimeOfDayEnd String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayEnd *TimeOfDay `json:"timeOfDayEnd,omitempty"`

	// TimeOfDayStart String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayStart       *TimeOfDay             `json:"timeOfDayStart,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ScheduledCommunicationTimeRm defines model for ScheduledCommunicationTimeRm.
type ScheduledCommunicationTimeRm struct {
	union json.RawMessage
}

// ScheduledCommunicationType defines model for ScheduledCommunicationType.
type ScheduledCommunicationType string

// ScheduledCommunicationTypeRm defines model for ScheduledCommunicationTypeRm.
type ScheduledCommunicationTypeRm struct {
	union json.RawMessage
}

// SdRange A range of SDs (Slice Differentiators)
type SdRange struct {
	End                  string                 `json:"end,omitempty"`
	Start                string                 `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SecondaryRatUsageInfo defines model for SecondaryRatUsageInfo.
type SecondaryRatUsageInfo struct {
	PduSessionUsageData  []VolumeTimedReport    `json:"pduSessionUsageData,omitempty"`
	QosFlowsUsageData    []QosFlowUsageReport   `json:"qosFlowsUsageData,omitempty"`
	SecondaryRatType     RatType                `json:"secondaryRatType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SecondaryRatUsageReport defines model for SecondaryRatUsageReport.
type SecondaryRatUsageReport struct {
	QosFlowsUsageData    []QosFlowUsageReport   `json:"qosFlowsUsageData"`
	SecondaryRatType     RatType                `json:"secondaryRatType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SelfLink defines model for SelfLink.
type SelfLink struct {
	Self                 Link                   `json:"self"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SensorMeasurement defines model for SensorMeasurement.
type SensorMeasurement string

// ServiceAreaId defines model for ServiceAreaId.
type ServiceAreaId struct {
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	Sac                  string                 `json:"sac"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ServiceAreaRestriction defines model for ServiceAreaRestriction.
type ServiceAreaRestriction struct {
	Areas                         *[]Area                `json:"areas,omitempty"`
	MaxNumOfTAs                   *Uinteger              `json:"maxNumOfTAs,omitempty"`
	MaxNumOfTAsForNotAllowedAreas *Uinteger              `json:"maxNumOfTAsForNotAllowedAreas,omitempty"`
	RestrictionType               *RestrictionType       `json:"restrictionType,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// ServiceId defines model for ServiceId.
type ServiceId = Uint32

// SmallDataRateStatus defines model for SmallDataRateStatus.
type SmallDataRateStatus struct {
	RemainExReportsDl    *int                   `json:"remainExReportsDl,omitempty"`
	RemainExReportsUl    *int                   `json:"remainExReportsUl,omitempty"`
	RemainPacketsDl      *int                   `json:"remainPacketsDl,omitempty"`
	RemainPacketsUl      *int                   `json:"remainPacketsUl,omitempty"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Snssai defines model for Snssai.
type Snssai = f5gcModels.Snssai

// SnssaiExtension Extensions to the Snssai data type, sdRanges and wildcardSd shall not be present simultaneously
type SnssaiExtension struct {
	// SdRanges When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	SdRanges []SdRange `json:"sdRanges,omitempty"`

	// WildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	WildcardSd           *SnssaiExtensionWildcardSd `json:"wildcardSd,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// SnssaiExtensionWildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
type SnssaiExtensionWildcardSd bool

// SscMode defines model for SscMode.
type SscMode string

// SscModeRm defines model for SscModeRm.
type SscModeRm struct {
	union json.RawMessage
}

// StationaryIndication Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
type StationaryIndication string

// StationaryIndicationRm defines model for StationaryIndicationRm.
type StationaryIndicationRm struct {
	union json.RawMessage
}

// StnSr defines model for StnSr.
type StnSr = string

// StnSrRm defines model for StnSrRm.
type StnSrRm = string

// SubscribedDefaultQos defines model for SubscribedDefaultQos.
type SubscribedDefaultQos struct {
	N5qi                 N5Qi                   `json:"5qi"`
	Arp                  Arp                    `json:"arp"`
	PriorityLevel        N5QiPriorityLevel      `json:"priorityLevel,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Supi defines model for Supi.
type Supi = string

// SupiOrSuci defines model for SupiOrSuci.
type SupiOrSuci = string

// SupiRm defines model for SupiRm.
type SupiRm = string

// SupportedFeatures defines model for SupportedFeatures.
type SupportedFeatures = string

// Tac defines model for Tac.
type Tac = string

// TacInfo defines model for TacInfo.
type TacInfo struct {
	TacList              []Tac                  `json:"tacList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TacRm defines model for TacRm.
type TacRm = string

// Tai defines model for Tai.
type Tai struct {
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	Tac                  Tac                    `json:"tac"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TaiRm defines model for TaiRm.
type TaiRm struct {
	union json.RawMessage
}

// TimeOfDay String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
type TimeOfDay = string

// TimeZone defines model for TimeZone.
type TimeZone = string

// TimeZoneRm defines model for TimeZoneRm.
type TimeZoneRm = string

// TnapId defines model for TnapId.
type TnapId struct {
	BssId                *string                `json:"bssId,omitempty"`
	CivicAddress         *Bytes                 `json:"civicAddress,omitempty"`
	SsId                 *string                `json:"ssId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TnapIdRm defines model for TnapIdRm.
type TnapIdRm struct {
	union json.RawMessage
}

// TngfId defines model for TngfId.
type TngfId = string

// TraceData defines model for TraceData.
type TraceData struct {
	CollectionEntityIpv4Addr Ipv4Addr               `json:"collectionEntityIpv4Addr,omitempty"`
	CollectionEntityIpv6Addr *Ipv6Addr              `json:"collectionEntityIpv6Addr,omitempty"`
	EventList                string                 `json:"eventList"`
	InterfaceList            string                 `json:"interfaceList,omitempty"`
	NeTypeList               string                 `json:"neTypeList"`
	TraceDepth               TraceDepth             `json:"traceDepth"`
	TraceRef                 string                 `json:"traceRef"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// TraceDepth defines model for TraceDepth.
type TraceDepth string

// TraceDepthRm defines model for TraceDepthRm.
type TraceDepthRm struct {
	union json.RawMessage
}

// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
type TrafficProfile string

// TrafficProfileRm defines model for TrafficProfileRm.
type TrafficProfileRm struct {
	union json.RawMessage
}

// TransportProtocol Possible values are - UDP: User Datagram Protocol. - TCP: Transmission Control Protocol.
type TransportProtocol string

// TwapId defines model for TwapId.
type TwapId struct {
	BssId                *string                `json:"bssId,omitempty"`
	CivicAddress         *Bytes                 `json:"civicAddress,omitempty"`
	SsId                 string                 `json:"ssId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TwapIdRm defines model for TwapIdRm.
type TwapIdRm struct {
	union json.RawMessage
}

// TypeAllocationCode defines model for TypeAllocationCode.
type TypeAllocationCode = string

// UeAuth defines model for UeAuth.
type UeAuth string

// Uint16 defines model for Uint16.
type Uint16 = uint16

// Uint16Rm defines model for Uint16Rm.
type Uint16Rm = uint16

// Uint32 defines model for Uint32.
type Uint32 = uint32

// Uint32Rm defines model for Uint32Rm.
type Uint32Rm = uint32

// Uint64 defines model for Uint64.
type Uint64 = uint64

// Uint64Rm defines model for Uint64Rm.
type Uint64Rm = uint64

// Uinteger defines model for Uinteger.
type Uinteger = uint

// UintegerRm defines model for UintegerRm.
type UintegerRm = uint

// UpConfidentiality defines model for UpConfidentiality.
type UpConfidentiality string

// UpConfidentialityRm defines model for UpConfidentialityRm.
type UpConfidentialityRm struct {
	union json.RawMessage
}

// UpIntegrity defines model for UpIntegrity.
type UpIntegrity string

// UpIntegrityRm defines model for UpIntegrityRm.
type UpIntegrityRm struct {
	union json.RawMessage
}

// UpSecurity defines model for UpSecurity.
type UpSecurity struct {
	UpConfid             UpConfidentiality      `json:"upConfid"`
	UpIntegr             UpIntegrity            `json:"upIntegr"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpSecurityRm defines model for UpSecurityRm.
type UpSecurityRm struct {
	union json.RawMessage
}

// Uri defines model for Uri.
type Uri = string

// UriRm defines model for UriRm.
type UriRm = string

// UriScheme defines model for UriScheme.
type UriScheme string

// UserLocation defines model for UserLocation.
type UserLocation struct {
	EutraLocation        *EutraLocation         `json:"eutraLocation,omitempty"`
	GeraLocation         *GeraLocation          `json:"geraLocation,omitempty"`
	N3gaLocation         *N3gaLocation          `json:"n3gaLocation,omitempty"`
	NrLocation           *NrLocation            `json:"nrLocation,omitempty"`
	UtraLocation         *UtraLocation          `json:"utraLocation,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UtraLocation defines model for UtraLocation.
type UtraLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	Cgi                      *CellGlobalId          `json:"cgi,omitempty"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	Lai                      *LocationAreaId        `json:"lai,omitempty"`
	Rai                      *RoutingAreaId         `json:"rai,omitempty"`
	Sai                      *ServiceAreaId         `json:"sai,omitempty"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// VarUeId defines model for VarUeId.
type VarUeId = string

// VarUeIdRm defines model for VarUeIdRm.
type VarUeIdRm = string

// VolumeTimedReport defines model for VolumeTimedReport.
type VolumeTimedReport struct {
	DownlinkVolume       Int64                  `json:"downlinkVolume"`
	EndTimeStamp         DateTime               `json:"endTimeStamp"`
	StartTimeStamp       DateTime               `json:"startTimeStamp"`
	UplinkVolume         Int64                  `json:"uplinkVolume"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// WAgfId defines model for WAgfId.
type WAgfId = string

// WildcardDnn defines model for WildcardDnn.
type WildcardDnn = string

// WildcardDnnRm defines model for WildcardDnnRm.
type WildcardDnnRm = string

// WirelineArea defines model for WirelineArea.
type WirelineArea struct {
	AreaCodeB            *AreaCode              `json:"areaCodeB,omitempty"`
	AreaCodeC            *AreaCode              `json:"areaCodeC,omitempty"`
	GlobalLineIds        []Gli                  `json:"globalLineIds,omitempty"`
	HfcNIds              []HfcNId               `json:"hfcNIds,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// WirelineServiceAreaRestriction defines model for WirelineServiceAreaRestriction.
type WirelineServiceAreaRestriction struct {
	Areas                *[]WirelineArea        `json:"areas,omitempty"`
	RestrictionType      *RestrictionType       `json:"restrictionType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N307 defines model for 307.
type N307 = RedirectResponse

// N308 defines model for 308.
type N308 = RedirectResponse

// N400 defines model for 400.
type N400 = ProblemDetails

// N401 defines model for 401.
type N401 = ProblemDetails

// N403 defines model for 403.
type N403 = ProblemDetails

// N404 defines model for 404.
type N404 = ProblemDetails

// N408 defines model for 408.
type N408 = ProblemDetails

// N409 defines model for 409.
type N409 = ProblemDetails

// N410 defines model for 410.
type N410 = ProblemDetails

// N411 defines model for 411.
type N411 = ProblemDetails

// N412 defines model for 412.
type N412 = ProblemDetails

// N413 defines model for 413.
type N413 = ProblemDetails

// N414 defines model for 414.
type N414 = ProblemDetails

// N415 defines model for 415.
type N415 = ProblemDetails

// N429 defines model for 429.
type N429 = ProblemDetails

// N500 defines model for 500.
type N500 = ProblemDetails

// N501 defines model for 501.
type N501 = ProblemDetails

// N503 defines model for 503.
type N503 = ProblemDetails

// N504 defines model for 504.
type N504 = ProblemDetails

// Default defines model for default.
type Default = ProblemDetails

// Getter for additional properties for AcsInfo. Returns the specified
// element and whether it was found
func (a AcsInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcsInfo
func (a *AcsInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcsInfo to handle AdditionalProperties
func (a *AcsInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["acsIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AcsIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'acsIpv4Addr': %w", err)
		}
		delete(object, "acsIpv4Addr")
	}

	if raw, found := object["acsIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AcsIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'acsIpv6Addr': %w", err)
		}
		delete(object, "acsIpv6Addr")
	}

	if raw, found := object["acsUrl"]; found {
		err = json.Unmarshal(raw, &a.AcsUrl)
		if err != nil {
			return fmt.Errorf("error reading 'acsUrl': %w", err)
		}
		delete(object, "acsUrl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcsInfo to handle AdditionalProperties
func (a AcsInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AcsIpv4Addr) != 0 {
		object["acsIpv4Addr"], err = json.Marshal(a.AcsIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsIpv4Addr': %w", err)
		}
	}

	if a.AcsIpv6Addr != nil {
		object["acsIpv6Addr"], err = json.Marshal(a.AcsIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsIpv6Addr': %w", err)
		}
	}

	if a.AcsUrl != nil {
		object["acsUrl"], err = json.Marshal(a.AcsUrl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsUrl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ambr. Returns the specified
// element and whether it was found
func (a Ambr) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ambr
func (a *Ambr) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ambr to handle AdditionalProperties
func (a *Ambr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return fmt.Errorf("error reading 'downlink': %w", err)
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return fmt.Errorf("error reading 'uplink': %w", err)
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ambr to handle AdditionalProperties
func (a Ambr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlink"], err = json.Marshal(a.Downlink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlink': %w", err)
	}

	object["uplink"], err = json.Marshal(a.Uplink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplink': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApnRateStatus. Returns the specified
// element and whether it was found
func (a ApnRateStatus) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApnRateStatus
func (a *ApnRateStatus) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApnRateStatus to handle AdditionalProperties
func (a *ApnRateStatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["remainExReportsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsDl': %w", err)
		}
		delete(object, "remainExReportsDl")
	}

	if raw, found := object["remainExReportsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsUl': %w", err)
		}
		delete(object, "remainExReportsUl")
	}

	if raw, found := object["remainPacketsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsDl': %w", err)
		}
		delete(object, "remainPacketsDl")
	}

	if raw, found := object["remainPacketsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsUl': %w", err)
		}
		delete(object, "remainPacketsUl")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApnRateStatus to handle AdditionalProperties
func (a ApnRateStatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RemainExReportsDl != nil {
		object["remainExReportsDl"], err = json.Marshal(a.RemainExReportsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsDl': %w", err)
		}
	}

	if a.RemainExReportsUl != nil {
		object["remainExReportsUl"], err = json.Marshal(a.RemainExReportsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsUl': %w", err)
		}
	}

	if a.RemainPacketsDl != nil {
		object["remainPacketsDl"], err = json.Marshal(a.RemainPacketsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsDl': %w", err)
		}
	}

	if a.RemainPacketsUl != nil {
		object["remainPacketsUl"], err = json.Marshal(a.RemainPacketsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsUl': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Area. Returns the specified
// element and whether it was found
func (a Area) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Area
func (a *Area) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Area to handle AdditionalProperties
func (a *Area) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areaCode"]; found {
		err = json.Unmarshal(raw, &a.AreaCode)
		if err != nil {
			return fmt.Errorf("error reading 'areaCode': %w", err)
		}
		delete(object, "areaCode")
	}

	if raw, found := object["tacs"]; found {
		err = json.Unmarshal(raw, &a.Tacs)
		if err != nil {
			return fmt.Errorf("error reading 'tacs': %w", err)
		}
		delete(object, "tacs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Area to handle AdditionalProperties
func (a Area) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AreaCode != nil {
		object["areaCode"], err = json.Marshal(a.AreaCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaCode': %w", err)
		}
	}

	if len(a.Tacs) != 0 {
		object["tacs"], err = json.Marshal(a.Tacs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tacs': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AreaScope. Returns the specified
// element and whether it was found
func (a AreaScope) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AreaScope
func (a *AreaScope) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AreaScope to handle AdditionalProperties
func (a *AreaScope) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eutraCellIdList"]; found {
		err = json.Unmarshal(raw, &a.EutraCellIdList)
		if err != nil {
			return fmt.Errorf("error reading 'eutraCellIdList': %w", err)
		}
		delete(object, "eutraCellIdList")
	}

	if raw, found := object["nrCellIdList"]; found {
		err = json.Unmarshal(raw, &a.NrCellIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nrCellIdList': %w", err)
		}
		delete(object, "nrCellIdList")
	}

	if raw, found := object["tacInfoPerPlmn"]; found {
		err = json.Unmarshal(raw, &a.TacInfoPerPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'tacInfoPerPlmn': %w", err)
		}
		delete(object, "tacInfoPerPlmn")
	}

	if raw, found := object["tacList"]; found {
		err = json.Unmarshal(raw, &a.TacList)
		if err != nil {
			return fmt.Errorf("error reading 'tacList': %w", err)
		}
		delete(object, "tacList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AreaScope to handle AdditionalProperties
func (a AreaScope) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.EutraCellIdList) != 0 {
		object["eutraCellIdList"], err = json.Marshal(a.EutraCellIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eutraCellIdList': %w", err)
		}
	}

	if len(a.NrCellIdList) != 0 {
		object["nrCellIdList"], err = json.Marshal(a.NrCellIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrCellIdList': %w", err)
		}
	}

	if a.TacInfoPerPlmn != nil {
		object["tacInfoPerPlmn"], err = json.Marshal(a.TacInfoPerPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tacInfoPerPlmn': %w", err)
		}
	}

	if len(a.TacList) != 0 {
		object["tacList"], err = json.Marshal(a.TacList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tacList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Arp. Returns the specified
// element and whether it was found
func (a Arp) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Arp
func (a *Arp) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Arp to handle AdditionalProperties
func (a *Arp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["preemptCap"]; found {
		err = json.Unmarshal(raw, &a.PreemptCap)
		if err != nil {
			return fmt.Errorf("error reading 'preemptCap': %w", err)
		}
		delete(object, "preemptCap")
	}

	if raw, found := object["preemptVuln"]; found {
		err = json.Unmarshal(raw, &a.PreemptVuln)
		if err != nil {
			return fmt.Errorf("error reading 'preemptVuln': %w", err)
		}
		delete(object, "preemptVuln")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Arp to handle AdditionalProperties
func (a Arp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["preemptCap"], err = json.Marshal(a.PreemptCap)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'preemptCap': %w", err)
	}

	object["preemptVuln"], err = json.Marshal(a.PreemptVuln)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'preemptVuln': %w", err)
	}

	object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Atom. Returns the specified
// element and whether it was found
func (a Atom) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Atom
func (a *Atom) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Atom to handle AdditionalProperties
func (a *Atom) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attr"]; found {
		err = json.Unmarshal(raw, &a.Attr)
		if err != nil {
			return fmt.Errorf("error reading 'attr': %w", err)
		}
		delete(object, "attr")
	}

	if raw, found := object["negative"]; found {
		err = json.Unmarshal(raw, &a.Negative)
		if err != nil {
			return fmt.Errorf("error reading 'negative': %w", err)
		}
		delete(object, "negative")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Atom to handle AdditionalProperties
func (a Atom) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["attr"], err = json.Marshal(a.Attr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'attr': %w", err)
	}

	if a.Negative != nil {
		object["negative"], err = json.Marshal(a.Negative)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'negative': %w", err)
		}
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AtsssCapability. Returns the specified
// element and whether it was found
func (a AtsssCapability) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AtsssCapability
func (a *AtsssCapability) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AtsssCapability to handle AdditionalProperties
func (a *AtsssCapability) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["atsssLL"]; found {
		err = json.Unmarshal(raw, &a.AtsssLL)
		if err != nil {
			return fmt.Errorf("error reading 'atsssLL': %w", err)
		}
		delete(object, "atsssLL")
	}

	if raw, found := object["mptcp"]; found {
		err = json.Unmarshal(raw, &a.Mptcp)
		if err != nil {
			return fmt.Errorf("error reading 'mptcp': %w", err)
		}
		delete(object, "mptcp")
	}

	if raw, found := object["rttWithoutPmf"]; found {
		err = json.Unmarshal(raw, &a.RttWithoutPmf)
		if err != nil {
			return fmt.Errorf("error reading 'rttWithoutPmf': %w", err)
		}
		delete(object, "rttWithoutPmf")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AtsssCapability to handle AdditionalProperties
func (a AtsssCapability) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AtsssLL != nil {
		object["atsssLL"], err = json.Marshal(a.AtsssLL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssLL': %w", err)
		}
	}

	if a.Mptcp != nil {
		object["mptcp"], err = json.Marshal(a.Mptcp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mptcp': %w", err)
		}
	}

	if a.RttWithoutPmf != nil {
		object["rttWithoutPmf"], err = json.Marshal(a.RttWithoutPmf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rttWithoutPmf': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BackupAmfInfo. Returns the specified
// element and whether it was found
func (a BackupAmfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BackupAmfInfo
func (a *BackupAmfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BackupAmfInfo to handle AdditionalProperties
func (a *BackupAmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backupAmf"]; found {
		err = json.Unmarshal(raw, &a.BackupAmf)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmf': %w", err)
		}
		delete(object, "backupAmf")
	}

	if raw, found := object["guamiList"]; found {
		err = json.Unmarshal(raw, &a.GuamiList)
		if err != nil {
			return fmt.Errorf("error reading 'guamiList': %w", err)
		}
		delete(object, "guamiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BackupAmfInfo to handle AdditionalProperties
func (a BackupAmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["backupAmf"], err = json.Marshal(a.BackupAmf)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'backupAmf': %w", err)
	}

	if len(a.GuamiList) != 0 {
		object["guamiList"], err = json.Marshal(a.GuamiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guamiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatteryIndication. Returns the specified
// element and whether it was found
func (a BatteryIndication) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatteryIndication
func (a *BatteryIndication) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatteryIndication to handle AdditionalProperties
func (a *BatteryIndication) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryInd"]; found {
		err = json.Unmarshal(raw, &a.BatteryInd)
		if err != nil {
			return fmt.Errorf("error reading 'batteryInd': %w", err)
		}
		delete(object, "batteryInd")
	}

	if raw, found := object["rechargeableInd"]; found {
		err = json.Unmarshal(raw, &a.RechargeableInd)
		if err != nil {
			return fmt.Errorf("error reading 'rechargeableInd': %w", err)
		}
		delete(object, "rechargeableInd")
	}

	if raw, found := object["replaceableInd"]; found {
		err = json.Unmarshal(raw, &a.ReplaceableInd)
		if err != nil {
			return fmt.Errorf("error reading 'replaceableInd': %w", err)
		}
		delete(object, "replaceableInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatteryIndication to handle AdditionalProperties
func (a BatteryIndication) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryInd != nil {
		object["batteryInd"], err = json.Marshal(a.BatteryInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryInd': %w", err)
		}
	}

	if a.RechargeableInd != nil {
		object["rechargeableInd"], err = json.Marshal(a.RechargeableInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rechargeableInd': %w", err)
		}
	}

	if a.ReplaceableInd != nil {
		object["replaceableInd"], err = json.Marshal(a.ReplaceableInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'replaceableInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CellGlobalId. Returns the specified
// element and whether it was found
func (a CellGlobalId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CellGlobalId
func (a *CellGlobalId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CellGlobalId to handle AdditionalProperties
func (a *CellGlobalId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellId"]; found {
		err = json.Unmarshal(raw, &a.CellId)
		if err != nil {
			return fmt.Errorf("error reading 'cellId': %w", err)
		}
		delete(object, "cellId")
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CellGlobalId to handle AdditionalProperties
func (a CellGlobalId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cellId"], err = json.Marshal(a.CellId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cellId': %w", err)
	}

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChangeItem. Returns the specified
// element and whether it was found
func (a ChangeItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChangeItem
func (a *ChangeItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChangeItem to handle AdditionalProperties
func (a *ChangeItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["from"]; found {
		err = json.Unmarshal(raw, &a.From)
		if err != nil {
			return fmt.Errorf("error reading 'from': %w", err)
		}
		delete(object, "from")
	}

	if raw, found := object["newValue"]; found {
		err = json.Unmarshal(raw, &a.NewValue)
		if err != nil {
			return fmt.Errorf("error reading 'newValue': %w", err)
		}
		delete(object, "newValue")
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["origValue"]; found {
		err = json.Unmarshal(raw, &a.OrigValue)
		if err != nil {
			return fmt.Errorf("error reading 'origValue': %w", err)
		}
		delete(object, "origValue")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChangeItem to handle AdditionalProperties
func (a ChangeItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.From != nil {
		object["from"], err = json.Marshal(a.From)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'from': %w", err)
		}
	}

	if a.NewValue != nil {
		object["newValue"], err = json.Marshal(a.NewValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newValue': %w", err)
		}
	}

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	if a.OrigValue != nil {
		object["origValue"], err = json.Marshal(a.OrigValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'origValue': %w", err)
		}
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Cnf. Returns the specified
// element and whether it was found
func (a Cnf) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Cnf
func (a *Cnf) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Cnf to handle AdditionalProperties
func (a *Cnf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cnfUnits"]; found {
		err = json.Unmarshal(raw, &a.CnfUnits)
		if err != nil {
			return fmt.Errorf("error reading 'cnfUnits': %w", err)
		}
		delete(object, "cnfUnits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Cnf to handle AdditionalProperties
func (a Cnf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cnfUnits"], err = json.Marshal(a.CnfUnits)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cnfUnits': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CnfUnit. Returns the specified
// element and whether it was found
func (a CnfUnit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CnfUnit
func (a *CnfUnit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CnfUnit to handle AdditionalProperties
func (a *CnfUnit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cnfUnit"]; found {
		err = json.Unmarshal(raw, &a.CnfUnit)
		if err != nil {
			return fmt.Errorf("error reading 'cnfUnit': %w", err)
		}
		delete(object, "cnfUnit")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CnfUnit to handle AdditionalProperties
func (a CnfUnit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cnfUnit"], err = json.Marshal(a.CnfUnit)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cnfUnit': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DddTrafficDescriptor. Returns the specified
// element and whether it was found
func (a DddTrafficDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DddTrafficDescriptor
func (a *DddTrafficDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DddTrafficDescriptor to handle AdditionalProperties
func (a *DddTrafficDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["macAddr"]; found {
		err = json.Unmarshal(raw, &a.MacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'macAddr': %w", err)
		}
		delete(object, "macAddr")
	}

	if raw, found := object["portNumber"]; found {
		err = json.Unmarshal(raw, &a.PortNumber)
		if err != nil {
			return fmt.Errorf("error reading 'portNumber': %w", err)
		}
		delete(object, "portNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DddTrafficDescriptor to handle AdditionalProperties
func (a DddTrafficDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if len(a.MacAddr) != 0 {
		object["macAddr"], err = json.Marshal(a.MacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'macAddr': %w", err)
		}
	}

	if a.PortNumber != nil {
		object["portNumber"], err = json.Marshal(a.PortNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'portNumber': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Dnf. Returns the specified
// element and whether it was found
func (a Dnf) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Dnf
func (a *Dnf) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Dnf to handle AdditionalProperties
func (a *Dnf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnfUnits"]; found {
		err = json.Unmarshal(raw, &a.DnfUnits)
		if err != nil {
			return fmt.Errorf("error reading 'dnfUnits': %w", err)
		}
		delete(object, "dnfUnits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Dnf to handle AdditionalProperties
func (a Dnf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnfUnits"], err = json.Marshal(a.DnfUnits)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnfUnits': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnfUnit. Returns the specified
// element and whether it was found
func (a DnfUnit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnfUnit
func (a *DnfUnit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnfUnit to handle AdditionalProperties
func (a *DnfUnit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnfUnit"]; found {
		err = json.Unmarshal(raw, &a.DnfUnit)
		if err != nil {
			return fmt.Errorf("error reading 'dnfUnit': %w", err)
		}
		delete(object, "dnfUnit")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnfUnit to handle AdditionalProperties
func (a DnfUnit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnfUnit"], err = json.Marshal(a.DnfUnit)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnfUnit': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Dynamic5Qi. Returns the specified
// element and whether it was found
func (a Dynamic5Qi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Dynamic5Qi
func (a *Dynamic5Qi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Dynamic5Qi to handle AdditionalProperties
func (a *Dynamic5Qi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["averWindow"]; found {
		err = json.Unmarshal(raw, &a.AverWindow)
		if err != nil {
			return fmt.Errorf("error reading 'averWindow': %w", err)
		}
		delete(object, "averWindow")
	}

	if raw, found := object["cnPacketDelayBudgetDl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetDl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetDl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetDl")
	}

	if raw, found := object["cnPacketDelayBudgetUl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetUl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetUl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetUl")
	}

	if raw, found := object["extMaxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.ExtMaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'extMaxDataBurstVol': %w", err)
		}
		delete(object, "extMaxDataBurstVol")
	}

	if raw, found := object["extPacketDelBudget"]; found {
		err = json.Unmarshal(raw, &a.ExtPacketDelBudget)
		if err != nil {
			return fmt.Errorf("error reading 'extPacketDelBudget': %w", err)
		}
		delete(object, "extPacketDelBudget")
	}

	if raw, found := object["maxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.MaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'maxDataBurstVol': %w", err)
		}
		delete(object, "maxDataBurstVol")
	}

	if raw, found := object["packetDelayBudget"]; found {
		err = json.Unmarshal(raw, &a.PacketDelayBudget)
		if err != nil {
			return fmt.Errorf("error reading 'packetDelayBudget': %w", err)
		}
		delete(object, "packetDelayBudget")
	}

	if raw, found := object["packetErrRate"]; found {
		err = json.Unmarshal(raw, &a.PacketErrRate)
		if err != nil {
			return fmt.Errorf("error reading 'packetErrRate': %w", err)
		}
		delete(object, "packetErrRate")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if raw, found := object["resourceType"]; found {
		err = json.Unmarshal(raw, &a.ResourceType)
		if err != nil {
			return fmt.Errorf("error reading 'resourceType': %w", err)
		}
		delete(object, "resourceType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Dynamic5Qi to handle AdditionalProperties
func (a Dynamic5Qi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AverWindow != 0 {
		object["averWindow"], err = json.Marshal(a.AverWindow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'averWindow': %w", err)
		}
	}

	if a.CnPacketDelayBudgetDl != 0 {
		object["cnPacketDelayBudgetDl"], err = json.Marshal(a.CnPacketDelayBudgetDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetDl': %w", err)
		}
	}

	if a.CnPacketDelayBudgetUl != 0 {
		object["cnPacketDelayBudgetUl"], err = json.Marshal(a.CnPacketDelayBudgetUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetUl': %w", err)
		}
	}

	if a.ExtMaxDataBurstVol != 0 {
		object["extMaxDataBurstVol"], err = json.Marshal(a.ExtMaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extMaxDataBurstVol': %w", err)
		}
	}

	if a.ExtPacketDelBudget != 0 {
		object["extPacketDelBudget"], err = json.Marshal(a.ExtPacketDelBudget)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extPacketDelBudget': %w", err)
		}
	}

	if a.MaxDataBurstVol != 0 {
		object["maxDataBurstVol"], err = json.Marshal(a.MaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxDataBurstVol': %w", err)
		}
	}

	object["packetDelayBudget"], err = json.Marshal(a.PacketDelayBudget)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packetDelayBudget': %w", err)
	}

	object["packetErrRate"], err = json.Marshal(a.PacketErrRate)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packetErrRate': %w", err)
	}

	object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
	}

	object["resourceType"], err = json.Marshal(a.ResourceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ecgi. Returns the specified
// element and whether it was found
func (a Ecgi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ecgi
func (a *Ecgi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ecgi to handle AdditionalProperties
func (a *Ecgi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eutraCellId"]; found {
		err = json.Unmarshal(raw, &a.EutraCellId)
		if err != nil {
			return fmt.Errorf("error reading 'eutraCellId': %w", err)
		}
		delete(object, "eutraCellId")
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ecgi to handle AdditionalProperties
func (a Ecgi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eutraCellId"], err = json.Marshal(a.EutraCellId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eutraCellId': %w", err)
	}

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EutraLocation. Returns the specified
// element and whether it was found
func (a EutraLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EutraLocation
func (a *EutraLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EutraLocation to handle AdditionalProperties
func (a *EutraLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["globalENbId"]; found {
		err = json.Unmarshal(raw, &a.GlobalENbId)
		if err != nil {
			return fmt.Errorf("error reading 'globalENbId': %w", err)
		}
		delete(object, "globalENbId")
	}

	if raw, found := object["globalNgenbId"]; found {
		err = json.Unmarshal(raw, &a.GlobalNgenbId)
		if err != nil {
			return fmt.Errorf("error reading 'globalNgenbId': %w", err)
		}
		delete(object, "globalNgenbId")
	}

	if raw, found := object["ignoreEcgi"]; found {
		err = json.Unmarshal(raw, &a.IgnoreEcgi)
		if err != nil {
			return fmt.Errorf("error reading 'ignoreEcgi': %w", err)
		}
		delete(object, "ignoreEcgi")
	}

	if raw, found := object["ignoreTai"]; found {
		err = json.Unmarshal(raw, &a.IgnoreTai)
		if err != nil {
			return fmt.Errorf("error reading 'ignoreTai': %w", err)
		}
		delete(object, "ignoreTai")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EutraLocation to handle AdditionalProperties
func (a EutraLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	object["ecgi"], err = json.Marshal(a.Ecgi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.GlobalENbId != nil {
		object["globalENbId"], err = json.Marshal(a.GlobalENbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalENbId': %w", err)
		}
	}

	if a.GlobalNgenbId != nil {
		object["globalNgenbId"], err = json.Marshal(a.GlobalNgenbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalNgenbId': %w", err)
		}
	}

	if a.IgnoreEcgi != nil {
		object["ignoreEcgi"], err = json.Marshal(a.IgnoreEcgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ignoreEcgi': %w", err)
		}
	}

	if a.IgnoreTai != nil {
		object["ignoreTai"], err = json.Marshal(a.IgnoreTai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ignoreTai': %w", err)
		}
	}

	object["tai"], err = json.Marshal(a.Tai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tai': %w", err)
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtSnssai. Returns the specified
// element and whether it was found
func (a ExtSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtSnssai
func (a *ExtSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtSnssai to handle AdditionalProperties
func (a *ExtSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return fmt.Errorf("error reading 'sd': %w", err)
		}
		delete(object, "sd")
	}

	if raw, found := object["sdRanges"]; found {
		err = json.Unmarshal(raw, &a.SdRanges)
		if err != nil {
			return fmt.Errorf("error reading 'sdRanges': %w", err)
		}
		delete(object, "sdRanges")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return fmt.Errorf("error reading 'sst': %w", err)
		}
		delete(object, "sst")
	}

	if raw, found := object["wildcardSd"]; found {
		err = json.Unmarshal(raw, &a.WildcardSd)
		if err != nil {
			return fmt.Errorf("error reading 'wildcardSd': %w", err)
		}
		delete(object, "wildcardSd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtSnssai to handle AdditionalProperties
func (a ExtSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Sd) != 0 {
		object["sd"], err = json.Marshal(a.Sd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sd': %w", err)
		}
	}

	if len(a.SdRanges) != 0 {
		object["sdRanges"], err = json.Marshal(a.SdRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdRanges': %w", err)
		}
	}

	object["sst"], err = json.Marshal(a.Sst)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sst': %w", err)
	}

	if a.WildcardSd != nil {
		object["wildcardSd"], err = json.Marshal(a.WildcardSd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wildcardSd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GNbId. Returns the specified
// element and whether it was found
func (a GNbId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GNbId
func (a *GNbId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GNbId to handle AdditionalProperties
func (a *GNbId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bitLength"]; found {
		err = json.Unmarshal(raw, &a.BitLength)
		if err != nil {
			return fmt.Errorf("error reading 'bitLength': %w", err)
		}
		delete(object, "bitLength")
	}

	if raw, found := object["gNBValue"]; found {
		err = json.Unmarshal(raw, &a.GNBValue)
		if err != nil {
			return fmt.Errorf("error reading 'gNBValue': %w", err)
		}
		delete(object, "gNBValue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GNbId to handle AdditionalProperties
func (a GNbId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bitLength"], err = json.Marshal(a.BitLength)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bitLength': %w", err)
	}

	object["gNBValue"], err = json.Marshal(a.GNBValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gNBValue': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GeraLocation. Returns the specified
// element and whether it was found
func (a GeraLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GeraLocation
func (a *GeraLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GeraLocation to handle AdditionalProperties
func (a *GeraLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["cgi"]; found {
		err = json.Unmarshal(raw, &a.Cgi)
		if err != nil {
			return fmt.Errorf("error reading 'cgi': %w", err)
		}
		delete(object, "cgi")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["lai"]; found {
		err = json.Unmarshal(raw, &a.Lai)
		if err != nil {
			return fmt.Errorf("error reading 'lai': %w", err)
		}
		delete(object, "lai")
	}

	if raw, found := object["locationNumber"]; found {
		err = json.Unmarshal(raw, &a.LocationNumber)
		if err != nil {
			return fmt.Errorf("error reading 'locationNumber': %w", err)
		}
		delete(object, "locationNumber")
	}

	if raw, found := object["mscNumber"]; found {
		err = json.Unmarshal(raw, &a.MscNumber)
		if err != nil {
			return fmt.Errorf("error reading 'mscNumber': %w", err)
		}
		delete(object, "mscNumber")
	}

	if raw, found := object["rai"]; found {
		err = json.Unmarshal(raw, &a.Rai)
		if err != nil {
			return fmt.Errorf("error reading 'rai': %w", err)
		}
		delete(object, "rai")
	}

	if raw, found := object["sai"]; found {
		err = json.Unmarshal(raw, &a.Sai)
		if err != nil {
			return fmt.Errorf("error reading 'sai': %w", err)
		}
		delete(object, "sai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if raw, found := object["vlrNumber"]; found {
		err = json.Unmarshal(raw, &a.VlrNumber)
		if err != nil {
			return fmt.Errorf("error reading 'vlrNumber': %w", err)
		}
		delete(object, "vlrNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GeraLocation to handle AdditionalProperties
func (a GeraLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	if a.Cgi != nil {
		object["cgi"], err = json.Marshal(a.Cgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cgi': %w", err)
		}
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.Lai != nil {
		object["lai"], err = json.Marshal(a.Lai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lai': %w", err)
		}
	}

	if a.LocationNumber != nil {
		object["locationNumber"], err = json.Marshal(a.LocationNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationNumber': %w", err)
		}
	}

	if a.MscNumber != nil {
		object["mscNumber"], err = json.Marshal(a.MscNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mscNumber': %w", err)
		}
	}

	if a.Rai != nil {
		object["rai"], err = json.Marshal(a.Rai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rai': %w", err)
		}
	}

	if a.Sai != nil {
		object["sai"], err = json.Marshal(a.Sai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sai': %w", err)
		}
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	if a.VlrNumber != nil {
		object["vlrNumber"], err = json.Marshal(a.VlrNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vlrNumber': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GlobalRanNodeId. Returns the specified
// element and whether it was found
func (a GlobalRanNodeId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GlobalRanNodeId
func (a *GlobalRanNodeId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GlobalRanNodeId to handle AdditionalProperties
func (a *GlobalRanNodeId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eNbId"]; found {
		err = json.Unmarshal(raw, &a.ENbId)
		if err != nil {
			return fmt.Errorf("error reading 'eNbId': %w", err)
		}
		delete(object, "eNbId")
	}

	if raw, found := object["gNbId"]; found {
		err = json.Unmarshal(raw, &a.GNbId)
		if err != nil {
			return fmt.Errorf("error reading 'gNbId': %w", err)
		}
		delete(object, "gNbId")
	}

	if raw, found := object["n3IwfId"]; found {
		err = json.Unmarshal(raw, &a.N3IwfId)
		if err != nil {
			return fmt.Errorf("error reading 'n3IwfId': %w", err)
		}
		delete(object, "n3IwfId")
	}

	if raw, found := object["ngeNbId"]; found {
		err = json.Unmarshal(raw, &a.NgeNbId)
		if err != nil {
			return fmt.Errorf("error reading 'ngeNbId': %w", err)
		}
		delete(object, "ngeNbId")
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["tngfId"]; found {
		err = json.Unmarshal(raw, &a.TngfId)
		if err != nil {
			return fmt.Errorf("error reading 'tngfId': %w", err)
		}
		delete(object, "tngfId")
	}

	if raw, found := object["wagfId"]; found {
		err = json.Unmarshal(raw, &a.WagfId)
		if err != nil {
			return fmt.Errorf("error reading 'wagfId': %w", err)
		}
		delete(object, "wagfId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GlobalRanNodeId to handle AdditionalProperties
func (a GlobalRanNodeId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ENbId) != 0 {
		object["eNbId"], err = json.Marshal(a.ENbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eNbId': %w", err)
		}
	}

	if a.GNbId != nil {
		object["gNbId"], err = json.Marshal(a.GNbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gNbId': %w", err)
		}
	}

	if len(a.N3IwfId) != 0 {
		object["n3IwfId"], err = json.Marshal(a.N3IwfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3IwfId': %w", err)
		}
	}

	if len(a.NgeNbId) != 0 {
		object["ngeNbId"], err = json.Marshal(a.NgeNbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngeNbId': %w", err)
		}
	}

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if len(a.TngfId) != 0 {
		object["tngfId"], err = json.Marshal(a.TngfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tngfId': %w", err)
		}
	}

	if len(a.WagfId) != 0 {
		object["wagfId"], err = json.Marshal(a.WagfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wagfId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HalTemplate. Returns the specified
// element and whether it was found
func (a HalTemplate) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HalTemplate
func (a *HalTemplate) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HalTemplate to handle AdditionalProperties
func (a *HalTemplate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contentType"]; found {
		err = json.Unmarshal(raw, &a.ContentType)
		if err != nil {
			return fmt.Errorf("error reading 'contentType': %w", err)
		}
		delete(object, "contentType")
	}

	if raw, found := object["method"]; found {
		err = json.Unmarshal(raw, &a.Method)
		if err != nil {
			return fmt.Errorf("error reading 'method': %w", err)
		}
		delete(object, "method")
	}

	if raw, found := object["properties"]; found {
		err = json.Unmarshal(raw, &a.Properties)
		if err != nil {
			return fmt.Errorf("error reading 'properties': %w", err)
		}
		delete(object, "properties")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HalTemplate to handle AdditionalProperties
func (a HalTemplate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ContentType != nil {
		object["contentType"], err = json.Marshal(a.ContentType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contentType': %w", err)
		}
	}

	object["method"], err = json.Marshal(a.Method)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'method': %w", err)
	}

	if len(a.Properties) != 0 {
		object["properties"], err = json.Marshal(a.Properties)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'properties': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HfcNodeId. Returns the specified
// element and whether it was found
func (a HfcNodeId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HfcNodeId
func (a *HfcNodeId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HfcNodeId to handle AdditionalProperties
func (a *HfcNodeId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hfcNId"]; found {
		err = json.Unmarshal(raw, &a.HfcNId)
		if err != nil {
			return fmt.Errorf("error reading 'hfcNId': %w", err)
		}
		delete(object, "hfcNId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HfcNodeId to handle AdditionalProperties
func (a HfcNodeId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hfcNId"], err = json.Marshal(a.HfcNId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hfcNId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InterFreqTargetInfo. Returns the specified
// element and whether it was found
func (a InterFreqTargetInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InterFreqTargetInfo
func (a *InterFreqTargetInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InterFreqTargetInfo to handle AdditionalProperties
func (a *InterFreqTargetInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellIdList"]; found {
		err = json.Unmarshal(raw, &a.CellIdList)
		if err != nil {
			return fmt.Errorf("error reading 'cellIdList': %w", err)
		}
		delete(object, "cellIdList")
	}

	if raw, found := object["dlCarrierFreq"]; found {
		err = json.Unmarshal(raw, &a.DlCarrierFreq)
		if err != nil {
			return fmt.Errorf("error reading 'dlCarrierFreq': %w", err)
		}
		delete(object, "dlCarrierFreq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InterFreqTargetInfo to handle AdditionalProperties
func (a InterFreqTargetInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CellIdList) != 0 {
		object["cellIdList"], err = json.Marshal(a.CellIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellIdList': %w", err)
		}
	}

	object["dlCarrierFreq"], err = json.Marshal(a.DlCarrierFreq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dlCarrierFreq': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InvalidParam. Returns the specified
// element and whether it was found
func (a InvalidParam) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InvalidParam
func (a *InvalidParam) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InvalidParam to handle AdditionalProperties
func (a *InvalidParam) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["param"]; found {
		err = json.Unmarshal(raw, &a.Param)
		if err != nil {
			return fmt.Errorf("error reading 'param': %w", err)
		}
		delete(object, "param")
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &a.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
		delete(object, "reason")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InvalidParam to handle AdditionalProperties
func (a InvalidParam) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["param"], err = json.Marshal(a.Param)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'param': %w", err)
	}

	if a.Reason != nil {
		object["reason"], err = json.Marshal(a.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Link. Returns the specified
// element and whether it was found
func (a Link) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Link
func (a *Link) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Link to handle AdditionalProperties
func (a *Link) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["href"]; found {
		err = json.Unmarshal(raw, &a.Href)
		if err != nil {
			return fmt.Errorf("error reading 'href': %w", err)
		}
		delete(object, "href")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Link to handle AdditionalProperties
func (a Link) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Href != nil {
		object["href"], err = json.Marshal(a.Href)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'href': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LinkRm. Returns the specified
// element and whether it was found
func (a LinkRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LinkRm
func (a *LinkRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LinkRm to handle AdditionalProperties
func (a *LinkRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["href"]; found {
		err = json.Unmarshal(raw, &a.Href)
		if err != nil {
			return fmt.Errorf("error reading 'href': %w", err)
		}
		delete(object, "href")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LinkRm to handle AdditionalProperties
func (a LinkRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Href != nil {
		object["href"], err = json.Marshal(a.Href)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'href': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationAreaId. Returns the specified
// element and whether it was found
func (a LocationAreaId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationAreaId
func (a *LocationAreaId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationAreaId to handle AdditionalProperties
func (a *LocationAreaId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationAreaId to handle AdditionalProperties
func (a LocationAreaId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LteV2xAuth. Returns the specified
// element and whether it was found
func (a LteV2xAuth) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LteV2xAuth
func (a *LteV2xAuth) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LteV2xAuth to handle AdditionalProperties
func (a *LteV2xAuth) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pedestrianUeAuth"]; found {
		err = json.Unmarshal(raw, &a.PedestrianUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'pedestrianUeAuth': %w", err)
		}
		delete(object, "pedestrianUeAuth")
	}

	if raw, found := object["vehicleUeAuth"]; found {
		err = json.Unmarshal(raw, &a.VehicleUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'vehicleUeAuth': %w", err)
		}
		delete(object, "vehicleUeAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LteV2xAuth to handle AdditionalProperties
func (a LteV2xAuth) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PedestrianUeAuth != nil {
		object["pedestrianUeAuth"], err = json.Marshal(a.PedestrianUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pedestrianUeAuth': %w", err)
		}
	}

	if a.VehicleUeAuth != nil {
		object["vehicleUeAuth"], err = json.Marshal(a.VehicleUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vehicleUeAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MbsfnArea. Returns the specified
// element and whether it was found
func (a MbsfnArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MbsfnArea
func (a *MbsfnArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MbsfnArea to handle AdditionalProperties
func (a *MbsfnArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["carrierFrequency"]; found {
		err = json.Unmarshal(raw, &a.CarrierFrequency)
		if err != nil {
			return fmt.Errorf("error reading 'carrierFrequency': %w", err)
		}
		delete(object, "carrierFrequency")
	}

	if raw, found := object["mbsfnAreaId"]; found {
		err = json.Unmarshal(raw, &a.MbsfnAreaId)
		if err != nil {
			return fmt.Errorf("error reading 'mbsfnAreaId': %w", err)
		}
		delete(object, "mbsfnAreaId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MbsfnArea to handle AdditionalProperties
func (a MbsfnArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CarrierFrequency != nil {
		object["carrierFrequency"], err = json.Marshal(a.CarrierFrequency)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'carrierFrequency': %w", err)
		}
	}

	if a.MbsfnAreaId != nil {
		object["mbsfnAreaId"], err = json.Marshal(a.MbsfnAreaId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mbsfnAreaId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MdtConfiguration. Returns the specified
// element and whether it was found
func (a MdtConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MdtConfiguration
func (a *MdtConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MdtConfiguration to handle AdditionalProperties
func (a *MdtConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addPositioningMethodList"]; found {
		err = json.Unmarshal(raw, &a.AddPositioningMethodList)
		if err != nil {
			return fmt.Errorf("error reading 'addPositioningMethodList': %w", err)
		}
		delete(object, "addPositioningMethodList")
	}

	if raw, found := object["areaScope"]; found {
		err = json.Unmarshal(raw, &a.AreaScope)
		if err != nil {
			return fmt.Errorf("error reading 'areaScope': %w", err)
		}
		delete(object, "areaScope")
	}

	if raw, found := object["collectionPeriodRmmLte"]; found {
		err = json.Unmarshal(raw, &a.CollectionPeriodRmmLte)
		if err != nil {
			return fmt.Errorf("error reading 'collectionPeriodRmmLte': %w", err)
		}
		delete(object, "collectionPeriodRmmLte")
	}

	if raw, found := object["collectionPeriodRmmNr"]; found {
		err = json.Unmarshal(raw, &a.CollectionPeriodRmmNr)
		if err != nil {
			return fmt.Errorf("error reading 'collectionPeriodRmmNr': %w", err)
		}
		delete(object, "collectionPeriodRmmNr")
	}

	if raw, found := object["eventList"]; found {
		err = json.Unmarshal(raw, &a.EventList)
		if err != nil {
			return fmt.Errorf("error reading 'eventList': %w", err)
		}
		delete(object, "eventList")
	}

	if raw, found := object["eventThresholdRsrp"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrp)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrp': %w", err)
		}
		delete(object, "eventThresholdRsrp")
	}

	if raw, found := object["eventThresholdRsrpNr"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrpNr)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrpNr': %w", err)
		}
		delete(object, "eventThresholdRsrpNr")
	}

	if raw, found := object["eventThresholdRsrq"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrq)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrq': %w", err)
		}
		delete(object, "eventThresholdRsrq")
	}

	if raw, found := object["eventThresholdRsrqNr"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrqNr)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrqNr': %w", err)
		}
		delete(object, "eventThresholdRsrqNr")
	}

	if raw, found := object["interFreqTargetList"]; found {
		err = json.Unmarshal(raw, &a.InterFreqTargetList)
		if err != nil {
			return fmt.Errorf("error reading 'interFreqTargetList': %w", err)
		}
		delete(object, "interFreqTargetList")
	}

	if raw, found := object["jobType"]; found {
		err = json.Unmarshal(raw, &a.JobType)
		if err != nil {
			return fmt.Errorf("error reading 'jobType': %w", err)
		}
		delete(object, "jobType")
	}

	if raw, found := object["loggingDuration"]; found {
		err = json.Unmarshal(raw, &a.LoggingDuration)
		if err != nil {
			return fmt.Errorf("error reading 'loggingDuration': %w", err)
		}
		delete(object, "loggingDuration")
	}

	if raw, found := object["loggingDurationNr"]; found {
		err = json.Unmarshal(raw, &a.LoggingDurationNr)
		if err != nil {
			return fmt.Errorf("error reading 'loggingDurationNr': %w", err)
		}
		delete(object, "loggingDurationNr")
	}

	if raw, found := object["loggingInterval"]; found {
		err = json.Unmarshal(raw, &a.LoggingInterval)
		if err != nil {
			return fmt.Errorf("error reading 'loggingInterval': %w", err)
		}
		delete(object, "loggingInterval")
	}

	if raw, found := object["loggingIntervalNr"]; found {
		err = json.Unmarshal(raw, &a.LoggingIntervalNr)
		if err != nil {
			return fmt.Errorf("error reading 'loggingIntervalNr': %w", err)
		}
		delete(object, "loggingIntervalNr")
	}

	if raw, found := object["mbsfnAreaList"]; found {
		err = json.Unmarshal(raw, &a.MbsfnAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'mbsfnAreaList': %w", err)
		}
		delete(object, "mbsfnAreaList")
	}

	if raw, found := object["mdtAllowedPlmnIdList"]; found {
		err = json.Unmarshal(raw, &a.MdtAllowedPlmnIdList)
		if err != nil {
			return fmt.Errorf("error reading 'mdtAllowedPlmnIdList': %w", err)
		}
		delete(object, "mdtAllowedPlmnIdList")
	}

	if raw, found := object["measurementLteList"]; found {
		err = json.Unmarshal(raw, &a.MeasurementLteList)
		if err != nil {
			return fmt.Errorf("error reading 'measurementLteList': %w", err)
		}
		delete(object, "measurementLteList")
	}

	if raw, found := object["measurementNrList"]; found {
		err = json.Unmarshal(raw, &a.MeasurementNrList)
		if err != nil {
			return fmt.Errorf("error reading 'measurementNrList': %w", err)
		}
		delete(object, "measurementNrList")
	}

	if raw, found := object["measurementPeriodLte"]; found {
		err = json.Unmarshal(raw, &a.MeasurementPeriodLte)
		if err != nil {
			return fmt.Errorf("error reading 'measurementPeriodLte': %w", err)
		}
		delete(object, "measurementPeriodLte")
	}

	if raw, found := object["positioningMethod"]; found {
		err = json.Unmarshal(raw, &a.PositioningMethod)
		if err != nil {
			return fmt.Errorf("error reading 'positioningMethod': %w", err)
		}
		delete(object, "positioningMethod")
	}

	if raw, found := object["reportAmount"]; found {
		err = json.Unmarshal(raw, &a.ReportAmount)
		if err != nil {
			return fmt.Errorf("error reading 'reportAmount': %w", err)
		}
		delete(object, "reportAmount")
	}

	if raw, found := object["reportInterval"]; found {
		err = json.Unmarshal(raw, &a.ReportInterval)
		if err != nil {
			return fmt.Errorf("error reading 'reportInterval': %w", err)
		}
		delete(object, "reportInterval")
	}

	if raw, found := object["reportIntervalNr"]; found {
		err = json.Unmarshal(raw, &a.ReportIntervalNr)
		if err != nil {
			return fmt.Errorf("error reading 'reportIntervalNr': %w", err)
		}
		delete(object, "reportIntervalNr")
	}

	if raw, found := object["reportType"]; found {
		err = json.Unmarshal(raw, &a.ReportType)
		if err != nil {
			return fmt.Errorf("error reading 'reportType': %w", err)
		}
		delete(object, "reportType")
	}

	if raw, found := object["reportingTriggerList"]; found {
		err = json.Unmarshal(raw, &a.ReportingTriggerList)
		if err != nil {
			return fmt.Errorf("error reading 'reportingTriggerList': %w", err)
		}
		delete(object, "reportingTriggerList")
	}

	if raw, found := object["sensorMeasurementList"]; found {
		err = json.Unmarshal(raw, &a.SensorMeasurementList)
		if err != nil {
			return fmt.Errorf("error reading 'sensorMeasurementList': %w", err)
		}
		delete(object, "sensorMeasurementList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MdtConfiguration to handle AdditionalProperties
func (a MdtConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddPositioningMethodList) != 0 {
		object["addPositioningMethodList"], err = json.Marshal(a.AddPositioningMethodList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addPositioningMethodList': %w", err)
		}
	}

	if a.AreaScope != nil {
		object["areaScope"], err = json.Marshal(a.AreaScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaScope': %w", err)
		}
	}

	if a.CollectionPeriodRmmLte != nil {
		object["collectionPeriodRmmLte"], err = json.Marshal(a.CollectionPeriodRmmLte)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionPeriodRmmLte': %w", err)
		}
	}

	if a.CollectionPeriodRmmNr != nil {
		object["collectionPeriodRmmNr"], err = json.Marshal(a.CollectionPeriodRmmNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionPeriodRmmNr': %w", err)
		}
	}

	if len(a.EventList) != 0 {
		object["eventList"], err = json.Marshal(a.EventList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventList': %w", err)
		}
	}

	if a.EventThresholdRsrp != nil {
		object["eventThresholdRsrp"], err = json.Marshal(a.EventThresholdRsrp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrp': %w", err)
		}
	}

	if a.EventThresholdRsrpNr != nil {
		object["eventThresholdRsrpNr"], err = json.Marshal(a.EventThresholdRsrpNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrpNr': %w", err)
		}
	}

	if a.EventThresholdRsrq != nil {
		object["eventThresholdRsrq"], err = json.Marshal(a.EventThresholdRsrq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrq': %w", err)
		}
	}

	if a.EventThresholdRsrqNr != nil {
		object["eventThresholdRsrqNr"], err = json.Marshal(a.EventThresholdRsrqNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrqNr': %w", err)
		}
	}

	if len(a.InterFreqTargetList) != 0 {
		object["interFreqTargetList"], err = json.Marshal(a.InterFreqTargetList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interFreqTargetList': %w", err)
		}
	}

	object["jobType"], err = json.Marshal(a.JobType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'jobType': %w", err)
	}

	if a.LoggingDuration != nil {
		object["loggingDuration"], err = json.Marshal(a.LoggingDuration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingDuration': %w", err)
		}
	}

	if a.LoggingDurationNr != nil {
		object["loggingDurationNr"], err = json.Marshal(a.LoggingDurationNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingDurationNr': %w", err)
		}
	}

	if a.LoggingInterval != nil {
		object["loggingInterval"], err = json.Marshal(a.LoggingInterval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingInterval': %w", err)
		}
	}

	if a.LoggingIntervalNr != nil {
		object["loggingIntervalNr"], err = json.Marshal(a.LoggingIntervalNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingIntervalNr': %w", err)
		}
	}

	if len(a.MbsfnAreaList) != 0 {
		object["mbsfnAreaList"], err = json.Marshal(a.MbsfnAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mbsfnAreaList': %w", err)
		}
	}

	if len(a.MdtAllowedPlmnIdList) != 0 {
		object["mdtAllowedPlmnIdList"], err = json.Marshal(a.MdtAllowedPlmnIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mdtAllowedPlmnIdList': %w", err)
		}
	}

	if a.MeasurementLteList != nil {
		object["measurementLteList"], err = json.Marshal(a.MeasurementLteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementLteList': %w", err)
		}
	}

	if len(a.MeasurementNrList) != 0 {
		object["measurementNrList"], err = json.Marshal(a.MeasurementNrList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementNrList': %w", err)
		}
	}

	if a.MeasurementPeriodLte != nil {
		object["measurementPeriodLte"], err = json.Marshal(a.MeasurementPeriodLte)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementPeriodLte': %w", err)
		}
	}

	if a.PositioningMethod != nil {
		object["positioningMethod"], err = json.Marshal(a.PositioningMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'positioningMethod': %w", err)
		}
	}

	if a.ReportAmount != nil {
		object["reportAmount"], err = json.Marshal(a.ReportAmount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportAmount': %w", err)
		}
	}

	if a.ReportInterval != nil {
		object["reportInterval"], err = json.Marshal(a.ReportInterval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportInterval': %w", err)
		}
	}

	if a.ReportIntervalNr != nil {
		object["reportIntervalNr"], err = json.Marshal(a.ReportIntervalNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportIntervalNr': %w", err)
		}
	}

	if a.ReportType != nil {
		object["reportType"], err = json.Marshal(a.ReportType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportType': %w", err)
		}
	}

	if len(a.ReportingTriggerList) != 0 {
		object["reportingTriggerList"], err = json.Marshal(a.ReportingTriggerList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportingTriggerList': %w", err)
		}
	}

	if len(a.SensorMeasurementList) != 0 {
		object["sensorMeasurementList"], err = json.Marshal(a.SensorMeasurementList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sensorMeasurementList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MoExpDataCounter. Returns the specified
// element and whether it was found
func (a MoExpDataCounter) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MoExpDataCounter
func (a *MoExpDataCounter) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MoExpDataCounter to handle AdditionalProperties
func (a *MoExpDataCounter) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["counter"]; found {
		err = json.Unmarshal(raw, &a.Counter)
		if err != nil {
			return fmt.Errorf("error reading 'counter': %w", err)
		}
		delete(object, "counter")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MoExpDataCounter to handle AdditionalProperties
func (a MoExpDataCounter) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["counter"], err = json.Marshal(a.Counter)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'counter': %w", err)
	}

	if a.TimeStamp != nil {
		object["timeStamp"], err = json.Marshal(a.TimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N3gaLocation. Returns the specified
// element and whether it was found
func (a N3gaLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N3gaLocation
func (a *N3gaLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N3gaLocation to handle AdditionalProperties
func (a *N3gaLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gci"]; found {
		err = json.Unmarshal(raw, &a.Gci)
		if err != nil {
			return fmt.Errorf("error reading 'gci': %w", err)
		}
		delete(object, "gci")
	}

	if raw, found := object["gli"]; found {
		err = json.Unmarshal(raw, &a.Gli)
		if err != nil {
			return fmt.Errorf("error reading 'gli': %w", err)
		}
		delete(object, "gli")
	}

	if raw, found := object["hfcNodeId"]; found {
		err = json.Unmarshal(raw, &a.HfcNodeId)
		if err != nil {
			return fmt.Errorf("error reading 'hfcNodeId': %w", err)
		}
		delete(object, "hfcNodeId")
	}

	if raw, found := object["n3IwfId"]; found {
		err = json.Unmarshal(raw, &a.N3IwfId)
		if err != nil {
			return fmt.Errorf("error reading 'n3IwfId': %w", err)
		}
		delete(object, "n3IwfId")
	}

	if raw, found := object["n3gppTai"]; found {
		err = json.Unmarshal(raw, &a.N3gppTai)
		if err != nil {
			return fmt.Errorf("error reading 'n3gppTai': %w", err)
		}
		delete(object, "n3gppTai")
	}

	if raw, found := object["portNumber"]; found {
		err = json.Unmarshal(raw, &a.PortNumber)
		if err != nil {
			return fmt.Errorf("error reading 'portNumber': %w", err)
		}
		delete(object, "portNumber")
	}

	if raw, found := object["protocol"]; found {
		err = json.Unmarshal(raw, &a.Protocol)
		if err != nil {
			return fmt.Errorf("error reading 'protocol': %w", err)
		}
		delete(object, "protocol")
	}

	if raw, found := object["tnapId"]; found {
		err = json.Unmarshal(raw, &a.TnapId)
		if err != nil {
			return fmt.Errorf("error reading 'tnapId': %w", err)
		}
		delete(object, "tnapId")
	}

	if raw, found := object["twapId"]; found {
		err = json.Unmarshal(raw, &a.TwapId)
		if err != nil {
			return fmt.Errorf("error reading 'twapId': %w", err)
		}
		delete(object, "twapId")
	}

	if raw, found := object["ueIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4Addr': %w", err)
		}
		delete(object, "ueIpv4Addr")
	}

	if raw, found := object["ueIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Addr': %w", err)
		}
		delete(object, "ueIpv6Addr")
	}

	if raw, found := object["w5gbanLineType"]; found {
		err = json.Unmarshal(raw, &a.W5gbanLineType)
		if err != nil {
			return fmt.Errorf("error reading 'w5gbanLineType': %w", err)
		}
		delete(object, "w5gbanLineType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N3gaLocation to handle AdditionalProperties
func (a N3gaLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Gci != nil {
		object["gci"], err = json.Marshal(a.Gci)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gci': %w", err)
		}
	}

	if a.Gli != nil {
		object["gli"], err = json.Marshal(a.Gli)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gli': %w", err)
		}
	}

	if a.HfcNodeId != nil {
		object["hfcNodeId"], err = json.Marshal(a.HfcNodeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hfcNodeId': %w", err)
		}
	}

	if len(a.N3IwfId) != 0 {
		object["n3IwfId"], err = json.Marshal(a.N3IwfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3IwfId': %w", err)
		}
	}

	if a.N3gppTai != nil {
		object["n3gppTai"], err = json.Marshal(a.N3gppTai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3gppTai': %w", err)
		}
	}

	if a.PortNumber != nil {
		object["portNumber"], err = json.Marshal(a.PortNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'portNumber': %w", err)
		}
	}

	if a.Protocol != nil {
		object["protocol"], err = json.Marshal(a.Protocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'protocol': %w", err)
		}
	}

	if a.TnapId != nil {
		object["tnapId"], err = json.Marshal(a.TnapId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tnapId': %w", err)
		}
	}

	if a.TwapId != nil {
		object["twapId"], err = json.Marshal(a.TwapId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'twapId': %w", err)
		}
	}

	if len(a.UeIpv4Addr) != 0 {
		object["ueIpv4Addr"], err = json.Marshal(a.UeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4Addr': %w", err)
		}
	}

	if a.UeIpv6Addr != nil {
		object["ueIpv6Addr"], err = json.Marshal(a.UeIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Addr': %w", err)
		}
	}

	if a.W5gbanLineType != nil {
		object["w5gbanLineType"], err = json.Marshal(a.W5gbanLineType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'w5gbanLineType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ncgi. Returns the specified
// element and whether it was found
func (a Ncgi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ncgi
func (a *Ncgi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ncgi to handle AdditionalProperties
func (a *Ncgi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["nrCellId"]; found {
		err = json.Unmarshal(raw, &a.NrCellId)
		if err != nil {
			return fmt.Errorf("error reading 'nrCellId': %w", err)
		}
		delete(object, "nrCellId")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ncgi to handle AdditionalProperties
func (a Ncgi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["nrCellId"], err = json.Marshal(a.NrCellId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nrCellId': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkId. Returns the specified
// element and whether it was found
func (a NetworkId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkId
func (a *NetworkId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkId to handle AdditionalProperties
func (a *NetworkId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mcc"]; found {
		err = json.Unmarshal(raw, &a.Mcc)
		if err != nil {
			return fmt.Errorf("error reading 'mcc': %w", err)
		}
		delete(object, "mcc")
	}

	if raw, found := object["mnc"]; found {
		err = json.Unmarshal(raw, &a.Mnc)
		if err != nil {
			return fmt.Errorf("error reading 'mnc': %w", err)
		}
		delete(object, "mnc")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkId to handle AdditionalProperties
func (a NetworkId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Mcc) != 0 {
		object["mcc"], err = json.Marshal(a.Mcc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcc': %w", err)
		}
	}

	if len(a.Mnc) != 0 {
		object["mnc"], err = json.Marshal(a.Mnc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mnc': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NgApCause. Returns the specified
// element and whether it was found
func (a NgApCause) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NgApCause
func (a *NgApCause) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NgApCause to handle AdditionalProperties
func (a *NgApCause) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["group"]; found {
		err = json.Unmarshal(raw, &a.Group)
		if err != nil {
			return fmt.Errorf("error reading 'group': %w", err)
		}
		delete(object, "group")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NgApCause to handle AdditionalProperties
func (a NgApCause) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["group"], err = json.Marshal(a.Group)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'group': %w", err)
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NonDynamic5Qi. Returns the specified
// element and whether it was found
func (a NonDynamic5Qi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NonDynamic5Qi
func (a *NonDynamic5Qi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NonDynamic5Qi to handle AdditionalProperties
func (a *NonDynamic5Qi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["averWindow"]; found {
		err = json.Unmarshal(raw, &a.AverWindow)
		if err != nil {
			return fmt.Errorf("error reading 'averWindow': %w", err)
		}
		delete(object, "averWindow")
	}

	if raw, found := object["cnPacketDelayBudgetDl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetDl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetDl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetDl")
	}

	if raw, found := object["cnPacketDelayBudgetUl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetUl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetUl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetUl")
	}

	if raw, found := object["extMaxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.ExtMaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'extMaxDataBurstVol': %w", err)
		}
		delete(object, "extMaxDataBurstVol")
	}

	if raw, found := object["maxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.MaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'maxDataBurstVol': %w", err)
		}
		delete(object, "maxDataBurstVol")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NonDynamic5Qi to handle AdditionalProperties
func (a NonDynamic5Qi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AverWindow != 0 {
		object["averWindow"], err = json.Marshal(a.AverWindow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'averWindow': %w", err)
		}
	}

	if a.CnPacketDelayBudgetDl != 0 {
		object["cnPacketDelayBudgetDl"], err = json.Marshal(a.CnPacketDelayBudgetDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetDl': %w", err)
		}
	}

	if a.CnPacketDelayBudgetUl != 0 {
		object["cnPacketDelayBudgetUl"], err = json.Marshal(a.CnPacketDelayBudgetUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetUl': %w", err)
		}
	}

	if a.ExtMaxDataBurstVol != 0 {
		object["extMaxDataBurstVol"], err = json.Marshal(a.ExtMaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extMaxDataBurstVol': %w", err)
		}
	}

	if a.MaxDataBurstVol != 0 {
		object["maxDataBurstVol"], err = json.Marshal(a.MaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxDataBurstVol': %w", err)
		}
	}

	if a.PriorityLevel != 0 {
		object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotifyItem. Returns the specified
// element and whether it was found
func (a NotifyItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotifyItem
func (a *NotifyItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotifyItem to handle AdditionalProperties
func (a *NotifyItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["changes"]; found {
		err = json.Unmarshal(raw, &a.Changes)
		if err != nil {
			return fmt.Errorf("error reading 'changes': %w", err)
		}
		delete(object, "changes")
	}

	if raw, found := object["resourceId"]; found {
		err = json.Unmarshal(raw, &a.ResourceId)
		if err != nil {
			return fmt.Errorf("error reading 'resourceId': %w", err)
		}
		delete(object, "resourceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotifyItem to handle AdditionalProperties
func (a NotifyItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["changes"], err = json.Marshal(a.Changes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'changes': %w", err)
	}

	object["resourceId"], err = json.Marshal(a.ResourceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrLocation. Returns the specified
// element and whether it was found
func (a NrLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrLocation
func (a *NrLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrLocation to handle AdditionalProperties
func (a *NrLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["globalGnbId"]; found {
		err = json.Unmarshal(raw, &a.GlobalGnbId)
		if err != nil {
			return fmt.Errorf("error reading 'globalGnbId': %w", err)
		}
		delete(object, "globalGnbId")
	}

	if raw, found := object["ignoreNcgi"]; found {
		err = json.Unmarshal(raw, &a.IgnoreNcgi)
		if err != nil {
			return fmt.Errorf("error reading 'ignoreNcgi': %w", err)
		}
		delete(object, "ignoreNcgi")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrLocation to handle AdditionalProperties
func (a NrLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.GlobalGnbId != nil {
		object["globalGnbId"], err = json.Marshal(a.GlobalGnbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalGnbId': %w", err)
		}
	}

	if a.IgnoreNcgi != nil {
		object["ignoreNcgi"], err = json.Marshal(a.IgnoreNcgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ignoreNcgi': %w", err)
		}
	}

	object["ncgi"], err = json.Marshal(a.Ncgi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
	}

	object["tai"], err = json.Marshal(a.Tai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tai': %w", err)
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrV2xAuth. Returns the specified
// element and whether it was found
func (a NrV2xAuth) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrV2xAuth
func (a *NrV2xAuth) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrV2xAuth to handle AdditionalProperties
func (a *NrV2xAuth) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pedestrianUeAuth"]; found {
		err = json.Unmarshal(raw, &a.PedestrianUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'pedestrianUeAuth': %w", err)
		}
		delete(object, "pedestrianUeAuth")
	}

	if raw, found := object["vehicleUeAuth"]; found {
		err = json.Unmarshal(raw, &a.VehicleUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'vehicleUeAuth': %w", err)
		}
		delete(object, "vehicleUeAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrV2xAuth to handle AdditionalProperties
func (a NrV2xAuth) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PedestrianUeAuth != nil {
		object["pedestrianUeAuth"], err = json.Marshal(a.PedestrianUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pedestrianUeAuth': %w", err)
		}
	}

	if a.VehicleUeAuth != nil {
		object["vehicleUeAuth"], err = json.Marshal(a.VehicleUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vehicleUeAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssaaStatus. Returns the specified
// element and whether it was found
func (a NssaaStatus) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssaaStatus
func (a *NssaaStatus) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssaaStatus to handle AdditionalProperties
func (a *NssaaStatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssaaStatus to handle AdditionalProperties
func (a NssaaStatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OdbData. Returns the specified
// element and whether it was found
func (a OdbData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OdbData
func (a *OdbData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OdbData to handle AdditionalProperties
func (a *OdbData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["roamingOdb"]; found {
		err = json.Unmarshal(raw, &a.RoamingOdb)
		if err != nil {
			return fmt.Errorf("error reading 'roamingOdb': %w", err)
		}
		delete(object, "roamingOdb")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OdbData to handle AdditionalProperties
func (a OdbData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RoamingOdb != nil {
		object["roamingOdb"], err = json.Marshal(a.RoamingOdb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingOdb': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PatchItem. Returns the specified
// element and whether it was found
func (a PatchItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchItem
func (a *PatchItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchItem to handle AdditionalProperties
func (a *PatchItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["from"]; found {
		err = json.Unmarshal(raw, &a.From)
		if err != nil {
			return fmt.Errorf("error reading 'from': %w", err)
		}
		delete(object, "from")
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchItem to handle AdditionalProperties
func (a PatchItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.From != nil {
		object["from"], err = json.Marshal(a.From)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'from': %w", err)
		}
	}

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PatchResult. Returns the specified
// element and whether it was found
func (a PatchResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchResult
func (a *PatchResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchResult to handle AdditionalProperties
func (a *PatchResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["report"]; found {
		err = json.Unmarshal(raw, &a.Report)
		if err != nil {
			return fmt.Errorf("error reading 'report': %w", err)
		}
		delete(object, "report")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchResult to handle AdditionalProperties
func (a PatchResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["report"], err = json.Marshal(a.Report)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'report': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pc5FlowBitRates. Returns the specified
// element and whether it was found
func (a Pc5FlowBitRates) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pc5FlowBitRates
func (a *Pc5FlowBitRates) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pc5FlowBitRates to handle AdditionalProperties
func (a *Pc5FlowBitRates) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["guaFbr"]; found {
		err = json.Unmarshal(raw, &a.GuaFbr)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbr': %w", err)
		}
		delete(object, "guaFbr")
	}

	if raw, found := object["maxFbr"]; found {
		err = json.Unmarshal(raw, &a.MaxFbr)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbr': %w", err)
		}
		delete(object, "maxFbr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pc5FlowBitRates to handle AdditionalProperties
func (a Pc5FlowBitRates) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GuaFbr) != 0 {
		object["guaFbr"], err = json.Marshal(a.GuaFbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbr': %w", err)
		}
	}

	if len(a.MaxFbr) != 0 {
		object["maxFbr"], err = json.Marshal(a.MaxFbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxFbr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pc5QoSPara. Returns the specified
// element and whether it was found
func (a Pc5QoSPara) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pc5QoSPara
func (a *Pc5QoSPara) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pc5QoSPara to handle AdditionalProperties
func (a *Pc5QoSPara) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pc5LinkAmbr"]; found {
		err = json.Unmarshal(raw, &a.Pc5LinkAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'pc5LinkAmbr': %w", err)
		}
		delete(object, "pc5LinkAmbr")
	}

	if raw, found := object["pc5QosFlowList"]; found {
		err = json.Unmarshal(raw, &a.Pc5QosFlowList)
		if err != nil {
			return fmt.Errorf("error reading 'pc5QosFlowList': %w", err)
		}
		delete(object, "pc5QosFlowList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pc5QoSPara to handle AdditionalProperties
func (a Pc5QoSPara) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Pc5LinkAmbr) != 0 {
		object["pc5LinkAmbr"], err = json.Marshal(a.Pc5LinkAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pc5LinkAmbr': %w", err)
		}
	}

	object["pc5QosFlowList"], err = json.Marshal(a.Pc5QosFlowList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pc5QosFlowList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pc5QosFlowItem. Returns the specified
// element and whether it was found
func (a Pc5QosFlowItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pc5QosFlowItem
func (a *Pc5QosFlowItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pc5QosFlowItem to handle AdditionalProperties
func (a *Pc5QosFlowItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pc5FlowBitRates"]; found {
		err = json.Unmarshal(raw, &a.Pc5FlowBitRates)
		if err != nil {
			return fmt.Errorf("error reading 'pc5FlowBitRates': %w", err)
		}
		delete(object, "pc5FlowBitRates")
	}

	if raw, found := object["pqi"]; found {
		err = json.Unmarshal(raw, &a.Pqi)
		if err != nil {
			return fmt.Errorf("error reading 'pqi': %w", err)
		}
		delete(object, "pqi")
	}

	if raw, found := object["range"]; found {
		err = json.Unmarshal(raw, &a.Range)
		if err != nil {
			return fmt.Errorf("error reading 'range': %w", err)
		}
		delete(object, "range")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pc5QosFlowItem to handle AdditionalProperties
func (a Pc5QosFlowItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Pc5FlowBitRates != nil {
		object["pc5FlowBitRates"], err = json.Marshal(a.Pc5FlowBitRates)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pc5FlowBitRates': %w", err)
		}
	}

	object["pqi"], err = json.Marshal(a.Pqi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pqi': %w", err)
	}

	if a.Range != nil {
		object["range"], err = json.Marshal(a.Range)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'range': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnIdNid. Returns the specified
// element and whether it was found
func (a PlmnIdNid) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnIdNid
func (a *PlmnIdNid) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnIdNid to handle AdditionalProperties
func (a *PlmnIdNid) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mcc"]; found {
		err = json.Unmarshal(raw, &a.Mcc)
		if err != nil {
			return fmt.Errorf("error reading 'mcc': %w", err)
		}
		delete(object, "mcc")
	}

	if raw, found := object["mnc"]; found {
		err = json.Unmarshal(raw, &a.Mnc)
		if err != nil {
			return fmt.Errorf("error reading 'mnc': %w", err)
		}
		delete(object, "mnc")
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnIdNid to handle AdditionalProperties
func (a PlmnIdNid) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["mcc"], err = json.Marshal(a.Mcc)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mcc': %w", err)
	}

	object["mnc"], err = json.Marshal(a.Mnc)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mnc': %w", err)
	}

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PresenceInfo. Returns the specified
// element and whether it was found
func (a PresenceInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PresenceInfo
func (a *PresenceInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PresenceInfo to handle AdditionalProperties
func (a *PresenceInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalPraId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalPraId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalPraId': %w", err)
		}
		delete(object, "additionalPraId")
	}

	if raw, found := object["ecgiList"]; found {
		err = json.Unmarshal(raw, &a.EcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ecgiList': %w", err)
		}
		delete(object, "ecgiList")
	}

	if raw, found := object["globalRanNodeIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobalRanNodeIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globalRanNodeIdList': %w", err)
		}
		delete(object, "globalRanNodeIdList")
	}

	if raw, found := object["globaleNbIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobaleNbIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globaleNbIdList': %w", err)
		}
		delete(object, "globaleNbIdList")
	}

	if raw, found := object["ncgiList"]; found {
		err = json.Unmarshal(raw, &a.NcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ncgiList': %w", err)
		}
		delete(object, "ncgiList")
	}

	if raw, found := object["praId"]; found {
		err = json.Unmarshal(raw, &a.PraId)
		if err != nil {
			return fmt.Errorf("error reading 'praId': %w", err)
		}
		delete(object, "praId")
	}

	if raw, found := object["presenceState"]; found {
		err = json.Unmarshal(raw, &a.PresenceState)
		if err != nil {
			return fmt.Errorf("error reading 'presenceState': %w", err)
		}
		delete(object, "presenceState")
	}

	if raw, found := object["trackingAreaList"]; found {
		err = json.Unmarshal(raw, &a.TrackingAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'trackingAreaList': %w", err)
		}
		delete(object, "trackingAreaList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PresenceInfo to handle AdditionalProperties
func (a PresenceInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalPraId != nil {
		object["additionalPraId"], err = json.Marshal(a.AdditionalPraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalPraId': %w", err)
		}
	}

	if len(a.EcgiList) != 0 {
		object["ecgiList"], err = json.Marshal(a.EcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgiList': %w", err)
		}
	}

	if len(a.GlobalRanNodeIdList) != 0 {
		object["globalRanNodeIdList"], err = json.Marshal(a.GlobalRanNodeIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalRanNodeIdList': %w", err)
		}
	}

	if len(a.GlobaleNbIdList) != 0 {
		object["globaleNbIdList"], err = json.Marshal(a.GlobaleNbIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globaleNbIdList': %w", err)
		}
	}

	if len(a.NcgiList) != 0 {
		object["ncgiList"], err = json.Marshal(a.NcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgiList': %w", err)
		}
	}

	if a.PraId != nil {
		object["praId"], err = json.Marshal(a.PraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praId': %w", err)
		}
	}

	if a.PresenceState != nil {
		object["presenceState"], err = json.Marshal(a.PresenceState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceState': %w", err)
		}
	}

	if len(a.TrackingAreaList) != 0 {
		object["trackingAreaList"], err = json.Marshal(a.TrackingAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trackingAreaList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PresenceInfoRm. Returns the specified
// element and whether it was found
func (a PresenceInfoRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PresenceInfoRm
func (a *PresenceInfoRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PresenceInfoRm to handle AdditionalProperties
func (a *PresenceInfoRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalPraId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalPraId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalPraId': %w", err)
		}
		delete(object, "additionalPraId")
	}

	if raw, found := object["ecgiList"]; found {
		err = json.Unmarshal(raw, &a.EcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ecgiList': %w", err)
		}
		delete(object, "ecgiList")
	}

	if raw, found := object["globalRanNodeIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobalRanNodeIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globalRanNodeIdList': %w", err)
		}
		delete(object, "globalRanNodeIdList")
	}

	if raw, found := object["globaleNbIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobaleNbIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globaleNbIdList': %w", err)
		}
		delete(object, "globaleNbIdList")
	}

	if raw, found := object["ncgiList"]; found {
		err = json.Unmarshal(raw, &a.NcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ncgiList': %w", err)
		}
		delete(object, "ncgiList")
	}

	if raw, found := object["praId"]; found {
		err = json.Unmarshal(raw, &a.PraId)
		if err != nil {
			return fmt.Errorf("error reading 'praId': %w", err)
		}
		delete(object, "praId")
	}

	if raw, found := object["presenceState"]; found {
		err = json.Unmarshal(raw, &a.PresenceState)
		if err != nil {
			return fmt.Errorf("error reading 'presenceState': %w", err)
		}
		delete(object, "presenceState")
	}

	if raw, found := object["trackingAreaList"]; found {
		err = json.Unmarshal(raw, &a.TrackingAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'trackingAreaList': %w", err)
		}
		delete(object, "trackingAreaList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PresenceInfoRm to handle AdditionalProperties
func (a PresenceInfoRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalPraId != nil {
		object["additionalPraId"], err = json.Marshal(a.AdditionalPraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalPraId': %w", err)
		}
	}

	if a.EcgiList != nil {
		object["ecgiList"], err = json.Marshal(a.EcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgiList': %w", err)
		}
	}

	if a.GlobalRanNodeIdList != nil {
		object["globalRanNodeIdList"], err = json.Marshal(a.GlobalRanNodeIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalRanNodeIdList': %w", err)
		}
	}

	if len(a.GlobaleNbIdList) != 0 {
		object["globaleNbIdList"], err = json.Marshal(a.GlobaleNbIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globaleNbIdList': %w", err)
		}
	}

	if a.NcgiList != nil {
		object["ncgiList"], err = json.Marshal(a.NcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgiList': %w", err)
		}
	}

	if a.PraId != nil {
		object["praId"], err = json.Marshal(a.PraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praId': %w", err)
		}
	}

	if a.PresenceState != nil {
		object["presenceState"], err = json.Marshal(a.PresenceState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceState': %w", err)
		}
	}

	if a.TrackingAreaList != nil {
		object["trackingAreaList"], err = json.Marshal(a.TrackingAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trackingAreaList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Property. Returns the specified
// element and whether it was found
func (a Property) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Property
func (a *Property) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Property to handle AdditionalProperties
func (a *Property) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["regex"]; found {
		err = json.Unmarshal(raw, &a.Regex)
		if err != nil {
			return fmt.Errorf("error reading 'regex': %w", err)
		}
		delete(object, "regex")
	}

	if raw, found := object["required"]; found {
		err = json.Unmarshal(raw, &a.Required)
		if err != nil {
			return fmt.Errorf("error reading 'required': %w", err)
		}
		delete(object, "required")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Property to handle AdditionalProperties
func (a Property) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Regex != nil {
		object["regex"], err = json.Marshal(a.Regex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'regex': %w", err)
		}
	}

	if a.Required != nil {
		object["required"], err = json.Marshal(a.Required)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'required': %w", err)
		}
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowUsageReport. Returns the specified
// element and whether it was found
func (a QosFlowUsageReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowUsageReport
func (a *QosFlowUsageReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowUsageReport to handle AdditionalProperties
func (a *QosFlowUsageReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlinkVolume"]; found {
		err = json.Unmarshal(raw, &a.DownlinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'downlinkVolume': %w", err)
		}
		delete(object, "downlinkVolume")
	}

	if raw, found := object["endTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.EndTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'endTimeStamp': %w", err)
		}
		delete(object, "endTimeStamp")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["startTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.StartTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'startTimeStamp': %w", err)
		}
		delete(object, "startTimeStamp")
	}

	if raw, found := object["uplinkVolume"]; found {
		err = json.Unmarshal(raw, &a.UplinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'uplinkVolume': %w", err)
		}
		delete(object, "uplinkVolume")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowUsageReport to handle AdditionalProperties
func (a QosFlowUsageReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlinkVolume"], err = json.Marshal(a.DownlinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlinkVolume': %w", err)
	}

	object["endTimeStamp"], err = json.Marshal(a.EndTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'endTimeStamp': %w", err)
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	object["startTimeStamp"], err = json.Marshal(a.StartTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'startTimeStamp': %w", err)
	}

	object["uplinkVolume"], err = json.Marshal(a.UplinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplinkVolume': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RedirectResponse. Returns the specified
// element and whether it was found
func (a RedirectResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RedirectResponse
func (a *RedirectResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RedirectResponse to handle AdditionalProperties
func (a *RedirectResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["targetScp"]; found {
		err = json.Unmarshal(raw, &a.TargetScp)
		if err != nil {
			return fmt.Errorf("error reading 'targetScp': %w", err)
		}
		delete(object, "targetScp")
	}

	if raw, found := object["targetSepp"]; found {
		err = json.Unmarshal(raw, &a.TargetSepp)
		if err != nil {
			return fmt.Errorf("error reading 'targetSepp': %w", err)
		}
		delete(object, "targetSepp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RedirectResponse to handle AdditionalProperties
func (a RedirectResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.TargetScp != nil {
		object["targetScp"], err = json.Marshal(a.TargetScp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetScp': %w", err)
		}
	}

	if a.TargetSepp != nil {
		object["targetSepp"], err = json.Marshal(a.TargetSepp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetSepp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RefToBinaryData. Returns the specified
// element and whether it was found
func (a RefToBinaryData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RefToBinaryData
func (a *RefToBinaryData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RefToBinaryData to handle AdditionalProperties
func (a *RefToBinaryData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contentId"]; found {
		err = json.Unmarshal(raw, &a.ContentId)
		if err != nil {
			return fmt.Errorf("error reading 'contentId': %w", err)
		}
		delete(object, "contentId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RefToBinaryData to handle AdditionalProperties
func (a RefToBinaryData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["contentId"], err = json.Marshal(a.ContentId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'contentId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReportItem. Returns the specified
// element and whether it was found
func (a ReportItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReportItem
func (a *ReportItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReportItem to handle AdditionalProperties
func (a *ReportItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReportItem to handle AdditionalProperties
func (a ReportItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RouteInformation. Returns the specified
// element and whether it was found
func (a RouteInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RouteInformation
func (a *RouteInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RouteInformation to handle AdditionalProperties
func (a *RouteInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["portNumber"]; found {
		err = json.Unmarshal(raw, &a.PortNumber)
		if err != nil {
			return fmt.Errorf("error reading 'portNumber': %w", err)
		}
		delete(object, "portNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RouteInformation to handle AdditionalProperties
func (a RouteInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	object["portNumber"], err = json.Marshal(a.PortNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'portNumber': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RouteToLocation. Returns the specified
// element and whether it was found
func (a RouteToLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RouteToLocation
func (a *RouteToLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RouteToLocation to handle AdditionalProperties
func (a *RouteToLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnai"]; found {
		err = json.Unmarshal(raw, &a.Dnai)
		if err != nil {
			return fmt.Errorf("error reading 'dnai': %w", err)
		}
		delete(object, "dnai")
	}

	if raw, found := object["routeInfo"]; found {
		err = json.Unmarshal(raw, &a.RouteInfo)
		if err != nil {
			return fmt.Errorf("error reading 'routeInfo': %w", err)
		}
		delete(object, "routeInfo")
	}

	if raw, found := object["routeProfId"]; found {
		err = json.Unmarshal(raw, &a.RouteProfId)
		if err != nil {
			return fmt.Errorf("error reading 'routeProfId': %w", err)
		}
		delete(object, "routeProfId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RouteToLocation to handle AdditionalProperties
func (a RouteToLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnai"], err = json.Marshal(a.Dnai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnai': %w", err)
	}

	object["routeInfo"], err = json.Marshal(a.RouteInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'routeInfo': %w", err)
	}

	object["routeProfId"], err = json.Marshal(a.RouteProfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'routeProfId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RoutingAreaId. Returns the specified
// element and whether it was found
func (a RoutingAreaId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RoutingAreaId
func (a *RoutingAreaId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RoutingAreaId to handle AdditionalProperties
func (a *RoutingAreaId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["rac"]; found {
		err = json.Unmarshal(raw, &a.Rac)
		if err != nil {
			return fmt.Errorf("error reading 'rac': %w", err)
		}
		delete(object, "rac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RoutingAreaId to handle AdditionalProperties
func (a RoutingAreaId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["rac"], err = json.Marshal(a.Rac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rac': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ScheduledCommunicationTime. Returns the specified
// element and whether it was found
func (a ScheduledCommunicationTime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ScheduledCommunicationTime
func (a *ScheduledCommunicationTime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ScheduledCommunicationTime to handle AdditionalProperties
func (a *ScheduledCommunicationTime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["daysOfWeek"]; found {
		err = json.Unmarshal(raw, &a.DaysOfWeek)
		if err != nil {
			return fmt.Errorf("error reading 'daysOfWeek': %w", err)
		}
		delete(object, "daysOfWeek")
	}

	if raw, found := object["timeOfDayEnd"]; found {
		err = json.Unmarshal(raw, &a.TimeOfDayEnd)
		if err != nil {
			return fmt.Errorf("error reading 'timeOfDayEnd': %w", err)
		}
		delete(object, "timeOfDayEnd")
	}

	if raw, found := object["timeOfDayStart"]; found {
		err = json.Unmarshal(raw, &a.TimeOfDayStart)
		if err != nil {
			return fmt.Errorf("error reading 'timeOfDayStart': %w", err)
		}
		delete(object, "timeOfDayStart")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ScheduledCommunicationTime to handle AdditionalProperties
func (a ScheduledCommunicationTime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DaysOfWeek) != 0 {
		object["daysOfWeek"], err = json.Marshal(a.DaysOfWeek)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'daysOfWeek': %w", err)
		}
	}

	if a.TimeOfDayEnd != nil {
		object["timeOfDayEnd"], err = json.Marshal(a.TimeOfDayEnd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeOfDayEnd': %w", err)
		}
	}

	if a.TimeOfDayStart != nil {
		object["timeOfDayStart"], err = json.Marshal(a.TimeOfDayStart)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeOfDayStart': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SdRange. Returns the specified
// element and whether it was found
func (a SdRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdRange
func (a *SdRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdRange to handle AdditionalProperties
func (a *SdRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdRange to handle AdditionalProperties
func (a SdRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecondaryRatUsageInfo. Returns the specified
// element and whether it was found
func (a SecondaryRatUsageInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecondaryRatUsageInfo
func (a *SecondaryRatUsageInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecondaryRatUsageInfo to handle AdditionalProperties
func (a *SecondaryRatUsageInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pduSessionUsageData"]; found {
		err = json.Unmarshal(raw, &a.PduSessionUsageData)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionUsageData': %w", err)
		}
		delete(object, "pduSessionUsageData")
	}

	if raw, found := object["qosFlowsUsageData"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsUsageData)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsUsageData': %w", err)
		}
		delete(object, "qosFlowsUsageData")
	}

	if raw, found := object["secondaryRatType"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatType)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatType': %w", err)
		}
		delete(object, "secondaryRatType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecondaryRatUsageInfo to handle AdditionalProperties
func (a SecondaryRatUsageInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.PduSessionUsageData) != 0 {
		object["pduSessionUsageData"], err = json.Marshal(a.PduSessionUsageData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionUsageData': %w", err)
		}
	}

	if len(a.QosFlowsUsageData) != 0 {
		object["qosFlowsUsageData"], err = json.Marshal(a.QosFlowsUsageData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsUsageData': %w", err)
		}
	}

	object["secondaryRatType"], err = json.Marshal(a.SecondaryRatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'secondaryRatType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecondaryRatUsageReport. Returns the specified
// element and whether it was found
func (a SecondaryRatUsageReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecondaryRatUsageReport
func (a *SecondaryRatUsageReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecondaryRatUsageReport to handle AdditionalProperties
func (a *SecondaryRatUsageReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qosFlowsUsageData"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsUsageData)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsUsageData': %w", err)
		}
		delete(object, "qosFlowsUsageData")
	}

	if raw, found := object["secondaryRatType"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatType)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatType': %w", err)
		}
		delete(object, "secondaryRatType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecondaryRatUsageReport to handle AdditionalProperties
func (a SecondaryRatUsageReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["qosFlowsUsageData"], err = json.Marshal(a.QosFlowsUsageData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosFlowsUsageData': %w", err)
	}

	object["secondaryRatType"], err = json.Marshal(a.SecondaryRatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'secondaryRatType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SelfLink. Returns the specified
// element and whether it was found
func (a SelfLink) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SelfLink
func (a *SelfLink) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SelfLink to handle AdditionalProperties
func (a *SelfLink) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SelfLink to handle AdditionalProperties
func (a SelfLink) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["self"], err = json.Marshal(a.Self)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'self': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceAreaId. Returns the specified
// element and whether it was found
func (a ServiceAreaId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceAreaId
func (a *ServiceAreaId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceAreaId to handle AdditionalProperties
func (a *ServiceAreaId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["sac"]; found {
		err = json.Unmarshal(raw, &a.Sac)
		if err != nil {
			return fmt.Errorf("error reading 'sac': %w", err)
		}
		delete(object, "sac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceAreaId to handle AdditionalProperties
func (a ServiceAreaId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["sac"], err = json.Marshal(a.Sac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sac': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceAreaRestriction. Returns the specified
// element and whether it was found
func (a ServiceAreaRestriction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceAreaRestriction
func (a *ServiceAreaRestriction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceAreaRestriction to handle AdditionalProperties
func (a *ServiceAreaRestriction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areas"]; found {
		err = json.Unmarshal(raw, &a.Areas)
		if err != nil {
			return fmt.Errorf("error reading 'areas': %w", err)
		}
		delete(object, "areas")
	}

	if raw, found := object["maxNumOfTAs"]; found {
		err = json.Unmarshal(raw, &a.MaxNumOfTAs)
		if err != nil {
			return fmt.Errorf("error reading 'maxNumOfTAs': %w", err)
		}
		delete(object, "maxNumOfTAs")
	}

	if raw, found := object["maxNumOfTAsForNotAllowedAreas"]; found {
		err = json.Unmarshal(raw, &a.MaxNumOfTAsForNotAllowedAreas)
		if err != nil {
			return fmt.Errorf("error reading 'maxNumOfTAsForNotAllowedAreas': %w", err)
		}
		delete(object, "maxNumOfTAsForNotAllowedAreas")
	}

	if raw, found := object["restrictionType"]; found {
		err = json.Unmarshal(raw, &a.RestrictionType)
		if err != nil {
			return fmt.Errorf("error reading 'restrictionType': %w", err)
		}
		delete(object, "restrictionType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceAreaRestriction to handle AdditionalProperties
func (a ServiceAreaRestriction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Areas != nil {
		object["areas"], err = json.Marshal(a.Areas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areas': %w", err)
		}
	}

	if a.MaxNumOfTAs != nil {
		object["maxNumOfTAs"], err = json.Marshal(a.MaxNumOfTAs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxNumOfTAs': %w", err)
		}
	}

	if a.MaxNumOfTAsForNotAllowedAreas != nil {
		object["maxNumOfTAsForNotAllowedAreas"], err = json.Marshal(a.MaxNumOfTAsForNotAllowedAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxNumOfTAsForNotAllowedAreas': %w", err)
		}
	}

	if a.RestrictionType != nil {
		object["restrictionType"], err = json.Marshal(a.RestrictionType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictionType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmallDataRateStatus. Returns the specified
// element and whether it was found
func (a SmallDataRateStatus) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmallDataRateStatus
func (a *SmallDataRateStatus) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmallDataRateStatus to handle AdditionalProperties
func (a *SmallDataRateStatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["remainExReportsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsDl': %w", err)
		}
		delete(object, "remainExReportsDl")
	}

	if raw, found := object["remainExReportsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsUl': %w", err)
		}
		delete(object, "remainExReportsUl")
	}

	if raw, found := object["remainPacketsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsDl': %w", err)
		}
		delete(object, "remainPacketsDl")
	}

	if raw, found := object["remainPacketsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsUl': %w", err)
		}
		delete(object, "remainPacketsUl")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmallDataRateStatus to handle AdditionalProperties
func (a SmallDataRateStatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RemainExReportsDl != nil {
		object["remainExReportsDl"], err = json.Marshal(a.RemainExReportsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsDl': %w", err)
		}
	}

	if a.RemainExReportsUl != nil {
		object["remainExReportsUl"], err = json.Marshal(a.RemainExReportsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsUl': %w", err)
		}
	}

	if a.RemainPacketsDl != nil {
		object["remainPacketsDl"], err = json.Marshal(a.RemainPacketsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsDl': %w", err)
		}
	}

	if a.RemainPacketsUl != nil {
		object["remainPacketsUl"], err = json.Marshal(a.RemainPacketsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsUl': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiExtension. Returns the specified
// element and whether it was found
func (a SnssaiExtension) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiExtension
func (a *SnssaiExtension) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiExtension to handle AdditionalProperties
func (a *SnssaiExtension) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sdRanges"]; found {
		err = json.Unmarshal(raw, &a.SdRanges)
		if err != nil {
			return fmt.Errorf("error reading 'sdRanges': %w", err)
		}
		delete(object, "sdRanges")
	}

	if raw, found := object["wildcardSd"]; found {
		err = json.Unmarshal(raw, &a.WildcardSd)
		if err != nil {
			return fmt.Errorf("error reading 'wildcardSd': %w", err)
		}
		delete(object, "wildcardSd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiExtension to handle AdditionalProperties
func (a SnssaiExtension) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SdRanges) != 0 {
		object["sdRanges"], err = json.Marshal(a.SdRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdRanges': %w", err)
		}
	}

	if a.WildcardSd != nil {
		object["wildcardSd"], err = json.Marshal(a.WildcardSd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wildcardSd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscribedDefaultQos. Returns the specified
// element and whether it was found
func (a SubscribedDefaultQos) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscribedDefaultQos
func (a *SubscribedDefaultQos) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscribedDefaultQos to handle AdditionalProperties
func (a *SubscribedDefaultQos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscribedDefaultQos to handle AdditionalProperties
func (a SubscribedDefaultQos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5qi"], err = json.Marshal(a.N5qi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5qi': %w", err)
	}

	object["arp"], err = json.Marshal(a.Arp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'arp': %w", err)
	}

	if a.PriorityLevel != 0 {
		object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TacInfo. Returns the specified
// element and whether it was found
func (a TacInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TacInfo
func (a *TacInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TacInfo to handle AdditionalProperties
func (a *TacInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["tacList"]; found {
		err = json.Unmarshal(raw, &a.TacList)
		if err != nil {
			return fmt.Errorf("error reading 'tacList': %w", err)
		}
		delete(object, "tacList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TacInfo to handle AdditionalProperties
func (a TacInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["tacList"], err = json.Marshal(a.TacList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tacList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Tai. Returns the specified
// element and whether it was found
func (a Tai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Tai
func (a *Tai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Tai to handle AdditionalProperties
func (a *Tai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["tac"]; found {
		err = json.Unmarshal(raw, &a.Tac)
		if err != nil {
			return fmt.Errorf("error reading 'tac': %w", err)
		}
		delete(object, "tac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Tai to handle AdditionalProperties
func (a Tai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["tac"], err = json.Marshal(a.Tac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tac': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TnapId. Returns the specified
// element and whether it was found
func (a TnapId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TnapId
func (a *TnapId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TnapId to handle AdditionalProperties
func (a *TnapId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bssId"]; found {
		err = json.Unmarshal(raw, &a.BssId)
		if err != nil {
			return fmt.Errorf("error reading 'bssId': %w", err)
		}
		delete(object, "bssId")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ssId"]; found {
		err = json.Unmarshal(raw, &a.SsId)
		if err != nil {
			return fmt.Errorf("error reading 'ssId': %w", err)
		}
		delete(object, "ssId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TnapId to handle AdditionalProperties
func (a TnapId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BssId != nil {
		object["bssId"], err = json.Marshal(a.BssId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bssId': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	if a.SsId != nil {
		object["ssId"], err = json.Marshal(a.SsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ssId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TraceData. Returns the specified
// element and whether it was found
func (a TraceData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TraceData
func (a *TraceData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TraceData to handle AdditionalProperties
func (a *TraceData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["collectionEntityIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.CollectionEntityIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'collectionEntityIpv4Addr': %w", err)
		}
		delete(object, "collectionEntityIpv4Addr")
	}

	if raw, found := object["collectionEntityIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.CollectionEntityIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'collectionEntityIpv6Addr': %w", err)
		}
		delete(object, "collectionEntityIpv6Addr")
	}

	if raw, found := object["eventList"]; found {
		err = json.Unmarshal(raw, &a.EventList)
		if err != nil {
			return fmt.Errorf("error reading 'eventList': %w", err)
		}
		delete(object, "eventList")
	}

	if raw, found := object["interfaceList"]; found {
		err = json.Unmarshal(raw, &a.InterfaceList)
		if err != nil {
			return fmt.Errorf("error reading 'interfaceList': %w", err)
		}
		delete(object, "interfaceList")
	}

	if raw, found := object["neTypeList"]; found {
		err = json.Unmarshal(raw, &a.NeTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'neTypeList': %w", err)
		}
		delete(object, "neTypeList")
	}

	if raw, found := object["traceDepth"]; found {
		err = json.Unmarshal(raw, &a.TraceDepth)
		if err != nil {
			return fmt.Errorf("error reading 'traceDepth': %w", err)
		}
		delete(object, "traceDepth")
	}

	if raw, found := object["traceRef"]; found {
		err = json.Unmarshal(raw, &a.TraceRef)
		if err != nil {
			return fmt.Errorf("error reading 'traceRef': %w", err)
		}
		delete(object, "traceRef")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TraceData to handle AdditionalProperties
func (a TraceData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CollectionEntityIpv4Addr) != 0 {
		object["collectionEntityIpv4Addr"], err = json.Marshal(a.CollectionEntityIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionEntityIpv4Addr': %w", err)
		}
	}

	if a.CollectionEntityIpv6Addr != nil {
		object["collectionEntityIpv6Addr"], err = json.Marshal(a.CollectionEntityIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionEntityIpv6Addr': %w", err)
		}
	}

	object["eventList"], err = json.Marshal(a.EventList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventList': %w", err)
	}

	if len(a.InterfaceList) != 0 {
		object["interfaceList"], err = json.Marshal(a.InterfaceList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interfaceList': %w", err)
		}
	}

	object["neTypeList"], err = json.Marshal(a.NeTypeList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'neTypeList': %w", err)
	}

	object["traceDepth"], err = json.Marshal(a.TraceDepth)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceDepth': %w", err)
	}

	object["traceRef"], err = json.Marshal(a.TraceRef)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceRef': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TwapId. Returns the specified
// element and whether it was found
func (a TwapId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TwapId
func (a *TwapId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TwapId to handle AdditionalProperties
func (a *TwapId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bssId"]; found {
		err = json.Unmarshal(raw, &a.BssId)
		if err != nil {
			return fmt.Errorf("error reading 'bssId': %w", err)
		}
		delete(object, "bssId")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ssId"]; found {
		err = json.Unmarshal(raw, &a.SsId)
		if err != nil {
			return fmt.Errorf("error reading 'ssId': %w", err)
		}
		delete(object, "ssId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TwapId to handle AdditionalProperties
func (a TwapId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BssId != nil {
		object["bssId"], err = json.Marshal(a.BssId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bssId': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	object["ssId"], err = json.Marshal(a.SsId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ssId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpSecurity. Returns the specified
// element and whether it was found
func (a UpSecurity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpSecurity
func (a *UpSecurity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpSecurity to handle AdditionalProperties
func (a *UpSecurity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["upConfid"]; found {
		err = json.Unmarshal(raw, &a.UpConfid)
		if err != nil {
			return fmt.Errorf("error reading 'upConfid': %w", err)
		}
		delete(object, "upConfid")
	}

	if raw, found := object["upIntegr"]; found {
		err = json.Unmarshal(raw, &a.UpIntegr)
		if err != nil {
			return fmt.Errorf("error reading 'upIntegr': %w", err)
		}
		delete(object, "upIntegr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpSecurity to handle AdditionalProperties
func (a UpSecurity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["upConfid"], err = json.Marshal(a.UpConfid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upConfid': %w", err)
	}

	object["upIntegr"], err = json.Marshal(a.UpIntegr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upIntegr': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserLocation. Returns the specified
// element and whether it was found
func (a UserLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserLocation
func (a *UserLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserLocation to handle AdditionalProperties
func (a *UserLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eutraLocation"]; found {
		err = json.Unmarshal(raw, &a.EutraLocation)
		if err != nil {
			return fmt.Errorf("error reading 'eutraLocation': %w", err)
		}
		delete(object, "eutraLocation")
	}

	if raw, found := object["geraLocation"]; found {
		err = json.Unmarshal(raw, &a.GeraLocation)
		if err != nil {
			return fmt.Errorf("error reading 'geraLocation': %w", err)
		}
		delete(object, "geraLocation")
	}

	if raw, found := object["n3gaLocation"]; found {
		err = json.Unmarshal(raw, &a.N3gaLocation)
		if err != nil {
			return fmt.Errorf("error reading 'n3gaLocation': %w", err)
		}
		delete(object, "n3gaLocation")
	}

	if raw, found := object["nrLocation"]; found {
		err = json.Unmarshal(raw, &a.NrLocation)
		if err != nil {
			return fmt.Errorf("error reading 'nrLocation': %w", err)
		}
		delete(object, "nrLocation")
	}

	if raw, found := object["utraLocation"]; found {
		err = json.Unmarshal(raw, &a.UtraLocation)
		if err != nil {
			return fmt.Errorf("error reading 'utraLocation': %w", err)
		}
		delete(object, "utraLocation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserLocation to handle AdditionalProperties
func (a UserLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EutraLocation != nil {
		object["eutraLocation"], err = json.Marshal(a.EutraLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eutraLocation': %w", err)
		}
	}

	if a.GeraLocation != nil {
		object["geraLocation"], err = json.Marshal(a.GeraLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geraLocation': %w", err)
		}
	}

	if a.N3gaLocation != nil {
		object["n3gaLocation"], err = json.Marshal(a.N3gaLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3gaLocation': %w", err)
		}
	}

	if a.NrLocation != nil {
		object["nrLocation"], err = json.Marshal(a.NrLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrLocation': %w", err)
		}
	}

	if a.UtraLocation != nil {
		object["utraLocation"], err = json.Marshal(a.UtraLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'utraLocation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UtraLocation. Returns the specified
// element and whether it was found
func (a UtraLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UtraLocation
func (a *UtraLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UtraLocation to handle AdditionalProperties
func (a *UtraLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["cgi"]; found {
		err = json.Unmarshal(raw, &a.Cgi)
		if err != nil {
			return fmt.Errorf("error reading 'cgi': %w", err)
		}
		delete(object, "cgi")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["lai"]; found {
		err = json.Unmarshal(raw, &a.Lai)
		if err != nil {
			return fmt.Errorf("error reading 'lai': %w", err)
		}
		delete(object, "lai")
	}

	if raw, found := object["rai"]; found {
		err = json.Unmarshal(raw, &a.Rai)
		if err != nil {
			return fmt.Errorf("error reading 'rai': %w", err)
		}
		delete(object, "rai")
	}

	if raw, found := object["sai"]; found {
		err = json.Unmarshal(raw, &a.Sai)
		if err != nil {
			return fmt.Errorf("error reading 'sai': %w", err)
		}
		delete(object, "sai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UtraLocation to handle AdditionalProperties
func (a UtraLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	if a.Cgi != nil {
		object["cgi"], err = json.Marshal(a.Cgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cgi': %w", err)
		}
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.Lai != nil {
		object["lai"], err = json.Marshal(a.Lai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lai': %w", err)
		}
	}

	if a.Rai != nil {
		object["rai"], err = json.Marshal(a.Rai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rai': %w", err)
		}
	}

	if a.Sai != nil {
		object["sai"], err = json.Marshal(a.Sai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sai': %w", err)
		}
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VolumeTimedReport. Returns the specified
// element and whether it was found
func (a VolumeTimedReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VolumeTimedReport
func (a *VolumeTimedReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VolumeTimedReport to handle AdditionalProperties
func (a *VolumeTimedReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlinkVolume"]; found {
		err = json.Unmarshal(raw, &a.DownlinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'downlinkVolume': %w", err)
		}
		delete(object, "downlinkVolume")
	}

	if raw, found := object["endTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.EndTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'endTimeStamp': %w", err)
		}
		delete(object, "endTimeStamp")
	}

	if raw, found := object["startTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.StartTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'startTimeStamp': %w", err)
		}
		delete(object, "startTimeStamp")
	}

	if raw, found := object["uplinkVolume"]; found {
		err = json.Unmarshal(raw, &a.UplinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'uplinkVolume': %w", err)
		}
		delete(object, "uplinkVolume")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VolumeTimedReport to handle AdditionalProperties
func (a VolumeTimedReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlinkVolume"], err = json.Marshal(a.DownlinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlinkVolume': %w", err)
	}

	object["endTimeStamp"], err = json.Marshal(a.EndTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'endTimeStamp': %w", err)
	}

	object["startTimeStamp"], err = json.Marshal(a.StartTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'startTimeStamp': %w", err)
	}

	object["uplinkVolume"], err = json.Marshal(a.UplinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplinkVolume': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WirelineArea. Returns the specified
// element and whether it was found
func (a WirelineArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WirelineArea
func (a *WirelineArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WirelineArea to handle AdditionalProperties
func (a *WirelineArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areaCodeB"]; found {
		err = json.Unmarshal(raw, &a.AreaCodeB)
		if err != nil {
			return fmt.Errorf("error reading 'areaCodeB': %w", err)
		}
		delete(object, "areaCodeB")
	}

	if raw, found := object["areaCodeC"]; found {
		err = json.Unmarshal(raw, &a.AreaCodeC)
		if err != nil {
			return fmt.Errorf("error reading 'areaCodeC': %w", err)
		}
		delete(object, "areaCodeC")
	}

	if raw, found := object["globalLineIds"]; found {
		err = json.Unmarshal(raw, &a.GlobalLineIds)
		if err != nil {
			return fmt.Errorf("error reading 'globalLineIds': %w", err)
		}
		delete(object, "globalLineIds")
	}

	if raw, found := object["hfcNIds"]; found {
		err = json.Unmarshal(raw, &a.HfcNIds)
		if err != nil {
			return fmt.Errorf("error reading 'hfcNIds': %w", err)
		}
		delete(object, "hfcNIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WirelineArea to handle AdditionalProperties
func (a WirelineArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AreaCodeB != nil {
		object["areaCodeB"], err = json.Marshal(a.AreaCodeB)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaCodeB': %w", err)
		}
	}

	if a.AreaCodeC != nil {
		object["areaCodeC"], err = json.Marshal(a.AreaCodeC)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaCodeC': %w", err)
		}
	}

	if len(a.GlobalLineIds) != 0 {
		object["globalLineIds"], err = json.Marshal(a.GlobalLineIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalLineIds': %w", err)
		}
	}

	if len(a.HfcNIds) != 0 {
		object["hfcNIds"], err = json.Marshal(a.HfcNIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hfcNIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WirelineServiceAreaRestriction. Returns the specified
// element and whether it was found
func (a WirelineServiceAreaRestriction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WirelineServiceAreaRestriction
func (a *WirelineServiceAreaRestriction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WirelineServiceAreaRestriction to handle AdditionalProperties
func (a *WirelineServiceAreaRestriction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areas"]; found {
		err = json.Unmarshal(raw, &a.Areas)
		if err != nil {
			return fmt.Errorf("error reading 'areas': %w", err)
		}
		delete(object, "areas")
	}

	if raw, found := object["restrictionType"]; found {
		err = json.Unmarshal(raw, &a.RestrictionType)
		if err != nil {
			return fmt.Errorf("error reading 'restrictionType': %w", err)
		}
		delete(object, "restrictionType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WirelineServiceAreaRestriction to handle AdditionalProperties
func (a WirelineServiceAreaRestriction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Areas != nil {
		object["areas"], err = json.Marshal(a.Areas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areas': %w", err)
		}
	}

	if a.RestrictionType != nil {
		object["restrictionType"], err = json.Marshal(a.RestrictionType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictionType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsAccessType returns the union data inside the AccessTypeRm as a AccessType
func (t AccessTypeRm) AsAccessType() (AccessType, error) {
	var body AccessType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessType overwrites any union data inside the AccessTypeRm as the provided AccessType
func (t *AccessTypeRm) FromAccessType(v AccessType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessType performs a merge with any union data inside the AccessTypeRm, using the provided AccessType
func (t *AccessTypeRm) MergeAccessType(v AccessType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the AccessTypeRm as a NullValue
func (t AccessTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the AccessTypeRm as the provided NullValue
func (t *AccessTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the AccessTypeRm, using the provided NullValue
func (t *AccessTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccessTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccessTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAcsInfo returns the union data inside the AcsInfoRm as a AcsInfo
func (t AcsInfoRm) AsAcsInfo() (AcsInfo, error) {
	var body AcsInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAcsInfo overwrites any union data inside the AcsInfoRm as the provided AcsInfo
func (t *AcsInfoRm) FromAcsInfo(v AcsInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAcsInfo performs a merge with any union data inside the AcsInfoRm, using the provided AcsInfo
func (t *AcsInfoRm) MergeAcsInfo(v AcsInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the AcsInfoRm as a NullValue
func (t AcsInfoRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the AcsInfoRm as the provided NullValue
func (t *AcsInfoRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the AcsInfoRm, using the provided NullValue
func (t *AcsInfoRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AcsInfoRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AcsInfoRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdditionalQosFlowInfo0 returns the union data inside the AdditionalQosFlowInfo as a AdditionalQosFlowInfo0
func (t AdditionalQosFlowInfo) AsAdditionalQosFlowInfo0() (AdditionalQosFlowInfo0, error) {
	var body AdditionalQosFlowInfo0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdditionalQosFlowInfo0 overwrites any union data inside the AdditionalQosFlowInfo as the provided AdditionalQosFlowInfo0
func (t *AdditionalQosFlowInfo) FromAdditionalQosFlowInfo0(v AdditionalQosFlowInfo0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdditionalQosFlowInfo0 performs a merge with any union data inside the AdditionalQosFlowInfo, using the provided AdditionalQosFlowInfo0
func (t *AdditionalQosFlowInfo) MergeAdditionalQosFlowInfo0(v AdditionalQosFlowInfo0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the AdditionalQosFlowInfo as a NullValue
func (t AdditionalQosFlowInfo) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the AdditionalQosFlowInfo as the provided NullValue
func (t *AdditionalQosFlowInfo) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the AdditionalQosFlowInfo, using the provided NullValue
func (t *AdditionalQosFlowInfo) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdditionalQosFlowInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdditionalQosFlowInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAmbr returns the union data inside the AmbrRm as a Ambr
func (t AmbrRm) AsAmbr() (Ambr, error) {
	var body Ambr
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmbr overwrites any union data inside the AmbrRm as the provided Ambr
func (t *AmbrRm) FromAmbr(v Ambr) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmbr performs a merge with any union data inside the AmbrRm, using the provided Ambr
func (t *AmbrRm) MergeAmbr(v Ambr) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the AmbrRm as a NullValue
func (t AmbrRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the AmbrRm as the provided NullValue
func (t *AmbrRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the AmbrRm, using the provided NullValue
func (t *AmbrRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AmbrRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AmbrRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArp returns the union data inside the ArpRm as a Arp
func (t ArpRm) AsArp() (Arp, error) {
	var body Arp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArp overwrites any union data inside the ArpRm as the provided Arp
func (t *ArpRm) FromArp(v Arp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArp performs a merge with any union data inside the ArpRm, using the provided Arp
func (t *ArpRm) MergeArp(v Arp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the ArpRm as a NullValue
func (t ArpRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the ArpRm as the provided NullValue
func (t *ArpRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the ArpRm, using the provided NullValue
func (t *ArpRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArpRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArpRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBatteryIndication returns the union data inside the BatteryIndicationRm as a BatteryIndication
func (t BatteryIndicationRm) AsBatteryIndication() (BatteryIndication, error) {
	var body BatteryIndication
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBatteryIndication overwrites any union data inside the BatteryIndicationRm as the provided BatteryIndication
func (t *BatteryIndicationRm) FromBatteryIndication(v BatteryIndication) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBatteryIndication performs a merge with any union data inside the BatteryIndicationRm, using the provided BatteryIndication
func (t *BatteryIndicationRm) MergeBatteryIndication(v BatteryIndication) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the BatteryIndicationRm as a NullValue
func (t BatteryIndicationRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the BatteryIndicationRm as the provided NullValue
func (t *BatteryIndicationRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the BatteryIndicationRm, using the provided NullValue
func (t *BatteryIndicationRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t BatteryIndicationRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BatteryIndicationRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCnf returns the union data inside the ComplexQuery as a Cnf
func (t ComplexQuery) AsCnf() (Cnf, error) {
	var body Cnf
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCnf overwrites any union data inside the ComplexQuery as the provided Cnf
func (t *ComplexQuery) FromCnf(v Cnf) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCnf performs a merge with any union data inside the ComplexQuery, using the provided Cnf
func (t *ComplexQuery) MergeCnf(v Cnf) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDnf returns the union data inside the ComplexQuery as a Dnf
func (t ComplexQuery) AsDnf() (Dnf, error) {
	var body Dnf
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnf overwrites any union data inside the ComplexQuery as the provided Dnf
func (t *ComplexQuery) FromDnf(v Dnf) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnf performs a merge with any union data inside the ComplexQuery, using the provided Dnf
func (t *ComplexQuery) MergeDnf(v Dnf) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComplexQuery) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComplexQuery) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCoreNetworkType returns the union data inside the CoreNetworkTypeRm as a CoreNetworkType
func (t CoreNetworkTypeRm) AsCoreNetworkType() (CoreNetworkType, error) {
	var body CoreNetworkType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCoreNetworkType overwrites any union data inside the CoreNetworkTypeRm as the provided CoreNetworkType
func (t *CoreNetworkTypeRm) FromCoreNetworkType(v CoreNetworkType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCoreNetworkType performs a merge with any union data inside the CoreNetworkTypeRm, using the provided CoreNetworkType
func (t *CoreNetworkTypeRm) MergeCoreNetworkType(v CoreNetworkType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the CoreNetworkTypeRm as a NullValue
func (t CoreNetworkTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the CoreNetworkTypeRm as the provided NullValue
func (t *CoreNetworkTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the CoreNetworkTypeRm, using the provided NullValue
func (t *CoreNetworkTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CoreNetworkTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CoreNetworkTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDlDataDeliveryStatus returns the union data inside the DlDataDeliveryStatusRm as a DlDataDeliveryStatus
func (t DlDataDeliveryStatusRm) AsDlDataDeliveryStatus() (DlDataDeliveryStatus, error) {
	var body DlDataDeliveryStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDlDataDeliveryStatus overwrites any union data inside the DlDataDeliveryStatusRm as the provided DlDataDeliveryStatus
func (t *DlDataDeliveryStatusRm) FromDlDataDeliveryStatus(v DlDataDeliveryStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDlDataDeliveryStatus performs a merge with any union data inside the DlDataDeliveryStatusRm, using the provided DlDataDeliveryStatus
func (t *DlDataDeliveryStatusRm) MergeDlDataDeliveryStatus(v DlDataDeliveryStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the DlDataDeliveryStatusRm as a NullValue
func (t DlDataDeliveryStatusRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the DlDataDeliveryStatusRm as the provided NullValue
func (t *DlDataDeliveryStatusRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the DlDataDeliveryStatusRm, using the provided NullValue
func (t *DlDataDeliveryStatusRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DlDataDeliveryStatusRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DlDataDeliveryStatusRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDnaiChangeType returns the union data inside the DnaiChangeTypeRm as a DnaiChangeType
func (t DnaiChangeTypeRm) AsDnaiChangeType() (DnaiChangeType, error) {
	var body DnaiChangeType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnaiChangeType overwrites any union data inside the DnaiChangeTypeRm as the provided DnaiChangeType
func (t *DnaiChangeTypeRm) FromDnaiChangeType(v DnaiChangeType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnaiChangeType performs a merge with any union data inside the DnaiChangeTypeRm, using the provided DnaiChangeType
func (t *DnaiChangeTypeRm) MergeDnaiChangeType(v DnaiChangeType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the DnaiChangeTypeRm as a NullValue
func (t DnaiChangeTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the DnaiChangeTypeRm as the provided NullValue
func (t *DnaiChangeTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the DnaiChangeTypeRm, using the provided NullValue
func (t *DnaiChangeTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DnaiChangeTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DnaiChangeTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEcgi returns the union data inside the EcgiRm as a Ecgi
func (t EcgiRm) AsEcgi() (Ecgi, error) {
	var body Ecgi
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEcgi overwrites any union data inside the EcgiRm as the provided Ecgi
func (t *EcgiRm) FromEcgi(v Ecgi) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEcgi performs a merge with any union data inside the EcgiRm, using the provided Ecgi
func (t *EcgiRm) MergeEcgi(v Ecgi) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the EcgiRm as a NullValue
func (t EcgiRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the EcgiRm as the provided NullValue
func (t *EcgiRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the EcgiRm, using the provided NullValue
func (t *EcgiRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t EcgiRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EcgiRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEutraLocation returns the union data inside the EutraLocationRm as a EutraLocation
func (t EutraLocationRm) AsEutraLocation() (EutraLocation, error) {
	var body EutraLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEutraLocation overwrites any union data inside the EutraLocationRm as the provided EutraLocation
func (t *EutraLocationRm) FromEutraLocation(v EutraLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEutraLocation performs a merge with any union data inside the EutraLocationRm, using the provided EutraLocation
func (t *EutraLocationRm) MergeEutraLocation(v EutraLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the EutraLocationRm as a NullValue
func (t EutraLocationRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the EutraLocationRm as the provided NullValue
func (t *EutraLocationRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the EutraLocationRm, using the provided NullValue
func (t *EutraLocationRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t EutraLocationRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EutraLocationRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGuami returns the union data inside the GuamiRm as a Guami
func (t GuamiRm) AsGuami() (Guami, error) {
	var body Guami
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGuami overwrites any union data inside the GuamiRm as the provided Guami
func (t *GuamiRm) FromGuami(v Guami) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGuami performs a merge with any union data inside the GuamiRm, using the provided Guami
func (t *GuamiRm) MergeGuami(v Guami) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the GuamiRm as a NullValue
func (t GuamiRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the GuamiRm as the provided NullValue
func (t *GuamiRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the GuamiRm, using the provided NullValue
func (t *GuamiRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GuamiRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GuamiRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHfcNodeId returns the union data inside the HfcNodeIdRm as a HfcNodeId
func (t HfcNodeIdRm) AsHfcNodeId() (HfcNodeId, error) {
	var body HfcNodeId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHfcNodeId overwrites any union data inside the HfcNodeIdRm as the provided HfcNodeId
func (t *HfcNodeIdRm) FromHfcNodeId(v HfcNodeId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHfcNodeId performs a merge with any union data inside the HfcNodeIdRm, using the provided HfcNodeId
func (t *HfcNodeIdRm) MergeHfcNodeId(v HfcNodeId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the HfcNodeIdRm as a NullValue
func (t HfcNodeIdRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the HfcNodeIdRm as the provided NullValue
func (t *HfcNodeIdRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the HfcNodeIdRm, using the provided NullValue
func (t *HfcNodeIdRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t HfcNodeIdRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HfcNodeIdRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLineType returns the union data inside the LineTypeRm as a LineType
func (t LineTypeRm) AsLineType() (LineType, error) {
	var body LineType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLineType overwrites any union data inside the LineTypeRm as the provided LineType
func (t *LineTypeRm) FromLineType(v LineType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLineType performs a merge with any union data inside the LineTypeRm, using the provided LineType
func (t *LineTypeRm) MergeLineType(v LineType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the LineTypeRm as a NullValue
func (t LineTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the LineTypeRm as the provided NullValue
func (t *LineTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the LineTypeRm, using the provided NullValue
func (t *LineTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t LineTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LineTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLinksValueSchema0 returns the union data inside the LinksValueSchema as a LinksValueSchema0
func (t LinksValueSchema) AsLinksValueSchema0() (LinksValueSchema0, error) {
	var body LinksValueSchema0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinksValueSchema0 overwrites any union data inside the LinksValueSchema as the provided LinksValueSchema0
func (t *LinksValueSchema) FromLinksValueSchema0(v LinksValueSchema0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinksValueSchema0 performs a merge with any union data inside the LinksValueSchema, using the provided LinksValueSchema0
func (t *LinksValueSchema) MergeLinksValueSchema0(v LinksValueSchema0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLink returns the union data inside the LinksValueSchema as a Link
func (t LinksValueSchema) AsLink() (Link, error) {
	var body Link
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLink overwrites any union data inside the LinksValueSchema as the provided Link
func (t *LinksValueSchema) FromLink(v Link) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLink performs a merge with any union data inside the LinksValueSchema, using the provided Link
func (t *LinksValueSchema) MergeLink(v Link) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinksValueSchema) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinksValueSchema) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNcgi returns the union data inside the NcgiRm as a Ncgi
func (t NcgiRm) AsNcgi() (Ncgi, error) {
	var body Ncgi
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNcgi overwrites any union data inside the NcgiRm as the provided Ncgi
func (t *NcgiRm) FromNcgi(v Ncgi) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNcgi performs a merge with any union data inside the NcgiRm, using the provided Ncgi
func (t *NcgiRm) MergeNcgi(v Ncgi) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the NcgiRm as a NullValue
func (t NcgiRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the NcgiRm as the provided NullValue
func (t *NcgiRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the NcgiRm, using the provided NullValue
func (t *NcgiRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NcgiRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NcgiRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNotificationControl returns the union data inside the NotificationControlRm as a NotificationControl
func (t NotificationControlRm) AsNotificationControl() (NotificationControl, error) {
	var body NotificationControl
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotificationControl overwrites any union data inside the NotificationControlRm as the provided NotificationControl
func (t *NotificationControlRm) FromNotificationControl(v NotificationControl) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotificationControl performs a merge with any union data inside the NotificationControlRm, using the provided NotificationControl
func (t *NotificationControlRm) MergeNotificationControl(v NotificationControl) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the NotificationControlRm as a NullValue
func (t NotificationControlRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the NotificationControlRm as the provided NullValue
func (t *NotificationControlRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the NotificationControlRm, using the provided NullValue
func (t *NotificationControlRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NotificationControlRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NotificationControlRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNrLocation returns the union data inside the NrLocationRm as a NrLocation
func (t NrLocationRm) AsNrLocation() (NrLocation, error) {
	var body NrLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNrLocation overwrites any union data inside the NrLocationRm as the provided NrLocation
func (t *NrLocationRm) FromNrLocation(v NrLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNrLocation performs a merge with any union data inside the NrLocationRm, using the provided NrLocation
func (t *NrLocationRm) MergeNrLocation(v NrLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the NrLocationRm as a NullValue
func (t NrLocationRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the NrLocationRm as the provided NullValue
func (t *NrLocationRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the NrLocationRm, using the provided NullValue
func (t *NrLocationRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NrLocationRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NrLocationRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNssaaStatus returns the union data inside the NssaaStatusRm as a NssaaStatus
func (t NssaaStatusRm) AsNssaaStatus() (NssaaStatus, error) {
	var body NssaaStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNssaaStatus overwrites any union data inside the NssaaStatusRm as the provided NssaaStatus
func (t *NssaaStatusRm) FromNssaaStatus(v NssaaStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNssaaStatus performs a merge with any union data inside the NssaaStatusRm, using the provided NssaaStatus
func (t *NssaaStatusRm) MergeNssaaStatus(v NssaaStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the NssaaStatusRm as a NullValue
func (t NssaaStatusRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the NssaaStatusRm as the provided NullValue
func (t *NssaaStatusRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the NssaaStatusRm, using the provided NullValue
func (t *NssaaStatusRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NssaaStatusRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NssaaStatusRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOdbPacketServices0 returns the union data inside the OdbPacketServices as a OdbPacketServices0
func (t OdbPacketServices) AsOdbPacketServices0() (OdbPacketServices0, error) {
	var body OdbPacketServices0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOdbPacketServices0 overwrites any union data inside the OdbPacketServices as the provided OdbPacketServices0
func (t *OdbPacketServices) FromOdbPacketServices0(v OdbPacketServices0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOdbPacketServices0 performs a merge with any union data inside the OdbPacketServices, using the provided OdbPacketServices0
func (t *OdbPacketServices) MergeOdbPacketServices0(v OdbPacketServices0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the OdbPacketServices as a NullValue
func (t OdbPacketServices) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the OdbPacketServices as the provided NullValue
func (t *OdbPacketServices) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the OdbPacketServices, using the provided NullValue
func (t *OdbPacketServices) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t OdbPacketServices) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OdbPacketServices) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPduSessionType returns the union data inside the PduSessionTypeRm as a PduSessionType
func (t PduSessionTypeRm) AsPduSessionType() (PduSessionType, error) {
	var body PduSessionType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPduSessionType overwrites any union data inside the PduSessionTypeRm as the provided PduSessionType
func (t *PduSessionTypeRm) FromPduSessionType(v PduSessionType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePduSessionType performs a merge with any union data inside the PduSessionTypeRm, using the provided PduSessionType
func (t *PduSessionTypeRm) MergePduSessionType(v PduSessionType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the PduSessionTypeRm as a NullValue
func (t PduSessionTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the PduSessionTypeRm as the provided NullValue
func (t *PduSessionTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the PduSessionTypeRm, using the provided NullValue
func (t *PduSessionTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PduSessionTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PduSessionTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlmnId returns the union data inside the PlmnIdRm as a PlmnId
func (t PlmnIdRm) AsPlmnId() (PlmnId, error) {
	var body PlmnId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlmnId overwrites any union data inside the PlmnIdRm as the provided PlmnId
func (t *PlmnIdRm) FromPlmnId(v PlmnId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlmnId performs a merge with any union data inside the PlmnIdRm, using the provided PlmnId
func (t *PlmnIdRm) MergePlmnId(v PlmnId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the PlmnIdRm as a NullValue
func (t PlmnIdRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the PlmnIdRm as the provided NullValue
func (t *PlmnIdRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the PlmnIdRm, using the provided NullValue
func (t *PlmnIdRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlmnIdRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlmnIdRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPreemptionCapability returns the union data inside the PreemptionCapabilityRm as a PreemptionCapability
func (t PreemptionCapabilityRm) AsPreemptionCapability() (PreemptionCapability, error) {
	var body PreemptionCapability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreemptionCapability overwrites any union data inside the PreemptionCapabilityRm as the provided PreemptionCapability
func (t *PreemptionCapabilityRm) FromPreemptionCapability(v PreemptionCapability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreemptionCapability performs a merge with any union data inside the PreemptionCapabilityRm, using the provided PreemptionCapability
func (t *PreemptionCapabilityRm) MergePreemptionCapability(v PreemptionCapability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the PreemptionCapabilityRm as a NullValue
func (t PreemptionCapabilityRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the PreemptionCapabilityRm as the provided NullValue
func (t *PreemptionCapabilityRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the PreemptionCapabilityRm, using the provided NullValue
func (t *PreemptionCapabilityRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreemptionCapabilityRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreemptionCapabilityRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPreemptionVulnerability returns the union data inside the PreemptionVulnerabilityRm as a PreemptionVulnerability
func (t PreemptionVulnerabilityRm) AsPreemptionVulnerability() (PreemptionVulnerability, error) {
	var body PreemptionVulnerability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreemptionVulnerability overwrites any union data inside the PreemptionVulnerabilityRm as the provided PreemptionVulnerability
func (t *PreemptionVulnerabilityRm) FromPreemptionVulnerability(v PreemptionVulnerability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreemptionVulnerability performs a merge with any union data inside the PreemptionVulnerabilityRm, using the provided PreemptionVulnerability
func (t *PreemptionVulnerabilityRm) MergePreemptionVulnerability(v PreemptionVulnerability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the PreemptionVulnerabilityRm as a NullValue
func (t PreemptionVulnerabilityRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the PreemptionVulnerabilityRm as the provided NullValue
func (t *PreemptionVulnerabilityRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the PreemptionVulnerabilityRm, using the provided NullValue
func (t *PreemptionVulnerabilityRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreemptionVulnerabilityRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreemptionVulnerabilityRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsQosResourceType returns the union data inside the QosResourceTypeRm as a QosResourceType
func (t QosResourceTypeRm) AsQosResourceType() (QosResourceType, error) {
	var body QosResourceType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQosResourceType overwrites any union data inside the QosResourceTypeRm as the provided QosResourceType
func (t *QosResourceTypeRm) FromQosResourceType(v QosResourceType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQosResourceType performs a merge with any union data inside the QosResourceTypeRm, using the provided QosResourceType
func (t *QosResourceTypeRm) MergeQosResourceType(v QosResourceType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the QosResourceTypeRm as a NullValue
func (t QosResourceTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the QosResourceTypeRm as the provided NullValue
func (t *QosResourceTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the QosResourceTypeRm, using the provided NullValue
func (t *QosResourceTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t QosResourceTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *QosResourceTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRatType returns the union data inside the RatTypeRm as a RatType
func (t RatTypeRm) AsRatType() (RatType, error) {
	var body RatType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRatType overwrites any union data inside the RatTypeRm as the provided RatType
func (t *RatTypeRm) FromRatType(v RatType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRatType performs a merge with any union data inside the RatTypeRm, using the provided RatType
func (t *RatTypeRm) MergeRatType(v RatType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the RatTypeRm as a NullValue
func (t RatTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the RatTypeRm as the provided NullValue
func (t *RatTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the RatTypeRm, using the provided NullValue
func (t *RatTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RatTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RatTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRefToBinaryData returns the union data inside the RefToBinaryDataRm as a RefToBinaryData
func (t RefToBinaryDataRm) AsRefToBinaryData() (RefToBinaryData, error) {
	var body RefToBinaryData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRefToBinaryData overwrites any union data inside the RefToBinaryDataRm as the provided RefToBinaryData
func (t *RefToBinaryDataRm) FromRefToBinaryData(v RefToBinaryData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRefToBinaryData performs a merge with any union data inside the RefToBinaryDataRm, using the provided RefToBinaryData
func (t *RefToBinaryDataRm) MergeRefToBinaryData(v RefToBinaryData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the RefToBinaryDataRm as a NullValue
func (t RefToBinaryDataRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the RefToBinaryDataRm as the provided NullValue
func (t *RefToBinaryDataRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the RefToBinaryDataRm, using the provided NullValue
func (t *RefToBinaryDataRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RefToBinaryDataRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RefToBinaryDataRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReflectiveQoSAttribute returns the union data inside the ReflectiveQoSAttributeRm as a ReflectiveQoSAttribute
func (t ReflectiveQoSAttributeRm) AsReflectiveQoSAttribute() (ReflectiveQoSAttribute, error) {
	var body ReflectiveQoSAttribute
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReflectiveQoSAttribute overwrites any union data inside the ReflectiveQoSAttributeRm as the provided ReflectiveQoSAttribute
func (t *ReflectiveQoSAttributeRm) FromReflectiveQoSAttribute(v ReflectiveQoSAttribute) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReflectiveQoSAttribute performs a merge with any union data inside the ReflectiveQoSAttributeRm, using the provided ReflectiveQoSAttribute
func (t *ReflectiveQoSAttributeRm) MergeReflectiveQoSAttribute(v ReflectiveQoSAttribute) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the ReflectiveQoSAttributeRm as a NullValue
func (t ReflectiveQoSAttributeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the ReflectiveQoSAttributeRm as the provided NullValue
func (t *ReflectiveQoSAttributeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the ReflectiveQoSAttributeRm, using the provided NullValue
func (t *ReflectiveQoSAttributeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReflectiveQoSAttributeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReflectiveQoSAttributeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRestrictionType returns the union data inside the RestrictionTypeRm as a RestrictionType
func (t RestrictionTypeRm) AsRestrictionType() (RestrictionType, error) {
	var body RestrictionType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRestrictionType overwrites any union data inside the RestrictionTypeRm as the provided RestrictionType
func (t *RestrictionTypeRm) FromRestrictionType(v RestrictionType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRestrictionType performs a merge with any union data inside the RestrictionTypeRm, using the provided RestrictionType
func (t *RestrictionTypeRm) MergeRestrictionType(v RestrictionType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the RestrictionTypeRm as a NullValue
func (t RestrictionTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the RestrictionTypeRm as the provided NullValue
func (t *RestrictionTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the RestrictionTypeRm, using the provided NullValue
func (t *RestrictionTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RestrictionTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RestrictionTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRgWirelineCharacteristics returns the union data inside the RgWirelineCharacteristicsRm as a RgWirelineCharacteristics
func (t RgWirelineCharacteristicsRm) AsRgWirelineCharacteristics() (RgWirelineCharacteristics, error) {
	var body RgWirelineCharacteristics
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRgWirelineCharacteristics overwrites any union data inside the RgWirelineCharacteristicsRm as the provided RgWirelineCharacteristics
func (t *RgWirelineCharacteristicsRm) FromRgWirelineCharacteristics(v RgWirelineCharacteristics) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRgWirelineCharacteristics performs a merge with any union data inside the RgWirelineCharacteristicsRm, using the provided RgWirelineCharacteristics
func (t *RgWirelineCharacteristicsRm) MergeRgWirelineCharacteristics(v RgWirelineCharacteristics) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the RgWirelineCharacteristicsRm as a NullValue
func (t RgWirelineCharacteristicsRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the RgWirelineCharacteristicsRm as the provided NullValue
func (t *RgWirelineCharacteristicsRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the RgWirelineCharacteristicsRm, using the provided NullValue
func (t *RgWirelineCharacteristicsRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RgWirelineCharacteristicsRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RgWirelineCharacteristicsRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScheduledCommunicationTime returns the union data inside the ScheduledCommunicationTimeRm as a ScheduledCommunicationTime
func (t ScheduledCommunicationTimeRm) AsScheduledCommunicationTime() (ScheduledCommunicationTime, error) {
	var body ScheduledCommunicationTime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScheduledCommunicationTime overwrites any union data inside the ScheduledCommunicationTimeRm as the provided ScheduledCommunicationTime
func (t *ScheduledCommunicationTimeRm) FromScheduledCommunicationTime(v ScheduledCommunicationTime) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScheduledCommunicationTime performs a merge with any union data inside the ScheduledCommunicationTimeRm, using the provided ScheduledCommunicationTime
func (t *ScheduledCommunicationTimeRm) MergeScheduledCommunicationTime(v ScheduledCommunicationTime) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the ScheduledCommunicationTimeRm as a NullValue
func (t ScheduledCommunicationTimeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the ScheduledCommunicationTimeRm as the provided NullValue
func (t *ScheduledCommunicationTimeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the ScheduledCommunicationTimeRm, using the provided NullValue
func (t *ScheduledCommunicationTimeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ScheduledCommunicationTimeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScheduledCommunicationTimeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScheduledCommunicationType returns the union data inside the ScheduledCommunicationTypeRm as a ScheduledCommunicationType
func (t ScheduledCommunicationTypeRm) AsScheduledCommunicationType() (ScheduledCommunicationType, error) {
	var body ScheduledCommunicationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScheduledCommunicationType overwrites any union data inside the ScheduledCommunicationTypeRm as the provided ScheduledCommunicationType
func (t *ScheduledCommunicationTypeRm) FromScheduledCommunicationType(v ScheduledCommunicationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScheduledCommunicationType performs a merge with any union data inside the ScheduledCommunicationTypeRm, using the provided ScheduledCommunicationType
func (t *ScheduledCommunicationTypeRm) MergeScheduledCommunicationType(v ScheduledCommunicationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the ScheduledCommunicationTypeRm as a NullValue
func (t ScheduledCommunicationTypeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the ScheduledCommunicationTypeRm as the provided NullValue
func (t *ScheduledCommunicationTypeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the ScheduledCommunicationTypeRm, using the provided NullValue
func (t *ScheduledCommunicationTypeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ScheduledCommunicationTypeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScheduledCommunicationTypeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSscMode returns the union data inside the SscModeRm as a SscMode
func (t SscModeRm) AsSscMode() (SscMode, error) {
	var body SscMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSscMode overwrites any union data inside the SscModeRm as the provided SscMode
func (t *SscModeRm) FromSscMode(v SscMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSscMode performs a merge with any union data inside the SscModeRm, using the provided SscMode
func (t *SscModeRm) MergeSscMode(v SscMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the SscModeRm as a NullValue
func (t SscModeRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the SscModeRm as the provided NullValue
func (t *SscModeRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the SscModeRm, using the provided NullValue
func (t *SscModeRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SscModeRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SscModeRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStationaryIndication returns the union data inside the StationaryIndicationRm as a StationaryIndication
func (t StationaryIndicationRm) AsStationaryIndication() (StationaryIndication, error) {
	var body StationaryIndication
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStationaryIndication overwrites any union data inside the StationaryIndicationRm as the provided StationaryIndication
func (t *StationaryIndicationRm) FromStationaryIndication(v StationaryIndication) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStationaryIndication performs a merge with any union data inside the StationaryIndicationRm, using the provided StationaryIndication
func (t *StationaryIndicationRm) MergeStationaryIndication(v StationaryIndication) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the StationaryIndicationRm as a NullValue
func (t StationaryIndicationRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the StationaryIndicationRm as the provided NullValue
func (t *StationaryIndicationRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the StationaryIndicationRm, using the provided NullValue
func (t *StationaryIndicationRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StationaryIndicationRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StationaryIndicationRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTai returns the union data inside the TaiRm as a Tai
func (t TaiRm) AsTai() (Tai, error) {
	var body Tai
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTai overwrites any union data inside the TaiRm as the provided Tai
func (t *TaiRm) FromTai(v Tai) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTai performs a merge with any union data inside the TaiRm, using the provided Tai
func (t *TaiRm) MergeTai(v Tai) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the TaiRm as a NullValue
func (t TaiRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the TaiRm as the provided NullValue
func (t *TaiRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the TaiRm, using the provided NullValue
func (t *TaiRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TaiRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TaiRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTnapId returns the union data inside the TnapIdRm as a TnapId
func (t TnapIdRm) AsTnapId() (TnapId, error) {
	var body TnapId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTnapId overwrites any union data inside the TnapIdRm as the provided TnapId
func (t *TnapIdRm) FromTnapId(v TnapId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTnapId performs a merge with any union data inside the TnapIdRm, using the provided TnapId
func (t *TnapIdRm) MergeTnapId(v TnapId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the TnapIdRm as a NullValue
func (t TnapIdRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the TnapIdRm as the provided NullValue
func (t *TnapIdRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the TnapIdRm, using the provided NullValue
func (t *TnapIdRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TnapIdRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TnapIdRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTraceDepth returns the union data inside the TraceDepthRm as a TraceDepth
func (t TraceDepthRm) AsTraceDepth() (TraceDepth, error) {
	var body TraceDepth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTraceDepth overwrites any union data inside the TraceDepthRm as the provided TraceDepth
func (t *TraceDepthRm) FromTraceDepth(v TraceDepth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTraceDepth performs a merge with any union data inside the TraceDepthRm, using the provided TraceDepth
func (t *TraceDepthRm) MergeTraceDepth(v TraceDepth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the TraceDepthRm as a NullValue
func (t TraceDepthRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the TraceDepthRm as the provided NullValue
func (t *TraceDepthRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the TraceDepthRm, using the provided NullValue
func (t *TraceDepthRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TraceDepthRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TraceDepthRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrafficProfile returns the union data inside the TrafficProfileRm as a TrafficProfile
func (t TrafficProfileRm) AsTrafficProfile() (TrafficProfile, error) {
	var body TrafficProfile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrafficProfile overwrites any union data inside the TrafficProfileRm as the provided TrafficProfile
func (t *TrafficProfileRm) FromTrafficProfile(v TrafficProfile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrafficProfile performs a merge with any union data inside the TrafficProfileRm, using the provided TrafficProfile
func (t *TrafficProfileRm) MergeTrafficProfile(v TrafficProfile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the TrafficProfileRm as a NullValue
func (t TrafficProfileRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the TrafficProfileRm as the provided NullValue
func (t *TrafficProfileRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the TrafficProfileRm, using the provided NullValue
func (t *TrafficProfileRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrafficProfileRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrafficProfileRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTwapId returns the union data inside the TwapIdRm as a TwapId
func (t TwapIdRm) AsTwapId() (TwapId, error) {
	var body TwapId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTwapId overwrites any union data inside the TwapIdRm as the provided TwapId
func (t *TwapIdRm) FromTwapId(v TwapId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTwapId performs a merge with any union data inside the TwapIdRm, using the provided TwapId
func (t *TwapIdRm) MergeTwapId(v TwapId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the TwapIdRm as a NullValue
func (t TwapIdRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the TwapIdRm as the provided NullValue
func (t *TwapIdRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the TwapIdRm, using the provided NullValue
func (t *TwapIdRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TwapIdRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TwapIdRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpConfidentiality returns the union data inside the UpConfidentialityRm as a UpConfidentiality
func (t UpConfidentialityRm) AsUpConfidentiality() (UpConfidentiality, error) {
	var body UpConfidentiality
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpConfidentiality overwrites any union data inside the UpConfidentialityRm as the provided UpConfidentiality
func (t *UpConfidentialityRm) FromUpConfidentiality(v UpConfidentiality) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpConfidentiality performs a merge with any union data inside the UpConfidentialityRm, using the provided UpConfidentiality
func (t *UpConfidentialityRm) MergeUpConfidentiality(v UpConfidentiality) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the UpConfidentialityRm as a NullValue
func (t UpConfidentialityRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the UpConfidentialityRm as the provided NullValue
func (t *UpConfidentialityRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the UpConfidentialityRm, using the provided NullValue
func (t *UpConfidentialityRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpConfidentialityRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpConfidentialityRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpIntegrity returns the union data inside the UpIntegrityRm as a UpIntegrity
func (t UpIntegrityRm) AsUpIntegrity() (UpIntegrity, error) {
	var body UpIntegrity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpIntegrity overwrites any union data inside the UpIntegrityRm as the provided UpIntegrity
func (t *UpIntegrityRm) FromUpIntegrity(v UpIntegrity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpIntegrity performs a merge with any union data inside the UpIntegrityRm, using the provided UpIntegrity
func (t *UpIntegrityRm) MergeUpIntegrity(v UpIntegrity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the UpIntegrityRm as a NullValue
func (t UpIntegrityRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the UpIntegrityRm as the provided NullValue
func (t *UpIntegrityRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the UpIntegrityRm, using the provided NullValue
func (t *UpIntegrityRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpIntegrityRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpIntegrityRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpSecurity returns the union data inside the UpSecurityRm as a UpSecurity
func (t UpSecurityRm) AsUpSecurity() (UpSecurity, error) {
	var body UpSecurity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpSecurity overwrites any union data inside the UpSecurityRm as the provided UpSecurity
func (t *UpSecurityRm) FromUpSecurity(v UpSecurity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpSecurity performs a merge with any union data inside the UpSecurityRm, using the provided UpSecurity
func (t *UpSecurityRm) MergeUpSecurity(v UpSecurity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the UpSecurityRm as a NullValue
func (t UpSecurityRm) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the UpSecurityRm as the provided NullValue
func (t *UpSecurityRm) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the UpSecurityRm, using the provided NullValue
func (t *UpSecurityRm) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpSecurityRm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpSecurityRm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

type N307ResponseHeaders struct {
	N3gppSbiTargetNfId string
	Location           string
}
type N307JSONResponse struct {
	Body RedirectResponse

	Headers N307ResponseHeaders
}

type N308ResponseHeaders struct {
	N3gppSbiTargetNfId string
	Location           string
}
type N308JSONResponse struct {
	Body RedirectResponse

	Headers N308ResponseHeaders
}

type N400ApplicationProblemPlusJSONResponse ProblemDetails

type N401ApplicationProblemPlusJSONResponse ProblemDetails

type N403ApplicationProblemPlusJSONResponse ProblemDetails

type N404ApplicationProblemPlusJSONResponse ProblemDetails

type N405Response struct {
}

type N406Response struct {
}

type N408ApplicationProblemPlusJSONResponse ProblemDetails

type N409ApplicationProblemPlusJSONResponse ProblemDetails

type N410ApplicationProblemPlusJSONResponse ProblemDetails

type N411ApplicationProblemPlusJSONResponse ProblemDetails

type N412ApplicationProblemPlusJSONResponse ProblemDetails

type N413ApplicationProblemPlusJSONResponse ProblemDetails

type N414ApplicationProblemPlusJSONResponse ProblemDetails

type N415ApplicationProblemPlusJSONResponse ProblemDetails

type N429ApplicationProblemPlusJSONResponse ProblemDetails

type N500ApplicationProblemPlusJSONResponse ProblemDetails

type N501ApplicationProblemPlusJSONResponse ProblemDetails

type N503ApplicationProblemPlusJSONResponse ProblemDetails

type N504ApplicationProblemPlusJSONResponse ProblemDetails

type DefaultApplicationProblemPlusJSONResponse ProblemDetails
