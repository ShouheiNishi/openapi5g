// Package influence provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package influence

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/northbound/commondata"
	externalRef2 "github.com/ShouheiNishi/openapi5g/pcf/authorization"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for AfResultStatus.
const (
	OTHER               AfResultStatus = "OTHER"
	RELOCNOALLOWED      AfResultStatus = "RELOC_NO_ALLOWED"
	SUCCESS             AfResultStatus = "SUCCESS"
	TEMPORARYCONGESTION AfResultStatus = "TEMPORARY_CONGESTION"
)

// Defines values for SubscribedEvent.
const (
	UPPATHCHANGE SubscribedEvent = "UP_PATH_CHANGE"
)

// AfAckInfo defines model for AfAckInfo.
type AfAckInfo struct {
	AckResult            AfResultInfo           `json:"ackResult"`
	AfTransId            *string                `json:"afTransId,omitempty"`
	Gpsi                 externalRef0.Gpsi      `json:"gpsi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfResultInfo defines model for AfResultInfo.
type AfResultInfo struct {
	// AfStatus Possible values are - SUCCESS: The application layer is ready or the relocation is completed. - TEMPORARY_CONGESTION: The application relocation fails due to temporary congestion. - RELOC_NO_ALLOWED: The application relocation fails because application relocation is not allowed. - OTHER: The application relocation fails due to other reason.
	AfStatus             AfResultStatus                `json:"afStatus"`
	TrafficRoute         *externalRef0.RouteToLocation `json:"trafficRoute"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// AfResultStatus Possible values are - SUCCESS: The application layer is ready or the relocation is completed. - TEMPORARY_CONGESTION: The application relocation fails due to temporary congestion. - RELOC_NO_ALLOWED: The application relocation fails because application relocation is not allowed. - OTHER: The application relocation fails due to other reason.
type AfResultStatus string

// EventNotification defines model for EventNotification.
type EventNotification struct {
	// AfAckUri string formatted according to IETF RFC 3986 identifying a referenced resource.
	AfAckUri *externalRef1.Link `json:"afAckUri,omitempty"`

	// AfTransId Identifies an NEF Northbound interface transaction, generated by the AF.
	AfTransId *string `json:"afTransId,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType        externalRef0.DnaiChangeType   `json:"dnaiChgType"`
	Gpsi               externalRef0.Gpsi             `json:"gpsi,omitempty"`
	SourceDnai         *externalRef0.Dnai            `json:"sourceDnai,omitempty"`
	SourceTrafficRoute *externalRef0.RouteToLocation `json:"sourceTrafficRoute"`

	// SrcUeIpv4Addr string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166.
	SrcUeIpv4Addr   *externalRef1.Ipv4Addr   `json:"srcUeIpv4Addr,omitempty"`
	SrcUeIpv6Prefix *externalRef0.Ipv6Prefix `json:"srcUeIpv6Prefix,omitempty"`

	// SubscribedEvent Possible values are - UP_PATH_CHANGE: The AF requests to be notified when the UP path changes for the PDU session.
	SubscribedEvent    SubscribedEvent               `json:"subscribedEvent"`
	TargetDnai         *externalRef0.Dnai            `json:"targetDnai,omitempty"`
	TargetTrafficRoute *externalRef0.RouteToLocation `json:"targetTrafficRoute"`

	// TgtUeIpv4Addr string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166.
	TgtUeIpv4Addr        *externalRef1.Ipv4Addr   `json:"tgtUeIpv4Addr,omitempty"`
	TgtUeIpv6Prefix      *externalRef0.Ipv6Prefix `json:"tgtUeIpv6Prefix,omitempty"`
	UeMac                externalRef0.MacAddr48   `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// SubscribedEvent Possible values are - UP_PATH_CHANGE: The AF requests to be notified when the UP path changes for the PDU session.
type SubscribedEvent string

// TrafficInfluSub defines model for TrafficInfluSub.
type TrafficInfluSub struct {
	AddrPreserInd *bool `json:"addrPreserInd,omitempty"`
	AfAckInd      *bool `json:"afAckInd,omitempty"`

	// AfAppId Identifies an application.
	AfAppId *string `json:"afAppId,omitempty"`

	// AfServiceId Identifies a service on behalf of which the AF is issuing the request.
	AfServiceId *string `json:"afServiceId,omitempty"`

	// AfTransId Identifies an NEF Northbound interface transaction, generated by the AF.
	AfTransId *string `json:"afTransId,omitempty"`

	// AnyUeInd Identifies whether the AF request applies to any UE. This attribute shall set to "true" if applicable for any UE, otherwise, set to "false".
	AnyUeInd *bool `json:"anyUeInd,omitempty"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool `json:"appReloInd,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType *externalRef0.DnaiChangeType `json:"dnaiChgType,omitempty"`
	Dnn         *externalRef0.Dnn            `json:"dnn,omitempty"`

	// EthTrafficFilters Identifies Ethernet packet filters.
	EthTrafficFilters []externalRef2.EthFlowDescription `json:"ethTrafficFilters,omitempty"`

	// ExternalGroupId string containing a local identifier followed by "@" and a domain identifier. Both the local identifier and the domain identifier shall be encoded as strings that do not contain any "@" characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more information.
	ExternalGroupId *externalRef1.ExternalGroupId `json:"externalGroupId,omitempty"`
	Gpsi            externalRef0.Gpsi             `json:"gpsi,omitempty"`
	IpDomain        *string                       `json:"ipDomain,omitempty"`

	// Ipv4Addr string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166.
	Ipv4Addr *externalRef1.Ipv4Addr `json:"ipv4Addr,omitempty"`

	// Ipv6Addr string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
	Ipv6Addr *externalRef1.Ipv6Addr `json:"ipv6Addr,omitempty"`
	MacAddr  externalRef0.MacAddr48 `json:"macAddr,omitempty"`

	// NotificationDestination string formatted according to IETF RFC 3986 identifying a referenced resource.
	NotificationDestination *externalRef1.Link `json:"notificationDestination,omitempty"`

	// RequestTestNotification Set to true by the SCS/AS to request the NEF to send a test notification as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`

	// Self string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self   *externalRef1.Link   `json:"self,omitempty"`
	Snssai *externalRef0.Snssai `json:"snssai,omitempty"`

	// SubscribedEvents Identifies the requirement to be notified of the event(s).
	SubscribedEvents []SubscribedEvent                `json:"subscribedEvents,omitempty"`
	SuppFeat         *externalRef0.SupportedFeatures  `json:"suppFeat,omitempty"`
	TempValidities   *[]externalRef2.TemporalValidity `json:"tempValidities,omitempty"`
	TfcCorrInd       *bool                            `json:"tfcCorrInd,omitempty"`

	// TrafficFilters Identifies IP packet filters.
	TrafficFilters []externalRef1.FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []externalRef0.RouteToLocation `json:"trafficRoutes,omitempty"`

	// ValidGeoZoneIds Identifies a geographic zone that the AF request applies only to the traffic of UE(s) located in this specific zone.
	ValidGeoZoneIds      []string                         `json:"validGeoZoneIds,omitempty"`
	WebsockNotifConfig   *externalRef1.WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// TrafficInfluSubPatch defines model for TrafficInfluSubPatch.
type TrafficInfluSubPatch struct {
	AddrPreserInd *bool `json:"addrPreserInd"`
	AfAckInd      *bool `json:"afAckInd"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool `json:"appReloInd"`

	// EthTrafficFilters Identifies Ethernet packet filters.
	EthTrafficFilters []externalRef2.EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	TempValidities    *[]externalRef2.TemporalValidity  `json:"tempValidities"`
	TfcCorrInd        *bool                             `json:"tfcCorrInd"`

	// TrafficFilters Identifies IP packet filters.
	TrafficFilters []externalRef1.FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []externalRef0.RouteToLocation `json:"trafficRoutes,omitempty"`

	// ValidGeoZoneIds Identifies a geographic zone that the AF request applies only to the traffic of UE(s) located in this specific zone.
	ValidGeoZoneIds      *[]string              `json:"validGeoZoneIds"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostAfIdSubscriptionsJSONRequestBody defines body for PostAfIdSubscriptions for application/json ContentType.
type PostAfIdSubscriptionsJSONRequestBody = TrafficInfluSub

// PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody defines body for PatchAfIdSubscriptionsSubscriptionId for application/merge-patch+json ContentType.
type PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody = TrafficInfluSubPatch

// PutAfIdSubscriptionsSubscriptionIdJSONRequestBody defines body for PutAfIdSubscriptionsSubscriptionId for application/json ContentType.
type PutAfIdSubscriptionsSubscriptionIdJSONRequestBody = TrafficInfluSub

// Getter for additional properties for AfAckInfo. Returns the specified
// element and whether it was found
func (a AfAckInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfAckInfo
func (a *AfAckInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfAckInfo to handle AdditionalProperties
func (a *AfAckInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ackResult"]; found {
		err = json.Unmarshal(raw, &a.AckResult)
		if err != nil {
			return fmt.Errorf("error reading 'ackResult': %w", err)
		}
		delete(object, "ackResult")
	}

	if raw, found := object["afTransId"]; found {
		err = json.Unmarshal(raw, &a.AfTransId)
		if err != nil {
			return fmt.Errorf("error reading 'afTransId': %w", err)
		}
		delete(object, "afTransId")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfAckInfo to handle AdditionalProperties
func (a AfAckInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ackResult"], err = json.Marshal(a.AckResult)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ackResult': %w", err)
	}

	if a.AfTransId != nil {
		object["afTransId"], err = json.Marshal(a.AfTransId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afTransId': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfResultInfo. Returns the specified
// element and whether it was found
func (a AfResultInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfResultInfo
func (a *AfResultInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfResultInfo to handle AdditionalProperties
func (a *AfResultInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afStatus"]; found {
		err = json.Unmarshal(raw, &a.AfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'afStatus': %w", err)
		}
		delete(object, "afStatus")
	}

	if raw, found := object["trafficRoute"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoute)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoute': %w", err)
		}
		delete(object, "trafficRoute")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfResultInfo to handle AdditionalProperties
func (a AfResultInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afStatus"], err = json.Marshal(a.AfStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afStatus': %w", err)
	}

	object["trafficRoute"], err = json.Marshal(a.TrafficRoute)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trafficRoute': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventNotification. Returns the specified
// element and whether it was found
func (a EventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventNotification
func (a *EventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventNotification to handle AdditionalProperties
func (a *EventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAckUri"]; found {
		err = json.Unmarshal(raw, &a.AfAckUri)
		if err != nil {
			return fmt.Errorf("error reading 'afAckUri': %w", err)
		}
		delete(object, "afAckUri")
	}

	if raw, found := object["afTransId"]; found {
		err = json.Unmarshal(raw, &a.AfTransId)
		if err != nil {
			return fmt.Errorf("error reading 'afTransId': %w", err)
		}
		delete(object, "afTransId")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["sourceDnai"]; found {
		err = json.Unmarshal(raw, &a.SourceDnai)
		if err != nil {
			return fmt.Errorf("error reading 'sourceDnai': %w", err)
		}
		delete(object, "sourceDnai")
	}

	if raw, found := object["sourceTrafficRoute"]; found {
		err = json.Unmarshal(raw, &a.SourceTrafficRoute)
		if err != nil {
			return fmt.Errorf("error reading 'sourceTrafficRoute': %w", err)
		}
		delete(object, "sourceTrafficRoute")
	}

	if raw, found := object["srcUeIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.SrcUeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'srcUeIpv4Addr': %w", err)
		}
		delete(object, "srcUeIpv4Addr")
	}

	if raw, found := object["srcUeIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.SrcUeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'srcUeIpv6Prefix': %w", err)
		}
		delete(object, "srcUeIpv6Prefix")
	}

	if raw, found := object["subscribedEvent"]; found {
		err = json.Unmarshal(raw, &a.SubscribedEvent)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedEvent': %w", err)
		}
		delete(object, "subscribedEvent")
	}

	if raw, found := object["targetDnai"]; found {
		err = json.Unmarshal(raw, &a.TargetDnai)
		if err != nil {
			return fmt.Errorf("error reading 'targetDnai': %w", err)
		}
		delete(object, "targetDnai")
	}

	if raw, found := object["targetTrafficRoute"]; found {
		err = json.Unmarshal(raw, &a.TargetTrafficRoute)
		if err != nil {
			return fmt.Errorf("error reading 'targetTrafficRoute': %w", err)
		}
		delete(object, "targetTrafficRoute")
	}

	if raw, found := object["tgtUeIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.TgtUeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'tgtUeIpv4Addr': %w", err)
		}
		delete(object, "tgtUeIpv4Addr")
	}

	if raw, found := object["tgtUeIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.TgtUeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'tgtUeIpv6Prefix': %w", err)
		}
		delete(object, "tgtUeIpv6Prefix")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventNotification to handle AdditionalProperties
func (a EventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAckUri != nil {
		object["afAckUri"], err = json.Marshal(a.AfAckUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckUri': %w", err)
		}
	}

	if a.AfTransId != nil {
		object["afTransId"], err = json.Marshal(a.AfTransId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afTransId': %w", err)
		}
	}

	object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.SourceDnai != nil {
		object["sourceDnai"], err = json.Marshal(a.SourceDnai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceDnai': %w", err)
		}
	}

	object["sourceTrafficRoute"], err = json.Marshal(a.SourceTrafficRoute)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sourceTrafficRoute': %w", err)
	}

	if a.SrcUeIpv4Addr != nil {
		object["srcUeIpv4Addr"], err = json.Marshal(a.SrcUeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcUeIpv4Addr': %w", err)
		}
	}

	if a.SrcUeIpv6Prefix != nil {
		object["srcUeIpv6Prefix"], err = json.Marshal(a.SrcUeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcUeIpv6Prefix': %w", err)
		}
	}

	object["subscribedEvent"], err = json.Marshal(a.SubscribedEvent)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscribedEvent': %w", err)
	}

	if a.TargetDnai != nil {
		object["targetDnai"], err = json.Marshal(a.TargetDnai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetDnai': %w", err)
		}
	}

	object["targetTrafficRoute"], err = json.Marshal(a.TargetTrafficRoute)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'targetTrafficRoute': %w", err)
	}

	if a.TgtUeIpv4Addr != nil {
		object["tgtUeIpv4Addr"], err = json.Marshal(a.TgtUeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tgtUeIpv4Addr': %w", err)
		}
	}

	if a.TgtUeIpv6Prefix != nil {
		object["tgtUeIpv6Prefix"], err = json.Marshal(a.TgtUeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tgtUeIpv6Prefix': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluSub. Returns the specified
// element and whether it was found
func (a TrafficInfluSub) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluSub
func (a *TrafficInfluSub) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluSub to handle AdditionalProperties
func (a *TrafficInfluSub) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afServiceId"]; found {
		err = json.Unmarshal(raw, &a.AfServiceId)
		if err != nil {
			return fmt.Errorf("error reading 'afServiceId': %w", err)
		}
		delete(object, "afServiceId")
	}

	if raw, found := object["afTransId"]; found {
		err = json.Unmarshal(raw, &a.AfTransId)
		if err != nil {
			return fmt.Errorf("error reading 'afTransId': %w", err)
		}
		delete(object, "afTransId")
	}

	if raw, found := object["anyUeInd"]; found {
		err = json.Unmarshal(raw, &a.AnyUeInd)
		if err != nil {
			return fmt.Errorf("error reading 'anyUeInd': %w", err)
		}
		delete(object, "anyUeInd")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["externalGroupId"]; found {
		err = json.Unmarshal(raw, &a.ExternalGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'externalGroupId': %w", err)
		}
		delete(object, "externalGroupId")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["macAddr"]; found {
		err = json.Unmarshal(raw, &a.MacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'macAddr': %w", err)
		}
		delete(object, "macAddr")
	}

	if raw, found := object["notificationDestination"]; found {
		err = json.Unmarshal(raw, &a.NotificationDestination)
		if err != nil {
			return fmt.Errorf("error reading 'notificationDestination': %w", err)
		}
		delete(object, "notificationDestination")
	}

	if raw, found := object["requestTestNotification"]; found {
		err = json.Unmarshal(raw, &a.RequestTestNotification)
		if err != nil {
			return fmt.Errorf("error reading 'requestTestNotification': %w", err)
		}
		delete(object, "requestTestNotification")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["subscribedEvents"]; found {
		err = json.Unmarshal(raw, &a.SubscribedEvents)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedEvents': %w", err)
		}
		delete(object, "subscribedEvents")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["tfcCorrInd"]; found {
		err = json.Unmarshal(raw, &a.TfcCorrInd)
		if err != nil {
			return fmt.Errorf("error reading 'tfcCorrInd': %w", err)
		}
		delete(object, "tfcCorrInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["validGeoZoneIds"]; found {
		err = json.Unmarshal(raw, &a.ValidGeoZoneIds)
		if err != nil {
			return fmt.Errorf("error reading 'validGeoZoneIds': %w", err)
		}
		delete(object, "validGeoZoneIds")
	}

	if raw, found := object["websockNotifConfig"]; found {
		err = json.Unmarshal(raw, &a.WebsockNotifConfig)
		if err != nil {
			return fmt.Errorf("error reading 'websockNotifConfig': %w", err)
		}
		delete(object, "websockNotifConfig")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluSub to handle AdditionalProperties
func (a TrafficInfluSub) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AfAckInd != nil {
		object["afAckInd"], err = json.Marshal(a.AfAckInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
		}
	}

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AfServiceId != nil {
		object["afServiceId"], err = json.Marshal(a.AfServiceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afServiceId': %w", err)
		}
	}

	if a.AfTransId != nil {
		object["afTransId"], err = json.Marshal(a.AfTransId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afTransId': %w", err)
		}
	}

	if a.AnyUeInd != nil {
		object["anyUeInd"], err = json.Marshal(a.AnyUeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUeInd': %w", err)
		}
	}

	if a.AppReloInd != nil {
		object["appReloInd"], err = json.Marshal(a.AppReloInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
		}
	}

	if a.DnaiChgType != nil {
		object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	if a.ExternalGroupId != nil {
		object["externalGroupId"], err = json.Marshal(a.ExternalGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalGroupId': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if a.Ipv4Addr != nil {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if len(a.MacAddr) != 0 {
		object["macAddr"], err = json.Marshal(a.MacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'macAddr': %w", err)
		}
	}

	if a.NotificationDestination != nil {
		object["notificationDestination"], err = json.Marshal(a.NotificationDestination)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notificationDestination': %w", err)
		}
	}

	if a.RequestTestNotification != nil {
		object["requestTestNotification"], err = json.Marshal(a.RequestTestNotification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestTestNotification': %w", err)
		}
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.SubscribedEvents) != 0 {
		object["subscribedEvents"], err = json.Marshal(a.SubscribedEvents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedEvents': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TempValidities != nil {
		object["tempValidities"], err = json.Marshal(a.TempValidities)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
		}
	}

	if a.TfcCorrInd != nil {
		object["tfcCorrInd"], err = json.Marshal(a.TfcCorrInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tfcCorrInd': %w", err)
		}
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	if len(a.ValidGeoZoneIds) != 0 {
		object["validGeoZoneIds"], err = json.Marshal(a.ValidGeoZoneIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validGeoZoneIds': %w", err)
		}
	}

	if a.WebsockNotifConfig != nil {
		object["websockNotifConfig"], err = json.Marshal(a.WebsockNotifConfig)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'websockNotifConfig': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluSubPatch. Returns the specified
// element and whether it was found
func (a TrafficInfluSubPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluSubPatch
func (a *TrafficInfluSubPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluSubPatch to handle AdditionalProperties
func (a *TrafficInfluSubPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["tfcCorrInd"]; found {
		err = json.Unmarshal(raw, &a.TfcCorrInd)
		if err != nil {
			return fmt.Errorf("error reading 'tfcCorrInd': %w", err)
		}
		delete(object, "tfcCorrInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["validGeoZoneIds"]; found {
		err = json.Unmarshal(raw, &a.ValidGeoZoneIds)
		if err != nil {
			return fmt.Errorf("error reading 'validGeoZoneIds': %w", err)
		}
		delete(object, "validGeoZoneIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluSubPatch to handle AdditionalProperties
func (a TrafficInfluSubPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
	}

	object["afAckInd"], err = json.Marshal(a.AfAckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
	}

	object["appReloInd"], err = json.Marshal(a.AppReloInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	object["tempValidities"], err = json.Marshal(a.TempValidities)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
	}

	object["tfcCorrInd"], err = json.Marshal(a.TfcCorrInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tfcCorrInd': %w", err)
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	object["validGeoZoneIds"], err = json.Marshal(a.ValidGeoZoneIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'validGeoZoneIds': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAfIdSubscriptions request
	GetAfIdSubscriptions(ctx context.Context, afId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAfIdSubscriptionsWithBody request with any body
	PostAfIdSubscriptionsWithBody(ctx context.Context, afId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAfIdSubscriptions(ctx context.Context, afId string, body PostAfIdSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAfIdSubscriptionsSubscriptionId request
	DeleteAfIdSubscriptionsSubscriptionId(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAfIdSubscriptionsSubscriptionId request
	GetAfIdSubscriptionsSubscriptionId(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAfIdSubscriptionsSubscriptionIdWithBody request with any body
	PatchAfIdSubscriptionsSubscriptionIdWithBody(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAfIdSubscriptionsSubscriptionIdWithApplicationMergePatchPlusJSONBody(ctx context.Context, afId string, subscriptionId string, body PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAfIdSubscriptionsSubscriptionIdWithBody request with any body
	PutAfIdSubscriptionsSubscriptionIdWithBody(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAfIdSubscriptionsSubscriptionId(ctx context.Context, afId string, subscriptionId string, body PutAfIdSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAfIdSubscriptions(ctx context.Context, afId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAfIdSubscriptionsRequest(c.Server, afId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAfIdSubscriptionsWithBody(ctx context.Context, afId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAfIdSubscriptionsRequestWithBody(c.Server, afId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAfIdSubscriptions(ctx context.Context, afId string, body PostAfIdSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAfIdSubscriptionsRequest(c.Server, afId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAfIdSubscriptionsSubscriptionId(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAfIdSubscriptionsSubscriptionIdRequest(c.Server, afId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAfIdSubscriptionsSubscriptionId(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAfIdSubscriptionsSubscriptionIdRequest(c.Server, afId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAfIdSubscriptionsSubscriptionIdWithBody(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAfIdSubscriptionsSubscriptionIdRequestWithBody(c.Server, afId, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAfIdSubscriptionsSubscriptionIdWithApplicationMergePatchPlusJSONBody(ctx context.Context, afId string, subscriptionId string, body PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAfIdSubscriptionsSubscriptionIdRequestWithApplicationMergePatchPlusJSONBody(c.Server, afId, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAfIdSubscriptionsSubscriptionIdWithBody(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAfIdSubscriptionsSubscriptionIdRequestWithBody(c.Server, afId, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAfIdSubscriptionsSubscriptionId(ctx context.Context, afId string, subscriptionId string, body PutAfIdSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAfIdSubscriptionsSubscriptionIdRequest(c.Server, afId, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAfIdSubscriptionsRequest generates requests for GetAfIdSubscriptions
func NewGetAfIdSubscriptionsRequest(server string, afId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "afId", runtime.ParamLocationPath, afId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAfIdSubscriptionsRequest calls the generic PostAfIdSubscriptions builder with application/json body
func NewPostAfIdSubscriptionsRequest(server string, afId string, body PostAfIdSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAfIdSubscriptionsRequestWithBody(server, afId, "application/json", bodyReader)
}

// NewPostAfIdSubscriptionsRequestWithBody generates requests for PostAfIdSubscriptions with any type of body
func NewPostAfIdSubscriptionsRequestWithBody(server string, afId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "afId", runtime.ParamLocationPath, afId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAfIdSubscriptionsSubscriptionIdRequest generates requests for DeleteAfIdSubscriptionsSubscriptionId
func NewDeleteAfIdSubscriptionsSubscriptionIdRequest(server string, afId string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "afId", runtime.ParamLocationPath, afId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAfIdSubscriptionsSubscriptionIdRequest generates requests for GetAfIdSubscriptionsSubscriptionId
func NewGetAfIdSubscriptionsSubscriptionIdRequest(server string, afId string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "afId", runtime.ParamLocationPath, afId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAfIdSubscriptionsSubscriptionIdRequestWithApplicationMergePatchPlusJSONBody calls the generic PatchAfIdSubscriptionsSubscriptionId builder with application/merge-patch+json body
func NewPatchAfIdSubscriptionsSubscriptionIdRequestWithApplicationMergePatchPlusJSONBody(server string, afId string, subscriptionId string, body PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAfIdSubscriptionsSubscriptionIdRequestWithBody(server, afId, subscriptionId, "application/merge-patch+json", bodyReader)
}

// NewPatchAfIdSubscriptionsSubscriptionIdRequestWithBody generates requests for PatchAfIdSubscriptionsSubscriptionId with any type of body
func NewPatchAfIdSubscriptionsSubscriptionIdRequestWithBody(server string, afId string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "afId", runtime.ParamLocationPath, afId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAfIdSubscriptionsSubscriptionIdRequest calls the generic PutAfIdSubscriptionsSubscriptionId builder with application/json body
func NewPutAfIdSubscriptionsSubscriptionIdRequest(server string, afId string, subscriptionId string, body PutAfIdSubscriptionsSubscriptionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAfIdSubscriptionsSubscriptionIdRequestWithBody(server, afId, subscriptionId, "application/json", bodyReader)
}

// NewPutAfIdSubscriptionsSubscriptionIdRequestWithBody generates requests for PutAfIdSubscriptionsSubscriptionId with any type of body
func NewPutAfIdSubscriptionsSubscriptionIdRequestWithBody(server string, afId string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "afId", runtime.ParamLocationPath, afId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAfIdSubscriptionsWithResponse request
	GetAfIdSubscriptionsWithResponse(ctx context.Context, afId string, reqEditors ...RequestEditorFn) (*GetAfIdSubscriptionsResponse, error)

	// PostAfIdSubscriptionsWithBodyWithResponse request with any body
	PostAfIdSubscriptionsWithBodyWithResponse(ctx context.Context, afId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAfIdSubscriptionsResponse, error)

	PostAfIdSubscriptionsWithResponse(ctx context.Context, afId string, body PostAfIdSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAfIdSubscriptionsResponse, error)

	// DeleteAfIdSubscriptionsSubscriptionIdWithResponse request
	DeleteAfIdSubscriptionsSubscriptionIdWithResponse(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteAfIdSubscriptionsSubscriptionIdResponse, error)

	// GetAfIdSubscriptionsSubscriptionIdWithResponse request
	GetAfIdSubscriptionsSubscriptionIdWithResponse(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*GetAfIdSubscriptionsSubscriptionIdResponse, error)

	// PatchAfIdSubscriptionsSubscriptionIdWithBodyWithResponse request with any body
	PatchAfIdSubscriptionsSubscriptionIdWithBodyWithResponse(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAfIdSubscriptionsSubscriptionIdResponse, error)

	PatchAfIdSubscriptionsSubscriptionIdWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, afId string, subscriptionId string, body PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAfIdSubscriptionsSubscriptionIdResponse, error)

	// PutAfIdSubscriptionsSubscriptionIdWithBodyWithResponse request with any body
	PutAfIdSubscriptionsSubscriptionIdWithBodyWithResponse(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAfIdSubscriptionsSubscriptionIdResponse, error)

	PutAfIdSubscriptionsSubscriptionIdWithResponse(ctx context.Context, afId string, subscriptionId string, body PutAfIdSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAfIdSubscriptionsSubscriptionIdResponse, error)
}

type GetAfIdSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]TrafficInfluSub
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON406     *externalRef1.N406
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAfIdSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAfIdSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAfIdSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *TrafficInfluSub
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostAfIdSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAfIdSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAfIdSubscriptionsSubscriptionIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r DeleteAfIdSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAfIdSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAfIdSubscriptionsSubscriptionIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TrafficInfluSub
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON406     *externalRef1.N406
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAfIdSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAfIdSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAfIdSubscriptionsSubscriptionIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TrafficInfluSub
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PatchAfIdSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAfIdSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAfIdSubscriptionsSubscriptionIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TrafficInfluSub
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PutAfIdSubscriptionsSubscriptionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAfIdSubscriptionsSubscriptionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAfIdSubscriptionsWithResponse request returning *GetAfIdSubscriptionsResponse
func (c *ClientWithResponses) GetAfIdSubscriptionsWithResponse(ctx context.Context, afId string, reqEditors ...RequestEditorFn) (*GetAfIdSubscriptionsResponse, error) {
	rsp, err := c.GetAfIdSubscriptions(ctx, afId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAfIdSubscriptionsResponse(rsp)
}

// PostAfIdSubscriptionsWithBodyWithResponse request with arbitrary body returning *PostAfIdSubscriptionsResponse
func (c *ClientWithResponses) PostAfIdSubscriptionsWithBodyWithResponse(ctx context.Context, afId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAfIdSubscriptionsResponse, error) {
	rsp, err := c.PostAfIdSubscriptionsWithBody(ctx, afId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAfIdSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) PostAfIdSubscriptionsWithResponse(ctx context.Context, afId string, body PostAfIdSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAfIdSubscriptionsResponse, error) {
	rsp, err := c.PostAfIdSubscriptions(ctx, afId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAfIdSubscriptionsResponse(rsp)
}

// DeleteAfIdSubscriptionsSubscriptionIdWithResponse request returning *DeleteAfIdSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) DeleteAfIdSubscriptionsSubscriptionIdWithResponse(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteAfIdSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.DeleteAfIdSubscriptionsSubscriptionId(ctx, afId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAfIdSubscriptionsSubscriptionIdResponse(rsp)
}

// GetAfIdSubscriptionsSubscriptionIdWithResponse request returning *GetAfIdSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) GetAfIdSubscriptionsSubscriptionIdWithResponse(ctx context.Context, afId string, subscriptionId string, reqEditors ...RequestEditorFn) (*GetAfIdSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.GetAfIdSubscriptionsSubscriptionId(ctx, afId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAfIdSubscriptionsSubscriptionIdResponse(rsp)
}

// PatchAfIdSubscriptionsSubscriptionIdWithBodyWithResponse request with arbitrary body returning *PatchAfIdSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) PatchAfIdSubscriptionsSubscriptionIdWithBodyWithResponse(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAfIdSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.PatchAfIdSubscriptionsSubscriptionIdWithBody(ctx, afId, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAfIdSubscriptionsSubscriptionIdResponse(rsp)
}

func (c *ClientWithResponses) PatchAfIdSubscriptionsSubscriptionIdWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, afId string, subscriptionId string, body PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAfIdSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.PatchAfIdSubscriptionsSubscriptionIdWithApplicationMergePatchPlusJSONBody(ctx, afId, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAfIdSubscriptionsSubscriptionIdResponse(rsp)
}

// PutAfIdSubscriptionsSubscriptionIdWithBodyWithResponse request with arbitrary body returning *PutAfIdSubscriptionsSubscriptionIdResponse
func (c *ClientWithResponses) PutAfIdSubscriptionsSubscriptionIdWithBodyWithResponse(ctx context.Context, afId string, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAfIdSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.PutAfIdSubscriptionsSubscriptionIdWithBody(ctx, afId, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAfIdSubscriptionsSubscriptionIdResponse(rsp)
}

func (c *ClientWithResponses) PutAfIdSubscriptionsSubscriptionIdWithResponse(ctx context.Context, afId string, subscriptionId string, body PutAfIdSubscriptionsSubscriptionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAfIdSubscriptionsSubscriptionIdResponse, error) {
	rsp, err := c.PutAfIdSubscriptionsSubscriptionId(ctx, afId, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAfIdSubscriptionsSubscriptionIdResponse(rsp)
}

// ParseGetAfIdSubscriptionsResponse parses an HTTP response from a GetAfIdSubscriptionsWithResponse call
func ParseGetAfIdSubscriptionsResponse(rsp *http.Response) (*GetAfIdSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAfIdSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest externalRef1.N406
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostAfIdSubscriptionsResponse parses an HTTP response from a PostAfIdSubscriptionsWithResponse call
func ParsePostAfIdSubscriptionsResponse(rsp *http.Response) (*PostAfIdSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAfIdSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAfIdSubscriptionsSubscriptionIdResponse parses an HTTP response from a DeleteAfIdSubscriptionsSubscriptionIdWithResponse call
func ParseDeleteAfIdSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*DeleteAfIdSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAfIdSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAfIdSubscriptionsSubscriptionIdResponse parses an HTTP response from a GetAfIdSubscriptionsSubscriptionIdWithResponse call
func ParseGetAfIdSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*GetAfIdSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAfIdSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest externalRef1.N406
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePatchAfIdSubscriptionsSubscriptionIdResponse parses an HTTP response from a PatchAfIdSubscriptionsSubscriptionIdWithResponse call
func ParsePatchAfIdSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*PatchAfIdSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAfIdSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePutAfIdSubscriptionsSubscriptionIdResponse parses an HTTP response from a PutAfIdSubscriptionsSubscriptionIdWithResponse call
func ParsePutAfIdSubscriptionsSubscriptionIdResponse(rsp *http.Response) (*PutAfIdSubscriptionsSubscriptionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAfIdSubscriptionsSubscriptionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// read all of the active subscriptions for the AF
	// (GET /{afId}/subscriptions)
	GetAfIdSubscriptions(c *gin.Context, afId string)
	// Creates a new subscription resource
	// (POST /{afId}/subscriptions)
	PostAfIdSubscriptions(c *gin.Context, afId string)
	// Deletes an already existing subscription
	// (DELETE /{afId}/subscriptions/{subscriptionId})
	DeleteAfIdSubscriptionsSubscriptionId(c *gin.Context, afId string, subscriptionId string)
	// read an active subscriptions for the SCS/AS and the subscription Id
	// (GET /{afId}/subscriptions/{subscriptionId})
	GetAfIdSubscriptionsSubscriptionId(c *gin.Context, afId string, subscriptionId string)
	// Updates/replaces an existing subscription resource
	// (PATCH /{afId}/subscriptions/{subscriptionId})
	PatchAfIdSubscriptionsSubscriptionId(c *gin.Context, afId string, subscriptionId string)
	// Updates/replaces an existing subscription resource
	// (PUT /{afId}/subscriptions/{subscriptionId})
	PutAfIdSubscriptionsSubscriptionId(c *gin.Context, afId string, subscriptionId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAfIdSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetAfIdSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "afId" -------------
	var afId string

	err = runtime.BindStyledParameterWithOptions("simple", "afId", c.Param("afId"), &afId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter afId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAfIdSubscriptions(c, afId)
}

// PostAfIdSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) PostAfIdSubscriptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "afId" -------------
	var afId string

	err = runtime.BindStyledParameterWithOptions("simple", "afId", c.Param("afId"), &afId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter afId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAfIdSubscriptions(c, afId)
}

// DeleteAfIdSubscriptionsSubscriptionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAfIdSubscriptionsSubscriptionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "afId" -------------
	var afId string

	err = runtime.BindStyledParameterWithOptions("simple", "afId", c.Param("afId"), &afId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter afId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAfIdSubscriptionsSubscriptionId(c, afId, subscriptionId)
}

// GetAfIdSubscriptionsSubscriptionId operation middleware
func (siw *ServerInterfaceWrapper) GetAfIdSubscriptionsSubscriptionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "afId" -------------
	var afId string

	err = runtime.BindStyledParameterWithOptions("simple", "afId", c.Param("afId"), &afId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter afId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAfIdSubscriptionsSubscriptionId(c, afId, subscriptionId)
}

// PatchAfIdSubscriptionsSubscriptionId operation middleware
func (siw *ServerInterfaceWrapper) PatchAfIdSubscriptionsSubscriptionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "afId" -------------
	var afId string

	err = runtime.BindStyledParameterWithOptions("simple", "afId", c.Param("afId"), &afId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter afId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchAfIdSubscriptionsSubscriptionId(c, afId, subscriptionId)
}

// PutAfIdSubscriptionsSubscriptionId operation middleware
func (siw *ServerInterfaceWrapper) PutAfIdSubscriptionsSubscriptionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "afId" -------------
	var afId string

	err = runtime.BindStyledParameterWithOptions("simple", "afId", c.Param("afId"), &afId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter afId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAfIdSubscriptionsSubscriptionId(c, afId, subscriptionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/:afId/subscriptions", wrapper.GetAfIdSubscriptions)
	router.POST(options.BaseURL+"/:afId/subscriptions", wrapper.PostAfIdSubscriptions)
	router.DELETE(options.BaseURL+"/:afId/subscriptions/:subscriptionId", wrapper.DeleteAfIdSubscriptionsSubscriptionId)
	router.GET(options.BaseURL+"/:afId/subscriptions/:subscriptionId", wrapper.GetAfIdSubscriptionsSubscriptionId)
	router.PATCH(options.BaseURL+"/:afId/subscriptions/:subscriptionId", wrapper.PatchAfIdSubscriptionsSubscriptionId)
	router.PUT(options.BaseURL+"/:afId/subscriptions/:subscriptionId", wrapper.PutAfIdSubscriptionsSubscriptionId)
}

type GetAfIdSubscriptionsRequestObject struct {
	AfId string `json:"afId"`
}

type GetAfIdSubscriptionsResponseObject interface {
	VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error
}

type GetAfIdSubscriptions200JSONResponse []TrafficInfluSub

func (response GetAfIdSubscriptions200JSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAfIdSubscriptions307Response externalRef1.N307Response

func (response GetAfIdSubscriptions307Response) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type GetAfIdSubscriptions308Response externalRef1.N308Response

func (response GetAfIdSubscriptions308Response) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type GetAfIdSubscriptions400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptions401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions401ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptions403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions403ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions404ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptions406ApplicationProblemPlusJSONResponse struct {
	externalRef1.N406ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions406ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N406ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptions429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions429ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptions500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptions503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptions503ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetAfIdSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAfIdSubscriptionsRequestObject struct {
	AfId string `json:"afId"`
	Body *PostAfIdSubscriptionsJSONRequestBody
}

type PostAfIdSubscriptionsResponseObject interface {
	VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error
}

type PostAfIdSubscriptions201ResponseHeaders struct {
	Location string
}

type PostAfIdSubscriptions201JSONResponse struct {
	Body    TrafficInfluSub
	Headers PostAfIdSubscriptions201ResponseHeaders
}

func (response PostAfIdSubscriptions201JSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAfIdSubscriptions400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions400ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions401ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions403ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions404ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions411ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions413ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions415ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions429ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions500ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptions503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response PostAfIdSubscriptions503ApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PostAfIdSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PostAfIdSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitPostAfIdSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAfIdSubscriptionsSubscriptionIdRequestObject struct {
	AfId           string `json:"afId"`
	SubscriptionId string `json:"subscriptionId"`
}

type DeleteAfIdSubscriptionsSubscriptionIdResponseObject interface {
	VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error
}

type DeleteAfIdSubscriptionsSubscriptionId204Response struct {
}

func (response DeleteAfIdSubscriptionsSubscriptionId204Response) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAfIdSubscriptionsSubscriptionId307Response externalRef1.N307Response

func (response DeleteAfIdSubscriptionsSubscriptionId307Response) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type DeleteAfIdSubscriptionsSubscriptionId308Response externalRef1.N308Response

func (response DeleteAfIdSubscriptionsSubscriptionId308Response) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type DeleteAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse) VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAfIdSubscriptionsSubscriptionIdRequestObject struct {
	AfId           string `json:"afId"`
	SubscriptionId string `json:"subscriptionId"`
}

type GetAfIdSubscriptionsSubscriptionIdResponseObject interface {
	VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error
}

type GetAfIdSubscriptionsSubscriptionId200JSONResponse TrafficInfluSub

func (response GetAfIdSubscriptionsSubscriptionId200JSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(TrafficInfluSub(response))
}

type GetAfIdSubscriptionsSubscriptionId307Response externalRef1.N307Response

func (response GetAfIdSubscriptionsSubscriptionId307Response) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type GetAfIdSubscriptionsSubscriptionId308Response externalRef1.N308Response

func (response GetAfIdSubscriptionsSubscriptionId308Response) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type GetAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionId406ApplicationProblemPlusJSONResponse struct {
	externalRef1.N406ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId406ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N406ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response GetAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse) VisitGetAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PatchAfIdSubscriptionsSubscriptionIdRequestObject struct {
	AfId           string `json:"afId"`
	SubscriptionId string `json:"subscriptionId"`
	Body           *PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody
}

type PatchAfIdSubscriptionsSubscriptionIdResponseObject interface {
	VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error
}

type PatchAfIdSubscriptionsSubscriptionId200JSONResponse TrafficInfluSub

func (response PatchAfIdSubscriptionsSubscriptionId200JSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(TrafficInfluSub(response))
}

type PatchAfIdSubscriptionsSubscriptionId307Response externalRef1.N307Response

func (response PatchAfIdSubscriptionsSubscriptionId307Response) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type PatchAfIdSubscriptionsSubscriptionId308Response externalRef1.N308Response

func (response PatchAfIdSubscriptionsSubscriptionId308Response) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type PatchAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId411ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId413ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId415ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response PatchAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PatchAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PatchAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse) VisitPatchAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutAfIdSubscriptionsSubscriptionIdRequestObject struct {
	AfId           string `json:"afId"`
	SubscriptionId string `json:"subscriptionId"`
	Body           *PutAfIdSubscriptionsSubscriptionIdJSONRequestBody
}

type PutAfIdSubscriptionsSubscriptionIdResponseObject interface {
	VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error
}

type PutAfIdSubscriptionsSubscriptionId200JSONResponse TrafficInfluSub

func (response PutAfIdSubscriptionsSubscriptionId200JSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(TrafficInfluSub(response))
}

type PutAfIdSubscriptionsSubscriptionId307Response externalRef1.N307Response

func (response PutAfIdSubscriptionsSubscriptionId307Response) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type PutAfIdSubscriptionsSubscriptionId308Response externalRef1.N308Response

func (response PutAfIdSubscriptionsSubscriptionId308Response) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type PutAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId400ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId401ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId403ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId404ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId411ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId413ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId415ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId429ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId500ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response PutAfIdSubscriptionsSubscriptionId503ApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PutAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PutAfIdSubscriptionsSubscriptionIddefaultApplicationProblemPlusJSONResponse) VisitPutAfIdSubscriptionsSubscriptionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// read all of the active subscriptions for the AF
	// (GET /{afId}/subscriptions)
	GetAfIdSubscriptions(ctx context.Context, request GetAfIdSubscriptionsRequestObject) (GetAfIdSubscriptionsResponseObject, error)
	// Creates a new subscription resource
	// (POST /{afId}/subscriptions)
	PostAfIdSubscriptions(ctx context.Context, request PostAfIdSubscriptionsRequestObject) (PostAfIdSubscriptionsResponseObject, error)
	// Deletes an already existing subscription
	// (DELETE /{afId}/subscriptions/{subscriptionId})
	DeleteAfIdSubscriptionsSubscriptionId(ctx context.Context, request DeleteAfIdSubscriptionsSubscriptionIdRequestObject) (DeleteAfIdSubscriptionsSubscriptionIdResponseObject, error)
	// read an active subscriptions for the SCS/AS and the subscription Id
	// (GET /{afId}/subscriptions/{subscriptionId})
	GetAfIdSubscriptionsSubscriptionId(ctx context.Context, request GetAfIdSubscriptionsSubscriptionIdRequestObject) (GetAfIdSubscriptionsSubscriptionIdResponseObject, error)
	// Updates/replaces an existing subscription resource
	// (PATCH /{afId}/subscriptions/{subscriptionId})
	PatchAfIdSubscriptionsSubscriptionId(ctx context.Context, request PatchAfIdSubscriptionsSubscriptionIdRequestObject) (PatchAfIdSubscriptionsSubscriptionIdResponseObject, error)
	// Updates/replaces an existing subscription resource
	// (PUT /{afId}/subscriptions/{subscriptionId})
	PutAfIdSubscriptionsSubscriptionId(ctx context.Context, request PutAfIdSubscriptionsSubscriptionIdRequestObject) (PutAfIdSubscriptionsSubscriptionIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAfIdSubscriptions operation middleware
func (sh *strictHandler) GetAfIdSubscriptions(ctx *gin.Context, afId string) {
	var request GetAfIdSubscriptionsRequestObject

	request.AfId = afId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAfIdSubscriptions(ctx, request.(GetAfIdSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAfIdSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAfIdSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetAfIdSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAfIdSubscriptions operation middleware
func (sh *strictHandler) PostAfIdSubscriptions(ctx *gin.Context, afId string) {
	var request PostAfIdSubscriptionsRequestObject

	request.AfId = afId

	var body PostAfIdSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAfIdSubscriptions(ctx, request.(PostAfIdSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAfIdSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAfIdSubscriptionsResponseObject); ok {
		if err := validResponse.VisitPostAfIdSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAfIdSubscriptionsSubscriptionId operation middleware
func (sh *strictHandler) DeleteAfIdSubscriptionsSubscriptionId(ctx *gin.Context, afId string, subscriptionId string) {
	var request DeleteAfIdSubscriptionsSubscriptionIdRequestObject

	request.AfId = afId
	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAfIdSubscriptionsSubscriptionId(ctx, request.(DeleteAfIdSubscriptionsSubscriptionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAfIdSubscriptionsSubscriptionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAfIdSubscriptionsSubscriptionIdResponseObject); ok {
		if err := validResponse.VisitDeleteAfIdSubscriptionsSubscriptionIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAfIdSubscriptionsSubscriptionId operation middleware
func (sh *strictHandler) GetAfIdSubscriptionsSubscriptionId(ctx *gin.Context, afId string, subscriptionId string) {
	var request GetAfIdSubscriptionsSubscriptionIdRequestObject

	request.AfId = afId
	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAfIdSubscriptionsSubscriptionId(ctx, request.(GetAfIdSubscriptionsSubscriptionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAfIdSubscriptionsSubscriptionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAfIdSubscriptionsSubscriptionIdResponseObject); ok {
		if err := validResponse.VisitGetAfIdSubscriptionsSubscriptionIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchAfIdSubscriptionsSubscriptionId operation middleware
func (sh *strictHandler) PatchAfIdSubscriptionsSubscriptionId(ctx *gin.Context, afId string, subscriptionId string) {
	var request PatchAfIdSubscriptionsSubscriptionIdRequestObject

	request.AfId = afId
	request.SubscriptionId = subscriptionId

	var body PatchAfIdSubscriptionsSubscriptionIdApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAfIdSubscriptionsSubscriptionId(ctx, request.(PatchAfIdSubscriptionsSubscriptionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAfIdSubscriptionsSubscriptionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchAfIdSubscriptionsSubscriptionIdResponseObject); ok {
		if err := validResponse.VisitPatchAfIdSubscriptionsSubscriptionIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutAfIdSubscriptionsSubscriptionId operation middleware
func (sh *strictHandler) PutAfIdSubscriptionsSubscriptionId(ctx *gin.Context, afId string, subscriptionId string) {
	var request PutAfIdSubscriptionsSubscriptionIdRequestObject

	request.AfId = afId
	request.SubscriptionId = subscriptionId

	var body PutAfIdSubscriptionsSubscriptionIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAfIdSubscriptionsSubscriptionId(ctx, request.(PutAfIdSubscriptionsSubscriptionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAfIdSubscriptionsSubscriptionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutAfIdSubscriptionsSubscriptionIdResponseObject); ok {
		if err := validResponse.VisitPutAfIdSubscriptionsSubscriptionIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
