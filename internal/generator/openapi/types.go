// Copyright 2024 APRESIA Systems LTD.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Base schema is https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json
// Base code generated by github.com/atombender/go-jsonschema

package openapi

import "gopkg.in/yaml.v3"

type APIKeySecurityScheme struct {
	Description string                   `yaml:"description,omitempty"`
	In          APIKeySecuritySchemeIn   `yaml:"in"`
	Name        string                   `yaml:"name"`
	Type        APIKeySecuritySchemeType `yaml:"type"`
}

type APIKeySecuritySchemeIn string

const APIKeySecuritySchemeInCookie APIKeySecuritySchemeIn = "cookie"
const APIKeySecuritySchemeInHeader APIKeySecuritySchemeIn = "header"
const APIKeySecuritySchemeInQuery APIKeySecuritySchemeIn = "query"

type APIKeySecuritySchemeType string

const APIKeySecuritySchemeTypeApiKey APIKeySecuritySchemeType = "apiKey"

type AuthorizationCodeOAuthFlow struct {
	AuthorizationUrl string                           `yaml:"authorizationUrl"`
	RefreshUrl       string                           `yaml:"refreshUrl,omitempty"`
	Scopes           AuthorizationCodeOAuthFlowScopes `yaml:"scopes"`
	TokenUrl         string                           `yaml:"tokenUrl"`
}

type AuthorizationCodeOAuthFlowScopes = map[string]string

type Callback map[string]*PathItem

type ClientCredentialsFlow struct {
	RefreshUrl string                      `yaml:"refreshUrl,omitempty"`
	Scopes     ClientCredentialsFlowScopes `yaml:"scopes"`
	TokenUrl   string                      `yaml:"tokenUrl"`
}

type ClientCredentialsFlowScopes = map[string]string

type Components struct {
	Callbacks       ComponentsCallbacks       `yaml:"callbacks,omitempty"`
	Examples        ComponentsExamples        `yaml:"examples,omitempty"`
	Headers         ComponentsHeaders         `yaml:"headers,omitempty"`
	Links           ComponentsLinks           `yaml:"links,omitempty"`
	Parameters      ComponentsParameters      `yaml:"parameters,omitempty"`
	RequestBodies   ComponentsRequestBodies   `yaml:"requestBodies,omitempty"`
	Responses       ComponentsResponses       `yaml:"responses,omitempty"`
	Schemas         ComponentsSchemas         `yaml:"schemas,omitempty"`
	SecuritySchemes ComponentsSecuritySchemes `yaml:"securitySchemes,omitempty"`
}

type ComponentsCallbacks = map[string]*Ref[Callback]

type ComponentsExamples = map[string]*Ref[Example]

type ComponentsHeaders = map[string]*Ref[Header]

type ComponentsLinks = map[string]*Ref[Link]

type ComponentsParameters = map[string]*Ref[Parameter]

type ComponentsRequestBodies = map[string]*Ref[RequestBody]

type ComponentsResponses = map[string]*Ref[Response]

type ComponentsSchemas = map[string]*Ref[Schema]

type ComponentsSecuritySchemes = map[string]*Ref[SecurityScheme]

type Contact struct {
	Email *string `yaml:"email,omitempty"`
	Name  *string `yaml:"name,omitempty"`
	Url   *string `yaml:"url,omitempty"`
}

type Discriminator struct {
	Mapping      DiscriminatorMapping `yaml:"mapping,omitempty"`
	PropertyName string               `yaml:"propertyName"`
}

type DiscriminatorMapping = map[string]string

type Encoding struct {
	AllowReserved bool            `yaml:"allowReserved,omitempty"`
	ContentType   string          `yaml:"contentType,omitempty"`
	Explode       bool            `yaml:"explode,omitempty"`
	Headers       EncodingHeaders `yaml:"headers,omitempty"`
	Style         *EncodingStyle  `yaml:"style,omitempty"`
}

type EncodingHeaders = map[string]*Ref[Header]

type EncodingStyle string

const EncodingStyleDeepObject EncodingStyle = "deepObject"
const EncodingStyleForm EncodingStyle = "form"
const EncodingStylePipeDelimited EncodingStyle = "pipeDelimited"
const EncodingStyleSpaceDelimited EncodingStyle = "spaceDelimited"

type Example struct {
	Description   string    `yaml:"description,omitempty"`
	ExternalValue string    `yaml:"externalValue,omitempty"`
	Summary       string    `yaml:"summary,omitempty"`
	Value         yaml.Node `yaml:"value,omitempty"`
}

// Example and examples are mutually exclusive
type ExampleXORExamples interface{}

type ExternalDocumentation struct {
	Description *string `yaml:"description,omitempty"`
	Url         string  `yaml:"url"`
}

type HTTPSecurityScheme struct {
	BearerFormat string                 `yaml:"bearerFormat,omitempty"`
	Description  string                 `yaml:"description,omitempty"`
	Scheme       string                 `yaml:"scheme"`
	Type         HTTPSecuritySchemeType `yaml:"type"`
}

type HTTPSecuritySchemeType string

const HTTPSecuritySchemeTypeHttp HTTPSecuritySchemeType = "http"

type Header struct {
	AllowEmptyValue bool           `yaml:"allowEmptyValue,omitempty"`
	AllowReserved   bool           `yaml:"allowReserved,omitempty"`
	Content         HeaderContent  `yaml:"content,omitempty"`
	Deprecated      bool           `yaml:"deprecated,omitempty"`
	Description     string         `yaml:"description,omitempty"`
	Example         yaml.Node      `yaml:"example,omitempty"`
	Examples        HeaderExamples `yaml:"examples,omitempty"`
	Explode         bool           `yaml:"explode,omitempty"`
	Required        bool           `yaml:"required,omitempty"`
	Schema          Ref[Schema]    `yaml:"schema,omitempty"`
	Style           HeaderStyle    `yaml:"style,omitempty"`
}

type HeaderContent = map[string]*MediaType

type HeaderExamples = map[string]*Ref[Example]

type HeaderStyle string

const HeaderStyleSimple HeaderStyle = "simple"

type ImplicitOAuthFlow struct {
	AuthorizationUrl string                  `yaml:"authorizationUrl"`
	RefreshUrl       string                  `yaml:"refreshUrl,omitempty"`
	Scopes           ImplicitOAuthFlowScopes `yaml:"scopes"`
}

type ImplicitOAuthFlowScopes = map[string]string

type Info struct {
	Contact        *Contact `yaml:"contact,omitempty"`
	Description    *string  `yaml:"description,omitempty"`
	License        *License `yaml:"license,omitempty"`
	TermsOfService *string  `yaml:"termsOfService,omitempty"`
	Title          string   `yaml:"title"`
	Version        string   `yaml:"version"`
}

type License struct {
	Name string  `yaml:"name"`
	Url  *string `yaml:"url,omitempty"`
}

type Link struct {
	Description  string         `yaml:"description,omitempty"`
	OperationId  string         `yaml:"operationId,omitempty"`
	OperationRef string         `yaml:"operationRef,omitempty"`
	Parameters   LinkParameters `yaml:"parameters,omitempty"`
	RequestBody  yaml.Node      `yaml:"requestBody,omitempty"`
	Server       *Server        `yaml:"server,omitempty"`
}

type LinkParameters = map[string]yaml.Node

type MediaType struct {
	Encoding MediaTypeEncoding `yaml:"encoding,omitempty"`
	Example  yaml.Node         `yaml:"example,omitempty"`
	Examples MediaTypeExamples `yaml:"examples,omitempty"`
	Schema   Ref[Schema]       `yaml:"schema,omitempty"`
}

type MediaTypeEncoding = map[string]*Encoding

type MediaTypeExamples = map[string]*Ref[Example]

type OAuth2SecurityScheme struct {
	Description string                   `yaml:"description,omitempty"`
	Flows       OAuthFlows               `yaml:"flows"`
	Type        OAuth2SecuritySchemeType `yaml:"type"`
}

type OAuth2SecuritySchemeType string

const OAuth2SecuritySchemeTypeOauth2 OAuth2SecuritySchemeType = "oauth2"

type OAuthFlows struct {
	AuthorizationCode *AuthorizationCodeOAuthFlow `yaml:"authorizationCode,omitempty"`
	ClientCredentials *ClientCredentialsFlow      `yaml:"clientCredentials,omitempty"`
	Implicit          *ImplicitOAuthFlow          `yaml:"implicit,omitempty"`
	Password          *PasswordOAuthFlow          `yaml:"password,omitempty"`
}

type OpenIdConnectSecurityScheme struct {
	Description      string                          `yaml:"description,omitempty"`
	OpenIdConnectUrl string                          `yaml:"openIdConnectUrl"`
	Type             OpenIdConnectSecuritySchemeType `yaml:"type"`
}

type OpenIdConnectSecuritySchemeType string

const OpenIdConnectSecuritySchemeTypeOpenIdConnect OpenIdConnectSecuritySchemeType = "openIdConnect"

type Operation struct {
	Callbacks    OperationCallbacks     `yaml:"callbacks,omitempty"`
	Deprecated   bool                   `yaml:"deprecated,omitempty"`
	Description  string                 `yaml:"description,omitempty"`
	ExternalDocs *ExternalDocumentation `yaml:"externalDocs,omitempty"`
	OperationId  string                 `yaml:"operationId,omitempty"`
	Parameters   []Ref[Parameter]       `yaml:"parameters,omitempty"`
	RequestBody  Ref[RequestBody]       `yaml:"requestBody,omitempty"`
	Responses    Responses              `yaml:"responses"`
	Security     []SecurityRequirement  `yaml:"security,omitempty"`
	Servers      []Server               `yaml:"servers,omitempty"`
	Summary      string                 `yaml:"summary,omitempty"`
	Tags         []string               `yaml:"tags,omitempty"`
}

type OperationCallbacks = map[string]*Ref[Callback]

type Parameter struct {
	AllowEmptyValue bool              `yaml:"allowEmptyValue,omitempty"`
	AllowReserved   bool              `yaml:"allowReserved,omitempty"`
	Content         ParameterContent  `yaml:"content,omitempty"`
	Deprecated      bool              `yaml:"deprecated,omitempty"`
	Description     string            `yaml:"description,omitempty"`
	Example         yaml.Node         `yaml:"example,omitempty"`
	Examples        ParameterExamples `yaml:"examples,omitempty"`
	Explode         *bool             `yaml:"explode,omitempty"`
	In              string            `yaml:"in"`
	Name            string            `yaml:"name"`
	Required        *bool             `yaml:"required,omitempty"`
	Schema          Ref[Schema]       `yaml:"schema,omitempty"`
	Style           string            `yaml:"style,omitempty"`

	GoName string `yaml:"x-go-name,omitempty"`
}

type ParameterContent = map[string]*MediaType

type ParameterExamples = map[string]*Ref[Example]

// Parameter location
type ParameterLocation interface{}

type PasswordOAuthFlow struct {
	RefreshUrl string                  `yaml:"refreshUrl,omitempty"`
	Scopes     PasswordOAuthFlowScopes `yaml:"scopes"`
	TokenUrl   string                  `yaml:"tokenUrl"`
}

type PasswordOAuthFlowScopes = map[string]string

type PathItem = Ref[PathItemBase]

type PathItemBase struct {
	Description string           `yaml:"description,omitempty"`
	Parameters  []Ref[Parameter] `yaml:"parameters,omitempty"`
	Servers     []Server         `yaml:"servers,omitempty"`
	Summary     string           `yaml:"summary,omitempty"`

	Get     *Operation `yaml:"get,omitempty"`
	Put     *Operation `yaml:"put,omitempty"`
	Post    *Operation `yaml:"post,omitempty"`
	Delete  *Operation `yaml:"delete,omitempty"`
	Options *Operation `yaml:"options,omitempty"`
	Head    *Operation `yaml:"head,omitempty"`
	Patch   *Operation `yaml:"patch,omitempty"`
	Trace   *Operation `yaml:"trace,omitempty"`
}

func (p *PathItemBase) Operations() map[string]*Operation {
	m := make(map[string]*Operation)

	if p.Get != nil {
		m["GET"] = p.Get
	}
	if p.Put != nil {
		m["PUT"] = p.Put
	}
	if p.Post != nil {
		m["POST"] = p.Post
	}
	if p.Delete != nil {
		m["DELETE"] = p.Delete
	}
	if p.Options != nil {
		m["OPTIONS"] = p.Options
	}
	if p.Head != nil {
		m["HEAD"] = p.Head
	}
	if p.Patch != nil {
		m["PATCH"] = p.Patch
	}
	if p.Trace != nil {
		m["TRACE"] = p.Trace
	}

	return m
}

type Paths = map[string]*PathItem

type RequestBody struct {
	Content     RequestBodyContent `yaml:"content"`
	Description string             `yaml:"description,omitempty"`
	Required    *bool              `yaml:"required,omitempty"`
}

type RequestBodyContent = map[string]*MediaType

type Response struct {
	Content     ResponseContent `yaml:"content,omitempty"`
	Description string          `yaml:"description"`
	Headers     ResponseHeaders `yaml:"headers,omitempty"`
	Links       ResponseLinks   `yaml:"links,omitempty"`
}

type ResponseContent = map[string]*MediaType

type ResponseHeaders = map[string]*Ref[Header]

type ResponseLinks = map[string]*Ref[Link]

type Responses = map[string]*Ref[Response]

// The description of OpenAPI v3.0.x documents, as defined by
// https://spec.openapis.org/oas/v3.0.3
type Document struct {
	Components   *Components            `yaml:"components,omitempty"`
	ExternalDocs *ExternalDocumentation `yaml:"externalDocs,omitempty"`
	Info         Info                   `yaml:"info"`
	Openapi      string                 `yaml:"openapi"`
	Paths        Paths                  `yaml:"paths"`
	Security     []SecurityRequirement  `yaml:"security,omitempty"`
	Servers      []Server               `yaml:"servers,omitempty"`
	Tags         []Tag                  `yaml:"tags,omitempty"`
}

type SchemaProperties = map[string]*Ref[Schema]

type SchemaType string

const SchemaTypeArray SchemaType = "array"
const SchemaTypeBoolean SchemaType = "boolean"
const SchemaTypeInteger SchemaType = "integer"
const SchemaTypeNumber SchemaType = "number"
const SchemaTypeObject SchemaType = "object"
const SchemaTypeString SchemaType = "string"

// Schema and content are mutually exclusive, at least one is required
type SchemaXORContent interface{}

type SecurityRequirement = map[string][]string

type SecurityScheme = yaml.Node

type Server struct {
	Description string          `yaml:"description,omitempty"`
	Url         string          `yaml:"url"`
	Variables   ServerVariables `yaml:"variables,omitempty"`
}

type ServerVariable struct {
	Default     string   `yaml:"default"`
	Description *string  `yaml:"description,omitempty"`
	Enum        []string `yaml:"enum,omitempty"`
}

type ServerVariables = map[string]*ServerVariable

type Tag struct {
	Description  string                 `yaml:"description,omitempty"`
	ExternalDocs *ExternalDocumentation `yaml:"externalDocs,omitempty"`
	Name         string                 `yaml:"name"`
}

type XML struct {
	Attribute bool    `yaml:"attribute,omitempty"`
	Name      *string `yaml:"name,omitempty"`
	Namespace *string `yaml:"namespace,omitempty"`
	Prefix    *string `yaml:"prefix,omitempty"`
	Wrapped   bool    `yaml:"wrapped,omitempty"`
}
