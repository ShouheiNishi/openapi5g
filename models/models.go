// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package models

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	f5gcModels "github.com/free5gc/openapi/models"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for N5GsUserState.
const (
	N5GsUserStateCONNECTEDNOTREACHABLEFORPAGING N5GsUserState = "CONNECTED_NOT_REACHABLE_FOR_PAGING"
	N5GsUserStateCONNECTEDREACHABLEFORPAGING    N5GsUserState = "CONNECTED_REACHABLE_FOR_PAGING"
	N5GsUserStateDEREGISTERED                   N5GsUserState = "DEREGISTERED"
	N5GsUserStateNOTPROVIDEDFROMAMF             N5GsUserState = "NOT_PROVIDED_FROM_AMF"
)

// Defines values for AMPolicyPolicyAssociationReleaseCause.
const (
	AMPolicyPolicyAssociationReleaseCauseINSUFFICIENTRES AMPolicyPolicyAssociationReleaseCause = "INSUFFICIENT_RES"
	AMPolicyPolicyAssociationReleaseCauseUESUBSCRIPTION  AMPolicyPolicyAssociationReleaseCause = "UE_SUBSCRIPTION"
	AMPolicyPolicyAssociationReleaseCauseUNSPECIFIED     AMPolicyPolicyAssociationReleaseCause = "UNSPECIFIED"
)

// Defines values for AMPolicyRequestTrigger.
const (
	AMPolicyRequestTriggerACCESSTYPECH   AMPolicyRequestTrigger = "ACCESS_TYPE_CH"
	AMPolicyRequestTriggerALLOWEDNSSAICH AMPolicyRequestTrigger = "ALLOWED_NSSAI_CH"
	AMPolicyRequestTriggerLOCCH          AMPolicyRequestTrigger = "LOC_CH"
	AMPolicyRequestTriggerPRACH          AMPolicyRequestTrigger = "PRA_CH"
	AMPolicyRequestTriggerRFSPCH         AMPolicyRequestTrigger = "RFSP_CH"
	AMPolicyRequestTriggerSERVAREACH     AMPolicyRequestTrigger = "SERV_AREA_CH"
	AMPolicyRequestTriggerSMFSELECTCH    AMPolicyRequestTrigger = "SMF_SELECT_CH"
	AMPolicyRequestTriggerUEAMBRCH       AMPolicyRequestTrigger = "UE_AMBR_CH"
)

// Defines values for AccessNetworkId.
const (
	AccessNetworkIdETHERNET AccessNetworkId = "ETHERNET"
	AccessNetworkIdHRPD     AccessNetworkId = "HRPD"
	AccessNetworkIdWIMAX    AccessNetworkId = "WIMAX"
	AccessNetworkIdWLAN     AccessNetworkId = "WLAN"
)

// Defines values for AccessTech.
const (
	AccessTechCDMA1xRTT                   AccessTech = "CDMA_1xRTT"
	AccessTechCDMAHRPD                    AccessTech = "CDMA_HRPD"
	AccessTechECGSMIoTONLY                AccessTech = "ECGSM_IoT_ONLY"
	AccessTechEUTRANINNBS1MODEONLY        AccessTech = "EUTRAN_IN_NBS1_MODE_ONLY"
	AccessTechEUTRANINWBS1MODEANDNBS1MODE AccessTech = "EUTRAN_IN_WBS1_MODE_AND_NBS1_MODE"
	AccessTechEUTRANINWBS1MODEONLY        AccessTech = "EUTRAN_IN_WBS1_MODE_ONLY"
	AccessTechGSMANDECGSMIoT              AccessTech = "GSM_AND_ECGSM_IoT"
	AccessTechGSMCOMPACT                  AccessTech = "GSM_COMPACT"
	AccessTechGSMWITHOUTECGSMIoT          AccessTech = "GSM_WITHOUT_ECGSM_IoT"
	AccessTechNR                          AccessTech = "NR"
	AccessTechUTRAN                       AccessTech = "UTRAN"
)

// Defines values for AccessTokenErrError.
const (
	InvalidClient        AccessTokenErrError = "invalid_client"
	InvalidGrant         AccessTokenErrError = "invalid_grant"
	InvalidRequest       AccessTokenErrError = "invalid_request"
	InvalidScope         AccessTokenErrError = "invalid_scope"
	UnauthorizedClient   AccessTokenErrError = "unauthorized_client"
	UnsupportedGrantType AccessTokenErrError = "unsupported_grant_type"
)

// Defines values for AccessTokenReqGrantType.
const (
	ClientCredentials AccessTokenReqGrantType = "client_credentials"
)

// Defines values for AccessTokenRspTokenType.
const (
	Bearer AccessTokenRspTokenType = "Bearer"
)

// Defines values for AccessType.
const (
	AccessTypeN3GPPACCESS   AccessType = "3GPP_ACCESS"
	AccessTypeNON3GPPACCESS AccessType = "NON_3GPP_ACCESS"
)

// Defines values for AccessTypeRm.
const (
	AccessTypeRmN3GPPACCESS   AccessTypeRm = "3GPP_ACCESS"
	AccessTypeRmNON3GPPACCESS AccessTypeRm = "NON_3GPP_ACCESS"
)

// Defines values for AdditionalQosFlowInfo.
const (
	MORELIKELY AdditionalQosFlowInfo = "MORE_LIKELY"
)

// Defines values for AfEvent.
const (
	AfEventACCESSTYPECHANGE              AfEvent = "ACCESS_TYPE_CHANGE"
	AfEventANIREPORT                     AfEvent = "ANI_REPORT"
	AfEventCHARGINGCORRELATION           AfEvent = "CHARGING_CORRELATION"
	AfEventEPSFALLBACK                   AfEvent = "EPS_FALLBACK"
	AfEventFAILEDRESOURCESALLOCATION     AfEvent = "FAILED_RESOURCES_ALLOCATION"
	AfEventOUTOFCREDIT                   AfEvent = "OUT_OF_CREDIT"
	AfEventPLMNCHG                       AfEvent = "PLMN_CHG"
	AfEventQOSMONITORING                 AfEvent = "QOS_MONITORING"
	AfEventQOSNOTIF                      AfEvent = "QOS_NOTIF"
	AfEventRANNASCAUSE                   AfEvent = "RAN_NAS_CAUSE"
	AfEventREALLOCATIONOFCREDIT          AfEvent = "REALLOCATION_OF_CREDIT"
	AfEventSUCCESSFULRESOURCESALLOCATION AfEvent = "SUCCESSFUL_RESOURCES_ALLOCATION"
	AfEventTSNBRIDGEINFO                 AfEvent = "TSN_BRIDGE_INFO"
	AfEventUSAGEREPORT                   AfEvent = "USAGE_REPORT"
)

// Defines values for AfNotifMethod.
const (
	AfNotifMethodEVENTDETECTION AfNotifMethod = "EVENT_DETECTION"
	AfNotifMethodONETIME        AfNotifMethod = "ONE_TIME"
	AfNotifMethodPERIODIC       AfNotifMethod = "PERIODIC"
)

// Defines values for AfRequestedData.
const (
	UEIDENTITY AfRequestedData = "UE_IDENTITY"
)

// Defines values for AfResultStatus.
const (
	AfResultStatusOTHER               AfResultStatus = "OTHER"
	AfResultStatusRELOCNOALLOWED      AfResultStatus = "RELOC_NO_ALLOWED"
	AfResultStatusSUCCESS             AfResultStatus = "SUCCESS"
	AfResultStatusTEMPORARYCONGESTION AfResultStatus = "TEMPORARY_CONGESTION"
)

// Defines values for AfSigProtocol0.
const (
	NOINFORMATION AfSigProtocol0 = "NO_INFORMATION"
	SIP           AfSigProtocol0 = "SIP"
)

// Defines values for AmfEventTrigger.
const (
	AmfEventTriggerCONTINUOUS AmfEventTrigger = "CONTINUOUS"
	AmfEventTriggerONETIME    AmfEventTrigger = "ONE_TIME"
	AmfEventTriggerPERIODIC   AmfEventTrigger = "PERIODIC"
)

// Defines values for AmfEventType.
const (
	AmfEventTypeACCESSTYPEREPORT                   AmfEventType = "ACCESS_TYPE_REPORT"
	AmfEventTypeAVAILABILITYAFTERDDNFAILURE        AmfEventType = "AVAILABILITY_AFTER_DDN_FAILURE"
	AmfEventTypeCOMMUNICATIONFAILUREREPORT         AmfEventType = "COMMUNICATION_FAILURE_REPORT"
	AmfEventTypeCONNECTIVITYSTATEREPORT            AmfEventType = "CONNECTIVITY_STATE_REPORT"
	AmfEventTypeFREQUENTMOBILITYREGISTRATIONREPORT AmfEventType = "FREQUENT_MOBILITY_REGISTRATION_REPORT"
	AmfEventTypeLOCATIONREPORT                     AmfEventType = "LOCATION_REPORT"
	AmfEventTypeLOSSOFCONNECTIVITY                 AmfEventType = "LOSS_OF_CONNECTIVITY"
	AmfEventTypeN5GSUSERSTATEREPORT                AmfEventType = "5GS_USER_STATE_REPORT"
	AmfEventTypePRESENCEINAOIREPORT                AmfEventType = "PRESENCE_IN_AOI_REPORT"
	AmfEventTypeREACHABILITYREPORT                 AmfEventType = "REACHABILITY_REPORT"
	AmfEventTypeREGISTRATIONSTATEREPORT            AmfEventType = "REGISTRATION_STATE_REPORT"
	AmfEventTypeSUBSCRIPTIONIDADDITION             AmfEventType = "SUBSCRIPTION_ID_ADDITION"
	AmfEventTypeSUBSCRIPTIONIDCHANGE               AmfEventType = "SUBSCRIPTION_ID_CHANGE"
	AmfEventTypeTIMEZONEREPORT                     AmfEventType = "TIMEZONE_REPORT"
	AmfEventTypeTYPEALLOCATIONCODEREPORT           AmfEventType = "TYPE_ALLOCATION_CODE_REPORT"
	AmfEventTypeUESINAREAREPORT                    AmfEventType = "UES_IN_AREA_REPORT"
)

// Defines values for AmfUpdateEventOptionItemOp.
const (
	AmfUpdateEventOptionItemOpReplace AmfUpdateEventOptionItemOp = "replace"
)

// Defines values for AmfUpdateEventSubscriptionItemOp.
const (
	AmfUpdateEventSubscriptionItemOpAdd     AmfUpdateEventSubscriptionItemOp = "add"
	AmfUpdateEventSubscriptionItemOpRemove  AmfUpdateEventSubscriptionItemOp = "remove"
	AmfUpdateEventSubscriptionItemOpReplace AmfUpdateEventSubscriptionItemOp = "replace"
)

// Defines values for AnNodeType.
const (
	GNB   AnNodeType = "GNB"
	NGENB AnNodeType = "NG_ENB"
)

// Defines values for AssociationType.
const (
	IMEICHANGE   AssociationType = "IMEI_CHANGE"
	IMEISVCHANGE AssociationType = "IMEISV_CHANGE"
)

// Defines values for AuthMethod.
const (
	AuthMethodEAPAKAPRIME AuthMethod = "EAP_AKA_PRIME"
	AuthMethodEAPTLS      AuthMethod = "EAP_TLS"
	AuthMethodN5GAKA      AuthMethod = "5G_AKA"
)

// Defines values for AuthResult.
const (
	AUTHENTICATIONFAILURE AuthResult = "AUTHENTICATION_FAILURE"
	AUTHENTICATIONONGOING AuthResult = "AUTHENTICATION_ONGOING"
	AUTHENTICATIONSUCCESS AuthResult = "AUTHENTICATION_SUCCESS"
)

// Defines values for AuthStatus.
const (
	EAPFAILURE AuthStatus = "EAP_FAILURE"
	EAPSUCCESS AuthStatus = "EAP_SUCCESS"
	PENDING    AuthStatus = "PENDING"
)

// Defines values for AuthType.
const (
	AuthTypeEAPAKAPRIME AuthType = "EAP_AKA_PRIME"
	AuthTypeEAPTLS      AuthType = "EAP_TLS"
	AuthTypeN5GAKA      AuthType = "5G_AKA"
)

// Defines values for AvType.
const (
	AvTypeEAPAKAPRIME AvType = "EAP_AKA_PRIME"
	AvTypeN5GHEAKA    AvType = "5G_HE_AKA"
)

// Defines values for BdtPolicyStatus.
const (
	INVALID BdtPolicyStatus = "INVALID"
	VALID   BdtPolicyStatus = "VALID"
)

// Defines values for BindingLevel.
const (
	NFINSTANCE BindingLevel = "NF_INSTANCE"
	NFSET      BindingLevel = "NF_SET"
)

// Defines values for Cause.
const (
	CauseCHANGEDANCHORSMF             Cause = "CHANGED_ANCHOR_SMF"
	CauseCHANGEDINTERMEDIATESMF       Cause = "CHANGED_INTERMEDIATE_SMF"
	CauseCNASSISTEDRANPARAMETERTUNING Cause = "CN_ASSISTED_RAN_PARAMETER_TUNING"
	CauseDDNFAILURESTATUS             Cause = "DDN_FAILURE_STATUS"
	CauseDNNCONGESTION                Cause = "DNN_CONGESTION"
	CauseEPSFALLBACK                  Cause = "EPS_FALLBACK"
	CauseHOCANCEL                     Cause = "HO_CANCEL"
	CauseHOFAILURE                    Cause = "HO_FAILURE"
	CauseINSUFFICIENTUPRESOURCES      Cause = "INSUFFICIENT_UP_RESOURCES"
	CauseISMFCONTEXTTRANSFER          Cause = "ISMF_CONTEXT_TRANSFER"
	CauseN5GANNOTRESPONDING           Cause = "5G_AN_NOT_RESPONDING"
	CauseNOTSUPPORTEDWITHISMF         Cause = "NOT_SUPPORTED_WITH_ISMF"
	CausePDUSESSIONHANDEDOVER         Cause = "PDU_SESSION_HANDED_OVER"
	CausePDUSESSIONHANDOVERFAILURE    Cause = "PDU_SESSION_HAND_OVER_FAILURE"
	CausePDUSESSIONRESUMED            Cause = "PDU_SESSION_RESUMED"
	CausePDUSESSIONSTATUSMISMATCH     Cause = "PDU_SESSION_STATUS_MISMATCH"
	CauseRELDUETOCPONLYNOTAPPLICABLE  Cause = "REL_DUE_TO_CP_ONLY_NOT_APPLICABLE"
	CauseRELDUETODUPLICATESESSIONID   Cause = "REL_DUE_TO_DUPLICATE_SESSION_ID"
	CauseRELDUETOHO                   Cause = "REL_DUE_TO_HO"
	CauseRELDUETOPSTOCSHO             Cause = "REL_DUE_TO_PS_TO_CS_HO"
	CauseRELDUETOREACTIVATION         Cause = "REL_DUE_TO_REACTIVATION"
	CauseRELDUETOSLICENOTAUTHORIZED   Cause = "REL_DUE_TO_SLICE_NOT_AUTHORIZED"
	CauseRELDUETOSLICENOTAVAILABLE    Cause = "REL_DUE_TO_SLICE_NOT_AVAILABLE"
	CauseRELDUETOSMFNOTSUPPORTPSETR   Cause = "REL_DUE_TO_SMF_NOT_SUPPORT_PSETR"
	CauseRELDUETOSUBSCRIPTIONCHANGE   Cause = "REL_DUE_TO_SUBSCRIPTION_CHANGE"
	CauseRELDUETOUPSEC                Cause = "REL_DUE_TO_UP_SEC"
	CauseSMFCONTEXTTRANSFER           Cause = "SMF_CONTEXT_TRANSFER"
	CauseSNSSAICONGESTION             Cause = "S_NSSAI_CONGESTION"
)

// Defines values for ChangeType.
const (
	ADD     ChangeType = "ADD"
	MOVE    ChangeType = "MOVE"
	REMOVE  ChangeType = "REMOVE"
	REPLACE ChangeType = "REPLACE"
)

// Defines values for CipheringAlgorithm.
const (
	NEA0 CipheringAlgorithm = "NEA0"
	NEA1 CipheringAlgorithm = "NEA1"
	NEA2 CipheringAlgorithm = "NEA2"
	NEA3 CipheringAlgorithm = "NEA3"
)

// Defines values for CmState.
const (
	CONNECTED CmState = "CONNECTED"
	IDLE      CmState = "IDLE"
)

// Defines values for CnType.
const (
	DUAL4G5G CnType = "DUAL_4G5G"
	SINGLE4G CnType = "SINGLE_4G"
	SINGLE5G CnType = "SINGLE_5G"
)

// Defines values for CodeWordInd.
const (
	CODEWORDCHECKINGMLC CodeWordInd = "CODEWORD_CHECK_IN_GMLC"
	CODEWORDCHECKINUE   CodeWordInd = "CODEWORD_CHECK_IN_UE"
)

// Defines values for CollectionPeriodRmmLteMdt.
const (
	CollectionPeriodRmmLteMdtN1024  CollectionPeriodRmmLteMdt = "1024"
	CollectionPeriodRmmLteMdtN10240 CollectionPeriodRmmLteMdt = "10240"
	CollectionPeriodRmmLteMdtN1280  CollectionPeriodRmmLteMdt = "1280"
	CollectionPeriodRmmLteMdtN2048  CollectionPeriodRmmLteMdt = "2048"
	CollectionPeriodRmmLteMdtN2560  CollectionPeriodRmmLteMdt = "2560"
	CollectionPeriodRmmLteMdtN5120  CollectionPeriodRmmLteMdt = "5120"
	CollectionPeriodRmmLteMdtN60000 CollectionPeriodRmmLteMdt = "60000"
)

// Defines values for CollectionPeriodRmmNrMdt.
const (
	CollectionPeriodRmmNrMdtN1024  CollectionPeriodRmmNrMdt = "1024"
	CollectionPeriodRmmNrMdtN10240 CollectionPeriodRmmNrMdt = "10240"
	CollectionPeriodRmmNrMdtN2048  CollectionPeriodRmmNrMdt = "2048"
	CollectionPeriodRmmNrMdtN5120  CollectionPeriodRmmNrMdt = "5120"
	CollectionPeriodRmmNrMdtN60000 CollectionPeriodRmmNrMdt = "60000"
)

// Defines values for ConditionEventType.
const (
	NFADDED   ConditionEventType = "NF_ADDED"
	NFREMOVED ConditionEventType = "NF_REMOVED"
)

// Defines values for ContextDataSetName.
const (
	ContextDataSetNameAMF3GPP          ContextDataSetName = "AMF_3GPP"
	ContextDataSetNameAMFNON3GPP       ContextDataSetName = "AMF_NON_3GPP"
	ContextDataSetNameEESUBSCRIPTIONS  ContextDataSetName = "EE_SUBSCRIPTIONS"
	ContextDataSetNameIPSMGW           ContextDataSetName = "IP_SM_GW"
	ContextDataSetNameSDMSUBSCRIPTIONS ContextDataSetName = "SDM_SUBSCRIPTIONS"
	ContextDataSetNameSMFREG           ContextDataSetName = "SMF_REG"
	ContextDataSetNameSMSF3GPP         ContextDataSetName = "SMSF_3GPP"
	ContextDataSetNameSMSFNON3GPP      ContextDataSetName = "SMSF_NON_3GPP"
	ContextDataSetNameSUBSTONOTIFY     ContextDataSetName = "SUBS_TO_NOTIFY"
)

// Defines values for CoreNetworkType.
const (
	EPC  CoreNetworkType = "EPC"
	N5GC CoreNetworkType = "5GC"
)

// Defines values for CreditManagementStatus.
const (
	AUTHREJECTED     CreditManagementStatus = "AUTH_REJECTED"
	CREDITCTRLNOTAPP CreditManagementStatus = "CREDIT_CTRL_NOT_APP"
	ENDUSERSERDENIED CreditManagementStatus = "END_USER_SER_DENIED"
	RATINGFAILED     CreditManagementStatus = "RATING_FAILED"
	USERUNKNOWN      CreditManagementStatus = "USER_UNKNOWN"
)

// Defines values for DataInd.
const (
	BDT      DataInd = "BDT"
	IPTV     DataInd = "IPTV"
	PFD      DataInd = "PFD"
	SVCPARAM DataInd = "SVC_PARAM"
)

// Defines values for DataSetId.
const (
	APPLICATION  DataSetId = "APPLICATION"
	EXPOSURE     DataSetId = "EXPOSURE"
	POLICY       DataSetId = "POLICY"
	SUBSCRIPTION DataSetId = "SUBSCRIPTION"
)

// Defines values for DataSetName.
const (
	DataSetNameAM         DataSetName = "AM"
	DataSetNameLCSBCA     DataSetName = "LCS_BCA"
	DataSetNameLCSMO      DataSetName = "LCS_MO"
	DataSetNameLCSPRIVACY DataSetName = "LCS_PRIVACY"
	DataSetNameSM         DataSetName = "SM"
	DataSetNameSMFSEL     DataSetName = "SMF_SEL"
	DataSetNameSMSMNG     DataSetName = "SMS_MNG"
	DataSetNameSMSSUB     DataSetName = "SMS_SUB"
	DataSetNameTRACE      DataSetName = "TRACE"
	DataSetNameV2X        DataSetName = "V2X"
)

// Defines values for DeregistrationReason.
const (
	DeregistrationReasonN5GSTOEPSMOBILITY                      DeregistrationReason = "5GS_TO_EPS_MOBILITY"
	DeregistrationReasonN5GSTOEPSMOBILITYUEINITIALREGISTRATION DeregistrationReason = "5GS_TO_EPS_MOBILITY_UE_INITIAL_REGISTRATION"
	DeregistrationReasonREREGISTRATIONREQUIRED                 DeregistrationReason = "REREGISTRATION_REQUIRED"
	DeregistrationReasonSMFCONTEXTTRANSFERRED                  DeregistrationReason = "SMF_CONTEXT_TRANSFERRED"
	DeregistrationReasonSUBSCRIPTIONWITHDRAWN                  DeregistrationReason = "SUBSCRIPTION_WITHDRAWN"
	DeregistrationReasonUEINITIALREGISTRATION                  DeregistrationReason = "UE_INITIAL_REGISTRATION"
	DeregistrationReasonUEREGISTRATIONAREACHANGE               DeregistrationReason = "UE_REGISTRATION_AREA_CHANGE"
)

// Defines values for DlDataDeliveryStatus.
const (
	BUFFERED    DlDataDeliveryStatus = "BUFFERED"
	DISCARDED   DlDataDeliveryStatus = "DISCARDED"
	TRANSMITTED DlDataDeliveryStatus = "TRANSMITTED"
)

// Defines values for DnaiChangeType.
const (
	EARLY     DnaiChangeType = "EARLY"
	EARLYLATE DnaiChangeType = "EARLY_LATE"
	LATE      DnaiChangeType = "LATE"
)

// Defines values for DnnSelectionMode.
const (
	NWDNNNOTVERIFIED DnnSelectionMode = "NW_DNN_NOT_VERIFIED"
	UEDNNNOTVERIFIED DnnSelectionMode = "UE_DNN_NOT_VERIFIED"
	VERIFIED         DnnSelectionMode = "VERIFIED"
)

// Defines values for DomainNameProtocol.
const (
	DNSQNAME DomainNameProtocol = "DNS_QNAME"
	TLSSAN   DomainNameProtocol = "TLS_SAN"
	TLSSNI   DomainNameProtocol = "TLS_SNI"
	TSLSCN   DomainNameProtocol = "TSL_SCN"
)

// Defines values for EpsInterworkingIndication.
const (
	EpsInterworkingIndicationIWKNON3GPP EpsInterworkingIndication = "IWK_NON_3GPP"
	EpsInterworkingIndicationNONE       EpsInterworkingIndication = "NONE"
	EpsInterworkingIndicationWITHN26    EpsInterworkingIndication = "WITH_N26"
	EpsInterworkingIndicationWITHOUTN26 EpsInterworkingIndication = "WITHOUT_N26"
)

// Defines values for EpsNasCipheringAlgorithm.
const (
	EEA0 EpsNasCipheringAlgorithm = "EEA0"
	EEA1 EpsNasCipheringAlgorithm = "EEA1"
	EEA2 EpsNasCipheringAlgorithm = "EEA2"
	EEA3 EpsNasCipheringAlgorithm = "EEA3"
)

// Defines values for EpsNasIntegrityAlgorithm.
const (
	EIA0 EpsNasIntegrityAlgorithm = "EIA0"
	EIA1 EpsNasIntegrityAlgorithm = "EIA1"
	EIA2 EpsNasIntegrityAlgorithm = "EIA2"
	EIA3 EpsNasIntegrityAlgorithm = "EIA3"
)

// Defines values for EventForMdt.
const (
	A2EVENT      EventForMdt = "A2_EVENT"
	OUTOFCOVERAG EventForMdt = "OUT_OF_COVERAG"
)

// Defines values for EventReportMode.
const (
	EventReportModeONEVENTDETECTION EventReportMode = "ON_EVENT_DETECTION"
	EventReportModePERIODIC         EventReportMode = "PERIODIC"
)

// Defines values for EventType.
const (
	EventTypeAVAILABILITYAFTERDDNFAILURE EventType = "AVAILABILITY_AFTER_DDN_FAILURE"
	EventTypeCHANGEOFSUPIPEIASSOCIATION  EventType = "CHANGE_OF_SUPI_PEI_ASSOCIATION"
	EventTypeCNTYPECHANGE                EventType = "CN_TYPE_CHANGE"
	EventTypeCOMMUNICATIONFAILURE        EventType = "COMMUNICATION_FAILURE"
	EventTypeDLDATADELIVERYSTATUS        EventType = "DL_DATA_DELIVERY_STATUS"
	EventTypeLOCATIONREPORTING           EventType = "LOCATION_REPORTING"
	EventTypeLOSSOFCONNECTIVITY          EventType = "LOSS_OF_CONNECTIVITY"
	EventTypePDNCONNECTIVITYSTATUS       EventType = "PDN_CONNECTIVITY_STATUS"
	EventTypeROAMINGSTATUS               EventType = "ROAMING_STATUS"
	EventTypeUECONNECTIONMANAGEMENTSTATE EventType = "UE_CONNECTION_MANAGEMENT_STATE"
	EventTypeUEREACHABILITYFORDATA       EventType = "UE_REACHABILITY_FOR_DATA"
	EventTypeUEREACHABILITYFORSMS        EventType = "UE_REACHABILITY_FOR_SMS"
)

// Defines values for ExtSnssaiWildcardSd.
const (
	ExtSnssaiWildcardSdTrue ExtSnssaiWildcardSd = true
)

// Defines values for FailureCause.
const (
	PCCQOSFLOWEVENT    FailureCause = "PCC_QOS_FLOW_EVENT"
	PCCRULEEVENT       FailureCause = "PCC_RULE_EVENT"
	POLDECERROR        FailureCause = "POL_DEC_ERROR"
	RULEPERMANENTERROR FailureCause = "RULE_PERMANENT_ERROR"
	RULETEMPORARYERROR FailureCause = "RULE_TEMPORARY_ERROR"
)

// Defines values for FailureCode.
const (
	APPIDDUPLICATED    FailureCode = "APP_ID_DUPLICATED"
	MALFUNCTION        FailureCode = "MALFUNCTION"
	OTHERREASON        FailureCode = "OTHER_REASON"
	PARTIALFAILURE     FailureCode = "PARTIAL_FAILURE"
	RESOURCELIMITATION FailureCode = "RESOURCE_LIMITATION"
	SHORTDELAY         FailureCode = "SHORT_DELAY"
)

// Defines values for FlowDirection.
const (
	FlowDirectionBIDIRECTIONAL FlowDirection = "BIDIRECTIONAL"
	FlowDirectionDOWNLINK      FlowDirection = "DOWNLINK"
	FlowDirectionUNSPECIFIED   FlowDirection = "UNSPECIFIED"
	FlowDirectionUPLINK        FlowDirection = "UPLINK"
)

// Defines values for FlowDirectionRm.
const (
	FlowDirectionRmBIDIRECTIONAL FlowDirectionRm = "BIDIRECTIONAL"
	FlowDirectionRmDOWNLINK      FlowDirectionRm = "DOWNLINK"
	FlowDirectionRmUNSPECIFIED   FlowDirectionRm = "UNSPECIFIED"
	FlowDirectionRmUPLINK        FlowDirectionRm = "UPLINK"
)

// Defines values for FlowStatus.
const (
	FlowStatusDISABLED        FlowStatus = "DISABLED"
	FlowStatusENABLED         FlowStatus = "ENABLED"
	FlowStatusENABLEDDOWNLINK FlowStatus = "ENABLED-DOWNLINK"
	FlowStatusENABLEDUPLINK   FlowStatus = "ENABLED-UPLINK"
	FlowStatusREMOVED         FlowStatus = "REMOVED"
)

// Defines values for FlowUsage.
const (
	AFSIGNALLING FlowUsage = "AF_SIGNALLING"
	NOINFO       FlowUsage = "NO_INFO"
	RTCP         FlowUsage = "RTCP"
)

// Defines values for HoState.
const (
	HoStateCANCELLED HoState = "CANCELLED"
	HoStateCOMPLETED HoState = "COMPLETED"
	HoStateNONE      HoState = "NONE"
	HoStatePREPARED  HoState = "PREPARED"
	HoStatePREPARING HoState = "PREPARING"
)

// Defines values for HssAuthType.
const (
	HssAuthTypeEAPAKA      HssAuthType = "EAP_AKA"
	HssAuthTypeEAPAKAPRIME HssAuthType = "EAP_AKA_PRIME"
	HssAuthTypeEPSAKA      HssAuthType = "EPS_AKA"
	HssAuthTypeGBAAKA      HssAuthType = "GBA_AKA"
	HssAuthTypeIMSAKA      HssAuthType = "IMS_AKA"
	HssAuthTypeUMTSAKA     HssAuthType = "UMTS_AKA"
)

// Defines values for HssAuthTypeInUri.
const (
	EapAka      HssAuthTypeInUri = "eap-aka"
	EapAkaPrime HssAuthTypeInUri = "eap-aka-prime"
	EpsAka      HssAuthTypeInUri = "eps-aka"
	GbaAka      HssAuthTypeInUri = "gba-aka"
	ImsAka      HssAuthTypeInUri = "ims-aka"
)

// Defines values for HssAvType.
const (
	EAPAKA  HssAvType = "EAP_AKA"
	EPSAKA  HssAvType = "EPS_AKA"
	GBAAKA  HssAvType = "GBA_AKA"
	IMSAKA  HssAvType = "IMS_AKA"
	UMTSAKA HssAvType = "UMTS_AKA"
)

// Defines values for ImsVoPs.
const (
	HOMOGENEOUSNONSUPPORT   ImsVoPs = "HOMOGENEOUS_NON_SUPPORT"
	HOMOGENEOUSSUPPORT      ImsVoPs = "HOMOGENEOUS_SUPPORT"
	NONHOMOGENEOUSORUNKNOWN ImsVoPs = "NON_HOMOGENEOUS_OR_UNKNOWN"
)

// Defines values for IntegrityAlgorithm.
const (
	NIA0 IntegrityAlgorithm = "NIA0"
	NIA1 IntegrityAlgorithm = "NIA1"
	NIA2 IntegrityAlgorithm = "NIA2"
	NIA3 IntegrityAlgorithm = "NIA3"
)

// Defines values for IpReachability.
const (
	IPV4   IpReachability = "IPV4"
	IPV4V6 IpReachability = "IPV4V6"
	IPV6   IpReachability = "IPV6"
)

// Defines values for JobType.
const (
	IMMEDIATEMDTANDTRACE JobType = "IMMEDIATE_MDT_AND_TRACE"
	IMMEDIATEMDTONLY     JobType = "IMMEDIATE_MDT_ONLY"
	LOGGEDMBSFNMDT       JobType = "LOGGED_MBSFN_MDT"
	LOGGEDMDTONLY        JobType = "LOGGED_MDT_ONLY"
	RCEFREPORTSONLY      JobType = "RCEF_REPORTS_ONLY"
	RLFREPORTSONLY       JobType = "RLF_REPORTS_ONLY"
	TRACEONLY            JobType = "TRACE_ONLY"
)

// Defines values for KeyAmfType.
const (
	KAMF      KeyAmfType = "KAMF"
	KPRIMEAMF KeyAmfType = "KPRIMEAMF"
)

// Defines values for LcsClientClass.
const (
	ANONYMOUSLOCATIONSERVICE LcsClientClass = "ANONYMOUS_LOCATION_SERVICE"
	BROADCASTSERVICE         LcsClientClass = "BROADCAST_SERVICE"
	OMINHPLMN                LcsClientClass = "OM_IN_HPLMN"
	OMINVPLMN                LcsClientClass = "OM_IN_VPLMN"
	SPECIFICSERVICE          LcsClientClass = "SPECIFIC_SERVICE"
)

// Defines values for LcsMoServiceClass.
const (
	AUTONOMOUSSELFLOCATION LcsMoServiceClass = "AUTONOMOUS_SELF_LOCATION"
	BASICSELFLOCATION      LcsMoServiceClass = "BASIC_SELF_LOCATION"
	TRANSFERTOTHIRDPARTY   LcsMoServiceClass = "TRANSFER_TO_THIRD_PARTY"
)

// Defines values for LcsServiceAuth.
const (
	LcsServiceAuthLOCATIONALLOWEDWITHNOTIFICATION    LcsServiceAuth = "LOCATION_ALLOWED_WITH_NOTIFICATION"
	LcsServiceAuthLOCATIONALLOWEDWITHOUTNOTIFICATION LcsServiceAuth = "LOCATION_ALLOWED_WITHOUT_NOTIFICATION"
	LcsServiceAuthLOCATIONALLOWEDWITHOUTRESPONSE     LcsServiceAuth = "LOCATION_ALLOWED_WITHOUT_RESPONSE"
	LcsServiceAuthLOCATIONRESTRICTEDWITHOUTRESPONSE  LcsServiceAuth = "LOCATION_RESTRICTED_WITHOUT_RESPONSE"
	LcsServiceAuthNOTIFICATIONANDVERIFICATIONONLY    LcsServiceAuth = "NOTIFICATION_AND_VERIFICATION_ONLY"
	LcsServiceAuthNOTIFICATIONONLY                   LcsServiceAuth = "NOTIFICATION_ONLY"
)

// Defines values for LineType.
const (
	DSL LineType = "DSL"
	PON LineType = "PON"
)

// Defines values for LocationAccuracy.
const (
	LocationAccuracyCELLLEVEL  LocationAccuracy = "CELL_LEVEL"
	LocationAccuracyN3IWFLEVEL LocationAccuracy = "N3IWF_LEVEL"
	LocationAccuracyTALEVEL    LocationAccuracy = "TA_LEVEL"
	LocationAccuracyUEIP       LocationAccuracy = "UE_IP"
	LocationAccuracyUEPORT     LocationAccuracy = "UE_PORT"
)

// Defines values for LocationEvent.
const (
	ACTIVATIONOFDEFERREDLOCATION   LocationEvent = "ACTIVATION_OF_DEFERRED_LOCATION"
	CANCELLATIONOFDEFERREDLOCATION LocationEvent = "CANCELLATION_OF_DEFERRED_LOCATION"
	EMERGENCYCALLHANDOVER          LocationEvent = "EMERGENCY_CALL_HANDOVER"
	EMERGENCYCALLORIGINATION       LocationEvent = "EMERGENCY_CALL_ORIGINATION"
	EMERGENCYCALLRELEASE           LocationEvent = "EMERGENCY_CALL_RELEASE"
	UEMOBILITYFORDEFERREDLOCATION  LocationEvent = "UE_MOBILITY_FOR_DEFERRED_LOCATION"
)

// Defines values for LocationFilter.
const (
	LocationFilterCELLID  LocationFilter = "CELL_ID"
	LocationFilterGLI     LocationFilter = "GLI"
	LocationFilterN3IWF   LocationFilter = "N3IWF"
	LocationFilterTAI     LocationFilter = "TAI"
	LocationFilterTNAPID  LocationFilter = "TNAP_ID"
	LocationFilterTWAPID  LocationFilter = "TWAP_ID"
	LocationFilterUDPPORT LocationFilter = "UDP_PORT"
	LocationFilterUEIP    LocationFilter = "UE_IP"
)

// Defines values for LocationPrivacyInd.
const (
	LocationPrivacyIndLOCATIONALLOWED    LocationPrivacyInd = "LOCATION_ALLOWED"
	LocationPrivacyIndLOCATIONDISALLOWED LocationPrivacyInd = "LOCATION_DISALLOWED"
)

// Defines values for LocationPrivacyVerResult.
const (
	LocationPrivacyVerResultLOCATIONALLOWED    LocationPrivacyVerResult = "LOCATION_ALLOWED"
	LocationPrivacyVerResultLOCATIONNOTALLOWED LocationPrivacyVerResult = "LOCATION_NOT_ALLOWED"
	LocationPrivacyVerResultRESPONSETIMEOUT    LocationPrivacyVerResult = "RESPONSE_TIME_OUT"
)

// Defines values for LocationType.
const (
	CURRENTLOCATION              LocationType = "CURRENT_LOCATION"
	CURRENTORLASTKNOWNLOCATION   LocationType = "CURRENT_OR_LAST_KNOWN_LOCATION"
	DEFERREDLOCATION             LocationType = "DEFERRED_LOCATION"
	NOTIFICATIONVERIFICATIONONLY LocationType = "NOTIFICATION_VERIFICATION_ONLY"
)

// Defines values for LoggingDurationMdt.
const (
	LoggingDurationMdtN1200 LoggingDurationMdt = "1200"
	LoggingDurationMdtN2400 LoggingDurationMdt = "2400"
	LoggingDurationMdtN3600 LoggingDurationMdt = "3600"
	LoggingDurationMdtN5400 LoggingDurationMdt = "5400"
	LoggingDurationMdtN600  LoggingDurationMdt = "600"
	LoggingDurationMdtN7200 LoggingDurationMdt = "7200"
)

// Defines values for LoggingDurationNrMdt.
const (
	LoggingDurationNrMdtN1200 LoggingDurationNrMdt = "1200"
	LoggingDurationNrMdtN2400 LoggingDurationNrMdt = "2400"
	LoggingDurationNrMdtN3600 LoggingDurationNrMdt = "3600"
	LoggingDurationNrMdtN5400 LoggingDurationNrMdt = "5400"
	LoggingDurationNrMdtN600  LoggingDurationNrMdt = "600"
	LoggingDurationNrMdtN7200 LoggingDurationNrMdt = "7200"
)

// Defines values for LoggingIntervalMdt.
const (
	LoggingIntervalMdtN1024 LoggingIntervalMdt = "1024"
	LoggingIntervalMdtN128  LoggingIntervalMdt = "128"
	LoggingIntervalMdtN2048 LoggingIntervalMdt = "2048"
	LoggingIntervalMdtN256  LoggingIntervalMdt = "256"
	LoggingIntervalMdtN3072 LoggingIntervalMdt = "3072"
	LoggingIntervalMdtN4096 LoggingIntervalMdt = "4096"
	LoggingIntervalMdtN512  LoggingIntervalMdt = "512"
	LoggingIntervalMdtN6144 LoggingIntervalMdt = "6144"
)

// Defines values for LoggingIntervalNrMdt.
const (
	LoggingIntervalNrMdtInfinity LoggingIntervalNrMdt = "infinity"
	LoggingIntervalNrMdtN1024    LoggingIntervalNrMdt = "1024"
	LoggingIntervalNrMdtN128     LoggingIntervalNrMdt = "128"
	LoggingIntervalNrMdtN2048    LoggingIntervalNrMdt = "2048"
	LoggingIntervalNrMdtN256     LoggingIntervalNrMdt = "256"
	LoggingIntervalNrMdtN3072    LoggingIntervalNrMdt = "3072"
	LoggingIntervalNrMdtN320     LoggingIntervalNrMdt = "320"
	LoggingIntervalNrMdtN4096    LoggingIntervalNrMdt = "4096"
	LoggingIntervalNrMdtN512     LoggingIntervalNrMdt = "512"
	LoggingIntervalNrMdtN6144    LoggingIntervalNrMdt = "6144"
	LoggingIntervalNrMdtN640     LoggingIntervalNrMdt = "640"
)

// Defines values for LossOfConnectivityReason.
const (
	LossOfConnectivityReasonDEREGISTERED            LossOfConnectivityReason = "DEREGISTERED"
	LossOfConnectivityReasonMAXDETECTIONTIMEEXPIRED LossOfConnectivityReason = "MAX_DETECTION_TIME_EXPIRED"
	LossOfConnectivityReasonPURGED                  LossOfConnectivityReason = "PURGED"
)

// Defines values for MaPduIndication.
const (
	MAPDUNETWORKUPGRADEALLOWED MaPduIndication = "MA_PDU_NETWORK_UPGRADE_ALLOWED"
	MAPDUREQUEST               MaPduIndication = "MA_PDU_REQUEST"
)

// Defines values for MaReleaseIndication.
const (
	RELMAPDUOVER3GPP  MaReleaseIndication = "REL_MAPDU_OVER_3GPP"
	RELMAPDUOVERN3GPP MaReleaseIndication = "REL_MAPDU_OVER_N3GPP"
)

// Defines values for MaxIntegrityProtectedDataRate.
const (
	MAXUERATE MaxIntegrityProtectedDataRate = "MAX_UE_RATE"
	N64KBPS   MaxIntegrityProtectedDataRate = "64_KBPS"
)

// Defines values for MdtUserConsent.
const (
	CONSENTGIVEN    MdtUserConsent = "CONSENT_GIVEN"
	CONSENTNOTGIVEN MdtUserConsent = "CONSENT_NOT_GIVEN"
)

// Defines values for MeasurementLteForMdt.
const (
	MeasurementLteForMdtM1   MeasurementLteForMdt = "M1"
	MeasurementLteForMdtM2   MeasurementLteForMdt = "M2"
	MeasurementLteForMdtM3   MeasurementLteForMdt = "M3"
	MeasurementLteForMdtM4DL MeasurementLteForMdt = "M4_DL"
	MeasurementLteForMdtM4UL MeasurementLteForMdt = "M4_UL"
	MeasurementLteForMdtM5DL MeasurementLteForMdt = "M5_DL"
	MeasurementLteForMdtM5UL MeasurementLteForMdt = "M5_UL"
	MeasurementLteForMdtM6DL MeasurementLteForMdt = "M6_DL"
	MeasurementLteForMdtM6UL MeasurementLteForMdt = "M6_UL"
	MeasurementLteForMdtM7DL MeasurementLteForMdt = "M7_DL"
	MeasurementLteForMdtM7UL MeasurementLteForMdt = "M7_UL"
	MeasurementLteForMdtM8   MeasurementLteForMdt = "M8"
	MeasurementLteForMdtM9   MeasurementLteForMdt = "M9"
)

// Defines values for MeasurementNrForMdt.
const (
	MeasurementNrForMdtM1   MeasurementNrForMdt = "M1"
	MeasurementNrForMdtM2   MeasurementNrForMdt = "M2"
	MeasurementNrForMdtM3   MeasurementNrForMdt = "M3"
	MeasurementNrForMdtM4DL MeasurementNrForMdt = "M4_DL"
	MeasurementNrForMdtM4UL MeasurementNrForMdt = "M4_UL"
	MeasurementNrForMdtM5DL MeasurementNrForMdt = "M5_DL"
	MeasurementNrForMdtM5UL MeasurementNrForMdt = "M5_UL"
	MeasurementNrForMdtM6DL MeasurementNrForMdt = "M6_DL"
	MeasurementNrForMdtM6UL MeasurementNrForMdt = "M6_UL"
	MeasurementNrForMdtM7DL MeasurementNrForMdt = "M7_DL"
	MeasurementNrForMdtM7UL MeasurementNrForMdt = "M7_UL"
	MeasurementNrForMdtM8   MeasurementNrForMdt = "M8"
	MeasurementNrForMdtM9   MeasurementNrForMdt = "M9"
)

// Defines values for MeasurementPeriodLteMdt.
const (
	MeasurementPeriodLteMdtN1024  MeasurementPeriodLteMdt = "1024"
	MeasurementPeriodLteMdtN10240 MeasurementPeriodLteMdt = "10240"
	MeasurementPeriodLteMdtN1280  MeasurementPeriodLteMdt = "1280"
	MeasurementPeriodLteMdtN2048  MeasurementPeriodLteMdt = "2048"
	MeasurementPeriodLteMdtN2560  MeasurementPeriodLteMdt = "2560"
	MeasurementPeriodLteMdtN5120  MeasurementPeriodLteMdt = "5120"
	MeasurementPeriodLteMdtN60000 MeasurementPeriodLteMdt = "60000"
)

// Defines values for MediaComponentResourcesStatus.
const (
	MediaComponentResourcesStatusACTIVE   MediaComponentResourcesStatus = "ACTIVE"
	MediaComponentResourcesStatusINACTIVE MediaComponentResourcesStatus = "INACTIVE"
)

// Defines values for MediaType.
const (
	MediaTypeAPPLICATION MediaType = "APPLICATION"
	MediaTypeAUDIO       MediaType = "AUDIO"
	MediaTypeCONTROL     MediaType = "CONTROL"
	MediaTypeDATA        MediaType = "DATA"
	MediaTypeMESSAGE     MediaType = "MESSAGE"
	MediaTypeOTHER       MediaType = "OTHER"
	MediaTypeTEXT        MediaType = "TEXT"
	MediaTypeVIDEO       MediaType = "VIDEO"
)

// Defines values for MeteringMethod0.
const (
	DURATION       MeteringMethod0 = "DURATION"
	DURATIONVOLUME MeteringMethod0 = "DURATION_VOLUME"
	EVENT          MeteringMethod0 = "EVENT"
	VOLUME         MeteringMethod0 = "VOLUME"
)

// Defines values for MulticastAccessControl.
const (
	ALLOWED    MulticastAccessControl = "ALLOWED"
	NOTALLOWED MulticastAccessControl = "NOT_ALLOWED"
)

// Defines values for N1MessageClass.
const (
	N1MessageClassLCS   N1MessageClass = "LCS"
	N1MessageClassLPP   N1MessageClass = "LPP"
	N1MessageClassN5GMM N1MessageClass = "5GMM"
	N1MessageClassSM    N1MessageClass = "SM"
	N1MessageClassSMS   N1MessageClass = "SMS"
	N1MessageClassUPDP  N1MessageClass = "UPDP"
)

// Defines values for N1N2MessageTransferCause.
const (
	ATTEMPTINGTOREACHUE                N1N2MessageTransferCause = "ATTEMPTING_TO_REACH_UE"
	N1MSGNOTTRANSFERRED                N1N2MessageTransferCause = "N1_MSG_NOT_TRANSFERRED"
	N1N2TRANSFERINITIATED              N1N2MessageTransferCause = "N1_N2_TRANSFER_INITIATED"
	TEMPORARYREJECTHANDOVERONGOING     N1N2MessageTransferCause = "TEMPORARY_REJECT_HANDOVER_ONGOING"
	TEMPORARYREJECTREGISTRATIONONGOING N1N2MessageTransferCause = "TEMPORARY_REJECT_REGISTRATION_ONGOING"
	UENOTREACHABLEFORSESSION           N1N2MessageTransferCause = "UE_NOT_REACHABLE_FOR_SESSION"
	UENOTRESPONDING                    N1N2MessageTransferCause = "UE_NOT_RESPONDING"
	WAITINGFORASYNCHRONOUSTRANSFER     N1N2MessageTransferCause = "WAITING_FOR_ASYNCHRONOUS_TRANSFER"
)

// Defines values for N2InfoNotifyReason.
const (
	HANDOVERCOMPLETED N2InfoNotifyReason = "HANDOVER_COMPLETED"
)

// Defines values for N2InformationClass.
const (
	N2InformationClassNRPPa   N2InformationClass = "NRPPa"
	N2InformationClassPWS     N2InformationClass = "PWS"
	N2InformationClassPWSBCAL N2InformationClass = "PWS-BCAL"
	N2InformationClassPWSRF   N2InformationClass = "PWS-RF"
	N2InformationClassRAN     N2InformationClass = "RAN"
	N2InformationClassSM      N2InformationClass = "SM"
	N2InformationClassV2X     N2InformationClass = "V2X"
)

// Defines values for N2InformationTransferResult.
const (
	N2INFOTRANSFERINITIATED N2InformationTransferResult = "N2_INFO_TRANSFER_INITIATED"
)

// Defines values for N2SmInfoType.
const (
	N2SmInfoTypeHANDOVERCMD          N2SmInfoType = "HANDOVER_CMD"
	N2SmInfoTypeHANDOVERPREPFAIL     N2SmInfoType = "HANDOVER_PREP_FAIL"
	N2SmInfoTypeHANDOVERREQACK       N2SmInfoType = "HANDOVER_REQ_ACK"
	N2SmInfoTypeHANDOVERREQUIRED     N2SmInfoType = "HANDOVER_REQUIRED"
	N2SmInfoTypeHANDOVERRESALLOCFAIL N2SmInfoType = "HANDOVER_RES_ALLOC_FAIL"
	N2SmInfoTypePATHSWITCHREQ        N2SmInfoType = "PATH_SWITCH_REQ"
	N2SmInfoTypePATHSWITCHREQACK     N2SmInfoType = "PATH_SWITCH_REQ_ACK"
	N2SmInfoTypePATHSWITCHREQFAIL    N2SmInfoType = "PATH_SWITCH_REQ_FAIL"
	N2SmInfoTypePATHSWITCHSETUPFAIL  N2SmInfoType = "PATH_SWITCH_SETUP_FAIL"
	N2SmInfoTypePDURESMODCFM         N2SmInfoType = "PDU_RES_MOD_CFM"
	N2SmInfoTypePDURESMODFAIL        N2SmInfoType = "PDU_RES_MOD_FAIL"
	N2SmInfoTypePDURESMODIND         N2SmInfoType = "PDU_RES_MOD_IND"
	N2SmInfoTypePDURESMODINDFAIL     N2SmInfoType = "PDU_RES_MOD_IND_FAIL"
	N2SmInfoTypePDURESMODREQ         N2SmInfoType = "PDU_RES_MOD_REQ"
	N2SmInfoTypePDURESMODRSP         N2SmInfoType = "PDU_RES_MOD_RSP"
	N2SmInfoTypePDURESNTY            N2SmInfoType = "PDU_RES_NTY"
	N2SmInfoTypePDURESNTYREL         N2SmInfoType = "PDU_RES_NTY_REL"
	N2SmInfoTypePDURESRELCMD         N2SmInfoType = "PDU_RES_REL_CMD"
	N2SmInfoTypePDURESRELRSP         N2SmInfoType = "PDU_RES_REL_RSP"
	N2SmInfoTypePDURESSETUPFAIL      N2SmInfoType = "PDU_RES_SETUP_FAIL"
	N2SmInfoTypePDURESSETUPREQ       N2SmInfoType = "PDU_RES_SETUP_REQ"
	N2SmInfoTypePDURESSETUPRSP       N2SmInfoType = "PDU_RES_SETUP_RSP"
	N2SmInfoTypeSECONDARYRATUSAGE    N2SmInfoType = "SECONDARY_RAT_USAGE"
	N2SmInfoTypeUECONTEXTRESUMEREQ   N2SmInfoType = "UE_CONTEXT_RESUME_REQ"
	N2SmInfoTypeUECONTEXTRESUMERSP   N2SmInfoType = "UE_CONTEXT_RESUME_RSP"
	N2SmInfoTypeUECONTEXTSUSPENDREQ  N2SmInfoType = "UE_CONTEXT_SUSPEND_REQ"
)

// Defines values for N4MessageType.
const (
	PFCPSESDELREQ N4MessageType = "PFCP_SES_DEL_REQ"
	PFCPSESDELRSP N4MessageType = "PFCP_SES_DEL_RSP"
	PFCPSESESTREQ N4MessageType = "PFCP_SES_EST_REQ"
	PFCPSESESTRSP N4MessageType = "PFCP_SES_EST_RSP"
	PFCPSESMODREQ N4MessageType = "PFCP_SES_MOD_REQ"
	PFCPSESMODRSP N4MessageType = "PFCP_SES_MOD_RSP"
	PFCPSESREPREQ N4MessageType = "PFCP_SES_REP_REQ"
	PFCPSESREPRSP N4MessageType = "PFCP_SES_REP_RSP"
)

// Defines values for NFServiceStatus.
const (
	NFServiceStatusREGISTERED     NFServiceStatus = "REGISTERED"
	NFServiceStatusSUSPENDED      NFServiceStatus = "SUSPENDED"
	NFServiceStatusUNDISCOVERABLE NFServiceStatus = "UNDISCOVERABLE"
)

// Defines values for NFStatus.
const (
	NFStatusREGISTERED     NFStatus = "REGISTERED"
	NFStatusSUSPENDED      NFStatus = "SUSPENDED"
	NFStatusUNDISCOVERABLE NFStatus = "UNDISCOVERABLE"
)

// Defines values for NFType.
const (
	NFTypeAF     NFType = "AF"
	NFTypeAMF    NFType = "AMF"
	NFTypeAUSF   NFType = "AUSF"
	NFTypeBSF    NFType = "BSF"
	NFTypeCBCF   NFType = "CBCF"
	NFTypeCEF    NFType = "CEF"
	NFTypeCHF    NFType = "CHF"
	NFTypeDRA    NFType = "DRA"
	NFTypeGMLC   NFType = "GMLC"
	NFTypeHSS    NFType = "HSS"
	NFTypeICSCF  NFType = "ICSCF"
	NFTypeIMSAS  NFType = "IMS_AS"
	NFTypeLMF    NFType = "LMF"
	NFTypeMME    NFType = "MME"
	NFTypeN3IWF  NFType = "N3IWF"
	NFTypeN5GEIR NFType = "5G_EIR"
	NFTypeNEF    NFType = "NEF"
	NFTypeNRF    NFType = "NRF"
	NFTypeNSSAAF NFType = "NSSAAF"
	NFTypeNSSF   NFType = "NSSF"
	NFTypeNWDAF  NFType = "NWDAF"
	NFTypePCF    NFType = "PCF"
	NFTypePCSCF  NFType = "PCSCF"
	NFTypeSCEF   NFType = "SCEF"
	NFTypeSCP    NFType = "SCP"
	NFTypeSCSAS  NFType = "SCSAS"
	NFTypeSCSCF  NFType = "SCSCF"
	NFTypeSEPP   NFType = "SEPP"
	NFTypeSMF    NFType = "SMF"
	NFTypeSMSF   NFType = "SMSF"
	NFTypeSORAF  NFType = "SOR_AF"
	NFTypeSPAF   NFType = "SPAF"
	NFTypeUCMF   NFType = "UCMF"
	NFTypeUDM    NFType = "UDM"
	NFTypeUDR    NFType = "UDR"
	NFTypeUDSF   NFType = "UDSF"
	NFTypeUPF    NFType = "UPF"
)

// Defines values for NefCondConditionType.
const (
	NEFCOND NefCondConditionType = "NEF_COND"
)

// Defines values for NetLocAccessSupport.
const (
	ANRNOTSUPPORTED NetLocAccessSupport = "ANR_NOT_SUPPORTED"
	LOCNOTSUPPORTED NetLocAccessSupport = "LOC_NOT_SUPPORTED"
	TZRNOTSUPPORTED NetLocAccessSupport = "TZR_NOT_SUPPORTED"
)

// Defines values for NfGroupCondNfType.
const (
	NfGroupCondNfTypeAUSF NfGroupCondNfType = "AUSF"
	NfGroupCondNfTypeCHF  NfGroupCondNfType = "CHF"
	NfGroupCondNfTypePCF  NfGroupCondNfType = "PCF"
	NfGroupCondNfTypeUDM  NfGroupCondNfType = "UDM"
	NfGroupCondNfTypeUDR  NfGroupCondNfType = "UDR"
)

// Defines values for NgapIeType.
const (
	NgapIeTypeEARLYSTATUSTRANSCONTAINER NgapIeType = "EARLY_STATUS_TRANS_CONTAINER"
	NgapIeTypeHANDOVERCMD               NgapIeType = "HANDOVER_CMD"
	NgapIeTypeHANDOVERPREPFAIL          NgapIeType = "HANDOVER_PREP_FAIL"
	NgapIeTypeHANDOVERREQUIRED          NgapIeType = "HANDOVER_REQUIRED"
	NgapIeTypeNRPPAPDU                  NgapIeType = "NRPPA_PDU"
	NgapIeTypePC5QOSPARA                NgapIeType = "PC5_QOS_PARA"
	NgapIeTypePDURESMODREQ              NgapIeType = "PDU_RES_MOD_REQ"
	NgapIeTypePDURESRELCMD              NgapIeType = "PDU_RES_REL_CMD"
	NgapIeTypePDURESSETUPREQ            NgapIeType = "PDU_RES_SETUP_REQ"
	NgapIeTypeRANSTATUSTRANSCONTAINER   NgapIeType = "RAN_STATUS_TRANS_CONTAINER"
	NgapIeTypeRIMINFOTRANSFER           NgapIeType = "RIM_INFO_TRANSFER"
	NgapIeTypeSECONDARYRATUSAGE         NgapIeType = "SECONDARY_RAT_USAGE"
	NgapIeTypeSONCONFIGTRANSFER         NgapIeType = "SON_CONFIG_TRANSFER"
	NgapIeTypeSRCTOTARCONTAINER         NgapIeType = "SRC_TO_TAR_CONTAINER"
	NgapIeTypeTARTOSRCCONTAINER         NgapIeType = "TAR_TO_SRC_CONTAINER"
	NgapIeTypeTARTOSRCFAILCONTAINER     NgapIeType = "TAR_TO_SRC_FAIL_CONTAINER"
	NgapIeTypeUERADIOCAPABILITY         NgapIeType = "UE_RADIO_CAPABILITY"
)

// Defines values for NiddCause.
const (
	DNNREMOVED             NiddCause = "DNN_REMOVED"
	SUBSCRIPTIONWITHDRAWAL NiddCause = "SUBSCRIPTION_WITHDRAWAL"
)

// Defines values for NodeType.
const (
	AUSF          NodeType = "AUSF"
	BSF           NodeType = "BSF"
	GANAAASERVER  NodeType = "GAN_AAA_SERVER"
	MME           NodeType = "MME"
	SCSCF         NodeType = "S_CSCF"
	SGSN          NodeType = "SGSN"
	VLR           NodeType = "VLR"
	WLANAAASERVER NodeType = "WLAN_AAA_SERVER"
)

// Defines values for NotificationCause.
const (
	QOSFULFILLED      NotificationCause = "QOS_FULFILLED"
	QOSNOTFULFILLED   NotificationCause = "QOS_NOT_FULFILLED"
	UPSECFULFILLED    NotificationCause = "UP_SEC_FULFILLED"
	UPSECNOTFULFILLED NotificationCause = "UP_SEC_NOT_FULFILLED"
)

// Defines values for NotificationControl.
const (
	NOTREQUESTED NotificationControl = "NOT_REQUESTED"
	REQUESTED    NotificationControl = "REQUESTED"
)

// Defines values for NotificationControlIndication.
const (
	DDDSTATUS  NotificationControlIndication = "DDD_STATUS"
	DDNFAILURE NotificationControlIndication = "DDN_FAILURE"
)

// Defines values for NotificationEventType.
const (
	NFDEREGISTERED   NotificationEventType = "NF_DEREGISTERED"
	NFPROFILECHANGED NotificationEventType = "NF_PROFILE_CHANGED"
	NFREGISTERED     NotificationEventType = "NF_REGISTERED"
)

// Defines values for NotificationMethod.
const (
	NotificationMethodONETIME          NotificationMethod = "ONE_TIME"
	NotificationMethodONEVENTDETECTION NotificationMethod = "ON_EVENT_DETECTION"
	NotificationMethodPERIODIC         NotificationMethod = "PERIODIC"
)

// Defines values for NotificationType.
const (
	DATACHANGENOTIFICATION     NotificationType = "DATA_CHANGE_NOTIFICATION"
	DATAREMOVALNOTIFICATION    NotificationType = "DATA_REMOVAL_NOTIFICATION"
	LCSKEYDELIVERYNOTIFICATION NotificationType = "LCS_KEY_DELIVERY_NOTIFICATION"
	LOCATIONNOTIFICATION       NotificationType = "LOCATION_NOTIFICATION"
	LOCATIONUPDATENOTIFICATION NotificationType = "LOCATION_UPDATE_NOTIFICATION"
	N1MESSAGES                 NotificationType = "N1_MESSAGES"
	N2INFORMATION              NotificationType = "N2_INFORMATION"
	NSSAAREAUTHNOTIFICATION    NotificationType = "NSSAA_REAUTH_NOTIFICATION"
	NSSAAREVOCNOTIFICATION     NotificationType = "NSSAA_REVOC_NOTIFICATION"
)

// Defines values for NssfEventType.
const (
	SNSSAISTATUSCHANGEREPORT NssfEventType = "SNSSAI_STATUS_CHANGE_REPORT"
)

// Defines values for NwdafCondConditionType.
const (
	NWDAFCOND NwdafCondConditionType = "NWDAF_COND"
)

// Defines values for OdbPacketServices.
const (
	ALLPACKETSERVICES   OdbPacketServices = "ALL_PACKET_SERVICES"
	ROAMERACCESSHPLMNAP OdbPacketServices = "ROAMER_ACCESS_HPLMN_AP"
	ROAMERACCESSVPLMNAP OdbPacketServices = "ROAMER_ACCESS_VPLMN_AP"
)

// Defines values for OperationMode.
const (
	NBN1 OperationMode = "NB_N1"
	NBS1 OperationMode = "NB_S1"
	WBN1 OperationMode = "WB_N1"
	WBS1 OperationMode = "WB_S1"
)

// Defines values for OperatorSpecificDataContainerDataType.
const (
	Boolean OperatorSpecificDataContainerDataType = "boolean"
	Integer OperatorSpecificDataContainerDataType = "integer"
	Number  OperatorSpecificDataContainerDataType = "number"
	Object  OperatorSpecificDataContainerDataType = "object"
	String  OperatorSpecificDataContainerDataType = "string"
)

// Defines values for PatchOperation.
const (
	Add     PatchOperation = "add"
	Copy    PatchOperation = "copy"
	Move    PatchOperation = "move"
	Remove  PatchOperation = "remove"
	Replace PatchOperation = "replace"
	Test    PatchOperation = "test"
)

// Defines values for Pc5Capability.
const (
	LTENRPC5 Pc5Capability = "LTE_NR_PC5"
	LTEPC5   Pc5Capability = "LTE_PC5"
	NRPC5    Pc5Capability = "NR_PC5"
)

// Defines values for PcEvent.
const (
	PcEventACTYCH PcEvent = "AC_TY_CH"
	PcEventPLMNCH PcEvent = "PLMN_CH"
)

// Defines values for PdnConnectivityStatus.
const (
	PdnConnectivityStatusESTABLISHED PdnConnectivityStatus = "ESTABLISHED"
	PdnConnectivityStatusRELEASED    PdnConnectivityStatus = "RELEASED"
)

// Defines values for PduSessionContinuityInd.
const (
	MAINTAINPDUSESSION  PduSessionContinuityInd = "MAINTAIN_PDUSESSION"
	RECONNECTPDUSESSION PduSessionContinuityInd = "RECONNECT_PDUSESSION"
	RELEASEPDUSESSION   PduSessionContinuityInd = "RELEASE_PDUSESSION"
)

// Defines values for PduSessionRelCause.
const (
	PduSessionRelCausePSTOCSHO PduSessionRelCause = "PS_TO_CS_HO"
)

// Defines values for PduSessionStatus.
const (
	PduSessionStatusACTIVE   PduSessionStatus = "ACTIVE"
	PduSessionStatusRELEASED PduSessionStatus = "RELEASED"
)

// Defines values for PduSessionType.
const (
	PduSessionTypeETHERNET     PduSessionType = "ETHERNET"
	PduSessionTypeIPV4         PduSessionType = "IPV4"
	PduSessionTypeIPV4V6       PduSessionType = "IPV4V6"
	PduSessionTypeIPV6         PduSessionType = "IPV6"
	PduSessionTypeUNSTRUCTURED PduSessionType = "UNSTRUCTURED"
)

// Defines values for PeriodicCommunicationIndicator.
const (
	ONDEMAND      PeriodicCommunicationIndicator = "ON_DEMAND"
	PIORIODICALLY PeriodicCommunicationIndicator = "PIORIODICALLY"
)

// Defines values for Periodicity.
const (
	DAILY   Periodicity = "DAILY"
	HOURLY  Periodicity = "HOURLY"
	MONTHLY Periodicity = "MONTHLY"
	WEEKLY  Periodicity = "WEEKLY"
	YEARLY  Periodicity = "YEARLY"
)

// Defines values for PolicyControlRequestTrigger.
const (
	PolicyControlRequestTriggerACTYCH                        PolicyControlRequestTrigger = "AC_TY_CH"
	PolicyControlRequestTriggerANCHCOR                       PolicyControlRequestTrigger = "AN_CH_COR"
	PolicyControlRequestTriggerANINFO                        PolicyControlRequestTrigger = "AN_INFO"
	PolicyControlRequestTriggerAPPSTA                        PolicyControlRequestTrigger = "APP_STA"
	PolicyControlRequestTriggerAPPSTO                        PolicyControlRequestTrigger = "APP_STO"
	PolicyControlRequestTriggerAUTHPROFCH                    PolicyControlRequestTrigger = "AUTH_PROF_CH"
	PolicyControlRequestTriggerCMSESFAIL                     PolicyControlRequestTrigger = "CM_SES_FAIL"
	PolicyControlRequestTriggerDDNDELIVERYSTATUS             PolicyControlRequestTrigger = "DDN_DELIVERY_STATUS"
	PolicyControlRequestTriggerDDNDELIVERYSTATUSCANCELLATION PolicyControlRequestTrigger = "DDN_DELIVERY_STATUS_CANCELLATION"
	PolicyControlRequestTriggerDDNFAILURE                    PolicyControlRequestTrigger = "DDN_FAILURE"
	PolicyControlRequestTriggerDDNFAILURECANCELLATION        PolicyControlRequestTrigger = "DDN_FAILURE_CANCELLATION"
	PolicyControlRequestTriggerDEFQOSCH                      PolicyControlRequestTrigger = "DEF_QOS_CH"
	PolicyControlRequestTriggerEPSFALLBACK                   PolicyControlRequestTrigger = "EPS_FALLBACK"
	PolicyControlRequestTriggerGROUPIDLISTCHG                PolicyControlRequestTrigger = "GROUP_ID_LIST_CHG"
	PolicyControlRequestTriggerMAPDU                         PolicyControlRequestTrigger = "MA_PDU"
	PolicyControlRequestTriggerN5GRGJOIN                     PolicyControlRequestTrigger = "5G_RG_JOIN"
	PolicyControlRequestTriggerN5GRGLEAVE                    PolicyControlRequestTrigger = "5G_RG_LEAVE"
	PolicyControlRequestTriggerNOCREDIT                      PolicyControlRequestTrigger = "NO_CREDIT"
	PolicyControlRequestTriggerNUMOFPACKETFILTER             PolicyControlRequestTrigger = "NUM_OF_PACKET_FILTER"
	PolicyControlRequestTriggerPLMNCH                        PolicyControlRequestTrigger = "PLMN_CH"
	PolicyControlRequestTriggerPRACH                         PolicyControlRequestTrigger = "PRA_CH"
	PolicyControlRequestTriggerPSDAOFF                       PolicyControlRequestTrigger = "PS_DA_OFF"
	PolicyControlRequestTriggerQOSMONITORING                 PolicyControlRequestTrigger = "QOS_MONITORING"
	PolicyControlRequestTriggerQOSNOTIF                      PolicyControlRequestTrigger = "QOS_NOTIF"
	PolicyControlRequestTriggerRATTYCH                       PolicyControlRequestTrigger = "RAT_TY_CH"
	PolicyControlRequestTriggerREALLOOFCREDIT                PolicyControlRequestTrigger = "REALLO_OF_CREDIT"
	PolicyControlRequestTriggerREFQOSINDCH                   PolicyControlRequestTrigger = "REF_QOS_IND_CH"
	PolicyControlRequestTriggerRESMORE                       PolicyControlRequestTrigger = "RES_MO_RE"
	PolicyControlRequestTriggerRESRELEASE                    PolicyControlRequestTrigger = "RES_RELEASE"
	PolicyControlRequestTriggerRETIMEOUT                     PolicyControlRequestTrigger = "RE_TIMEOUT"
	PolicyControlRequestTriggerSAREACH                       PolicyControlRequestTrigger = "SAREA_CH"
	PolicyControlRequestTriggerSCELLCH                       PolicyControlRequestTrigger = "SCELL_CH"
	PolicyControlRequestTriggerSCNNCH                        PolicyControlRequestTrigger = "SCNN_CH"
	PolicyControlRequestTriggerSEAMBRCH                      PolicyControlRequestTrigger = "SE_AMBR_CH"
	PolicyControlRequestTriggerSUCCRESALLO                   PolicyControlRequestTrigger = "SUCC_RES_ALLO"
	PolicyControlRequestTriggerTSNBRIDGEINFO                 PolicyControlRequestTrigger = "TSN_BRIDGE_INFO"
	PolicyControlRequestTriggerUEIPCH                        PolicyControlRequestTrigger = "UE_IP_CH"
	PolicyControlRequestTriggerUEMACCH                       PolicyControlRequestTrigger = "UE_MAC_CH"
	PolicyControlRequestTriggerUESTATUSRESUME                PolicyControlRequestTrigger = "UE_STATUS_RESUME"
	PolicyControlRequestTriggerUETZCH                        PolicyControlRequestTrigger = "UE_TZ_CH"
	PolicyControlRequestTriggerUSRE                          PolicyControlRequestTrigger = "US_RE"
	PolicyControlRequestTriggerVPLMNQOSCH                    PolicyControlRequestTrigger = "VPLMN_QOS_CH"
)

// Defines values for PolicyDecisionFailureCode.
const (
	CHGDECSERR     PolicyDecisionFailureCode = "CHG_DECS_ERR"
	CONDATAERR     PolicyDecisionFailureCode = "CON_DATA_ERR"
	QOSDECSERR     PolicyDecisionFailureCode = "QOS_DECS_ERR"
	QOSMONDECSERR  PolicyDecisionFailureCode = "QOS_MON_DECS_ERR"
	TRACTRLDECSERR PolicyDecisionFailureCode = "TRA_CTRL_DECS_ERR"
	USAMONDECSERR  PolicyDecisionFailureCode = "USA_MON_DECS_ERR"
)

// Defines values for PolicyReqTrigger.
const (
	ACCESSTYPECHANGE   PolicyReqTrigger = "ACCESS_TYPE_CHANGE"
	ALLOWEDNSSAICHANGE PolicyReqTrigger = "ALLOWED_NSSAI_CHANGE"
	CONSTATECHANGE     PolicyReqTrigger = "CON_STATE_CHANGE"
	LOCATIONCHANGE     PolicyReqTrigger = "LOCATION_CHANGE"
	PLMNCHANGE         PolicyReqTrigger = "PLMN_CHANGE"
	PRACHANGE          PolicyReqTrigger = "PRA_CHANGE"
	SMFSELECTCHANGE    PolicyReqTrigger = "SMF_SELECT_CHANGE"
)

// Defines values for PositioningMethodMdt.
const (
	ECELLID PositioningMethodMdt = "E_CELL_ID"
	GNSS    PositioningMethodMdt = "GNSS"
)

// Defines values for PreemptionCapability.
const (
	PreemptionCapabilityMAYPREEMPT PreemptionCapability = "MAY_PREEMPT"
	PreemptionCapabilityNOTPREEMPT PreemptionCapability = "NOT_PREEMPT"
)

// Defines values for PreemptionCapabilityRm.
const (
	PreemptionCapabilityRmMAYPREEMPT PreemptionCapabilityRm = "MAY_PREEMPT"
	PreemptionCapabilityRmNOTPREEMPT PreemptionCapabilityRm = "NOT_PREEMPT"
)

// Defines values for PreemptionControlInformation.
const (
	PreemptionControlInformationHIGHESTBW   PreemptionControlInformation = "HIGHEST_BW"
	PreemptionControlInformationLEASTRECENT PreemptionControlInformation = "LEAST_RECENT"
	PreemptionControlInformationMOSTRECENT  PreemptionControlInformation = "MOST_RECENT"
)

// Defines values for PreemptionControlInformationRm.
const (
	PreemptionControlInformationRmHIGHESTBW   PreemptionControlInformationRm = "HIGHEST_BW"
	PreemptionControlInformationRmLEASTRECENT PreemptionControlInformationRm = "LEAST_RECENT"
	PreemptionControlInformationRmMOSTRECENT  PreemptionControlInformationRm = "MOST_RECENT"
)

// Defines values for PreemptionVulnerability.
const (
	PreemptionVulnerabilityNOTPREEMPTABLE PreemptionVulnerability = "NOT_PREEMPTABLE"
	PreemptionVulnerabilityPREEMPTABLE    PreemptionVulnerability = "PREEMPTABLE"
)

// Defines values for PreemptionVulnerabilityRm.
const (
	PreemptionVulnerabilityRmNOTPREEMPTABLE PreemptionVulnerabilityRm = "NOT_PREEMPTABLE"
	PreemptionVulnerabilityRmPREEMPTABLE    PreemptionVulnerabilityRm = "PREEMPTABLE"
)

// Defines values for PresenceState.
const (
	PresenceStateINACTIVE  PresenceState = "INACTIVE"
	PresenceStateINAREA    PresenceState = "IN_AREA"
	PresenceStateOUTOFAREA PresenceState = "OUT_OF_AREA"
	PresenceStateUNKNOWN   PresenceState = "UNKNOWN"
)

// Defines values for PrioritySharingIndicator.
const (
	PrioritySharingIndicatorDISABLED PrioritySharingIndicator = "DISABLED"
	PrioritySharingIndicatorENABLED  PrioritySharingIndicator = "ENABLED"
)

// Defines values for PrivacyCheckRelatedAction.
const (
	PrivacyCheckRelatedActionLOCATIONALLOWEDWITHNOTIFICATION    PrivacyCheckRelatedAction = "LOCATION_ALLOWED_WITH_NOTIFICATION"
	PrivacyCheckRelatedActionLOCATIONALLOWEDWITHOUTNOTIFICATION PrivacyCheckRelatedAction = "LOCATION_ALLOWED_WITHOUT_NOTIFICATION"
	PrivacyCheckRelatedActionLOCATIONALLOWEDWITHOUTRESPONSE     PrivacyCheckRelatedAction = "LOCATION_ALLOWED_WITHOUT_RESPONSE"
	PrivacyCheckRelatedActionLOCATIONNOTALLOWED                 PrivacyCheckRelatedAction = "LOCATION_NOT_ALLOWED"
	PrivacyCheckRelatedActionLOCATIONRESTRICTEDWITHOUTRESPONSE  PrivacyCheckRelatedAction = "LOCATION_RESTRICTED_WITHOUT_RESPONSE"
)

// Defines values for ProtectionResult.
const (
	NOTPERFORMED ProtectionResult = "NOT_PERFORMED"
	PERFORMED    ProtectionResult = "PERFORMED"
)

// Defines values for PsaIndication.
const (
	PSAINSERTED     PsaIndication = "PSA_INSERTED"
	PSAINSERTEDONLY PsaIndication = "PSA_INSERTED_ONLY"
	PSAREMOVED      PsaIndication = "PSA_REMOVED"
	PSAREMOVEDONLY  PsaIndication = "PSA_REMOVED_ONLY"
)

// Defines values for QosFlowAccessType.
const (
	QosFlowAccessTypeN3GPP           QosFlowAccessType = "3GPP"
	QosFlowAccessTypeN3GPPANDNON3GPP QosFlowAccessType = "3GPP_AND_NON_3GPP"
	QosFlowAccessTypeNON3GPP         QosFlowAccessType = "NON_3GPP"
)

// Defines values for QosFlowUsage.
const (
	QosFlowUsageGENERAL QosFlowUsage = "GENERAL"
	QosFlowUsageIMSSIG  QosFlowUsage = "IMS_SIG"
)

// Defines values for QosMonitoringReq.
const (
	BOTH QosMonitoringReq = "BOTH"
	DL   QosMonitoringReq = "DL"
	NONE QosMonitoringReq = "NONE"
	UL   QosMonitoringReq = "UL"
)

// Defines values for QosNotifType.
const (
	GUARANTEED    QosNotifType = "GUARANTEED"
	NOTGUARANTEED QosNotifType = "NOT_GUARANTEED"
)

// Defines values for QosResourceType.
const (
	CRITICALGBR    QosResourceType = "CRITICAL_GBR"
	NONCRITICALGBR QosResourceType = "NON_CRITICAL_GBR"
	NONGBR         QosResourceType = "NON_GBR"
)

// Defines values for RatSelector.
const (
	RatSelectorEUTRA RatSelector = "E-UTRA"
	RatSelectorNR    RatSelector = "NR"
)

// Defines values for RatType.
const (
	EUTRA         RatType = "EUTRA"
	EUTRAU        RatType = "EUTRA_U"
	GERA          RatType = "GERA"
	LTEM          RatType = "LTE-M"
	NBIOT         RatType = "NBIOT"
	NR            RatType = "NR"
	NRU           RatType = "NR_U"
	TRUSTEDN3GA   RatType = "TRUSTED_N3GA"
	TRUSTEDWLAN   RatType = "TRUSTED_WLAN"
	UTRA          RatType = "UTRA"
	VIRTUAL       RatType = "VIRTUAL"
	WIRELINE      RatType = "WIRELINE"
	WIRELINEBBF   RatType = "WIRELINE_BBF"
	WIRELINECABLE RatType = "WIRELINE_CABLE"
	WLAN          RatType = "WLAN"
)

// Defines values for ReachabilityFilter.
const (
	UEREACHABILITYSTATUSCHANGE ReachabilityFilter = "UE_REACHABILITY_STATUS_CHANGE"
	UEREACHABLEDLTRAFFIC       ReachabilityFilter = "UE_REACHABLE_DL_TRAFFIC"
)

// Defines values for ReachabilityForSmsConfiguration.
const (
	REACHABILITYFORSMSOVERIP  ReachabilityForSmsConfiguration = "REACHABILITY_FOR_SMS_OVER_IP"
	REACHABILITYFORSMSOVERNAS ReachabilityForSmsConfiguration = "REACHABILITY_FOR_SMS_OVER_NAS"
)

// Defines values for RedirectAddressType.
const (
	IPV4ADDR RedirectAddressType = "IPV4_ADDR"
	IPV6ADDR RedirectAddressType = "IPV6_ADDR"
	SIPURI   RedirectAddressType = "SIP_URI"
	URL      RedirectAddressType = "URL"
)

// Defines values for ReflectiveQoSAttribute.
const (
	NORQOS ReflectiveQoSAttribute = "NO_RQOS"
	RQOS   ReflectiveQoSAttribute = "RQOS"
)

// Defines values for RegistrationDataSetName.
const (
	RegistrationDataSetNameAMF3GPP        RegistrationDataSetName = "AMF_3GPP"
	RegistrationDataSetNameAMFNON3GPP     RegistrationDataSetName = "AMF_NON_3GPP"
	RegistrationDataSetNameSMFPDUSESSIONS RegistrationDataSetName = "SMF_PDU_SESSIONS"
	RegistrationDataSetNameSMSF3GPP       RegistrationDataSetName = "SMSF_3GPP"
	RegistrationDataSetNameSMSFNON3GPP    RegistrationDataSetName = "SMSF_NON_3GPP"
)

// Defines values for RegistrationReason.
const (
	RegistrationReasonSMFCONTEXTTRANSFERRED RegistrationReason = "SMF_CONTEXT_TRANSFERRED"
)

// Defines values for ReportAmountMdt.
const (
	Infinity ReportAmountMdt = "infinity"
	N1       ReportAmountMdt = "1"
	N16      ReportAmountMdt = "16"
	N2       ReportAmountMdt = "2"
	N32      ReportAmountMdt = "32"
	N4       ReportAmountMdt = "4"
	N64      ReportAmountMdt = "64"
	N8       ReportAmountMdt = "8"
)

// Defines values for ReportIntervalMdt.
const (
	ReportIntervalMdtN1024   ReportIntervalMdt = "1024"
	ReportIntervalMdtN10240  ReportIntervalMdt = "10240"
	ReportIntervalMdtN120    ReportIntervalMdt = "120"
	ReportIntervalMdtN18e06  ReportIntervalMdt = "1.8e+06"
	ReportIntervalMdtN2048   ReportIntervalMdt = "2048"
	ReportIntervalMdtN240    ReportIntervalMdt = "240"
	ReportIntervalMdtN360000 ReportIntervalMdt = "360000"
	ReportIntervalMdtN36e06  ReportIntervalMdt = "3.6e+06"
	ReportIntervalMdtN480    ReportIntervalMdt = "480"
	ReportIntervalMdtN5120   ReportIntervalMdt = "5120"
	ReportIntervalMdtN60000  ReportIntervalMdt = "60000"
	ReportIntervalMdtN640    ReportIntervalMdt = "640"
	ReportIntervalMdtN720000 ReportIntervalMdt = "720000"
)

// Defines values for ReportIntervalNrMdt.
const (
	N1024   ReportIntervalNrMdt = "1024"
	N10240  ReportIntervalNrMdt = "10240"
	N120    ReportIntervalNrMdt = "120"
	N18e06  ReportIntervalNrMdt = "1.8e+06"
	N2048   ReportIntervalNrMdt = "2048"
	N20480  ReportIntervalNrMdt = "20480"
	N240    ReportIntervalNrMdt = "240"
	N360000 ReportIntervalNrMdt = "360000"
	N36e06  ReportIntervalNrMdt = "3.6e+06"
	N40960  ReportIntervalNrMdt = "40960"
	N480    ReportIntervalNrMdt = "480"
	N5120   ReportIntervalNrMdt = "5120"
	N60000  ReportIntervalNrMdt = "60000"
	N640    ReportIntervalNrMdt = "640"
	N720000 ReportIntervalNrMdt = "720000"
)

// Defines values for ReportTypeMdt.
const (
	ReportTypeMdtEVENTTRIGGED ReportTypeMdt = "EVENT_TRIGGED"
	ReportTypeMdtPERIODICAL   ReportTypeMdt = "PERIODICAL"
)

// Defines values for ReportingFrequency.
const (
	EVENTTRIGGERED ReportingFrequency = "EVENT_TRIGGERED"
	PERIODIC       ReportingFrequency = "PERIODIC"
)

// Defines values for ReportingLevel0.
const (
	RATGRLEVEL   ReportingLevel0 = "RAT_GR_LEVEL"
	SERIDLEVEL   ReportingLevel0 = "SER_ID_LEVEL"
	SPONCONLEVEL ReportingLevel0 = "SPON_CON_LEVEL"
)

// Defines values for ReportingTrigger.
const (
	ReportingTriggerALLRRMEVENTTRIGGERS ReportingTrigger = "ALL_RRM_EVENT_TRIGGERS"
	ReportingTriggerEVENTA2             ReportingTrigger = "EVENT_A2"
	ReportingTriggerEVENTA2PERIODIC     ReportingTrigger = "EVENT_A2_PERIODIC"
	ReportingTriggerPERIODICAL          ReportingTrigger = "PERIODICAL"
)

// Defines values for RequestIndication.
const (
	EBIASSIGNMENTREQ    RequestIndication = "EBI_ASSIGNMENT_REQ"
	NWREQPDUSESAUTH     RequestIndication = "NW_REQ_PDU_SES_AUTH"
	NWREQPDUSESMOD      RequestIndication = "NW_REQ_PDU_SES_MOD"
	NWREQPDUSESREL      RequestIndication = "NW_REQ_PDU_SES_REL"
	PDUSESMOB           RequestIndication = "PDU_SES_MOB"
	RELDUETO5GANREQUEST RequestIndication = "REL_DUE_TO_5G_AN_REQUEST"
	UEREQPDUSESMOD      RequestIndication = "UE_REQ_PDU_SES_MOD"
	UEREQPDUSESREL      RequestIndication = "UE_REQ_PDU_SES_REL"
)

// Defines values for RequestType.
const (
	EXISTINGEMERGENCYPDUSESSION RequestType = "EXISTING_EMERGENCY_PDU_SESSION"
	EXISTINGPDUSESSION          RequestType = "EXISTING_PDU_SESSION"
	INITIALEMERGENCYREQUEST     RequestType = "INITIAL_EMERGENCY_REQUEST"
	INITIALREQUEST              RequestType = "INITIAL_REQUEST"
)

// Defines values for RequestedQosMonitoringParameter.
const (
	RequestedQosMonitoringParameterDOWNLINK  RequestedQosMonitoringParameter = "DOWNLINK"
	RequestedQosMonitoringParameterROUNDTRIP RequestedQosMonitoringParameter = "ROUND_TRIP"
	RequestedQosMonitoringParameterUPLINK    RequestedQosMonitoringParameter = "UPLINK"
)

// Defines values for RequestedRuleDataType.
const (
	CHID        RequestedRuleDataType = "CH_ID"
	EPSFALLBACK RequestedRuleDataType = "EPS_FALLBACK"
	MSTIMEZONE  RequestedRuleDataType = "MS_TIME_ZONE"
	RESRELEASE  RequestedRuleDataType = "RES_RELEASE"
	SUCCRESALLO RequestedRuleDataType = "SUCC_RES_ALLO"
	USERLOCINFO RequestedRuleDataType = "USER_LOC_INFO"
)

// Defines values for RequiredAccessInfo.
const (
	UETIMEZONE   RequiredAccessInfo = "UE_TIME_ZONE"
	USERLOCATION RequiredAccessInfo = "USER_LOCATION"
)

// Defines values for ReservPriority.
const (
	PRIO1  ReservPriority = "PRIO_1"
	PRIO10 ReservPriority = "PRIO_10"
	PRIO11 ReservPriority = "PRIO_11"
	PRIO12 ReservPriority = "PRIO_12"
	PRIO13 ReservPriority = "PRIO_13"
	PRIO14 ReservPriority = "PRIO_14"
	PRIO15 ReservPriority = "PRIO_15"
	PRIO16 ReservPriority = "PRIO_16"
	PRIO2  ReservPriority = "PRIO_2"
	PRIO3  ReservPriority = "PRIO_3"
	PRIO4  ReservPriority = "PRIO_4"
	PRIO5  ReservPriority = "PRIO_5"
	PRIO6  ReservPriority = "PRIO_6"
	PRIO7  ReservPriority = "PRIO_7"
	PRIO8  ReservPriority = "PRIO_8"
	PRIO9  ReservPriority = "PRIO_9"
)

// Defines values for ResourceStatus.
const (
	ResourceStatusALTANCHORSMF ResourceStatus = "ALT_ANCHOR_SMF"
	ResourceStatusRELEASED     ResourceStatus = "RELEASED"
	ResourceStatusTRANSFERRED  ResourceStatus = "TRANSFERRED"
	ResourceStatusUNCHANGED    ResourceStatus = "UNCHANGED"
	ResourceStatusUPDATED      ResourceStatus = "UPDATED"
)

// Defines values for RestrictionType.
const (
	ALLOWEDAREAS    RestrictionType = "ALLOWED_AREAS"
	NOTALLOWEDAREAS RestrictionType = "NOT_ALLOWED_AREAS"
)

// Defines values for RmState.
const (
	DEREGISTERED RmState = "DEREGISTERED"
	REGISTERED   RmState = "REGISTERED"
)

// Defines values for RoamingIndication.
const (
	HOMEROUTEDROAMING RoamingIndication = "HOME_ROUTED_ROAMING"
	LOCALBREAKOUT     RoamingIndication = "LOCAL_BREAKOUT"
	NONROAMING        RoamingIndication = "NON_ROAMING"
)

// Defines values for RoamingOdb.
const (
	OUTSIDEHOMEPLMN        RoamingOdb = "OUTSIDE_HOME_PLMN"
	OUTSIDEHOMEPLMNCOUNTRY RoamingOdb = "OUTSIDE_HOME_PLMN_COUNTRY"
)

// Defines values for Rsn.
const (
	V1 Rsn = "V1"
	V2 Rsn = "V2"
)

// Defines values for RuleOperation.
const (
	CREATEPCCRULE                           RuleOperation = "CREATE_PCC_RULE"
	DELETEPCCRULE                           RuleOperation = "DELETE_PCC_RULE"
	MODIFYPCCRULEANDADDPACKETFILTERS        RuleOperation = "MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS"
	MODIFYPCCRULEANDDELETEPACKETFILTERS     RuleOperation = "MODIFY_ PCC_RULE_AND_DELETE_PACKET_FILTERS"
	MODIFYPCCRULEANDREPLACEPACKETFILTERS    RuleOperation = "MODIFY_ PCC_RULE_AND_REPLACE_PACKET_FILTERS"
	MODIFYPCCRULEWITHOUTMODIFYPACKETFILTERS RuleOperation = "MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS"
)

// Defines values for RuleStatus.
const (
	RuleStatusACTIVE   RuleStatus = "ACTIVE"
	RuleStatusINACTIVE RuleStatus = "INACTIVE"
)

// Defines values for SbiBindingLevel.
const (
	NFINSTANCEBINDING        SbiBindingLevel = "NF_INSTANCE_BINDING"
	NFSERVICEINSTANCEBINDING SbiBindingLevel = "NF_SERVICE_INSTANCE_BINDING"
	NFSERVICESETBINDING      SbiBindingLevel = "NF_SERVICE_SET_BINDING"
	NFSETBINDING             SbiBindingLevel = "NF_SET_BINDING"
)

// Defines values for ScType.
const (
	MAPPED ScType = "MAPPED"
	NATIVE ScType = "NATIVE"
)

// Defines values for ScheduledCommunicationType.
const (
	ScheduledCommunicationTypeBIDIRECTIONAL ScheduledCommunicationType = "BIDIRECTIONAL"
	ScheduledCommunicationTypeDOWNLINKONLY  ScheduledCommunicationType = "DOWNLINK_ONLY"
	ScheduledCommunicationTypeUPLINKONLY    ScheduledCommunicationType = "UPLINK_ONLY"
)

// Defines values for ScheduledCommunicationTypeRm.
const (
	ScheduledCommunicationTypeRmBIDIRECTIONAL ScheduledCommunicationTypeRm = "BIDIRECTIONAL"
	ScheduledCommunicationTypeRmDOWNLINKONLY  ScheduledCommunicationTypeRm = "DOWNLINK_ONLY"
	ScheduledCommunicationTypeRmUPLINKONLY    ScheduledCommunicationTypeRm = "UPLINK_ONLY"
)

// Defines values for SensorMeasurement.
const (
	BAROMETRICPRESSURE SensorMeasurement = "BAROMETRIC_PRESSURE"
	UEORIENTATION      SensorMeasurement = "UE_ORIENTATION"
	UESPEED            SensorMeasurement = "UE_SPEED"
)

// Defines values for ServAuthInfo.
const (
	TPEXPIRED       ServAuthInfo = "TP_EXPIRED"
	TPNOTKNOWN      ServAuthInfo = "TP_NOT_KNOWN"
	TPNOTYETOCURRED ServAuthInfo = "TP_NOT_YET_OCURRED"
)

// Defines values for ServiceInfoStatus.
const (
	FINAL       ServiceInfoStatus = "FINAL"
	PRELIMINARY ServiceInfoStatus = "PRELIMINARY"
)

// Defines values for ServiceName.
const (
	ServiceNameN3gppAnalyticsexposure         ServiceName = "3gpp-analyticsexposure"
	ServiceNameN3gppApplyingBdtPolicy         ServiceName = "3gpp-applying-bdt-policy"
	ServiceNameN3gppAsSessionWithQos          ServiceName = "3gpp-as-session-with-qos"
	ServiceNameN3gppBdt                       ServiceName = "3gpp-bdt"
	ServiceNameN3gppChargeableParty           ServiceName = "3gpp-chargeable-party"
	ServiceNameN3gppCpParameterProvisioning   ServiceName = "3gpp-cp-parameter-provisioning"
	ServiceNameN3gppDeviceTriggering          ServiceName = "3gpp-device-triggering"
	ServiceNameN3gppEcrControl                ServiceName = "3gpp-ecr-control"
	ServiceNameN3gppMoLcsNotify               ServiceName = "3gpp-mo-lcs-notify"
	ServiceNameN3gppMonitoringEvent           ServiceName = "3gpp-monitoring-event"
	ServiceNameN3gppMsisdnLessMoSms           ServiceName = "3gpp-msisdn-less-mo-sms"
	ServiceNameN3gppNidd                      ServiceName = "3gpp-nidd"
	ServiceNameN3gppNiddConfigurationTrigger  ServiceName = "3gpp-nidd-configuration-trigger"
	ServiceNameN3gppRacsParameterProvisioning ServiceName = "3gpp-racs-parameter-provisioning"
	ServiceNameN3gppServiceParameter          ServiceName = "3gpp-service-parameter"
	ServiceNameN3gppTrafficInfluence          ServiceName = "3gpp-traffic-influence"
	ServiceNameN5gEirEic                      ServiceName = "n5g-eir-eic"
	ServiceNameNamfComm                       ServiceName = "namf-comm"
	ServiceNameNamfEvts                       ServiceName = "namf-evts"
	ServiceNameNamfLoc                        ServiceName = "namf-loc"
	ServiceNameNamfMt                         ServiceName = "namf-mt"
	ServiceNameNausfAuth                      ServiceName = "nausf-auth"
	ServiceNameNausfSorprotection             ServiceName = "nausf-sorprotection"
	ServiceNameNausfUpuprotection             ServiceName = "nausf-upuprotection"
	ServiceNameNbsfManagement                 ServiceName = "nbsf-management"
	ServiceNameNchfConvergedcharging          ServiceName = "nchf-convergedcharging"
	ServiceNameNchfOfflineonlycharging        ServiceName = "nchf-offlineonlycharging"
	ServiceNameNchfSpendinglimitcontrol       ServiceName = "nchf-spendinglimitcontrol"
	ServiceNameNgmlcLoc                       ServiceName = "ngmlc-loc"
	ServiceNameNhssEe                         ServiceName = "nhss-ee"
	ServiceNameNhssImsSdm                     ServiceName = "nhss-ims-sdm"
	ServiceNameNhssImsUeau                    ServiceName = "nhss-ims-ueau"
	ServiceNameNhssImsUecm                    ServiceName = "nhss-ims-uecm"
	ServiceNameNhssSdm                        ServiceName = "nhss-sdm"
	ServiceNameNhssUeau                       ServiceName = "nhss-ueau"
	ServiceNameNhssUecm                       ServiceName = "nhss-uecm"
	ServiceNameNlmfLoc                        ServiceName = "nlmf-loc"
	ServiceNameNnefEventexposure              ServiceName = "nnef-eventexposure"
	ServiceNameNnefPfdmanagement              ServiceName = "nnef-pfdmanagement"
	ServiceNameNnefSmcontext                  ServiceName = "nnef-smcontext"
	ServiceNameNnrfDisc                       ServiceName = "nnrf-disc"
	ServiceNameNnrfNfm                        ServiceName = "nnrf-nfm"
	ServiceNameNnrfOauth2                     ServiceName = "nnrf-oauth2"
	ServiceNameNnssaafNssaa                   ServiceName = "nnssaaf-nssaa"
	ServiceNameNnssfNssaiavailability         ServiceName = "nnssf-nssaiavailability"
	ServiceNameNnssfNsselection               ServiceName = "nnssf-nsselection"
	ServiceNameNnwdafAnalyticsinfo            ServiceName = "nnwdaf-analyticsinfo"
	ServiceNameNnwdafEventssubscription       ServiceName = "nnwdaf-eventssubscription"
	ServiceNameNpcfAmPolicyControl            ServiceName = "npcf-am-policy-control"
	ServiceNameNpcfBdtpolicycontrol           ServiceName = "npcf-bdtpolicycontrol"
	ServiceNameNpcfEventexposure              ServiceName = "npcf-eventexposure"
	ServiceNameNpcfPolicyauthorization        ServiceName = "npcf-policyauthorization"
	ServiceNameNpcfSmpolicycontrol            ServiceName = "npcf-smpolicycontrol"
	ServiceNameNpcfUePolicyControl            ServiceName = "npcf-ue-policy-control"
	ServiceNameNseppTelescopic                ServiceName = "nsepp-telescopic"
	ServiceNameNsmfEventExposure              ServiceName = "nsmf-event-exposure"
	ServiceNameNsmfNidd                       ServiceName = "nsmf-nidd"
	ServiceNameNsmfPdusession                 ServiceName = "nsmf-pdusession"
	ServiceNameNsmsfSms                       ServiceName = "nsmsf-sms"
	ServiceNameNsorafSor                      ServiceName = "nsoraf-sor"
	ServiceNameNspafSecuredPacket             ServiceName = "nspaf-secured-packet"
	ServiceNameNucmfProvisioning              ServiceName = "nucmf-provisioning"
	ServiceNameNucmfUecapabilitymanagement    ServiceName = "nucmf-uecapabilitymanagement"
	ServiceNameNudmEe                         ServiceName = "nudm-ee"
	ServiceNameNudmMt                         ServiceName = "nudm-mt"
	ServiceNameNudmNiddau                     ServiceName = "nudm-niddau"
	ServiceNameNudmPp                         ServiceName = "nudm-pp"
	ServiceNameNudmSdm                        ServiceName = "nudm-sdm"
	ServiceNameNudmUeau                       ServiceName = "nudm-ueau"
	ServiceNameNudmUecm                       ServiceName = "nudm-uecm"
	ServiceNameNudrDr                         ServiceName = "nudr-dr"
	ServiceNameNudrGroupIdMap                 ServiceName = "nudr-group-id-map"
	ServiceNameNudsfDr                        ServiceName = "nudsf-dr"
)

// Defines values for SessionRuleFailureCode.
const (
	SessionRuleFailureCodeNFMAL        SessionRuleFailureCode = "NF_MAL"
	SessionRuleFailureCodeRESLIM       SessionRuleFailureCode = "RES_LIM"
	SessionRuleFailureCodeUESTASUSP    SessionRuleFailureCode = "UE_STA_SUSP"
	SessionRuleFailureCodeUNSUCCQOSVAL SessionRuleFailureCode = "UNSUCC_QOS_VAL"
)

// Defines values for Sign.
const (
	NEGATIVE Sign = "NEGATIVE"
	POSITIVE Sign = "POSITIVE"
)

// Defines values for SipForkingIndication.
const (
	SEVERALDIALOGUES SipForkingIndication = "SEVERAL_DIALOGUES"
	SINGLEDIALOGUE   SipForkingIndication = "SINGLE_DIALOGUE"
)

// Defines values for SmContextType.
const (
	EPSPDNCONNECTION SmContextType = "EPS_PDN_CONNECTION"
	SMCONTEXT        SmContextType = "SM_CONTEXT"
)

// Defines values for SmPolicyAssociationReleaseCause.
const (
	SmPolicyAssociationReleaseCauseINSUFFICIENTRES           SmPolicyAssociationReleaseCause = "INSUFFICIENT_RES"
	SmPolicyAssociationReleaseCauseUESUBSCRIPTION            SmPolicyAssociationReleaseCause = "UE_SUBSCRIPTION"
	SmPolicyAssociationReleaseCauseUNSPECIFIED               SmPolicyAssociationReleaseCause = "UNSPECIFIED"
	SmPolicyAssociationReleaseCauseVALIDATIONCONDITIONNOTMET SmPolicyAssociationReleaseCause = "VALIDATION_CONDITION_NOT_MET"
)

// Defines values for SmfChangeIndication.
const (
	CHANGED SmfChangeIndication = "CHANGED"
	REMOVED SmfChangeIndication = "REMOVED"
)

// Defines values for SmfEvent.
const (
	SmfEventACTYCH    SmfEvent = "AC_TY_CH"
	SmfEventCOMMFAIL  SmfEvent = "COMM_FAIL"
	SmfEventDDDS      SmfEvent = "DDDS"
	SmfEventPDUSESEST SmfEvent = "PDU_SES_EST"
	SmfEventPDUSESREL SmfEvent = "PDU_SES_REL"
	SmfEventPLMNCH    SmfEvent = "PLMN_CH"
	SmfEventQFIALLOC  SmfEvent = "QFI_ALLOC"
	SmfEventQOSMON    SmfEvent = "QOS_MON"
	SmfEventUEIPCH    SmfEvent = "UE_IP_CH"
	SmfEventUPPATHCH  SmfEvent = "UP_PATH_CH"
)

// Defines values for SmsSupport.
const (
	SmsSupportBOTH    SmsSupport = "BOTH"
	SmsSupportN3GPP   SmsSupport = "3GPP"
	SmsSupportNON3GPP SmsSupport = "NON_3GPP"
	SmsSupportNONE    SmsSupport = "NONE"
)

// Defines values for SnssaiExtensionWildcardSd.
const (
	SnssaiExtensionWildcardSdTrue SnssaiExtensionWildcardSd = true
)

// Defines values for SorUpdateIndicator.
const (
	EMERGENCYREGISTRATION SorUpdateIndicator = "EMERGENCY_REGISTRATION"
	INITIALREGISTRATION   SorUpdateIndicator = "INITIAL_REGISTRATION"
)

// Defines values for SponsoringStatus.
const (
	SPONSORDISABLED SponsoringStatus = "SPONSOR_DISABLED"
	SPONSORENABLED  SponsoringStatus = "SPONSOR_ENABLED"
)

// Defines values for SqnScheme.
const (
	SqnSchemeGENERAL      SqnScheme = "GENERAL"
	SqnSchemeNONTIMEBASED SqnScheme = "NON_TIME_BASED"
	SqnSchemeTIMEBASED    SqnScheme = "TIME_BASED"
)

// Defines values for SscMode.
const (
	SSCMODE1 SscMode = "SSC_MODE_1"
	SSCMODE2 SscMode = "SSC_MODE_2"
	SSCMODE3 SscMode = "SSC_MODE_3"
)

// Defines values for StationaryIndication.
const (
	StationaryIndicationMOBILE     StationaryIndication = "MOBILE"
	StationaryIndicationSTATIONARY StationaryIndication = "STATIONARY"
)

// Defines values for StationaryIndicationRm.
const (
	StationaryIndicationRmMOBILE     StationaryIndicationRm = "MOBILE"
	StationaryIndicationRmSTATIONARY StationaryIndicationRm = "STATIONARY"
)

// Defines values for Status.
const (
	NONOPERATIVE Status = "NON_OPERATIVE"
	OPERATIVE    Status = "OPERATIVE"
)

// Defines values for StatusChange.
const (
	AMFAVAILABLE   StatusChange = "AMF_AVAILABLE"
	AMFUNAVAILABLE StatusChange = "AMF_UNAVAILABLE"
)

// Defines values for SteerModeValue.
const (
	ACTIVESTANDBY SteerModeValue = "ACTIVE_STANDBY"
	LOADBALANCING SteerModeValue = "LOAD_BALANCING"
	PRIORITYBASED SteerModeValue = "PRIORITY_BASED"
	SMALLESTDELAY SteerModeValue = "SMALLEST_DELAY"
)

// Defines values for SteeringFunctionality.
const (
	SteeringFunctionalityATSSSLL SteeringFunctionality = "ATSSS_LL"
	SteeringFunctionalityMPTCP   SteeringFunctionality = "MPTCP"
)

// Defines values for SubscribedEvent.
const (
	UPPATHCHANGE SubscribedEvent = "UP_PATH_CHANGE"
)

// Defines values for TerminationCause.
const (
	TerminationCauseALLSDFDEACTIVATION    TerminationCause = "ALL_SDF_DEACTIVATION"
	TerminationCausePDUSESSIONTERMINATION TerminationCause = "PDU_SESSION_TERMINATION"
	TerminationCausePSTOCSHO              TerminationCause = "PS_TO_CS_HO"
)

// Defines values for TraceDepth.
const (
	MAXIMUM                  TraceDepth = "MAXIMUM"
	MAXIMUMWOVENDOREXTENSION TraceDepth = "MAXIMUM_WO_VENDOR_EXTENSION"
	MEDIUM                   TraceDepth = "MEDIUM"
	MEDIUMWOVENDOREXTENSION  TraceDepth = "MEDIUM_WO_VENDOR_EXTENSION"
	MINIMUM                  TraceDepth = "MINIMUM"
	MINIMUMWOVENDOREXTENSION TraceDepth = "MINIMUM_WO_VENDOR_EXTENSION"
)

// Defines values for TrafficProfile.
const (
	TrafficProfileDUALTRANSDLFIRST TrafficProfile = "DUAL_TRANS_DL_FIRST"
	TrafficProfileDUALTRANSULFIRST TrafficProfile = "DUAL_TRANS_UL_FIRST"
	TrafficProfileMULTITRANS       TrafficProfile = "MULTI_TRANS"
	TrafficProfileSINGLETRANSDL    TrafficProfile = "SINGLE_TRANS_DL"
	TrafficProfileSINGLETRANSUL    TrafficProfile = "SINGLE_TRANS_UL"
)

// Defines values for TrafficProfileRm.
const (
	TrafficProfileRmDUALTRANSDLFIRST TrafficProfileRm = "DUAL_TRANS_DL_FIRST"
	TrafficProfileRmDUALTRANSULFIRST TrafficProfileRm = "DUAL_TRANS_UL_FIRST"
	TrafficProfileRmMULTITRANS       TrafficProfileRm = "MULTI_TRANS"
	TrafficProfileRmSINGLETRANSDL    TrafficProfileRm = "SINGLE_TRANS_DL"
	TrafficProfileRmSINGLETRANSUL    TrafficProfileRm = "SINGLE_TRANS_UL"
)

// Defines values for TransferReason.
const (
	INITREG            TransferReason = "INIT_REG"
	MOBIREG            TransferReason = "MOBI_REG"
	MOBIREGUEVALIDATED TransferReason = "MOBI_REG_UE_VALIDATED"
)

// Defines values for TransportProtocol.
const (
	TransportProtocolTCP TransportProtocol = "TCP"
	TransportProtocolUDP TransportProtocol = "UDP"
)

// Defines values for UEPolicyPolicyAssociationReleaseCause.
const (
	UEPolicyPolicyAssociationReleaseCauseINSUFFICIENTRES UEPolicyPolicyAssociationReleaseCause = "INSUFFICIENT_RES"
	UEPolicyPolicyAssociationReleaseCauseUESUBSCRIPTION  UEPolicyPolicyAssociationReleaseCause = "UE_SUBSCRIPTION"
	UEPolicyPolicyAssociationReleaseCauseUNSPECIFIED     UEPolicyPolicyAssociationReleaseCause = "UNSPECIFIED"
)

// Defines values for UEPolicyRequestTrigger.
const (
	CONSTATECH     UEPolicyRequestTrigger = "CON_STATE_CH"
	GROUPIDLISTCHG UEPolicyRequestTrigger = "GROUP_ID_LIST_CHG"
	LOCCH          UEPolicyRequestTrigger = "LOC_CH"
	PLMNCH         UEPolicyRequestTrigger = "PLMN_CH"
	PRACH          UEPolicyRequestTrigger = "PRA_CH"
	UEPOLICY       UEPolicyRequestTrigger = "UE_POLICY"
)

// Defines values for UPInterfaceType.
const (
	DATAFORWARDING UPInterfaceType = "DATA_FORWARDING"
	N3             UPInterfaceType = "N3"
	N6             UPInterfaceType = "N6"
	N9             UPInterfaceType = "N9"
)

// Defines values for UeAuth.
const (
	AUTHORIZED    UeAuth = "AUTHORIZED"
	NOTAUTHORIZED UeAuth = "NOT_AUTHORIZED"
)

// Defines values for UeContextInfoClass.
const (
	TADS UeContextInfoClass = "TADS"
)

// Defines values for UeContextTransferStatus.
const (
	NOTTRANSFERRED UeContextTransferStatus = "NOT_TRANSFERRED"
	TRANSFERRED    UeContextTransferStatus = "TRANSFERRED"
)

// Defines values for UeReachability.
const (
	REACHABLE      UeReachability = "REACHABLE"
	REGULATORYONLY UeReachability = "REGULATORY_ONLY"
	UNREACHABLE    UeReachability = "UNREACHABLE"
)

// Defines values for UeUpdateStatus.
const (
	ACKRECEIVED         UeUpdateStatus = "ACK_RECEIVED"
	NEGATIVEACKRECEIVED UeUpdateStatus = "NEGATIVE_ACK_RECEIVED"
	NOTSENT             UeUpdateStatus = "NOT_SENT"
	SENTNOACKREQUIRED   UeUpdateStatus = "SENT_NO_ACK_REQUIRED"
	WAITINGFORACK       UeUpdateStatus = "WAITING_FOR_ACK"
)

// Defines values for UnavailableAccessIndication.
const (
	N3GAUNAVAILABLE  UnavailableAccessIndication = "3GA_UNAVAILABLE"
	N3GAUNAVAILABLE1 UnavailableAccessIndication = "N3GA_UNAVAILABLE"
)

// Defines values for UpCnxState.
const (
	ACTIVATED   UpCnxState = "ACTIVATED"
	ACTIVATING  UpCnxState = "ACTIVATING"
	DEACTIVATED UpCnxState = "DEACTIVATED"
	SUSPENDED   UpCnxState = "SUSPENDED"
)

// Defines values for UpConfidentiality.
const (
	UpConfidentialityNOTNEEDED UpConfidentiality = "NOT_NEEDED"
	UpConfidentialityPREFERRED UpConfidentiality = "PREFERRED"
	UpConfidentialityREQUIRED  UpConfidentiality = "REQUIRED"
)

// Defines values for UpIntegrity.
const (
	UpIntegrityNOTNEEDED UpIntegrity = "NOT_NEEDED"
	UpIntegrityPREFERRED UpIntegrity = "PREFERRED"
	UpIntegrityREQUIRED  UpIntegrity = "REQUIRED"
)

// Defines values for UpfCondConditionType.
const (
	UPFCOND UpfCondConditionType = "UPF_COND"
)

// Defines values for UriScheme.
const (
	Http  UriScheme = "http"
	Https UriScheme = "https"
)

// Defines values for UsageMonLevel.
const (
	SERVICELEVEL UsageMonLevel = "SERVICE_LEVEL"
	SESSIONLEVEL UsageMonLevel = "SESSION_LEVEL"
)

// Defines values for AusfAuthType.
const (
	EAPAKAPRIME AusfAuthType = "EAP_AKA_PRIME"
	EAPTLS      AusfAuthType = "EAP_TLS"
	N5GAKA      AusfAuthType = "5G_AKA"
)

// Defines values for NrfTransportProtocol.
const (
	NrfTransportProtocolTCP NrfTransportProtocol = "TCP"
)

// Defines values for PcfAtsssCapability.
const (
	PcfAtsssCapabilityATSSSLL                            PcfAtsssCapability = "ATSSS_LL"
	PcfAtsssCapabilityMPTCPATSSSLL                       PcfAtsssCapability = "MPTCP_ATSSS_LL"
	PcfAtsssCapabilityMPTCPATSSSLLWITHASMODEDLUL         PcfAtsssCapability = "MPTCP_ATSSS_LL_WITH_ASMODE_DLUL"
	PcfAtsssCapabilityMPTCPATSSSLLWITHASMODEUL           PcfAtsssCapability = "MPTCP_ATSSS_LL_WITH_ASMODE_UL"
	PcfAtsssCapabilityMPTCPATSSSLLWITHEXSDMODEDLASMODEUL PcfAtsssCapability = "MPTCP_ATSSS_LL_WITH_EXSDMODE_DL_ASMODE_UL"
)

// Defines values for PcfFailureCode.
const (
	PcfFailureCodeAPPIDERR           PcfFailureCode = "APP_ID_ERR"
	PcfFailureCodeCMAUTHREJ          PcfFailureCode = "CM_AUTH_REJ"
	PcfFailureCodeCMCREDITCONNOTAPP  PcfFailureCode = "CM_CREDIT_CON_NOT_APP"
	PcfFailureCodeCMENDUSERSERDENIED PcfFailureCode = "CM_END_USER_SER_DENIED"
	PcfFailureCodeCMRATFAILED        PcfFailureCode = "CM_RAT_FAILED"
	PcfFailureCodeCMUSERUNK          PcfFailureCode = "CM_USER_UNK"
	PcfFailureCodeFILTERRES          PcfFailureCode = "FILTER_RES"
	PcfFailureCodeINCORFLOWINFO      PcfFailureCode = "INCOR_FLOW_INFO"
	PcfFailureCodeMAXNRQoSFLOW       PcfFailureCode = "MAX_NR_QoS_FLOW"
	PcfFailureCodeMISSFLOWINFO       PcfFailureCode = "MISS_FLOW_INFO"
	PcfFailureCodeMISSREDISERADDR    PcfFailureCode = "MISS_REDI_SER_ADDR"
	PcfFailureCodeNFMAL              PcfFailureCode = "NF_MAL"
	PcfFailureCodeNOQOSFLOWBOUND     PcfFailureCode = "NO_QOS_FLOW_BOUND"
	PcfFailureCodePSTOCSHAN          PcfFailureCode = "PS_TO_CS_HAN"
	PcfFailureCodeRAGRERR            PcfFailureCode = "RA_GR_ERR"
	PcfFailureCodeRESALLOFAIL        PcfFailureCode = "RES_ALLO_FAIL"
	PcfFailureCodeRESLIM             PcfFailureCode = "RES_LIM"
	PcfFailureCodeSERIDERR           PcfFailureCode = "SER_ID_ERR"
	PcfFailureCodeUESTASUSP          PcfFailureCode = "UE_STA_SUSP"
	PcfFailureCodeUNKRULEID          PcfFailureCode = "UNK_RULE_ID"
	PcfFailureCodeUNSUCCQOSVAL       PcfFailureCode = "UNSUCC_QOS_VAL"
)

// Defines values for UdmDataSetName.
const (
	UdmDataSetNameAM         UdmDataSetName = "AM"
	UdmDataSetNameLCSMO      UdmDataSetName = "LCS_MO"
	UdmDataSetNameLCSPRIVACY UdmDataSetName = "LCS_PRIVACY"
	UdmDataSetNameSM         UdmDataSetName = "SM"
	UdmDataSetNameSMFSEL     UdmDataSetName = "SMF_SEL"
	UdmDataSetNameSMSMNG     UdmDataSetName = "SMS_MNG"
	UdmDataSetNameSMSSUB     UdmDataSetName = "SMS_SUB"
	UdmDataSetNameTRACE      UdmDataSetName = "TRACE"
	UdmDataSetNameUECAMF     UdmDataSetName = "UEC_AMF"
	UdmDataSetNameUECSMF     UdmDataSetName = "UEC_SMF"
	UdmDataSetNameUECSMSF    UdmDataSetName = "UEC_SMSF"
	UdmDataSetNameV2X        UdmDataSetName = "V2X"
)

// N3GppChargingCharacteristics Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/3GppChargingCharacteristics
type N3GppChargingCharacteristics = string

// N5GMmCapability defines model for 5GMmCapability.
type N5GMmCapability = Bytes

// N5GMmCause defines model for 5GMmCause.
type N5GMmCause = Uinteger

// N5GSmCause defines model for 5GSmCause.
type N5GSmCause = Uinteger

// N5GSrvccInfo Original definition in TS29503_Nudm_MT.yaml#/components/schemas/5GSrvccInfo
type N5GSrvccInfo struct {
	CMsisdn              CMsisdn                `json:"cMsisdn,omitempty"`
	StnSr                *StnSr                 `json:"stnSr,omitempty"`
	Ue5GSrvccCapability  bool                   `json:"ue5GSrvccCapability"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N5GVnGroupConfiguration Original definition in TS29503_Nudm_PP.yaml#/components/schemas/5GVnGroupConfiguration
type N5GVnGroupConfiguration struct {
	// N5gVnGroupData Original definition in TS29503_Nudm_PP.yaml#/components/schemas/5GVnGroupData
	N5gVnGroupData          *N5GVnGroupData         `json:"5gVnGroupData,omitempty"`
	AfInstanceId            *string                 `json:"afInstanceId,omitempty"`
	InternalGroupIdentifier GroupId                 `json:"internalGroupIdentifier,omitempty"`
	Members                 []Gpsi                  `json:"members,omitempty"`
	MtcProviderInformation  *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          *UdmPPReferenceId      `json:"referenceId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N5GVnGroupData Original definition in TS29503_Nudm_PP.yaml#/components/schemas/5GVnGroupData
type N5GVnGroupData struct {
	AppDescriptors []AppDescriptor `json:"appDescriptors,omitempty"`

	// DnAaaAddress Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IpAddress
	DnAaaAddress         *IpAddress             `json:"dnAaaAddress,omitempty"`
	Dnn                  Dnn                    `json:"dnn"`
	PduSessionTypes      []PduSessionType       `json:"pduSessionTypes,omitempty"`
	SNssai               Snssai                 `json:"sNssai"`
	SecondaryAuth        *bool                  `json:"secondaryAuth,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N5GsUserState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/5GsUserState
type N5GsUserState string

// N5GsUserStateInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/5GsUserStateInfo
type N5GsUserStateInfo struct {
	// N5gsUserState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/5GsUserState
	N5gsUserState        N5GsUserState          `json:"5gsUserState"`
	AccessType           AccessType             `json:"accessType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N5Qi defines model for 5Qi.
type N5Qi = int

// N5QiPriorityLevel defines model for 5QiPriorityLevel.
type N5QiPriorityLevel = int

// N5QiPriorityLevelRm defines model for 5QiPriorityLevelRm.
type N5QiPriorityLevelRm = int

// AMPolicyPolicyAssociation Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/PolicyAssociation
type AMPolicyPolicyAssociation struct {
	Pras *map[string]PresenceInfo `json:"pras,omitempty"`

	// Request Information which the NF service consumer provides when requesting the creation of a policy association. The serviveName property corresponds to the serviceName in the main body of the specification. (Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/PolicyAssociationRequest)
	Request     *AMPolicyPolicyAssociationRequest `json:"request,omitempty"`
	Rfsp        RfspIndex                         `json:"rfsp,omitempty"`
	ServAreaRes *ServiceAreaRestriction           `json:"servAreaRes,omitempty"`

	// SmfSelInfo Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/SmfSelectionData
	SmfSelInfo *SmfSelectionData `json:"smfSelInfo"`
	SuppFeat   SupportedFeatures `json:"suppFeat"`

	// Triggers Request Triggers that the PCF subscribes.
	Triggers             []AMPolicyRequestTrigger        `json:"triggers,omitempty"`
	UeAmbr               *Ambr                           `json:"ueAmbr,omitempty"`
	WlServAreaRes        *WirelineServiceAreaRestriction `json:"wlServAreaRes,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AMPolicyPolicyAssociationReleaseCause Possible values are - UNSPECIFIED: This value is used for unspecified reasons. - UE_SUBSCRIPTION: This value is used to indicate that the session needs to be terminated because the subscription of UE has changed (e.g. was removed). - INSUFFICIENT_RES: This value is used to indicate that the server is overloaded and needs to abort the session.
//
//	(Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/PolicyAssociationReleaseCause)
type AMPolicyPolicyAssociationReleaseCause string

// AMPolicyPolicyAssociationRequest Information which the NF service consumer provides when requesting the creation of a policy association. The serviveName property corresponds to the serviceName in the main body of the specification. (Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/PolicyAssociationRequest)
type AMPolicyPolicyAssociationRequest struct {
	AccessType  AccessType   `json:"accessType,omitempty"`
	AccessTypes []AccessType `json:"accessTypes,omitempty"`

	// AllowedSnssais array of allowed S-NSSAIs for the 3GPP access.
	AllowedSnssais []Snssai `json:"allowedSnssais,omitempty"`

	// AltNotifFqdns Alternate or backup FQDN(s) where to send Notifications.
	AltNotifFqdns []Fqdn `json:"altNotifFqdns,omitempty"`

	// AltNotifIpv4Addrs Alternate or backup IPv4 Address(es) where to send Notifications.
	AltNotifIpv4Addrs []Ipv4Addr `json:"altNotifIpv4Addrs,omitempty"`

	// AltNotifIpv6Addrs Alternate or backup IPv6 Address(es) where to send Notifications.
	AltNotifIpv6Addrs []Ipv6Addr `json:"altNotifIpv6Addrs,omitempty"`
	Gpsi              Gpsi       `json:"gpsi,omitempty"`
	GroupIds          []GroupId  `json:"groupIds,omitempty"`
	Guami             *Guami     `json:"guami,omitempty"`

	// MappingSnssais mapping of each S-NSSAI of the Allowed NSSAI to the corresponding S-NSSAI of the HPLMN.
	MappingSnssais []MappingOfSnssai `json:"mappingSnssais,omitempty"`

	// N3gAllowedSnssais array of allowed S-NSSAIs for the Non-3GPP access.
	N3gAllowedSnssais []Snssai                `json:"n3gAllowedSnssais,omitempty"`
	NotificationUri   Uri                     `json:"notificationUri"`
	Pei               Pei                     `json:"pei,omitempty"`
	RatType           *RatType                `json:"ratType,omitempty"`
	RatTypes          []RatType               `json:"ratTypes,omitempty"`
	Rfsp              RfspIndex               `json:"rfsp,omitempty"`
	ServAreaRes       *ServiceAreaRestriction `json:"servAreaRes,omitempty"`
	ServingPlmn       *PlmnIdNid              `json:"servingPlmn,omitempty"`

	// ServiveName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	ServiveName          *ServiceName                    `json:"serviveName,omitempty"`
	Supi                 Supi                            `json:"supi"`
	SuppFeat             SupportedFeatures               `json:"suppFeat"`
	TimeZone             *TimeZone                       `json:"timeZone,omitempty"`
	TraceReq             *TraceData                      `json:"traceReq"`
	UeAmbr               *Ambr                           `json:"ueAmbr,omitempty"`
	UserLoc              *UserLocation                   `json:"userLoc,omitempty"`
	WlServAreaRes        *WirelineServiceAreaRestriction `json:"wlServAreaRes,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AMPolicyPolicyAssociationUpdateRequest Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/PolicyAssociationUpdateRequest
type AMPolicyPolicyAssociationUpdateRequest struct {
	AccessTypes []AccessType `json:"accessTypes,omitempty"`

	// AllowedSnssais array of allowed S-NSSAIs for the 3GPP access.
	AllowedSnssais []Snssai `json:"allowedSnssais,omitempty"`

	// AltNotifFqdns Alternate or backup FQDN(s) where to send Notifications.
	AltNotifFqdns []Fqdn `json:"altNotifFqdns,omitempty"`

	// AltNotifIpv4Addrs Alternate or backup IPv4 Address(es) where to send Notifications.
	AltNotifIpv4Addrs []Ipv4Addr `json:"altNotifIpv4Addrs,omitempty"`

	// AltNotifIpv6Addrs Alternate or backup IPv6 Address(es) where to send Notifications.
	AltNotifIpv6Addrs []Ipv6Addr `json:"altNotifIpv6Addrs,omitempty"`
	Guami             *Guami     `json:"guami,omitempty"`

	// MappingSnssais mapping of each S-NSSAI of the Allowed NSSAI to the corresponding S-NSSAI of the HPLMN.
	MappingSnssais []MappingOfSnssai `json:"mappingSnssais,omitempty"`

	// N3gAllowedSnssais array of allowed S-NSSAIs for the Non-3GPP access.
	N3gAllowedSnssais []Snssai `json:"n3gAllowedSnssais,omitempty"`
	NotificationUri   *Uri     `json:"notificationUri,omitempty"`

	// PraStatuses Map of PRA status information.
	PraStatuses *map[string]PresenceInfo `json:"praStatuses,omitempty"`
	RatTypes    []RatType                `json:"ratTypes,omitempty"`
	Rfsp        RfspIndex                `json:"rfsp,omitempty"`
	ServAreaRes *ServiceAreaRestriction  `json:"servAreaRes,omitempty"`

	// SmfSelInfo Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/SmfSelectionData
	SmfSelInfo *SmfSelectionData `json:"smfSelInfo"`
	TraceReq   *TraceData        `json:"traceReq"`

	// Triggers Request Triggers that the NF service consumer observes.
	Triggers             []AMPolicyRequestTrigger        `json:"triggers,omitempty"`
	UeAmbr               *Ambr                           `json:"ueAmbr,omitempty"`
	UserLoc              *UserLocation                   `json:"userLoc,omitempty"`
	WlServAreaRes        *WirelineServiceAreaRestriction `json:"wlServAreaRes,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AMPolicyPolicyUpdate Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/PolicyUpdate
type AMPolicyPolicyUpdate struct {
	// Pras Map of PRA information.
	Pras        *map[string]*PresenceInfoRm `json:"pras"`
	ResourceUri Uri                         `json:"resourceUri"`
	Rfsp        RfspIndex                   `json:"rfsp,omitempty"`
	ServAreaRes *ServiceAreaRestriction     `json:"servAreaRes,omitempty"`

	// SmfSelInfo Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/SmfSelectionData
	SmfSelInfo *SmfSelectionData `json:"smfSelInfo"`

	// Triggers Request Triggers that the PCF subscribes.
	Triggers             *[]AMPolicyRequestTrigger       `json:"triggers"`
	UeAmbr               *Ambr                           `json:"ueAmbr,omitempty"`
	WlServAreaRes        *WirelineServiceAreaRestriction `json:"wlServAreaRes,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AMPolicyRequestTrigger Possible values are - LOC_CH: Location change (tracking area). The tracking area of the UE has changed. - PRA_CH: Change of UE presence in PRA. The AMF reports the current presence status of the UE in a Presence Reporting Area, and notifies that the UE enters/leaves the Presence Reporting Area. - SERV_AREA_CH: Service Area Restriction change. The UDM notifies the AMF that the subscribed service area restriction information has changed. - RFSP_CH: RFSP index change. The UDM notifies the AMF that the subscribed RFSP index has changed. - ALLOWED_NSSAI_CH: Allowed NSSAI change. The AMF notifies that the set of UE allowed S-NSSAIs has changed. - UE_AMBR_CH: UE-AMBR change. The UDM notifies the AMF that the subscribed UE-AMBR has changed. - SMF_SELECT_CH: SMF selection information change. The UE requested for an unsupported DNN or UE requested for a DNN within the list of DNN candidates for replacement per S-NSSAI. - ACCESS_TYPE_CH: Access Type change. The AMF notifies that the access type and the RAT type combinations available in the AMF for a UE with simultaneous 3GPP and non-3GPP connectivity has changed.
//
//	(Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/RequestTrigger)
type AMPolicyRequestTrigger string

// AMPolicyTerminationNotification Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/TerminationNotification
type AMPolicyTerminationNotification struct {
	// Cause Possible values are - UNSPECIFIED: This value is used for unspecified reasons. - UE_SUBSCRIPTION: This value is used to indicate that the session needs to be terminated because the subscription of UE has changed (e.g. was removed). - INSUFFICIENT_RES: This value is used to indicate that the server is overloaded and needs to abort the session.
	//  (Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/PolicyAssociationReleaseCause)
	Cause                AMPolicyPolicyAssociationReleaseCause `json:"cause"`
	ResourceUri          Uri                                   `json:"resourceUri"`
	AdditionalProperties map[string]interface{}                `json:"-"`
}

// AccNetChId Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AccNetChId
type AccNetChId struct {
	AccNetChaIdValue ChargingId `json:"accNetChaIdValue"`

	// RefPccRuleIds Contains the identifier of the PCC rule(s) associated to the provided Access Network Charging Identifier.
	RefPccRuleIds []string `json:"refPccRuleIds,omitempty"`

	// SessionChScope When it is included and set to true, indicates the Access Network Charging Identifier applies to the whole PDU Session
	SessionChScope       *bool                  `json:"sessionChScope,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccNetChargingAddress Describes the network entity within the access network performing charging (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AccNetChargingAddress)
type AccNetChargingAddress struct {
	AnChargIpv4Addr      Ipv4Addr               `json:"anChargIpv4Addr,omitempty"`
	AnChargIpv6Addr      *Ipv6Addr              `json:"anChargIpv6Addr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AcceptableServiceInfo Indicates the maximum bandwidth that shall be authorized by the PCF. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AcceptableServiceInfo)
type AcceptableServiceInfo struct {
	AccBwMedComps        *map[string]MediaComponent `json:"accBwMedComps,omitempty"`
	MarBwDl              BitRate                    `json:"marBwDl,omitempty"`
	MarBwUl              BitRate                    `json:"marBwUl,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// AccessAndMobilityData Original definition in TS29519_Exposure_Data.yaml#/components/schemas/AccessAndMobilityData
type AccessAndMobilityData struct {
	AccessType    AccessType    `json:"accessType,omitempty"`
	ConnStates    *[]CmInfo     `json:"connStates,omitempty"`
	ConnStatesTs  *DateTime     `json:"connStatesTs,omitempty"`
	CurrentPlmn   *PlmnId       `json:"currentPlmn,omitempty"`
	CurrentPlmnTs *DateTime     `json:"currentPlmnTs,omitempty"`
	Location      *UserLocation `json:"location,omitempty"`
	LocationTs    *DateTime     `json:"locationTs,omitempty"`
	RatType       *[]RatType    `json:"ratType,omitempty"`
	RatTypesTs    *DateTime     `json:"ratTypesTs,omitempty"`

	// ReachabilityStatus Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/UeReachability
	ReachabilityStatus   *UeReachability `json:"reachabilityStatus,omitempty"`
	ReachabilityStatusTs *DateTime       `json:"reachabilityStatusTs,omitempty"`
	RegStates            *[]RmInfo       `json:"regStates,omitempty"`
	RegStatesTs          *DateTime       `json:"regStatesTs,omitempty"`

	// RoamingStatus True  The serving PLMN of the UE is different from the HPLMN of the UE; False  The serving PLMN of the UE is the HPLMN of the UE.
	RoamingStatus   *bool     `json:"roamingStatus,omitempty"`
	RoamingStatusTs *DateTime `json:"roamingStatusTs,omitempty"`

	// SmsOverNasStatus Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SmsSupport
	SmsOverNasStatus     *SmsSupport            `json:"smsOverNasStatus,omitempty"`
	SmsOverNasStatusTs   *DateTime              `json:"smsOverNasStatusTs,omitempty"`
	SuppFeat             *SupportedFeatures     `json:"suppFeat,omitempty"`
	TimeZone             *TimeZone              `json:"timeZone,omitempty"`
	TimeZoneTs           *DateTime              `json:"timeZoneTs,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccessAndMobilitySubscriptionData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AccessAndMobilitySubscriptionData
type AccessAndMobilitySubscriptionData struct {
	ActiveTime *DurationSecRm `json:"activeTime"`
	CMsisdn    CMsisdn        `json:"cMsisdn,omitempty"`

	// CagData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CagData
	CagData                     *CagData           `json:"cagData,omitempty"`
	CoreNetworkTypeRestrictions *[]CoreNetworkType `json:"coreNetworkTypeRestrictions,omitempty"`
	EcRestrictionDataNb         *bool              `json:"ecRestrictionDataNb,omitempty"`

	// EcRestrictionDataWb Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/EcRestrictionDataWb
	EcRestrictionDataWb *UdmEcRestrictionDataWb `json:"ecRestrictionDataWb,omitempty"`
	EdrxParametersList  []EdrxParameters        `json:"edrxParametersList,omitempty"`

	// ExpectedUeBehaviourList Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ExpectedUeBehaviourData
	ExpectedUeBehaviourList *ExpectedUeBehaviourData `json:"expectedUeBehaviourList,omitempty"`
	ForbiddenAreas          *[]Area                  `json:"forbiddenAreas,omitempty"`
	Gpsis                   *[]Gpsi                  `json:"gpsis,omitempty"`
	IabOperationAllowed     *bool                    `json:"iabOperationAllowed,omitempty"`
	InternalGroupIds        []GroupId                `json:"internalGroupIds,omitempty"`

	// McsPriority Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/McsPriorityIndicator
	McsPriority      *McsPriorityIndicator `json:"mcsPriority,omitempty"`
	MdtConfiguration *MdtConfiguration     `json:"mdtConfiguration,omitempty"`

	// MdtUserConsent Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/MdtUserConsent
	MdtUserConsent *MdtUserConsent `json:"mdtUserConsent,omitempty"`

	// MicoAllowed Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/MicoAllowed
	MicoAllowed *MicoAllowed `json:"micoAllowed,omitempty"`

	// MpsPriority Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/MpsPriorityIndicator
	MpsPriority *MpsPriorityIndicator `json:"mpsPriority,omitempty"`

	// NbIoTUePriority Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/NbIoTUePriority
	NbIoTUePriority *NbIoTUePriority `json:"nbIoTUePriority,omitempty"`

	// Nssai Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/Nssai
	Nssai                     *Nssai                     `json:"nssai"`
	NssaiInclusionAllowed     *bool                      `json:"nssaiInclusionAllowed,omitempty"`
	OdbPacketServices         *OdbPacketServices         `json:"odbPacketServices,omitempty"`
	PrimaryRatRestrictions    *[]RatType                 `json:"primaryRatRestrictions,omitempty"`
	PtwParametersList         []PtwParameters            `json:"ptwParametersList,omitempty"`
	RatRestrictions           *[]RatType                 `json:"ratRestrictions,omitempty"`
	RfspIndex                 *RfspIndexRm               `json:"rfspIndex"`
	RgWirelineCharacteristics *RgWirelineCharacteristics `json:"rgWirelineCharacteristics,omitempty"`
	SecondaryRatRestrictions  *[]RatType                 `json:"secondaryRatRestrictions,omitempty"`
	ServiceAreaRestriction    *ServiceAreaRestriction    `json:"serviceAreaRestriction,omitempty"`
	ServiceGapTime            *DurationSec               `json:"serviceGapTime,omitempty"`
	SharedAmDataIds           []SharedDataId             `json:"sharedAmDataIds,omitempty"`
	SharedVnGroupDataIds      *map[string]SharedDataId   `json:"sharedVnGroupDataIds,omitempty"`

	// SorInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SorInfo
	SorInfo                *SorInfo             `json:"sorInfo,omitempty"`
	SorInfoExpectInd       *bool                `json:"sorInfoExpectInd,omitempty"`
	SorUpdateIndicatorList []SorUpdateIndicator `json:"sorUpdateIndicatorList,omitempty"`
	SorafRetrieval         *bool                `json:"sorafRetrieval,omitempty"`
	StnSr                  *StnSr               `json:"stnSr,omitempty"`
	SubsRegTimer           *DurationSecRm       `json:"subsRegTimer"`
	SubscribedDnnList      *[]string            `json:"subscribedDnnList,omitempty"`
	SubscribedUeAmbr       *AmbrRm              `json:"subscribedUeAmbr,omitempty"`
	SupportedFeatures      *SupportedFeatures   `json:"supportedFeatures,omitempty"`
	TraceData              *TraceData           `json:"traceData"`

	// UeUsageType Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeUsageType
	UeUsageType *UeUsageType `json:"ueUsageType,omitempty"`

	// UpuInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UpuInfo
	UpuInfo                        *UpuInfo                        `json:"upuInfo,omitempty"`
	WirelineForbiddenAreas         *[]WirelineArea                 `json:"wirelineForbiddenAreas,omitempty"`
	WirelineServiceAreaRestriction *WirelineServiceAreaRestriction `json:"wirelineServiceAreaRestriction,omitempty"`
	AdditionalProperties           map[string]interface{}          `json:"-"`
}

// AccessNetChargingIdentifier Describes the access network charging identifier. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AccessNetChargingIdentifier)
type AccessNetChargingIdentifier struct {
	AccNetChaIdValue     ChargingId             `json:"accNetChaIdValue"`
	Flows                []Flows                `json:"flows,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccessNetworkId Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AccessNetworkId
type AccessNetworkId string

// AccessTech Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/AccessTech
type AccessTech string

// AccessTokenErr Error returned in the access token response message (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
type AccessTokenErr struct {
	Error                AccessTokenErrError    `json:"error"`
	ErrorDescription     *string                `json:"error_description,omitempty"`
	ErrorUri             *string                `json:"error_uri,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccessTokenErrError defines model for AccessTokenErr.Error.
type AccessTokenErrError string

// AccessTokenReq Contains information related to the access token request (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
type AccessTokenReq struct {
	GrantType    AccessTokenReqGrantType `json:"grant_type"`
	NfInstanceId NfInstanceId            `json:"nfInstanceId"`

	// NfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	NfType *NFType `json:"nfType,omitempty"`

	// RequesterFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	RequesterFqdn        *Fqdn           `json:"requesterFqdn,omitempty"`
	RequesterPlmn        *PlmnId         `json:"requesterPlmn,omitempty"`
	RequesterPlmnList    []PlmnId        `json:"requesterPlmnList,omitempty"`
	RequesterSnpnList    []PlmnIdNid     `json:"requesterSnpnList,omitempty"`
	RequesterSnssaiList  []Snssai        `json:"requesterSnssaiList,omitempty"`
	Scope                string          `json:"scope"`
	TargetNfInstanceId   *NfInstanceId   `json:"targetNfInstanceId,omitempty"`
	TargetNfServiceSetId *NfServiceSetId `json:"targetNfServiceSetId,omitempty"`
	TargetNfSetId        *NfSetId        `json:"targetNfSetId,omitempty"`

	// TargetNfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	TargetNfType         *NFType                `json:"targetNfType,omitempty"`
	TargetNsiList        []string               `json:"targetNsiList,omitempty"`
	TargetPlmn           *PlmnId                `json:"targetPlmn,omitempty"`
	TargetSnssaiList     []Snssai               `json:"targetSnssaiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccessTokenReqGrantType defines model for AccessTokenReq.GrantType.
type AccessTokenReqGrantType string

// AccessTokenRsp Contains information related to the access token response (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenRsp)
type AccessTokenRsp struct {
	// AccessToken JWS Compact Serialized representation of JWS signed JSON object (AccessTokenClaims)
	AccessToken          string                  `json:"access_token"`
	ExpiresIn            *int                    `json:"expires_in,omitempty"`
	Scope                string                  `json:"scope,omitempty"`
	TokenType            AccessTokenRspTokenType `json:"token_type"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// AccessTokenRspTokenType defines model for AccessTokenRsp.TokenType.
type AccessTokenRspTokenType string

// AccessType defines model for AccessType.
type AccessType string

// AccessTypeRm defines model for AccessTypeRm.
type AccessTypeRm string

// AccuUsageReport Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AccuUsageReport
type AccuUsageReport struct {
	NextTimeUsage *DurationSec `json:"nextTimeUsage,omitempty"`

	// NextVolUsage Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	NextVolUsage *Volume `json:"nextVolUsage,omitempty"`

	// NextVolUsageDownlink Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	NextVolUsageDownlink *Volume `json:"nextVolUsageDownlink,omitempty"`

	// NextVolUsageUplink Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	NextVolUsageUplink *Volume `json:"nextVolUsageUplink,omitempty"`

	// RefUmIds An id referencing UsageMonitoringData objects associated with this usage report.
	RefUmIds  string       `json:"refUmIds"`
	TimeUsage *DurationSec `json:"timeUsage,omitempty"`

	// VolUsage Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	VolUsage *Volume `json:"volUsage,omitempty"`

	// VolUsageDownlink Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	VolUsageDownlink *Volume `json:"volUsageDownlink,omitempty"`

	// VolUsageUplink Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	VolUsageUplink       *Volume                `json:"volUsageUplink,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccumulatedUsage Original definition in TS29122_CommonData.yaml#/components/schemas/AccumulatedUsage
type AccumulatedUsage struct {
	// DownlinkVolume Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	DownlinkVolume *Volume `json:"downlinkVolume,omitempty"`

	// Duration Unsigned integer identifying a period of time in units of seconds. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSec)
	Duration *TS29122DurationSec `json:"duration,omitempty"`

	// TotalVolume Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	TotalVolume *Volume `json:"totalVolume,omitempty"`

	// UplinkVolume Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	UplinkVolume         *Volume                `json:"uplinkVolume,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AckInd Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/AckInd
type AckInd = bool

// AckOfNotify Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/AckOfNotify
type AckOfNotify struct {
	// AckResult Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/AfResultInfo
	AckResult            AfResultInfo           `json:"ackResult"`
	Gpsi                 Gpsi                   `json:"gpsi,omitempty"`
	NotifId              string                 `json:"notifId"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AcknowledgeInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AcknowledgeInfo
type AcknowledgeInfo struct {
	ProvisioningTime DateTime `json:"provisioningTime"`

	// SecuredPacket Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SecuredPacket
	SecuredPacket *SecuredPacket `json:"securedPacket,omitempty"`

	// SorMacIue Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorMac
	SorMacIue      SorMac `json:"sorMacIue,omitempty"`
	UeNotReachable *bool  `json:"ueNotReachable,omitempty"`

	// UpuMacIue Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuMac
	UpuMacIue            UpuMac                 `json:"upuMacIue,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AcsInfo defines model for AcsInfo.
type AcsInfo struct {
	AcsIpv4Addr          Ipv4Addr               `json:"acsIpv4Addr,omitempty"`
	AcsIpv6Addr          *Ipv6Addr              `json:"acsIpv6Addr,omitempty"`
	AcsUrl               *Uri                   `json:"acsUrl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AcsInfoRm defines model for AcsInfoRm.
type AcsInfoRm struct {
	AcsIpv4Addr          Ipv4Addr               `json:"acsIpv4Addr,omitempty"`
	AcsIpv6Addr          *Ipv6Addr              `json:"acsIpv6Addr,omitempty"`
	AcsUrl               *Uri                   `json:"acsUrl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AdditionInfoEnableUeReachability Original definition in TS29518_Namf_MT.yaml#/components/schemas/AdditionInfoEnableUeReachability
type AdditionInfoEnableUeReachability struct {
	MaxWaitingTime       *DurationSec           `json:"maxWaitingTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AdditionalAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
type AdditionalAccessInfo struct {
	AccessType           AccessType             `json:"accessType"`
	RatType              *RatType               `json:"ratType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AdditionalQosFlowInfo defines model for AdditionalQosFlowInfo.
type AdditionalQosFlowInfo string

// AdditionalSnssaiData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AdditionalSnssaiData
type AdditionalSnssaiData struct {
	RequiredAuthnAuthz   *bool                  `json:"requiredAuthnAuthz,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AdditionalTnlNb Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/AdditionalTnlNb
type AdditionalTnlNb = int

// AfAckInfo Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/AfAckInfo
type AfAckInfo struct {
	// AckResult Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/AfResultInfo
	AckResult            AfResultInfo           `json:"ackResult"`
	AfTransId            *string                `json:"afTransId,omitempty"`
	Gpsi                 Gpsi                   `json:"gpsi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfAppId Contains an AF application identifier. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfAppId)
type AfAppId = string

// AfEvent Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfEvent
type AfEvent string

// AfEventExposureData AF Event Exposure data managed by a given NEF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AfEventExposureData)
type AfEventExposureData struct {
	AfEvents             []string               `json:"afEvents"`
	AfIds                []string               `json:"afIds,omitempty"`
	AppIds               []string               `json:"appIds,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfEventNotification describes the event information delivered in the notification (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfEventNotification)
type AfEventNotification struct {
	// Event Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfEvent
	Event                AfEvent                `json:"event"`
	Flows                []Flows                `json:"flows,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfEventSubscription describes the event information delivered in the subscription (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfEventSubscription)
type AfEventSubscription struct {
	// Event Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfEvent
	Event AfEvent `json:"event"`

	// NotifMethod Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfNotifMethod
	NotifMethod          *AfNotifMethod         `json:"notifMethod,omitempty"`
	RepPeriod            *DurationSec           `json:"repPeriod,omitempty"`
	WaitTime             *DurationSec           `json:"waitTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfExternal Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AfExternal
type AfExternal struct {
	// AfId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AfId
	AfId                  *AfId         `json:"afId,omitempty"`
	AllowedGeographicArea []interface{} `json:"allowedGeographicArea,omitempty"`

	// PrivacyCheckRelatedAction Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PrivacyCheckRelatedAction
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`

	// ValidTimePeriod Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ValidTimePeriod
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AfId
type AfId = string

// AfNotifMethod Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfNotifMethod
type AfNotifMethod string

// AfRequestedData Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRequestedData
type AfRequestedData string

// AfResultInfo Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/AfResultInfo
type AfResultInfo struct {
	// AfStatus Possible values are - SUCCESS: The application layer is ready or the relocation is completed. - TEMPORARY_CONGESTION: The application relocation fails due to temporary congestion. - RELOC_NO_ALLOWED: The application relocation fails because application relocation is not allowed. - OTHER: The application relocation fails due to other reason.
	//  (Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/AfResultStatus)
	AfStatus             AfResultStatus         `json:"afStatus"`
	TrafficRoute         *RouteToLocation       `json:"trafficRoute"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfResultStatus Possible values are - SUCCESS: The application layer is ready or the relocation is completed. - TEMPORARY_CONGESTION: The application relocation fails due to temporary congestion. - RELOC_NO_ALLOWED: The application relocation fails because application relocation is not allowed. - OTHER: The application relocation fails due to other reason.
//
//	(Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/AfResultStatus)
type AfResultStatus string

// AfRoutingRequirement describes the event information delivered in the subscription (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRoutingRequirement)
type AfRoutingRequirement struct {
	AddrPreserInd *bool             `json:"addrPreserInd,omitempty"`
	AppReloc      *bool             `json:"appReloc,omitempty"`
	RouteToLocs   []RouteToLocation `json:"routeToLocs,omitempty"`

	// SpVal describes explicitly the route to an Application location (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SpatialValidity)
	SpVal    *SpatialValidity   `json:"spVal,omitempty"`
	TempVals []TemporalValidity `json:"tempVals,omitempty"`

	// UpPathChgSub Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UpPathChgEvent
	UpPathChgSub         *UpPathChgEvent        `json:"upPathChgSub"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfRoutingRequirementRm this data type is defined in the same way as the AfRoutingRequirement data type, but with the OpenAPI nullable property set to true and the spVal and tempVals attributes defined as removable. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRoutingRequirementRm)
type AfRoutingRequirementRm struct {
	AddrPreserInd *bool              `json:"addrPreserInd"`
	AppReloc      *bool              `json:"appReloc,omitempty"`
	RouteToLocs   *[]RouteToLocation `json:"routeToLocs"`

	// SpVal this data type is defined in the same way as the SpatialValidity data type, but with the OpenAPI nullable property set to true (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SpatialValidityRm)
	SpVal    *SpatialValidityRm  `json:"spVal"`
	TempVals *[]TemporalValidity `json:"tempVals"`

	// UpPathChgSub Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UpPathChgEvent
	UpPathChgSub         *UpPathChgEvent        `json:"upPathChgSub"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfSigProtocol Possible values are - NO_INFORMATION: Indicate that no information about the AF signalling protocol is being provided.  - SIP: Indicate that the signalling protocol is Session Initiation Protocol.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AfSigProtocol)
type AfSigProtocol struct {
	union json.RawMessage
}

// AfSigProtocol0 defines model for AfSigProtocol.0.
type AfSigProtocol0 string

// AfSigProtocol2 This string provides forward-compatibility with future extensions to the enumeration but is not used to encode content defined in the present version of this API.
type AfSigProtocol2 = string

// AllowedMtcProviderInfo Original definition in TS29505_Subscription_Data.yaml#/components/schemas/AllowedMtcProviderInfo
type AllowedMtcProviderInfo struct {
	AfId                   *string                 `json:"afId,omitempty"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	AdditionalProperties   map[string]interface{}  `json:"-"`
}

// AllowedNssai Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AllowedNssai
type AllowedNssai struct {
	AccessType           AccessType             `json:"accessType"`
	AllowedSnssaiList    []AllowedSnssai        `json:"allowedSnssaiList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AllowedSnssai Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AllowedSnssai
type AllowedSnssai struct {
	AllowedSnssai        Snssai                 `json:"allowedSnssai"`
	MappedHomeSnssai     *Snssai                `json:"mappedHomeSnssai,omitempty"`
	NsiInformationList   []NsiInformation       `json:"nsiInformationList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AlternativeQosProfile Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/AlternativeQosProfile
type AlternativeQosProfile struct {
	GuaFbrDl             BitRate                `json:"guaFbrDl,omitempty"`
	GuaFbrUl             BitRate                `json:"guaFbrUl,omitempty"`
	Index                int                    `json:"index"`
	PacketDelayBudget    PacketDelBudget        `json:"packetDelayBudget,omitempty"`
	PacketErrRate        PacketErrRate          `json:"packetErrRate,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmPolicyData Contains the AM policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/AmPolicyData)
type AmPolicyData struct {
	PraInfos             *map[string]PresenceInfo `json:"praInfos,omitempty"`
	SubscCats            []string                 `json:"subscCats,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// Ambr defines model for Ambr.
type Ambr struct {
	Downlink             BitRate                `json:"downlink"`
	Uplink               BitRate                `json:"uplink"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmbrRm defines model for AmbrRm.
type AmbrRm struct {
	Downlink             BitRate                `json:"downlink"`
	Uplink               BitRate                `json:"uplink"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Amf3GppAccessRegistration Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/Amf3GppAccessRegistration
type Amf3GppAccessRegistration struct {
	AmfEeSubscriptionId *Uri         `json:"amfEeSubscriptionId,omitempty"`
	AmfInstanceId       NfInstanceId `json:"amfInstanceId"`

	// AmfServiceNameDereg Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	AmfServiceNameDereg *ServiceName `json:"amfServiceNameDereg,omitempty"`

	// AmfServiceNamePcscfRest Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	AmfServiceNamePcscfRest *ServiceName    `json:"amfServiceNamePcscfRest,omitempty"`
	BackupAmfInfo           []BackupAmfInfo `json:"backupAmfInfo,omitempty"`

	// ContextInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ContextInfo
	ContextInfo      *ContextInfo `json:"contextInfo,omitempty"`
	DeregCallbackUri Uri          `json:"deregCallbackUri"`

	// DrFlag Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/DualRegistrationFlag
	DrFlag *DualRegistrationFlag `json:"drFlag,omitempty"`

	// EpsInterworkingInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/EpsInterworkingInfo
	EpsInterworkingInfo *EpsInterworkingInfo `json:"epsInterworkingInfo,omitempty"`
	Guami               Guami                `json:"guami"`

	// ImsVoPs Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/ImsVoPs
	ImsVoPs                     *ImsVoPs `json:"imsVoPs,omitempty"`
	InitialRegistrationInd      *bool    `json:"initialRegistrationInd,omitempty"`
	NoEeSubscriptionInd         *bool    `json:"noEeSubscriptionInd,omitempty"`
	PcscfRestorationCallbackUri *Uri     `json:"pcscfRestorationCallbackUri,omitempty"`
	Pei                         Pei      `json:"pei,omitempty"`

	// PurgeFlag Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/PurgeFlag
	PurgeFlag         *PurgeFlag         `json:"purgeFlag,omitempty"`
	RatType           RatType            `json:"ratType"`
	RegistrationTime  *DateTime          `json:"registrationTime,omitempty"`
	Supi              Supi               `json:"supi,omitempty"`
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`
	UeSrvccCapability *bool              `json:"ueSrvccCapability,omitempty"`
	UrrpIndicator     *bool              `json:"urrpIndicator,omitempty"`

	// VgmlcAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/VgmlcAddress
	VgmlcAddress         *VgmlcAddress          `json:"vgmlcAddress,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Amf3GppAccessRegistrationModification Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/Amf3GppAccessRegistrationModification
type Amf3GppAccessRegistrationModification struct {
	BackupAmfInfo *[]BackupAmfInfo `json:"backupAmfInfo,omitempty"`

	// EpsInterworkingInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/EpsInterworkingInfo
	EpsInterworkingInfo *EpsInterworkingInfo `json:"epsInterworkingInfo,omitempty"`
	Guami               Guami                `json:"guami"`

	// ImsVoPs Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/ImsVoPs
	ImsVoPs *ImsVoPs `json:"imsVoPs,omitempty"`
	Pei     Pei      `json:"pei,omitempty"`

	// PurgeFlag Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/PurgeFlag
	PurgeFlag            *PurgeFlag             `json:"purgeFlag,omitempty"`
	UeSrvccCapability    *bool                  `json:"ueSrvccCapability"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfCond Subscription to a set of AMFs, based on AMF Set Id and/or AMF Region Id (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AmfCond)
type AmfCond struct {
	AmfRegionId          AmfRegionId            `json:"amfRegionId,omitempty"`
	AmfSetId             AmfSetId               `json:"amfSetId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfCreateEventSubscription Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfCreateEventSubscription
type AmfCreateEventSubscription struct {
	OldGuami *Guami `json:"oldGuami,omitempty"`

	// Subscription Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventSubscription
	Subscription         AmfEventSubscription   `json:"subscription"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfCreatedEventSubscription Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfCreatedEventSubscription
type AmfCreatedEventSubscription struct {
	ReportList []AmfEventReport `json:"reportList,omitempty"`

	// Subscription Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventSubscription
	Subscription         AmfEventSubscription   `json:"subscription"`
	SubscriptionId       Uri                    `json:"subscriptionId"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfDeregInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/AmfDeregInfo
type AmfDeregInfo struct {
	// DeregReason Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/DeregistrationReason
	DeregReason          DeregistrationReason   `json:"deregReason"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEvent Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEvent
type AmfEvent struct {
	AreaList               []AmfEventArea   `json:"areaList,omitempty"`
	IdleStatusInd          *bool            `json:"idleStatusInd,omitempty"`
	ImmediateFlag          *bool            `json:"immediateFlag,omitempty"`
	LocationFilterList     []LocationFilter `json:"locationFilterList,omitempty"`
	MaxReports             *int             `json:"maxReports,omitempty"`
	MaxResponseTime        *DurationSec     `json:"maxResponseTime,omitempty"`
	NextPeriodicReportTime *DateTime        `json:"nextPeriodicReportTime,omitempty"`

	// ReachabilityFilter Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/ReachabilityFilter
	ReachabilityFilter *ReachabilityFilter `json:"reachabilityFilter,omitempty"`

	// RefId Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReferenceId
	RefId                 *UdmEEReferenceId   `json:"refId,omitempty"`
	ReportUeReachable     *bool               `json:"reportUeReachable,omitempty"`
	TrafficDescriptorList []TrafficDescriptor `json:"trafficDescriptorList,omitempty"`

	// Type Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventType
	Type                 AmfEventType           `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventArea Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventArea
type AmfEventArea struct {
	// LadnInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/LadnInfo
	LadnInfo *LadnInfo `json:"ladnInfo,omitempty"`

	// NsiId Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/NsiId
	NsiId                *NsiId                 `json:"nsiId,omitempty"`
	PresenceInfo         *PresenceInfo          `json:"presenceInfo,omitempty"`
	SNssai               *Snssai                `json:"sNssai,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventMode Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventMode
type AmfEventMode struct {
	Expiry     *DateTime     `json:"expiry,omitempty"`
	MaxReports *int          `json:"maxReports,omitempty"`
	RepPeriod  *DurationSec  `json:"repPeriod,omitempty"`
	SampRatio  SamplingRatio `json:"sampRatio,omitempty"`

	// Trigger Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventTrigger
	Trigger              AmfEventTrigger        `json:"trigger"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventNotification Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventNotification
type AmfEventNotification struct {
	// EventSubsSyncInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventSubsSyncInfo
	EventSubsSyncInfo             *AmfEventSubsSyncInfo  `json:"eventSubsSyncInfo,omitempty"`
	NotifyCorrelationId           *string                `json:"notifyCorrelationId,omitempty"`
	ReportList                    []AmfEventReport       `json:"reportList,omitempty"`
	SubsChangeNotifyCorrelationId *string                `json:"subsChangeNotifyCorrelationId,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// AmfEventReport Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventReport
type AmfEventReport struct {
	N5gsUserStateList  []N5GsUserStateInfo `json:"5gsUserStateList,omitempty"`
	AccessTypeList     []AccessType        `json:"accessTypeList,omitempty"`
	AdditionalLocation *UserLocation       `json:"additionalLocation,omitempty"`
	AnyUe              *bool               `json:"anyUe,omitempty"`
	AreaList           []AmfEventArea      `json:"areaList,omitempty"`
	CmInfoList         []CmInfo            `json:"cmInfoList,omitempty"`

	// CommFailure Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/CommunicationFailure
	CommFailure *CommunicationFailure `json:"commFailure,omitempty"`
	Gpsi        Gpsi                  `json:"gpsi,omitempty"`

	// IdleStatusIndication Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/IdleStatusIndication
	IdleStatusIndication *IdleStatusIndication `json:"idleStatusIndication,omitempty"`
	Location             *UserLocation         `json:"location,omitempty"`

	// LossOfConnectReason Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/LossOfConnectivityReason
	LossOfConnectReason *LossOfConnectivityReason `json:"lossOfConnectReason,omitempty"`
	MaxAvailabilityTime *DateTime                 `json:"maxAvailabilityTime,omitempty"`
	NumberOfUes         *int                      `json:"numberOfUes,omitempty"`
	Pei                 Pei                       `json:"pei,omitempty"`

	// Reachability Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/UeReachability
	Reachability *UeReachability `json:"reachability,omitempty"`

	// RefId Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReferenceId
	RefId              *UdmEEReferenceId `json:"refId,omitempty"`
	RegistrationNumber *int              `json:"registrationNumber,omitempty"`
	RmInfoList         []RmInfo          `json:"rmInfoList,omitempty"`

	// State Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventState
	State          AmfEventState `json:"state"`
	SubscriptionId *Uri          `json:"subscriptionId,omitempty"`
	Supi           Supi          `json:"supi,omitempty"`
	TimeStamp      DateTime      `json:"timeStamp"`
	Timezone       *TimeZone     `json:"timezone,omitempty"`

	// Type Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventType
	Type                 AmfEventType           `json:"type"`
	TypeCode             string                 `json:"typeCode,omitempty"`
	UeIdExt              []UEIdExt              `json:"ueIdExt,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventState
type AmfEventState struct {
	Active               bool                   `json:"active"`
	RemainDuration       *DurationSec           `json:"remainDuration,omitempty"`
	RemainReports        *int                   `json:"remainReports,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventSubsSyncInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventSubsSyncInfo
type AmfEventSubsSyncInfo struct {
	SubscriptionList     []AmfEventSubscriptionInfo `json:"subscriptionList"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// AmfEventSubscription Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventSubscription
type AmfEventSubscription struct {
	AnyUE               *bool        `json:"anyUE,omitempty"`
	EventList           []AmfEvent   `json:"eventList"`
	EventNotifyUri      Uri          `json:"eventNotifyUri"`
	Gpsi                Gpsi         `json:"gpsi,omitempty"`
	GroupId             GroupId      `json:"groupId,omitempty"`
	NfId                NfInstanceId `json:"nfId"`
	NotifyCorrelationId string       `json:"notifyCorrelationId"`

	// Options Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventMode
	Options *AmfEventMode `json:"options,omitempty"`
	Pei     Pei           `json:"pei,omitempty"`

	// SourceNfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	SourceNfType                  *NFType                `json:"sourceNfType,omitempty"`
	SubsChangeNotifyCorrelationId *string                `json:"subsChangeNotifyCorrelationId,omitempty"`
	SubsChangeNotifyUri           *Uri                   `json:"subsChangeNotifyUri,omitempty"`
	Supi                          Supi                   `json:"supi,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// AmfEventSubscriptionAddInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AmfEventSubscriptionAddInfo
type AmfEventSubscriptionAddInfo struct {
	// AoiStateList Map of subscribed Area of Interest (AoI) Event State in the old AMF. The JSON pointer to an AmfEventArea element in the areaList IE of the AmfEvent data type shall be the key of the map.
	AoiStateList *map[string]AreaOfInterestEventState `json:"aoiStateList,omitempty"`
	BindingInfo  []string                             `json:"bindingInfo,omitempty"`
	EventSyncInd *bool                                `json:"eventSyncInd,omitempty"`

	// SubscribingNfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	SubscribingNfType    *NFType                `json:"subscribingNfType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventSubscriptionInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventSubscriptionInfo
type AmfEventSubscriptionInfo struct {
	NotifyCorrelationId  *string                `json:"notifyCorrelationId,omitempty"`
	OldSubId             *Uri                   `json:"oldSubId,omitempty"`
	RefIdList            []UdmEEReferenceId     `json:"refIdList"`
	SubId                Uri                    `json:"subId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfEventTrigger Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventTrigger
type AmfEventTrigger string

// AmfEventType Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventType
type AmfEventType string

// AmfId defines model for AmfId.
type AmfId = string

// AmfInfo Information of an AMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AmfInfo)
type AmfInfo struct {
	AmfRegionId          AmfRegionId `json:"amfRegionId"`
	AmfSetId             AmfSetId    `json:"amfSetId"`
	BackupInfoAmfFailure []Guami     `json:"backupInfoAmfFailure,omitempty"`
	BackupInfoAmfRemoval []Guami     `json:"backupInfoAmfRemoval,omitempty"`
	GuamiList            []Guami     `json:"guamiList"`

	// N2InterfaceAmfInfo AMF N2 interface information (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/N2InterfaceAmfInfo)
	N2InterfaceAmfInfo   *N2InterfaceAmfInfo    `json:"n2InterfaceAmfInfo,omitempty"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	TaiRangeList         []TaiRange             `json:"taiRangeList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfName defines model for AmfName.
type AmfName = string

// AmfNon3GppAccessRegistration Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/AmfNon3GppAccessRegistration
type AmfNon3GppAccessRegistration struct {
	AmfEeSubscriptionId *Uri         `json:"amfEeSubscriptionId,omitempty"`
	AmfInstanceId       NfInstanceId `json:"amfInstanceId"`

	// AmfServiceNameDereg Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	AmfServiceNameDereg *ServiceName `json:"amfServiceNameDereg,omitempty"`

	// AmfServiceNamePcscfRest Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	AmfServiceNamePcscfRest *ServiceName    `json:"amfServiceNamePcscfRest,omitempty"`
	BackupAmfInfo           []BackupAmfInfo `json:"backupAmfInfo,omitempty"`

	// ContextInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ContextInfo
	ContextInfo      *ContextInfo `json:"contextInfo,omitempty"`
	DeregCallbackUri Uri          `json:"deregCallbackUri"`
	Guami            Guami        `json:"guami"`

	// ImsVoPs Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/ImsVoPs
	ImsVoPs                     ImsVoPs `json:"imsVoPs"`
	NoEeSubscriptionInd         *bool   `json:"noEeSubscriptionInd,omitempty"`
	PcscfRestorationCallbackUri *Uri    `json:"pcscfRestorationCallbackUri,omitempty"`
	Pei                         Pei     `json:"pei,omitempty"`

	// PurgeFlag Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/PurgeFlag
	PurgeFlag         *PurgeFlag         `json:"purgeFlag,omitempty"`
	RatType           RatType            `json:"ratType"`
	RegistrationTime  *DateTime          `json:"registrationTime,omitempty"`
	Supi              Supi               `json:"supi,omitempty"`
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`
	UrrpIndicator     *bool              `json:"urrpIndicator,omitempty"`

	// VgmlcAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/VgmlcAddress
	VgmlcAddress         *VgmlcAddress          `json:"vgmlcAddress,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfNon3GppAccessRegistrationModification Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/AmfNon3GppAccessRegistrationModification
type AmfNon3GppAccessRegistrationModification struct {
	BackupAmfInfo *[]BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	Guami         Guami            `json:"guami"`

	// ImsVoPs Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/ImsVoPs
	ImsVoPs *ImsVoPs `json:"imsVoPs,omitempty"`
	Pei     Pei      `json:"pei,omitempty"`

	// PurgeFlag Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/PurgeFlag
	PurgeFlag            *PurgeFlag             `json:"purgeFlag,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfRegionId defines model for AmfRegionId.
type AmfRegionId = string

// AmfSetId defines model for AmfSetId.
type AmfSetId = string

// AmfStatusChangeNotification Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AmfStatusChangeNotification
type AmfStatusChangeNotification struct {
	AmfStatusInfoList    []AmfStatusInfo        `json:"amfStatusInfoList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfStatusInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AmfStatusInfo
type AmfStatusInfo struct {
	GuamiList []Guami `json:"guamiList"`

	// StatusChange Original definition in TS29518_Namf_Communication.yaml#/components/schemas/StatusChange
	StatusChange         StatusChange           `json:"statusChange"`
	TargetAmfFailure     *AmfName               `json:"targetAmfFailure,omitempty"`
	TargetAmfRemoval     *AmfName               `json:"targetAmfRemoval,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfSubscriptionInfo Original definition in TS29505_Subscription_Data.yaml#/components/schemas/AmfSubscriptionInfo
type AmfSubscriptionInfo struct {
	AmfInstanceId                 NfInstanceId           `json:"amfInstanceId"`
	SubsChangeNotifyCorrelationId *string                `json:"subsChangeNotifyCorrelationId,omitempty"`
	SubscriptionId                Uri                    `json:"subscriptionId"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// AmfUpdateEventOptionItem Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfUpdateEventOptionItem
type AmfUpdateEventOptionItem struct {
	Op                   AmfUpdateEventOptionItemOp `json:"op"`
	Path                 string                     `json:"path"`
	Value                DateTime                   `json:"value"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// AmfUpdateEventOptionItemOp defines model for AmfUpdateEventOptionItem.Op.
type AmfUpdateEventOptionItemOp string

// AmfUpdateEventSubscriptionItem Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfUpdateEventSubscriptionItem
type AmfUpdateEventSubscriptionItem struct {
	Op   AmfUpdateEventSubscriptionItemOp `json:"op"`
	Path string                           `json:"path"`

	// Value Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEvent
	Value                *AmfEvent              `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfUpdateEventSubscriptionItemOp defines model for AmfUpdateEventSubscriptionItem.Op.
type AmfUpdateEventSubscriptionItemOp string

// AmfUpdatedEventSubscription Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfUpdatedEventSubscription
type AmfUpdatedEventSubscription struct {
	ReportList []AmfEventReport `json:"reportList,omitempty"`

	// Subscription Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventSubscription
	Subscription         AmfEventSubscription   `json:"subscription"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AnGwAddress describes the address of the access network gateway control node (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AnGwAddress)
type AnGwAddress struct {
	AnGwIpv4Addr         Ipv4Addr               `json:"anGwIpv4Addr,omitempty"`
	AnGwIpv6Addr         *Ipv6Addr              `json:"anGwIpv6Addr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AnNodeType Access Network Node Type (gNB, ng-eNB...) (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AnNodeType)
type AnNodeType string

// AnchorSmfFeatures Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/AnchorSmfFeatures
type AnchorSmfFeatures struct {
	PsetrSupportInd      *bool                  `json:"psetrSupportInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ApnRateStatus defines model for ApnRateStatus.
type ApnRateStatus struct {
	RemainExReportsDl    *int                   `json:"remainExReportsDl,omitempty"`
	RemainExReportsUl    *int                   `json:"remainExReportsUl,omitempty"`
	RemainPacketsDl      *int                   `json:"remainPacketsDl,omitempty"`
	RemainPacketsUl      *int                   `json:"remainPacketsUl,omitempty"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppDescriptor Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AppDescriptor
type AppDescriptor struct {
	AppId *string `json:"appId,omitempty"`

	// OsId Original definition in TS29519_Policy_Data.yaml#/components/schemas/OsId
	OsId                 *OsId                  `json:"osId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppDetectionInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AppDetectionInfo
type AppDetectionInfo struct {
	// AppId A reference to the application detection filter configured at the UPF
	AppId string `json:"appId"`

	// InstanceId Identifier sent by the SMF in order to allow correlation of application Start and Stop events to the specific service data flow description, if service data flow descriptions are deducible.
	InstanceId *string `json:"instanceId,omitempty"`

	// SdfDescriptions Contains the detected service data flow descriptions if they are deducible.
	SdfDescriptions      []FlowInformation      `json:"sdfDescriptions,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppPortId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AppPortId
type AppPortId struct {
	DestinationPort      *Uint16                `json:"destinationPort,omitempty"`
	OriginatorPort       *Uint16                `json:"originatorPort,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppSessionContext Represents an Individual Application Session Context resource. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContext)
type AppSessionContext struct {
	// AscReqData Identifies the service requirements of an Individual Application Session Context. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContextReqData)
	AscReqData *AppSessionContextReqData `json:"ascReqData,omitempty"`

	// AscRespData Describes the authorization data of an Individual Application Session Context created by the PCF. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContextRespData)
	AscRespData *AppSessionContextRespData `json:"ascRespData,omitempty"`

	// EvsNotif describes the notification of a matched event (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EventsNotification)
	EvsNotif             *EventsNotification    `json:"evsNotif,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppSessionContextReqData Identifies the service requirements of an Individual Application Session Context. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContextReqData)
type AppSessionContextReqData struct {
	// AfAppId Contains an AF application identifier. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfAppId)
	AfAppId   *AfAppId               `json:"afAppId,omitempty"`
	AfChargId *ApplicationChargingId `json:"afChargId,omitempty"`

	// AfReqData Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRequestedData
	AfReqData *AfRequestedData `json:"afReqData,omitempty"`

	// AfRoutReq describes the event information delivered in the subscription (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRoutingRequirement)
	AfRoutReq *AfRoutingRequirement `json:"afRoutReq,omitempty"`

	// AspId Contains an identity of an application service provider. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AspId)
	AspId *PolicyAuthorizationAspId `json:"aspId,omitempty"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId *BdtReferenceId `json:"bdtRefId,omitempty"`
	Dnn      *Dnn            `json:"dnn,omitempty"`

	// EvSubsc Identifies the events the application subscribes to. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EventsSubscReqData)
	EvSubsc  *EventsSubscReqData `json:"evSubsc,omitempty"`
	Gpsi     Gpsi                `json:"gpsi,omitempty"`
	IpDomain *string             `json:"ipDomain,omitempty"`

	// McVideoId indication of MCVideo service request
	McVideoId *string `json:"mcVideoId,omitempty"`

	// McpttId indication of MCPTT service request
	McpttId *string `json:"mcpttId,omitempty"`

	// McsId indication of MCS service request
	McsId         *string                    `json:"mcsId,omitempty"`
	MedComponents *map[string]MediaComponent `json:"medComponents,omitempty"`

	// MpsId indication of MPS service request
	MpsId    *string `json:"mpsId,omitempty"`
	NotifUri Uri     `json:"notifUri"`

	// PreemptControlInfo Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PreemptionControlInformation
	PreemptControlInfo *PreemptionControlInformation `json:"preemptControlInfo,omitempty"`

	// ResPrio Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ReservPriority
	ResPrio *ReservPriority `json:"resPrio,omitempty"`

	// ServInfStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ServiceInfoStatus
	ServInfStatus *ServiceInfoStatus `json:"servInfStatus,omitempty"`

	// ServUrn Contains values of the service URN and may include subservices. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ServiceUrn)
	ServUrn   *ServiceUrn `json:"servUrn,omitempty"`
	SliceInfo *Snssai     `json:"sliceInfo,omitempty"`

	// SponId Contains an identity of a sponsor. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SponId)
	SponId *SponId `json:"sponId,omitempty"`

	// SponStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SponsoringStatus
	SponStatus *SponsoringStatus `json:"sponStatus,omitempty"`
	Supi       Supi              `json:"supi,omitempty"`
	SuppFeat   SupportedFeatures `json:"suppFeat"`

	// TsnBridgeManCont Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt   *PortManagementContainer  `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts  []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`
	UeIpv4               Ipv4Addr                  `json:"ueIpv4,omitempty"`
	UeIpv6               *Ipv6Addr                 `json:"ueIpv6,omitempty"`
	UeMac                MacAddr48                 `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// AppSessionContextRespData Describes the authorization data of an Individual Application Session Context created by the PCF. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContextRespData)
type AppSessionContextRespData struct {
	// ServAuthInfo Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ServAuthInfo
	ServAuthInfo         *ServAuthInfo          `json:"servAuthInfo,omitempty"`
	SuppFeat             *SupportedFeatures     `json:"suppFeat,omitempty"`
	UeIds                []UeIdentityInfo       `json:"ueIds,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppSessionContextUpdateData Identifies the modifications to the "ascReqData" property of an Individual Application Session Context which may include the modifications to the sub-resource Events Subscription. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContextUpdateData)
type AppSessionContextUpdateData struct {
	// AfAppId Contains an AF application identifier. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfAppId)
	AfAppId *AfAppId `json:"afAppId,omitempty"`

	// AfRoutReq this data type is defined in the same way as the AfRoutingRequirement data type, but with the OpenAPI nullable property set to true and the spVal and tempVals attributes defined as removable. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRoutingRequirementRm)
	AfRoutReq *AfRoutingRequirementRm `json:"afRoutReq"`

	// AspId Contains an identity of an application service provider. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AspId)
	AspId *PolicyAuthorizationAspId `json:"aspId,omitempty"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId *BdtReferenceId `json:"bdtRefId,omitempty"`

	// EvSubsc this data type is defined in the same way as the EventsSubscReqData data type, but with the OpenAPI nullable property set to true. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EventsSubscReqDataRm)
	EvSubsc *EventsSubscReqDataRm `json:"evSubsc"`

	// McVideoId indication of modification of MCVideo service
	McVideoId *string `json:"mcVideoId,omitempty"`

	// McpttId indication of MCPTT service request
	McpttId *string `json:"mcpttId,omitempty"`

	// McsId indication of MCS service request
	McsId         *string                       `json:"mcsId,omitempty"`
	MedComponents *map[string]*MediaComponentRm `json:"medComponents,omitempty"`

	// MpsId indication of MPS service request
	MpsId *string `json:"mpsId,omitempty"`

	// PreemptControlInfo Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PreemptionControlInformation
	PreemptControlInfo *PreemptionControlInformationRm `json:"preemptControlInfo,omitempty"`

	// ResPrio Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ReservPriority
	ResPrio *ReservPriority `json:"resPrio,omitempty"`

	// ServInfStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ServiceInfoStatus
	ServInfStatus *ServiceInfoStatus `json:"servInfStatus,omitempty"`

	// SipForkInd Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SipForkingIndication
	SipForkInd *SipForkingIndication `json:"sipForkInd,omitempty"`

	// SponId Contains an identity of a sponsor. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SponId)
	SponId *SponId `json:"sponId,omitempty"`

	// SponStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SponsoringStatus
	SponStatus *SponsoringStatus `json:"sponStatus,omitempty"`

	// TsnBridgeManCont Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt   *PortManagementContainer  `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts  []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// AppSessionContextUpdateDataPatch Identifies the modifications to an Individual Application Session Context and/or the modifications to the sub-resource Events Subscription. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContextUpdateDataPatch)
type AppSessionContextUpdateDataPatch struct {
	// AscReqData Identifies the modifications to the "ascReqData" property of an Individual Application Session Context which may include the modifications to the sub-resource Events Subscription. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AppSessionContextUpdateData)
	AscReqData           *AppSessionContextUpdateData `json:"ascReqData,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// ApplicationChargingId defines model for ApplicationChargingId.
type ApplicationChargingId = string

// ApplicationDataChangeNotif Contains changed application data for which notification was requested. (Original definition in TS29519_Application_Data.yaml#/components/schemas/ApplicationDataChangeNotif)
type ApplicationDataChangeNotif struct {
	// BdtPolicyData Original definition in TS29519_Application_Data.yaml#/components/schemas/BdtPolicyData
	BdtPolicyData *BdtPolicyData `json:"bdtPolicyData,omitempty"`

	// IptvConfigData Original definition in TS29519_Application_Data.yaml#/components/schemas/IptvConfigData
	IptvConfigData *IptvConfigData `json:"iptvConfigData,omitempty"`

	// PfdData Original definition in TS29551_Nnef_PFDmanagement.yaml#/components/schemas/PfdChangeNotification
	PfdData *PfdChangeNotification `json:"pfdData,omitempty"`
	ResUri  Uri                    `json:"resUri"`

	// SerParamData Original definition in TS29519_Application_Data.yaml#/components/schemas/ServiceParameterData
	SerParamData         *ServiceParameterData  `json:"serParamData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ApplicationDataSubs Identifies a subscription to application data change notification. (Original definition in TS29519_Application_Data.yaml#/components/schemas/ApplicationDataSubs)
type ApplicationDataSubs struct {
	DataFilters          []DataFilter           `json:"dataFilters,omitempty"`
	Expiry               *DateTime              `json:"expiry,omitempty"`
	NotificationUri      Uri                    `json:"notificationUri"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ApplicationDescriptor defines model for ApplicationDescriptor.
type ApplicationDescriptor = Bytes

// ApplicationId defines model for ApplicationId.
type ApplicationId = string

// Area defines model for Area.
type Area struct {
	AreaCode             *AreaCode              `json:"areaCode,omitempty"`
	Tacs                 []Tac                  `json:"tacs,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AreaCode defines model for AreaCode.
type AreaCode = string

// AreaOfInterestEventState Event State of AoI event in old AMF (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AreaOfInterestEventState)
type AreaOfInterestEventState struct {
	IndividualPraIdList  []string               `json:"individualPraIdList,omitempty"`
	Presence             PresenceState          `json:"presence"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AreaOfValidity Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AreaOfValidity
type AreaOfValidity struct {
	TaiList              []Tai                  `json:"taiList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AreaScope defines model for AreaScope.
type AreaScope struct {
	EutraCellIdList      []EutraCellId          `json:"eutraCellIdList,omitempty"`
	NrCellIdList         []NrCellId             `json:"nrCellIdList,omitempty"`
	TacInfoPerPlmn       *map[string]TacInfo    `json:"tacInfoPerPlmn,omitempty"`
	TacList              []Tac                  `json:"tacList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ArfcnValueNR defines model for ArfcnValueNR.
type ArfcnValueNR = int

// Arp defines model for Arp.
type Arp struct {
	PreemptCap  PreemptionCapability    `json:"preemptCap"`
	PreemptVuln PreemptionVulnerability `json:"preemptVuln"`

	// PriorityLevel nullable true shall not be used for this attribute
	PriorityLevel        *ArpPriorityLevel      `json:"priorityLevel"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ArpPriorityLevel nullable true shall not be used for this attribute
type ArpPriorityLevel = int

// AssignEbiData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AssignEbiData
type AssignEbiData struct {
	ArpList              []Arp                  `json:"arpList,omitempty"`
	OldGuami             *Guami                 `json:"oldGuami,omitempty"`
	PduSessionId         PduSessionId           `json:"pduSessionId"`
	ReleasedEbiList      []EpsBearerId          `json:"releasedEbiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AssignEbiError Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AssignEbiError
type AssignEbiError struct {
	Error ProblemDetails `json:"error"`

	// FailureDetails Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AssignEbiFailed
	FailureDetails       AssignEbiFailed        `json:"failureDetails"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AssignEbiFailed Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AssignEbiFailed
type AssignEbiFailed struct {
	FailedArpList        []Arp                  `json:"failedArpList,omitempty"`
	PduSessionId         PduSessionId           `json:"pduSessionId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AssignedEbiData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AssignedEbiData
type AssignedEbiData struct {
	AssignedEbiList      []EbiArpMapping        `json:"assignedEbiList"`
	FailedArpList        []Arp                  `json:"failedArpList,omitempty"`
	PduSessionId         PduSessionId           `json:"pduSessionId"`
	ReleasedEbiList      []EpsBearerId          `json:"releasedEbiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AssociationType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/AssociationType
type AssociationType string

// Atom defines model for Atom.
type Atom struct {
	Attr                 string                 `json:"attr"`
	Negative             *bool                  `json:"negative,omitempty"`
	Value                interface{}            `json:"value"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AtsssCapability defines model for AtsssCapability.
type AtsssCapability struct {
	AtsssLL              *bool                  `json:"atsssLL,omitempty"`
	Mptcp                *bool                  `json:"mptcp,omitempty"`
	RttWithoutPmf        *bool                  `json:"rttWithoutPmf,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AusfInfo Information of an AUSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AusfInfo)
type AusfInfo struct {
	GroupId              *NfGroupId             `json:"groupId,omitempty"`
	RoutingIndicators    []string               `json:"routingIndicators,omitempty"`
	SupiRanges           []SupiRange            `json:"supiRanges,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthEvent Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthEvent
type AuthEvent struct {
	AuthRemovalInd *bool `json:"authRemovalInd,omitempty"`

	// AuthType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthType
	AuthType     AuthType     `json:"authType"`
	NfInstanceId NfInstanceId `json:"nfInstanceId"`
	NfSetId      *NfSetId     `json:"nfSetId,omitempty"`

	// ServingNetworkName Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ServingNetworkName
	ServingNetworkName ServingNetworkName `json:"servingNetworkName"`

	// Success Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Success
	Success              Success                `json:"success"`
	TimeStamp            DateTime               `json:"timeStamp"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthMethod Original definition in TS29505_Subscription_Data.yaml#/components/schemas/AuthMethod
type AuthMethod string

// AuthResult Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/AuthResult
type AuthResult string

// AuthStatus Possible values are - "EAP_SUCCESS": The NSSAA status is EAP-Success. - "EAP_FAILURE": The NSSAA status is EAP-Failure. - "PENDING": The NSSAA status is Pending.
type AuthStatus string

// AuthType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthType
type AuthType string

// AuthenticatedInd Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthenticatedInd
type AuthenticatedInd = bool

// AuthenticationInfo Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/AuthenticationInfo
type AuthenticationInfo struct {
	CellCagInfo []CagId `json:"cellCagInfo,omitempty"`
	N5gcInd     *bool   `json:"n5gcInd,omitempty"`
	Pei         Pei     `json:"pei,omitempty"`

	// ResynchronizationInfo Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ResynchronizationInfo
	ResynchronizationInfo *ResynchronizationInfo `json:"resynchronizationInfo,omitempty"`
	RoutingIndicator      string                 `json:"routingIndicator,omitempty"`

	// ServingNetworkName Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ServingNetworkName
	ServingNetworkName   ServingNetworkName     `json:"servingNetworkName"`
	SupiOrSuci           SupiOrSuci             `json:"supiOrSuci"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	TraceData            *TraceData             `json:"traceData"`
	UdmGroupId           *NfGroupId             `json:"udmGroupId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthenticationInfoRequest Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthenticationInfoRequest
type AuthenticationInfoRequest struct {
	AusfInstanceId NfInstanceId `json:"ausfInstanceId"`
	CellCagInfo    []CagId      `json:"cellCagInfo,omitempty"`
	N5gcInd        *bool        `json:"n5gcInd,omitempty"`

	// ResynchronizationInfo Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ResynchronizationInfo
	ResynchronizationInfo *ResynchronizationInfo `json:"resynchronizationInfo,omitempty"`

	// ServingNetworkName Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ServingNetworkName
	ServingNetworkName   ServingNetworkName     `json:"servingNetworkName"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthenticationInfoResult Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthenticationInfoResult
type AuthenticationInfoResult struct {
	// AuthType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthType
	AuthType AuthType `json:"authType"`

	// AuthenticationVector Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthenticationVector
	AuthenticationVector *AuthenticationVector  `json:"authenticationVector,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthenticationSubscription Original definition in TS29505_Subscription_Data.yaml#/components/schemas/AuthenticationSubscription
type AuthenticationSubscription struct {
	AlgorithmId                   *string `json:"algorithmId,omitempty"`
	AuthenticationManagementField string  `json:"authenticationManagementField,omitempty"`

	// AuthenticationMethod Original definition in TS29505_Subscription_Data.yaml#/components/schemas/AuthMethod
	AuthenticationMethod AuthMethod `json:"authenticationMethod"`
	EncOpcKey            *string    `json:"encOpcKey,omitempty"`
	EncPermanentKey      *string    `json:"encPermanentKey,omitempty"`
	EncTopcKey           *string    `json:"encTopcKey,omitempty"`

	// N5gcAuthMethod Original definition in TS29505_Subscription_Data.yaml#/components/schemas/AuthMethod
	N5gcAuthMethod        *AuthMethod `json:"n5gcAuthMethod,omitempty"`
	ProtectionParameterId *string     `json:"protectionParameterId,omitempty"`
	RgAuthenticationInd   *bool       `json:"rgAuthenticationInd,omitempty"`

	// SequenceNumber Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SequenceNumber
	SequenceNumber        *SequenceNumber        `json:"sequenceNumber,omitempty"`
	Supi                  Supi                   `json:"supi,omitempty"`
	VectorGenerationInHss *bool                  `json:"vectorGenerationInHss,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// AuthenticationVector Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AuthenticationVector
type AuthenticationVector struct {
	union json.RawMessage
}

// AuthorizationData Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/AuthorizationData
type AuthorizationData struct {
	AuthorizationData    []UserIdentifier       `json:"authorizationData"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizationInfo Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/AuthorizationInfo
type AuthorizationInfo struct {
	AfId                   *string                `json:"afId,omitempty"`
	AuthUpdateCallbackUri  Uri                    `json:"authUpdateCallbackUri"`
	Dnn                    Dnn                    `json:"dnn"`
	MtcProviderInformation MtcProviderInformation `json:"mtcProviderInformation"`

	// NefId Identity of the NEF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefId)
	NefId                *NefId                 `json:"nefId,omitempty"`
	Snssai               Snssai                 `json:"snssai"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizedDefaultQos Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AuthorizedDefaultQos
type AuthorizedDefaultQos struct {
	N5qi                 *N5Qi                  `json:"5qi,omitempty"`
	Arp                  *Arp                   `json:"arp,omitempty"`
	AverWindow           *AverWindowRm          `json:"averWindow"`
	ExtMaxDataBurstVol   *ExtMaxDataBurstVolRm  `json:"extMaxDataBurstVol"`
	GbrDl                *BitRateRm             `json:"gbrDl"`
	GbrUl                *BitRateRm             `json:"gbrUl"`
	MaxDataBurstVol      *MaxDataBurstVolRm     `json:"maxDataBurstVol"`
	MaxbrDl              *BitRateRm             `json:"maxbrDl"`
	MaxbrUl              *BitRateRm             `json:"maxbrUl"`
	PriorityLevel        *N5QiPriorityLevelRm   `json:"priorityLevel"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizedNetworkSliceInfo Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AuthorizedNetworkSliceInfo
type AuthorizedNetworkSliceInfo struct {
	AllowedNssaiList        []AllowedNssai     `json:"allowedNssaiList,omitempty"`
	CandidateAmfList        []NfInstanceId     `json:"candidateAmfList,omitempty"`
	ConfiguredNssai         []ConfiguredSnssai `json:"configuredNssai,omitempty"`
	MappingOfNssai          []MappingOfSnssai  `json:"mappingOfNssai,omitempty"`
	NrfAmfSet               *Uri               `json:"nrfAmfSet,omitempty"`
	NrfAmfSetAccessTokenUri *Uri               `json:"nrfAmfSetAccessTokenUri,omitempty"`
	NrfAmfSetNfMgtUri       *Uri               `json:"nrfAmfSetNfMgtUri,omitempty"`

	// NsiInformation Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/NsiInformation
	NsiInformation       *NsiInformation        `json:"nsiInformation,omitempty"`
	RejectedNssaiInPlmn  []Snssai               `json:"rejectedNssaiInPlmn,omitempty"`
	RejectedNssaiInTa    []Snssai               `json:"rejectedNssaiInTa,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	TargetAmfServiceSet  *NfServiceSetId        `json:"targetAmfServiceSet,omitempty"`
	TargetAmfSet         string                 `json:"targetAmfSet,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizedNssaiAvailabilityData Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/AuthorizedNssaiAvailabilityData
type AuthorizedNssaiAvailabilityData struct {
	RestrictedSnssaiList []RestrictedSnssai     `json:"restrictedSnssaiList,omitempty"`
	SupportedSnssaiList  []ExtSnssai            `json:"supportedSnssaiList"`
	Tai                  Tai                    `json:"tai"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	TaiRangeList         []TaiRange             `json:"taiRangeList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizedNssaiAvailabilityInfo Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/AuthorizedNssaiAvailabilityInfo
type AuthorizedNssaiAvailabilityInfo struct {
	AuthorizedNssaiAvailabilityData []AuthorizedNssaiAvailabilityData `json:"authorizedNssaiAvailabilityData"`
	SupportedFeatures               *SupportedFeatures                `json:"supportedFeatures,omitempty"`
	AdditionalProperties            map[string]interface{}            `json:"-"`
}

// Autn Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Autn
type Autn = string

// Auts Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Auts
type Auts = string

// Av5GHeAka Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Av5GHeAka
type Av5GHeAka struct {
	// Autn Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Autn
	Autn Autn `json:"autn"`

	// AvType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AvType
	AvType AvType `json:"avType"`

	// Kausf Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Kausf
	Kausf Kausf `json:"kausf"`

	// Rand Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Rand
	Rand Rand `json:"rand"`

	// XresStar Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/XresStar
	XresStar             XresStar               `json:"xresStar"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Av5gAka Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/Av5gAka
type Av5gAka struct {
	// Autn Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Autn
	Autn Autn `json:"autn"`

	// HxresStar Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/HxresStar
	HxresStar HxresStar `json:"hxresStar"`

	// Rand Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Rand
	Rand                 Rand                   `json:"rand"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvEapAkaPrime Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AvEapAkaPrime
type AvEapAkaPrime struct {
	// Autn Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Autn
	Autn Autn `json:"autn"`

	// AvType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AvType
	AvType AvType `json:"avType"`

	// CkPrime Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/CkPrime
	CkPrime CkPrime `json:"ckPrime"`

	// IkPrime Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/IkPrime
	IkPrime IkPrime `json:"ikPrime"`

	// Rand Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Rand
	Rand Rand `json:"rand"`

	// Xres Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Xres
	Xres                 Xres                   `json:"xres"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvEpsAka Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AvEpsAka
type AvEpsAka struct {
	// Autn Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Autn
	Autn Autn `json:"autn"`

	// AvType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAvType
	AvType HssAvType `json:"avType"`

	// Kasme Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Kasme
	Kasme Kasme `json:"kasme"`

	// Rand Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Rand
	Rand Rand `json:"rand"`

	// Xres Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Xres
	Xres                 Xres                   `json:"xres"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvImsGbaEapAka Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AvImsGbaEapAka
type AvImsGbaEapAka struct {
	// Autn Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Autn
	Autn Autn `json:"autn"`

	// AvType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAvType
	AvType HssAvType `json:"avType"`

	// Ck Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ConfidentialityKey
	Ck ConfidentialityKey `json:"ck"`

	// Ik Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/IntegrityKey
	Ik IntegrityKey `json:"ik"`

	// Rand Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Rand
	Rand Rand `json:"rand"`

	// Xres Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Xres
	Xres                 Xres                   `json:"xres"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AvType
type AvType string

// AverWindow defines model for AverWindow.
type AverWindow = int

// AverWindowRm defines model for AverWindowRm.
type AverWindowRm = int

// BDTPolicyControlAspId Contains an identity of an application service provider. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/AspId)
type BDTPolicyControlAspId = string

// BackupAmfInfo defines model for BackupAmfInfo.
type BackupAmfInfo struct {
	BackupAmf            AmfName                `json:"backupAmf"`
	GuamiList            []Guami                `json:"guamiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BatteryIndication defines model for BatteryIndication.
type BatteryIndication struct {
	BatteryInd           *bool                  `json:"batteryInd,omitempty"`
	RechargeableInd      *bool                  `json:"rechargeableInd,omitempty"`
	ReplaceableInd       *bool                  `json:"replaceableInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BatteryIndicationRm defines model for BatteryIndicationRm.
type BatteryIndicationRm struct {
	BatteryInd           *bool                  `json:"batteryInd,omitempty"`
	RechargeableInd      *bool                  `json:"rechargeableInd,omitempty"`
	ReplaceableInd       *bool                  `json:"replaceableInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtData Contains the background data transfer data. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/BdtData)
type BdtData struct {
	AspId string `json:"aspId"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId *BdtReferenceId `json:"bdtRefId,omitempty"`

	// BdtpStatus Indicates the validation status of a negotiated BDT policy. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/BdtPolicyStatus)
	BdtpStatus *BdtPolicyStatus `json:"bdtpStatus,omitempty"`
	Dnn        *Dnn             `json:"dnn,omitempty"`
	NumOfUes   *Uinteger        `json:"numOfUes,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/NetworkAreaInfo)
	NwAreaInfo *PcfNetworkAreaInfo `json:"nwAreaInfo,omitempty"`
	Snssai     *Snssai             `json:"snssai,omitempty"`
	SuppFeat   *SupportedFeatures  `json:"suppFeat,omitempty"`

	// TrafficDes Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP TS 24.526, octets v+5 to w. (Original reference TS29122_ResourceManagementOfBdt.yaml#/components/schemas/TrafficDescriptor)
	TrafficDes *string `json:"trafficDes,omitempty"`

	// TransPolicy Describes a transfer policy. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/TransferPolicy)
	TransPolicy TransferPolicy `json:"transPolicy"`

	// VolPerUe Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThreshold
	VolPerUe             *UsageThreshold        `json:"volPerUe,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtDataPatch Contains the modified background data transfer data. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/BdtDataPatch)
type BdtDataPatch struct {
	// BdtpStatus Indicates the validation status of a negotiated BDT policy. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/BdtPolicyStatus)
	BdtpStatus *BdtPolicyStatus `json:"bdtpStatus,omitempty"`

	// TransPolicy Describes a transfer policy. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/TransferPolicy)
	TransPolicy          *TransferPolicy        `json:"transPolicy,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtPolicy Represents an Individual BDT policy resource. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtPolicy)
type BdtPolicy struct {
	// BdtPolData Describes the authorization data of an Individual BDT policy resource. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtPolicyData)
	BdtPolData *PcfBdtPolicyData `json:"bdtPolData,omitempty"`

	// BdtReqData Contains service requirements for creation a new Individual BDT policy resource. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtReqData)
	BdtReqData           *BdtReqData            `json:"bdtReqData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtPolicyData Original definition in TS29519_Application_Data.yaml#/components/schemas/BdtPolicyData
type BdtPolicyData struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId             BdtReferenceId         `json:"bdtRefId"`
	Dnn                  *Dnn                   `json:"dnn,omitempty"`
	InterGroupId         GroupId                `json:"interGroupId,omitempty"`
	ResUri               *Uri                   `json:"resUri,omitempty"`
	Snssai               *Snssai                `json:"snssai,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtPolicyDataPatch Original definition in TS29519_Application_Data.yaml#/components/schemas/BdtPolicyDataPatch
type BdtPolicyDataPatch struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId             BdtReferenceId         `json:"bdtRefId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtPolicyStatus Indicates the validation status of a negotiated BDT policy. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/BdtPolicyStatus)
type BdtPolicyStatus string

// BdtReferenceId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
type BdtReferenceId = string

// BdtReferenceIdRm This data type is defined in the same way as the BdtReferenceId data type, but with the nullable property set to true. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceIdRm)
type BdtReferenceIdRm = string

// BdtReqData Contains service requirements for creation a new Individual BDT policy resource. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtReqData)
type BdtReqData struct {
	// AspId Contains an identity of an application service provider. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/AspId)
	AspId BDTPolicyControlAspId `json:"aspId"`

	// DesTimeInt Original definition in TS29122_CommonData.yaml#/components/schemas/TimeWindow
	DesTimeInt   TimeWindow `json:"desTimeInt"`
	Dnn          *Dnn       `json:"dnn,omitempty"`
	InterGroupId GroupId    `json:"interGroupId,omitempty"`
	NotifUri     *Uri       `json:"notifUri,omitempty"`

	// NumOfUes Indicates a number of UEs.
	NumOfUes int `json:"numOfUes"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/NetworkAreaInfo)
	NwAreaInfo *PcfNetworkAreaInfo `json:"nwAreaInfo,omitempty"`
	Snssai     *Snssai             `json:"snssai,omitempty"`
	SuppFeat   *SupportedFeatures  `json:"suppFeat,omitempty"`

	// TrafficDes Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP TS 24.526, octets v+5 to w. (Original reference TS29122_ResourceManagementOfBdt.yaml#/components/schemas/TrafficDescriptor)
	TrafficDes *string `json:"trafficDes,omitempty"`

	// VolPerUe Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThreshold
	VolPerUe UsageThreshold `json:"volPerUe"`

	// WarnNotifReq Indicates whether the BDT warning notification is enabled or disabled.
	WarnNotifReq         *bool                  `json:"warnNotifReq,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtReqDataPatch A JSON Merge Patch body schema containing modification instruction to be performed on the bdtReqData attribute of the BdtPolicy data structure to indicate whether the BDT warning notification is enabled or disabled. Modifies warnNotifReq from BdtReqData data structure. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtReqDataPatch)
type BdtReqDataPatch struct {
	// WarnNotifReq Indicates whether the BDT warning notification is enabled or disabled.
	WarnNotifReq         *bool                  `json:"warnNotifReq,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BindingLevel Possible values are - "NF_SET" - "NF_INSTANCE"
//
//	(Original definition in TS29521_Nbsf_Management.yaml#/components/schemas/BindingLevel)
type BindingLevel string

// BindingResp Original definition in TS29521_Nbsf_Management.yaml#/components/schemas/BindingResp
type BindingResp struct {
	// PcfSmFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	PcfSmFqdn *Fqdn `json:"pcfSmFqdn,omitempty"`

	// PcfSmIpEndPoints IP end points of the PCF hosting the Npcf_SMPolicyControl service.
	PcfSmIpEndPoints     []IpEndPoint           `json:"pcfSmIpEndPoints,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BitRate defines model for BitRate.
type BitRate = string

// BitRateRm defines model for BitRateRm.
type BitRateRm = string

// BootstrappingInfo Information returned by NRF in the bootstrapping response message (Original definition in TS29510_Nnrf_Bootstrapping.yaml#/components/schemas/BootstrappingInfo)
type BootstrappingInfo struct {
	// Links Map of link objects where the keys are the link relations defined in 3GPP TS 29.510 clause 6.4.6.3.3
	Links map[string]LinksValueSchema `json:"_links"`

	// Status Overal status of the NRF (Original definition in TS29510_Nnrf_Bootstrapping.yaml#/components/schemas/Status)
	Status               *Status                `json:"status,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BridgeManagementContainer Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
type BridgeManagementContainer struct {
	BridgeManCont        Bytes                  `json:"bridgeManCont"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BsfInfo Information of a BSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/BsfInfo)
type BsfInfo struct {
	DnnList              []Dnn                  `json:"dnnList,omitempty"`
	IpDomainList         []string               `json:"ipDomainList,omitempty"`
	Ipv4AddressRanges    []Ipv4AddressRange     `json:"ipv4AddressRanges,omitempty"`
	Ipv6PrefixRanges     []Ipv6PrefixRange      `json:"ipv6PrefixRanges,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Bytes defines model for Bytes.
type Bytes = []byte

// CMsisdn defines model for CMsisdn.
type CMsisdn = string

// CagAckData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/CagAckData
type CagAckData struct {
	ProvisioningTime DateTime `json:"provisioningTime"`

	// UeUpdateStatus Original definition in TS29505_Subscription_Data.yaml#/components/schemas/UeUpdateStatus
	UeUpdateStatus       UeUpdateStatus         `json:"ueUpdateStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CagData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CagData
type CagData struct {
	// CagInfos A map (list of key-value pairs where PlmnId serves as key) of CagInfo
	CagInfos             map[string]CagInfo     `json:"cagInfos"`
	ProvisioningTime     *DateTime              `json:"provisioningTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CagId defines model for CagId.
type CagId = string

// CagInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CagInfo
type CagInfo struct {
	AllowedCagList       []CagId                `json:"allowedCagList"`
	CagOnlyIndicator     *bool                  `json:"cagOnlyIndicator,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CancelPosInfo Original definition in TS29518_Namf_Location.yaml#/components/schemas/CancelPosInfo
type CancelPosInfo struct {
	HgmlcCallBackURI Uri `json:"hgmlcCallBackURI"`

	// LdrReference Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrReference
	LdrReference string `json:"ldrReference"`

	// ServingLMFIdentification Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	ServingLMFIdentification *string                `json:"servingLMFIdentification,omitempty"`
	Supi                     Supi                   `json:"supi"`
	SupportedFeatures        *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// CandidateForReplacement Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/CandidateForReplacement
type CandidateForReplacement struct {
	Dnns                 *[]Dnn                 `json:"dnns"`
	Snssai               Snssai                 `json:"snssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
type Cause string

// CeModeBInd CE-mode-B Support Indicator. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/CeModeBInd)
type CeModeBInd struct {
	CeModeBSupportInd    bool                   `json:"ceModeBSupportInd"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CellGlobalId defines model for CellGlobalId.
type CellGlobalId struct {
	CellId               string                 `json:"cellId"`
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ChangeItem defines model for ChangeItem.
type ChangeItem struct {
	From                 *string                `json:"from,omitempty"`
	NewValue             *interface{}           `json:"newValue,omitempty"`
	Op                   ChangeType             `json:"op"`
	OrigValue            *interface{}           `json:"origValue,omitempty"`
	Path                 string                 `json:"path"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ChangeOfSupiPeiAssociationReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ChangeOfSupiPeiAssociationReport
type ChangeOfSupiPeiAssociationReport struct {
	NewPei               Pei                    `json:"newPei"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ChangeType defines model for ChangeType.
type ChangeType string

// ChargingData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ChargingData
type ChargingData struct {
	AfChargId            *ApplicationChargingId `json:"afChargId,omitempty"`
	AfChargingIdentifier *ChargingId            `json:"afChargingIdentifier,omitempty"`

	// AppSvcProvId Indicates the application service provider identity.
	AppSvcProvId *string `json:"appSvcProvId,omitempty"`

	// ChgId Univocally identifies the charging control policy data within a PDU session.
	ChgId string `json:"chgId"`

	// MeteringMethod Possible values are - DURATION: Indicates that the duration of the service data flow traffic shall be metered. - VOLUME: Indicates that volume of the service data flow traffic shall be metered. - DURATION_VOLUME: Indicates that the duration and the volume of the service data flow traffic shall be metered. - EVENT: Indicates that events of the service data flow traffic shall be metered.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/MeteringMethod)
	MeteringMethod *MeteringMethod `json:"meteringMethod,omitempty"`

	// Offline Indicates the offline charging is applicable to the PCC rule when it is included and set to true.
	Offline *bool `json:"offline,omitempty"`

	// Online Indicates the online charging is applicable to the PCC rule when it is included and set to true.
	Online      *bool        `json:"online,omitempty"`
	RatingGroup *RatingGroup `json:"ratingGroup,omitempty"`

	// ReportingLevel Possible values are - SER_ID_LEVEL: Indicates that the usage shall be reported on service id and rating group combination level. - RAT_GR_LEVEL: Indicates that the usage shall be reported on rating group level. - SPON_CON_LEVEL: Indicates that the usage shall be reported on sponsor identity and rating group combination level.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ReportingLevel)
	ReportingLevel *ReportingLevel `json:"reportingLevel,omitempty"`

	// SdfHandl Indicates whether the service data flow is allowed to start while the SMF is waiting for the response to the credit request.
	SdfHandl  *bool      `json:"sdfHandl,omitempty"`
	ServiceId *ServiceId `json:"serviceId,omitempty"`

	// SponsorId Indicates the sponsor identity.
	SponsorId            *string                `json:"sponsorId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ChargingId defines model for ChargingId.
type ChargingId = Uint32

// ChargingInformation Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ChargingInformation
type ChargingInformation struct {
	PrimaryChfAddress      Uri                    `json:"primaryChfAddress"`
	PrimaryChfInstanceId   *NfInstanceId          `json:"primaryChfInstanceId,omitempty"`
	PrimaryChfSetId        *NfSetId               `json:"primaryChfSetId,omitempty"`
	SecondaryChfAddress    Uri                    `json:"secondaryChfAddress"`
	SecondaryChfInstanceId *NfInstanceId          `json:"secondaryChfInstanceId,omitempty"`
	SecondaryChfSetId      *NfSetId               `json:"secondaryChfSetId,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// ChfInfo Information of a CHF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ChfInfo)
type ChfInfo struct {
	GpsiRangeList        []IdentityRange        `json:"gpsiRangeList,omitempty"`
	GroupId              *NfGroupId             `json:"groupId,omitempty"`
	PlmnRangeList        []PlmnRange            `json:"plmnRangeList,omitempty"`
	PrimaryChfInstance   *NfInstanceId          `json:"primaryChfInstance,omitempty"`
	SecondaryChfInstance *NfInstanceId          `json:"secondaryChfInstance,omitempty"`
	SupiRangeList        []SupiRange            `json:"supiRangeList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CipheringAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/CipheringAlgorithm
type CipheringAlgorithm string

// CkPrime Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/CkPrime
type CkPrime = string

// CmInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/CmInfo
type CmInfo struct {
	AccessType AccessType `json:"accessType"`

	// CmState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/CmState
	CmState              CmState                `json:"cmState"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CmInfoReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/CmInfoReport
type CmInfoReport struct {
	NewCmInfoList        []CmInfo               `json:"newCmInfoList"`
	OldCmInfoList        []CmInfo               `json:"oldCmInfoList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CmState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/CmState
type CmState string

// CnAssistedRanPara Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/CnAssistedRanPara
type CnAssistedRanPara struct {
	BatteryIndication          *BatteryIndication          `json:"batteryIndication,omitempty"`
	CommunicationDurationTime  *DurationSec                `json:"communicationDurationTime,omitempty"`
	PeriodicTime               *DurationSec                `json:"periodicTime,omitempty"`
	ScheduledCommunicationTime *ScheduledCommunicationTime `json:"scheduledCommunicationTime,omitempty"`
	ScheduledCommunicationType *ScheduledCommunicationType `json:"scheduledCommunicationType,omitempty"`

	// StationaryIndication Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
	StationaryIndication *StationaryIndication `json:"stationaryIndication,omitempty"`

	// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
	TrafficProfile       *TrafficProfile        `json:"trafficProfile,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CnType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/CnType
type CnType string

// CnTypeChangeReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/CnTypeChangeReport
type CnTypeChangeReport struct {
	// NewCnType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/CnType
	NewCnType CnType `json:"newCnType"`

	// OldCnType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/CnType
	OldCnType            *CnType                `json:"oldCnType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Cnf defines model for Cnf.
type Cnf struct {
	CnfUnits             []CnfUnit              `json:"cnfUnits"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CnfUnit defines model for CnfUnit.
type CnfUnit struct {
	CnfUnit              []Atom                 `json:"cnfUnit"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CodeWord Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CodeWord
type CodeWord = string

// CodeWordInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CodeWordInd
type CodeWordInd string

// CodecData Contains codec related information. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/CodecData)
type CodecData = string

// CollectionPeriodRmmLteMdt defines model for CollectionPeriodRmmLteMdt.
type CollectionPeriodRmmLteMdt string

// CollectionPeriodRmmNrMdt defines model for CollectionPeriodRmmNrMdt.
type CollectionPeriodRmmNrMdt string

// CommunicationCharacteristics Original definition in TS29503_Nudm_PP.yaml#/components/schemas/CommunicationCharacteristics
type CommunicationCharacteristics struct {
	// PpActiveTime Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpActiveTime
	PpActiveTime *PpActiveTime `json:"ppActiveTime"`

	// PpDlPacketCount Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpDlPacketCount
	PpDlPacketCount *PpDlPacketCount `json:"ppDlPacketCount"`

	// PpDlPacketCountExt Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpDlPacketCountExt
	PpDlPacketCountExt *PpDlPacketCountExt `json:"ppDlPacketCountExt"`

	// PpMaximumLatency Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpMaximumLatency
	PpMaximumLatency *PpMaximumLatency `json:"ppMaximumLatency"`

	// PpMaximumResponseTime Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpMaximumResponseTime
	PpMaximumResponseTime *PpMaximumResponseTime `json:"ppMaximumResponseTime"`

	// PpSubsRegTimer Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpSubsRegTimer
	PpSubsRegTimer       *PpSubsRegTimer        `json:"ppSubsRegTimer"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CommunicationFailure Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/CommunicationFailure
type CommunicationFailure struct {
	NasReleaseCode       *string                `json:"nasReleaseCode,omitempty"`
	RanReleaseCode       *NgApCause             `json:"ranReleaseCode,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ComplexQuery defines model for ComplexQuery.
type ComplexQuery struct {
	union json.RawMessage
}

// ConditionData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ConditionData
type ConditionData struct {
	AccessType     AccessType  `json:"accessType,omitempty"`
	ActivationTime *DateTimeRm `json:"activationTime"`

	// CondId Uniquely identifies the condition data within a PDU session.
	CondId               string                 `json:"condId"`
	DeactivationTime     *DateTimeRm            `json:"deactivationTime"`
	RatType              *RatType               `json:"ratType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConditionEventType Indicates whether a notification is due to the NF Instance to start or stop being part of a condition for a subscription to a set of NFs (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ConditionEventType)
type ConditionEventType string

// ConfidentialityKey Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ConfidentialityKey
type ConfidentialityKey = string

// ConfiguredSnssai Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/ConfiguredSnssai
type ConfiguredSnssai struct {
	ConfiguredSnssai     Snssai                 `json:"configuredSnssai"`
	MappedHomeSnssai     *Snssai                `json:"mappedHomeSnssai,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConfirmationData Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/ConfirmationData
type ConfirmationData struct {
	// ResStar Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/ResStar
	ResStar              *ResStar               `json:"resStar"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConfirmationDataResponse Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/ConfirmationDataResponse
type ConfirmationDataResponse struct {
	// AuthResult Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/AuthResult
	AuthResult AuthResult `json:"authResult"`

	// Kseaf Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/Kseaf
	Kseaf                Kseaf                  `json:"kseaf,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ContentVersion Represents the content version of some content. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ContentVersion)
type ContentVersion = int

// ContextDataSetName Original definition in TS29505_Subscription_Data.yaml#/components/schemas/ContextDataSetName
type ContextDataSetName string

// ContextDataSets Original definition in TS29505_Subscription_Data.yaml#/components/schemas/ContextDataSets
type ContextDataSets struct {
	// Amf3Gpp Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/Amf3GppAccessRegistration
	Amf3Gpp *Amf3GppAccessRegistration `json:"amf3Gpp,omitempty"`

	// AmfNon3Gpp Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/AmfNon3GppAccessRegistration
	AmfNon3Gpp      *AmfNon3GppAccessRegistration `json:"amfNon3Gpp,omitempty"`
	EeSubscriptions []EeSubscription              `json:"eeSubscriptions,omitempty"`

	// IpSmGw Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/IpSmGwRegistration
	IpSmGw           *IpSmGwRegistration `json:"ipSmGw,omitempty"`
	SdmSubscriptions []SdmSubscription   `json:"sdmSubscriptions,omitempty"`

	// SmfRegistrations Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SmfRegList
	SmfRegistrations *SmfRegList `json:"smfRegistrations,omitempty"`

	// Smsf3GppAccess Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmsfRegistration
	Smsf3GppAccess *SmsfRegistration `json:"smsf3GppAccess,omitempty"`

	// SmsfNon3GppAccess Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmsfRegistration
	SmsfNon3GppAccess             *SmsfRegistration               `json:"smsfNon3GppAccess,omitempty"`
	SubscriptionDataSubscriptions []SubscriptionDataSubscriptions `json:"subscriptionDataSubscriptions,omitempty"`
	AdditionalProperties          map[string]interface{}          `json:"-"`
}

// ContextDatasetNames Original definition in TS29505_Subscription_Data.yaml#/components/schemas/ContextDatasetNames
type ContextDatasetNames = []ContextDataSetName

// ContextInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ContextInfo
type ContextInfo struct {
	OrigHeaders          []string               `json:"origHeaders,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CoreNetworkType defines model for CoreNetworkType.
type CoreNetworkType string

// CounterSor Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/CounterSor
type CounterSor = string

// CounterUpu Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/CounterUpu
type CounterUpu = string

// CreatedEeSubscription Original definition in TS29503_Nudm_EE.yaml#/components/schemas/CreatedEeSubscription
type CreatedEeSubscription struct {
	// EeSubscription Original definition in TS29503_Nudm_EE.yaml#/components/schemas/EeSubscription
	EeSubscription       EeSubscription         `json:"eeSubscription"`
	EpcStatusInd         *bool                  `json:"epcStatusInd,omitempty"`
	EventReports         []MonitoringReport     `json:"eventReports,omitempty"`
	NumberOfUes          *Uinteger              `json:"numberOfUes,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CreditManagementStatus Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/CreditManagementStatus
type CreditManagementStatus string

// DataChangeNotify Original definition in TS29505_Subscription_Data.yaml#/components/schemas/DataChangeNotify
type DataChangeNotify struct {
	AdditionalSdmSubscriptions []SdmSubscription `json:"additionalSdmSubscriptions,omitempty"`
	NotifyItems                []NotifyItem      `json:"notifyItems,omitempty"`
	OriginalCallbackReference  []Uri             `json:"originalCallbackReference,omitempty"`

	// SdmSubscription Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SdmSubscription
	SdmSubscription               *SdmSubscription                 `json:"sdmSubscription,omitempty"`
	SubscriptionDataSubscriptions *[]SubscriptionDataSubscriptions `json:"subscriptionDataSubscriptions,omitempty"`
	UeId                          VarUeId                          `json:"ueId,omitempty"`
	AdditionalProperties          map[string]interface{}           `json:"-"`
}

// DataFilter Identifies a data filter. (Original definition in TS29519_Application_Data.yaml#/components/schemas/DataFilter)
type DataFilter struct {
	AppIds []ApplicationId `json:"appIds,omitempty"`

	// DataInd Possible values are - PFD - IPTV - BDT - SVC_PARAM
	//  (Original definition in TS29519_Application_Data.yaml#/components/schemas/DataInd)
	DataInd              DataInd                `json:"dataInd"`
	Dnns                 []Dnn                  `json:"dnns,omitempty"`
	InternalGroupIds     []GroupId              `json:"internalGroupIds,omitempty"`
	Snssais              []Snssai               `json:"snssais,omitempty"`
	Supis                []Supi                 `json:"supis,omitempty"`
	UeIpv4s              []Ipv4Addr             `json:"ueIpv4s,omitempty"`
	UeIpv6s              []Ipv6Addr             `json:"ueIpv6s,omitempty"`
	UeMacs               []MacAddr48            `json:"ueMacs,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DataInd Possible values are - PFD - IPTV - BDT - SVC_PARAM
//
//	(Original definition in TS29519_Application_Data.yaml#/components/schemas/DataInd)
type DataInd string

// DataSetId Types of data sets stored in UDR (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/DataSetId)
type DataSetId string

// DataSetName Original definition in TS29505_Subscription_Data.yaml#/components/schemas/DataSetName
type DataSetName string

// DatalinkReportingConfiguration Original definition in TS29503_Nudm_EE.yaml#/components/schemas/DatalinkReportingConfiguration
type DatalinkReportingConfiguration struct {
	DddStatusList        []DlDataDeliveryStatus `json:"dddStatusList,omitempty"`
	DddTrafficDes        []DddTrafficDescriptor `json:"dddTrafficDes,omitempty"`
	Dnn                  *Dnn                   `json:"dnn,omitempty"`
	Slice                *Snssai                `json:"slice,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DatasetNames Original definition in TS29505_Subscription_Data.yaml#/components/schemas/DatasetNames
type DatasetNames = []DataSetName

// DateTime defines model for DateTime.
type DateTime = time.Time

// DateTimeRm defines model for DateTimeRm.
type DateTimeRm = time.Time

// DayOfWeek integer between and including 1 and 7 denoting a weekday. 1 shall indicate Monday, and the subsequent weekdays shall be indicated with the next higher numbers. 7 shall indicate Sunday.
type DayOfWeek = int

// DddTrafficDescriptor defines model for DddTrafficDescriptor.
type DddTrafficDescriptor struct {
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	MacAddr              MacAddr48              `json:"macAddr,omitempty"`
	PortNumber           *Uinteger              `json:"portNumber,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DdnFailureSubInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DdnFailureSubInfo
type DdnFailureSubInfo struct {
	DddTrafficDescriptorList []DddTrafficDescriptor `json:"dddTrafficDescriptorList,omitempty"`
	NotifyCorrelationId      string                 `json:"notifyCorrelationId"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// DdnFailureSubs Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DdnFailureSubs
type DdnFailureSubs struct {
	DdnFailureSubsInd      *bool                  `json:"ddnFailureSubsInd,omitempty"`
	DdnFailureSubsInfoList []DdnFailureSubInfo    `json:"ddnFailureSubsInfoList,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// DefaultNotificationSubscription Data structure for specifying the notifications the NF service subscribes by default along with callback URI (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/DefaultNotificationSubscription)
type DefaultNotificationSubscription struct {
	Binding     *string `json:"binding,omitempty"`
	CallbackUri Uri     `json:"callbackUri"`

	// N1MessageClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageClass
	N1MessageClass *N1MessageClass `json:"n1MessageClass,omitempty"`

	// N2InformationClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationClass
	N2InformationClass *N2InformationClass `json:"n2InformationClass,omitempty"`

	// NotificationType Types of notifications used in Default Notification URIs in the NF Profile of an NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NotificationType)
	NotificationType     NotificationType       `json:"notificationType"`
	Versions             []string               `json:"versions,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DefaultUnrelatedClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DefaultUnrelatedClass
type DefaultUnrelatedClass struct {
	AllowedGeographicArea []interface{} `json:"allowedGeographicArea,omitempty"`

	// CodeWordInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CodeWordInd
	CodeWordInd  *CodeWordInd `json:"codeWordInd,omitempty"`
	CodeWordList []CodeWord   `json:"codeWordList,omitempty"`

	// PrivacyCheckRelatedAction Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PrivacyCheckRelatedAction
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`

	// ValidTimePeriod Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ValidTimePeriod
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeregistrationData Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/DeregistrationData
type DeregistrationData struct {
	AccessType AccessType `json:"accessType,omitempty"`

	// DeregReason Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/DeregistrationReason
	DeregReason          DeregistrationReason   `json:"deregReason"`
	NewSmfInstanceId     *NfInstanceId          `json:"newSmfInstanceId,omitempty"`
	PduSessionId         *PduSessionId          `json:"pduSessionId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeregistrationInfo Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/DeregistrationInfo
type DeregistrationInfo struct {
	Supi                 Supi                   `json:"supi"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeregistrationReason Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/DeregistrationReason
type DeregistrationReason string

// DiameterIdentity defines model for DiameterIdentity.
type DiameterIdentity = string

// DlDataDeliveryStatus Possible values are - BUFFERED: The first downlink data is buffered with extended buffering matching the source of the downlink traffic. - TRANSMITTED: The first downlink data matching the source of the downlink traffic is transmitted after previous buffering or discarding of corresponding packet(s) because the UE of the PDU Session becomes ACTIVE, and buffered data can be delivered to UE. - DISCARDED: The first downlink data matching the source of the downlink traffic is discarded because the Extended Buffering time, as determined by the SMF, expires or the amount of downlink data to be buffered is exceeded.
type DlDataDeliveryStatus string

// Dnai defines model for Dnai.
type Dnai = string

// DnaiChangeType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
type DnaiChangeType string

// DnaiInformation Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DnaiInformation
type DnaiInformation struct {
	Dnai                 Dnai                   `json:"dnai"`
	NoDnaiChangeInd      *bool                  `json:"noDnaiChangeInd,omitempty"`
	NoLocalPsaChangeInd  *bool                  `json:"noLocalPsaChangeInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Dnf defines model for Dnf.
type Dnf struct {
	DnfUnits             []DnfUnit              `json:"dnfUnits"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DnfUnit defines model for DnfUnit.
type DnfUnit struct {
	DnfUnit              []Atom                 `json:"dnfUnit"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Dnn defines model for Dnn.
type Dnn = string

// DnnConfiguration Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DnnConfiguration
type DnnConfiguration struct {
	// N3gppChargingCharacteristics Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/3GppChargingCharacteristics
	N3gppChargingCharacteristics *N3GppChargingCharacteristics `json:"3gppChargingCharacteristics,omitempty"`
	N5gQosProfile                *SubscribedDefaultQos         `json:"5gQosProfile,omitempty"`
	AcsInfo                      *AcsInfo                      `json:"acsInfo,omitempty"`
	AtsssAllowed                 *bool                         `json:"atsssAllowed,omitempty"`

	// DnAaaAddress Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IpAddress
	DnAaaAddress             *IpAddress       `json:"dnAaaAddress,omitempty"`
	DnAaaIpAddressAllocation *bool            `json:"dnAaaIpAddressAllocation,omitempty"`
	IptvAccCtrlInfo          *string          `json:"iptvAccCtrlInfo,omitempty"`
	Ipv4FrameRouteList       []FrameRouteInfo `json:"ipv4FrameRouteList,omitempty"`
	Ipv6FrameRouteList       []FrameRouteInfo `json:"ipv6FrameRouteList,omitempty"`

	// IwkEpsInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IwkEpsInd
	IwkEpsInd *IwkEpsInd `json:"iwkEpsInd,omitempty"`

	// NiddInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/NiddInformation
	NiddInfo *NiddInformation `json:"niddInfo,omitempty"`

	// NiddNefId Identity of the NEF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefId)
	NiddNefId *NefId `json:"niddNefId,omitempty"`

	// PduSessionContinuityInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PduSessionContinuityInd
	PduSessionContinuityInd *PduSessionContinuityInd `json:"pduSessionContinuityInd,omitempty"`

	// PduSessionTypes Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PduSessionTypes
	PduSessionTypes         PduSessionTypes `json:"pduSessionTypes"`
	RedundantSessionAllowed *bool           `json:"redundantSessionAllowed,omitempty"`
	SecondaryAuth           *bool           `json:"secondaryAuth,omitempty"`
	SessionAmbr             *Ambr           `json:"sessionAmbr,omitempty"`

	// SscModes Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SscModes
	SscModes             SscModes               `json:"sscModes"`
	StaticIpAddress      []IpAddress            `json:"staticIpAddress,omitempty"`
	UpSecurity           *UpSecurity            `json:"upSecurity,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DnnIndicator Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DnnIndicator
type DnnIndicator = bool

// DnnInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DnnInfo
type DnnInfo struct {
	// DefaultDnnIndicator Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DnnIndicator
	DefaultDnnIndicator *DnnIndicator `json:"defaultDnnIndicator,omitempty"`

	// Dnn Merged type of
	//   string in TS29571_CommonData.yaml#/components/schemas/Dnn
	//   string in TS29571_CommonData.yaml#/components/schemas/WildcardDnn
	Dnn          string `json:"dnn"`
	DnnBarred    *bool  `json:"dnnBarred,omitempty"`
	InvokeNefInd *bool  `json:"invokeNefInd,omitempty"`

	// IwkEpsInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IwkEpsInd
	IwkEpsInd *IwkEpsInd `json:"iwkEpsInd,omitempty"`

	// LboRoamingAllowed Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LboRoamingAllowed
	LboRoamingAllowed    *LboRoamingAllowed     `json:"lboRoamingAllowed,omitempty"`
	SameSmfInd           *bool                  `json:"sameSmfInd,omitempty"`
	SmfList              []NfInstanceId         `json:"smfList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DnnRouteSelectionDescriptor Contains the route selector parameters (PDU session types, SSC modes and ATSSS information) per DNN (Original definition in TS29519_Policy_Data.yaml#/components/schemas/DnnRouteSelectionDescriptor)
type DnnRouteSelectionDescriptor struct {
	// AtsssInfo Indicates whether MA PDU session establishment is allowed for this DNN. When set to value true MA PDU session establishment is allowed for this DNN.
	AtsssInfo            *bool                  `json:"atsssInfo,omitempty"`
	Dnn                  Dnn                    `json:"dnn"`
	PduSessTypes         []PduSessionType       `json:"pduSessTypes,omitempty"`
	SscModes             []SscMode              `json:"sscModes,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DnnSelectionMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DnnSelectionMode)
type DnnSelectionMode string

// DnnSmfInfoItem Set of parameters supported by SMF for a given DNN (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/DnnSmfInfoItem)
type DnnSmfInfoItem struct {
	Dnn                  Dnn                    `json:"dnn"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DnnUpfInfoItem Set of parameters supported by UPF for a given DNN (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/DnnUpfInfoItem)
type DnnUpfInfoItem struct {
	DnaiList []Dnai `json:"dnaiList,omitempty"`

	// DnaiNwInstanceList Map of network instance per DNAI for the DNN, where the key of the map is the DNAI. When present, the value of each entry of the map shall contain a N6 network instance that is configured for the DNAI indicated by the key.
	DnaiNwInstanceList   *map[string]string     `json:"dnaiNwInstanceList,omitempty"`
	Dnn                  Dnn                    `json:"dnn"`
	Ipv4AddressRanges    []Ipv4AddressRange     `json:"ipv4AddressRanges,omitempty"`
	Ipv6PrefixRanges     []Ipv6PrefixRange      `json:"ipv6PrefixRanges,omitempty"`
	PduSessionTypes      []PduSessionType       `json:"pduSessionTypes,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DomainNameProtocol Possible values are - DNS_QNAME: Identifies the DNS protocol and the question name in DNS query. - TLS_SNI: Identifies the Server Name Indication in TLS ClientHello message. - TLS_SAN: Identifies the Subject Alternative Name in TLS ServerCertificate message. - TSL_SCN: Identifies the Subject Common Name in TLS ServerCertificate message.
//
//	(Original definition in TS29122_PfdManagement.yaml#/components/schemas/DomainNameProtocol)
type DomainNameProtocol string

// DownlinkDataNotificationControl Contains the downlink data notification control information. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/DownlinkDataNotificationControl)
type DownlinkDataNotificationControl struct {
	NotifCtrlInds        []NotificationControlIndication `json:"notifCtrlInds,omitempty"`
	TypesOfNotif         []DlDataDeliveryStatus          `json:"typesOfNotif,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// DownlinkDataNotificationControlRm this data type is defined in the same way as the DownlinkDataNotificationControl data type, but with the OpenAPI nullable property set to true. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/DownlinkDataNotificationControlRm)
type DownlinkDataNotificationControlRm struct {
	NotifCtrlInds        *[]NotificationControlIndication `json:"notifCtrlInds"`
	TypesOfNotif         *[]DlDataDeliveryStatus          `json:"typesOfNotif"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// DrbId Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DrbId
type DrbId = int

// DrxParameter defines model for DrxParameter.
type DrxParameter = Bytes

// DualRegistrationFlag Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/DualRegistrationFlag
type DualRegistrationFlag = bool

// DurationSec defines model for DurationSec.
type DurationSec = int

// DurationSecRm defines model for DurationSecRm.
type DurationSecRm = int

// DurationSecRo Unsigned integer identifying a period of time in units of seconds with "readOnly=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSecRo)
type DurationSecRo = int

// Dynamic5Qi defines model for Dynamic5Qi.
type Dynamic5Qi struct {
	AverWindow            AverWindow             `json:"averWindow,omitempty"`
	CnPacketDelayBudgetDl ExtPacketDelBudget     `json:"cnPacketDelayBudgetDl,omitempty"`
	CnPacketDelayBudgetUl ExtPacketDelBudget     `json:"cnPacketDelayBudgetUl,omitempty"`
	ExtMaxDataBurstVol    ExtMaxDataBurstVol     `json:"extMaxDataBurstVol,omitempty"`
	ExtPacketDelBudget    ExtPacketDelBudget     `json:"extPacketDelBudget,omitempty"`
	MaxDataBurstVol       MaxDataBurstVol        `json:"maxDataBurstVol,omitempty"`
	PacketDelayBudget     PacketDelBudget        `json:"packetDelayBudget"`
	PacketErrRate         PacketErrRate          `json:"packetErrRate"`
	PriorityLevel         N5QiPriorityLevel      `json:"priorityLevel"`
	ResourceType          QosResourceType        `json:"resourceType"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// E164Number Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/E164Number
type E164Number = string

// ENbId defines model for ENbId.
type ENbId = string

// EapPayload contains an EAP packet (Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/EapPayload)
type EapPayload = string

// EapSession Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/EapSession
type EapSession struct {
	Links *map[string]LinksValueSchema `json:"_links,omitempty"`

	// AuthResult Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/AuthResult
	AuthResult AuthResult `json:"authResult,omitempty"`

	// EapPayload contains an EAP packet (Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/EapPayload)
	EapPayload *EapPayload `json:"eapPayload"`

	// KSeaf Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/Kseaf
	KSeaf                Kseaf                  `json:"kSeaf,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EbiArpMapping Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EbiArpMapping
type EbiArpMapping struct {
	Arp Arp `json:"arp"`

	// EpsBearerId Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerId
	EpsBearerId          SmfEpsBearerId         `json:"epsBearerId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EcRestriction Original definition in TS29503_Nudm_PP.yaml#/components/schemas/EcRestriction
type EcRestriction struct {
	AfInstanceId           string                  `json:"afInstanceId"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	PlmnEcInfos            []PlmnEcInfo            `json:"plmnEcInfos,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          UdmPPReferenceId       `json:"referenceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EcRestrictionDataWb Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EcRestrictionDataWb
type EcRestrictionDataWb struct {
	EcModeARestricted    *bool                  `json:"ecModeARestricted,omitempty"`
	EcModeBRestricted    bool                   `json:"ecModeBRestricted"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Ecgi defines model for Ecgi.
type Ecgi struct {
	EutraCellId          EutraCellId            `json:"eutraCellId"`
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdrxParameters Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/EdrxParameters
type EdrxParameters struct {
	EdrxValue            string                 `json:"edrxValue"`
	RatType              RatType                `json:"ratType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EeGroupProfileData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/EeGroupProfileData
type EeGroupProfileData struct {
	// AllowedMtcProvider A map (list of key-value pairs where EventType serves as key) of MTC provider lists. In addition to defined EventTypes, the key value "ALL" may be used to identify a map entry which contains a list of MtcProviders that are allowed monitoring all Event Types.
	AllowedMtcProvider   *map[string][]MtcProvider `json:"allowedMtcProvider,omitempty"`
	RestrictedEventTypes *[]EventType              `json:"restrictedEventTypes,omitempty"`
	SupportedFeatures    *SupportedFeatures        `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// EeProfileData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/EeProfileData
type EeProfileData struct {
	// AllowedMtcProvider A map (list of key-value pairs where EventType serves as key) of MTC provider lists. In addition to defined EventTypes, the key value "ALL" may be used to identify a map entry which contains a list of MtcProviders that are allowed monitoring all Event Types.
	AllowedMtcProvider   *map[string][]MtcProvider `json:"allowedMtcProvider,omitempty"`
	RestrictedEventTypes *[]EventType              `json:"restrictedEventTypes,omitempty"`
	SupportedFeatures    *SupportedFeatures        `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// EeSubscription Original definition in TS29503_Nudm_EE.yaml#/components/schemas/EeSubscription
type EeSubscription struct {
	CallbackReference Uri `json:"callbackReference"`

	// ContextInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ContextInfo
	ContextInfo   *ContextInfo `json:"contextInfo,omitempty"`
	EpcAppliedInd *bool        `json:"epcAppliedInd,omitempty"`

	// MonitoringConfigurations A map (list of key-value pairs where ReferenceId serves as key) of MonitoringConfigurations
	MonitoringConfigurations map[string]MonitoringConfiguration `json:"monitoringConfigurations"`
	NotifyCorrelationId      *string                            `json:"notifyCorrelationId,omitempty"`

	// ReportingOptions Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReportingOptions
	ReportingOptions     *ReportingOptions      `json:"reportingOptions,omitempty"`
	ScefDiamHost         DiameterIdentity       `json:"scefDiamHost,omitempty"`
	ScefDiamRealm        DiameterIdentity       `json:"scefDiamRealm,omitempty"`
	SubscriptionId       *string                `json:"subscriptionId,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EmergencyInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/EmergencyInfo
type EmergencyInfo struct {
	EpdgInd *bool   `json:"epdgInd,omitempty"`
	PgwFqdn *string `json:"pgwFqdn,omitempty"`

	// PgwIpAddress Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IpAddress
	PgwIpAddress         *IpAddress             `json:"pgwIpAddress,omitempty"`
	SmfInstanceId        *NfInstanceId          `json:"smfInstanceId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EnableUeReachabilityReqData Original definition in TS29518_Namf_MT.yaml#/components/schemas/EnableUeReachabilityReqData
type EnableUeReachabilityReqData struct {
	ExtBufSupport *bool  `json:"extBufSupport,omitempty"`
	OldGuami      *Guami `json:"oldGuami,omitempty"`

	// Reachability Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/UeReachability
	Reachability         UeReachability         `json:"reachability"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EnableUeReachabilityRspData Original definition in TS29518_Namf_MT.yaml#/components/schemas/EnableUeReachabilityRspData
type EnableUeReachabilityRspData struct {
	// Reachability Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/UeReachability
	Reachability         UeReachability         `json:"reachability"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EnhancedCoverageRestrictionData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/EnhancedCoverageRestrictionData
type EnhancedCoverageRestrictionData struct {
	PlmnEcInfoList       []PlmnEcInfo           `json:"plmnEcInfoList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsBearerContainer Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerContainer
type EpsBearerContainer = string

// EpsBearerContextStatus Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerContextStatus
type EpsBearerContextStatus = string

// EpsBearerId Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EpsBearerId
type EpsBearerId = int

// EpsBearerInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerInfo
type EpsBearerInfo struct {
	BearerLevelQoS Bytes `json:"bearerLevelQoS"`

	// Ebi Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerId
	Ebi                  SmfEpsBearerId         `json:"ebi"`
	PgwS8uFteid          Bytes                  `json:"pgwS8uFteid"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsInterworkingIndication Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsInterworkingIndication)
type EpsInterworkingIndication string

// EpsInterworkingInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/EpsInterworkingInfo
type EpsInterworkingInfo struct {
	// EpsIwkPgws A map (list of key-value pairs where Dnn serves as key) of EpsIwkPgws
	EpsIwkPgws           *map[string]EpsIwkPgw  `json:"epsIwkPgws,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsIwkPgw Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/EpsIwkPgw
type EpsIwkPgw struct {
	PgwFqdn              string                 `json:"pgwFqdn"`
	SmfInstanceId        NfInstanceId           `json:"smfInstanceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsNasCipheringAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EpsNasCipheringAlgorithm
type EpsNasCipheringAlgorithm string

// EpsNasIntegrityAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EpsNasIntegrityAlgorithm
type EpsNasIntegrityAlgorithm string

// EpsNasSecurityMode Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EpsNasSecurityMode
type EpsNasSecurityMode struct {
	// CipheringAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EpsNasCipheringAlgorithm
	CipheringAlgorithm EpsNasCipheringAlgorithm `json:"cipheringAlgorithm"`

	// IntegrityAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EpsNasIntegrityAlgorithm
	IntegrityAlgorithm   EpsNasIntegrityAlgorithm `json:"integrityAlgorithm"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// EpsPdnCnxContainer Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxContainer
type EpsPdnCnxContainer = string

// EpsPdnCnxInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxInfo
type EpsPdnCnxInfo struct {
	// LinkedBearerId Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerId
	LinkedBearerId       *SmfEpsBearerId        `json:"linkedBearerId,omitempty"`
	PgwNodeName          *Bytes                 `json:"pgwNodeName,omitempty"`
	PgwS8cFteid          Bytes                  `json:"pgwS8cFteid"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsRanNasRelCause Defines the EPS RAN/NAS release cause. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/EpsRanNasRelCause)
type EpsRanNasRelCause = string

// ErrorReport Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ErrorReport
type ErrorReport struct {
	AltQosParamId *string         `json:"altQosParamId,omitempty"`
	Error         *ProblemDetails `json:"error,omitempty"`

	// PolDecFailureReports Used to report failure of the policy decision and/or condition data.
	PolDecFailureReports []PolicyDecisionFailureCode `json:"polDecFailureReports,omitempty"`

	// RuleReports Used to report the PCC rule failure.
	RuleReports []RuleReport `json:"ruleReports,omitempty"`

	// SessRuleReports Used to report the session rule failure.
	SessRuleReports      []SessionRuleReport    `json:"sessRuleReports,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EthFlowDescription Identifies an Ethernet flow (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EthFlowDescription)
type EthFlowDescription struct {
	DestMacAddr    MacAddr48 `json:"destMacAddr,omitempty"`
	DestMacAddrEnd MacAddr48 `json:"destMacAddrEnd,omitempty"`
	EthType        string    `json:"ethType"`

	// FDesc Defines a packet filter of an IP flow. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowDescription)
	FDesc *PolicyAuthorizationFlowDescription `json:"fDesc,omitempty"`

	// FDir Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDirection)
	FDir                 *FlowDirection         `json:"fDir,omitempty"`
	SourceMacAddr        MacAddr48              `json:"sourceMacAddr,omitempty"`
	SrcMacAddrEnd        MacAddr48              `json:"srcMacAddrEnd,omitempty"`
	VlanTags             []string               `json:"vlanTags,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EthernetFlowInfo Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/EthernetFlowInfo
type EthernetFlowInfo struct {
	EthFlows             []EthFlowDescription   `json:"ethFlows,omitempty"`
	FlowNumber           int                    `json:"flowNumber"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EutraCellId defines model for EutraCellId.
type EutraCellId = string

// EutraLocation defines model for EutraLocation.
type EutraLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	Ecgi                     Ecgi                   `json:"ecgi"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	GlobalENbId              *GlobalRanNodeId       `json:"globalENbId,omitempty"`
	GlobalNgenbId            *GlobalRanNodeId       `json:"globalNgenbId,omitempty"`
	IgnoreEcgi               *bool                  `json:"ignoreEcgi,omitempty"`
	IgnoreTai                *bool                  `json:"ignoreTai,omitempty"`
	Tai                      Tai                    `json:"tai"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// EventForMdt defines model for EventForMdt.
type EventForMdt string

// EventNotification Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/EventNotification
type EventNotification struct {
	AccType      AccessType     `json:"accType,omitempty"`
	AdIpv4Addr   Ipv4Addr       `json:"adIpv4Addr,omitempty"`
	AdIpv6Prefix *Ipv6Prefix    `json:"adIpv6Prefix,omitempty"`
	AppId        *ApplicationId `json:"appId,omitempty"`

	// CommFailure Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/CommunicationFailure
	CommFailure *CommunicationFailure `json:"commFailure,omitempty"`

	// DddStatus Possible values are - BUFFERED: The first downlink data is buffered with extended buffering matching the source of the downlink traffic. - TRANSMITTED: The first downlink data matching the source of the downlink traffic is transmitted after previous buffering or discarding of corresponding packet(s) because the UE of the PDU Session becomes ACTIVE, and buffered data can be delivered to UE. - DISCARDED: The first downlink data matching the source of the downlink traffic is discarded because the Extended Buffering time, as determined by the SMF, expires or the amount of downlink data to be buffered is exceeded.
	DddStatus        *DlDataDeliveryStatus `json:"dddStatus,omitempty"`
	DddTraDescriptor *DddTrafficDescriptor `json:"dddTraDescriptor,omitempty"`
	DlDelays         []Uinteger            `json:"dlDelays,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType *DnaiChangeType      `json:"dnaiChgType,omitempty"`
	Dnn         *Dnn                 `json:"dnn,omitempty"`
	EthfDescs   []EthFlowDescription `json:"ethfDescs,omitempty"`

	// Event Possible values are - AC_TY_CH: Access Type Change - UP_PATH_CH: UP Path Change - PDU_SES_REL: PDU Session Release - PLMN_CH: PLMN Change - UE_IP_CH: UE IP address change - DDDS: Downlink data delivery status - COMM_FAIL: Communication Failure - PDU_SES_EST: PDU Session Establishment - QFI_ALLOC: QFI allocation - QOS_MON: QoS Monitoring
	//  (Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/SmfEvent)
	Event                SmfEvent                             `json:"event"`
	FDescs               []PolicyAuthorizationFlowDescription `json:"fDescs,omitempty"`
	Gpsi                 Gpsi                                 `json:"gpsi,omitempty"`
	Ipv4Addr             Ipv4Addr                             `json:"ipv4Addr,omitempty"`
	Ipv6Addrs            []Ipv6Addr                           `json:"ipv6Addrs,omitempty"`
	Ipv6Prefixes         []Ipv6Prefix                         `json:"ipv6Prefixes,omitempty"`
	MaxWaitTime          *DateTime                            `json:"maxWaitTime,omitempty"`
	PduSeId              *PduSessionId                        `json:"pduSeId,omitempty"`
	PduSessType          *PduSessionType                      `json:"pduSessType,omitempty"`
	PlmnId               *PlmnId                              `json:"plmnId,omitempty"`
	Qfi                  *Qfi                                 `json:"qfi,omitempty"`
	ReIpv4Addr           Ipv4Addr                             `json:"reIpv4Addr,omitempty"`
	ReIpv6Prefix         *Ipv6Prefix                          `json:"reIpv6Prefix,omitempty"`
	RtDelays             []Uinteger                           `json:"rtDelays,omitempty"`
	Snssai               *Snssai                              `json:"snssai,omitempty"`
	SourceDnai           *Dnai                                `json:"sourceDnai,omitempty"`
	SourceTraRouting     *RouteToLocation                     `json:"sourceTraRouting"`
	SourceUeIpv4Addr     Ipv4Addr                             `json:"sourceUeIpv4Addr,omitempty"`
	SourceUeIpv6Prefix   *Ipv6Prefix                          `json:"sourceUeIpv6Prefix,omitempty"`
	Supi                 Supi                                 `json:"supi,omitempty"`
	TargetDnai           *Dnai                                `json:"targetDnai,omitempty"`
	TargetTraRouting     *RouteToLocation                     `json:"targetTraRouting"`
	TargetUeIpv4Addr     Ipv4Addr                             `json:"targetUeIpv4Addr,omitempty"`
	TargetUeIpv6Prefix   *Ipv6Prefix                          `json:"targetUeIpv6Prefix,omitempty"`
	TimeStamp            DateTime                             `json:"timeStamp"`
	UeMac                MacAddr48                            `json:"ueMac,omitempty"`
	UlDelays             []Uinteger                           `json:"ulDelays,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// EventReportMode Original definition in TS29503_Nudm_EE.yaml#/components/schemas/EventReportMode
type EventReportMode string

// EventSubscription Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/EventSubscription
type EventSubscription struct {
	AppIds            []ApplicationId        `json:"appIds,omitempty"`
	DddStati          []DlDataDeliveryStatus `json:"dddStati,omitempty"`
	DddTraDescriptors []DddTrafficDescriptor `json:"dddTraDescriptors,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType *DnaiChangeType `json:"dnaiChgType,omitempty"`

	// Event Possible values are - AC_TY_CH: Access Type Change - UP_PATH_CH: UP Path Change - PDU_SES_REL: PDU Session Release - PLMN_CH: PLMN Change - UE_IP_CH: UE IP address change - DDDS: Downlink data delivery status - COMM_FAIL: Communication Failure - PDU_SES_EST: PDU Session Establishment - QFI_ALLOC: QFI allocation - QOS_MON: QoS Monitoring
	//  (Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/SmfEvent)
	Event                SmfEvent               `json:"event"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EventType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/EventType
type EventType string

// EventsNotification describes the notification of a matched event (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EventsNotification)
type EventsNotification struct {
	AccessType AccessType `json:"accessType,omitempty"`

	// AddAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	AddAccessInfo *AdditionalAccessInfo `json:"addAccessInfo,omitempty"`

	// AnChargAddr Describes the network entity within the access network performing charging (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AccNetChargingAddress)
	AnChargAddr *AccNetChargingAddress        `json:"anChargAddr,omitempty"`
	AnChargIds  []AccessNetChargingIdentifier `json:"anChargIds,omitempty"`

	// AnGwAddr describes the address of the access network gateway control node (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AnGwAddress)
	AnGwAddr                  *AnGwAddress              `json:"anGwAddr,omitempty"`
	EvNotifs                  []AfEventNotification     `json:"evNotifs"`
	EvSubsUri                 Uri                       `json:"evSubsUri"`
	FailedResourcAllocReports []ResourcesAllocationInfo `json:"failedResourcAllocReports,omitempty"`

	// NoNetLocSupp Possible values are - ANR_NOT_SUPPORTED: Indicates that the access network does not support the report of access network information. - TZR_NOT_SUPPORTED: Indicates that the access network does not support the report of UE time zone. - LOC_NOT_SUPPORTED: Indicates that the access network does not support the report of UE Location (or PLMN Id).
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/NetLocAccessSupport)
	NoNetLocSupp     *NetLocAccessSupport                            `json:"noNetLocSupp,omitempty"`
	OutOfCredReports []OutOfCreditInformation                        `json:"outOfCredReports,omitempty"`
	PlmnId           *PlmnIdNid                                      `json:"plmnId,omitempty"`
	QncReports       []PolicyAuthorizationQosNotificationControlInfo `json:"qncReports,omitempty"`
	QosMonReports    []PolicyAuthorizationQosMonitoringReport        `json:"qosMonReports,omitempty"`

	// RanNasRelCauses Contains the RAN and/or NAS release cause.
	RanNasRelCauses []RanNasRelCause `json:"ranNasRelCauses,omitempty"`
	RatType         *RatType         `json:"ratType,omitempty"`

	// RelAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	RelAccessInfo           *AdditionalAccessInfo     `json:"relAccessInfo,omitempty"`
	SuccResourcAllocReports []ResourcesAllocationInfo `json:"succResourcAllocReports,omitempty"`

	// TsnBridgeManCont Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt  *PortManagementContainer  `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`
	UeLoc               *UserLocation             `json:"ueLoc,omitempty"`
	UeLocTime           *DateTime                 `json:"ueLocTime,omitempty"`
	UeTimeZone          *TimeZone                 `json:"ueTimeZone,omitempty"`

	// UsgRep Original definition in TS29122_CommonData.yaml#/components/schemas/AccumulatedUsage
	UsgRep               *AccumulatedUsage      `json:"usgRep,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EventsSubscPutData Identifies the events the application subscribes to within an Events Subscription sub-resource data. It may contain the notification of the already met events (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EventsSubscPutData)
type EventsSubscPutData struct {
	union json.RawMessage
}

// EventsSubscReqData Identifies the events the application subscribes to. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EventsSubscReqData)
type EventsSubscReqData struct {
	Events       []AfEventSubscription `json:"events"`
	NotifCorreId *string               `json:"notifCorreId,omitempty"`
	NotifUri     *Uri                  `json:"notifUri,omitempty"`

	// QosMon Indicates the QoS Monitoring information to report, i.e. UL and/or DL and or round trip delay. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosMonitoringInformation)
	QosMon          *QosMonitoringInformation         `json:"qosMon,omitempty"`
	ReqAnis         []RequiredAccessInfo              `json:"reqAnis,omitempty"`
	ReqQosMonParams []RequestedQosMonitoringParameter `json:"reqQosMonParams,omitempty"`

	// UsgThres Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThreshold
	UsgThres             *UsageThreshold        `json:"usgThres,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EventsSubscReqDataRm this data type is defined in the same way as the EventsSubscReqData data type, but with the OpenAPI nullable property set to true. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EventsSubscReqDataRm)
type EventsSubscReqDataRm struct {
	Events       []AfEventSubscription `json:"events"`
	NotifCorreId *string               `json:"notifCorreId,omitempty"`
	NotifUri     *Uri                  `json:"notifUri,omitempty"`

	// QosMon this data type is defined in the same way as the QosMonitoringInformation data type, but with the OpenAPI nullable property set to true. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosMonitoringInformationRm)
	QosMon          *QosMonitoringInformationRm       `json:"qosMon"`
	ReqAnis         []RequiredAccessInfo              `json:"reqAnis,omitempty"`
	ReqQosMonParams []RequestedQosMonitoringParameter `json:"reqQosMonParams,omitempty"`

	// UsgThres Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThresholdRm
	UsgThres             *UsageThresholdRm      `json:"usgThres"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExemptionInd Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExemptionInd
type ExemptionInd struct {
	DnnCongestion        *bool                  `json:"dnnCongestion,omitempty"`
	SnssaiDnnCongestion  *bool                  `json:"snssaiDnnCongestion,omitempty"`
	SnssaiOnlyCongestion *bool                  `json:"snssaiOnlyCongestion,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExpectedUeBehavior Original definition in TS29518_Namf_Communication.yaml#/components/schemas/ExpectedUeBehavior
type ExpectedUeBehavior struct {
	ExpMoveTrajectory    []UserLocation         `json:"expMoveTrajectory"`
	ValidityTime         DateTime               `json:"validityTime"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExpectedUeBehaviour Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ExpectedUeBehaviour
type ExpectedUeBehaviour struct {
	AfInstanceId              string               `json:"afInstanceId"`
	BatteryIndication         *BatteryIndicationRm `json:"batteryIndication,omitempty"`
	CommunicationDurationTime *DurationSecRm       `json:"communicationDurationTime"`

	// ExpectedUmts Identifies the UE's expected geographical movement. The attribute is only applicable in 5G.
	ExpectedUmts           *[]UdmLocationArea      `json:"expectedUmts"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	PeriodicTime           *DurationSecRm          `json:"periodicTime"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId                UdmPPReferenceId              `json:"referenceId"`
	ScheduledCommunicationTime *ScheduledCommunicationTimeRm `json:"scheduledCommunicationTime,omitempty"`
	ScheduledCommunicationType *ScheduledCommunicationTypeRm `json:"scheduledCommunicationType,omitempty"`

	// StationaryIndication Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
	StationaryIndication *StationaryIndicationRm `json:"stationaryIndication,omitempty"`

	// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
	TrafficProfile       *TrafficProfileRm      `json:"trafficProfile,omitempty"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExpectedUeBehaviourData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ExpectedUeBehaviourData
type ExpectedUeBehaviourData struct {
	BatteryIndication         *BatteryIndication `json:"batteryIndication,omitempty"`
	CommunicationDurationTime *DurationSec       `json:"communicationDurationTime,omitempty"`

	// ExpectedUmts Identifies the UE's expected geographical movement. The attribute is only applicable in 5G.
	ExpectedUmts               []UdmLocationArea           `json:"expectedUmts,omitempty"`
	PeriodicTime               *DurationSec                `json:"periodicTime,omitempty"`
	ScheduledCommunicationTime *ScheduledCommunicationTime `json:"scheduledCommunicationTime,omitempty"`
	ScheduledCommunicationType *ScheduledCommunicationType `json:"scheduledCommunicationType,omitempty"`

	// StationaryIndication Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
	StationaryIndication *StationaryIndication `json:"stationaryIndication,omitempty"`

	// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
	TrafficProfile       *TrafficProfile        `json:"trafficProfile,omitempty"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExposureDataChangeNotification Original definition in TS29519_Exposure_Data.yaml#/components/schemas/ExposureDataChangeNotification
type ExposureDataChangeNotification struct {
	// AccessAndMobilityData Original definition in TS29519_Exposure_Data.yaml#/components/schemas/AccessAndMobilityData
	AccessAndMobilityData    *AccessAndMobilityData     `json:"accessAndMobilityData,omitempty"`
	DelResources             []Uri                      `json:"delResources,omitempty"`
	PduSessionManagementData []PduSessionManagementData `json:"pduSessionManagementData,omitempty"`
	UeId                     VarUeId                    `json:"ueId,omitempty"`
	AdditionalProperties     map[string]interface{}     `json:"-"`
}

// ExposureDataSubscription Original definition in TS29519_Exposure_Data.yaml#/components/schemas/ExposureDataSubscription
type ExposureDataSubscription struct {
	Expiry                *DateTime              `json:"expiry,omitempty"`
	MonitoredResourceUris []Uri                  `json:"monitoredResourceUris"`
	NotificationUri       Uri                    `json:"notificationUri"`
	SupportedFeatures     *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// ExtAmfEventSubscription defines model for ExtAmfEventSubscription.
type ExtAmfEventSubscription struct {
	AnyUE *bool `json:"anyUE,omitempty"`

	// AoiStateList Map of subscribed Area of Interest (AoI) Event State in the old AMF. The JSON pointer to an AmfEventArea element in the areaList IE of the AmfEvent data type shall be the key of the map.
	AoiStateList        *map[string]AreaOfInterestEventState `json:"aoiStateList,omitempty"`
	BindingInfo         []string                             `json:"bindingInfo,omitempty"`
	EventList           []AmfEvent                           `json:"eventList"`
	EventNotifyUri      Uri                                  `json:"eventNotifyUri"`
	EventSyncInd        *bool                                `json:"eventSyncInd,omitempty"`
	Gpsi                Gpsi                                 `json:"gpsi,omitempty"`
	GroupId             GroupId                              `json:"groupId,omitempty"`
	NfId                NfInstanceId                         `json:"nfId"`
	NotifyCorrelationId string                               `json:"notifyCorrelationId"`

	// Options Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/AmfEventMode
	Options *AmfEventMode `json:"options,omitempty"`
	Pei     Pei           `json:"pei,omitempty"`

	// SourceNfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	SourceNfType                  *NFType `json:"sourceNfType,omitempty"`
	SubsChangeNotifyCorrelationId *string `json:"subsChangeNotifyCorrelationId,omitempty"`
	SubsChangeNotifyUri           *Uri    `json:"subsChangeNotifyUri,omitempty"`

	// SubscribingNfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	SubscribingNfType    *NFType                `json:"subscribingNfType,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExtGroupId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ExtGroupId
type ExtGroupId = string

// ExtMaxDataBurstVol defines model for ExtMaxDataBurstVol.
type ExtMaxDataBurstVol = int

// ExtMaxDataBurstVolRm defines model for ExtMaxDataBurstVolRm.
type ExtMaxDataBurstVolRm = int

// ExtPacketDelBudget defines model for ExtPacketDelBudget.
type ExtPacketDelBudget = int

// ExtProblemDetails defines model for ExtProblemDetails.
type ExtProblemDetails struct {
	// AccessTokenError Error returned in the access token response message (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError *AccessTokenErr `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   *AccessTokenReq        `json:"accessTokenRequest,omitempty"`
	Cause                *string                `json:"cause,omitempty"`
	Detail               *string                `json:"detail,omitempty"`
	Instance             *Uri                   `json:"instance,omitempty"`
	InvalidParams        []InvalidParam         `json:"invalidParams,omitempty"`
	NrfId                *string                `json:"nrfId,omitempty"`
	RemoteError          *bool                  `json:"remoteError,omitempty"`
	Status               int                    `json:"status,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *Uri                   `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExtSnssai defines model for ExtSnssai.
type ExtSnssai struct {
	Sd string `json:"sd,omitempty"`

	// SdRanges When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	SdRanges []SdRange `json:"sdRanges,omitempty"`
	Sst      int       `json:"sst"`

	// WildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	WildcardSd           *ExtSnssaiWildcardSd   `json:"wildcardSd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExtSnssaiWildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
type ExtSnssaiWildcardSd bool

// ExtendedProblemDetails defines model for ExtendedProblemDetails.
type ExtendedProblemDetails struct {
	// AcceptableServInfo Indicates the maximum bandwidth that shall be authorized by the PCF. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AcceptableServiceInfo)
	AcceptableServInfo *AcceptableServiceInfo `json:"acceptableServInfo,omitempty"`

	// AccessTokenError Error returned in the access token response message (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError *AccessTokenErr `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   *AccessTokenReq        `json:"accessTokenRequest,omitempty"`
	Cause                *string                `json:"cause,omitempty"`
	Detail               *string                `json:"detail,omitempty"`
	Instance             *Uri                   `json:"instance,omitempty"`
	InvalidParams        []InvalidParam         `json:"invalidParams,omitempty"`
	NrfId                *string                `json:"nrfId,omitempty"`
	Status               int                    `json:"status,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *Uri                   `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExternalGroupId defines model for ExternalGroupId.
type ExternalGroupId = string

// ExternalUnrelatedClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ExternalUnrelatedClass
type ExternalUnrelatedClass struct {
	AfExternals             []AfExternal             `json:"afExternals,omitempty"`
	LcsClientExternals      []LcsClientExternal      `json:"lcsClientExternals,omitempty"`
	LcsClientGroupExternals []LcsClientGroupExternal `json:"lcsClientGroupExternals,omitempty"`
	AdditionalProperties    map[string]interface{}   `json:"-"`
}

// FailureCause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FailureCause
type FailureCause string

// FailureCode Possible values are - MALFUNCTION: This value indicates that something functions wrongly in PFD provisioning or the PFD provisioning does not function at all. - RESOURCE_LIMITATION: This value indicates there is resource limitation for PFD storage. - SHORT_DELAY: This value indicates that the allowed delay is too short and PFD(s) are not stored. - APP_ID_DUPLICATED: The received external application identifier(s) are already provisioned. - PARTIAL_FAILURE: The PFD(s) are not provisioned to all PCEFs/TDFs/SMFs. - OTHER_REASON: Other reason unspecified.
//
//	(Original definition in TS29122_PfdManagement.yaml#/components/schemas/FailureCode)
type FailureCode string

// Float defines model for Float.
type Float = float32

// FloatRm defines model for FloatRm.
type FloatRm = float32

// FlowDirection Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDirection)
type FlowDirection string

// FlowDirectionRm Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDirection)
type FlowDirectionRm string

// FlowInfo Original definition in TS29122_CommonData.yaml#/components/schemas/FlowInfo
type FlowInfo struct {
	// FlowDescriptions Indicates the packet filters of the IP flow. Refer to subclause 5.3.8 of 3GPP TS 29.214 for encoding. It shall contain UL and/or DL IP flow description.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`

	// FlowId Indicates the IP flow.
	FlowId               int                    `json:"flowId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// FlowInformation Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowInformation
type FlowInformation struct {
	// EthFlowDescription Identifies an Ethernet flow (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/EthFlowDescription)
	EthFlowDescription *EthFlowDescription `json:"ethFlowDescription,omitempty"`

	// FlowDescription Defines a packet filter for an IP flow. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDescription)
	FlowDescription *SMPolicyFlowDescription `json:"flowDescription,omitempty"`

	// FlowDirection Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDirection)
	FlowDirection *FlowDirectionRm `json:"flowDirection,omitempty"`

	// FlowLabel the Ipv6 flow label header field.
	FlowLabel *string `json:"flowLabel"`

	// PackFiltId An identifier of packet filter.
	PackFiltId *string `json:"packFiltId,omitempty"`

	// PacketFilterUsage The packet shall be sent to the UE.
	PacketFilterUsage *bool `json:"packetFilterUsage,omitempty"`

	// Spi the security parameter index of the IPSec packet.
	Spi *string `json:"spi"`

	// TosTrafficClass Contains the Ipv4 Type-of-Service and mask field or the Ipv6 Traffic-Class field and mask field.
	TosTrafficClass      *string                `json:"tosTrafficClass"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// FlowStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowStatus
type FlowStatus string

// FlowUsage Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowUsage
type FlowUsage string

// Flows Identifies the flows (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/Flows)
type Flows struct {
	ContVers             []ContentVersion       `json:"contVers,omitempty"`
	FNums                []int                  `json:"fNums,omitempty"`
	MedCompN             int                    `json:"medCompN"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ForwardingBearerContainer Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ForwardingBearerContainer
type ForwardingBearerContainer = string

// Fqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
type Fqdn = string

// FrameRouteInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/FrameRouteInfo
type FrameRouteInfo struct {
	Ipv4Mask             Ipv4AddrMask           `json:"ipv4Mask,omitempty"`
	Ipv6Prefix           *Ipv6Prefix            `json:"ipv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GNbId defines model for GNbId.
type GNbId struct {
	BitLength            int                    `json:"bitLength"`
	GNBValue             string                 `json:"gNBValue"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GbrQosFlowInformation Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/GbrQosFlowInformation
type GbrQosFlowInformation struct {
	AlternativeQosProfileList *[]AlternativeQosProfile `json:"alternativeQosProfileList,omitempty"`
	GuaFbrDl                  BitRate                  `json:"guaFbrDl"`
	GuaFbrUl                  BitRate                  `json:"guaFbrUl"`
	MaxFbrDl                  BitRate                  `json:"maxFbrDl"`
	MaxFbrUl                  BitRate                  `json:"maxFbrUl"`
	MaxPacketLossRateDl       *PacketLossRate          `json:"maxPacketLossRateDl,omitempty"`
	MaxPacketLossRateUl       *PacketLossRate          `json:"maxPacketLossRateUl,omitempty"`
	NotifControl              *NotificationControl     `json:"notifControl,omitempty"`
	AdditionalProperties      map[string]interface{}   `json:"-"`
}

// Gci defines model for Gci.
type Gci = string

// GeraLocation defines model for GeraLocation.
type GeraLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	Cgi                      *CellGlobalId          `json:"cgi,omitempty"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	Lai                      *LocationAreaId        `json:"lai,omitempty"`
	LocationNumber           *string                `json:"locationNumber,omitempty"`
	MscNumber                *string                `json:"mscNumber,omitempty"`
	Rai                      *RoutingAreaId         `json:"rai,omitempty"`
	Sai                      *ServiceAreaId         `json:"sai,omitempty"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	VlrNumber                *string                `json:"vlrNumber,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// Gli defines model for Gli.
type Gli = Bytes

// GlobalRanNodeId defines model for GlobalRanNodeId.
type GlobalRanNodeId struct {
	ENbId                ENbId                  `json:"eNbId,omitempty"`
	GNbId                *GNbId                 `json:"gNbId,omitempty"`
	N3IwfId              N3IwfId                `json:"n3IwfId,omitempty"`
	NgeNbId              NgeNbId                `json:"ngeNbId,omitempty"`
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	TngfId               TngfId                 `json:"tngfId,omitempty"`
	WagfId               WAgfId                 `json:"wagfId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GmlcInfo Information of a GMLC NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/GmlcInfo)
type GmlcInfo struct {
	GmlcNumbers          []string               `json:"gmlcNumbers,omitempty"`
	ServingClientTypes   []string               `json:"servingClientTypes,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Gpsi defines model for Gpsi.
type Gpsi = string

// GroupId defines model for GroupId.
type GroupId = string

// GroupIdentifiers Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/GroupIdentifiers
type GroupIdentifiers struct {
	// ExtGroupId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ExtGroupId
	ExtGroupId           ExtGroupId             `json:"extGroupId,omitempty"`
	IntGroupId           GroupId                `json:"intGroupId,omitempty"`
	UeIdList             []UeId                 `json:"ueIdList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Guami defines model for Guami.
type Guami = f5gcModels.Guami

// GuamiListCond Subscription to a set of AMFs, based on their GUAMIs (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/GuamiListCond)
type GuamiListCond struct {
	GuamiList            []Guami                `json:"guamiList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HfcNId defines model for HfcNId.
type HfcNId = string

// HfcNodeId defines model for HfcNodeId.
type HfcNodeId struct {
	HfcNId               HfcNId                 `json:"hfcNId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HoState)
type HoState string

// HsmfUpdateData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HsmfUpdateData
type HsmfUpdateData struct {
	N5gMmCauseValue  *N5GMmCause            `json:"5gMmCauseValue,omitempty"`
	NotifyList       []PduSessionNotifyItem `json:"NotifyList,omitempty"`
	AddUeLocation    *UserLocation          `json:"addUeLocation,omitempty"`
	AdditionalAnType AccessType             `json:"additionalAnType,omitempty"`

	// AdditionalCnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	AdditionalCnTunnelInfo *TunnelInfo   `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnRequested      *bool         `json:"alwaysOnRequested,omitempty"`
	AmfNfId                *NfInstanceId `json:"amfNfId,omitempty"`
	AnType                 AccessType    `json:"anType,omitempty"`
	AnTypeCanBeChanged     *bool         `json:"anTypeCanBeChanged,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause                *Cause            `json:"cause,omitempty"`
	DlServingPlmnRateCtl *int              `json:"dlServingPlmnRateCtl"`
	DnaiList             []Dnai            `json:"dnaiList,omitempty"`
	EpsBearerId          *[]SmfEpsBearerId `json:"epsBearerId,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsInterworkingIndication)
	EpsInterworkingInd      *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	Guami                   *Guami                     `json:"guami,omitempty"`
	HoPreparationIndication *bool                      `json:"hoPreparationIndication,omitempty"`
	ISmfServiceInstanceId   *string                    `json:"iSmfServiceInstanceId,omitempty"`

	// IcnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	IcnTunnelInfo     *TunnelInfo   `json:"icnTunnelInfo,omitempty"`
	IsmfId            *NfInstanceId `json:"ismfId,omitempty"`
	IsmfPduSessionUri *Uri          `json:"ismfPduSessionUri,omitempty"`
	MaNwUpgradeInd    *bool         `json:"maNwUpgradeInd,omitempty"`

	// MaReleaseInd Possible values are
	//   - REL_MAPDU_OVER_3GPP
	//   - REL_MAPDU_OVER_N3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaReleaseIndication)
	MaReleaseInd *MaReleaseIndication `json:"maReleaseInd,omitempty"`
	MaRequestInd *bool                `json:"maRequestInd,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`
	MoExpDataCounter                *MoExpDataCounter              `json:"moExpDataCounter,omitempty"`
	N1SmInfoFromUe                  *RefToBinaryData               `json:"n1SmInfoFromUe,omitempty"`

	// N4Info Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4Info *N4Information `json:"n4Info,omitempty"`

	// N4InfoExt1 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`

	// N4InfoExt2 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt2     *N4Information   `json:"n4InfoExt2,omitempty"`
	NgApCause      *NgApCause       `json:"ngApCause,omitempty"`
	PauseCharging  *bool            `json:"pauseCharging,omitempty"`
	Pei            Pei              `json:"pei,omitempty"`
	PresenceInLadn *PresenceState   `json:"presenceInLadn,omitempty"`
	PsaInfo        []PsaInformation `json:"psaInfo,omitempty"`

	// Pti Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProcedureTransactionId
	Pti                   *ProcedureTransactionId `json:"pti,omitempty"`
	QosFlowsNotifyList    []QosFlowNotifyItem     `json:"qosFlowsNotifyList,omitempty"`
	QosFlowsRelNotifyList []QosFlowItem           `json:"qosFlowsRelNotifyList,omitempty"`
	RatType               *RatType                `json:"ratType,omitempty"`

	// RequestIndication Possible values are - UE_REQ_PDU_SES_MOD - UE_REQ_PDU_SES_REL - PDU_SES_MOB - NW_REQ_PDU_SES_AUTH - NW_REQ_PDU_SES_MOD - NW_REQ_PDU_SES_REL - EBI_ASSIGNMENT_REQ - REL_DUE_TO_5G_AN_REQUEST
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RequestIndication)
	RequestIndication RequestIndication `json:"requestIndication"`
	RevokeEbiList     []SmfEpsBearerId  `json:"revokeEbiList,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile  interface{}               `json:"roamingChargingProfile,omitempty"`
	SecondaryRatUsageInfo   []SecondaryRatUsageInfo   `json:"secondaryRatUsageInfo,omitempty"`
	SecondaryRatUsageReport []SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`

	// SecurityResult Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SecurityResult
	SecurityResult    *SecurityResult    `json:"securityResult,omitempty"`
	ServingNetwork    *PlmnIdNid         `json:"servingNetwork,omitempty"`
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`
	UeLocation        *UserLocation      `json:"ueLocation,omitempty"`
	UeTimeZone        *TimeZone          `json:"ueTimeZone,omitempty"`

	// UlclBpInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UlclBpInformation
	UlclBpInfo *UlclBpInformation `json:"ulclBpInfo,omitempty"`

	// UnavailableAccessInd Possible values are
	//   - 3GA_UNAVAILABLE
	//   - N3GA_UNAVAILABLE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UnavailableAccessIndication)
	UnavailableAccessInd *UnavailableAccessIndication `json:"unavailableAccessInd,omitempty"`
	UnknownN1SmInfo      *RefToBinaryData             `json:"unknownN1SmInfo,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`

	// UpSecurityInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpSecurityInfo
	UpSecurityInfo        *UpSecurityInfo `json:"upSecurityInfo,omitempty"`
	VSmfServiceInstanceId *string         `json:"vSmfServiceInstanceId,omitempty"`

	// VcnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	VcnTunnelInfo *TunnelInfo `json:"vcnTunnelInfo,omitempty"`

	// VplmnQos Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VplmnQos
	VplmnQos             *VplmnQos              `json:"vplmnQos,omitempty"`
	VsmfId               *NfInstanceId          `json:"vsmfId,omitempty"`
	VsmfPduSessionUri    *Uri                   `json:"vsmfPduSessionUri,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HsmfUpdateError Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HsmfUpdateError
type HsmfUpdateError struct {
	BackOffTimer *DurationSec     `json:"backOffTimer,omitempty"`
	Error        ProblemDetails   `json:"error"`
	N1SmInfoToUe *RefToBinaryData `json:"n1SmInfoToUe,omitempty"`
	N1smCause    string           `json:"n1smCause,omitempty"`

	// Pti Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProcedureTransactionId
	Pti                  *ProcedureTransactionId `json:"pti,omitempty"`
	RecoveryTime         *DateTime               `json:"recoveryTime,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// HsmfUpdatedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HsmfUpdatedData
type HsmfUpdatedData struct {
	DnaiList      []Dnai          `json:"dnaiList,omitempty"`
	EpsBearerInfo []EpsBearerInfo `json:"epsBearerInfo,omitempty"`

	// EpsPdnCnxInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxInfo
	EpsPdnCnxInfo      *EpsPdnCnxInfo `json:"epsPdnCnxInfo,omitempty"`
	Ipv6MultiHomingInd *bool          `json:"ipv6MultiHomingInd,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`
	N1SmInfoToUe                    *RefToBinaryData               `json:"n1SmInfoToUe,omitempty"`

	// N4Info Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4Info *N4Information `json:"n4Info,omitempty"`

	// N4InfoExt1 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`

	// N4InfoExt2 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt2 *N4Information `json:"n4InfoExt2,omitempty"`

	// Pti Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProcedureTransactionId
	Pti               *ProcedureTransactionId `json:"pti,omitempty"`
	QosFlowsSetupList []QosFlowSetupItem      `json:"qosFlowsSetupList,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile interface{}            `json:"roamingChargingProfile,omitempty"`
	SessionAmbr            *Ambr                  `json:"sessionAmbr,omitempty"`
	SupportedFeatures      *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	UpSecurity             *UpSecurity            `json:"upSecurity,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// HssAuthType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAuthType
type HssAuthType string

// HssAuthTypeInUri Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAuthTypeInUri
type HssAuthTypeInUri string

// HssAuthenticationInfoRequest Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAuthenticationInfoRequest
type HssAuthenticationInfoRequest struct {
	// AnId Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/AccessNetworkId
	AnId *AccessNetworkId `json:"anId,omitempty"`

	// HssAuthType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAuthType
	HssAuthType HssAuthType `json:"hssAuthType"`

	// NumOfRequestedVectors Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/NumOfRequestedVectors
	NumOfRequestedVectors NumOfRequestedVectors `json:"numOfRequestedVectors"`

	// RequestingNodeType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/NodeType
	RequestingNodeType *NodeType `json:"requestingNodeType,omitempty"`

	// ResynchronizationInfo Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ResynchronizationInfo
	ResynchronizationInfo *ResynchronizationInfo `json:"resynchronizationInfo,omitempty"`
	ServingNetworkId      *PlmnId                `json:"servingNetworkId,omitempty"`
	SupportedFeatures     *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// HssAuthenticationInfoResult Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAuthenticationInfoResult
type HssAuthenticationInfoResult struct {
	// HssAuthenticationVectors Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAuthenticationVectors
	HssAuthenticationVectors HssAuthenticationVectors `json:"hssAuthenticationVectors"`
	SupportedFeatures        *SupportedFeatures       `json:"supportedFeatures,omitempty"`
	AdditionalProperties     map[string]interface{}   `json:"-"`
}

// HssAuthenticationVectors Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAuthenticationVectors
type HssAuthenticationVectors struct {
	union json.RawMessage
}

// HssAuthenticationVectors0 defines model for .
type HssAuthenticationVectors0 = []AvEpsAka

// HssAuthenticationVectors1 defines model for .
type HssAuthenticationVectors1 = []AvImsGbaEapAka

// HssAuthenticationVectors2 defines model for .
type HssAuthenticationVectors2 = []AvEapAkaPrime

// HssAvType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/HssAvType
type HssAvType string

// HssInfo Information of an HSS NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/HssInfo)
type HssInfo struct {
	GroupId                  *NfGroupId             `json:"groupId,omitempty"`
	ImsPrivateIdentityRanges []IdentityRange        `json:"imsPrivateIdentityRanges,omitempty"`
	ImsPublicIdentityRanges  []IdentityRange        `json:"imsPublicIdentityRanges,omitempty"`
	ImsiRanges               []ImsiRange            `json:"imsiRanges,omitempty"`
	MsisdnRanges             []IdentityRange        `json:"msisdnRanges,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// HssSubscriptionInfo Information related to active subscriptions at the HSS(s) (Original definition in TS29505_Subscription_Data.yaml#/components/schemas/HssSubscriptionInfo)
type HssSubscriptionInfo struct {
	HssSubscriptionList  []HssSubscriptionItem  `json:"hssSubscriptionList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HssSubscriptionItem Contains info about a single HSS event subscription (Original definition in TS29505_Subscription_Data.yaml#/components/schemas/HssSubscriptionItem)
type HssSubscriptionItem struct {
	HssInstanceId        NfInstanceId           `json:"hssInstanceId"`
	SubscriptionId       Uri                    `json:"subscriptionId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HxresStar Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/HxresStar
type HxresStar = string

// IdTranslationResult Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IdTranslationResult
type IdTranslationResult struct {
	Gpsi                 Gpsi                   `json:"gpsi,omitempty"`
	Supi                 Supi                   `json:"supi"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IdentityData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/IdentityData
type IdentityData struct {
	GpsiList             []Gpsi                 `json:"gpsiList,omitempty"`
	SupiList             []Supi                 `json:"supiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IdentityRange A range of GPSIs (subscriber identities), either based on a numeric range, or based on regular-expression matching (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/IdentityRange)
type IdentityRange struct {
	End                  string                 `json:"end,omitempty"`
	Pattern              *string                `json:"pattern,omitempty"`
	Start                string                 `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IdleStatusIndication Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/IdleStatusIndication
type IdleStatusIndication struct {
	ActiveTime              *DurationSec           `json:"activeTime,omitempty"`
	EdrxCycleLength         *int                   `json:"edrxCycleLength,omitempty"`
	SubsRegTimer            *DurationSec           `json:"subsRegTimer,omitempty"`
	SuggestedNumOfDlPackets *int                   `json:"suggestedNumOfDlPackets,omitempty"`
	TimeStamp               *DateTime              `json:"timeStamp,omitempty"`
	AdditionalProperties    map[string]interface{} `json:"-"`
}

// IkPrime Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/IkPrime
type IkPrime = string

// ImmediateMdtConf Original definition in TS29518_Namf_Communication.yaml#/components/schemas/ImmediateMdtConf
type ImmediateMdtConf struct {
	AddPositioningMethodList []PositioningMethodMdt     `json:"addPositioningMethodList,omitempty"`
	AreaScope                *AreaScope                 `json:"areaScope,omitempty"`
	CollectionPeriodRmmLte   *CollectionPeriodRmmLteMdt `json:"collectionPeriodRmmLte,omitempty"`
	CollectionPeriodRmmNr    *CollectionPeriodRmmNrMdt  `json:"collectionPeriodRmmNr,omitempty"`
	EventThresholdRsrp       *int                       `json:"eventThresholdRsrp,omitempty"`
	EventThresholdRsrpNr     *int                       `json:"eventThresholdRsrpNr,omitempty"`
	EventThresholdRsrq       *int                       `json:"eventThresholdRsrq,omitempty"`
	EventThresholdRsrqNr     *int                       `json:"eventThresholdRsrqNr,omitempty"`
	JobType                  JobType                    `json:"jobType"`
	MdtAllowedPlmnIdList     []PlmnId                   `json:"mdtAllowedPlmnIdList,omitempty"`
	MeasurementLteList       []MeasurementLteForMdt     `json:"measurementLteList,omitempty"`
	MeasurementNrList        []MeasurementNrForMdt      `json:"measurementNrList,omitempty"`
	MeasurementPeriodLte     *MeasurementPeriodLteMdt   `json:"measurementPeriodLte,omitempty"`
	PositioningMethod        *PositioningMethodMdt      `json:"positioningMethod,omitempty"`
	ReportAmount             *ReportAmountMdt           `json:"reportAmount,omitempty"`
	ReportInterval           *ReportIntervalMdt         `json:"reportInterval,omitempty"`
	ReportIntervalNr         *ReportIntervalNrMdt       `json:"reportIntervalNr,omitempty"`
	ReportingTriggerList     []ReportingTrigger         `json:"reportingTriggerList,omitempty"`
	SensorMeasurementList    []SensorMeasurement        `json:"sensorMeasurementList,omitempty"`
	AdditionalProperties     map[string]interface{}     `json:"-"`
}

// ImsVoPs Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/ImsVoPs
type ImsVoPs string

// ImsiRange A range of IMSIs (subscriber identities), either based on a numeric range, or based on regular-expression matching (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ImsiRange)
type ImsiRange struct {
	End                  string                 `json:"end,omitempty"`
	Pattern              *string                `json:"pattern,omitempty"`
	Start                string                 `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IndirectDataForwardingTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/IndirectDataForwardingTunnelInfo
type IndirectDataForwardingTunnelInfo struct {
	// AdditionalTnlNb Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/AdditionalTnlNb
	AdditionalTnlNb AdditionalTnlNb `json:"additionalTnlNb,omitempty"`

	// DrbId Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DrbId
	DrbId DrbId `json:"drbId,omitempty"`

	// GtpTeid Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Teid
	GtpTeid              Teid                   `json:"gtpTeid"`
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Int64 defines model for Int64.
type Int64 = int64

// IntegrityAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/IntegrityAlgorithm
type IntegrityAlgorithm string

// IntegrityKey Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/IntegrityKey
type IntegrityKey = string

// InterFreqTargetInfo defines model for InterFreqTargetInfo.
type InterFreqTargetInfo struct {
	CellIdList           []PhysCellId           `json:"cellIdList,omitempty"`
	DlCarrierFreq        ArfcnValueNR           `json:"dlCarrierFreq"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// InterfaceUpfInfoItem Information of a given IP interface of an UPF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/InterfaceUpfInfoItem)
type InterfaceUpfInfoItem struct {
	// EndpointFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	EndpointFqdn *Fqdn `json:"endpointFqdn,omitempty"`

	// InterfaceType Types of User-Plane interfaces of the UPF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UPInterfaceType)
	InterfaceType         UPInterfaceType        `json:"interfaceType"`
	Ipv4EndpointAddresses []Ipv4Addr             `json:"ipv4EndpointAddresses,omitempty"`
	Ipv6EndpointAddresses []Ipv6Addr             `json:"ipv6EndpointAddresses,omitempty"`
	NetworkInstance       *string                `json:"networkInstance,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// InternalGroupIdRange A range of Group IDs (internal group identities), either based on a numeric range, or based on regular-expression matching (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/InternalGroupIdRange)
type InternalGroupIdRange struct {
	End                  GroupId                `json:"end,omitempty"`
	Pattern              *string                `json:"pattern,omitempty"`
	Start                GroupId                `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// InvalidParam defines model for InvalidParam.
type InvalidParam struct {
	Param                string                 `json:"param"`
	Reason               *string                `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IpAddress Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IpAddress
type IpAddress struct {
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	Ipv6Prefix           *Ipv6Prefix            `json:"ipv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IpEndPoint IP addressing information of a given NFService; it consists on, e.g. IP address, TCP port, transport protocol... (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/IpEndPoint)
type IpEndPoint struct {
	Ipv4Address Ipv4Addr  `json:"ipv4Address,omitempty"`
	Ipv6Address *Ipv6Addr `json:"ipv6Address,omitempty"`
	Port        *int      `json:"port,omitempty"`

	// Transport Types of transport protocol used in a given IP endpoint of an NF Service Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TransportProtocol)
	Transport            *NrfTransportProtocol  `json:"transport,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IpFlowInfo Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/IpFlowInfo
type IpFlowInfo struct {
	FlowNumber           int                                  `json:"flowNumber"`
	IpFlows              []PolicyAuthorizationFlowDescription `json:"ipFlows,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// IpIndex Original definition in TS29519_Policy_Data.yaml#/components/schemas/IpIndex
type IpIndex = int

// IpMulticastAddressInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/IpMulticastAddressInfo
type IpMulticastAddressInfo struct {
	Ipv4MulAddr          Ipv4Addr               `json:"ipv4MulAddr,omitempty"`
	Ipv6MulAddr          *Ipv6Addr              `json:"ipv6MulAddr,omitempty"`
	SrcIpv4Addr          Ipv4Addr               `json:"srcIpv4Addr,omitempty"`
	SrcIpv6Addr          *Ipv6Addr              `json:"srcIpv6Addr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IpReachability Indicates the type(s) of IP addresses reachable via an SCP (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/IpReachability)
type IpReachability string

// IpSmGwRegistration Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/IpSmGwRegistration
type IpSmGwRegistration struct {
	// IpSmGwDiameterAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/NetworkNodeDiameterAddress
	IpSmGwDiameterAddress *NetworkNodeDiameterAddress `json:"ipSmGwDiameterAddress,omitempty"`

	// IpSmGwMapAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/E164Number
	IpSmGwMapAddress     E164Number             `json:"ipSmGwMapAddress,omitempty"`
	UnriIndicator        *bool                  `json:"unriIndicator,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IptvConfigData Original definition in TS29519_Application_Data.yaml#/components/schemas/IptvConfigData
type IptvConfigData struct {
	AfAppId              string                 `json:"afAppId"`
	Dnn                  *Dnn                   `json:"dnn,omitempty"`
	InterGroupId         GroupId                `json:"interGroupId,omitempty"`
	MultiAccCtrls        map[string]interface{} `json:"multiAccCtrls"`
	ResUri               *Uri                   `json:"resUri,omitempty"`
	Snssai               *Snssai                `json:"snssai,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	SuppFeat             *SupportedFeatures     `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Ipv4Addr defines model for Ipv4Addr.
type Ipv4Addr = string

// Ipv4AddrMask defines model for Ipv4AddrMask.
type Ipv4AddrMask = string

// Ipv4AddrRm defines model for Ipv4AddrRm.
type Ipv4AddrRm = string

// Ipv4AddressRange Range of IPv4 addresses (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Ipv4AddressRange)
type Ipv4AddressRange struct {
	End                  Ipv4Addr               `json:"end,omitempty"`
	Start                Ipv4Addr               `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Ipv6Addr defines model for Ipv6Addr.
type Ipv6Addr = string

// Ipv6Prefix defines model for Ipv6Prefix.
type Ipv6Prefix = string

// Ipv6PrefixRange Range of IPv6 prefixes (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Ipv6PrefixRange)
type Ipv6PrefixRange struct {
	End                  *Ipv6Prefix            `json:"end,omitempty"`
	Start                *Ipv6Prefix            `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Ipv6PrefixRm defines model for Ipv6PrefixRm.
type Ipv6PrefixRm = string

// ItemPath Identifies a fragment (subset of resource data) of a given resource. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/ItemPath)
type ItemPath = string

// IwkEpsInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/IwkEpsInd
type IwkEpsInd = bool

// JobType defines model for JobType.
type JobType string

// Kasme Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Kasme
type Kasme = string

// Kausf Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Kausf
type Kausf = string

// KeyAmf Original definition in TS29518_Namf_Communication.yaml#/components/schemas/KeyAmf
type KeyAmf struct {
	// KeyType Original definition in TS29518_Namf_Communication.yaml#/components/schemas/KeyAmfType
	KeyType              KeyAmfType             `json:"keyType"`
	KeyVal               string                 `json:"keyVal"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// KeyAmfType Original definition in TS29518_Namf_Communication.yaml#/components/schemas/KeyAmfType
type KeyAmfType string

// Kseaf Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/Kseaf
type Kseaf = string

// LadnInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/LadnInfo
type LadnInfo struct {
	Ladn                 string                 `json:"ladn"`
	Presence             *PresenceState         `json:"presence,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LboRoamingAllowed Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LboRoamingAllowed
type LboRoamingAllowed = bool

// LcsBroadcastAssistanceTypesData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsBroadcastAssistanceTypesData
type LcsBroadcastAssistanceTypesData struct {
	LocationAssistanceType Bytes                  `json:"locationAssistanceType"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// LcsClientClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsClientClass
type LcsClientClass string

// LcsClientExternal Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsClientExternal
type LcsClientExternal struct {
	AllowedGeographicArea []interface{} `json:"allowedGeographicArea,omitempty"`

	// PrivacyCheckRelatedAction Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PrivacyCheckRelatedAction
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`

	// ValidTimePeriod Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ValidTimePeriod
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LcsClientGroupExternal Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsClientGroupExternal
type LcsClientGroupExternal struct {
	AllowedGeographicArea []interface{} `json:"allowedGeographicArea,omitempty"`

	// LcsClientGroupId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ExtGroupId
	LcsClientGroupId ExtGroupId `json:"lcsClientGroupId,omitempty"`

	// PrivacyCheckRelatedAction Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PrivacyCheckRelatedAction
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`

	// ValidTimePeriod Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ValidTimePeriod
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LcsClientId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsClientId
type LcsClientId = string

// LcsMoData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsMoData
type LcsMoData struct {
	AllowedServiceClasses []LcsMoServiceClass    `json:"allowedServiceClasses"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// LcsMoServiceClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsMoServiceClass
type LcsMoServiceClass string

// LcsPrivacy Original definition in TS29503_Nudm_PP.yaml#/components/schemas/LcsPrivacy
type LcsPrivacy struct {
	AfInstanceId *string `json:"afInstanceId,omitempty"`

	// Lpi Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/Lpi
	Lpi                    *Lpi                    `json:"lpi,omitempty"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          *UdmPPReferenceId      `json:"referenceId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LcsPrivacyData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsPrivacyData
type LcsPrivacyData struct {
	// Lpi Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/Lpi
	Lpi                 *Lpi                `json:"lpi,omitempty"`
	PlmnOperatorClasses []PlmnOperatorClass `json:"plmnOperatorClasses,omitempty"`

	// UnrelatedClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UnrelatedClass
	UnrelatedClass       *UnrelatedClass        `json:"unrelatedClass,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LcsServiceAuth Possible values are - "LOCATION_ALLOWED_WITH_NOTIFICATION": Location allowed with notification - "LOCATION_ALLOWED_WITHOUT_NOTIFICATION": Location allowed without notification - "LOCATION_ALLOWED_WITHOUT_RESPONSE": Location with notification and privacy verification; location allowed if no response - "LOCATION_RESTRICTED_WITHOUT_RESPONSE": Location with notification and privacy verification; location restricted if no response - "NOTIFICATION_ONLY": Notification only - "NOTIFICATION_AND_VERIFICATION_ONLY": Notification and privacy verification only
type LcsServiceAuth string

// LimitIdToMonitoringKey Contains the limit identifier and the corresponding monitoring key for a given S-NSSAI and DNN. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/LimitIdToMonitoringKey)
type LimitIdToMonitoringKey struct {
	LimitId              string                 `json:"limitId"`
	Monkey               []string               `json:"monkey,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LineType Possible values are - DSL: Identifies a DSL line - PON: Identifies a PON line
type LineType string

// Link defines model for Link.
type Link struct {
	Href                 *Uri                   `json:"href,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LinksValueSchema defines model for LinksValueSchema.
type LinksValueSchema struct {
	union json.RawMessage
}

// LinksValueSchema0 defines model for .
type LinksValueSchema0 = []Link

// LmfInfo Information of an LMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/LmfInfo)
type LmfInfo struct {
	// LmfId Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	LmfId                *string                `json:"lmfId,omitempty"`
	ServingAccessTypes   []AccessType           `json:"servingAccessTypes,omitempty"`
	ServingAnNodeTypes   []AnNodeType           `json:"servingAnNodeTypes,omitempty"`
	ServingClientTypes   []string               `json:"servingClientTypes,omitempty"`
	ServingRatTypes      []RatType              `json:"servingRatTypes,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationAccuracy Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LocationAccuracy
type LocationAccuracy string

// LocationArea Original definition in TS29122_CommonData.yaml#/components/schemas/LocationArea
type LocationArea struct {
	// CellIds Indicates a list of Cell Global Identities of the user which identifies the cell the UE is registered.
	CellIds []string `json:"cellIds,omitempty"`

	// CivicAddresses Identifies a list of civic addresses of the user where the UE is located.
	CivicAddresses []interface{} `json:"civicAddresses,omitempty"`

	// EnodeBIds Indicates a list of eNodeB identities in which the UE is currently located.
	EnodeBIds []string `json:"enodeBIds,omitempty"`

	// GeographicAreas Identifies a list of geographic area of the user where the UE is located.
	GeographicAreas []interface{} `json:"geographicAreas,omitempty"`

	// RoutingAreaIds Identifies a list of Routing Area Identities of the user where the UE is located.
	RoutingAreaIds []string `json:"routingAreaIds,omitempty"`

	// TrackingAreaIds Identifies a list of Tracking Area Identities of the user where the UE is located.
	TrackingAreaIds      []string               `json:"trackingAreaIds,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationArea5G Original definition in TS29122_CommonData.yaml#/components/schemas/LocationArea5G
type LocationArea5G struct {
	// CivicAddresses Identifies a list of civic addresses of the user where the UE is located.
	CivicAddresses *[]interface{} `json:"civicAddresses,omitempty"`

	// GeographicAreas Identifies a list of geographic area of the user where the UE is located.
	GeographicAreas *[]interface{} `json:"geographicAreas,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/NetworkAreaInfo)
	NwAreaInfo           *PcfNetworkAreaInfo    `json:"nwAreaInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationAreaId defines model for LocationAreaId.
type LocationAreaId struct {
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationEvent Original definition in TS29518_Namf_Location.yaml#/components/schemas/LocationEvent
type LocationEvent string

// LocationFilter Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/LocationFilter
type LocationFilter string

// LocationInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/LocationInfo
type LocationInfo struct {
	Gpsi                         Gpsi                       `json:"gpsi,omitempty"`
	RegistrationLocationInfoList []RegistrationLocationInfo `json:"registrationLocationInfoList"`
	Supi                         Supi                       `json:"supi,omitempty"`
	SupportedFeatures            *SupportedFeatures         `json:"supportedFeatures,omitempty"`
	AdditionalProperties         map[string]interface{}     `json:"-"`
}

// LocationInfoRequest Original definition in TS29503_Nudm_MT.yaml#/components/schemas/LocationInfoRequest
type LocationInfoRequest struct {
	Req5gsLoc            *bool                  `json:"req5gsLoc,omitempty"`
	ReqCurrentLoc        *bool                  `json:"reqCurrentLoc,omitempty"`
	ReqRatType           *bool                  `json:"reqRatType,omitempty"`
	ReqServingNode       *bool                  `json:"reqServingNode,omitempty"`
	ReqTimeZone          *bool                  `json:"reqTimeZone,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationInfoResult Original definition in TS29503_Nudm_MT.yaml#/components/schemas/LocationInfoResult
type LocationInfoResult struct {
	AmfInstanceId *NfInstanceId `json:"amfInstanceId,omitempty"`
	CurrentLoc    *bool         `json:"currentLoc,omitempty"`
	Ecgi          *Ecgi         `json:"ecgi,omitempty"`

	// GeoInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/GeographicArea
	GeoInfo interface{} `json:"geoInfo,omitempty"`

	// LocationAge Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AgeOfLocationEstimate
	LocationAge          interface{}            `json:"locationAge,omitempty"`
	Ncgi                 *Ncgi                  `json:"ncgi,omitempty"`
	RatType              *RatType               `json:"ratType,omitempty"`
	SmsfInstanceId       *NfInstanceId          `json:"smsfInstanceId,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Tai                  *Tai                   `json:"tai,omitempty"`
	Timezone             *TimeZone              `json:"timezone,omitempty"`
	VPlmnId              *PlmnId                `json:"vPlmnId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationPrivacyInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LocationPrivacyInd
type LocationPrivacyInd string

// LocationPrivacyVerResult Original definition in TS29518_Namf_Location.yaml#/components/schemas/LocationPrivacyVerResult
type LocationPrivacyVerResult string

// LocationReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LocationReport
type LocationReport struct {
	Location             UserLocation           `json:"location"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationReportingConfiguration Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LocationReportingConfiguration
type LocationReportingConfiguration struct {
	// Accuracy Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LocationAccuracy
	Accuracy        *LocationAccuracy `json:"accuracy,omitempty"`
	CurrentLocation bool              `json:"currentLocation"`

	// N3gppAccuracy Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LocationAccuracy
	N3gppAccuracy        *LocationAccuracy      `json:"n3gppAccuracy,omitempty"`
	OneTime              *bool                  `json:"oneTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationType Original definition in TS29518_Namf_Location.yaml#/components/schemas/LocationType
type LocationType string

// LoggingDurationMdt defines model for LoggingDurationMdt.
type LoggingDurationMdt string

// LoggingDurationNrMdt defines model for LoggingDurationNrMdt.
type LoggingDurationNrMdt string

// LoggingIntervalMdt defines model for LoggingIntervalMdt.
type LoggingIntervalMdt string

// LoggingIntervalNrMdt defines model for LoggingIntervalNrMdt.
type LoggingIntervalNrMdt string

// LossConnectivityCfg Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LossConnectivityCfg
type LossConnectivityCfg struct {
	MaxDetectionTime     *DurationSec           `json:"maxDetectionTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LossConnectivityReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LossConnectivityReport
type LossConnectivityReport struct {
	// LossOfConnectReason Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/LossOfConnectivityReason
	LossOfConnectReason  LossOfConnectivityReason `json:"lossOfConnectReason"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// LossOfConnectivityReason Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/LossOfConnectivityReason
type LossOfConnectivityReason string

// Lpi Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/Lpi
type Lpi struct {
	// LocationPrivacyInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LocationPrivacyInd
	LocationPrivacyInd LocationPrivacyInd `json:"locationPrivacyInd"`

	// ValidTimePeriod Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ValidTimePeriod
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LteMInd LTE-M Indication. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/LteMInd)
type LteMInd struct {
	LteCatMInd           bool                   `json:"lteCatMInd"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LteV2xAuth defines model for LteV2xAuth.
type LteV2xAuth struct {
	PedestrianUeAuth     *UeAuth                `json:"pedestrianUeAuth,omitempty"`
	VehicleUeAuth        *UeAuth                `json:"vehicleUeAuth,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MSClassmark2 defines model for MSClassmark2.
type MSClassmark2 = Bytes

// MaPduIndication Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/MaPduIndication
type MaPduIndication string

// MaReleaseIndication Possible values are
//   - REL_MAPDU_OVER_3GPP
//   - REL_MAPDU_OVER_N3GPP
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaReleaseIndication)
type MaReleaseIndication string

// MacAddr48 defines model for MacAddr48.
type MacAddr48 = string

// MacAddr48Rm defines model for MacAddr48Rm.
type MacAddr48Rm = string

// ManAssiUeRadioCapId defines model for ManAssiUeRadioCapId.
type ManAssiUeRadioCapId = Bytes

// MappingOfSnssai Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/MappingOfSnssai
type MappingOfSnssai struct {
	HomeSnssai           Snssai                 `json:"homeSnssai"`
	ServingSnssai        Snssai                 `json:"servingSnssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MaxDataBurstVol defines model for MaxDataBurstVol.
type MaxDataBurstVol = int

// MaxDataBurstVolRm defines model for MaxDataBurstVolRm.
type MaxDataBurstVolRm = int

// MaxIntegrityProtectedDataRate Possible values are
//   - 64_KBPS
//   - MAX_UE_RATE
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
type MaxIntegrityProtectedDataRate string

// MaxNumOfReports Original definition in TS29503_Nudm_EE.yaml#/components/schemas/MaxNumOfReports
type MaxNumOfReports = int

// MbsfnArea defines model for MbsfnArea.
type MbsfnArea struct {
	CarrierFrequency     *int                   `json:"carrierFrequency,omitempty"`
	MbsfnAreaId          *int                   `json:"mbsfnAreaId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Mcc defines model for Mcc.
type Mcc = string

// McsPriorityIndicator Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/McsPriorityIndicator
type McsPriorityIndicator = bool

// MdtConfiguration defines model for MdtConfiguration.
type MdtConfiguration struct {
	AddPositioningMethodList []PositioningMethodMdt     `json:"addPositioningMethodList,omitempty"`
	AreaScope                *AreaScope                 `json:"areaScope,omitempty"`
	CollectionPeriodRmmLte   *CollectionPeriodRmmLteMdt `json:"collectionPeriodRmmLte,omitempty"`
	CollectionPeriodRmmNr    *CollectionPeriodRmmNrMdt  `json:"collectionPeriodRmmNr,omitempty"`
	EventList                []EventForMdt              `json:"eventList,omitempty"`
	EventThresholdRsrp       *int                       `json:"eventThresholdRsrp,omitempty"`
	EventThresholdRsrpNr     *int                       `json:"eventThresholdRsrpNr,omitempty"`
	EventThresholdRsrq       *int                       `json:"eventThresholdRsrq,omitempty"`
	EventThresholdRsrqNr     *int                       `json:"eventThresholdRsrqNr,omitempty"`
	InterFreqTargetList      []InterFreqTargetInfo      `json:"interFreqTargetList,omitempty"`
	JobType                  JobType                    `json:"jobType"`
	LoggingDuration          *LoggingDurationMdt        `json:"loggingDuration,omitempty"`
	LoggingDurationNr        *LoggingDurationNrMdt      `json:"loggingDurationNr,omitempty"`
	LoggingInterval          *LoggingIntervalMdt        `json:"loggingInterval,omitempty"`
	LoggingIntervalNr        *LoggingIntervalNrMdt      `json:"loggingIntervalNr,omitempty"`
	MbsfnAreaList            []MbsfnArea                `json:"mbsfnAreaList,omitempty"`
	MdtAllowedPlmnIdList     []PlmnId                   `json:"mdtAllowedPlmnIdList,omitempty"`
	MeasurementLteList       *[]MeasurementLteForMdt    `json:"measurementLteList,omitempty"`
	MeasurementNrList        []MeasurementNrForMdt      `json:"measurementNrList,omitempty"`
	MeasurementPeriodLte     *MeasurementPeriodLteMdt   `json:"measurementPeriodLte,omitempty"`
	PositioningMethod        *PositioningMethodMdt      `json:"positioningMethod,omitempty"`
	ReportAmount             *ReportAmountMdt           `json:"reportAmount,omitempty"`
	ReportInterval           *ReportIntervalMdt         `json:"reportInterval,omitempty"`
	ReportIntervalNr         *ReportIntervalNrMdt       `json:"reportIntervalNr,omitempty"`
	ReportType               *ReportTypeMdt             `json:"reportType,omitempty"`
	ReportingTriggerList     []ReportingTrigger         `json:"reportingTriggerList,omitempty"`
	SensorMeasurementList    []SensorMeasurement        `json:"sensorMeasurementList,omitempty"`
	AdditionalProperties     map[string]interface{}     `json:"-"`
}

// MdtUserConsent Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/MdtUserConsent
type MdtUserConsent string

// MeasurementLteForMdt defines model for MeasurementLteForMdt.
type MeasurementLteForMdt string

// MeasurementNrForMdt defines model for MeasurementNrForMdt.
type MeasurementNrForMdt string

// MeasurementPeriodLteMdt defines model for MeasurementPeriodLteMdt.
type MeasurementPeriodLteMdt string

// MediaComponent Identifies a media component. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaComponent)
type MediaComponent struct {
	// AfAppId Contains an AF application identifier. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfAppId)
	AfAppId *AfAppId `json:"afAppId,omitempty"`

	// AfRoutReq describes the event information delivered in the subscription (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRoutingRequirement)
	AfRoutReq  *AfRoutingRequirement `json:"afRoutReq,omitempty"`
	AltSerReqs []string              `json:"altSerReqs,omitempty"`
	Codecs     []CodecData           `json:"codecs,omitempty"`

	// ContVer Represents the content version of some content. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ContentVersion)
	ContVer       *ContentVersion `json:"contVer,omitempty"`
	DesMaxLatency *Float          `json:"desMaxLatency,omitempty"`
	DesMaxLoss    *Float          `json:"desMaxLoss,omitempty"`
	DisUeNotif    *bool           `json:"disUeNotif,omitempty"`

	// FStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowStatus
	FStatus             *FlowStatus                   `json:"fStatus,omitempty"`
	FlusId              *string                       `json:"flusId,omitempty"`
	MarBwDl             BitRate                       `json:"marBwDl,omitempty"`
	MarBwUl             BitRate                       `json:"marBwUl,omitempty"`
	MaxPacketLossRateDl *PacketLossRateRm             `json:"maxPacketLossRateDl"`
	MaxPacketLossRateUl *PacketLossRateRm             `json:"maxPacketLossRateUl"`
	MaxSuppBwDl         BitRate                       `json:"maxSuppBwDl,omitempty"`
	MaxSuppBwUl         BitRate                       `json:"maxSuppBwUl,omitempty"`
	MedCompN            int                           `json:"medCompN"`
	MedSubComps         *map[string]MediaSubComponent `json:"medSubComps,omitempty"`

	// MedType Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaType
	MedType     *MediaType               `json:"medType,omitempty"`
	MinDesBwDl  BitRate                  `json:"minDesBwDl,omitempty"`
	MinDesBwUl  BitRate                  `json:"minDesBwUl,omitempty"`
	MirBwDl     BitRate                  `json:"mirBwDl,omitempty"`
	MirBwUl     BitRate                  `json:"mirBwUl,omitempty"`
	PreemptCap  *PreemptionCapability    `json:"preemptCap,omitempty"`
	PreemptVuln *PreemptionVulnerability `json:"preemptVuln,omitempty"`

	// PrioSharingInd Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PrioritySharingIndicator
	PrioSharingInd *PrioritySharingIndicator `json:"prioSharingInd,omitempty"`
	QosReference   *string                   `json:"qosReference,omitempty"`

	// ResPrio Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ReservPriority
	ResPrio      *ReservPriority `json:"resPrio,omitempty"`
	RrBw         BitRate         `json:"rrBw,omitempty"`
	RsBw         BitRate         `json:"rsBw,omitempty"`
	SharingKeyDl *Uint32         `json:"sharingKeyDl,omitempty"`
	SharingKeyUl *Uint32         `json:"sharingKeyUl,omitempty"`

	// TscaiInputDl Indicates TSC Traffic pattern. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscaiInputContainer)
	TscaiInputDl *TscaiInputContainer `json:"tscaiInputDl"`

	// TscaiInputUl Indicates TSC Traffic pattern. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscaiInputContainer)
	TscaiInputUl *TscaiInputContainer `json:"tscaiInputUl"`

	// TsnQos Indicates TSC Traffic QoS. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TsnQosContainer)
	TsnQos               *TsnQosContainer       `json:"tsnQos,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaComponentResourcesStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaComponentResourcesStatus
type MediaComponentResourcesStatus string

// MediaComponentRm This data type is defined in the same way as the MediaComponent data type, but with the OpenAPI nullable property set to true (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaComponentRm)
type MediaComponentRm struct {
	// AfAppId Contains an AF application identifier. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfAppId)
	AfAppId *AfAppId `json:"afAppId,omitempty"`

	// AfRoutReq this data type is defined in the same way as the AfRoutingRequirement data type, but with the OpenAPI nullable property set to true and the spVal and tempVals attributes defined as removable. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfRoutingRequirementRm)
	AfRoutReq  *AfRoutingRequirementRm `json:"afRoutReq"`
	AltSerReqs *[]string               `json:"altSerReqs"`
	Codecs     []CodecData             `json:"codecs,omitempty"`

	// ContVer Represents the content version of some content. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ContentVersion)
	ContVer       *ContentVersion `json:"contVer,omitempty"`
	DesMaxLatency *FloatRm        `json:"desMaxLatency"`
	DesMaxLoss    *FloatRm        `json:"desMaxLoss"`
	DisUeNotif    *bool           `json:"disUeNotif,omitempty"`

	// FStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowStatus
	FStatus             *FlowStatus                      `json:"fStatus,omitempty"`
	FlusId              *string                          `json:"flusId"`
	MarBwDl             *BitRateRm                       `json:"marBwDl"`
	MarBwUl             *BitRateRm                       `json:"marBwUl"`
	MaxPacketLossRateDl *PacketLossRateRm                `json:"maxPacketLossRateDl"`
	MaxPacketLossRateUl *PacketLossRateRm                `json:"maxPacketLossRateUl"`
	MaxSuppBwDl         *BitRateRm                       `json:"maxSuppBwDl"`
	MaxSuppBwUl         *BitRateRm                       `json:"maxSuppBwUl"`
	MedCompN            int                              `json:"medCompN"`
	MedSubComps         *map[string]*MediaSubComponentRm `json:"medSubComps,omitempty"`

	// MedType Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaType
	MedType     *MediaType                 `json:"medType,omitempty"`
	MinDesBwDl  *BitRateRm                 `json:"minDesBwDl"`
	MinDesBwUl  *BitRateRm                 `json:"minDesBwUl"`
	MirBwDl     *BitRateRm                 `json:"mirBwDl"`
	MirBwUl     *BitRateRm                 `json:"mirBwUl"`
	PreemptCap  *PreemptionCapabilityRm    `json:"preemptCap,omitempty"`
	PreemptVuln *PreemptionVulnerabilityRm `json:"preemptVuln,omitempty"`

	// PrioSharingInd Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PrioritySharingIndicator
	PrioSharingInd *PrioritySharingIndicator `json:"prioSharingInd,omitempty"`
	QosReference   *string                   `json:"qosReference"`

	// ResPrio Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ReservPriority
	ResPrio      *ReservPriority `json:"resPrio,omitempty"`
	RrBw         *BitRateRm      `json:"rrBw"`
	RsBw         *BitRateRm      `json:"rsBw"`
	SharingKeyDl *Uint32Rm       `json:"sharingKeyDl"`
	SharingKeyUl *Uint32Rm       `json:"sharingKeyUl"`

	// TscaiInputDl Indicates TSC Traffic pattern. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscaiInputContainer)
	TscaiInputDl *TscaiInputContainer `json:"tscaiInputDl"`

	// TscaiInputUl Indicates TSC Traffic pattern. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscaiInputContainer)
	TscaiInputUl *TscaiInputContainer `json:"tscaiInputUl"`

	// TsnQos Indicates removable TSC Traffic QoS. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TsnQosContainerRm)
	TsnQos               *TsnQosContainerRm     `json:"tsnQos"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaSubComponent Identifies a media subcomponent (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaSubComponent)
type MediaSubComponent struct {
	// AfSigProtocol Possible values are - NO_INFORMATION: Indicate that no information about the AF signalling protocol is being provided.  - SIP: Indicate that the signalling protocol is Session Initiation Protocol.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AfSigProtocol)
	AfSigProtocol *AfSigProtocol                       `json:"afSigProtocol,omitempty"`
	EthfDescs     []EthFlowDescription                 `json:"ethfDescs,omitempty"`
	FDescs        []PolicyAuthorizationFlowDescription `json:"fDescs,omitempty"`
	FNum          int                                  `json:"fNum"`

	// FStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowStatus
	FStatus *FlowStatus `json:"fStatus,omitempty"`

	// FlowUsage Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowUsage
	FlowUsage *FlowUsage `json:"flowUsage,omitempty"`
	MarBwDl   BitRate    `json:"marBwDl,omitempty"`
	MarBwUl   BitRate    `json:"marBwUl,omitempty"`

	// TosTrCl 2-octet string, where each octet is encoded in hexadecimal representation. The first octet contains the IPv4 Type-of-Service or the IPv6 Traffic-Class field and the second octet contains the ToS/Traffic Class mask field. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TosTrafficClass)
	TosTrCl              *TosTrafficClass       `json:"tosTrCl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaSubComponentRm This data type is defined in the same way as the MediaSubComponent data type, but with the OpenAPI nullable property set to true. Removable attributes marBwDl and marBwUl are defined with the corresponding removable data type. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaSubComponentRm)
type MediaSubComponentRm struct {
	// AfSigProtocol Possible values are - NO_INFORMATION: Indicate that no information about the AF signalling protocol is being provided.  - SIP: Indicate that the signalling protocol is Session Initiation Protocol.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AfSigProtocol)
	AfSigProtocol *AfSigProtocol                        `json:"afSigProtocol,omitempty"`
	EthfDescs     *[]EthFlowDescription                 `json:"ethfDescs"`
	FDescs        *[]PolicyAuthorizationFlowDescription `json:"fDescs"`
	FNum          int                                   `json:"fNum"`

	// FStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowStatus
	FStatus *FlowStatus `json:"fStatus,omitempty"`

	// FlowUsage Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowUsage
	FlowUsage *FlowUsage `json:"flowUsage,omitempty"`
	MarBwDl   *BitRateRm `json:"marBwDl"`
	MarBwUl   *BitRateRm `json:"marBwUl"`

	// TosTrCl this data type is defined in the same way as the TosTrafficClass data type, but with the OpenAPI nullable property set to true (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TosTrafficClassRm)
	TosTrCl              *TosTrafficClassRm     `json:"tosTrCl"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaType Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaType
type MediaType string

// MessageWaitingData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/MessageWaitingData
type MessageWaitingData struct {
	MwdList              []SmscData             `json:"mwdList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MeteringMethod Possible values are - DURATION: Indicates that the duration of the service data flow traffic shall be metered. - VOLUME: Indicates that volume of the service data flow traffic shall be metered. - DURATION_VOLUME: Indicates that the duration and the volume of the service data flow traffic shall be metered. - EVENT: Indicates that events of the service data flow traffic shall be metered.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/MeteringMethod)
type MeteringMethod struct {
	union json.RawMessage
}

// MeteringMethod0 defines model for MeteringMethod.0.
type MeteringMethod0 string

// MeteringMethod2 This string provides forward-compatibility with future extensions to the enumeration but is not used to encode content defined in the present version of this API.
type MeteringMethod2 = string

// MicoAllowed Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/MicoAllowed
type MicoAllowed = bool

// MmContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/MmContext
type MmContext struct {
	AccessType       AccessType `json:"accessType"`
	AllowedHomeNssai []Snssai   `json:"allowedHomeNssai,omitempty"`
	AllowedNssai     []Snssai   `json:"allowedNssai,omitempty"`
	AnN2ApId         *int       `json:"anN2ApId,omitempty"`

	// EpsNasSecurityMode Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EpsNasSecurityMode
	EpsNasSecurityMode *EpsNasSecurityMode `json:"epsNasSecurityMode,omitempty"`

	// ExpectedUEbehavior Original definition in TS29518_Namf_Communication.yaml#/components/schemas/ExpectedUeBehavior
	ExpectedUEbehavior  *ExpectedUeBehavior  `json:"expectedUEbehavior,omitempty"`
	ManAssiUeRadioCapId *ManAssiUeRadioCapId `json:"manAssiUeRadioCapId,omitempty"`
	N3IwfId             *GlobalRanNodeId     `json:"n3IwfId,omitempty"`
	NasDownlinkCount    *NasCount            `json:"nasDownlinkCount,omitempty"`

	// NasSecurityMode Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NasSecurityMode
	NasSecurityMode         *NasSecurityMode       `json:"nasSecurityMode,omitempty"`
	NasUplinkCount          *NasCount              `json:"nasUplinkCount,omitempty"`
	NsInstanceList          []NsiId                `json:"nsInstanceList,omitempty"`
	NssaaStatusList         []NssaaStatus          `json:"nssaaStatusList,omitempty"`
	NssaiMappingList        []NssaiMapping         `json:"nssaiMappingList,omitempty"`
	PendingNssaiMappingList []NssaiMapping         `json:"pendingNssaiMappingList,omitempty"`
	PlmnAssiUeRadioCapId    *PlmnAssiUeRadioCapId  `json:"plmnAssiUeRadioCapId,omitempty"`
	S1UeNetworkCapability   *S1UeNetworkCapability `json:"s1UeNetworkCapability,omitempty"`
	TngfId                  *GlobalRanNodeId       `json:"tngfId,omitempty"`
	UcmfDicEntryId          *string                `json:"ucmfDicEntryId,omitempty"`

	// UeDifferentiationInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeDifferentiationInfo
	UeDifferentiationInfo *UeDifferentiationInfo `json:"ueDifferentiationInfo,omitempty"`
	UeSecurityCapability  *UeSecurityCapability  `json:"ueSecurityCapability,omitempty"`
	WagfId                *GlobalRanNodeId       `json:"wagfId,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// MmeCapabilities Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MmeCapabilities
type MmeCapabilities struct {
	EthernetSupported    *bool                  `json:"ethernetSupported,omitempty"`
	NonIpSupported       *bool                  `json:"nonIpSupported,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Mnc defines model for Mnc.
type Mnc = string

// MoExpDataCounter defines model for MoExpDataCounter.
type MoExpDataCounter struct {
	Counter              int                    `json:"counter"`
	TimeStamp            *DateTime              `json:"timeStamp,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ModificationNotification Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ModificationNotification
type ModificationNotification struct {
	NotifyItems          []NotifyItem           `json:"notifyItems"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MonitoringConfiguration Original definition in TS29503_Nudm_EE.yaml#/components/schemas/MonitoringConfiguration
type MonitoringConfiguration struct {
	AfId *string `json:"afId,omitempty"`

	// AssociationType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/AssociationType
	AssociationType *AssociationType `json:"associationType,omitempty"`

	// DatalinkReportCfg Original definition in TS29503_Nudm_EE.yaml#/components/schemas/DatalinkReportingConfiguration
	DatalinkReportCfg *DatalinkReportingConfiguration `json:"datalinkReportCfg,omitempty"`

	// EventType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/EventType
	EventType     EventType `json:"eventType"`
	IdleStatusInd *bool     `json:"idleStatusInd,omitempty"`
	ImmediateFlag *bool     `json:"immediateFlag,omitempty"`

	// LocationReportingConfiguration Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LocationReportingConfiguration
	LocationReportingConfiguration *LocationReportingConfiguration `json:"locationReportingConfiguration,omitempty"`

	// LossConnectivityCfg Original definition in TS29503_Nudm_EE.yaml#/components/schemas/LossConnectivityCfg
	LossConnectivityCfg    *LossConnectivityCfg    `json:"lossConnectivityCfg,omitempty"`
	MaximumLatency         *DurationSec            `json:"maximumLatency,omitempty"`
	MaximumResponseTime    *DurationSec            `json:"maximumResponseTime,omitempty"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// PduSessionStatusCfg Original definition in TS29503_Nudm_EE.yaml#/components/schemas/PduSessionStatusCfg
	PduSessionStatusCfg *PduSessionStatusCfg `json:"pduSessionStatusCfg,omitempty"`

	// ReachabilityForSmsCfg Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReachabilityForSmsConfiguration
	ReachabilityForSmsCfg *ReachabilityForSmsConfiguration `json:"reachabilityForSmsCfg,omitempty"`
	SuggestedPacketNumDl  int                              `json:"suggestedPacketNumDl,omitempty"`
	AdditionalProperties  map[string]interface{}           `json:"-"`
}

// MonitoringReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/MonitoringReport
type MonitoringReport struct {
	// EventType Original definition in TS29503_Nudm_EE.yaml#/components/schemas/EventType
	EventType EventType `json:"eventType"`
	Gpsi      Gpsi      `json:"gpsi,omitempty"`

	// ReachabilityForSmsReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReachabilityForSmsReport
	ReachabilityForSmsReport *ReachabilityForSmsReport `json:"reachabilityForSmsReport,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReferenceId
	ReferenceId UdmEEReferenceId `json:"referenceId"`

	// Report Original definition in TS29503_Nudm_EE.yaml#/components/schemas/Report
	Report               *Report                `json:"report,omitempty"`
	TimeStamp            DateTime               `json:"timeStamp"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MpsPriorityIndicator Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/MpsPriorityIndicator
type MpsPriorityIndicator = bool

// MtcProvider Original definition in TS29505_Subscription_Data.yaml#/components/schemas/MtcProvider
type MtcProvider struct {
	AfId                   *string                 `json:"afId,omitempty"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	AdditionalProperties   map[string]interface{}  `json:"-"`
}

// MtcProviderInformation defines model for MtcProviderInformation.
type MtcProviderInformation = string

// MulticastAccessControl Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/MulticastAccessControl
type MulticastAccessControl string

// N1MessageClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageClass
type N1MessageClass string

// N1MessageContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageContainer
type N1MessageContainer struct {
	// N1MessageClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageClass
	N1MessageClass       N1MessageClass         `json:"n1MessageClass"`
	N1MessageContent     RefToBinaryData        `json:"n1MessageContent"`
	NfId                 *NfInstanceId          `json:"nfId,omitempty"`
	ServiceInstanceId    *string                `json:"serviceInstanceId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N1MessageNotification Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageNotification
type N1MessageNotification struct {
	CIoT5GSOptimisation *bool  `json:"cIoT5GSOptimisation,omitempty"`
	Ecgi                *Ecgi  `json:"ecgi,omitempty"`
	Guami               *Guami `json:"guami,omitempty"`

	// LcsCorrelationId Original reference TS29572_Nlmf_Location.yaml#/components/schemas/CorrelationID
	LcsCorrelationId *string `json:"lcsCorrelationId,omitempty"`

	// N1MessageContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageContainer
	N1MessageContainer     N1MessageContainer `json:"n1MessageContainer"`
	N1NotifySubscriptionId *string            `json:"n1NotifySubscriptionId,omitempty"`
	Ncgi                   *Ncgi              `json:"ncgi,omitempty"`

	// NewLmfIdentification Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	NewLmfIdentification *string `json:"newLmfIdentification,omitempty"`

	// RegistrationCtxtContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/RegistrationContextContainer
	RegistrationCtxtContainer *RegistrationContextContainer `json:"registrationCtxtContainer,omitempty"`
	AdditionalProperties      map[string]interface{}        `json:"-"`
}

// N1N2MessageTransferCause Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferCause
type N1N2MessageTransferCause string

// N1N2MessageTransferError Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferError
type N1N2MessageTransferError struct {
	// ErrInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MsgTxfrErrDetail
	ErrInfo              *N1N2MsgTxfrErrDetail  `json:"errInfo,omitempty"`
	Error                ProblemDetails         `json:"error"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N1N2MessageTransferReqData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferReqData
type N1N2MessageTransferReqData struct {
	N5qi *N5Qi `json:"5qi,omitempty"`

	// AreaOfValidity Original definition in TS29518_Namf_Communication.yaml#/components/schemas/AreaOfValidity
	AreaOfValidity    *AreaOfValidity `json:"areaOfValidity,omitempty"`
	Arp               *Arp            `json:"arp,omitempty"`
	ExtBufSupport     *bool           `json:"extBufSupport,omitempty"`
	LastMsgIndication *bool           `json:"lastMsgIndication,omitempty"`

	// LcsCorrelationId Original reference TS29572_Nlmf_Location.yaml#/components/schemas/CorrelationID
	LcsCorrelationId *string          `json:"lcsCorrelationId,omitempty"`
	MaAcceptedInd    *bool            `json:"maAcceptedInd,omitempty"`
	MtData           *RefToBinaryData `json:"mtData,omitempty"`

	// N1MessageContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageContainer
	N1MessageContainer     *N1MessageContainer `json:"n1MessageContainer,omitempty"`
	N1n2FailureTxfNotifURI *Uri                `json:"n1n2FailureTxfNotifURI,omitempty"`

	// N2InfoContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContainer
	N2InfoContainer *N2InfoContainer `json:"n2InfoContainer,omitempty"`
	OldGuami        *Guami           `json:"oldGuami,omitempty"`
	PduSessionId    *PduSessionId    `json:"pduSessionId,omitempty"`

	// Ppi Original definition in TS29518_Namf_Communication.yaml#/components/schemas/Ppi
	Ppi                  *Ppi                   `json:"ppi,omitempty"`
	SkipInd              *bool                  `json:"skipInd,omitempty"`
	SmfReallocationInd   *bool                  `json:"smfReallocationInd,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	TargetAccess         AccessType             `json:"targetAccess,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N1N2MessageTransferRspData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferRspData
type N1N2MessageTransferRspData struct {
	// Cause Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferCause
	Cause                N1N2MessageTransferCause `json:"cause"`
	SupportedFeatures    *SupportedFeatures       `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// N1N2MsgTxfrErrDetail Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MsgTxfrErrDetail
type N1N2MsgTxfrErrDetail struct {
	HighestPrioArp       *Arp                   `json:"highestPrioArp,omitempty"`
	MaxWaitingTime       *DurationSec           `json:"maxWaitingTime,omitempty"`
	RetryAfter           *Uinteger              `json:"retryAfter,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N1N2MsgTxfrFailureNotification Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MsgTxfrFailureNotification
type N1N2MsgTxfrFailureNotification struct {
	// Cause Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferCause
	Cause                N1N2MessageTransferCause `json:"cause"`
	N1n2MsgDataUri       Uri                      `json:"n1n2MsgDataUri"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// N2InfoContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContainer
type N2InfoContainer struct {
	// N2InformationClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationClass
	N2InformationClass N2InformationClass `json:"n2InformationClass"`

	// NrppaInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NrppaInformation
	NrppaInfo *NrppaInformation `json:"nrppaInfo,omitempty"`

	// PwsInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PwsInformation
	PwsInfo *PwsInformation `json:"pwsInfo,omitempty"`

	// RanInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2RanInformation
	RanInfo *N2RanInformation `json:"ranInfo,omitempty"`

	// SmInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2SmInformation
	SmInfo *N2SmInformation `json:"smInfo,omitempty"`

	// V2xInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/V2xInformation
	V2xInfo              *V2xInformation        `json:"v2xInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2InfoContent Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
type N2InfoContent struct {
	NgapData RefToBinaryData `json:"ngapData"`

	// NgapIeType Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgapIeType
	NgapIeType           *NgapIeType            `json:"ngapIeType,omitempty"`
	NgapMessageType      *Uinteger              `json:"ngapMessageType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2InfoNotificationRspData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoNotificationRspData
type N2InfoNotificationRspData struct {
	SecRatDataUsageList  []N2SmInformation      `json:"secRatDataUsageList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2InfoNotifyReason Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoNotifyReason
type N2InfoNotifyReason string

// N2InformationClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationClass
type N2InformationClass string

// N2InformationNotification Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationNotification
type N2InformationNotification struct {
	AnN2IPv4Addr   Ipv4Addr  `json:"anN2IPv4Addr,omitempty"`
	AnN2IPv6Addr   *Ipv6Addr `json:"anN2IPv6Addr,omitempty"`
	Guami          *Guami    `json:"guami,omitempty"`
	InitialAmfName *AmfName  `json:"initialAmfName,omitempty"`

	// LcsCorrelationId Original reference TS29572_Nlmf_Location.yaml#/components/schemas/CorrelationID
	LcsCorrelationId *string `json:"lcsCorrelationId,omitempty"`

	// N2InfoContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContainer
	N2InfoContainer        *N2InfoContainer `json:"n2InfoContainer,omitempty"`
	N2NotifySubscriptionId string           `json:"n2NotifySubscriptionId"`

	// NotifyReason Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoNotifyReason
	NotifyReason         *N2InfoNotifyReason    `json:"notifyReason,omitempty"`
	NotifySourceNgRan    *bool                  `json:"notifySourceNgRan,omitempty"`
	RanNodeId            *GlobalRanNodeId       `json:"ranNodeId,omitempty"`
	SmfChangeInfoList    []SmfChangeInfo        `json:"smfChangeInfoList,omitempty"`
	ToReleaseSessionList []PduSessionId         `json:"toReleaseSessionList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2InformationTransferError Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationTransferError
type N2InformationTransferError struct {
	Error ProblemDetails `json:"error"`

	// PwsErrorInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PWSErrorData
	PwsErrorInfo         *PWSErrorData          `json:"pwsErrorInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2InformationTransferReqData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationTransferReqData
type N2InformationTransferReqData struct {
	GlobalRanNodeList []GlobalRanNodeId `json:"globalRanNodeList,omitempty"`

	// N2Information Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContainer
	N2Information N2InfoContainer `json:"n2Information"`

	// RatSelector Original definition in TS29518_Namf_Communication.yaml#/components/schemas/RatSelector
	RatSelector          *RatSelector           `json:"ratSelector,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2InformationTransferResult Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationTransferResult
type N2InformationTransferResult string

// N2InformationTransferRspData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationTransferRspData
type N2InformationTransferRspData struct {
	// PwsRspData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PWSResponseData
	PwsRspData *PWSResponseData `json:"pwsRspData,omitempty"`

	// Result Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationTransferResult
	Result               N2InformationTransferResult `json:"result"`
	SupportedFeatures    *SupportedFeatures          `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// N2InterfaceAmfInfo AMF N2 interface information (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/N2InterfaceAmfInfo)
type N2InterfaceAmfInfo struct {
	AmfName              *AmfName               `json:"amfName,omitempty"`
	Ipv4EndpointAddress  []Ipv4Addr             `json:"ipv4EndpointAddress,omitempty"`
	Ipv6EndpointAddress  []Ipv6Addr             `json:"ipv6EndpointAddress,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2RanInformation Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2RanInformation
type N2RanInformation struct {
	// N2InfoContent Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	N2InfoContent        N2InfoContent          `json:"n2InfoContent"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
type N2SmInfoType string

// N2SmInformation Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2SmInformation
type N2SmInformation struct {
	HomePlmnSnssai *Snssai `json:"homePlmnSnssai,omitempty"`
	IwkSnssai      *Snssai `json:"iwkSnssai,omitempty"`

	// N2InfoContent Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	N2InfoContent        *N2InfoContent         `json:"n2InfoContent,omitempty"`
	PduSessionId         PduSessionId           `json:"pduSessionId"`
	SNssai               *Snssai                `json:"sNssai,omitempty"`
	SubjectToHo          *bool                  `json:"subjectToHo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N3IwfId defines model for N3IwfId.
type N3IwfId = string

// N3gaLocation defines model for N3gaLocation.
type N3gaLocation struct {
	Gci        *Gci       `json:"gci,omitempty"`
	Gli        *Gli       `json:"gli,omitempty"`
	HfcNodeId  *HfcNodeId `json:"hfcNodeId,omitempty"`
	N3IwfId    string     `json:"n3IwfId,omitempty"`
	N3gppTai   *Tai       `json:"n3gppTai,omitempty"`
	PortNumber *Uinteger  `json:"portNumber,omitempty"`

	// Protocol Possible values are - UDP: User Datagram Protocol. - TCP: Transmission Control Protocol.
	Protocol   *TransportProtocol `json:"protocol,omitempty"`
	TnapId     *TnapId            `json:"tnapId,omitempty"`
	TwapId     *TwapId            `json:"twapId,omitempty"`
	UeIpv4Addr Ipv4Addr           `json:"ueIpv4Addr,omitempty"`
	UeIpv6Addr *Ipv6Addr          `json:"ueIpv6Addr,omitempty"`

	// W5gbanLineType Possible values are - DSL: Identifies a DSL line - PON: Identifies a PON line
	W5gbanLineType       *LineType              `json:"w5gbanLineType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N4Information Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
type N4Information struct {
	// N4DnaiInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DnaiInformation
	N4DnaiInfo       *DnaiInformation `json:"n4DnaiInfo,omitempty"`
	N4MessagePayload RefToBinaryData  `json:"n4MessagePayload"`

	// N4MessageType Possible values are
	//   - PFCP_SES_EST_REQ
	//   - PFCP_SES_EST_RSP
	//   - PFCP_SES_MOD_REQ
	//   - PFCP_SES_MOD_RSP
	//   - PFCP_SES_DEL_REQ
	//   - PFCP_SES_DEL_RSP
	//   - PFCP_SES_REP_REQ
	//   - PFCP_SES_REP_RSP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4MessageType)
	N4MessageType        N4MessageType          `json:"n4MessageType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N4MessageType Possible values are
//   - PFCP_SES_EST_REQ
//   - PFCP_SES_EST_RSP
//   - PFCP_SES_MOD_REQ
//   - PFCP_SES_MOD_RSP
//   - PFCP_SES_DEL_REQ
//   - PFCP_SES_DEL_RSP
//   - PFCP_SES_REP_REQ
//   - PFCP_SES_REP_RSP
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4MessageType)
type N4MessageType string

// NFDiscoveryNFProfile Information of an NF Instance discovered by the NRF (Original definition in TS29510_Nnrf_NFDiscovery.yaml#/components/schemas/NFProfile)
type NFDiscoveryNFProfile struct {
	// AmfInfo Information of an AMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AmfInfo)
	AmfInfo     *AmfInfo            `json:"amfInfo,omitempty"`
	AmfInfoList *map[string]AmfInfo `json:"amfInfoList,omitempty"`

	// AusfInfo Information of an AUSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AusfInfo)
	AusfInfo     *AusfInfo            `json:"ausfInfo,omitempty"`
	AusfInfoList *map[string]AusfInfo `json:"ausfInfoList,omitempty"`

	// BsfInfo Information of a BSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/BsfInfo)
	BsfInfo     *BsfInfo            `json:"bsfInfo,omitempty"`
	BsfInfoList *map[string]BsfInfo `json:"bsfInfoList,omitempty"`
	Capacity    *int                `json:"capacity,omitempty"`

	// ChfInfo Information of a CHF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ChfInfo)
	ChfInfo                          *ChfInfo                           `json:"chfInfo,omitempty"`
	ChfInfoList                      *map[string]ChfInfo                `json:"chfInfoList,omitempty"`
	CustomInfo                       *map[string]interface{}            `json:"customInfo,omitempty"`
	DefaultNotificationSubscriptions *[]DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`

	// Fqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	Fqdn *Fqdn `json:"fqdn,omitempty"`

	// GmlcInfo Information of a GMLC NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/GmlcInfo)
	GmlcInfo      *GmlcInfo           `json:"gmlcInfo,omitempty"`
	HssInfoList   *map[string]HssInfo `json:"hssInfoList,omitempty"`
	Ipv4Addresses []Ipv4Addr          `json:"ipv4Addresses,omitempty"`
	Ipv6Addresses []Ipv6Addr          `json:"ipv6Addresses,omitempty"`
	LcHSupportInd *bool               `json:"lcHSupportInd,omitempty"`

	// LmfInfo Information of an LMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/LmfInfo)
	LmfInfo       *LmfInfo  `json:"lmfInfo,omitempty"`
	Load          *int      `json:"load,omitempty"`
	LoadTimeStamp *DateTime `json:"loadTimeStamp,omitempty"`
	Locality      *string   `json:"locality,omitempty"`

	// NefInfo Information of an NEF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefInfo)
	NefInfo              *NefInfo              `json:"nefInfo,omitempty"`
	NfInstanceId         NfInstanceId          `json:"nfInstanceId"`
	NfInstanceName       *string               `json:"nfInstanceName,omitempty"`
	NfServiceList        *map[string]NFService `json:"nfServiceList,omitempty"`
	NfServicePersistence *bool                 `json:"nfServicePersistence,omitempty"`
	// Deprecated:
	NfServices            []NFService          `json:"nfServices,omitempty"`
	NfSetIdList           []NfSetId            `json:"nfSetIdList,omitempty"`
	NfSetRecoveryTimeList *map[string]DateTime `json:"nfSetRecoveryTimeList,omitempty"`

	// NfStatus Status of a given NF Instance stored in NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFStatus)
	NfStatus NFStatus `json:"nfStatus"`

	// NfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	NfType  NFType   `json:"nfType"`
	NsiList []string `json:"nsiList,omitempty"`

	// NwdafInfo Information of a NWDAF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NwdafInfo)
	NwdafInfo      *NwdafInfo `json:"nwdafInfo,omitempty"`
	OlcHSupportInd *bool      `json:"olcHSupportInd,omitempty"`

	// PcfInfo Information of a PCF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PcfInfo)
	PcfInfo           *PcfInfo              `json:"pcfInfo,omitempty"`
	PcfInfoList       *map[string]PcfInfo   `json:"pcfInfoList,omitempty"`
	PcscfInfoList     *map[string]PcscfInfo `json:"pcscfInfoList,omitempty"`
	PerPlmnSnssaiList []PlmnSnssai          `json:"perPlmnSnssaiList,omitempty"`
	PlmnList          []PlmnId              `json:"plmnList,omitempty"`
	Priority          *int                  `json:"priority,omitempty"`
	RecoveryTime      *DateTime             `json:"recoveryTime,omitempty"`
	SNssais           []ExtSnssai           `json:"sNssais,omitempty"`
	ScpDomains        []string              `json:"scpDomains,omitempty"`

	// ScpInfo Information of an SCP Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ScpInfo)
	ScpInfo                    *ScpInfo             `json:"scpInfo,omitempty"`
	ServiceSetRecoveryTimeList *map[string]DateTime `json:"serviceSetRecoveryTimeList,omitempty"`
	ServingScope               []string             `json:"servingScope,omitempty"`

	// SmfInfo Information of an SMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SmfInfo)
	SmfInfo     *SmfInfo            `json:"smfInfo,omitempty"`
	SmfInfoList *map[string]SmfInfo `json:"smfInfoList,omitempty"`
	SnpnList    []PlmnIdNid         `json:"snpnList,omitempty"`

	// UdmInfo Information of an UDM NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdmInfo)
	UdmInfo     *UdmInfo            `json:"udmInfo,omitempty"`
	UdmInfoList *map[string]UdmInfo `json:"udmInfoList,omitempty"`

	// UdrInfo Information of an UDR NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdrInfo)
	UdrInfo     *UdrInfo            `json:"udrInfo,omitempty"`
	UdrInfoList *map[string]UdrInfo `json:"udrInfoList,omitempty"`

	// UdsfInfo Information related to UDSF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdsfInfo)
	UdsfInfo     *UdsfInfo            `json:"udsfInfo,omitempty"`
	UdsfInfoList *map[string]UdsfInfo `json:"udsfInfoList,omitempty"`

	// UpfInfo Information of an UPF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UpfInfo)
	UpfInfo              *UpfInfo               `json:"upfInfo,omitempty"`
	UpfInfoList          *map[string]UpfInfo    `json:"upfInfoList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NFManagementNFProfile Information of an NF Instance registered in the NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFProfile)
type NFManagementNFProfile struct {
	AllowedNfDomains []string    `json:"allowedNfDomains,omitempty"`
	AllowedNfTypes   []NFType    `json:"allowedNfTypes,omitempty"`
	AllowedNssais    []ExtSnssai `json:"allowedNssais,omitempty"`
	AllowedPlmns     []PlmnId    `json:"allowedPlmns,omitempty"`
	AllowedSnpns     []PlmnIdNid `json:"allowedSnpns,omitempty"`

	// AmfInfo Information of an AMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AmfInfo)
	AmfInfo     *AmfInfo            `json:"amfInfo,omitempty"`
	AmfInfoList *map[string]AmfInfo `json:"amfInfoList,omitempty"`

	// AusfInfo Information of an AUSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AusfInfo)
	AusfInfo     *AusfInfo            `json:"ausfInfo,omitempty"`
	AusfInfoList *map[string]AusfInfo `json:"ausfInfoList,omitempty"`

	// BsfInfo Information of a BSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/BsfInfo)
	BsfInfo     *BsfInfo            `json:"bsfInfo,omitempty"`
	BsfInfoList *map[string]BsfInfo `json:"bsfInfoList,omitempty"`
	Capacity    *int                `json:"capacity,omitempty"`

	// ChfInfo Information of a CHF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ChfInfo)
	ChfInfo                          *ChfInfo                           `json:"chfInfo,omitempty"`
	ChfInfoList                      *map[string]ChfInfo                `json:"chfInfoList,omitempty"`
	CustomInfo                       *map[string]interface{}            `json:"customInfo,omitempty"`
	DefaultNotificationSubscriptions *[]DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`

	// Fqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	Fqdn *Fqdn `json:"fqdn,omitempty"`

	// GmlcInfo Information of a GMLC NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/GmlcInfo)
	GmlcInfo       *GmlcInfo           `json:"gmlcInfo,omitempty"`
	HeartBeatTimer *int                `json:"heartBeatTimer,omitempty"`
	HssInfoList    *map[string]HssInfo `json:"hssInfoList,omitempty"`

	// InterPlmnFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	InterPlmnFqdn *Fqdn      `json:"interPlmnFqdn,omitempty"`
	Ipv4Addresses []Ipv4Addr `json:"ipv4Addresses,omitempty"`
	Ipv6Addresses []Ipv6Addr `json:"ipv6Addresses,omitempty"`
	LcHSupportInd *bool      `json:"lcHSupportInd,omitempty"`

	// LmfInfo Information of an LMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/LmfInfo)
	LmfInfo       *LmfInfo  `json:"lmfInfo,omitempty"`
	Load          *int      `json:"load,omitempty"`
	LoadTimeStamp *DateTime `json:"loadTimeStamp,omitempty"`
	Locality      *string   `json:"locality,omitempty"`

	// NefInfo Information of an NEF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefInfo)
	NefInfo                    *NefInfo                 `json:"nefInfo,omitempty"`
	NfInstanceId               NfInstanceId             `json:"nfInstanceId"`
	NfInstanceName             *string                  `json:"nfInstanceName,omitempty"`
	NfProfileChangesInd        *bool                    `json:"nfProfileChangesInd,omitempty"`
	NfProfileChangesSupportInd *bool                    `json:"nfProfileChangesSupportInd,omitempty"`
	NfServiceList              *map[string]NrfNFService `json:"nfServiceList,omitempty"`
	NfServicePersistence       *bool                    `json:"nfServicePersistence,omitempty"`
	// Deprecated:
	NfServices            []NrfNFService       `json:"nfServices,omitempty"`
	NfSetIdList           []NfSetId            `json:"nfSetIdList,omitempty"`
	NfSetRecoveryTimeList *map[string]DateTime `json:"nfSetRecoveryTimeList,omitempty"`

	// NfStatus Status of a given NF Instance stored in NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFStatus)
	NfStatus NFStatus `json:"nfStatus"`

	// NfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	NfType NFType `json:"nfType"`

	// NrfInfo Information of an NRF NF Instance, used in hierarchical NRF deployments (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NrfInfo)
	NrfInfo *NrfInfo `json:"nrfInfo,omitempty"`
	NsiList []string `json:"nsiList,omitempty"`

	// NwdafInfo Information of a NWDAF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NwdafInfo)
	NwdafInfo      *NwdafInfo `json:"nwdafInfo,omitempty"`
	OlcHSupportInd *bool      `json:"olcHSupportInd,omitempty"`

	// PcfInfo Information of a PCF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PcfInfo)
	PcfInfo           *PcfInfo              `json:"pcfInfo,omitempty"`
	PcfInfoList       *map[string]PcfInfo   `json:"pcfInfoList,omitempty"`
	PcscfInfoList     *map[string]PcscfInfo `json:"pcscfInfoList,omitempty"`
	PerPlmnSnssaiList []PlmnSnssai          `json:"perPlmnSnssaiList,omitempty"`
	PlmnList          []PlmnId              `json:"plmnList,omitempty"`
	Priority          *int                  `json:"priority,omitempty"`
	RecoveryTime      *DateTime             `json:"recoveryTime,omitempty"`
	SNssais           []ExtSnssai           `json:"sNssais,omitempty"`
	ScpDomains        []string              `json:"scpDomains,omitempty"`

	// ScpInfo Information of an SCP Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ScpInfo)
	ScpInfo                    *ScpInfo             `json:"scpInfo,omitempty"`
	ServiceSetRecoveryTimeList *map[string]DateTime `json:"serviceSetRecoveryTimeList,omitempty"`
	ServingScope               []string             `json:"servingScope,omitempty"`

	// SmfInfo Information of an SMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SmfInfo)
	SmfInfo     *SmfInfo            `json:"smfInfo,omitempty"`
	SmfInfoList *map[string]SmfInfo `json:"smfInfoList,omitempty"`
	SnpnList    []PlmnIdNid         `json:"snpnList,omitempty"`

	// UdmInfo Information of an UDM NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdmInfo)
	UdmInfo     *UdmInfo            `json:"udmInfo,omitempty"`
	UdmInfoList *map[string]UdmInfo `json:"udmInfoList,omitempty"`

	// UdrInfo Information of an UDR NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdrInfo)
	UdrInfo     *UdrInfo            `json:"udrInfo,omitempty"`
	UdrInfoList *map[string]UdrInfo `json:"udrInfoList,omitempty"`

	// UdsfInfo Information related to UDSF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdsfInfo)
	UdsfInfo     *UdsfInfo            `json:"udsfInfo,omitempty"`
	UdsfInfoList *map[string]UdsfInfo `json:"udsfInfoList,omitempty"`

	// UpfInfo Information of an UPF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UpfInfo)
	UpfInfo              *UpfInfo               `json:"upfInfo,omitempty"`
	UpfInfoList          *map[string]UpfInfo    `json:"upfInfoList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NFService Information of a given NF Service Instance; it is part of the NFProfile of an NF Instance discovered by the NRF (Original definition in TS29510_Nnrf_NFDiscovery.yaml#/components/schemas/NFService)
type NFService struct {
	AllowedOperationsPerNfInstance   *map[string][]string              `json:"allowedOperationsPerNfInstance,omitempty"`
	AllowedOperationsPerNfType       *map[string][]string              `json:"allowedOperationsPerNfType,omitempty"`
	ApiPrefix                        *string                           `json:"apiPrefix,omitempty"`
	Capacity                         *int                              `json:"capacity,omitempty"`
	DefaultNotificationSubscriptions []DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`

	// Fqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	Fqdn               *Fqdn            `json:"fqdn,omitempty"`
	IpEndPoints        []IpEndPoint     `json:"ipEndPoints,omitempty"`
	Load               *int             `json:"load,omitempty"`
	LoadTimeStamp      *DateTime        `json:"loadTimeStamp,omitempty"`
	NfServiceSetIdList []NfServiceSetId `json:"nfServiceSetIdList,omitempty"`

	// NfServiceStatus Status of a given NF Service Instance of an NF Instance stored in NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFServiceStatus)
	NfServiceStatus   NFServiceStatus `json:"nfServiceStatus"`
	Oauth2Required    *bool           `json:"oauth2Required,omitempty"`
	PerPlmnSnssaiList []PlmnSnssai    `json:"perPlmnSnssaiList,omitempty"`
	Priority          *int            `json:"priority,omitempty"`
	RecoveryTime      *DateTime       `json:"recoveryTime,omitempty"`
	SNssais           []ExtSnssai     `json:"sNssais,omitempty"`
	Scheme            UriScheme       `json:"scheme"`
	ServiceInstanceId string          `json:"serviceInstanceId"`

	// ServiceName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	ServiceName                     ServiceName                         `json:"serviceName"`
	SupportedFeatures               *SupportedFeatures                  `json:"supportedFeatures,omitempty"`
	SupportedVendorSpecificFeatures *map[string][]VendorSpecificFeature `json:"supportedVendorSpecificFeatures,omitempty"`

	// VendorId Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA) (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/VendorId)
	VendorId             VendorId               `json:"vendorId,omitempty"`
	Versions             []NFServiceVersion     `json:"versions"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NFServiceStatus Status of a given NF Service Instance of an NF Instance stored in NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFServiceStatus)
type NFServiceStatus string

// NFServiceVersion Contains the version details of an NF service (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFServiceVersion)
type NFServiceVersion struct {
	ApiFullVersion       string                 `json:"apiFullVersion"`
	ApiVersionInUri      string                 `json:"apiVersionInUri"`
	Expiry               *DateTime              `json:"expiry,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NFStatus Status of a given NF Instance stored in NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFStatus)
type NFStatus string

// NFType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
type NFType string

// NasCount defines model for NasCount.
type NasCount = Uinteger

// NasSecurityMode Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NasSecurityMode
type NasSecurityMode struct {
	// CipheringAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/CipheringAlgorithm
	CipheringAlgorithm CipheringAlgorithm `json:"cipheringAlgorithm"`

	// IntegrityAlgorithm Original definition in TS29518_Namf_Communication.yaml#/components/schemas/IntegrityAlgorithm
	IntegrityAlgorithm   IntegrityAlgorithm     `json:"integrityAlgorithm"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NbIoTUePriority Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/NbIoTUePriority
type NbIoTUePriority = int

// Ncgi defines model for Ncgi.
type Ncgi struct {
	Nid                  Nid                    `json:"nid,omitempty"`
	NrCellId             NrCellId               `json:"nrCellId"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NefCond Subscription to a set of NF Instances (NEFs), identified by Event ID(s) provided by AF, S-NSSAI(s), AF Instance ID, Application Identifier, External Identifier, External Group Identifier, or domain name. (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefCond)
type NefCond struct {
	AfEvents                       []string             `json:"afEvents,omitempty"`
	ConditionType                  NefCondConditionType `json:"conditionType"`
	ExternalGroupIdentifiersRanges []IdentityRange      `json:"externalGroupIdentifiersRanges,omitempty"`
	GpsiRanges                     []IdentityRange      `json:"gpsiRanges,omitempty"`

	// PfdData List of Application IDs and/or AF IDs managed by a given NEF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PfdData)
	PfdData              *NrfPfdData            `json:"pfdData,omitempty"`
	ServedFqdnList       []string               `json:"servedFqdnList,omitempty"`
	SnssaiList           []Snssai               `json:"snssaiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NefCondConditionType defines model for NefCond.ConditionType.
type NefCondConditionType string

// NefId Identity of the NEF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefId)
type NefId = string

// NefInfo Information of an NEF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefInfo)
type NefInfo struct {
	// AfEeData AF Event Exposure data managed by a given NEF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AfEventExposureData)
	AfEeData                       *AfEventExposureData `json:"afEeData,omitempty"`
	ExternalGroupIdentifiersRanges []IdentityRange      `json:"externalGroupIdentifiersRanges,omitempty"`
	GpsiRanges                     []IdentityRange      `json:"gpsiRanges,omitempty"`

	// NefId Identity of the NEF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefId)
	NefId *NefId `json:"nefId,omitempty"`

	// PfdData List of Application IDs and/or AF IDs managed by a given NEF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PfdData)
	PfdData              *NrfPfdData            `json:"pfdData,omitempty"`
	ServedFqdnList       []string               `json:"servedFqdnList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NetLocAccessSupport Possible values are - ANR_NOT_SUPPORTED: Indicates that the access network does not support the report of access network information. - TZR_NOT_SUPPORTED: Indicates that the access network does not support the report of UE time zone. - LOC_NOT_SUPPORTED: Indicates that the access network does not support the report of UE Location (or PLMN Id).
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/NetLocAccessSupport)
type NetLocAccessSupport string

// NetworkAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29503_Nudm_PP.yaml#/components/schemas/NetworkAreaInfo)
type NetworkAreaInfo struct {
	// Ecgis Contains a list of E-UTRA cell identities.
	Ecgis []Ecgi `json:"ecgis,omitempty"`

	// GRanNodeIds Contains a list of NG RAN nodes.
	GRanNodeIds []GlobalRanNodeId `json:"gRanNodeIds,omitempty"`

	// Ncgis Contains a list of NR cell identities.
	Ncgis []Ncgi `json:"ncgis,omitempty"`

	// Tais Contains a list of tracking area identities.
	Tais                 []Tai                  `json:"tais,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NetworkNodeDiameterAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/NetworkNodeDiameterAddress
type NetworkNodeDiameterAddress struct {
	Name                 DiameterIdentity       `json:"name"`
	Realm                DiameterIdentity       `json:"realm"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NetworkSliceCond Subscription to a set of NFs, based on the slices (S-NSSAI and NSI) they support (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NetworkSliceCond)
type NetworkSliceCond struct {
	NsiList              *[]string              `json:"nsiList,omitempty"`
	SnssaiList           []Snssai               `json:"snssaiList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfGroupCond Subscription to a set of NFs based on their Group Id (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NfGroupCond)
type NfGroupCond struct {
	NfGroupId            NfGroupId              `json:"nfGroupId"`
	NfType               NfGroupCondNfType      `json:"nfType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfGroupCondNfType defines model for NfGroupCond.NfType.
type NfGroupCondNfType string

// NfGroupId defines model for NfGroupId.
type NfGroupId = string

// NfGroupIdMapResult Original definition in TS29504_Nudr_GroupIDmap.yaml#/components/schemas/NfGroupIdMapResult
type NfGroupIdMapResult map[string]NfGroupId

// NfInfo Information of a generic NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NfInfo)
type NfInfo struct {
	// NfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	NfType               *NFType                `json:"nfType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfInstanceId defines model for NfInstanceId.
type NfInstanceId = openapi_types.UUID

// NfInstanceIdCond Subscription to a given NF Instance Id (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NfInstanceIdCond)
type NfInstanceIdCond struct {
	NfInstanceId         NfInstanceId           `json:"nfInstanceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfInstanceIdListCond Subscription to a list of NF Instances (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NfInstanceIdListCond)
type NfInstanceIdListCond struct {
	NfInstanceIdList     []NfInstanceId         `json:"nfInstanceIdList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfServiceSetCond Subscription to a set of NFs based on their Service Set Id (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NfServiceSetCond)
type NfServiceSetCond struct {
	NfServiceSetId       NfServiceSetId         `json:"nfServiceSetId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfServiceSetId defines model for NfServiceSetId.
type NfServiceSetId = string

// NfSetCond Subscription to a set of NFs based on their Set Id (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NfSetCond)
type NfSetCond struct {
	NfSetId              NfSetId                `json:"nfSetId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NfSetId defines model for NfSetId.
type NfSetId = string

// NfTypeCond Subscription to a set of NFs based on their NF Type (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NfTypeCond)
type NfTypeCond struct {
	// NfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	NfType               NFType                 `json:"nfType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NgApCause defines model for NgApCause.
type NgApCause struct {
	Group                Uinteger               `json:"group"`
	Value                Uinteger               `json:"value"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NgKsi Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgKsi
type NgKsi struct {
	Ksi int `json:"ksi"`

	// Tsc Original definition in TS29518_Namf_Communication.yaml#/components/schemas/ScType
	Tsc                  ScType                 `json:"tsc"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NgRanTargetId Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgRanTargetId
type NgRanTargetId struct {
	RanNodeId            GlobalRanNodeId        `json:"ranNodeId"`
	Tai                  Tai                    `json:"tai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NgapIeType Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgapIeType
type NgapIeType string

// NgeNbId defines model for NgeNbId.
type NgeNbId = string

// Nid defines model for Nid.
type Nid = string

// NiddAuthUpdateInfo Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/NiddAuthUpdateInfo
type NiddAuthUpdateInfo struct {
	// AuthorizationData Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/AuthorizationData
	AuthorizationData AuthorizationData `json:"authorizationData"`
	Dnn               *Dnn              `json:"dnn,omitempty"`
	InvalidityInd     *bool             `json:"invalidityInd,omitempty"`

	// NiddCause Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/NiddCause
	NiddCause            *NiddCause             `json:"niddCause,omitempty"`
	Snssai               *Snssai                `json:"snssai,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NiddAuthUpdateNotification Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/NiddAuthUpdateNotification
type NiddAuthUpdateNotification struct {
	NiddAuthUpdateInfoList []NiddAuthUpdateInfo   `json:"niddAuthUpdateInfoList"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// NiddCause Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/NiddCause
type NiddCause string

// NiddInformation Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/NiddInformation
type NiddInformation struct {
	AfId                 string                 `json:"afId"`
	ExtGroupId           ExternalGroupId        `json:"extGroupId,omitempty"`
	Gpsi                 Gpsi                   `json:"gpsi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NodeType Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/NodeType
type NodeType string

// NonDynamic5Qi defines model for NonDynamic5Qi.
type NonDynamic5Qi struct {
	AverWindow            AverWindow             `json:"averWindow,omitempty"`
	CnPacketDelayBudgetDl ExtPacketDelBudget     `json:"cnPacketDelayBudgetDl,omitempty"`
	CnPacketDelayBudgetUl ExtPacketDelBudget     `json:"cnPacketDelayBudgetUl,omitempty"`
	ExtMaxDataBurstVol    ExtMaxDataBurstVol     `json:"extMaxDataBurstVol,omitempty"`
	MaxDataBurstVol       MaxDataBurstVol        `json:"maxDataBurstVol,omitempty"`
	PriorityLevel         N5QiPriorityLevel      `json:"priorityLevel,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// NonUeN2InfoSubscriptionCreateData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NonUeN2InfoSubscriptionCreateData
type NonUeN2InfoSubscriptionCreateData struct {
	AnTypeList        []AccessType      `json:"anTypeList,omitempty"`
	GlobalRanNodeList []GlobalRanNodeId `json:"globalRanNodeList,omitempty"`

	// N2InformationClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationClass
	N2InformationClass   N2InformationClass     `json:"n2InformationClass"`
	N2NotifyCallbackUri  Uri                    `json:"n2NotifyCallbackUri"`
	NfId                 *NfInstanceId          `json:"nfId,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NonUeN2InfoSubscriptionCreatedData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NonUeN2InfoSubscriptionCreatedData
type NonUeN2InfoSubscriptionCreatedData struct {
	// N2InformationClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationClass
	N2InformationClass     *N2InformationClass    `json:"n2InformationClass,omitempty"`
	N2NotifySubscriptionId string                 `json:"n2NotifySubscriptionId"`
	SupportedFeatures      *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// NotifCondition Condition (list of attributes in the NF Profile) to determine whether a notification must be sent by NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NotifCondition)
type NotifCondition struct {
	MonitoredAttributes   []string               `json:"monitoredAttributes,omitempty"`
	UnmonitoredAttributes []string               `json:"unmonitoredAttributes,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// Notification Describes a BDT notification. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/Notification)
type Notification struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId BdtReferenceId `json:"bdtRefId"`

	// CandPolicies Contains a list of the candidate transfer policies from which the AF may select a new transfer policy due to a network performance is below the criteria set by the operator.
	CandPolicies []TransferPolicy `json:"candPolicies,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/NetworkAreaInfo)
	NwAreaInfo *PcfNetworkAreaInfo `json:"nwAreaInfo,omitempty"`

	// TimeWindow Original definition in TS29122_CommonData.yaml#/components/schemas/TimeWindow
	TimeWindow           *TimeWindow            `json:"timeWindow,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NotificationCause Possible values are - QOS_FULFILLED - QOS_NOT_FULFILLED - UP_SEC_FULFILLED - UP_SEC_NOT_FULFILLED
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/NotificationCause)
type NotificationCause string

// NotificationControl defines model for NotificationControl.
type NotificationControl string

// NotificationControlIndication Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/NotificationControlIndication
type NotificationControlIndication string

// NotificationData Data sent in notifications from NRF to subscribed NF Instances (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NotificationData)
type NotificationData struct {
	// ConditionEvent Indicates whether a notification is due to the NF Instance to start or stop being part of a condition for a subscription to a set of NFs (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ConditionEventType)
	ConditionEvent *ConditionEventType `json:"conditionEvent,omitempty"`

	// Event Types of events sent in notifications from NRF to subscribed NF Instances (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NotificationEventType)
	Event                NotificationEventType       `json:"event"`
	NfInstanceUri        Uri                         `json:"nfInstanceUri"`
	NfProfile            *NotificationData_NfProfile `json:"nfProfile,omitempty"`
	ProfileChanges       []ChangeItem                `json:"profileChanges,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// NotificationData_NfProfile defines model for NotificationData.NfProfile.
type NotificationData_NfProfile struct {
	AllowedNfDomains []string    `json:"allowedNfDomains,omitempty"`
	AllowedNfTypes   []NFType    `json:"allowedNfTypes,omitempty"`
	AllowedNssais    []ExtSnssai `json:"allowedNssais,omitempty"`
	AllowedPlmns     []PlmnId    `json:"allowedPlmns,omitempty"`
	AllowedSnpns     []PlmnIdNid `json:"allowedSnpns,omitempty"`

	// AmfInfo Information of an AMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AmfInfo)
	AmfInfo     *AmfInfo            `json:"amfInfo,omitempty"`
	AmfInfoList *map[string]AmfInfo `json:"amfInfoList,omitempty"`

	// AusfInfo Information of an AUSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/AusfInfo)
	AusfInfo     *AusfInfo            `json:"ausfInfo,omitempty"`
	AusfInfoList *map[string]AusfInfo `json:"ausfInfoList,omitempty"`

	// BsfInfo Information of a BSF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/BsfInfo)
	BsfInfo     *BsfInfo            `json:"bsfInfo,omitempty"`
	BsfInfoList *map[string]BsfInfo `json:"bsfInfoList,omitempty"`
	Capacity    *int                `json:"capacity,omitempty"`

	// ChfInfo Information of a CHF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ChfInfo)
	ChfInfo                          *ChfInfo                           `json:"chfInfo,omitempty"`
	ChfInfoList                      *map[string]ChfInfo                `json:"chfInfoList,omitempty"`
	CustomInfo                       *map[string]interface{}            `json:"customInfo,omitempty"`
	DefaultNotificationSubscriptions *[]DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`

	// Fqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	Fqdn *Fqdn `json:"fqdn,omitempty"`

	// GmlcInfo Information of a GMLC NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/GmlcInfo)
	GmlcInfo       *GmlcInfo           `json:"gmlcInfo,omitempty"`
	HeartBeatTimer *int                `json:"heartBeatTimer,omitempty"`
	HssInfoList    *map[string]HssInfo `json:"hssInfoList,omitempty"`

	// InterPlmnFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	InterPlmnFqdn *Fqdn      `json:"interPlmnFqdn,omitempty"`
	Ipv4Addresses []Ipv4Addr `json:"ipv4Addresses,omitempty"`
	Ipv6Addresses []Ipv6Addr `json:"ipv6Addresses,omitempty"`
	LcHSupportInd *bool      `json:"lcHSupportInd,omitempty"`

	// LmfInfo Information of an LMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/LmfInfo)
	LmfInfo       *LmfInfo  `json:"lmfInfo,omitempty"`
	Load          *int      `json:"load,omitempty"`
	LoadTimeStamp *DateTime `json:"loadTimeStamp,omitempty"`
	Locality      *string   `json:"locality,omitempty"`

	// NefInfo Information of an NEF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NefInfo)
	NefInfo                    *NefInfo                 `json:"nefInfo,omitempty"`
	NfInstanceId               NfInstanceId             `json:"nfInstanceId"`
	NfInstanceName             *string                  `json:"nfInstanceName,omitempty"`
	NfProfileChangesInd        *bool                    `json:"nfProfileChangesInd,omitempty"`
	NfProfileChangesSupportInd *bool                    `json:"nfProfileChangesSupportInd,omitempty"`
	NfServiceList              *map[string]NrfNFService `json:"nfServiceList,omitempty"`
	NfServicePersistence       *bool                    `json:"nfServicePersistence,omitempty"`
	NfServices                 *[]NrfNFService          `json:"nfServices,omitempty"`
	NfSetIdList                []NfSetId                `json:"nfSetIdList,omitempty"`
	NfSetRecoveryTimeList      *map[string]DateTime     `json:"nfSetRecoveryTimeList,omitempty"`

	// NfStatus Status of a given NF Instance stored in NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFStatus)
	NfStatus NFStatus `json:"nfStatus"`

	// NfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	NfType NFType `json:"nfType"`

	// NrfInfo Information of an NRF NF Instance, used in hierarchical NRF deployments (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NrfInfo)
	NrfInfo *NrfInfo `json:"nrfInfo,omitempty"`
	NsiList []string `json:"nsiList,omitempty"`

	// NwdafInfo Information of a NWDAF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NwdafInfo)
	NwdafInfo      *NwdafInfo `json:"nwdafInfo,omitempty"`
	OlcHSupportInd *bool      `json:"olcHSupportInd,omitempty"`

	// PcfInfo Information of a PCF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PcfInfo)
	PcfInfo           *PcfInfo              `json:"pcfInfo,omitempty"`
	PcfInfoList       *map[string]PcfInfo   `json:"pcfInfoList,omitempty"`
	PcscfInfoList     *map[string]PcscfInfo `json:"pcscfInfoList,omitempty"`
	PerPlmnSnssaiList []PlmnSnssai          `json:"perPlmnSnssaiList,omitempty"`
	PlmnList          []PlmnId              `json:"plmnList,omitempty"`
	Priority          *int                  `json:"priority,omitempty"`
	RecoveryTime      *DateTime             `json:"recoveryTime,omitempty"`
	SNssais           []ExtSnssai           `json:"sNssais,omitempty"`
	ScpDomains        []string              `json:"scpDomains,omitempty"`

	// ScpInfo Information of an SCP Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ScpInfo)
	ScpInfo                    *ScpInfo             `json:"scpInfo,omitempty"`
	ServiceSetRecoveryTimeList *map[string]DateTime `json:"serviceSetRecoveryTimeList,omitempty"`
	ServingScope               []string             `json:"servingScope,omitempty"`

	// SmfInfo Information of an SMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SmfInfo)
	SmfInfo     *SmfInfo            `json:"smfInfo,omitempty"`
	SmfInfoList *map[string]SmfInfo `json:"smfInfoList,omitempty"`
	SnpnList    []PlmnIdNid         `json:"snpnList,omitempty"`

	// UdmInfo Information of an UDM NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdmInfo)
	UdmInfo     *UdmInfo            `json:"udmInfo,omitempty"`
	UdmInfoList *map[string]UdmInfo `json:"udmInfoList,omitempty"`

	// UdrInfo Information of an UDR NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdrInfo)
	UdrInfo     *UdrInfo            `json:"udrInfo,omitempty"`
	UdrInfoList *map[string]UdrInfo `json:"udrInfoList,omitempty"`

	// UdsfInfo Information related to UDSF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdsfInfo)
	UdsfInfo     *UdsfInfo            `json:"udsfInfo,omitempty"`
	UdsfInfoList *map[string]UdsfInfo `json:"udsfInfoList,omitempty"`

	// UpfInfo Information of an UPF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UpfInfo)
	UpfInfo              *UpfInfo               `json:"upfInfo,omitempty"`
	UpfInfoList          *map[string]UpfInfo    `json:"upfInfoList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NotificationEventType Types of events sent in notifications from NRF to subscribed NF Instances (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NotificationEventType)
type NotificationEventType string

// NotificationItem Identifies a data change notification when the change occurs in a fragment (subset of resource data) of a given resource. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/NotificationItem)
type NotificationItem struct {
	NotifItems           []UpdatedItem          `json:"notifItems"`
	ResourceId           Uri                    `json:"resourceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NotificationMethod Possible values are - PERIODIC - ONE_TIME - ON_EVENT_DETECTION
//
//	(Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/NotificationMethod)
type NotificationMethod string

// NotificationType Types of notifications used in Default Notification URIs in the NF Profile of an NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NotificationType)
type NotificationType string

// NotifiedPosInfo Original definition in TS29518_Namf_Location.yaml#/components/schemas/NotifiedPosInfo
type NotifiedPosInfo struct {
	// AgeOfLocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AgeOfLocationEstimate
	AgeOfLocationEstimate interface{} `json:"ageOfLocationEstimate,omitempty"`

	// Altitude Original reference TS29572_Nlmf_Location.yaml#/components/schemas/Altitude
	Altitude interface{} `json:"altitude,omitempty"`

	// BarometricPressure Original reference TS29572_Nlmf_Location.yaml#/components/schemas/BarometricPressure
	BarometricPressure interface{} `json:"barometricPressure,omitempty"`

	// CivicAddress Original reference TS29572_Nlmf_Location.yaml#/components/schemas/CivicAddress
	CivicAddress            interface{}    `json:"civicAddress,omitempty"`
	Ecgi                    *Ecgi          `json:"ecgi,omitempty"`
	GnssPositioningDataList *[]interface{} `json:"gnssPositioningDataList,omitempty"`
	Gpsi                    Gpsi           `json:"gpsi,omitempty"`
	HgmlcCallBackURI        *Uri           `json:"hgmlcCallBackURI,omitempty"`

	// LdrReference Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrReference
	LdrReference *string `json:"ldrReference,omitempty"`

	// LocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/GeographicArea
	LocationEstimate interface{} `json:"locationEstimate,omitempty"`

	// LocationEvent Original definition in TS29518_Namf_Location.yaml#/components/schemas/LocationEvent
	LocationEvent LocationEvent `json:"locationEvent"`

	// MscServerId Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/E164Number
	MscServerId         E164Number     `json:"mscServerId,omitempty"`
	Ncgi                *Ncgi          `json:"ncgi,omitempty"`
	Pei                 Pei            `json:"pei,omitempty"`
	PositioningDataList *[]interface{} `json:"positioningDataList,omitempty"`

	// ServingLMFIdentification Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	ServingLMFIdentification *string          `json:"servingLMFIdentification,omitempty"`
	ServingNode              *NfInstanceId    `json:"servingNode,omitempty"`
	Supi                     Supi             `json:"supi,omitempty"`
	TargetMmeName            DiameterIdentity `json:"targetMmeName,omitempty"`
	TargetMmeRealm           DiameterIdentity `json:"targetMmeRealm,omitempty"`

	// TerminationCause Original reference TS29572_Nlmf_Location.yaml#/components/schemas/TerminationCause
	TerminationCause *string `json:"terminationCause,omitempty"`
	UtranSrvccInd    *bool   `json:"utranSrvccInd,omitempty"`

	// VelocityEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/VelocityEstimate
	VelocityEstimate     interface{}            `json:"velocityEstimate,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NotifyItem defines model for NotifyItem.
type NotifyItem struct {
	Changes              []ChangeItem           `json:"changes"`
	ResourceId           Uri                    `json:"resourceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NpnAccessInfo NPN Access Information. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NpnAccessInfo)
type NpnAccessInfo struct {
	CellCagInfo          []CagId                `json:"cellCagInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NrCellId defines model for NrCellId.
type NrCellId = string

// NrLocation defines model for NrLocation.
type NrLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	GlobalGnbId              *GlobalRanNodeId       `json:"globalGnbId,omitempty"`
	IgnoreNcgi               *bool                  `json:"ignoreNcgi,omitempty"`
	Ncgi                     Ncgi                   `json:"ncgi"`
	Tai                      Tai                    `json:"tai"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// NrV2xAuth defines model for NrV2xAuth.
type NrV2xAuth struct {
	PedestrianUeAuth     *UeAuth                `json:"pedestrianUeAuth,omitempty"`
	VehicleUeAuth        *UeAuth                `json:"vehicleUeAuth,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NrfInfo Information of an NRF NF Instance, used in hierarchical NRF deployments (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NrfInfo)
type NrfInfo struct {
	ServedAmfInfo        *map[string]AmfInfo              `json:"servedAmfInfo,omitempty"`
	ServedAmfInfoList    *map[string]map[string]AmfInfo   `json:"servedAmfInfoList,omitempty"`
	ServedAusfInfo       *map[string]AusfInfo             `json:"servedAusfInfo,omitempty"`
	ServedAusfInfoList   *map[string]map[string]AusfInfo  `json:"servedAusfInfoList,omitempty"`
	ServedBsfInfo        *map[string]BsfInfo              `json:"servedBsfInfo,omitempty"`
	ServedBsfInfoList    *map[string]map[string]BsfInfo   `json:"servedBsfInfoList,omitempty"`
	ServedChfInfo        *map[string]ChfInfo              `json:"servedChfInfo,omitempty"`
	ServedChfInfoList    *map[string]map[string]ChfInfo   `json:"servedChfInfoList,omitempty"`
	ServedGmlcInfo       *map[string]GmlcInfo             `json:"servedGmlcInfo,omitempty"`
	ServedHssInfoList    *map[string]map[string]HssInfo   `json:"servedHssInfoList,omitempty"`
	ServedLmfInfo        *map[string]LmfInfo              `json:"servedLmfInfo,omitempty"`
	ServedNefInfo        *map[string]NefInfo              `json:"servedNefInfo,omitempty"`
	ServedNfInfo         *map[string]NfInfo               `json:"servedNfInfo,omitempty"`
	ServedNwdafInfo      *map[string]NwdafInfo            `json:"servedNwdafInfo,omitempty"`
	ServedPcfInfo        *map[string]PcfInfo              `json:"servedPcfInfo,omitempty"`
	ServedPcfInfoList    *map[string]map[string]PcfInfo   `json:"servedPcfInfoList,omitempty"`
	ServedPcscfInfoList  *map[string]map[string]PcscfInfo `json:"servedPcscfInfoList,omitempty"`
	ServedScpInfoList    *map[string]ScpInfo              `json:"servedScpInfoList,omitempty"`
	ServedSmfInfo        *map[string]SmfInfo              `json:"servedSmfInfo,omitempty"`
	ServedSmfInfoList    *map[string]map[string]SmfInfo   `json:"servedSmfInfoList,omitempty"`
	ServedUdmInfo        *map[string]UdmInfo              `json:"servedUdmInfo,omitempty"`
	ServedUdmInfoList    *map[string]map[string]UdmInfo   `json:"servedUdmInfoList,omitempty"`
	ServedUdrInfo        *map[string]UdrInfo              `json:"servedUdrInfo,omitempty"`
	ServedUdrInfoList    *map[string]map[string]UdrInfo   `json:"servedUdrInfoList,omitempty"`
	ServedUdsfInfo       *map[string]UdsfInfo             `json:"servedUdsfInfo,omitempty"`
	ServedUdsfInfoList   *map[string]map[string]UdsfInfo  `json:"servedUdsfInfoList,omitempty"`
	ServedUpfInfo        *map[string]UpfInfo              `json:"servedUpfInfo,omitempty"`
	ServedUpfInfoList    *map[string]map[string]UpfInfo   `json:"servedUpfInfoList,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// NrppaInformation Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NrppaInformation
type NrppaInformation struct {
	NfId NfInstanceId `json:"nfId"`

	// NrppaPdu Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	NrppaPdu             N2InfoContent          `json:"nrppaPdu"`
	ServiceInstanceId    *string                `json:"serviceInstanceId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NsiId Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/NsiId
type NsiId = string

// NsiInformation Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/NsiInformation
type NsiInformation struct {
	NrfAccessTokenUri *Uri `json:"nrfAccessTokenUri,omitempty"`
	NrfId             Uri  `json:"nrfId"`
	NrfNfMgtUri       *Uri `json:"nrfNfMgtUri,omitempty"`

	// NsiId Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/NsiId
	NsiId                *NsiId                 `json:"nsiId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NsmfEventExposure Represents an Individual SMF Notification Subscription resource. The serviveName property corresponds to the serviceName in the main body of the specification. (Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/NsmfEventExposure)
type NsmfEventExposure struct {
	ImmeRep *bool `json:"ImmeRep,omitempty"`

	// AltNotifFqdns Alternate or backup FQDN(s) where to send Notifications.
	AltNotifFqdns []Fqdn `json:"altNotifFqdns,omitempty"`

	// AltNotifIpv4Addrs Alternate or backup IPv4 address(es) where to send Notifications.
	AltNotifIpv4Addrs []Ipv4Addr `json:"altNotifIpv4Addrs,omitempty"`

	// AltNotifIpv6Addrs Alternate or backup IPv6 address(es) where to send Notifications.
	AltNotifIpv6Addrs []Ipv6Addr `json:"altNotifIpv6Addrs,omitempty"`

	// AnyUeInd Any UE indication. This IE shall be present if the event subscription is applicable to any UE. Default value "false" is used, if not present.
	AnyUeInd *bool `json:"anyUeInd,omitempty"`
	Dnn      *Dnn  `json:"dnn,omitempty"`

	// EventSubs Subscribed events
	EventSubs    []EventSubscription `json:"eventSubs"`
	Expiry       *DateTime           `json:"expiry,omitempty"`
	Gpsi         Gpsi                `json:"gpsi,omitempty"`
	GroupId      GroupId             `json:"groupId,omitempty"`
	GrpRepTime   *DurationSec        `json:"grpRepTime,omitempty"`
	Guami        *Guami              `json:"guami,omitempty"`
	MaxReportNbr *Uinteger           `json:"maxReportNbr,omitempty"`

	// NotifId Notification Correlation ID assigned by the NF service consumer.
	NotifId string `json:"notifId"`

	// NotifMethod Possible values are - PERIODIC - ONE_TIME - ON_EVENT_DETECTION
	//  (Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/NotificationMethod)
	NotifMethod *NotificationMethod `json:"notifMethod,omitempty"`
	NotifUri    Uri                 `json:"notifUri"`
	PduSeId     *PduSessionId       `json:"pduSeId,omitempty"`
	RepPeriod   *DurationSec        `json:"repPeriod,omitempty"`
	SampRatio   SamplingRatio       `json:"sampRatio,omitempty"`

	// ServiveName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	ServiveName *ServiceName `json:"serviveName,omitempty"`
	Snssai      *Snssai      `json:"snssai,omitempty"`

	// SubId Identifies an Individual SMF Notification Subscription. To enable that the value is used as part of a URI, the string shall only contain characters allowed according to the "lower-with-hyphen" naming convention defined in 3GPP TS 29.501. In an OpenAPI schema, the format shall be designated as "SubId". (Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/SubId)
	SubId                *SubId                 `json:"subId,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NsmfEventExposureNotification Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/NsmfEventExposureNotification
type NsmfEventExposureNotification struct {
	AckUri *Uri `json:"ackUri,omitempty"`

	// EventNotifs Notifications about Individual Events
	EventNotifs []EventNotification `json:"eventNotifs"`

	// NotifId Notification correlation ID
	NotifId              string                 `json:"notifId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NssaaStatus defines model for NssaaStatus.
type NssaaStatus struct {
	Snssai Snssai `json:"snssai"`

	// Status Possible values are - "EAP_SUCCESS": The NSSAA status is EAP-Success. - "EAP_FAILURE": The NSSAA status is EAP-Failure. - "PENDING": The NSSAA status is Pending.
	Status               AuthStatus             `json:"status"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Nssai Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/Nssai
type Nssai struct {
	AdditionalSnssaiData *map[string]AdditionalSnssaiData `json:"additionalSnssaiData,omitempty"`
	DefaultSingleNssais  []Snssai                         `json:"defaultSingleNssais"`
	ProvisioningTime     *DateTime                        `json:"provisioningTime,omitempty"`
	SingleNssais         []Snssai                         `json:"singleNssais,omitempty"`
	SupportedFeatures    *SupportedFeatures               `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// NssaiAckData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/NssaiAckData
type NssaiAckData struct {
	ProvisioningTime DateTime `json:"provisioningTime"`

	// UeUpdateStatus Original definition in TS29505_Subscription_Data.yaml#/components/schemas/UeUpdateStatus
	UeUpdateStatus       UeUpdateStatus         `json:"ueUpdateStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NssaiAvailabilityInfo Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/NssaiAvailabilityInfo
type NssaiAvailabilityInfo struct {
	AmfSetId                       string                           `json:"amfSetId,omitempty"`
	SupportedFeatures              *SupportedFeatures               `json:"supportedFeatures,omitempty"`
	SupportedNssaiAvailabilityData []SupportedNssaiAvailabilityData `json:"supportedNssaiAvailabilityData"`
	AdditionalProperties           map[string]interface{}           `json:"-"`
}

// NssaiMapping Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NssaiMapping
type NssaiMapping struct {
	HSnssai              Snssai                 `json:"hSnssai"`
	MappedSnssai         Snssai                 `json:"mappedSnssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NssfEventNotification Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/NssfEventNotification
type NssfEventNotification struct {
	AuthorizedNssaiAvailabilityData []AuthorizedNssaiAvailabilityData `json:"authorizedNssaiAvailabilityData"`
	SubscriptionId                  string                            `json:"subscriptionId"`
	AdditionalProperties            map[string]interface{}            `json:"-"`
}

// NssfEventSubscriptionCreateData Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/NssfEventSubscriptionCreateData
type NssfEventSubscriptionCreateData struct {
	AmfSetId string `json:"amfSetId,omitempty"`

	// Event Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/NssfEventType
	Event                  NssfEventType          `json:"event"`
	Expiry                 *DateTime              `json:"expiry,omitempty"`
	NfNssaiAvailabilityUri Uri                    `json:"nfNssaiAvailabilityUri"`
	SupportedFeatures      *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	TaiList                []Tai                  `json:"taiList"`
	TaiRangeList           []TaiRange             `json:"taiRangeList,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// NssfEventSubscriptionCreatedData Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/NssfEventSubscriptionCreatedData
type NssfEventSubscriptionCreatedData struct {
	AuthorizedNssaiAvailabilityData []AuthorizedNssaiAvailabilityData `json:"authorizedNssaiAvailabilityData,omitempty"`
	Expiry                          *DateTime                         `json:"expiry,omitempty"`
	SubscriptionId                  string                            `json:"subscriptionId"`
	SupportedFeatures               *SupportedFeatures                `json:"supportedFeatures,omitempty"`
	AdditionalProperties            map[string]interface{}            `json:"-"`
}

// NssfEventType Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/NssfEventType
type NssfEventType string

// NullValue defines model for NullValue.
type NullValue = interface{}

// NumOfRequestedVectors Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/NumOfRequestedVectors
type NumOfRequestedVectors = int

// NwdafCond Subscription to a set of NF Instances (NWDAFs), identified by Analytics ID(s), S-NSSAI(s) or NWDAF Serving Area information, i.e. list of TAIs for which the NWDAF can provide analytics. (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NwdafCond)
type NwdafCond struct {
	AnalyticsIds         []string               `json:"analyticsIds,omitempty"`
	ConditionType        NwdafCondConditionType `json:"conditionType"`
	SnssaiList           []Snssai               `json:"snssaiList,omitempty"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	TaiRangeList         []TaiRange             `json:"taiRangeList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NwdafCondConditionType defines model for NwdafCond.ConditionType.
type NwdafCondConditionType string

// NwdafInfo Information of a NWDAF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NwdafInfo)
type NwdafInfo struct {
	EventIds             []string               `json:"eventIds,omitempty"`
	NwdafEvents          []string               `json:"nwdafEvents,omitempty"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	TaiRangeList         []TaiRange             `json:"taiRangeList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// OdbData defines model for OdbData.
type OdbData struct {
	RoamingOdb           *RoamingOdb            `json:"roamingOdb,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// OdbPacketServices defines model for OdbPacketServices.
type OdbPacketServices string

// OmcIdentifier Original definition in TS29518_Namf_Communication.yaml#/components/schemas/OmcIdentifier
type OmcIdentifier = string

// OperationMode Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/OperationMode
type OperationMode string

// OperatorSpecificDataContainer Original definition in TS29505_Subscription_Data.yaml#/components/schemas/OperatorSpecificDataContainer
type OperatorSpecificDataContainer struct {
	DataType             OperatorSpecificDataContainerDataType `json:"dataType"`
	DataTypeDefinition   *string                               `json:"dataTypeDefinition,omitempty"`
	SupportedFeatures    *SupportedFeatures                    `json:"supportedFeatures,omitempty"`
	Value                OperatorSpecificDataContainer_Value   `json:"value"`
	AdditionalProperties map[string]interface{}                `json:"-"`
}

// OperatorSpecificDataContainerDataType defines model for OperatorSpecificDataContainer.DataType.
type OperatorSpecificDataContainerDataType string

// OperatorSpecificDataContainerValue0 defines model for .
type OperatorSpecificDataContainerValue0 = string

// OperatorSpecificDataContainerValue1 defines model for .
type OperatorSpecificDataContainerValue1 = int

// OperatorSpecificDataContainerValue2 defines model for .
type OperatorSpecificDataContainerValue2 = float32

// OperatorSpecificDataContainerValue3 defines model for .
type OperatorSpecificDataContainerValue3 = bool

// OperatorSpecificDataContainerValue4 defines model for .
type OperatorSpecificDataContainerValue4 = map[string]interface{}

// OperatorSpecificDataContainer_Value defines model for OperatorSpecificDataContainer.Value.
type OperatorSpecificDataContainer_Value struct {
	union json.RawMessage
}

// OptionsResponse Communication options of the NRF sent in response payload of OPTIONS method (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/OptionsResponse)
type OptionsResponse struct {
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// OsId Original definition in TS29519_Policy_Data.yaml#/components/schemas/OsId
type OsId = openapi_types.UUID

// OutOfCreditInformation Indicates the SDFs without available credit and the corresponding termination action. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/OutOfCreditInformation)
type OutOfCreditInformation struct {
	// FinUnitAct Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/FinalUnitAction
	FinUnitAct           string                 `json:"finUnitAct"`
	Flows                []Flows                `json:"flows,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PWSErrorData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PWSErrorData
type PWSErrorData struct {
	NamfCause            int                    `json:"namfCause"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PWSResponseData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PWSResponseData
type PWSResponseData struct {
	MessageIdentifier    int                    `json:"messageIdentifier"`
	NgapMessageType      Uinteger               `json:"ngapMessageType"`
	SerialNumber         Uint16                 `json:"serialNumber"`
	UnknownTaiList       []Tai                  `json:"unknownTaiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PacketDelBudget defines model for PacketDelBudget.
type PacketDelBudget = int

// PacketDelBudgetRm defines model for PacketDelBudgetRm.
type PacketDelBudgetRm = int

// PacketErrRate defines model for PacketErrRate.
type PacketErrRate = string

// PacketFilterContent Defines a packet filter for an IP flow. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PacketFilterContent)
type PacketFilterContent = string

// PacketFilterInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PacketFilterInfo
type PacketFilterInfo struct {
	// FlowDirection Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDirection)
	FlowDirection *FlowDirection `json:"flowDirection,omitempty"`

	// FlowLabel The Ipv6 flow label header field.
	FlowLabel *string `json:"flowLabel,omitempty"`

	// PackFiltCont Defines a packet filter for an IP flow. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PacketFilterContent)
	PackFiltCont *PacketFilterContent `json:"packFiltCont,omitempty"`

	// PackFiltId An identifier of packet filter.
	PackFiltId *string `json:"packFiltId,omitempty"`

	// Spi The security parameter index of the IPSec packet.
	Spi *string `json:"spi,omitempty"`

	// TosTrafficClass Contains the Ipv4 Type-of-Service and mask field or the Ipv6 Traffic-Class field and mask field.
	TosTrafficClass      *string                `json:"tosTrafficClass,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PacketLossRate defines model for PacketLossRate.
type PacketLossRate = int

// PacketLossRateRm defines model for PacketLossRateRm.
type PacketLossRateRm = int

// ParameterCombination Original definition in TS29521_Nbsf_Management.yaml#/components/schemas/ParameterCombination
type ParameterCombination struct {
	Dnn                  *Dnn                   `json:"dnn,omitempty"`
	Snssai               *Snssai                `json:"snssai,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PartialSuccessReport Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PartialSuccessReport
type PartialSuccessReport struct {
	// FailureCause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FailureCause
	FailureCause FailureCause `json:"failureCause"`

	// PolicyDecFailureReports Contains the type(s) of failed policy decision and/or condition data.
	PolicyDecFailureReports []PolicyDecisionFailureCode `json:"policyDecFailureReports,omitempty"`

	// RuleReports Information about the PCC rules provisioned by the PCF not successfully installed/activated.
	RuleReports []RuleReport `json:"ruleReports,omitempty"`

	// SessRuleReports Information about the session rules provisioned by the PCF not successfully installed.
	SessRuleReports []SessionRuleReport `json:"sessRuleReports,omitempty"`

	// UeCampingRep Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UeCampingRep
	UeCampingRep         *UeCampingRep          `json:"ueCampingRep,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PatchBdtPolicy Describes the updates in authorization data of an Individual BDT Policy created by the PCF. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/PatchBdtPolicy)
type PatchBdtPolicy struct {
	// BdtPolData A JSON Merge Patch body schema containing modification instruction to be performed on the bdtPolData attribute of the BdtPolicy data structure to select a transfer policy. Adds selTransPolicyId to BdtPolicyData data structure. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtPolicyDataPatch)
	BdtPolData *PcfBdtPolicyDataPatch `json:"bdtPolData,omitempty"`

	// BdtReqData A JSON Merge Patch body schema containing modification instruction to be performed on the bdtReqData attribute of the BdtPolicy data structure to indicate whether the BDT warning notification is enabled or disabled. Modifies warnNotifReq from BdtReqData data structure. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtReqDataPatch)
	BdtReqData           *BdtReqDataPatch       `json:"bdtReqData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PatchDocument Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/PatchDocument
type PatchDocument = []PatchItem

// PatchItem defines model for PatchItem.
type PatchItem struct {
	From                 *string                `json:"from,omitempty"`
	Op                   PatchOperation         `json:"op"`
	Path                 string                 `json:"path"`
	Value                *interface{}           `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PatchOperation defines model for PatchOperation.
type PatchOperation string

// PatchResult defines model for PatchResult.
type PatchResult struct {
	Report               []ReportItem           `json:"report"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Pc5Capability Possible values are - LTE_PC5: This value is used to indicate that UE supports PC5 LTE RAT for V2X communication over PC5 reference point. - NR_PC5: This value is used to indicate that UE supports PC5 NR RAT for V2X communication over PC5 reference point. - LTE_NR_PC5: This value is used to indicate that UE supports both PC5 LTE and NR RAT for V2X communication over PC5 reference point..
//
//	(Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/Pc5Capability)
type Pc5Capability string

// Pc5FlowBitRates defines model for Pc5FlowBitRates.
type Pc5FlowBitRates struct {
	GuaFbr               BitRate                `json:"guaFbr,omitempty"`
	MaxFbr               BitRate                `json:"maxFbr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Pc5QoSPara defines model for Pc5QoSPara.
type Pc5QoSPara struct {
	Pc5LinkAmbr          BitRate                `json:"pc5LinkAmbr,omitempty"`
	Pc5QosFlowList       []Pc5QosFlowItem       `json:"pc5QosFlowList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Pc5QosFlowItem defines model for Pc5QosFlowItem.
type Pc5QosFlowItem struct {
	Pc5FlowBitRates      *Pc5FlowBitRates       `json:"pc5FlowBitRates,omitempty"`
	Pqi                  N5Qi                   `json:"pqi"`
	Range                *Uinteger              `json:"range,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcEvent Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/PcEvent
type PcEvent string

// PcEventExposureNotif Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/PcEventExposureNotif
type PcEventExposureNotif struct {
	EventNotifs          []PcEventNotification  `json:"eventNotifs"`
	NotifId              string                 `json:"notifId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcEventExposureSubsc Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/PcEventExposureSubsc
type PcEventExposureSubsc struct {
	EventSubs []PcEvent `json:"eventSubs"`

	// EventsRepInfo Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/ReportingInformation
	EventsRepInfo        *ReportingInformation   `json:"eventsRepInfo,omitempty"`
	FilterDnns           []Dnn                   `json:"filterDnns,omitempty"`
	FilterServices       []ServiceIdentification `json:"filterServices,omitempty"`
	FilterSnssais        []Snssai                `json:"filterSnssais,omitempty"`
	GroupId              GroupId                 `json:"groupId,omitempty"`
	NotifId              string                  `json:"notifId"`
	NotifUri             Uri                     `json:"notifUri"`
	SuppFeat             *SupportedFeatures      `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// PcEventNotification Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/PcEventNotification
type PcEventNotification struct {
	AccType AccessType `json:"accType,omitempty"`

	// AddAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	AddAccessInfo *AdditionalAccessInfo `json:"addAccessInfo,omitempty"`

	// AnGwAddr describes the address of the access network gateway control node (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AnGwAddress)
	AnGwAddr *AnGwAddress `json:"anGwAddr,omitempty"`

	// Event Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/PcEvent
	Event PcEvent `json:"event"`
	Gpsi  Gpsi    `json:"gpsi,omitempty"`

	// PduSessionInfo Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/PduSessionInformation
	PduSessionInfo *PduSessionInformation `json:"pduSessionInfo,omitempty"`
	PlmnId         *PlmnIdNid             `json:"plmnId,omitempty"`
	RatType        *RatType               `json:"ratType,omitempty"`

	// RelAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	RelAccessInfo *AdditionalAccessInfo `json:"relAccessInfo,omitempty"`

	// RepServices Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/ServiceIdentification
	RepServices          *ServiceIdentification `json:"repServices,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	TimeStamp            DateTime               `json:"timeStamp"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PccRule Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PccRule
type PccRule struct {
	AddrPreserInd *bool `json:"addrPreserInd"`

	// AfSigProtocol Possible values are - NO_INFORMATION: Indicate that no information about the AF signalling protocol is being provided.  - SIP: Indicate that the signalling protocol is Session Initiation Protocol.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AfSigProtocol)
	AfSigProtocol *AfSigProtocol         `json:"afSigProtocol,omitempty"`
	AppDescriptor *ApplicationDescriptor `json:"appDescriptor,omitempty"`

	// AppId A reference to the application detection filter configured at the UPF.
	AppId *string `json:"appId,omitempty"`

	// AppReloc Indication of application relocation possibility.
	AppReloc *bool `json:"appReloc,omitempty"`

	// ContVer Represents the content version of some content. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ContentVersion)
	ContVer *ContentVersion `json:"contVer,omitempty"`

	// DdNotifCtrl Contains the downlink data notification control information. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/DownlinkDataNotificationControl)
	DdNotifCtrl *DownlinkDataNotificationControl `json:"ddNotifCtrl,omitempty"`

	// DdNotifCtrl2 this data type is defined in the same way as the DownlinkDataNotificationControl data type, but with the OpenAPI nullable property set to true. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/DownlinkDataNotificationControlRm)
	DdNotifCtrl2 *DownlinkDataNotificationControlRm `json:"ddNotifCtrl2"`
	DisUeNotif   *bool                              `json:"disUeNotif"`

	// FlowInfos An array of IP flow packet filter information.
	FlowInfos []FlowInformation `json:"flowInfos,omitempty"`

	// PccRuleId Univocally identifies the PCC rule within a PDU session.
	PccRuleId  string    `json:"pccRuleId"`
	Precedence *Uinteger `json:"precedence,omitempty"`

	// RefAltQosParams A Reference to the QosData policy decision type for the Alternative QoS parameter sets of the service data flow.
	RefAltQosParams []string `json:"refAltQosParams,omitempty"`

	// RefChgData A reference to the ChargingData policy decision type. It is the chgId described in subclause 5.6.2.11.
	RefChgData *[]string `json:"refChgData"`

	// RefChgN3gData A reference to the ChargingData policy decision type only applicable to Non-3GPP access if "ATSSS" feature is supported. It is the chgId described in subclause 5.6.2.11.
	RefChgN3gData *[]string `json:"refChgN3gData"`

	// RefCondData A reference to the condition data. It is the condId described in subclause 5.6.2.9.
	RefCondData *string `json:"refCondData"`

	// RefQosData A reference to the QosData policy decision type. It is the qosId described in subclause 5.6.2.8.
	RefQosData []string `json:"refQosData,omitempty"`

	// RefQosMon A reference to the QosMonitoringData policy decision type. It is the qmId described in subclause 5.6.2.40.
	RefQosMon *[]string `json:"refQosMon"`

	// RefTcData A reference to the TrafficControlData policy decision type. It is the tcId described in subclause 5.6.2.10.
	RefTcData []string `json:"refTcData,omitempty"`

	// RefUmData A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12.
	RefUmData *[]string `json:"refUmData"`

	// RefUmN3gData A reference to UsageMonitoringData policy decision type only applicable to Non-3GPP access if "ATSSS" feature is supported. It is the umId described in subclause 5.6.2.12.
	RefUmN3gData *[]string `json:"refUmN3gData"`

	// TscaiInputDl Indicates TSC Traffic pattern. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscaiInputContainer)
	TscaiInputDl *TscaiInputContainer `json:"tscaiInputDl"`

	// TscaiInputUl Indicates TSC Traffic pattern. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscaiInputContainer)
	TscaiInputUl         *TscaiInputContainer   `json:"tscaiInputUl"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcfBinding Original definition in TS29521_Nbsf_Management.yaml#/components/schemas/PcfBinding
type PcfBinding struct {
	// AddIpv6Prefixes The additional IPv6 Address Prefixes of the served UE.
	AddIpv6Prefixes []Ipv6Prefix `json:"addIpv6Prefixes,omitempty"`

	// AddMacAddrs The additional MAC Addresses of the served UE.
	AddMacAddrs []MacAddr48 `json:"addMacAddrs,omitempty"`

	// BindLevel Possible values are - "NF_SET" - "NF_INSTANCE"
	//  (Original definition in TS29521_Nbsf_Management.yaml#/components/schemas/BindingLevel)
	BindLevel          *BindingLevel  `json:"bindLevel,omitempty"`
	Dnn                Dnn            `json:"dnn"`
	Gpsi               Gpsi           `json:"gpsi,omitempty"`
	IpDomain           *string        `json:"ipDomain,omitempty"`
	Ipv4Addr           Ipv4Addr       `json:"ipv4Addr,omitempty"`
	Ipv4FrameRouteList []Ipv4AddrMask `json:"ipv4FrameRouteList,omitempty"`
	Ipv6FrameRouteList []Ipv6Prefix   `json:"ipv6FrameRouteList,omitempty"`
	Ipv6Prefix         *Ipv6Prefix    `json:"ipv6Prefix,omitempty"`
	MacAddr48          MacAddr48      `json:"macAddr48,omitempty"`

	// ParaCom Original definition in TS29521_Nbsf_Management.yaml#/components/schemas/ParameterCombination
	ParaCom      *ParameterCombination `json:"paraCom,omitempty"`
	PcfDiamHost  DiameterIdentity      `json:"pcfDiamHost,omitempty"`
	PcfDiamRealm DiameterIdentity      `json:"pcfDiamRealm,omitempty"`

	// PcfFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	PcfFqdn *Fqdn         `json:"pcfFqdn,omitempty"`
	PcfId   *NfInstanceId `json:"pcfId,omitempty"`

	// PcfIpEndPoints IP end points of the PCF hosting the Npcf_PolicyAuthorization service.
	PcfIpEndPoints []IpEndPoint `json:"pcfIpEndPoints,omitempty"`
	PcfSetId       *NfSetId     `json:"pcfSetId,omitempty"`

	// PcfSmFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	PcfSmFqdn *Fqdn `json:"pcfSmFqdn,omitempty"`

	// PcfSmIpEndPoints IP end points of the PCF hosting the Npcf_SMPolicyControl service.
	PcfSmIpEndPoints     []IpEndPoint           `json:"pcfSmIpEndPoints,omitempty"`
	RecoveryTime         *DateTime              `json:"recoveryTime,omitempty"`
	Snssai               Snssai                 `json:"snssai"`
	Supi                 Supi                   `json:"supi,omitempty"`
	SuppFeat             *SupportedFeatures     `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcfBindingPatch Original definition in TS29521_Nbsf_Management.yaml#/components/schemas/PcfBindingPatch
type PcfBindingPatch struct {
	// AddIpv6Prefixes The additional IPv6 Address Prefixes of the served UE.
	AddIpv6Prefixes *[]Ipv6Prefix `json:"addIpv6Prefixes"`

	// AddMacAddrs The additional MAC Addresses of the served UE.
	AddMacAddrs  *[]MacAddr48     `json:"addMacAddrs"`
	IpDomain     *string          `json:"ipDomain"`
	Ipv4Addr     *Ipv4AddrRm      `json:"ipv4Addr"`
	Ipv6Prefix   *Ipv6PrefixRm    `json:"ipv6Prefix"`
	MacAddr48    *MacAddr48Rm     `json:"macAddr48"`
	PcfDiamHost  DiameterIdentity `json:"pcfDiamHost,omitempty"`
	PcfDiamRealm DiameterIdentity `json:"pcfDiamRealm,omitempty"`

	// PcfFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	PcfFqdn *Fqdn         `json:"pcfFqdn,omitempty"`
	PcfId   *NfInstanceId `json:"pcfId,omitempty"`

	// PcfIpEndPoints IP end points of the PCF hosting the Npcf_PolicyAuthorization service.
	PcfIpEndPoints       []IpEndPoint           `json:"pcfIpEndPoints,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcfInfo Information of a PCF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PcfInfo)
type PcfInfo struct {
	DnnList              []Dnn                  `json:"dnnList,omitempty"`
	GpsiRanges           []IdentityRange        `json:"gpsiRanges,omitempty"`
	GroupId              *NfGroupId             `json:"groupId,omitempty"`
	RxDiamHost           DiameterIdentity       `json:"rxDiamHost,omitempty"`
	RxDiamRealm          DiameterIdentity       `json:"rxDiamRealm,omitempty"`
	SupiRanges           []SupiRange            `json:"supiRanges,omitempty"`
	V2xSupportInd        *bool                  `json:"v2xSupportInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcscfInfo Information of a P-CSCF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PcscfInfo)
type PcscfInfo struct {
	AccessType []AccessType `json:"accessType,omitempty"`
	DnnList    []Dnn        `json:"dnnList,omitempty"`

	// GmFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	GmFqdn                  *Fqdn                  `json:"gmFqdn,omitempty"`
	GmIpv4Addresses         []Ipv4Addr             `json:"gmIpv4Addresses,omitempty"`
	GmIpv6Addresses         []Ipv6Addr             `json:"gmIpv6Addresses,omitempty"`
	ServedIpv4AddressRanges []Ipv4AddressRange     `json:"servedIpv4AddressRanges,omitempty"`
	ServedIpv6PrefixRanges  []Ipv6PrefixRange      `json:"servedIpv6PrefixRanges,omitempty"`
	AdditionalProperties    map[string]interface{} `json:"-"`
}

// PcscfRestorationNotification Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/PcscfRestorationNotification
type PcscfRestorationNotification struct {
	Supi                 Supi                   `json:"supi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcscfRestorationRequestData Indicates P-CSCF restoration. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PcscfRestorationRequestData)
type PcscfRestorationRequestData struct {
	Dnn                  *Dnn                   `json:"dnn,omitempty"`
	IpDomain             *string                `json:"ipDomain,omitempty"`
	SliceInfo            *Snssai                `json:"sliceInfo,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	UeIpv4               Ipv4Addr               `json:"ueIpv4,omitempty"`
	UeIpv6               *Ipv6Addr              `json:"ueIpv6,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PdnConnectivityStatReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/PdnConnectivityStatReport
type PdnConnectivityStatReport struct {
	Dnn          *Dnn         `json:"dnn,omitempty"`
	Ipv4Addr     Ipv4Addr     `json:"ipv4Addr,omitempty"`
	Ipv6Addrs    []Ipv6Addr   `json:"ipv6Addrs,omitempty"`
	Ipv6Prefixes []Ipv6Prefix `json:"ipv6Prefixes,omitempty"`

	// PdnConnStat Original definition in TS29503_Nudm_EE.yaml#/components/schemas/PdnConnectivityStatus
	PdnConnStat          PdnConnectivityStatus  `json:"pdnConnStat"`
	PduSeId              *PduSessionId          `json:"pduSeId,omitempty"`
	PduSessType          *PduSessionType        `json:"pduSessType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PdnConnectivityStatus Original definition in TS29503_Nudm_EE.yaml#/components/schemas/PdnConnectivityStatus
type PdnConnectivityStatus string

// PduSession Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PduSession
type PduSession struct {
	Dnn                  Dnn                    `json:"dnn"`
	PlmnId               PlmnId                 `json:"plmnId"`
	SingleNssai          *Snssai                `json:"singleNssai,omitempty"`
	SmfInstanceId        NfInstanceId           `json:"smfInstanceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PduSessionContext
type PduSessionContext struct {
	AccessType           AccessType      `json:"accessType"`
	AdditionalAccessType AccessType      `json:"additionalAccessType,omitempty"`
	AllocatedEbiList     []EbiArpMapping `json:"allocatedEbiList,omitempty"`

	// CnAssistedRanPara Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/CnAssistedRanPara
	CnAssistedRanPara *CnAssistedRanPara `json:"cnAssistedRanPara,omitempty"`
	Dnn               Dnn                `json:"dnn"`
	HsmfId            *NfInstanceId      `json:"hsmfId,omitempty"`
	HsmfServiceSetId  *NfServiceSetId    `json:"hsmfServiceSetId,omitempty"`
	HsmfSetId         *NfSetId           `json:"hsmfSetId,omitempty"`

	// IsmfBinding Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SbiBindingLevel
	IsmfBinding      *SbiBindingLevel `json:"ismfBinding,omitempty"`
	IsmfId           *NfInstanceId    `json:"ismfId,omitempty"`
	IsmfServiceSetId *NfServiceSetId  `json:"ismfServiceSetId,omitempty"`
	IsmfSetId        *NfSetId         `json:"ismfSetId,omitempty"`
	MaPduSession     *bool            `json:"maPduSession,omitempty"`

	// NsInstance Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/NsiId
	NsInstance   *NsiId       `json:"nsInstance,omitempty"`
	PduSessionId PduSessionId `json:"pduSessionId"`
	SNssai       Snssai       `json:"sNssai"`
	SelectedDnn  *Dnn         `json:"selectedDnn,omitempty"`
	SmContextRef Uri          `json:"smContextRef"`

	// SmfBinding Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SbiBindingLevel
	SmfBinding           *SbiBindingLevel `json:"smfBinding,omitempty"`
	SmfServiceInstanceId *string          `json:"smfServiceInstanceId,omitempty"`

	// VsmfBinding Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SbiBindingLevel
	VsmfBinding          *SbiBindingLevel       `json:"vsmfBinding,omitempty"`
	VsmfId               *NfInstanceId          `json:"vsmfId,omitempty"`
	VsmfServiceSetId     *NfServiceSetId        `json:"vsmfServiceSetId,omitempty"`
	VsmfSetId            *NfSetId               `json:"vsmfSetId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionContinuityInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PduSessionContinuityInd
type PduSessionContinuityInd string

// PduSessionCreateData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PduSessionCreateData
type PduSessionCreateData struct {
	AddUeLocation    *UserLocation `json:"addUeLocation,omitempty"`
	AdditionalAnType AccessType    `json:"additionalAnType,omitempty"`

	// AdditionalCnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	AdditionalCnTunnelInfo *TunnelInfo    `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnRequested      *bool          `json:"alwaysOnRequested,omitempty"`
	AmfNfId                *NfInstanceId  `json:"amfNfId,omitempty"`
	AnType                 AccessType     `json:"anType"`
	ApnRateStatus          *ApnRateStatus `json:"apnRateStatus,omitempty"`
	ChargingId             string         `json:"chargingId,omitempty"`
	CpCiotEnabled          *bool          `json:"cpCiotEnabled,omitempty"`
	CpOnlyInd              *bool          `json:"cpOnlyInd,omitempty"`
	DlServingPlmnRateCtl   int            `json:"dlServingPlmnRateCtl,omitempty"`
	DnaiList               []Dnai         `json:"dnaiList,omitempty"`
	Dnn                    Dnn            `json:"dnn"`

	// EpsBearerCtxStatus Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerContextStatus
	EpsBearerCtxStatus EpsBearerContextStatus `json:"epsBearerCtxStatus,omitempty"`
	EpsBearerId        []SmfEpsBearerId       `json:"epsBearerId,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsInterworkingIndication)
	EpsInterworkingInd      *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	Gpsi                    Gpsi                       `json:"gpsi,omitempty"`
	Guami                   *Guami                     `json:"guami,omitempty"`
	HPcfId                  *NfInstanceId              `json:"hPcfId,omitempty"`
	HoPreparationIndication *bool                      `json:"hoPreparationIndication,omitempty"`
	ISmfServiceInstanceId   *string                    `json:"iSmfServiceInstanceId,omitempty"`

	// IcnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	IcnTunnelInfo     *TunnelInfo   `json:"icnTunnelInfo,omitempty"`
	InvokeNef         *bool         `json:"invokeNef,omitempty"`
	IsmfId            *NfInstanceId `json:"ismfId,omitempty"`
	IsmfPduSessionUri *Uri          `json:"ismfPduSessionUri,omitempty"`
	MaNwUpgradeInd    *bool         `json:"maNwUpgradeInd,omitempty"`
	MaRequestInd      *bool         `json:"maRequestInd,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`
	N1SmInfoFromUe                  *RefToBinaryData               `json:"n1SmInfoFromUe,omitempty"`

	// N9ForwardingTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	N9ForwardingTunnelInfo *TunnelInfo    `json:"n9ForwardingTunnelInfo,omitempty"`
	OldPduSessionId        *PduSessionId  `json:"oldPduSessionId,omitempty"`
	PcfGroupId             *NfGroupId     `json:"pcfGroupId,omitempty"`
	PcfId                  *NfInstanceId  `json:"pcfId,omitempty"`
	PcfSetId               *NfSetId       `json:"pcfSetId,omitempty"`
	PduSessionId           *PduSessionId  `json:"pduSessionId,omitempty"`
	Pei                    Pei            `json:"pei,omitempty"`
	PgwS8cFteid            *Bytes         `json:"pgwS8cFteid,omitempty"`
	PresenceInLadn         *PresenceState `json:"presenceInLadn,omitempty"`
	RatType                *RatType       `json:"ratType,omitempty"`
	RecoveryTime           *DateTime      `json:"recoveryTime,omitempty"`

	// RequestType Possible values are - INITIAL_REQUEST - EXISTING_PDU_SESSION - INITIAL_EMERGENCY_REQUEST - EXISTING_EMERGENCY_PDU_SESSION
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RequestType)
	RequestType *RequestType `json:"requestType,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile interface{}             `json:"roamingChargingProfile,omitempty"`
	RoutingIndicator       *string                 `json:"routingIndicator,omitempty"`
	SNssai                 *Snssai                 `json:"sNssai,omitempty"`
	SecondaryRatUsageInfo  []SecondaryRatUsageInfo `json:"secondaryRatUsageInfo,omitempty"`

	// SelMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DnnSelectionMode)
	SelMode             *DnnSelectionMode    `json:"selMode,omitempty"`
	SelectedDnn         *Dnn                 `json:"selectedDnn,omitempty"`
	ServingNetwork      PlmnIdNid            `json:"servingNetwork"`
	SmallDataRateStatus *SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	Supi                Supi                 `json:"supi,omitempty"`
	SupportedFeatures   *SupportedFeatures   `json:"supportedFeatures,omitempty"`
	UdmGroupId          *NfGroupId           `json:"udmGroupId,omitempty"`
	UeLocation          *UserLocation        `json:"ueLocation,omitempty"`
	UeTimeZone          *TimeZone            `json:"ueTimeZone,omitempty"`
	UnauthenticatedSupi *bool                `json:"unauthenticatedSupi,omitempty"`
	UnknownN1SmInfo     *RefToBinaryData     `json:"unknownN1SmInfo,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`

	// UpSecurityInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpSecurityInfo
	UpSecurityInfo        *UpSecurityInfo `json:"upSecurityInfo,omitempty"`
	VSmfServiceInstanceId *string         `json:"vSmfServiceInstanceId,omitempty"`

	// VcnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	VcnTunnelInfo *TunnelInfo `json:"vcnTunnelInfo,omitempty"`

	// VplmnQos Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VplmnQos
	VplmnQos             *VplmnQos              `json:"vplmnQos,omitempty"`
	VsmfId               *NfInstanceId          `json:"vsmfId,omitempty"`
	VsmfPduSessionUri    *Uri                   `json:"vsmfPduSessionUri,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionCreateError Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PduSessionCreateError
type PduSessionCreateError struct {
	BackOffTimer         *DurationSec           `json:"backOffTimer,omitempty"`
	Error                ProblemDetails         `json:"error"`
	N1SmInfoToUe         *RefToBinaryData       `json:"n1SmInfoToUe,omitempty"`
	N1smCause            string                 `json:"n1smCause,omitempty"`
	RecoveryTime         *DateTime              `json:"recoveryTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionCreatedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PduSessionCreatedData
type PduSessionCreatedData struct {
	// AdditionalCnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	AdditionalCnTunnelInfo *TunnelInfo `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnGranted        *bool       `json:"alwaysOnGranted,omitempty"`

	// CnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	CnTunnelInfo *TunnelInfo `json:"cnTunnelInfo,omitempty"`

	// DnAaaAddress Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/IpAddress
	DnAaaAddress        *SmfIpAddress   `json:"dnAaaAddress,omitempty"`
	DnaiList            []Dnai          `json:"dnaiList,omitempty"`
	EnablePauseCharging *bool           `json:"enablePauseCharging,omitempty"`
	EpsBearerInfo       []EpsBearerInfo `json:"epsBearerInfo,omitempty"`

	// EpsPdnCnxInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxInfo
	EpsPdnCnxInfo         *EpsPdnCnxInfo `json:"epsPdnCnxInfo,omitempty"`
	Gpsi                  Gpsi           `json:"gpsi,omitempty"`
	HSmfInstanceId        *NfInstanceId  `json:"hSmfInstanceId,omitempty"`
	HSmfServiceInstanceId *string        `json:"hSmfServiceInstanceId,omitempty"`

	// HcnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	HcnTunnelInfo          *TunnelInfo `json:"hcnTunnelInfo,omitempty"`
	HomeProvidedChargingId string      `json:"homeProvidedChargingId,omitempty"`

	// Ipv6Index Original definition in TS29519_Policy_Data.yaml#/components/schemas/IpIndex
	Ipv6Index          *IpIndex `json:"ipv6Index,omitempty"`
	Ipv6MultiHomingInd *bool    `json:"ipv6MultiHomingInd,omitempty"`
	MaAcceptedInd      *bool    `json:"maAcceptedInd,omitempty"`

	// MaxIntegrityProtectedDataRate Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRate *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRate,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`
	N1SmInfoToUe                    *RefToBinaryData               `json:"n1SmInfoToUe,omitempty"`
	NefExtBufSupportInd             *bool                          `json:"nefExtBufSupportInd,omitempty"`
	PduSessionId                    *PduSessionId                  `json:"pduSessionId,omitempty"`
	PduSessionType                  PduSessionType                 `json:"pduSessionType"`
	QosFlowsSetupList               []QosFlowSetupItem             `json:"qosFlowsSetupList,omitempty"`
	RecoveryTime                    *DateTime                      `json:"recoveryTime,omitempty"`

	// RedundantPduSessionInfo Redundant PDU Session Information (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RedundantPduSessionInformation)
	RedundantPduSessionInfo *RedundantPduSessionInformation `json:"redundantPduSessionInfo,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile      interface{}            `json:"roamingChargingProfile,omitempty"`
	SNssai                      *Snssai                `json:"sNssai,omitempty"`
	SessionAmbr                 *Ambr                  `json:"sessionAmbr,omitempty"`
	SmallDataRateControlEnabled *bool                  `json:"smallDataRateControlEnabled,omitempty"`
	SmfInstanceId               *NfInstanceId          `json:"smfInstanceId,omitempty"`
	SmfServiceInstanceId        *string                `json:"smfServiceInstanceId,omitempty"`
	SscMode                     string                 `json:"sscMode"`
	SupportedFeatures           *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	UeIpv4Address               Ipv4Addr               `json:"ueIpv4Address,omitempty"`
	UeIpv6InterfaceId           string                 `json:"ueIpv6InterfaceId,omitempty"`
	UeIpv6Prefix                *Ipv6Prefix            `json:"ueIpv6Prefix,omitempty"`
	UpSecurity                  *UpSecurity            `json:"upSecurity,omitempty"`
	AdditionalProperties        map[string]interface{} `json:"-"`
}

// PduSessionId defines model for PduSessionId.
type PduSessionId = int

// PduSessionInformation Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/PduSessionInformation
type PduSessionInformation struct {
	Dnn                  Dnn                    `json:"dnn"`
	IpDomain             *string                `json:"ipDomain,omitempty"`
	Snssai               Snssai                 `json:"snssai"`
	UeIpv4               Ipv4Addr               `json:"ueIpv4,omitempty"`
	UeIpv6               *Ipv6Prefix            `json:"ueIpv6,omitempty"`
	UeMac                MacAddr48              `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionManagementData Original definition in TS29519_Exposure_Data.yaml#/components/schemas/PduSessionManagementData
type PduSessionManagementData struct {
	Dnai      *Dnai      `json:"dnai,omitempty"`
	DnaiTs    *DateTime  `json:"dnaiTs,omitempty"`
	Dnn       *Dnn       `json:"dnn,omitempty"`
	IpAddrTs  *DateTime  `json:"ipAddrTs,omitempty"`
	Ipv4Addr  Ipv4Addr   `json:"ipv4Addr,omitempty"`
	Ipv6Addrs []Ipv6Addr `json:"ipv6Addrs,omitempty"`

	// Ipv6Prefix UE IPv6 prefix.
	Ipv6Prefix             []Ipv6Prefix       `json:"ipv6Prefix,omitempty"`
	N6TrafficRoutingInfo   *[]RouteToLocation `json:"n6TrafficRoutingInfo,omitempty"`
	N6TrafficRoutingInfoTs *DateTime          `json:"n6TrafficRoutingInfoTs,omitempty"`
	PduSessType            *PduSessionType    `json:"pduSessType,omitempty"`
	PduSessionId           *PduSessionId      `json:"pduSessionId,omitempty"`

	// PduSessionStatus Possible values are - "ACTIVE" - "RELEASED"
	//  (Original definition in TS29519_Exposure_Data.yaml#/components/schemas/PduSessionStatus)
	PduSessionStatus     *PduSessionStatus      `json:"pduSessionStatus,omitempty"`
	PduSessionStatusTs   *DateTime              `json:"pduSessionStatusTs,omitempty"`
	SuppFeat             *SupportedFeatures     `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionNotifyItem Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PduSessionNotifyItem
type PduSessionNotifyItem struct {
	// NotificationCause Possible values are - QOS_FULFILLED - QOS_NOT_FULFILLED - UP_SEC_FULFILLED - UP_SEC_NOT_FULFILLED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/NotificationCause)
	NotificationCause    NotificationCause      `json:"notificationCause"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionRelCause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PduSessionRelCause
type PduSessionRelCause string

// PduSessionStatus Possible values are - "ACTIVE" - "RELEASED"
//
//	(Original definition in TS29519_Exposure_Data.yaml#/components/schemas/PduSessionStatus)
type PduSessionStatus string

// PduSessionStatusCfg Original definition in TS29503_Nudm_EE.yaml#/components/schemas/PduSessionStatusCfg
type PduSessionStatusCfg struct {
	Dnn                  *Dnn                   `json:"dnn,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionTsnBridge Contains the new 5GS Bridge information and may contain the DS-TT port and/or NW-TT port management information. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PduSessionTsnBridge)
type PduSessionTsnBridge struct {
	// TsnBridgeInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/TsnBridgeInfo
	TsnBridgeInfo TsnBridgeInfo `json:"tsnBridgeInfo"`

	// TsnBridgeManCont Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt   *PortManagementContainer  `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts  []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// PduSessionType defines model for PduSessionType.
type PduSessionType string

// PduSessionTypes Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PduSessionTypes
type PduSessionTypes struct {
	AllowedSessionTypes  []PduSessionType       `json:"allowedSessionTypes,omitempty"`
	DefaultSessionType   PduSessionType         `json:"defaultSessionType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Pei defines model for Pei.
type Pei = string

// PeiUpdateInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/PeiUpdateInfo
type PeiUpdateInfo struct {
	Pei                  Pei                    `json:"pei"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PeriodicCommunicationIndicator Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PeriodicCommunicationIndicator
type PeriodicCommunicationIndicator string

// Periodicity Original definition in TS29519_Policy_Data.yaml#/components/schemas/Periodicity
type Periodicity string

// Pfd Original definition in TS29122_PfdManagement.yaml#/components/schemas/Pfd
type Pfd struct {
	// DnProtocol Possible values are - DNS_QNAME: Identifies the DNS protocol and the question name in DNS query. - TLS_SNI: Identifies the Server Name Indication in TLS ClientHello message. - TLS_SAN: Identifies the Subject Alternative Name in TLS ServerCertificate message. - TSL_SCN: Identifies the Subject Common Name in TLS ServerCertificate message.
	//  (Original definition in TS29122_PfdManagement.yaml#/components/schemas/DomainNameProtocol)
	DnProtocol *DomainNameProtocol `json:"dnProtocol,omitempty"`

	// DomainNames Indicates an FQDN or a regular expression as a domain name matching criteria.
	DomainNames []string `json:"domainNames,omitempty"`

	// FlowDescriptions Represents a 3-tuple with protocol, server ip and server port for UL/DL application traffic. The content of the string has the same encoding as the IPFilterRule AVP value as defined in IETF RFC 6733.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`

	// PfdId Identifies a PDF of an application identifier.
	PfdId string `json:"pfdId"`

	// Urls Indicates a URL or a regular expression which is used to match the significant parts of the URL.
	Urls                 []string               `json:"urls,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdChangeNotification Original definition in TS29551_Nnef_PFDmanagement.yaml#/components/schemas/PfdChangeNotification
type PfdChangeNotification struct {
	ApplicationId        ApplicationId          `json:"applicationId"`
	PartialFlag          *bool                  `json:"partialFlag,omitempty"`
	Pfds                 []PfdContent           `json:"pfds,omitempty"`
	RemovalFlag          *bool                  `json:"removalFlag,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdChangeReport Original definition in TS29551_Nnef_PFDmanagement.yaml#/components/schemas/PfdChangeReport
type PfdChangeReport struct {
	ApplicationId        []ApplicationId        `json:"applicationId"`
	PfdError             ProblemDetails         `json:"pfdError"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdContent Original definition in TS29551_Nnef_PFDmanagement.yaml#/components/schemas/PfdContent
type PfdContent struct {
	// DnProtocol Possible values are - DNS_QNAME: Identifies the DNS protocol and the question name in DNS query. - TLS_SNI: Identifies the Server Name Indication in TLS ClientHello message. - TLS_SAN: Identifies the Subject Alternative Name in TLS ServerCertificate message. - TSL_SCN: Identifies the Subject Common Name in TLS ServerCertificate message.
	//  (Original definition in TS29122_PfdManagement.yaml#/components/schemas/DomainNameProtocol)
	DnProtocol *DomainNameProtocol `json:"dnProtocol,omitempty"`

	// DomainNames Indicates an FQDN or a regular expression as a domain name matching criteria.
	DomainNames []string `json:"domainNames,omitempty"`

	// FlowDescriptions Represents a 3-tuple with protocol, server ip and server port for UL/DL application traffic.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`

	// PfdId Identifies a PDF of an application identifier.
	PfdId *string `json:"pfdId,omitempty"`

	// Urls Indicates a URL or a regular expression which is used to match the significant parts of the URL.
	Urls                 []string               `json:"urls,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdData Original definition in TS29122_PfdManagement.yaml#/components/schemas/PfdData
type PfdData struct {
	// AllowedDelay Unsigned integer identifying a period of time in units of seconds with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSecRm)
	AllowedDelay *TS29122DurationSecRm `json:"allowedDelay"`

	// CachingTime Unsigned integer identifying a period of time in units of seconds with "readOnly=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSecRo)
	CachingTime *DurationSecRo `json:"cachingTime,omitempty"`

	// ExternalAppId Each element uniquely external application identifier
	ExternalAppId string `json:"externalAppId"`

	// Pfds Contains the PFDs of the external application identifier. Each PFD is identified in the map via a key containing the PFD identifier.
	Pfds map[string]Pfd `json:"pfds"`

	// Self string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
	Self                 *TS29122Link           `json:"self,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdDataForApp Original definition in TS29551_Nnef_PFDmanagement.yaml#/components/schemas/PfdDataForApp
type PfdDataForApp struct {
	ApplicationId        ApplicationId          `json:"applicationId"`
	CachingTime          *DateTime              `json:"cachingTime,omitempty"`
	Pfds                 []PfdContent           `json:"pfds"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdDataForAppExt Original definition in TS29519_Application_Data.yaml#/components/schemas/PfdDataForAppExt
type PfdDataForAppExt struct {
	ApplicationId        ApplicationId          `json:"applicationId"`
	CachingTime          *DateTime              `json:"cachingTime,omitempty"`
	Pfds                 []PfdContent           `json:"pfds"`
	SuppFeat             *SupportedFeatures     `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdManagement Original definition in TS29122_PfdManagement.yaml#/components/schemas/PfdManagement
type PfdManagement struct {
	// NotificationDestination string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
	NotificationDestination *TS29122Link `json:"notificationDestination,omitempty"`

	// PfdDatas Each element uniquely identifies the PFDs for an external application identifier. Each element is identified in the map via an external application identifier as key. The response shall include successfully provisioned PFD data of application(s).
	PfdDatas map[string]PfdData `json:"pfdDatas"`

	// PfdReports Supplied by the SCEF and contains the external application identifiers for which PFD(s) are not added or modified successfully. The failure reason is also included. Each element provides the related information for one or more external application identifier(s) and is identified in the map via the failure identifier as key.
	PfdReports *map[string]PfdReport `json:"pfdReports,omitempty"`

	// RequestTestNotification Set to true by the SCS/AS to request the SCEF to send a test notification as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`

	// Self string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
	Self              *TS29122Link       `json:"self,omitempty"`
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// WebsockNotifConfig Original definition in TS29122_CommonData.yaml#/components/schemas/WebsockNotifConfig
	WebsockNotifConfig   *WebsockNotifConfig    `json:"websockNotifConfig,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdReport Original definition in TS29122_PfdManagement.yaml#/components/schemas/PfdReport
type PfdReport struct {
	// CachingTime Unsigned integer identifying a period of time in units of seconds. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSec)
	CachingTime *TS29122DurationSec `json:"cachingTime,omitempty"`

	// ExternalAppIds Identifies the external application identifier(s) which PFD(s) are not added or modified successfully
	ExternalAppIds []string `json:"externalAppIds"`

	// FailureCode Possible values are - MALFUNCTION: This value indicates that something functions wrongly in PFD provisioning or the PFD provisioning does not function at all. - RESOURCE_LIMITATION: This value indicates there is resource limitation for PFD storage. - SHORT_DELAY: This value indicates that the allowed delay is too short and PFD(s) are not stored. - APP_ID_DUPLICATED: The received external application identifier(s) are already provisioned. - PARTIAL_FAILURE: The PFD(s) are not provisioned to all PCEFs/TDFs/SMFs. - OTHER_REASON: Other reason unspecified.
	//  (Original definition in TS29122_PfdManagement.yaml#/components/schemas/FailureCode)
	FailureCode FailureCode `json:"failureCode"`

	// LocationArea Original definition in TS29122_PfdManagement.yaml#/components/schemas/UserPlaneLocationArea
	LocationArea         *UserPlaneLocationArea `json:"locationArea,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdSubscription Original definition in TS29551_Nnef_PFDmanagement.yaml#/components/schemas/PfdSubscription
type PfdSubscription struct {
	ApplicationIds       []ApplicationId        `json:"applicationIds,omitempty"`
	NotifyUri            Uri                    `json:"notifyUri"`
	SupportedFeatures    SupportedFeatures      `json:"supportedFeatures"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PgwInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PgwInfo
type PgwInfo struct {
	Dnn                  Dnn                    `json:"dnn"`
	EpdgInd              *bool                  `json:"epdgInd,omitempty"`
	PgwFqdn              string                 `json:"pgwFqdn"`
	PlmnId               *PlmnId                `json:"plmnId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PhysCellId defines model for PhysCellId.
type PhysCellId = int

// PlmnAssiUeRadioCapId defines model for PlmnAssiUeRadioCapId.
type PlmnAssiUeRadioCapId = Bytes

// PlmnEcInfo Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PlmnEcInfo
type PlmnEcInfo struct {
	EcRestrictionDataNb *bool `json:"ecRestrictionDataNb,omitempty"`

	// EcRestrictionDataWb Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/EcRestrictionDataWb
	EcRestrictionDataWb  *UdmEcRestrictionDataWb `json:"ecRestrictionDataWb,omitempty"`
	PlmnId               PlmnId                  `json:"plmnId"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// PlmnId defines model for PlmnId.
type PlmnId = f5gcModels.PlmnId

// PlmnIdNid defines model for PlmnIdNid.
type PlmnIdNid struct {
	Mcc                  Mcc                    `json:"mcc"`
	Mnc                  Mnc                    `json:"mnc"`
	Nid                  Nid                    `json:"nid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PlmnOperatorClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PlmnOperatorClass
type PlmnOperatorClass struct {
	// LcsClientClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsClientClass
	LcsClientClass       LcsClientClass         `json:"lcsClientClass"`
	LcsClientIds         []LcsClientId          `json:"lcsClientIds"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PlmnRange Range of PLMN IDs (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PlmnRange)
type PlmnRange struct {
	End                  string                 `json:"end,omitempty"`
	Pattern              *string                `json:"pattern,omitempty"`
	Start                string                 `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PlmnRouteSelectionDescriptor Contains the route selection descriptors (combinations of SNSSAI, DNNs, PDU session types, SSC modes and ATSSS information) allowed by subscription to the UE for a serving PLMN (Original definition in TS29519_Policy_Data.yaml#/components/schemas/PlmnRouteSelectionDescriptor)
type PlmnRouteSelectionDescriptor struct {
	ServingPlmn          PlmnId                           `json:"servingPlmn"`
	SnssaiRouteSelDescs  []SnssaiRouteSelectionDescriptor `json:"snssaiRouteSelDescs,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// PlmnSnssai List of network slices (S-NSSAIs) for a given PLMN ID (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PlmnSnssai)
type PlmnSnssai struct {
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	SNssaiList           []ExtSnssai            `json:"sNssaiList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PolicyAuthorizationAspId Contains an identity of an application service provider. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AspId)
type PolicyAuthorizationAspId = string

// PolicyAuthorizationFlowDescription Defines a packet filter of an IP flow. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowDescription)
type PolicyAuthorizationFlowDescription = string

// PolicyAuthorizationQosMonitoringReport QoS Monitoring reporting information (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosMonitoringReport)
type PolicyAuthorizationQosMonitoringReport struct {
	DlDelays             []int                  `json:"dlDelays,omitempty"`
	Flows                []Flows                `json:"flows,omitempty"`
	RtDelays             []int                  `json:"rtDelays,omitempty"`
	UlDelays             []int                  `json:"ulDelays,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PolicyAuthorizationQosNotificationControlInfo Indicates whether the QoS targets for a GRB flow are not guaranteed or guaranteed again (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosNotificationControlInfo)
type PolicyAuthorizationQosNotificationControlInfo struct {
	AltSerReq *string `json:"altSerReq,omitempty"`
	Flows     []Flows `json:"flows,omitempty"`

	// NotifType Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosNotifType
	NotifType            QosNotifType           `json:"notifType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PolicyControlRequestTrigger Possible values are - PLMN_CH: PLMN Change - RES_MO_RE: A request for resource modification has been received by the SMF. The SMF always reports to the PCF. - AC_TY_CH: Access Type Change - UE_IP_CH: UE IP address change. The SMF always reports to the PCF. - UE_MAC_CH: A new UE MAC address is detected or a used UE MAC address is inactive for a specific period - AN_CH_COR: Access Network Charging Correlation Information - US_RE: The PDU Session or the Monitoring key specific resources consumed by a UE either reached the threshold or needs to be reported for other reasons. - APP_STA: The start of application traffic has been detected. - APP_STO: The stop of application traffic has been detected. - AN_INFO: Access Network Information report - CM_SES_FAIL: Credit management session failure - PS_DA_OFF: The SMF reports when the 3GPP PS Data Off status changes. The SMF always reports to the PCF. - DEF_QOS_CH: Default QoS Change. The SMF always reports to the PCF. - SE_AMBR_CH: Session AMBR Change. The SMF always reports to the PCF. - QOS_NOTIF: The SMF notify the PCF when receiving notification from RAN that QoS targets of the QoS Flow cannot be guranteed or gurateed again. - NO_CREDIT: Out of credit - REALLO_OF_CREDIT: Reallocation of credit - PRA_CH: Change of UE presence in Presence Reporting Area - SAREA_CH: Location Change with respect to the Serving Area - SCNN_CH: Location Change with respect to the Serving CN node - RE_TIMEOUT: Indicates the SMF generated the request because there has been a PCC revalidation timeout - RES_RELEASE: Indicate that the SMF can inform the PCF of the outcome of the release of resources for those rules that require so. - SUCC_RES_ALLO: Indicates that the requested rule data is the successful resource allocation. - RAT_TY_CH: RAT Type Change. - REF_QOS_IND_CH: Reflective QoS indication Change - NUM_OF_PACKET_FILTER: Indicates that the SMF shall report the number of supported packet filter for signalled QoS rules - UE_STATUS_RESUME: Indicates that the UE’s status is resumed. - UE_TZ_CH: UE Time Zone Change - AUTH_PROF_CH: The DN-AAA authorization profile index has changed - QOS_MONITORING: Indicate that the SMF notifies the PCF of the QoS Monitoring information. - SCELL_CH: Location Change with respect to the Serving Cell. - EPS_FALLBACK: EPS Fallback report is enabled in the SMF. - MA_PDU: UE Indicates that the SMF notifies the PCF of the MA PDU session request - TSN_BRIDGE_INFO: 5GS Bridge information available - 5G_RG_JOIN: The 5G-RG has joined to an IP Multicast Group. - 5G_RG_LEAVE: The 5G-RG has left an IP Multicast Group. - DDN_FAILURE: Event subscription for DDN Failure event received. - DDN_DELIVERY_STATUS: Event subscription for DDN Delivery Status received. - GROUP_ID_LIST_CHG: UE Internal Group Identifier(s) has changed: the SMF reports that UDM provided list of group Ids has changed. - DDN_FAILURE_CANCELLATION: The event subscription for DDN Failure event is cancelled. - DDN_DELIVERY_STATUS_CANCELLATION: The event subscription for DDD STATUS is cancelled. - VPLMN_QOS_CH: Change of the QoS supported in the VPLMN.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PolicyControlRequestTrigger)
type PolicyControlRequestTrigger string

// PolicyDataChangeNotification Contains changed policy data for which notification was requested. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/PolicyDataChangeNotification)
type PolicyDataChangeNotification struct {
	// SponsorConnectivityData Contains the sponsored data connectivity related information for a sponsor identifier. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SponsorConnectivityData)
	SponsorConnectivityData *SponsorConnectivityData `json:"SponsorConnectivityData,omitempty"`

	// AmPolicyData Contains the AM policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/AmPolicyData)
	AmPolicyData *AmPolicyData `json:"amPolicyData,omitempty"`

	// BdtData Contains the background data transfer data. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/BdtData)
	BdtData *BdtData `json:"bdtData,omitempty"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId     *BdtReferenceId `json:"bdtRefId,omitempty"`
	DelResources []Uri           `json:"delResources,omitempty"`
	NotifId      *string         `json:"notifId,omitempty"`

	// OpSpecData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/OperatorSpecificDataContainer
	OpSpecData    *OperatorSpecificDataContainer            `json:"opSpecData,omitempty"`
	OpSpecDataMap *map[string]OperatorSpecificDataContainer `json:"opSpecDataMap,omitempty"`
	PlmnId        *PlmnId                                   `json:"plmnId,omitempty"`

	// PlmnUePolicySet Contains the UE policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UePolicySet)
	PlmnUePolicySet   *UePolicySet       `json:"plmnUePolicySet,omitempty"`
	ReportedFragments []NotificationItem `json:"reportedFragments,omitempty"`

	// SmPolicyData Contains the SM policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SmPolicyData)
	SmPolicyData *SmPolicyData `json:"smPolicyData,omitempty"`
	SponsorId    *string       `json:"sponsorId,omitempty"`
	UeId         VarUeId       `json:"ueId,omitempty"`

	// UePolicySet Contains the UE policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UePolicySet)
	UePolicySet *UePolicySet `json:"uePolicySet,omitempty"`

	// UsageMonData Contains remain allowed usage data for a subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UsageMonData)
	UsageMonData         *UsageMonData          `json:"usageMonData,omitempty"`
	UsageMonId           *string                `json:"usageMonId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PolicyDataSubscription Identifies a subscription to policy data change notification. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/PolicyDataSubscription)
type PolicyDataSubscription struct {
	Expiry                *DateTime              `json:"expiry,omitempty"`
	MonResItems           []ResourceItem         `json:"monResItems,omitempty"`
	MonitoredResourceUris []Uri                  `json:"monitoredResourceUris"`
	NotifId               *string                `json:"notifId,omitempty"`
	NotificationUri       Uri                    `json:"notificationUri"`
	SupportedFeatures     *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// PolicyDecisionFailureCode Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PolicyDecisionFailureCode
type PolicyDecisionFailureCode string

// PolicyReqTrigger Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PolicyReqTrigger
type PolicyReqTrigger string

// PortManagementContainer Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
type PortManagementContainer struct {
	PortManCont          Bytes                  `json:"portManCont"`
	PortNum              TsnPortNumber          `json:"portNum"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PositioningMethodMdt defines model for PositioningMethodMdt.
type PositioningMethodMdt string

// Pp5gVnGroupProfileData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/Pp5gVnGroupProfileData
type Pp5gVnGroupProfileData struct {
	// AllowedMtcProviders A map (list of key-value pairs where external VN group identifier serves as key) of AllowedMtcProviderInfo lists. In addition to defined external VN group identifier, the key value "ALL" may be used to identify a map entry which contains a list of AllowedMtcProviderInfo that are allowed operating all the external group identifiers.
	AllowedMtcProviders  *map[string][]AllowedMtcProviderInfo `json:"allowedMtcProviders,omitempty"`
	SupportedFeatures    *SupportedFeatures                   `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// PpActiveTime Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpActiveTime
type PpActiveTime struct {
	ActiveTime             DurationSec             `json:"activeTime"`
	AfInstanceId           string                  `json:"afInstanceId"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          UdmPPReferenceId       `json:"referenceId"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PpData Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpData
type PpData struct {
	AcsInfo *AcsInfoRm `json:"acsInfo,omitempty"`

	// CommunicationCharacteristics Original definition in TS29503_Nudm_PP.yaml#/components/schemas/CommunicationCharacteristics
	CommunicationCharacteristics *CommunicationCharacteristics `json:"communicationCharacteristics,omitempty"`

	// EcRestriction Original definition in TS29503_Nudm_PP.yaml#/components/schemas/EcRestriction
	EcRestriction *EcRestriction `json:"ecRestriction,omitempty"`

	// ExpectedUeBehaviourParameters Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ExpectedUeBehaviour
	ExpectedUeBehaviourParameters *ExpectedUeBehaviour `json:"expectedUeBehaviourParameters,omitempty"`

	// LcsPrivacy Original definition in TS29503_Nudm_PP.yaml#/components/schemas/LcsPrivacy
	LcsPrivacy *LcsPrivacy `json:"lcsPrivacy,omitempty"`

	// SorInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SorInfo
	SorInfo              *SorInfo               `json:"sorInfo,omitempty"`
	StnSr                *StnSrRm               `json:"stnSr"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PpDlPacketCount Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpDlPacketCount
type PpDlPacketCount = int

// PpDlPacketCountExt Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpDlPacketCountExt
type PpDlPacketCountExt struct {
	AfInstanceId           string                  `json:"afInstanceId"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          UdmPPReferenceId       `json:"referenceId"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PpMaximumLatency Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpMaximumLatency
type PpMaximumLatency struct {
	AfInstanceId           string                  `json:"afInstanceId"`
	MaximumLatency         DurationSec             `json:"maximumLatency"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          UdmPPReferenceId       `json:"referenceId"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PpMaximumResponseTime Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpMaximumResponseTime
type PpMaximumResponseTime struct {
	AfInstanceId           string                  `json:"afInstanceId"`
	MaximumResponseTime    DurationSec             `json:"maximumResponseTime"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          UdmPPReferenceId       `json:"referenceId"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PpProfileData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/PpProfileData
type PpProfileData struct {
	// AllowedMtcProviders A map (list of key-value pairs where PpDataType serves as key) of AllowedMtcProviderInfo lists. In addition to defined PpDataType, the key value "ALL" may be used to identify a map entry which contains a list of AllowedMtcProviderInfo that are allowed to provision all types of the PP data for the user using UDM ParameterProvision service.
	AllowedMtcProviders  *map[string][]AllowedMtcProviderInfo `json:"allowedMtcProviders,omitempty"`
	SupportedFeatures    *SupportedFeatures                   `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// PpSubsRegTimer Original definition in TS29503_Nudm_PP.yaml#/components/schemas/PpSubsRegTimer
type PpSubsRegTimer struct {
	AfInstanceId           string                  `json:"afInstanceId"`
	MtcProviderInformation *MtcProviderInformation `json:"mtcProviderInformation,omitempty"`

	// ReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
	ReferenceId          UdmPPReferenceId       `json:"referenceId"`
	SubsRegTimer         DurationSec            `json:"subsRegTimer"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Ppi Original definition in TS29518_Namf_Communication.yaml#/components/schemas/Ppi
type Ppi = int

// PreemptionCapability defines model for PreemptionCapability.
type PreemptionCapability string

// PreemptionCapabilityRm defines model for PreemptionCapabilityRm.
type PreemptionCapabilityRm string

// PreemptionControlInformation Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PreemptionControlInformation
type PreemptionControlInformation string

// PreemptionControlInformationRm Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PreemptionControlInformation
type PreemptionControlInformationRm string

// PreemptionVulnerability defines model for PreemptionVulnerability.
type PreemptionVulnerability string

// PreemptionVulnerabilityRm defines model for PreemptionVulnerabilityRm.
type PreemptionVulnerabilityRm string

// PreferredSearch Contains information on whether the returned NFProfiles match the preferred query parameters (Original definition in TS29510_Nnrf_NFDiscovery.yaml#/components/schemas/PreferredSearch)
type PreferredSearch struct {
	OtherApiVersionsInd          *bool                  `json:"otherApiVersionsInd,omitempty"`
	OtherLocalityInd             *bool                  `json:"otherLocalityInd,omitempty"`
	PreferredApiVersionsMatchInd *bool                  `json:"preferredApiVersionsMatchInd,omitempty"`
	PreferredFullPlmnMatchInd    *bool                  `json:"preferredFullPlmnMatchInd,omitempty"`
	PreferredLocalityMatchInd    *bool                  `json:"preferredLocalityMatchInd,omitempty"`
	PreferredTaiMatchInd         *bool                  `json:"preferredTaiMatchInd,omitempty"`
	AdditionalProperties         map[string]interface{} `json:"-"`
}

// PresenceInfo defines model for PresenceInfo.
type PresenceInfo struct {
	AdditionalPraId      *string                `json:"additionalPraId,omitempty"`
	EcgiList             []Ecgi                 `json:"ecgiList,omitempty"`
	GlobalRanNodeIdList  []GlobalRanNodeId      `json:"globalRanNodeIdList,omitempty"`
	GlobaleNbIdList      []GlobalRanNodeId      `json:"globaleNbIdList,omitempty"`
	NcgiList             []Ncgi                 `json:"ncgiList,omitempty"`
	PraId                *string                `json:"praId,omitempty"`
	PresenceState        *PresenceState         `json:"presenceState,omitempty"`
	TrackingAreaList     []Tai                  `json:"trackingAreaList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PresenceInfoRm defines model for PresenceInfoRm.
type PresenceInfoRm struct {
	AdditionalPraId      *string                `json:"additionalPraId,omitempty"`
	EcgiList             *[]Ecgi                `json:"ecgiList,omitempty"`
	GlobalRanNodeIdList  *[]GlobalRanNodeId     `json:"globalRanNodeIdList,omitempty"`
	GlobaleNbIdList      []GlobalRanNodeId      `json:"globaleNbIdList,omitempty"`
	NcgiList             *[]Ncgi                `json:"ncgiList,omitempty"`
	PraId                *string                `json:"praId,omitempty"`
	PresenceState        *PresenceState         `json:"presenceState,omitempty"`
	TrackingAreaList     *[]Tai                 `json:"trackingAreaList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PresenceState defines model for PresenceState.
type PresenceState string

// PrioritySharingIndicator Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/PrioritySharingIndicator
type PrioritySharingIndicator string

// PrivacyCheckRelatedAction Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PrivacyCheckRelatedAction
type PrivacyCheckRelatedAction string

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AccessTokenError Error returned in the access token response message (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError *AccessTokenErr `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   *AccessTokenReq        `json:"accessTokenRequest,omitempty"`
	Cause                *string                `json:"cause,omitempty"`
	Detail               *string                `json:"detail,omitempty"`
	Instance             *Uri                   `json:"instance,omitempty"`
	InvalidParams        []InvalidParam         `json:"invalidParams,omitempty"`
	NrfId                *string                `json:"nrfId,omitempty"`
	Status               int                    `json:"status,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *Uri                   `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProblemDetailsAddInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProblemDetailsAddInfo
type ProblemDetailsAddInfo struct {
	RemoteError          *bool                  `json:"remoteError,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProblemDetailsEnableUeReachability defines model for ProblemDetailsEnableUeReachability.
type ProblemDetailsEnableUeReachability struct {
	// AccessTokenError Error returned in the access token response message (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError *AccessTokenErr `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   *AccessTokenReq        `json:"accessTokenRequest,omitempty"`
	Cause                *string                `json:"cause,omitempty"`
	Detail               *string                `json:"detail,omitempty"`
	Instance             *Uri                   `json:"instance,omitempty"`
	InvalidParams        []InvalidParam         `json:"invalidParams,omitempty"`
	MaxWaitingTime       *DurationSec           `json:"maxWaitingTime,omitempty"`
	NrfId                *string                `json:"nrfId,omitempty"`
	Status               int                    `json:"status,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *Uri                   `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProcedureTransactionId Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProcedureTransactionId
type ProcedureTransactionId = int

// ProtectionResult Possible values are
//   - PERFORMED
//   - NOT_PERFORMED
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProtectionResult)
type ProtectionResult string

// ProvideLocInfo Original definition in TS29518_Namf_Location.yaml#/components/schemas/ProvideLocInfo
type ProvideLocInfo struct {
	AdditionalLocation *UserLocation `json:"additionalLocation,omitempty"`
	CurrentLoc         *bool         `json:"currentLoc,omitempty"`

	// GeoInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/GeographicArea
	GeoInfo  interface{}   `json:"geoInfo,omitempty"`
	Location *UserLocation `json:"location,omitempty"`

	// LocationAge Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AgeOfLocationEstimate
	LocationAge          interface{}            `json:"locationAge,omitempty"`
	OldGuami             *Guami                 `json:"oldGuami,omitempty"`
	RatType              *RatType               `json:"ratType,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Timezone             *TimeZone              `json:"timezone,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProvidePosInfo Original definition in TS29518_Namf_Location.yaml#/components/schemas/ProvidePosInfo
type ProvidePosInfo struct {
	// AccuracyFulfilmentIndicator Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AccuracyFulfilmentIndicator
	AccuracyFulfilmentIndicator *string `json:"accuracyFulfilmentIndicator,omitempty"`

	// AgeOfLocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AgeOfLocationEstimate
	AgeOfLocationEstimate interface{} `json:"ageOfLocationEstimate,omitempty"`

	// Altitude Original reference TS29572_Nlmf_Location.yaml#/components/schemas/Altitude
	Altitude interface{} `json:"altitude,omitempty"`

	// BarometricPressure Original reference TS29572_Nlmf_Location.yaml#/components/schemas/BarometricPressure
	BarometricPressure interface{} `json:"barometricPressure,omitempty"`

	// CivicAddress Original reference TS29572_Nlmf_Location.yaml#/components/schemas/CivicAddress
	CivicAddress            interface{}    `json:"civicAddress,omitempty"`
	Ecgi                    *Ecgi          `json:"ecgi,omitempty"`
	GnssPositioningDataList *[]interface{} `json:"gnssPositioningDataList,omitempty"`

	// LocationEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/GeographicArea
	LocationEstimate interface{} `json:"locationEstimate,omitempty"`

	// LocationPrivacyVerResult Original definition in TS29518_Namf_Location.yaml#/components/schemas/LocationPrivacyVerResult
	LocationPrivacyVerResult *LocationPrivacyVerResult `json:"locationPrivacyVerResult,omitempty"`
	Ncgi                     *Ncgi                     `json:"ncgi,omitempty"`
	PositioningDataList      *[]interface{}            `json:"positioningDataList,omitempty"`

	// ServingLMFIdentification Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LMFIdentification
	ServingLMFIdentification *string            `json:"servingLMFIdentification,omitempty"`
	SupportedFeatures        *SupportedFeatures `json:"supportedFeatures,omitempty"`
	TargetMmeName            DiameterIdentity   `json:"targetMmeName,omitempty"`
	TargetMmeRealm           DiameterIdentity   `json:"targetMmeRealm,omitempty"`
	TargetServingNode        *NfInstanceId      `json:"targetServingNode,omitempty"`
	UtranSrvccInd            *bool              `json:"utranSrvccInd,omitempty"`

	// VelocityEstimate Original reference TS29572_Nlmf_Location.yaml#/components/schemas/VelocityEstimate
	VelocityEstimate     interface{}            `json:"velocityEstimate,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProvisionedDataSets Original definition in TS29505_Subscription_Data.yaml#/components/schemas/ProvisionedDataSets
type ProvisionedDataSets struct {
	// AmData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AccessAndMobilitySubscriptionData
	AmData *AccessAndMobilitySubscriptionData `json:"amData,omitempty"`

	// LcsBcaData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsBroadcastAssistanceTypesData
	LcsBcaData *LcsBroadcastAssistanceTypesData `json:"lcsBcaData,omitempty"`

	// LcsMoData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsMoData
	LcsMoData *LcsMoData `json:"lcsMoData,omitempty"`

	// LcsPrivacyData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsPrivacyData
	LcsPrivacyData *LcsPrivacyData                      `json:"lcsPrivacyData,omitempty"`
	SmData         *[]SessionManagementSubscriptionData `json:"smData,omitempty"`

	// SmfSelData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmfSelectionSubscriptionData
	SmfSelData *SmfSelectionSubscriptionData `json:"smfSelData,omitempty"`

	// SmsMngData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsManagementSubscriptionData
	SmsMngData *SmsManagementSubscriptionData `json:"smsMngData,omitempty"`

	// SmsSubsData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsSubscriptionData
	SmsSubsData *SmsSubscriptionData `json:"smsSubsData,omitempty"`
	TraceData   *TraceData           `json:"traceData"`

	// V2xData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/V2xSubscriptionData
	V2xData              *V2xSubscriptionData   `json:"v2xData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PsaIndication Possible values are
//   - PSA_INSERTED
//   - PSA_REMOVED
//   - PSA_INSERTED_ONLY
//   - PSA_REMOVED_ONLY
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PsaIndication)
type PsaIndication string

// PsaInformation Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PsaInformation
type PsaInformation struct {
	DnaiList []Dnai `json:"dnaiList,omitempty"`

	// PsaInd Possible values are
	//   - PSA_INSERTED
	//   - PSA_REMOVED
	//   - PSA_INSERTED_ONLY
	//   - PSA_REMOVED_ONLY
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PsaIndication)
	PsaInd               *PsaIndication         `json:"psaInd,omitempty"`
	PsaUpfId             *NfInstanceId          `json:"psaUpfId,omitempty"`
	UeIpv6Prefix         *Ipv6Prefix            `json:"ueIpv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PtwParameters Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PtwParameters
type PtwParameters struct {
	// OperationMode Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/OperationMode
	OperationMode        OperationMode          `json:"operationMode"`
	PtwValue             string                 `json:"ptwValue"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PurgeFlag Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/PurgeFlag
type PurgeFlag = bool

// PwsInformation Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PwsInformation
type PwsInformation struct {
	BcEmptyAreaList   []GlobalRanNodeId `json:"bcEmptyAreaList,omitempty"`
	MessageIdentifier Uint16            `json:"messageIdentifier"`

	// OmcId Original definition in TS29518_Namf_Communication.yaml#/components/schemas/OmcIdentifier
	OmcId *OmcIdentifier `json:"omcId,omitempty"`

	// PwsContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	PwsContainer         N2InfoContent          `json:"pwsContainer"`
	SendRanResponse      *bool                  `json:"sendRanResponse,omitempty"`
	SerialNumber         Uint16                 `json:"serialNumber"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Qfi defines model for Qfi.
type Qfi = int

// QosCharacteristics Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosCharacteristics
type QosCharacteristics struct {
	N5qi                 N5Qi                   `json:"5qi"`
	AveragingWindow      AverWindow             `json:"averagingWindow,omitempty"`
	ExtMaxDataBurstVol   ExtMaxDataBurstVol     `json:"extMaxDataBurstVol,omitempty"`
	MaxDataBurstVol      MaxDataBurstVol        `json:"maxDataBurstVol,omitempty"`
	PacketDelayBudget    PacketDelBudget        `json:"packetDelayBudget"`
	PacketErrorRate      PacketErrRate          `json:"packetErrorRate"`
	PriorityLevel        N5QiPriorityLevel      `json:"priorityLevel"`
	ResourceType         QosResourceType        `json:"resourceType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosData
type QosData struct {
	N5qi       *N5Qi         `json:"5qi,omitempty"`
	Arp        *Arp          `json:"arp,omitempty"`
	AverWindow *AverWindowRm `json:"averWindow"`

	// DefQosFlowIndication Indicates that the dynamic PCC rule shall always have its binding with the QoS Flow associated with the default QoS rule
	DefQosFlowIndication *bool                 `json:"defQosFlowIndication,omitempty"`
	ExtMaxDataBurstVol   *ExtMaxDataBurstVolRm `json:"extMaxDataBurstVol"`
	GbrDl                *BitRateRm            `json:"gbrDl"`
	GbrUl                *BitRateRm            `json:"gbrUl"`
	MaxDataBurstVol      *MaxDataBurstVolRm    `json:"maxDataBurstVol"`
	MaxPacketLossRateDl  *PacketLossRateRm     `json:"maxPacketLossRateDl"`
	MaxPacketLossRateUl  *PacketLossRateRm     `json:"maxPacketLossRateUl"`
	MaxbrDl              *BitRateRm            `json:"maxbrDl"`
	MaxbrUl              *BitRateRm            `json:"maxbrUl"`
	PacketDelayBudget    PacketDelBudget       `json:"packetDelayBudget,omitempty"`
	PacketErrorRate      PacketErrRate         `json:"packetErrorRate,omitempty"`
	PriorityLevel        *N5QiPriorityLevelRm  `json:"priorityLevel"`

	// Qnc Indicates whether notifications are requested from 3GPP NG-RAN when the GFBR can no longer (or again) be guaranteed for a QoS Flow during the lifetime of the QoS Flow.
	Qnc *bool `json:"qnc,omitempty"`

	// QosId Univocally identifies the QoS control policy data within a PDU session.
	QosId string `json:"qosId"`

	// ReflectiveQos Indicates whether the QoS information is reflective for the corresponding service data flow.
	ReflectiveQos *bool `json:"reflectiveQos,omitempty"`

	// SharingKeyDl Indicates, by containing the same value, what PCC rules may share resource in downlink direction.
	SharingKeyDl *string `json:"sharingKeyDl,omitempty"`

	// SharingKeyUl Indicates, by containing the same value, what PCC rules may share resource in uplink direction.
	SharingKeyUl         *string                `json:"sharingKeyUl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowAccessType Possible values are
//   - 3GPP
//   - NON_3GPP
//   - 3GPP_AND_NON_3GPP
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowAccessType)
type QosFlowAccessType string

// QosFlowAddModifyRequestItem Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowAddModifyRequestItem
type QosFlowAddModifyRequestItem struct {
	// AssociatedAnType Possible values are
	//   - 3GPP
	//   - NON_3GPP
	//   - 3GPP_AND_NON_3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowAccessType)
	AssociatedAnType *QosFlowAccessType `json:"associatedAnType,omitempty"`

	// Ebi Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerId
	Ebi                *SmfEpsBearerId `json:"ebi,omitempty"`
	Qfi                Qfi             `json:"qfi"`
	QosFlowDescription *Bytes          `json:"qosFlowDescription,omitempty"`

	// QosFlowProfile Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowProfile
	QosFlowProfile       *QosFlowProfile        `json:"qosFlowProfile,omitempty"`
	QosRules             *Bytes                 `json:"qosRules,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowItem Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowItem
type QosFlowItem struct {
	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause                  *Cause                 `json:"cause,omitempty"`
	CurrentQosProfileIndex int                    `json:"currentQosProfileIndex,omitempty"`
	NullQoSProfileIndex    *bool                  `json:"nullQoSProfileIndex,omitempty"`
	Qfi                    Qfi                    `json:"qfi"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// QosFlowNotifyItem Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowNotifyItem
type QosFlowNotifyItem struct {
	CurrentQosProfileIndex int `json:"currentQosProfileIndex,omitempty"`

	// NotificationCause Possible values are - QOS_FULFILLED - QOS_NOT_FULFILLED - UP_SEC_FULFILLED - UP_SEC_NOT_FULFILLED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/NotificationCause)
	NotificationCause    NotificationCause      `json:"notificationCause"`
	NullQoSProfileIndex  *bool                  `json:"nullQoSProfileIndex,omitempty"`
	Qfi                  Qfi                    `json:"qfi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowProfile Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowProfile
type QosFlowProfile struct {
	N5qi                  N5Qi                   `json:"5qi"`
	AdditionalQosFlowInfo *AdditionalQosFlowInfo `json:"additionalQosFlowInfo,omitempty"`
	Arp                   *Arp                   `json:"arp,omitempty"`
	Dynamic5Qi            *Dynamic5Qi            `json:"dynamic5Qi,omitempty"`

	// GbrQosFlowInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/GbrQosFlowInformation
	GbrQosFlowInfo *GbrQosFlowInformation `json:"gbrQosFlowInfo,omitempty"`
	NonDynamic5Qi  *NonDynamic5Qi         `json:"nonDynamic5Qi,omitempty"`

	// QosMonitoringReq Possible values are
	//   - UL
	//   - DL
	//   - BOTH
	//   - NONE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosMonitoringReq)
	QosMonitoringReq     *QosMonitoringReq       `json:"qosMonitoringReq,omitempty"`
	QosRepPeriod         *DurationSec            `json:"qosRepPeriod,omitempty"`
	Rqa                  *ReflectiveQoSAttribute `json:"rqa,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// QosFlowReleaseRequestItem Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowReleaseRequestItem
type QosFlowReleaseRequestItem struct {
	Qfi                  Qfi                    `json:"qfi"`
	QosFlowDescription   *Bytes                 `json:"qosFlowDescription,omitempty"`
	QosRules             *Bytes                 `json:"qosRules,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowSetupItem Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowSetupItem
type QosFlowSetupItem struct {
	// AssociatedAnType Possible values are
	//   - 3GPP
	//   - NON_3GPP
	//   - 3GPP_AND_NON_3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowAccessType)
	AssociatedAnType  *QosFlowAccessType `json:"associatedAnType,omitempty"`
	DefaultQosRuleInd *bool              `json:"defaultQosRuleInd,omitempty"`

	// Ebi Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerId
	Ebi                *SmfEpsBearerId `json:"ebi,omitempty"`
	Qfi                Qfi             `json:"qfi"`
	QosFlowDescription *Bytes          `json:"qosFlowDescription,omitempty"`

	// QosFlowProfile Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowProfile
	QosFlowProfile       *QosFlowProfile        `json:"qosFlowProfile,omitempty"`
	QosRules             Bytes                  `json:"qosRules"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowTunnel Tunnel Information per QoS Flow (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowTunnel)
type QosFlowTunnel struct {
	QfiList []Qfi `json:"qfiList"`

	// TunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	TunnelInfo           TunnelInfo             `json:"tunnelInfo"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowUsage Possible values are - GENERAL: Indicate no specific QoS flow usage information is available.  - IMS_SIG: Indicate that the QoS flow is used for IMS signalling only.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosFlowUsage)
type QosFlowUsage string

// QosFlowUsageReport defines model for QosFlowUsageReport.
type QosFlowUsageReport struct {
	DownlinkVolume       Int64                  `json:"downlinkVolume"`
	EndTimeStamp         DateTime               `json:"endTimeStamp"`
	Qfi                  Qfi                    `json:"qfi"`
	StartTimeStamp       DateTime               `json:"startTimeStamp"`
	UplinkVolume         Int64                  `json:"uplinkVolume"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosMonitoringData
type QosMonitoringData struct {
	NotifyCorreId *string `json:"notifyCorreId,omitempty"`
	NotifyUri     *Uri    `json:"notifyUri,omitempty"`

	// QmId Univocally identifies the QoS monitoring policy data within a PDU session.
	QmId      string               `json:"qmId"`
	RepFreqs  []ReportingFrequency `json:"repFreqs"`
	RepPeriod *DurationSecRm       `json:"repPeriod"`

	// RepThreshDl Indicates the period of time in units of miliiseconds for DL packet delay.
	RepThreshDl *int `json:"repThreshDl"`

	// RepThreshRp Indicates the period of time in units of miliiseconds for round trip packet delay.
	RepThreshRp *int `json:"repThreshRp"`

	// RepThreshUl Indicates the period of time in units of miliiseconds for UL packet delay.
	RepThreshUl *int `json:"repThreshUl"`

	// ReqQosMonParams indicates the UL packet delay, DL packet delay and/or round trip packet delay between the UE and the UPF is to be monitored when the QoS Monitoring for URLLC is enabled for the service data flow.
	ReqQosMonParams      []RequestedQosMonitoringParameter `json:"reqQosMonParams"`
	WaitTime             *DurationSecRm                    `json:"waitTime"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// QosMonitoringInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosMonitoringInfo
type QosMonitoringInfo struct {
	QosMonitoringInd     *bool                  `json:"qosMonitoringInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringInformation Indicates the QoS Monitoring information to report, i.e. UL and/or DL and or round trip delay. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosMonitoringInformation)
type QosMonitoringInformation struct {
	RepThreshDl          *int                   `json:"repThreshDl,omitempty"`
	RepThreshRp          *int                   `json:"repThreshRp,omitempty"`
	RepThreshUl          *int                   `json:"repThreshUl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringInformationRm this data type is defined in the same way as the QosMonitoringInformation data type, but with the OpenAPI nullable property set to true. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosMonitoringInformationRm)
type QosMonitoringInformationRm struct {
	RepThreshDl          *int                   `json:"repThreshDl,omitempty"`
	RepThreshRp          *int                   `json:"repThreshRp,omitempty"`
	RepThreshUl          *int                   `json:"repThreshUl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringReq Possible values are
//   - UL
//   - DL
//   - BOTH
//   - NONE
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosMonitoringReq)
type QosMonitoringReq string

// QosNotifType Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosNotifType
type QosNotifType string

// QosResourceType defines model for QosResourceType.
type QosResourceType string

// RanNasRelCause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RanNasRelCause
type RanNasRelCause struct {
	N5gMmCause *N5GMmCause `json:"5gMmCause,omitempty"`
	N5gSmCause *N5GSmCause `json:"5gSmCause,omitempty"`

	// EpsCause Defines the EPS RAN/NAS release cause. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/EpsRanNasRelCause)
	EpsCause             *EpsRanNasRelCause     `json:"epsCause,omitempty"`
	NgApCause            *NgApCause             `json:"ngApCause,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Rand Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Rand
type Rand = string

// RatSelector Original definition in TS29518_Namf_Communication.yaml#/components/schemas/RatSelector
type RatSelector string

// RatType defines model for RatType.
type RatType string

// RatingGroup defines model for RatingGroup.
type RatingGroup = Uint32

// ReachabilityFilter Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/ReachabilityFilter
type ReachabilityFilter string

// ReachabilityForSmsConfiguration Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReachabilityForSmsConfiguration
type ReachabilityForSmsConfiguration string

// ReachabilityForSmsReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReachabilityForSmsReport
type ReachabilityForSmsReport struct {
	MaxAvailabilityTime  *DateTime              `json:"maxAvailabilityTime,omitempty"`
	SmsfAccessType       AccessType             `json:"smsfAccessType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RedirectAddressType Possible values are - IPV4_ADDR: Indicates that the address type is in the form of "dotted-decimal" IPv4 address. - IPV6_ADDR: Indicates that the address type is in the form of IPv6 address. - URL: Indicates that the address type is in the form of Uniform Resource Locator. - SIP_URI: Indicates that the address type is in the form of SIP Uniform Resource Identifier.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RedirectAddressType)
type RedirectAddressType string

// RedirectInformation Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RedirectInformation
type RedirectInformation struct {
	// RedirectAddressType Possible values are - IPV4_ADDR: Indicates that the address type is in the form of "dotted-decimal" IPv4 address. - IPV6_ADDR: Indicates that the address type is in the form of IPv6 address. - URL: Indicates that the address type is in the form of Uniform Resource Locator. - SIP_URI: Indicates that the address type is in the form of SIP Uniform Resource Identifier.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RedirectAddressType)
	RedirectAddressType *RedirectAddressType `json:"redirectAddressType,omitempty"`

	// RedirectEnabled Indicates the redirect is enable.
	RedirectEnabled *bool `json:"redirectEnabled,omitempty"`

	// RedirectServerAddress Indicates the address of the redirect server. If "redirectAddressType" attribute indicates the IPV4_ADDR, the encoding is the same as the Ipv4Addr data type defined in 3GPP TS 29.571.If "redirectAddressType" attribute indicates the IPV6_ADDR, the encoding is the same as the Ipv6Addr data type defined in 3GPP TS 29.571.If "redirectAddressType" attribute indicates the URL or SIP_URI, the encoding is the same as the Uri data type defined in 3GPP TS 29.571.
	RedirectServerAddress *string                `json:"redirectServerAddress,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// RedirectResponse defines model for RedirectResponse.
type RedirectResponse struct {
	Cause                *string                `json:"cause,omitempty"`
	TargetScp            *Uri                   `json:"targetScp,omitempty"`
	TargetSepp           *Uri                   `json:"targetSepp,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RedundantPduSessionInformation Redundant PDU Session Information (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RedundantPduSessionInformation)
type RedundantPduSessionInformation struct {
	// Rsn Redundancy Sequence Number. Possible values are
	//   - V1
	//   - V2
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Rsn)
	Rsn                  Rsn                    `json:"rsn"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RefToBinaryData defines model for RefToBinaryData.
type RefToBinaryData struct {
	ContentId            string                 `json:"contentId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReflectiveQoSAttribute defines model for ReflectiveQoSAttribute.
type ReflectiveQoSAttribute string

// RegistrationContextContainer Original definition in TS29518_Namf_Communication.yaml#/components/schemas/RegistrationContextContainer
type RegistrationContextContainer struct {
	// AllowedNssai Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AllowedNssai
	AllowedNssai     *AllowedNssai `json:"allowedNssai,omitempty"`
	AnN2ApId         int           `json:"anN2ApId"`
	AnN2IPv4Addr     Ipv4Addr      `json:"anN2IPv4Addr,omitempty"`
	AnN2IPv6Addr     *Ipv6Addr     `json:"anN2IPv6Addr,omitempty"`
	AnType           AccessType    `json:"anType"`
	AuthenticatedInd *bool         `json:"authenticatedInd,omitempty"`

	// CeModeBInd CE-mode-B Support Indicator. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/CeModeBInd)
	CeModeBInd       *CeModeBInd        `json:"ceModeBInd,omitempty"`
	ConfiguredNssai  []ConfiguredSnssai `json:"configuredNssai,omitempty"`
	IabNodeInd       *bool              `json:"iabNodeInd,omitempty"`
	InitialAmfN2ApId *int               `json:"initialAmfN2ApId,omitempty"`
	InitialAmfName   AmfName            `json:"initialAmfName"`
	LocalTimeZone    *TimeZone          `json:"localTimeZone,omitempty"`

	// LteMInd LTE-M Indication. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/LteMInd)
	LteMInd *LteMInd `json:"lteMInd,omitempty"`

	// NpnAccessInfo NPN Access Information. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NpnAccessInfo)
	NpnAccessInfo       *NpnAccessInfo  `json:"npnAccessInfo,omitempty"`
	RanNodeId           GlobalRanNodeId `json:"ranNodeId"`
	RejectedNssaiInPlmn []Snssai        `json:"rejectedNssaiInPlmn,omitempty"`
	RejectedNssaiInTa   []Snssai        `json:"rejectedNssaiInTa,omitempty"`
	RrcEstCause         string          `json:"rrcEstCause,omitempty"`
	SelectedPlmnId      *PlmnId         `json:"selectedPlmnId,omitempty"`

	// UeContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContext
	UeContext            UeContext              `json:"ueContext"`
	UeContextRequest     *bool                  `json:"ueContextRequest,omitempty"`
	UserLocation         UserLocation           `json:"userLocation"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RegistrationDataSetName Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/RegistrationDataSetName
type RegistrationDataSetName string

// RegistrationDataSets Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/RegistrationDataSets
type RegistrationDataSets struct {
	// Amf3Gpp Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/Amf3GppAccessRegistration
	Amf3Gpp *Amf3GppAccessRegistration `json:"amf3Gpp,omitempty"`

	// AmfNon3Gpp Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/AmfNon3GppAccessRegistration
	AmfNon3Gpp *AmfNon3GppAccessRegistration `json:"amfNon3Gpp,omitempty"`

	// SmfRegistration Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmfRegistrationInfo
	SmfRegistration *SmfRegistrationInfo `json:"smfRegistration,omitempty"`

	// Smsf3Gpp Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmsfRegistration
	Smsf3Gpp *SmsfRegistration `json:"smsf3Gpp,omitempty"`

	// SmsfNon3Gpp Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmsfRegistration
	SmsfNon3Gpp          *SmsfRegistration      `json:"smsfNon3Gpp,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RegistrationDatasetNames Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/RegistrationDatasetNames
type RegistrationDatasetNames = []RegistrationDataSetName

// RegistrationLocationInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/RegistrationLocationInfo
type RegistrationLocationInfo struct {
	AccessTypeList []AccessType `json:"accessTypeList"`
	AmfInstanceId  NfInstanceId `json:"amfInstanceId"`
	Guami          *Guami       `json:"guami,omitempty"`
	PlmnId         *PlmnId      `json:"plmnId,omitempty"`

	// VgmlcAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/VgmlcAddress
	VgmlcAddress         *VgmlcAddress          `json:"vgmlcAddress,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RegistrationReason Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/RegistrationReason
type RegistrationReason string

// ReleaseData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ReleaseData
type ReleaseData struct {
	N5gMmCauseValue *N5GMmCause   `json:"5gMmCauseValue,omitempty"`
	AddUeLocation   *UserLocation `json:"addUeLocation,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause *Cause `json:"cause,omitempty"`

	// N4Info Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4Info *N4Information `json:"n4Info,omitempty"`

	// N4InfoExt1 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`

	// N4InfoExt2 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt2              *N4Information            `json:"n4InfoExt2,omitempty"`
	NgApCause               *NgApCause                `json:"ngApCause,omitempty"`
	SecondaryRatUsageInfo   []SecondaryRatUsageInfo   `json:"secondaryRatUsageInfo,omitempty"`
	SecondaryRatUsageReport []SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`
	UeLocation              *UserLocation             `json:"ueLocation,omitempty"`
	UeTimeZone              *TimeZone                 `json:"ueTimeZone,omitempty"`
	AdditionalProperties    map[string]interface{}    `json:"-"`
}

// ReleasedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ReleasedData
type ReleasedData struct {
	ApnRateStatus *ApnRateStatus `json:"apnRateStatus,omitempty"`

	// N4Info Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4Info *N4Information `json:"n4Info,omitempty"`

	// N4InfoExt1 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`

	// N4InfoExt2 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt2           *N4Information         `json:"n4InfoExt2,omitempty"`
	SmallDataRateStatus  *SmallDataRateStatus   `json:"smallDataRateStatus,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Report Original definition in TS29503_Nudm_EE.yaml#/components/schemas/Report
type Report struct {
	union json.RawMessage
}

// ReportAmountMdt defines model for ReportAmountMdt.
type ReportAmountMdt string

// ReportIntervalMdt defines model for ReportIntervalMdt.
type ReportIntervalMdt string

// ReportIntervalNrMdt defines model for ReportIntervalNrMdt.
type ReportIntervalNrMdt string

// ReportItem defines model for ReportItem.
type ReportItem struct {
	Path                 string                 `json:"path"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReportTypeMdt defines model for ReportTypeMdt.
type ReportTypeMdt string

// ReportingFrequency Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ReportingFrequency
type ReportingFrequency string

// ReportingInformation Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/ReportingInformation
type ReportingInformation struct {
	GrpRepTime   *DurationSec `json:"grpRepTime,omitempty"`
	ImmRep       *bool        `json:"immRep,omitempty"`
	MaxReportNbr *Uinteger    `json:"maxReportNbr,omitempty"`
	MonDur       *DateTime    `json:"monDur,omitempty"`

	// NotifMethod Possible values are - PERIODIC - ONE_TIME - ON_EVENT_DETECTION
	//  (Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/NotificationMethod)
	NotifMethod          *NotificationMethod    `json:"notifMethod,omitempty"`
	RepPeriod            *DurationSec           `json:"repPeriod,omitempty"`
	SampRatio            SamplingRatio          `json:"sampRatio,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReportingLevel Possible values are - SER_ID_LEVEL: Indicates that the usage shall be reported on service id and rating group combination level. - RAT_GR_LEVEL: Indicates that the usage shall be reported on rating group level. - SPON_CON_LEVEL: Indicates that the usage shall be reported on sponsor identity and rating group combination level.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ReportingLevel)
type ReportingLevel struct {
	union json.RawMessage
}

// ReportingLevel0 defines model for ReportingLevel.0.
type ReportingLevel0 string

// ReportingLevel2 This string provides forward-compatibility with future extensions to the enumeration but is not used to encode content defined in the present version of this API.
type ReportingLevel2 = string

// ReportingOptions Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReportingOptions
type ReportingOptions struct {
	Expiry    *DateTime    `json:"expiry,omitempty"`
	GuardTime *DurationSec `json:"guardTime,omitempty"`

	// MaxNumOfReports Original definition in TS29503_Nudm_EE.yaml#/components/schemas/MaxNumOfReports
	MaxNumOfReports *MaxNumOfReports `json:"maxNumOfReports,omitempty"`

	// ReportMode Original definition in TS29503_Nudm_EE.yaml#/components/schemas/EventReportMode
	ReportMode           *EventReportMode       `json:"reportMode,omitempty"`
	ReportPeriod         *DurationSec           `json:"reportPeriod,omitempty"`
	SamplingRatio        SamplingRatio          `json:"samplingRatio,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReportingTrigger defines model for ReportingTrigger.
type ReportingTrigger string

// RequestIndication Possible values are - UE_REQ_PDU_SES_MOD - UE_REQ_PDU_SES_REL - PDU_SES_MOB - NW_REQ_PDU_SES_AUTH - NW_REQ_PDU_SES_MOD - NW_REQ_PDU_SES_REL - EBI_ASSIGNMENT_REQ - REL_DUE_TO_5G_AN_REQUEST
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RequestIndication)
type RequestIndication string

// RequestLocInfo Original definition in TS29518_Namf_Location.yaml#/components/schemas/RequestLocInfo
type RequestLocInfo struct {
	Req5gsLoc            *bool                  `json:"req5gsLoc,omitempty"`
	ReqCurrentLoc        *bool                  `json:"reqCurrentLoc,omitempty"`
	ReqRatType           *bool                  `json:"reqRatType,omitempty"`
	ReqTimeZone          *bool                  `json:"reqTimeZone,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RequestPosInfo Original definition in TS29518_Namf_Location.yaml#/components/schemas/RequestPosInfo
type RequestPosInfo struct {
	AdditionalLcsSuppGADShapes []string      `json:"additionalLcsSuppGADShapes,omitempty"`
	AfID                       *NfInstanceId `json:"afID,omitempty"`

	// AreaEventInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/AreaEventInfo
	AreaEventInfo interface{} `json:"areaEventInfo,omitempty"`

	// CodeWord Original reference TS29515_Ngmlc_Location.yaml#/components/schemas/CodeWord
	CodeWord *string `json:"codeWord,omitempty"`

	// ExternalClientIdentification Original reference TS29515_Ngmlc_Location.yaml#/components/schemas/ExternalClientIdentification
	ExternalClientIdentification *string `json:"externalClientIdentification,omitempty"`
	Gpsi                         Gpsi    `json:"gpsi,omitempty"`
	HgmlcCallBackURI             *Uri    `json:"hgmlcCallBackURI,omitempty"`

	// LcsClientType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/ExternalClientType
	LcsClientType string `json:"lcsClientType"`

	// LcsLocation Original definition in TS29518_Namf_Location.yaml#/components/schemas/LocationType
	LcsLocation LocationType `json:"lcsLocation"`

	// LcsQoS Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LocationQoS
	LcsQoS interface{} `json:"lcsQoS,omitempty"`

	// LcsServiceType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LcsServiceType
	LcsServiceType interface{} `json:"lcsServiceType,omitempty"`

	// LcsSupportedGADShapes Original reference TS29572_Nlmf_Location.yaml#/components/schemas/SupportedGADShapes
	LcsSupportedGADShapes *string `json:"lcsSupportedGADShapes,omitempty"`

	// LdrReference Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrReference
	LdrReference *string `json:"ldrReference,omitempty"`

	// LdrType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LdrType
	LdrType                 *string `json:"ldrType,omitempty"`
	LocationNotificationUri *Uri    `json:"locationNotificationUri,omitempty"`

	// MotionEventInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/MotionEventInfo
	MotionEventInfo interface{} `json:"motionEventInfo,omitempty"`
	OldGuami        *Guami      `json:"oldGuami,omitempty"`
	Pei             Pei         `json:"pei,omitempty"`

	// PeriodicEventInfo Original reference TS29572_Nlmf_Location.yaml#/components/schemas/PeriodicEventInfo
	PeriodicEventInfo interface{} `json:"periodicEventInfo,omitempty"`

	// Priority Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LcsPriority
	Priority          *string            `json:"priority,omitempty"`
	Supi              Supi               `json:"supi,omitempty"`
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// UePrivacyRequirements Original reference TS29515_Ngmlc_Location.yaml#/components/schemas/UePrivacyRequirements
	UePrivacyRequirements interface{} `json:"uePrivacyRequirements,omitempty"`

	// VelocityRequested Original reference TS29572_Nlmf_Location.yaml#/components/schemas/VelocityRequested
	VelocityRequested    *string                `json:"velocityRequested,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RequestType Possible values are - INITIAL_REQUEST - EXISTING_PDU_SESSION - INITIAL_EMERGENCY_REQUEST - EXISTING_EMERGENCY_PDU_SESSION
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RequestType)
type RequestType string

// RequestedQos Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RequestedQos
type RequestedQos struct {
	N5qi                 N5Qi                   `json:"5qi"`
	GbrDl                BitRate                `json:"gbrDl,omitempty"`
	GbrUl                BitRate                `json:"gbrUl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RequestedQosMonitoringParameter Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RequestedQosMonitoringParameter
type RequestedQosMonitoringParameter string

// RequestedRuleData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RequestedRuleData
type RequestedRuleData struct {
	// RefPccRuleIds An array of PCC rule id references to the PCC rules associated with the control data.
	RefPccRuleIds []string `json:"refPccRuleIds"`

	// ReqData Array of requested rule data type elements indicating what type of rule data is requested for the corresponding referenced PCC rules.
	ReqData              []RequestedRuleDataType `json:"reqData"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// RequestedRuleDataType Possible values are - CH_ID: Indicates that the requested rule data is the charging identifier.  - MS_TIME_ZONE: Indicates that the requested access network info type is the UE's timezone. - USER_LOC_INFO: Indicates that the requested access network info type is the UE's location. - RES_RELEASE: Indicates that the requested rule data is the result of the release of resource. - SUCC_RES_ALLO: Indicates that the requested rule data is the successful resource allocation. - EPS_FALLBACK: Indicates that the requested rule data is the report of QoS flow rejection due to EPS fallback.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RequestedRuleDataType)
type RequestedRuleDataType string

// RequestedUsageData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RequestedUsageData
type RequestedUsageData struct {
	// AllUmIds This boolean indicates whether requested usage data applies to all usage monitoring data instances. When it's not included, it means requested usage data shall only apply to the usage monitoring data instances referenced by the refUmIds attribute.
	AllUmIds *bool `json:"allUmIds,omitempty"`

	// RefUmIds An array of usage monitoring data id references to the usage monitoring data instances for which the PCF is requesting a usage report. This attribute shall only be provided when allUmIds is not set to true.
	RefUmIds             []string               `json:"refUmIds,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RequiredAccessInfo Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/RequiredAccessInfo
type RequiredAccessInfo string

// ResStar Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/ResStar
type ResStar = string

// ReservPriority Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ReservPriority
type ReservPriority string

// ResourceItem Identifies a subscription to policy data change notification when the change occurs in a fragment (subset of resource data) of a given resource. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/ResourceItem)
type ResourceItem struct {
	Items                []ItemPath             `json:"items"`
	MonResourceUri       Uri                    `json:"monResourceUri"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ResourceStatus Possible values are - RELEASED - UNCHANGED - TRANSFERRED - UPDATED - ALT_ANCHOR_SMF
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ResourceStatus)
type ResourceStatus string

// ResourcesAllocationInfo describes the status of the PCC rule(s) related to certain media components. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ResourcesAllocationInfo)
type ResourcesAllocationInfo struct {
	AltSerReq *string `json:"altSerReq,omitempty"`
	Flows     []Flows `json:"flows,omitempty"`

	// McResourcStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/MediaComponentResourcesStatus
	McResourcStatus      *MediaComponentResourcesStatus `json:"mcResourcStatus,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// RestrictedSnssai Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/RestrictedSnssai
type RestrictedSnssai struct {
	HomePlmnId           PlmnId                 `json:"homePlmnId"`
	HomePlmnIdList       []PlmnId               `json:"homePlmnIdList,omitempty"`
	RoamingRestriction   *bool                  `json:"roamingRestriction,omitempty"`
	SNssaiList           []ExtSnssai            `json:"sNssaiList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RestrictionType defines model for RestrictionType.
type RestrictionType string

// ResynchronizationInfo Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ResynchronizationInfo
type ResynchronizationInfo struct {
	// Auts Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Auts
	Auts Auts `json:"auts"`

	// Rand Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Rand
	Rand                 Rand                   `json:"rand"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RetrieveData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RetrieveData
type RetrieveData struct {
	SmallDataRateStatusReq *bool                  `json:"smallDataRateStatusReq,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// RetrievedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RetrievedData
type RetrievedData struct {
	SmallDataRateStatus  *SmallDataRateStatus   `json:"smallDataRateStatus,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RfspIndex defines model for RfspIndex.
type RfspIndex = int

// RfspIndexRm defines model for RfspIndexRm.
type RfspIndexRm = int

// RgAuthCtx Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/RgAuthCtx
type RgAuthCtx struct {
	AuthInd              bool                   `json:"authInd"`
	Supi                 Supi                   `json:"supi,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RgAuthenticationInfo Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/RgAuthenticationInfo
type RgAuthenticationInfo struct {
	AuthenticatedInd bool `json:"authenticatedInd"`

	// Suci Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/Suci
	Suci                 Suci                   `json:"suci"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RgWirelineCharacteristics defines model for RgWirelineCharacteristics.
type RgWirelineCharacteristics = Bytes

// RmInfo Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/RmInfo
type RmInfo struct {
	AccessType AccessType `json:"accessType"`

	// RmState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/RmState
	RmState              RmState                `json:"rmState"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RmState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/RmState
type RmState string

// RoamingIndication Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/RoamingIndication
type RoamingIndication string

// RoamingOdb defines model for RoamingOdb.
type RoamingOdb string

// RoamingStatusReport Original definition in TS29503_Nudm_EE.yaml#/components/schemas/RoamingStatusReport
type RoamingStatusReport struct {
	NewServingPlmn       PlmnId                 `json:"newServingPlmn"`
	Roaming              bool                   `json:"roaming"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RouteInformation defines model for RouteInformation.
type RouteInformation struct {
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	PortNumber           Uinteger               `json:"portNumber"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RouteToLocation defines model for RouteToLocation.
type RouteToLocation struct {
	Dnai                 Dnai                   `json:"dnai"`
	RouteInfo            *RouteInformation      `json:"routeInfo"`
	RouteProfId          *string                `json:"routeProfId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RoutingAreaId defines model for RoutingAreaId.
type RoutingAreaId struct {
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	Rac                  string                 `json:"rac"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Rsn Redundancy Sequence Number. Possible values are
//   - V1
//   - V2
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Rsn)
type Rsn string

// RuleOperation Possible values are - CREATE_PCC_RULE: Indicates to create a new PCC rule to reserve the resource requested by the UE.  - DELETE_PCC_RULE: Indicates to delete a PCC rule corresponding to reserve the resource requested by the UE. - MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS: Indicates to modify the PCC rule by adding new packet filter(s). - MODIFY_ PCC_RULE_AND_REPLACE_PACKET_FILTERS: Indicates to modify the PCC rule by replacing the existing packet filter(s). - MODIFY_ PCC_RULE_AND_DELETE_PACKET_FILTERS: Indicates to modify the PCC rule by deleting the existing packet filter(s). - MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS: Indicates to modify the PCC rule by modifying the QoS of the PCC rule.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RuleOperation)
type RuleOperation string

// RuleReport Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RuleReport
type RuleReport struct {
	// ContVers Indicates the version of a PCC rule.
	ContVers []ContentVersion `json:"contVers,omitempty"`

	// FailureCode Possible values are
	//   - UNK_RULE_ID: Indicates that the pre-provisioned PCC rule could not be successfully activated because the PCC rule identifier is unknown to the SMF.
	//   - RA_GR_ERR: Indicate that the PCC rule could not be successfully installed or enforced because the Rating Group specified within the Charging Data policy decision which the PCC rule refers to is unknown or, invalid.
	//   - SER_ID_ERR: Indicate that the PCC rule could not be successfully installed or enforced because the Service Identifier specified within the Charging Data policy decision which the PCC rule refers to is invalid, unknown, or not applicable to the service being charged.
	//   - NF_MAL: Indicate that the PCC rule could not be successfully installed (for those provisioned from the PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to SMF/UPF malfunction.
	//   - RES_LIM: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to a limitation of resources at the SMF/UPF.
	//   - MAX_NR_QoS_FLOW: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to the fact that the maximum number of QoS flows has been reached for the PDU session.
	//   - MISS_FLOW_INFO: Indicate that the PCC rule could not be successfully installed or enforced because neither the "flowInfos" attribute nor the "appId" attribute is specified within the PccRule data structure by the PCF during the first install request of the PCC rule.
	//   - RES_ALLO_FAIL: Indicate that the PCC rule could not be successfully installed or maintained since the QoS flow establishment/modification failed, or the QoS flow was released.
	//   - UNSUCC_QOS_VAL: indicate that the QoS validation has failed or when Guaranteed Bandwidth > Max-Requested-Bandwidth.
	//   - INCOR_FLOW_INFO: Indicate that the PCC rule could not be successfully installed or modified at the SMF because the provided flow information is not supported by the network (e.g. the provided IP address(es) or Ipv6 prefix(es) do not correspond to an IP version applicable for the PDU session).
	//   - PS_TO_CS_HAN: Indicate that the PCC rule could not be maintained because of PS to CS handover.
	//   - APP_ID_ERR: Indicate that the rule could not be successfully installed or enforced because the Application Identifier is invalid, unknown, or not applicable to the application required for detection.
	//   - NO_QOS_FLOW_BOUND: Indicate that there is no QoS flow which the SMF can bind the PCC rule(s) to.
	//   - FILTER_RES: Indicate that the Flow Information within the "flowInfos" attribute cannot be handled by the SMF because any of the restrictions defined in subclause 5.4.2 of 3GPP TS 29.212 was not met.
	//   - MISS_REDI_SER_ADDR: Indicate that the PCC rule could not be successfully installed or enforced at the SMF because there is no valid Redirect Server Address within the Traffic Control Data policy decision which the PCC rule refers to provided by the PCF and no preconfigured redirection address for this PCC rule at the SMF.
	//   - CM_END_USER_SER_DENIED: Indicate that the charging system denied the service request due to service restrictions (e.g. terminate rating group) or limitations related to the end-user, for example the end-user's account could not cover the requested service.
	//   - CM_CREDIT_CON_NOT_APP: Indicate that the charging system determined that the service can be granted to the end user but no further credit control is needed for the service (e.g. service is free of charge or is treated for offline charging).
	//   - CM_AUTH_REJ: Indicate that the charging system denied the service request in order to terminate the service for which credit is requested.
	//   - CM_USER_UNK: Indicate that the specified end user could not be found in the charging system.
	//   - CM_RAT_FAILED: Indicate that the charging system cannot rate the service request due to insufficient rating input, incorrect AVP combination or due to an attribute or an attribute value that is not recognized or supported in the rating.
	//   - UE_STA_SUSP: Indicates that the UE is in suspend state.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FailureCode)
	FailureCode *PcfFailureCode `json:"failureCode,omitempty"`

	// FinUnitAct Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/FinalUnitAction
	FinUnitAct *string `json:"finUnitAct,omitempty"`

	// PccRuleIds Contains the identifier of the affected PCC rule(s).
	PccRuleIds []string `json:"pccRuleIds"`

	// RanNasRelCauses indicates the RAN or NAS release cause code information.
	RanNasRelCauses []RanNasRelCause `json:"ranNasRelCauses,omitempty"`

	// RuleStatus Possible values are - ACTIVE: Indicates that the PCC rule(s) are successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF), or the session rule(s) are successfully installed  - INACTIVE: Indicates that the PCC rule(s) are removed (for those provisioned from PCF) or inactive (for those pre-defined in SMF) or the session rule(s) are removed.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RuleStatus)
	RuleStatus           RuleStatus             `json:"ruleStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RuleStatus Possible values are - ACTIVE: Indicates that the PCC rule(s) are successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF), or the session rule(s) are successfully installed  - INACTIVE: Indicates that the PCC rule(s) are removed (for those provisioned from PCF) or inactive (for those pre-defined in SMF) or the session rule(s) are removed.
//
//	(Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RuleStatus)
type RuleStatus string

// S1UeNetworkCapability defines model for S1UeNetworkCapability.
type S1UeNetworkCapability = Bytes

// SMPolicyFlowDescription Defines a packet filter for an IP flow. (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDescription)
type SMPolicyFlowDescription = string

// SMPolicyQosMonitoringReport Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosMonitoringReport
type SMPolicyQosMonitoringReport struct {
	DlDelays []int `json:"dlDelays,omitempty"`

	// RefPccRuleIds An array of PCC rule id references to the PCC rules associated with the QoS monitoring report.
	RefPccRuleIds        []string               `json:"refPccRuleIds"`
	RtDelays             []int                  `json:"rtDelays,omitempty"`
	UlDelays             []int                  `json:"ulDelays,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SMPolicyQosNotificationControlInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosNotificationControlInfo
type SMPolicyQosNotificationControlInfo struct {
	AltQosParamId *string `json:"altQosParamId,omitempty"`

	// ContVer Represents the content version of some content. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ContentVersion)
	ContVer *ContentVersion `json:"contVer,omitempty"`

	// NotifType Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/QosNotifType
	NotifType QosNotifType `json:"notifType"`

	// RefPccRuleIds An array of PCC rule id references to the PCC rules associated with the QoS notification control info.
	RefPccRuleIds        []string               `json:"refPccRuleIds"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SamplingRatio defines model for SamplingRatio.
type SamplingRatio = int

// SbiBindingLevel Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SbiBindingLevel
type SbiBindingLevel string

// ScType Original definition in TS29518_Namf_Communication.yaml#/components/schemas/ScType
type ScType string

// ScheduledCommunicationTime defines model for ScheduledCommunicationTime.
type ScheduledCommunicationTime struct {
	// DaysOfWeek Identifies the day(s) of the week. If absent, it indicates every day of the week.
	DaysOfWeek []DayOfWeek `json:"daysOfWeek,omitempty"`

	// TimeOfDayEnd String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayEnd *TimeOfDay `json:"timeOfDayEnd,omitempty"`

	// TimeOfDayStart String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayStart       *TimeOfDay             `json:"timeOfDayStart,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ScheduledCommunicationTimeRm defines model for ScheduledCommunicationTimeRm.
type ScheduledCommunicationTimeRm struct {
	// DaysOfWeek Identifies the day(s) of the week. If absent, it indicates every day of the week.
	DaysOfWeek []DayOfWeek `json:"daysOfWeek,omitempty"`

	// TimeOfDayEnd String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayEnd *TimeOfDay `json:"timeOfDayEnd,omitempty"`

	// TimeOfDayStart String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
	TimeOfDayStart       *TimeOfDay             `json:"timeOfDayStart,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ScheduledCommunicationType defines model for ScheduledCommunicationType.
type ScheduledCommunicationType string

// ScheduledCommunicationTypeRm defines model for ScheduledCommunicationTypeRm.
type ScheduledCommunicationTypeRm string

// ScpDomainCond Subscription to a set of NF or SCP instances belonging to certain SCP domains (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ScpDomainCond)
type ScpDomainCond struct {
	ScpDomains           []string               `json:"scpDomains"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ScpDomainInfo SCP Domain specific information (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ScpDomainInfo)
type ScpDomainInfo struct {
	// ScpFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	ScpFqdn              *Fqdn                  `json:"scpFqdn,omitempty"`
	ScpIpEndPoints       []IpEndPoint           `json:"scpIpEndPoints,omitempty"`
	ScpPorts             *map[string]int        `json:"scpPorts,omitempty"`
	ScpPrefix            *string                `json:"scpPrefix,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ScpInfo Information of an SCP Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ScpInfo)
type ScpInfo struct {
	AddressDomains []string `json:"addressDomains,omitempty"`

	// IpReachability Indicates the type(s) of IP addresses reachable via an SCP (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/IpReachability)
	IpReachability       *IpReachability           `json:"ipReachability,omitempty"`
	Ipv4AddrRanges       []Ipv4AddressRange        `json:"ipv4AddrRanges,omitempty"`
	Ipv4Addresses        []Ipv4Addr                `json:"ipv4Addresses,omitempty"`
	Ipv6PrefixRanges     []Ipv6PrefixRange         `json:"ipv6PrefixRanges,omitempty"`
	Ipv6Prefixes         []Ipv6Prefix              `json:"ipv6Prefixes,omitempty"`
	RemotePlmnList       []PlmnId                  `json:"remotePlmnList,omitempty"`
	ScpDomainInfoList    *map[string]ScpDomainInfo `json:"scpDomainInfoList,omitempty"`
	ScpPorts             *map[string]int           `json:"scpPorts,omitempty"`
	ScpPrefix            *string                   `json:"scpPrefix,omitempty"`
	ServedNfSetIdList    []NfSetId                 `json:"servedNfSetIdList,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// SdRange A range of SDs (Slice Differentiators)
type SdRange struct {
	End                  string                 `json:"end,omitempty"`
	Start                string                 `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SdmSubsModification Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SdmSubsModification
type SdmSubsModification struct {
	Expires               *DateTime              `json:"expires,omitempty"`
	MonitoredResourceUris []Uri                  `json:"monitoredResourceUris,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// SdmSubscription Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SdmSubscription
type SdmSubscription struct {
	// AmfServiceName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	AmfServiceName    *ServiceName `json:"amfServiceName,omitempty"`
	CallbackReference Uri          `json:"callbackReference"`

	// ContextInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ContextInfo
	ContextInfo           *ContextInfo `json:"contextInfo,omitempty"`
	Dnn                   *Dnn         `json:"dnn,omitempty"`
	Expires               *DateTime    `json:"expires,omitempty"`
	ImmediateReport       *bool        `json:"immediateReport,omitempty"`
	ImplicitUnsubscribe   *bool        `json:"implicitUnsubscribe,omitempty"`
	MonitoredResourceUris []Uri        `json:"monitoredResourceUris"`
	NfInstanceId          NfInstanceId `json:"nfInstanceId"`
	PlmnId                *PlmnId      `json:"plmnId,omitempty"`

	// Report Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SubscriptionDataSets
	Report               *SubscriptionDataSets  `json:"report,omitempty"`
	SingleNssai          *Snssai                `json:"singleNssai,omitempty"`
	SubscriptionId       *string                `json:"subscriptionId,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	UniqueSubscription   *bool                  `json:"uniqueSubscription,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SeafData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SeafData
type SeafData struct {
	// KeyAmf Original definition in TS29518_Namf_Communication.yaml#/components/schemas/KeyAmf
	KeyAmf               KeyAmf `json:"keyAmf"`
	KeyAmfChangeInd      *bool  `json:"keyAmfChangeInd,omitempty"`
	KeyAmfHDerivationInd *bool  `json:"keyAmfHDerivationInd,omitempty"`
	Ncc                  *int   `json:"ncc,omitempty"`

	// NgKsi Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgKsi
	NgKsi                NgKsi                  `json:"ngKsi"`
	Nh                   string                 `json:"nh,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SearchResult Contains the list of NF Profiles returned in a Discovery response (Original definition in TS29510_Nnrf_NFDiscovery.yaml#/components/schemas/SearchResult)
type SearchResult struct {
	NfInstances          []NFDiscoveryNFProfile `json:"nfInstances"`
	NrfSupportedFeatures *SupportedFeatures     `json:"nrfSupportedFeatures,omitempty"`
	NumNfInstComplete    *Uint32                `json:"numNfInstComplete,omitempty"`

	// PreferredSearch Contains information on whether the returned NFProfiles match the preferred query parameters (Original definition in TS29510_Nnrf_NFDiscovery.yaml#/components/schemas/PreferredSearch)
	PreferredSearch      *PreferredSearch       `json:"preferredSearch,omitempty"`
	SearchId             *string                `json:"searchId,omitempty"`
	ValidityPeriod       *int                   `json:"validityPeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SecondaryRatUsageInfo defines model for SecondaryRatUsageInfo.
type SecondaryRatUsageInfo struct {
	PduSessionUsageData  []VolumeTimedReport    `json:"pduSessionUsageData,omitempty"`
	QosFlowsUsageData    []QosFlowUsageReport   `json:"qosFlowsUsageData,omitempty"`
	SecondaryRatType     RatType                `json:"secondaryRatType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SecondaryRatUsageReport defines model for SecondaryRatUsageReport.
type SecondaryRatUsageReport struct {
	QosFlowsUsageData    []QosFlowUsageReport   `json:"qosFlowsUsageData"`
	SecondaryRatType     RatType                `json:"secondaryRatType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SecuredPacket Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SecuredPacket
type SecuredPacket = []byte

// SecurityResult Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SecurityResult
type SecurityResult struct {
	// ConfidentialityProtectionResult Possible values are
	//   - PERFORMED
	//   - NOT_PERFORMED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProtectionResult)
	ConfidentialityProtectionResult *ProtectionResult `json:"confidentialityProtectionResult,omitempty"`

	// IntegrityProtectionResult Possible values are
	//   - PERFORMED
	//   - NOT_PERFORMED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProtectionResult)
	IntegrityProtectionResult *ProtectionResult      `json:"integrityProtectionResult,omitempty"`
	AdditionalProperties      map[string]interface{} `json:"-"`
}

// SendMoDataReqData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SendMoDataReqData
type SendMoDataReqData struct {
	MoData               RefToBinaryData        `json:"moData"`
	MoExpDataCounter     *MoExpDataCounter      `json:"moExpDataCounter,omitempty"`
	UeLocation           *UserLocation          `json:"ueLocation,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SensorMeasurement defines model for SensorMeasurement.
type SensorMeasurement string

// SequenceNumber Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SequenceNumber
type SequenceNumber struct {
	// DifSign Original definition in TS29505_Subscription_Data.yaml#/components/schemas/Sign
	DifSign     Sign            `json:"difSign,omitempty"`
	IndLength   *int            `json:"indLength,omitempty"`
	LastIndexes *map[string]int `json:"lastIndexes,omitempty"`
	Sqn         string          `json:"sqn,omitempty"`

	// SqnScheme Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SqnScheme
	SqnScheme            *SqnScheme             `json:"sqnScheme,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ServAuthInfo Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ServAuthInfo
type ServAuthInfo string

// ServiceAreaId defines model for ServiceAreaId.
type ServiceAreaId struct {
	Lac                  string                 `json:"lac"`
	PlmnId               PlmnId                 `json:"plmnId"`
	Sac                  string                 `json:"sac"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ServiceAreaRestriction defines model for ServiceAreaRestriction.
type ServiceAreaRestriction struct {
	Areas                         *[]Area                `json:"areas,omitempty"`
	MaxNumOfTAs                   *Uinteger              `json:"maxNumOfTAs,omitempty"`
	MaxNumOfTAsForNotAllowedAreas *Uinteger              `json:"maxNumOfTAsForNotAllowedAreas,omitempty"`
	RestrictionType               *RestrictionType       `json:"restrictionType,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// ServiceId defines model for ServiceId.
type ServiceId = Uint32

// ServiceIdentification Original definition in TS29523_Npcf_EventExposure.yaml#/components/schemas/ServiceIdentification
type ServiceIdentification struct {
	// AfAppId Contains an AF application identifier. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AfAppId)
	AfAppId              *AfAppId               `json:"afAppId,omitempty"`
	ServEthFlows         []EthernetFlowInfo     `json:"servEthFlows,omitempty"`
	ServIpFlows          []IpFlowInfo           `json:"servIpFlows,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ServiceInfoStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ServiceInfoStatus
type ServiceInfoStatus string

// ServiceName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
type ServiceName string

// ServiceNameCond Subscription to a set of NFs based on their support for a given Service Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceNameCond)
type ServiceNameCond struct {
	// ServiceName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	ServiceName          ServiceName            `json:"serviceName"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ServiceParameterData Original definition in TS29519_Application_Data.yaml#/components/schemas/ServiceParameterData
type ServiceParameterData struct {
	AnyUeInd *bool `json:"anyUeInd,omitempty"`

	// AppId Identifies an application.
	AppId        *string `json:"appId,omitempty"`
	Dnn          *Dnn    `json:"dnn,omitempty"`
	InterGroupId GroupId `json:"interGroupId,omitempty"`

	// ParamOverPc5 Original reference TS29522_ServiceParameter.yaml#/components/schemas/ParameterOverPc5
	ParamOverPc5 *string `json:"paramOverPc5,omitempty"`

	// ParamOverUu Original reference TS29522_ServiceParameter.yaml#/components/schemas/ParameterOverUu
	ParamOverUu *string            `json:"paramOverUu,omitempty"`
	ResUri      *Uri               `json:"resUri,omitempty"`
	Snssai      *Snssai            `json:"snssai,omitempty"`
	Supi        Supi               `json:"supi,omitempty"`
	SuppFeat    *SupportedFeatures `json:"suppFeat,omitempty"`

	// UeIpv4 string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv4Addr)
	UeIpv4 *TS29122Ipv4Addr `json:"ueIpv4,omitempty"`

	// UeIpv6 string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv6Addr)
	UeIpv6               *TS29122Ipv6Addr       `json:"ueIpv6,omitempty"`
	UeMac                MacAddr48              `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ServiceTypeUnrelatedClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ServiceTypeUnrelatedClass
type ServiceTypeUnrelatedClass struct {
	AllowedGeographicArea []interface{} `json:"allowedGeographicArea,omitempty"`

	// CodeWordInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CodeWordInd
	CodeWordInd  *CodeWordInd `json:"codeWordInd,omitempty"`
	CodeWordList []CodeWord   `json:"codeWordList,omitempty"`

	// PrivacyCheckRelatedAction Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PrivacyCheckRelatedAction
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`

	// ServiceType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LcsServiceType
	ServiceType interface{} `json:"serviceType"`

	// ValidTimePeriod Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ValidTimePeriod
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ServiceUrn Contains values of the service URN and may include subservices. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/ServiceUrn)
type ServiceUrn = string

// ServingNetworkName Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ServingNetworkName
type ServingNetworkName = string

// ServingNfIdentity Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ServingNfIdentity
type ServingNfIdentity struct {
	// AnGwAddr describes the address of the access network gateway control node (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/AnGwAddress)
	AnGwAddr             *AnGwAddress           `json:"anGwAddr,omitempty"`
	Guami                *Guami                 `json:"guami,omitempty"`
	ServNfInstId         *NfInstanceId          `json:"servNfInstId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SessionManagementSubscriptionData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SessionManagementSubscriptionData
type SessionManagementSubscriptionData struct {
	// N3gppChargingCharacteristics Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/3GppChargingCharacteristics
	N3gppChargingCharacteristics *N3GppChargingCharacteristics `json:"3gppChargingCharacteristics,omitempty"`

	// DnnConfigurations A map (list of key-value pairs where Dnn, or optionally the Wildcard DNN, serves as key) of DnnConfigurations
	DnnConfigurations        *map[string]DnnConfiguration        `json:"dnnConfigurations,omitempty"`
	ExpectedUeBehavioursList *map[string]ExpectedUeBehaviourData `json:"expectedUeBehavioursList,omitempty"`
	InternalGroupIds         []GroupId                           `json:"internalGroupIds,omitempty"`
	OdbPacketServices        *OdbPacketServices                  `json:"odbPacketServices,omitempty"`

	// SharedDnnConfigurationsId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataId
	SharedDnnConfigurationsId SharedDataId `json:"sharedDnnConfigurationsId,omitempty"`

	// SharedTraceDataId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataId
	SharedTraceDataId        SharedDataId                     `json:"sharedTraceDataId,omitempty"`
	SharedVnGroupDataIds     *map[string]SharedDataId         `json:"sharedVnGroupDataIds,omitempty"`
	SingleNssai              Snssai                           `json:"singleNssai"`
	SuggestedPacketNumDlList *map[string]SuggestedPacketNumDl `json:"suggestedPacketNumDlList,omitempty"`
	TraceData                *TraceData                       `json:"traceData"`
	AdditionalProperties     map[string]interface{}           `json:"-"`
}

// SessionRule Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SessionRule
type SessionRule struct {
	// AuthDefQos Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AuthorizedDefaultQos
	AuthDefQos   *AuthorizedDefaultQos `json:"authDefQos,omitempty"`
	AuthSessAmbr *Ambr                 `json:"authSessAmbr,omitempty"`

	// RefCondData A reference to the condition data. It is the condId described in subclause 5.6.2.9.
	RefCondData *string `json:"refCondData"`

	// RefUmData A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12.
	RefUmData *string `json:"refUmData"`

	// RefUmN3gData A reference to UsageMonitoringData policy decision type to apply for Non-3GPP access. It is the umId described in subclause 5.6.2.12.
	RefUmN3gData *string `json:"refUmN3gData"`

	// SessRuleId Univocally identifies the session rule within a PDU session.
	SessRuleId           string                 `json:"sessRuleId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SessionRuleFailureCode Possible values are
//   - NF_MAL: Indicate that the PCC rule could not be successfully installed (for those provisioned from the PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to SMF/UPF malfunction.
//   - RES_LIM: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to a limitation of resources at the SMF/UPF.
//   - UNSUCC_QOS_VAL: indicate that the QoS validation has failed.
//   - UE_STA_SUSP: Indicates that the UE is in suspend state.
//     (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SessionRuleFailureCode)
type SessionRuleFailureCode string

// SessionRuleReport Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SessionRuleReport
type SessionRuleReport struct {
	// PolicyDecFailureReports Contains the type(s) of failed policy decision and/or condition data.
	PolicyDecFailureReports []PolicyDecisionFailureCode `json:"policyDecFailureReports,omitempty"`

	// RuleIds Contains the identifier of the affected session rule(s).
	RuleIds []string `json:"ruleIds"`

	// RuleStatus Possible values are - ACTIVE: Indicates that the PCC rule(s) are successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF), or the session rule(s) are successfully installed  - INACTIVE: Indicates that the PCC rule(s) are removed (for those provisioned from PCF) or inactive (for those pre-defined in SMF) or the session rule(s) are removed.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RuleStatus)
	RuleStatus RuleStatus `json:"ruleStatus"`

	// SessRuleFailureCode Possible values are
	//   - NF_MAL: Indicate that the PCC rule could not be successfully installed (for those provisioned from the PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to SMF/UPF malfunction.
	//   - RES_LIM: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to a limitation of resources at the SMF/UPF.
	//   - UNSUCC_QOS_VAL: indicate that the QoS validation has failed.
	//   - UE_STA_SUSP: Indicates that the UE is in suspend state.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SessionRuleFailureCode)
	SessRuleFailureCode  *SessionRuleFailureCode `json:"sessRuleFailureCode,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// SharedData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedData
type SharedData struct {
	// SharedAmData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AccessAndMobilitySubscriptionData
	SharedAmData *AccessAndMobilitySubscriptionData `json:"sharedAmData,omitempty"`

	// SharedDataId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataId
	SharedDataId            SharedDataId                 `json:"sharedDataId"`
	SharedDnnConfigurations *map[string]DnnConfiguration `json:"sharedDnnConfigurations,omitempty"`

	// SharedSmsMngSubsData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsManagementSubscriptionData
	SharedSmsMngSubsData *SmsManagementSubscriptionData `json:"sharedSmsMngSubsData,omitempty"`

	// SharedSmsSubsData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsSubscriptionData
	SharedSmsSubsData    *SmsSubscriptionData    `json:"sharedSmsSubsData,omitempty"`
	SharedSnssaiInfos    *map[string]SnssaiInfo  `json:"sharedSnssaiInfos,omitempty"`
	SharedTraceData      *TraceData              `json:"sharedTraceData"`
	SharedVnGroupDatas   *map[string]VnGroupData `json:"sharedVnGroupDatas,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// SharedDataId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataId
type SharedDataId = string

// SharedDataIds Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataIds
type SharedDataIds = []SharedDataId

// Sign Original definition in TS29505_Subscription_Data.yaml#/components/schemas/Sign
type Sign string

// SipForkingIndication Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SipForkingIndication
type SipForkingIndication string

// SliceInfoForPDUSession Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/SliceInfoForPDUSession
type SliceInfoForPDUSession struct {
	HomeSnssai *Snssai `json:"homeSnssai,omitempty"`

	// RoamingIndication Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/RoamingIndication
	RoamingIndication    RoamingIndication      `json:"roamingIndication"`
	SNssai               Snssai                 `json:"sNssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SliceInfoForRegistration Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/SliceInfoForRegistration
type SliceInfoForRegistration struct {
	// AllowedNssaiCurrentAccess Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AllowedNssai
	AllowedNssaiCurrentAccess *AllowedNssai `json:"allowedNssaiCurrentAccess,omitempty"`

	// AllowedNssaiOtherAccess Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AllowedNssai
	AllowedNssaiOtherAccess    *AllowedNssai          `json:"allowedNssaiOtherAccess,omitempty"`
	DefaultConfiguredSnssaiInd *bool                  `json:"defaultConfiguredSnssaiInd,omitempty"`
	MappingOfNssai             []MappingOfSnssai      `json:"mappingOfNssai,omitempty"`
	RequestMapping             *bool                  `json:"requestMapping,omitempty"`
	RequestedNssai             []Snssai               `json:"requestedNssai,omitempty"`
	SNssaiForMapping           []Snssai               `json:"sNssaiForMapping,omitempty"`
	SubscribedNssai            []SubscribedSnssai     `json:"subscribedNssai,omitempty"`
	AdditionalProperties       map[string]interface{} `json:"-"`
}

// SliceInfoForUEConfigurationUpdate Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/SliceInfoForUEConfigurationUpdate
type SliceInfoForUEConfigurationUpdate struct {
	// AllowedNssaiCurrentAccess Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AllowedNssai
	AllowedNssaiCurrentAccess *AllowedNssai `json:"allowedNssaiCurrentAccess,omitempty"`

	// AllowedNssaiOtherAccess Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/AllowedNssai
	AllowedNssaiOtherAccess    *AllowedNssai          `json:"allowedNssaiOtherAccess,omitempty"`
	DefaultConfiguredSnssaiInd *bool                  `json:"defaultConfiguredSnssaiInd,omitempty"`
	MappingOfNssai             []MappingOfSnssai      `json:"mappingOfNssai,omitempty"`
	RequestedNssai             []Snssai               `json:"requestedNssai,omitempty"`
	SubscribedNssai            []SubscribedSnssai     `json:"subscribedNssai,omitempty"`
	AdditionalProperties       map[string]interface{} `json:"-"`
}

// SmContext Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContext
type SmContext struct {
	AddRanTunnelInfo    []QosFlowTunnel `json:"addRanTunnelInfo,omitempty"`
	AddRedRanTunnelInfo []QosFlowTunnel `json:"addRedRanTunnelInfo,omitempty"`
	AlwaysOnGranted     *bool           `json:"alwaysOnGranted,omitempty"`
	ChargingId          string          `json:"chargingId,omitempty"`

	// ChargingInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ChargingInformation
	ChargingInfo    *ChargingInformation `json:"chargingInfo,omitempty"`
	DlsetSupportInd *bool                `json:"dlsetSupportInd,omitempty"`

	// DnAaaAddress Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/IpAddress
	DnAaaAddress        *SmfIpAddress   `json:"dnAaaAddress,omitempty"`
	Dnn                 Dnn             `json:"dnn"`
	EnablePauseCharging *bool           `json:"enablePauseCharging,omitempty"`
	EpsBearerInfo       []EpsBearerInfo `json:"epsBearerInfo,omitempty"`

	// EpsPdnCnxInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxInfo
	EpsPdnCnxInfo         *EpsPdnCnxInfo `json:"epsPdnCnxInfo,omitempty"`
	ForwardingInd         *bool          `json:"forwardingInd,omitempty"`
	Gpsi                  Gpsi           `json:"gpsi,omitempty"`
	HSmfInstanceId        *NfInstanceId  `json:"hSmfInstanceId,omitempty"`
	HSmfServiceInstanceId *string        `json:"hSmfServiceInstanceId,omitempty"`
	HSmfUri               *Uri           `json:"hSmfUri,omitempty"`
	HplmnSnssai           *Snssai        `json:"hplmnSnssai,omitempty"`

	// Ipv6Index Original definition in TS29519_Policy_Data.yaml#/components/schemas/IpIndex
	Ipv6Index *IpIndex `json:"ipv6Index,omitempty"`

	// MaxIntegrityProtectedDataRate Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRate *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRate,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`
	NefExtBufSupportInd             *bool                          `json:"nefExtBufSupportInd,omitempty"`
	PcfGroupId                      *NfGroupId                     `json:"pcfGroupId,omitempty"`
	PcfId                           *NfInstanceId                  `json:"pcfId,omitempty"`
	PcfSetId                        *NfSetId                       `json:"pcfSetId,omitempty"`
	PduSessionId                    PduSessionId                   `json:"pduSessionId"`
	PduSessionRef                   *Uri                           `json:"pduSessionRef,omitempty"`

	// PduSessionSmfBinding Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SbiBindingLevel
	PduSessionSmfBinding      *SbiBindingLevel `json:"pduSessionSmfBinding,omitempty"`
	PduSessionSmfServiceSetId *NfServiceSetId  `json:"pduSessionSmfServiceSetId,omitempty"`
	PduSessionSmfSetId        *NfSetId         `json:"pduSessionSmfSetId,omitempty"`
	PduSessionType            PduSessionType   `json:"pduSessionType"`

	// PsaTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	PsaTunnelInfo *TunnelInfo        `json:"psaTunnelInfo,omitempty"`
	QosFlowsList  []QosFlowSetupItem `json:"qosFlowsList"`

	// RanTunnelInfo Tunnel Information per QoS Flow (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowTunnel)
	RanTunnelInfo *QosFlowTunnel `json:"ranTunnelInfo,omitempty"`
	RecoveryTime  *DateTime      `json:"recoveryTime,omitempty"`

	// RedRanTunnelInfo Tunnel Information per QoS Flow (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosFlowTunnel)
	RedRanTunnelInfo *QosFlowTunnel `json:"redRanTunnelInfo,omitempty"`

	// RedundantPduSessionInfo Redundant PDU Session Information (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RedundantPduSessionInformation)
	RedundantPduSessionInfo *RedundantPduSessionInformation `json:"redundantPduSessionInfo,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile interface{} `json:"roamingChargingProfile,omitempty"`
	RoutingIndicator       *string     `json:"routingIndicator,omitempty"`
	SNssai                 Snssai      `json:"sNssai"`

	// SelMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DnnSelectionMode)
	SelMode              *DnnSelectionMode      `json:"selMode,omitempty"`
	SelectedDnn          *Dnn                   `json:"selectedDnn,omitempty"`
	SessionAmbr          Ambr                   `json:"sessionAmbr"`
	SmfInstanceId        *NfInstanceId          `json:"smfInstanceId,omitempty"`
	SmfServiceInstanceId *string                `json:"smfServiceInstanceId,omitempty"`
	SmfUri               *Uri                   `json:"smfUri,omitempty"`
	UdmGroupId           *NfGroupId             `json:"udmGroupId,omitempty"`
	UeIpv4Address        Ipv4Addr               `json:"ueIpv4Address,omitempty"`
	UeIpv6Prefix         *Ipv6Prefix            `json:"ueIpv6Prefix,omitempty"`
	UpSecurity           *UpSecurity            `json:"upSecurity,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextCreateData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextCreateData
type SmContextCreateData struct {
	AddUeLocation     *UserLocation   `json:"addUeLocation,omitempty"`
	AdditionalAnType  AccessType      `json:"additionalAnType,omitempty"`
	AdditionalHsmfId  []NfInstanceId  `json:"additionalHsmfId,omitempty"`
	AdditionalHsmfUri []Uri           `json:"additionalHsmfUri,omitempty"`
	AdditionalSmfId   []NfInstanceId  `json:"additionalSmfId,omitempty"`
	AdditionalSmfUri  []Uri           `json:"additionalSmfUri,omitempty"`
	AnType            AccessType      `json:"anType"`
	ApnRateStatus     *ApnRateStatus  `json:"apnRateStatus,omitempty"`
	BackupAmfInfo     []BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	CpCiotEnabled     *bool           `json:"cpCiotEnabled,omitempty"`
	CpOnlyInd         *bool           `json:"cpOnlyInd,omitempty"`

	// DdnFailureSubs Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DdnFailureSubs
	DdnFailureSubs       *DdnFailureSubs `json:"ddnFailureSubs,omitempty"`
	DirectForwardingFlag *bool           `json:"directForwardingFlag,omitempty"`
	DlDataWaitingInd     *bool           `json:"dlDataWaitingInd,omitempty"`
	Dnn                  *Dnn            `json:"dnn,omitempty"`

	// EpsBearerCtxStatus Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerContextStatus
	EpsBearerCtxStatus EpsBearerContextStatus `json:"epsBearerCtxStatus,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsInterworkingIndication)
	EpsInterworkingInd    *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	ExtendedNasSmTimerInd *bool                      `json:"extendedNasSmTimerInd,omitempty"`
	Gpsi                  Gpsi                       `json:"gpsi,omitempty"`
	Guami                 *Guami                     `json:"guami,omitempty"`
	HSmfId                *NfInstanceId              `json:"hSmfId,omitempty"`
	HSmfUri               *Uri                       `json:"hSmfUri,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HoState)
	HoState                *HoState         `json:"hoState,omitempty"`
	HplmnSnssai            *Snssai          `json:"hplmnSnssai,omitempty"`
	IndirectForwardingFlag *bool            `json:"indirectForwardingFlag,omitempty"`
	InvokeNef              *bool            `json:"invokeNef,omitempty"`
	MaNwUpgradeInd         *bool            `json:"maNwUpgradeInd,omitempty"`
	MaRequestInd           *bool            `json:"maRequestInd,omitempty"`
	N1SmMsg                *RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo               *RefToBinaryData `json:"n2SmInfo,omitempty"`
	N2SmInfoExt1           *RefToBinaryData `json:"n2SmInfoExt1,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`

	// N2SmInfoTypeExt1 Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoTypeExt1        *N2SmInfoType  `json:"n2SmInfoTypeExt1,omitempty"`
	NrfUri                  *Uri           `json:"nrfUri,omitempty"`
	OldPduSessionId         *PduSessionId  `json:"oldPduSessionId,omitempty"`
	OldSmContextRef         *Uri           `json:"oldSmContextRef,omitempty"`
	OldSmfId                *NfInstanceId  `json:"oldSmfId,omitempty"`
	PcfGroupId              *NfGroupId     `json:"pcfGroupId,omitempty"`
	PcfId                   *NfInstanceId  `json:"pcfId,omitempty"`
	PcfSetId                *NfSetId       `json:"pcfSetId,omitempty"`
	PduSessionId            *PduSessionId  `json:"pduSessionId,omitempty"`
	PduSessionsActivateList []PduSessionId `json:"pduSessionsActivateList,omitempty"`
	Pei                     Pei            `json:"pei,omitempty"`
	PresenceInLadn          *PresenceState `json:"presenceInLadn,omitempty"`
	RanUnchangedInd         *bool          `json:"ranUnchangedInd,omitempty"`
	RatType                 *RatType       `json:"ratType,omitempty"`

	// RequestType Possible values are - INITIAL_REQUEST - EXISTING_PDU_SESSION - INITIAL_EMERGENCY_REQUEST - EXISTING_EMERGENCY_PDU_SESSION
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RequestType)
	RequestType      *RequestType `json:"requestType,omitempty"`
	RoutingIndicator *string      `json:"routingIndicator,omitempty"`
	SNssai           *Snssai      `json:"sNssai,omitempty"`

	// SelMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DnnSelectionMode)
	SelMode     *DnnSelectionMode `json:"selMode,omitempty"`
	SelectedDnn *Dnn              `json:"selectedDnn,omitempty"`

	// ServiceName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	ServiceName    *ServiceName `json:"serviceName,omitempty"`
	ServingNetwork PlmnIdNid    `json:"servingNetwork"`
	ServingNfId    NfInstanceId `json:"servingNfId"`
	SmContextRef   *Uri         `json:"smContextRef,omitempty"`

	// SmContextSmfBinding Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SbiBindingLevel
	SmContextSmfBinding      *SbiBindingLevel     `json:"smContextSmfBinding,omitempty"`
	SmContextSmfId           *NfInstanceId        `json:"smContextSmfId,omitempty"`
	SmContextSmfServiceSetId *NfServiceSetId      `json:"smContextSmfServiceSetId,omitempty"`
	SmContextSmfSetId        *NfSetId             `json:"smContextSmfSetId,omitempty"`
	SmContextStatusUri       Uri                  `json:"smContextStatusUri"`
	SmallDataRateStatus      *SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	SmfId                    *NfInstanceId        `json:"smfId,omitempty"`
	SmfTransferInd           *bool                `json:"smfTransferInd,omitempty"`
	SmfUri                   *Uri                 `json:"smfUri,omitempty"`
	Supi                     Supi                 `json:"supi,omitempty"`
	SupportedFeatures        *SupportedFeatures   `json:"supportedFeatures,omitempty"`

	// TargetId Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgRanTargetId
	TargetId *NgRanTargetId `json:"targetId,omitempty"`

	// TngfInfo Infomation of the TNGF endpoints (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TngfInfo)
	TngfInfo  *TngfInfo  `json:"tngfInfo,omitempty"`
	TraceData *TraceData `json:"traceData"`

	// TwifInfo Addressing information (IP addresses, FQDN) of the TWIF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TwifInfo)
	TwifInfo   *TwifInfo  `json:"twifInfo,omitempty"`
	UdmGroupId *NfGroupId `json:"udmGroupId,omitempty"`

	// UeEpsPdnConnection Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxContainer
	UeEpsPdnConnection  *EpsPdnCnxContainer `json:"ueEpsPdnConnection,omitempty"`
	UeLocation          *UserLocation       `json:"ueLocation,omitempty"`
	UeTimeZone          *TimeZone           `json:"ueTimeZone,omitempty"`
	UnauthenticatedSupi *bool               `json:"unauthenticatedSupi,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`

	// WAgfInfo Information of the W-AGF end-points (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/WAgfInfo)
	WAgfInfo             *WAgfInfo              `json:"wAgfInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextCreateError Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextCreateError
type SmContextCreateError struct {
	// Error Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
	Error    ExtProblemDetails `json:"error"`
	N1SmMsg  *RefToBinaryData  `json:"n1SmMsg,omitempty"`
	N2SmInfo *RefToBinaryData  `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoType         *N2SmInfoType          `json:"n2SmInfoType,omitempty"`
	RecoveryTime         *DateTime              `json:"recoveryTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextCreatedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextCreatedData
type SmContextCreatedData struct {
	AllocatedEbiList []EbiArpMapping `json:"allocatedEbiList,omitempty"`
	Gpsi             Gpsi            `json:"gpsi,omitempty"`
	HSmfUri          *Uri            `json:"hSmfUri,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HoState)
	HoState  *HoState         `json:"hoState,omitempty"`
	N2SmInfo *RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoType         *N2SmInfoType      `json:"n2SmInfoType,omitempty"`
	PduSessionId         *PduSessionId      `json:"pduSessionId,omitempty"`
	RecoveryTime         *DateTime          `json:"recoveryTime,omitempty"`
	SNssai               *Snssai            `json:"sNssai,omitempty"`
	SelectedOldSmfId     *NfInstanceId      `json:"selectedOldSmfId,omitempty"`
	SelectedSmfId        *NfInstanceId      `json:"selectedSmfId,omitempty"`
	SmfServiceInstanceId *string            `json:"smfServiceInstanceId,omitempty"`
	SmfUri               *Uri               `json:"smfUri,omitempty"`
	SupportedFeatures    *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextReleaseData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextReleaseData
type SmContextReleaseData struct {
	N5gMmCauseValue *N5GMmCause   `json:"5gMmCauseValue,omitempty"`
	AddUeLocation   *UserLocation `json:"addUeLocation,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause           *Cause           `json:"cause,omitempty"`
	IsmfReleaseOnly *bool            `json:"ismfReleaseOnly,omitempty"`
	N2SmInfo        *RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoType         *N2SmInfoType          `json:"n2SmInfoType,omitempty"`
	NgApCause            *NgApCause             `json:"ngApCause,omitempty"`
	UeLocation           *UserLocation          `json:"ueLocation,omitempty"`
	UeTimeZone           *TimeZone              `json:"ueTimeZone,omitempty"`
	VsmfReleaseOnly      *bool                  `json:"vsmfReleaseOnly,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextReleasedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextReleasedData
type SmContextReleasedData struct {
	ApnRateStatus        *ApnRateStatus         `json:"apnRateStatus,omitempty"`
	SmallDataRateStatus  *SmallDataRateStatus   `json:"smallDataRateStatus,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextRetrieveData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextRetrieveData
type SmContextRetrieveData struct {
	NotToTransferEbiList []SmfEpsBearerId `json:"notToTransferEbiList,omitempty"`
	RanUnchangedInd      *bool            `json:"ranUnchangedInd,omitempty"`
	ServingNetwork       *PlmnId          `json:"servingNetwork,omitempty"`

	// SmContextType Possible values are
	//   - EPS_PDN_CONNECTION
	//   - SM_CONTEXT
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextType)
	SmContextType *SmContextType `json:"smContextType,omitempty"`

	// TargetMmeCap Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MmeCapabilities
	TargetMmeCap         *MmeCapabilities       `json:"targetMmeCap,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextRetrievedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextRetrievedData
type SmContextRetrievedData struct {
	ApnRateStatus    *ApnRateStatus `json:"apnRateStatus,omitempty"`
	DlDataWaitingInd *bool          `json:"dlDataWaitingInd,omitempty"`

	// SmContext Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContext
	SmContext           *SmContext           `json:"smContext,omitempty"`
	SmallDataRateStatus *SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`

	// UeEpsPdnConnection Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxContainer
	UeEpsPdnConnection   EpsPdnCnxContainer     `json:"ueEpsPdnConnection"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextStatusNotification Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextStatusNotification
type SmContextStatusNotification struct {
	AltAnchorSmfId                    *NfInstanceId        `json:"altAnchorSmfId,omitempty"`
	AltAnchorSmfUri                   *Uri                 `json:"altAnchorSmfUri,omitempty"`
	ApnRateStatus                     *ApnRateStatus       `json:"apnRateStatus,omitempty"`
	DdnFailureStatus                  *bool                `json:"ddnFailureStatus,omitempty"`
	NewIntermediateSmfId              *NfInstanceId        `json:"newIntermediateSmfId,omitempty"`
	NewSmfId                          *NfInstanceId        `json:"newSmfId,omitempty"`
	NewSmfSetId                       *NfSetId             `json:"newSmfSetId,omitempty"`
	NotifyCorrelationIdsForddnFailure []string             `json:"notifyCorrelationIdsForddnFailure,omitempty"`
	OldSmContextRef                   *Uri                 `json:"oldSmContextRef,omitempty"`
	OldSmfId                          *NfInstanceId        `json:"oldSmfId,omitempty"`
	SmallDataRateStatus               *SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`

	// StatusInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/StatusInfo
	StatusInfo           StatusInfo             `json:"statusInfo"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextType Possible values are
//   - EPS_PDN_CONNECTION
//   - SM_CONTEXT
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextType)
type SmContextType string

// SmContextUpdateData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextUpdateData
type SmContextUpdateData struct {
	N5gMmCauseValue    *N5GMmCause      `json:"5gMmCauseValue,omitempty"`
	AddUeLocation      *UserLocation    `json:"addUeLocation,omitempty"`
	AdditionalAnType   AccessType       `json:"additionalAnType,omitempty"`
	AnType             AccessType       `json:"anType,omitempty"`
	AnTypeCanBeChanged *bool            `json:"anTypeCanBeChanged,omitempty"`
	AnTypeToReactivate AccessType       `json:"anTypeToReactivate,omitempty"`
	BackupAmfInfo      *[]BackupAmfInfo `json:"backupAmfInfo"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause          *Cause `json:"cause,omitempty"`
	DataForwarding *bool  `json:"dataForwarding,omitempty"`

	// DdnFailureSubs Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DdnFailureSubs
	DdnFailureSubs *DdnFailureSubs       `json:"ddnFailureSubs,omitempty"`
	EpsBearerSetup *[]EpsBearerContainer `json:"epsBearerSetup,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsInterworkingIndication)
	EpsInterworkingInd *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`

	// ExemptionInd Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExemptionInd
	ExemptionInd             *ExemptionInd               `json:"exemptionInd,omitempty"`
	ExtendedNasSmTimerInd    *bool                       `json:"extendedNasSmTimerInd,omitempty"`
	FailedToBeSwitched       *bool                       `json:"failedToBeSwitched,omitempty"`
	ForwardingBearerContexts []ForwardingBearerContainer `json:"forwardingBearerContexts,omitempty"`
	ForwardingFTeid          *Bytes                      `json:"forwardingFTeid,omitempty"`
	Guami                    *Guami                      `json:"guami,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HoState)
	HoState        *HoState `json:"hoState,omitempty"`
	MaNwUpgradeInd *bool    `json:"maNwUpgradeInd,omitempty"`

	// MaReleaseInd Possible values are
	//   - REL_MAPDU_OVER_3GPP
	//   - REL_MAPDU_OVER_N3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaReleaseIndication)
	MaReleaseInd     *MaReleaseIndication `json:"maReleaseInd,omitempty"`
	MaRequestInd     *bool                `json:"maRequestInd,omitempty"`
	MoExpDataCounter *MoExpDataCounter    `json:"moExpDataCounter,omitempty"`
	N1SmMsg          *RefToBinaryData     `json:"n1SmMsg,omitempty"`
	N2SmInfo         *RefToBinaryData     `json:"n2SmInfo,omitempty"`
	N2SmInfoExt1     *RefToBinaryData     `json:"n2SmInfoExt1,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`

	// N2SmInfoTypeExt1 Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoTypeExt1      *N2SmInfoType                      `json:"n2SmInfoTypeExt1,omitempty"`
	N9DlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n9DlForwardingTnlList,omitempty"`

	// N9ForwardingTunnel Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	N9ForwardingTunnel        *TunnelInfo                        `json:"n9ForwardingTunnel,omitempty"`
	N9UlForwardingTnlList     []IndirectDataForwardingTunnelInfo `json:"n9UlForwardingTnlList,omitempty"`
	NgApCause                 *NgApCause                         `json:"ngApCause,omitempty"`
	Pei                       Pei                                `json:"pei,omitempty"`
	PresenceInLadn            *PresenceState                     `json:"presenceInLadn,omitempty"`
	RatType                   *RatType                           `json:"ratType,omitempty"`
	Release                   *bool                              `json:"release,omitempty"`
	RevokeEbiList             []SmfEpsBearerId                   `json:"revokeEbiList,omitempty"`
	SNssai                    *Snssai                            `json:"sNssai,omitempty"`
	ServingNetwork            *PlmnIdNid                         `json:"servingNetwork,omitempty"`
	ServingNfId               *NfInstanceId                      `json:"servingNfId,omitempty"`
	SkipN2PduSessionResRelInd *bool                              `json:"skipN2PduSessionResRelInd,omitempty"`
	SmContextStatusUri        *Uri                               `json:"smContextStatusUri,omitempty"`
	SupportedFeatures         *SupportedFeatures                 `json:"supportedFeatures,omitempty"`

	// TargetId Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgRanTargetId
	TargetId          *NgRanTargetId `json:"targetId,omitempty"`
	TargetServingNfId *NfInstanceId  `json:"targetServingNfId,omitempty"`
	ToBeSwitched      *bool          `json:"toBeSwitched,omitempty"`
	TraceData         *TraceData     `json:"traceData"`
	UeLocation        *UserLocation  `json:"ueLocation,omitempty"`
	UeTimeZone        *TimeZone      `json:"ueTimeZone,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextUpdateError Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextUpdateError
type SmContextUpdateError struct {
	// Error Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
	Error    ExtProblemDetails `json:"error"`
	N1SmMsg  *RefToBinaryData  `json:"n1SmMsg,omitempty"`
	N2SmInfo *RefToBinaryData  `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`
	RecoveryTime *DateTime     `json:"recoveryTime,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextUpdatedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextUpdatedData
type SmContextUpdatedData struct {
	AllocatedEbiList []EbiArpMapping `json:"allocatedEbiList,omitempty"`

	// AnchorSmfFeatures Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/AnchorSmfFeatures
	AnchorSmfFeatures *AnchorSmfFeatures `json:"anchorSmfFeatures,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause                    *Cause                      `json:"cause,omitempty"`
	DataForwarding           *bool                       `json:"dataForwarding,omitempty"`
	EpsBearerSetup           []EpsBearerContainer        `json:"epsBearerSetup,omitempty"`
	ForwardingBearerContexts []ForwardingBearerContainer `json:"forwardingBearerContexts,omitempty"`
	ForwardingFTeid          *Bytes                      `json:"forwardingFTeid,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HoState)
	HoState         *HoState         `json:"hoState,omitempty"`
	MaAcceptedInd   *bool            `json:"maAcceptedInd,omitempty"`
	ModifiedEbiList []EbiArpMapping  `json:"modifiedEbiList,omitempty"`
	N1SmMsg         *RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo        *RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N2SmInfoType)
	N2SmInfoType          *N2SmInfoType                      `json:"n2SmInfoType,omitempty"`
	N3DlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n3DlForwardingTnlList,omitempty"`
	N3UlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n3UlForwardingTnlList,omitempty"`
	ReleaseEbiList        []SmfEpsBearerId                   `json:"releaseEbiList,omitempty"`
	SelectedOldSmfId      *NfInstanceId                      `json:"selectedOldSmfId,omitempty"`
	SelectedSmfId         *NfInstanceId                      `json:"selectedSmfId,omitempty"`
	SupportedFeatures     *SupportedFeatures                 `json:"supportedFeatures,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmPolicyAssociationReleaseCause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyAssociationReleaseCause
type SmPolicyAssociationReleaseCause string

// SmPolicyContextData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyContextData
type SmPolicyContextData struct {
	// N3gppPsDataOffStatus If it is included and set to true, the 3GPP PS Data Off is activated by the UE.
	N3gppPsDataOffStatus *bool `json:"3gppPsDataOffStatus,omitempty"`

	// AccNetChId Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AccNetChId
	AccNetChId *AccNetChId `json:"accNetChId,omitempty"`
	AccessType AccessType  `json:"accessType,omitempty"`

	// AddAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	AddAccessInfo *AdditionalAccessInfo `json:"addAccessInfo,omitempty"`

	// AtsssCapab Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AtsssCapability
	AtsssCapab *PcfAtsssCapability `json:"atsssCapab,omitempty"`

	// AuthProfIndex Indicates the DN-AAA authorization profile index
	AuthProfIndex *string `json:"authProfIndex,omitempty"`

	// ChargEntityAddr Describes the network entity within the access network performing charging (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AccNetChargingAddress)
	ChargEntityAddr         *AccNetChargingAddress `json:"chargEntityAddr,omitempty"`
	Chargingcharacteristics *string                `json:"chargingcharacteristics,omitempty"`
	Dnn                     Dnn                    `json:"dnn"`

	// DnnSelMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/DnnSelectionMode)
	DnnSelMode  *DnnSelectionMode `json:"dnnSelMode,omitempty"`
	Gpsi        Gpsi              `json:"gpsi,omitempty"`
	InterGrpIds []GroupId         `json:"interGrpIds,omitempty"`

	// InvalidSupi When this attribute is included and set to true, it indicates that the supi attribute contains an invalid value.This attribute shall be present if the SUPI is not available in the SMF or the SUPI is unauthenticated. When present it shall be set to true for an invalid SUPI and false (default) for a valid SUPI.
	InvalidSupi *bool `json:"invalidSupi,omitempty"`

	// IpDomain Indicates the IPv4 address domain
	IpDomain           *string        `json:"ipDomain,omitempty"`
	Ipv4Address        Ipv4Addr       `json:"ipv4Address,omitempty"`
	Ipv4FrameRouteList []Ipv4AddrMask `json:"ipv4FrameRouteList,omitempty"`
	Ipv6AddressPrefix  *Ipv6Prefix    `json:"ipv6AddressPrefix,omitempty"`
	Ipv6FrameRouteList []Ipv6Prefix   `json:"ipv6FrameRouteList,omitempty"`

	// MaPduInd Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/MaPduIndication
	MaPduInd        *MaPduIndication `json:"maPduInd,omitempty"`
	NotificationUri Uri              `json:"notificationUri"`

	// NumOfPackFilter Contains the number of supported packet filter for signalled QoS rules.
	NumOfPackFilter *int `json:"numOfPackFilter,omitempty"`

	// Offline If it is included and set to true, the offline charging is applied to the PDU session.
	Offline *bool `json:"offline,omitempty"`

	// Online If it is included and set to true, the online charging is applied to the PDU session.
	Online         *bool          `json:"online,omitempty"`
	PduSessionId   PduSessionId   `json:"pduSessionId"`
	PduSessionType PduSessionType `json:"pduSessionType"`
	Pei            Pei            `json:"pei,omitempty"`

	// QosFlowUsage Possible values are - GENERAL: Indicate no specific QoS flow usage information is available.  - IMS_SIG: Indicate that the QoS flow is used for IMS signalling only.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosFlowUsage)
	QosFlowUsage *QosFlowUsage `json:"qosFlowUsage,omitempty"`
	RatType      *RatType      `json:"ratType,omitempty"`
	RecoveryTime *DateTime     `json:"recoveryTime,omitempty"`

	// RefQosIndication If it is included and set to true, the reflective QoS is supported by the UE.
	RefQosIndication *bool `json:"refQosIndication,omitempty"`

	// ServNfId Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ServingNfIdentity
	ServNfId         *ServingNfIdentity    `json:"servNfId,omitempty"`
	ServingNetwork   *PlmnIdNid            `json:"servingNetwork,omitempty"`
	SliceInfo        Snssai                `json:"sliceInfo"`
	SmfId            *NfInstanceId         `json:"smfId,omitempty"`
	SubsDefQos       *SubscribedDefaultQos `json:"subsDefQos,omitempty"`
	SubsSessAmbr     *Ambr                 `json:"subsSessAmbr,omitempty"`
	Supi             Supi                  `json:"supi"`
	SuppFeat         *SupportedFeatures    `json:"suppFeat,omitempty"`
	TraceReq         *TraceData            `json:"traceReq"`
	UeTimeZone       *TimeZone             `json:"ueTimeZone,omitempty"`
	UserLocationInfo *UserLocation         `json:"userLocationInfo,omitempty"`

	// VplmnQos Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VplmnQos
	VplmnQos             *VplmnQos              `json:"vplmnQos,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmPolicyControl Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyControl
type SmPolicyControl struct {
	// Context Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyContextData
	Context SmPolicyContextData `json:"context"`

	// Policy Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyDecision
	Policy               SmPolicyDecision       `json:"policy"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmPolicyData Contains the SM policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SmPolicyData)
type SmPolicyData struct {
	SmPolicySnssaiData   map[string]SmPolicySnssaiData `json:"smPolicySnssaiData"`
	SuppFeat             *SupportedFeatures            `json:"suppFeat,omitempty"`
	UmData               *map[string]UsageMonData      `json:"umData,omitempty"`
	UmDataLimits         *map[string]UsageMonDataLimit `json:"umDataLimits,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// SmPolicyDataPatch Contains the SM policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SmPolicyDataPatch)
type SmPolicyDataPatch struct {
	SmPolicySnssaiData   *map[string]SmPolicySnssaiDataPatch `json:"smPolicySnssaiData,omitempty"`
	UmData               *map[string]UsageMonData            `json:"umData"`
	AdditionalProperties map[string]interface{}              `json:"-"`
}

// SmPolicyDecision Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyDecision
type SmPolicyDecision struct {
	// ChargingInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ChargingInformation
	ChargingInfo *ChargingInformation `json:"chargingInfo,omitempty"`

	// ChgDecs Map of Charging data policy decisions.
	ChgDecs *map[string]*ChargingData `json:"chgDecs"`

	// Conds A map of condition data with the content being as described in subclause 5.6.2.9.
	Conds *map[string]*ConditionData `json:"conds"`

	// Ipv4Index Original definition in TS29519_Policy_Data.yaml#/components/schemas/IpIndex
	Ipv4Index *IpIndex `json:"ipv4Index,omitempty"`

	// Ipv6Index Original definition in TS29519_Policy_Data.yaml#/components/schemas/IpIndex
	Ipv6Index *IpIndex `json:"ipv6Index,omitempty"`

	// LastReqRuleData Defines the last list of rule control data requested by the PCF.
	LastReqRuleData []RequestedRuleData `json:"lastReqRuleData,omitempty"`

	// LastReqUsageData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RequestedUsageData
	LastReqUsageData *RequestedUsageData `json:"lastReqUsageData,omitempty"`

	// Offline Indicates the offline charging is applicable to the PDU session when it is included and set to true.
	Offline *bool `json:"offline,omitempty"`

	// Online Indicates the online charging is applicable to the PDU session when it is included and set to true.
	Online *bool `json:"online,omitempty"`

	// PccRules A map of PCC rules with the content being the PCCRule as described in subclause 5.6.2.6.
	PccRules *map[string]*PccRule `json:"pccRules"`

	// PcscfRestIndication If it is included and set to true, it indicates the P-CSCF Restoration is requested.
	PcscfRestIndication *bool `json:"pcscfRestIndication,omitempty"`

	// PolicyCtrlReqTriggers Defines the policy control request triggers subscribed by the PCF.
	PolicyCtrlReqTriggers *[]PolicyControlRequestTrigger `json:"policyCtrlReqTriggers"`

	// PraInfos Map of PRA information.
	PraInfos *map[string]*PresenceInfoRm `json:"praInfos"`

	// QosChars Map of QoS characteristics for non standard 5QIs. This map uses the 5QI values as keys.
	QosChars *map[string]QosCharacteristics `json:"qosChars,omitempty"`

	// QosDecs Map of QoS data policy decisions.
	QosDecs *map[string]*QosData `json:"qosDecs,omitempty"`

	// QosFlowUsage Possible values are - GENERAL: Indicate no specific QoS flow usage information is available.  - IMS_SIG: Indicate that the QoS flow is used for IMS signalling only.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosFlowUsage)
	QosFlowUsage *QosFlowUsage `json:"qosFlowUsage,omitempty"`

	// QosMonDecs Map of QoS Monitoring data policy decisions.
	QosMonDecs *map[string]*QosMonitoringData `json:"qosMonDecs"`

	// RedSessIndication Indicates whether the PDU session is a redundant PDU session. If absent it means the PDU session is not a redundant PDU session.
	RedSessIndication  *bool        `json:"redSessIndication,omitempty"`
	ReflectiveQoSTimer *DurationSec `json:"reflectiveQoSTimer,omitempty"`

	// RelCause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyAssociationReleaseCause
	RelCause         *SmPolicyAssociationReleaseCause `json:"relCause,omitempty"`
	RevalidationTime *DateTime                        `json:"revalidationTime,omitempty"`

	// SessRules A map of Sessionrules with the content being the SessionRule as described in subclause 5.6.2.7.
	SessRules *map[string]*SessionRule `json:"sessRules,omitempty"`
	SuppFeat  *SupportedFeatures       `json:"suppFeat,omitempty"`

	// TraffContDecs Map of Traffic Control data policy decisions.
	TraffContDecs *map[string]*TrafficControlData `json:"traffContDecs,omitempty"`

	// TsnBridgeManCont Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt  *PortManagementContainer  `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`

	// UmDecs Map of Usage Monitoring data policy decisions.
	UmDecs               *map[string]*UsageMonitoringData `json:"umDecs"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// SmPolicyDeleteData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyDeleteData
type SmPolicyDeleteData struct {
	// AccuUsageReports Contains the usage report
	AccuUsageReports []AccuUsageReport `json:"accuUsageReports,omitempty"`

	// PduSessRelCause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PduSessionRelCause
	PduSessRelCause *PduSessionRelCause `json:"pduSessRelCause,omitempty"`

	// RanNasRelCauses Contains the RAN and/or NAS release cause.
	RanNasRelCauses      []RanNasRelCause       `json:"ranNasRelCauses,omitempty"`
	ServingNetwork       *PlmnIdNid             `json:"servingNetwork,omitempty"`
	UeTimeZone           *TimeZone              `json:"ueTimeZone,omitempty"`
	UserLocationInfo     *UserLocation          `json:"userLocationInfo,omitempty"`
	UserLocationInfoTime *DateTime              `json:"userLocationInfoTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmPolicyDnnData Contains the SM policy data for a given DNN (and S-NSSAI). (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SmPolicyDnnData)
type SmPolicyDnnData struct {
	AdcSupport      *bool                         `json:"adcSupport,omitempty"`
	AllowedServices []string                      `json:"allowedServices,omitempty"`
	BdtRefIds       *map[string]*BdtReferenceIdRm `json:"bdtRefIds"`

	// ChfInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ChargingInformation
	ChfInfo           *ChargingInformation `json:"chfInfo,omitempty"`
	Dnn               Dnn                  `json:"dnn"`
	GbrDl             BitRate              `json:"gbrDl,omitempty"`
	GbrUl             BitRate              `json:"gbrUl,omitempty"`
	ImsSignallingPrio *bool                `json:"imsSignallingPrio,omitempty"`

	// Ipv4Index Original definition in TS29519_Policy_Data.yaml#/components/schemas/IpIndex
	Ipv4Index *IpIndex `json:"ipv4Index,omitempty"`

	// Ipv6Index Original definition in TS29519_Policy_Data.yaml#/components/schemas/IpIndex
	Ipv6Index            *IpIndex                            `json:"ipv6Index,omitempty"`
	LocRoutNotAllowed    *bool                               `json:"locRoutNotAllowed,omitempty"`
	McsPriority          *bool                               `json:"mcsPriority,omitempty"`
	McsPriorityLevel     *int                                `json:"mcsPriorityLevel,omitempty"`
	MpsPriority          *bool                               `json:"mpsPriority,omitempty"`
	MpsPriorityLevel     *int                                `json:"mpsPriorityLevel,omitempty"`
	Offline              *bool                               `json:"offline,omitempty"`
	Online               *bool                               `json:"online,omitempty"`
	PraInfos             *map[string]PresenceInfo            `json:"praInfos,omitempty"`
	RefUmDataLimitIds    *map[string]*LimitIdToMonitoringKey `json:"refUmDataLimitIds,omitempty"`
	SubscCats            []string                            `json:"subscCats,omitempty"`
	SubscSpendingLimits  *bool                               `json:"subscSpendingLimits,omitempty"`
	AdditionalProperties map[string]interface{}              `json:"-"`
}

// SmPolicyDnnDataPatch Contains the SM policy data for a given DNN (and S-NSSAI). (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SmPolicyDnnDataPatch)
type SmPolicyDnnDataPatch struct {
	BdtRefIds            *map[string]*BdtReferenceIdRm `json:"bdtRefIds"`
	Dnn                  Dnn                           `json:"dnn"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// SmPolicyNotification Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyNotification
type SmPolicyNotification struct {
	ResourceUri *Uri `json:"resourceUri,omitempty"`

	// SmPolicyDecision Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyDecision
	SmPolicyDecision     *SmPolicyDecision      `json:"smPolicyDecision,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmPolicySnssaiData Contains the SM policy data for a given subscriber and S-NSSAI. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SmPolicySnssaiData)
type SmPolicySnssaiData struct {
	SmPolicyDnnData      *map[string]SmPolicyDnnData `json:"smPolicyDnnData,omitempty"`
	Snssai               Snssai                      `json:"snssai"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// SmPolicySnssaiDataPatch Contains the SM policy data for a given subscriber and S-NSSAI. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SmPolicySnssaiDataPatch)
type SmPolicySnssaiDataPatch struct {
	SmPolicyDnnData      *map[string]SmPolicyDnnDataPatch `json:"smPolicyDnnData,omitempty"`
	Snssai               Snssai                           `json:"snssai"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// SmPolicyUpdateContextData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyUpdateContextData
type SmPolicyUpdateContextData struct {
	// N3gppPsDataOffStatus If it is included and set to true, the 3GPP PS Data Off is activated by the UE.
	N3gppPsDataOffStatus *bool `json:"3gppPsDataOffStatus,omitempty"`

	// AccNetChIds Indicates the access network charging identifier for the PCC rule(s) or whole PDU session.
	AccNetChIds []AccNetChId `json:"accNetChIds,omitempty"`
	AccessType  AccessType   `json:"accessType,omitempty"`

	// AccuUsageReports Contains the usage report
	AccuUsageReports []AccuUsageReport `json:"accuUsageReports,omitempty"`

	// AddAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	AddAccessInfo          *AdditionalAccessInfo `json:"addAccessInfo,omitempty"`
	AddIpv6AddrPrefixes    *Ipv6Prefix           `json:"addIpv6AddrPrefixes,omitempty"`
	AddRelIpv6AddrPrefixes *Ipv6Prefix           `json:"addRelIpv6AddrPrefixes,omitempty"`

	// AppDetectionInfos Report the start/stop of the application traffic and detected SDF descriptions if applicable.
	AppDetectionInfos []AppDetectionInfo `json:"appDetectionInfos,omitempty"`

	// AtsssCapab Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AtsssCapability
	AtsssCapab *PcfAtsssCapability `json:"atsssCapab,omitempty"`

	// AuthProfIndex Indicates the DN-AAA authorization profile index
	AuthProfIndex *string `json:"authProfIndex,omitempty"`

	// CreditManageStatus Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/CreditManagementStatus
	CreditManageStatus *CreditManagementStatus `json:"creditManageStatus,omitempty"`
	InterGrpIds        []GroupId               `json:"interGrpIds,omitempty"`

	// IpDomain Indicates the IPv4 address domain
	IpDomain          *string     `json:"ipDomain,omitempty"`
	Ipv4Address       Ipv4Addr    `json:"ipv4Address,omitempty"`
	Ipv6AddressPrefix *Ipv6Prefix `json:"ipv6AddressPrefix,omitempty"`

	// MaPduInd Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/MaPduIndication
	MaPduInd     *MaPduIndication         `json:"maPduInd,omitempty"`
	MulAddrInfos []IpMulticastAddressInfo `json:"mulAddrInfos,omitempty"`

	// NumOfPackFilter Contains the number of supported packet filter for signalled QoS rules.
	NumOfPackFilter *int `json:"numOfPackFilter,omitempty"`

	// PccRuleId Contains the identifier of the PCC rule which is used for traffic detection of event.
	PccRuleId *string `json:"pccRuleId,omitempty"`

	// PolicyDecFailureReports Contains the type(s) of failed policy decision and/or condition data.
	PolicyDecFailureReports []PolicyDecisionFailureCode `json:"policyDecFailureReports,omitempty"`

	// QncReports QoS Notification Control information.
	QncReports []SMPolicyQosNotificationControlInfo `json:"qncReports,omitempty"`

	// QosFlowUsage Possible values are - GENERAL: Indicate no specific QoS flow usage information is available.  - IMS_SIG: Indicate that the QoS flow is used for IMS signalling only.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/QosFlowUsage)
	QosFlowUsage  *QosFlowUsage                 `json:"qosFlowUsage,omitempty"`
	QosMonReports []SMPolicyQosMonitoringReport `json:"qosMonReports,omitempty"`
	RatType       *RatType                      `json:"ratType,omitempty"`

	// RefQosIndication If it is included and set to true, the reflective QoS is supported by the UE. If it is included and set to false, the reflective QoS is revoked by the UE.
	RefQosIndication *bool `json:"refQosIndication,omitempty"`

	// RelAccessInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	RelAccessInfo        *AdditionalAccessInfo `json:"relAccessInfo,omitempty"`
	RelIpv4Address       Ipv4Addr              `json:"relIpv4Address,omitempty"`
	RelIpv6AddressPrefix *Ipv6Prefix           `json:"relIpv6AddressPrefix,omitempty"`
	RelUeMac             MacAddr48             `json:"relUeMac,omitempty"`

	// RepPolicyCtrlReqTriggers The policy control reqeust trigges which are met.
	RepPolicyCtrlReqTriggers []PolicyControlRequestTrigger `json:"repPolicyCtrlReqTriggers,omitempty"`

	// RepPraInfos Reports the changes of presence reporting area.
	RepPraInfos *map[string]PresenceInfo `json:"repPraInfos,omitempty"`

	// RuleReports Used to report the PCC rule failure.
	RuleReports []RuleReport `json:"ruleReports,omitempty"`

	// ServNfId Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ServingNfIdentity
	ServNfId       *ServingNfIdentity `json:"servNfId,omitempty"`
	ServingNetwork *PlmnIdNid         `json:"servingNetwork,omitempty"`

	// SessRuleReports Used to report the session rule failure.
	SessRuleReports    []SessionRuleReport    `json:"sessRuleReports,omitempty"`
	SubsDefQos         *SubscribedDefaultQos  `json:"subsDefQos,omitempty"`
	SubsSessAmbr       *Ambr                  `json:"subsSessAmbr,omitempty"`
	TraceReq           *TraceData             `json:"traceReq"`
	TrafficDescriptors []DddTrafficDescriptor `json:"trafficDescriptors,omitempty"`

	// TsnBridgeInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/TsnBridgeInfo
	TsnBridgeInfo *TsnBridgeInfo `json:"tsnBridgeInfo,omitempty"`

	// TsnBridgeManCont Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont *BridgeManagementContainer `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt  *PortManagementContainer  `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts []PortManagementContainer `json:"tsnPortManContNwtts,omitempty"`
	TypesOfNotif        []DlDataDeliveryStatus    `json:"typesOfNotif,omitempty"`

	// UeInitResReq Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UeInitiatedResourceRequest
	UeInitResReq         *UeInitiatedResourceRequest `json:"ueInitResReq,omitempty"`
	UeMac                MacAddr48                   `json:"ueMac,omitempty"`
	UeTimeZone           *TimeZone                   `json:"ueTimeZone,omitempty"`
	UserLocationInfo     *UserLocation               `json:"userLocationInfo,omitempty"`
	UserLocationInfoTime *DateTime                   `json:"userLocationInfoTime,omitempty"`

	// VplmnQos Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VplmnQos
	VplmnQos *VplmnQos `json:"vplmnQos,omitempty"`

	// VplmnQosNotApp If it is included and set to true, indicates that the QoS constraints in the VPLMN are not applicable.
	VplmnQosNotApp       *bool                  `json:"vplmnQosNotApp,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmallDataRateStatus defines model for SmallDataRateStatus.
type SmallDataRateStatus struct {
	RemainExReportsDl    *int                   `json:"remainExReportsDl,omitempty"`
	RemainExReportsUl    *int                   `json:"remainExReportsUl,omitempty"`
	RemainPacketsDl      *int                   `json:"remainPacketsDl,omitempty"`
	RemainPacketsUl      *int                   `json:"remainPacketsUl,omitempty"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmallDataRateStatusInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SmallDataRateStatusInfo
type SmallDataRateStatusInfo struct {
	Dnn                  Dnn                    `json:"Dnn"`
	SmallDataRateStatus  SmallDataRateStatus    `json:"SmallDataRateStatus"`
	Snssai               Snssai                 `json:"Snssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfChangeIndication Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SmfChangeIndication
type SmfChangeIndication string

// SmfChangeInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SmfChangeInfo
type SmfChangeInfo struct {
	PduSessionIdList []PduSessionId `json:"pduSessionIdList"`

	// SmfChangeInd Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SmfChangeIndication
	SmfChangeInd         SmfChangeIndication    `json:"smfChangeInd"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfEvent Possible values are - AC_TY_CH: Access Type Change - UP_PATH_CH: UP Path Change - PDU_SES_REL: PDU Session Release - PLMN_CH: PLMN Change - UE_IP_CH: UE IP address change - DDDS: Downlink data delivery status - COMM_FAIL: Communication Failure - PDU_SES_EST: PDU Session Establishment - QFI_ALLOC: QFI allocation - QOS_MON: QoS Monitoring
//
//	(Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/SmfEvent)
type SmfEvent string

// SmfInfo Information of an SMF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SmfInfo)
type SmfInfo struct {
	AccessType []AccessType `json:"accessType,omitempty"`

	// PgwFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	PgwFqdn              *Fqdn                  `json:"pgwFqdn,omitempty"`
	Priority             *int                   `json:"priority,omitempty"`
	SNssaiSmfInfoList    []SnssaiSmfInfoItem    `json:"sNssaiSmfInfoList"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	TaiRangeList         []TaiRange             `json:"taiRangeList,omitempty"`
	VsmfSupportInd       *bool                  `json:"vsmfSupportInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfRegList Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SmfRegList
type SmfRegList = []SmfRegistration

// SmfRegistration Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmfRegistration
type SmfRegistration struct {
	// ContextInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ContextInfo
	ContextInfo                 *ContextInfo `json:"contextInfo,omitempty"`
	DeregCallbackUri            *Uri         `json:"deregCallbackUri,omitempty"`
	Dnn                         *Dnn         `json:"dnn,omitempty"`
	EmergencyServices           *bool        `json:"emergencyServices,omitempty"`
	EpdgInd                     *bool        `json:"epdgInd,omitempty"`
	PcscfRestorationCallbackUri *Uri         `json:"pcscfRestorationCallbackUri,omitempty"`
	PduSessionId                PduSessionId `json:"pduSessionId"`
	PgwFqdn                     *string      `json:"pgwFqdn,omitempty"`
	PlmnId                      PlmnId       `json:"plmnId"`

	// RegistrationReason Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/RegistrationReason
	RegistrationReason   *RegistrationReason    `json:"registrationReason,omitempty"`
	RegistrationTime     *DateTime              `json:"registrationTime,omitempty"`
	SingleNssai          Snssai                 `json:"singleNssai"`
	SmfInstanceId        NfInstanceId           `json:"smfInstanceId"`
	SmfSetId             *NfSetId               `json:"smfSetId,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfRegistrationInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmfRegistrationInfo
type SmfRegistrationInfo struct {
	SmfRegistrationList  []SmfRegistration      `json:"smfRegistrationList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfSelectionData Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/SmfSelectionData
type SmfSelectionData struct {
	Candidates           *map[string]*CandidateForReplacement `json:"candidates"`
	Dnn                  *Dnn                                 `json:"dnn,omitempty"`
	MappingSnssai        *Snssai                              `json:"mappingSnssai,omitempty"`
	Snssai               *Snssai                              `json:"snssai,omitempty"`
	UnsuppDnn            *bool                                `json:"unsuppDnn,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// SmfSelectionSubscriptionData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmfSelectionSubscriptionData
type SmfSelectionSubscriptionData struct {
	// SharedSnssaiInfosId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataId
	SharedSnssaiInfosId   SharedDataId           `json:"sharedSnssaiInfosId,omitempty"`
	SubscribedSnssaiInfos *map[string]SnssaiInfo `json:"subscribedSnssaiInfos,omitempty"`
	SupportedFeatures     *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// SmfSubscriptionInfo Information related to active subscriptions at the SMF(s) (Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SmfSubscriptionInfo)
type SmfSubscriptionInfo struct {
	SmfSubscriptionList  []SmfSubscriptionItem  `json:"smfSubscriptionList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfSubscriptionItem Contains info about a single SMF event subscription (Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SmfSubscriptionItem)
type SmfSubscriptionItem struct {
	SmfInstanceId        NfInstanceId           `json:"smfInstanceId"`
	SubscriptionId       Uri                    `json:"subscriptionId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmsManagementSubscriptionData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsManagementSubscriptionData
type SmsManagementSubscriptionData struct {
	MoSmsBarringAll      *bool                  `json:"moSmsBarringAll,omitempty"`
	MoSmsBarringRoaming  *bool                  `json:"moSmsBarringRoaming,omitempty"`
	MoSmsSubscribed      *bool                  `json:"moSmsSubscribed,omitempty"`
	MtSmsBarringAll      *bool                  `json:"mtSmsBarringAll,omitempty"`
	MtSmsBarringRoaming  *bool                  `json:"mtSmsBarringRoaming,omitempty"`
	MtSmsSubscribed      *bool                  `json:"mtSmsSubscribed,omitempty"`
	SharedSmsMngDataIds  []SharedDataId         `json:"sharedSmsMngDataIds,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	TraceData            *TraceData             `json:"traceData"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmsSubscribed Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsSubscribed
type SmsSubscribed = bool

// SmsSubscriptionData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsSubscriptionData
type SmsSubscriptionData struct {
	// SharedSmsSubsDataId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataId
	SharedSmsSubsDataId SharedDataId `json:"sharedSmsSubsDataId,omitempty"`

	// SmsSubscribed Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsSubscribed
	SmsSubscribed        *SmsSubscribed         `json:"smsSubscribed,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmsSupport Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SmsSupport
type SmsSupport string

// SmscData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SmscData
type SmscData struct {
	// SmscDiameterAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/NetworkNodeDiameterAddress
	SmscDiameterAddress *NetworkNodeDiameterAddress `json:"smscDiameterAddress,omitempty"`

	// SmscMapAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/E164Number
	SmscMapAddress       E164Number             `json:"smscMapAddress,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmsfInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsfInfo
type SmsfInfo struct {
	PlmnId               PlmnId                 `json:"plmnId"`
	SmsfInstanceId       NfInstanceId           `json:"smsfInstanceId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmsfRegistration Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/SmsfRegistration
type SmsfRegistration struct {
	// ContextInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ContextInfo
	ContextInfo      *ContextInfo `json:"contextInfo,omitempty"`
	PlmnId           PlmnId       `json:"plmnId"`
	RegistrationTime *DateTime    `json:"registrationTime,omitempty"`

	// SmsfDiameterAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/NetworkNodeDiameterAddress
	SmsfDiameterAddress *NetworkNodeDiameterAddress `json:"smsfDiameterAddress,omitempty"`
	SmsfInstanceId      NfInstanceId                `json:"smsfInstanceId"`

	// SmsfMAPAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/E164Number
	SmsfMAPAddress       E164Number             `json:"smsfMAPAddress,omitempty"`
	SmsfSetId            *NfSetId               `json:"smsfSetId,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Snssai defines model for Snssai.
type Snssai = f5gcModels.Snssai

// SnssaiExtension Extensions to the Snssai data type, sdRanges and wildcardSd shall not be present simultaneously
type SnssaiExtension struct {
	// SdRanges When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	SdRanges []SdRange `json:"sdRanges,omitempty"`

	// WildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
	WildcardSd           *SnssaiExtensionWildcardSd `json:"wildcardSd,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// SnssaiExtensionWildcardSd When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type
type SnssaiExtensionWildcardSd bool

// SnssaiInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SnssaiInfo
type SnssaiInfo struct {
	DnnInfos             []DnnInfo              `json:"dnnInfos"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SnssaiRouteSelectionDescriptor Contains the route selector parameters (DNNs, PDU session types, SSC modes and ATSSS information) per SNSSAI (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SnssaiRouteSelectionDescriptor)
type SnssaiRouteSelectionDescriptor struct {
	DnnRouteSelDescs     []DnnRouteSelectionDescriptor `json:"dnnRouteSelDescs,omitempty"`
	Snssai               Snssai                        `json:"snssai"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// SnssaiSmfInfoItem Set of parameters supported by SMF for a given S-NSSAI (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SnssaiSmfInfoItem)
type SnssaiSmfInfoItem struct {
	DnnSmfInfoList       []DnnSmfInfoItem       `json:"dnnSmfInfoList"`
	SNssai               Snssai                 `json:"sNssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SnssaiUpfInfoItem Set of parameters supported by UPF for a given S-NSSAI (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SnssaiUpfInfoItem)
type SnssaiUpfInfoItem struct {
	DnnUpfInfoList       []DnnUpfInfoItem       `json:"dnnUpfInfoList"`
	RedundantTransport   *bool                  `json:"redundantTransport,omitempty"`
	SNssai               Snssai                 `json:"sNssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SorData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SorData
type SorData struct {
	ProvisioningTime DateTime `json:"provisioningTime"`

	// SorMacIue Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorMac
	SorMacIue SorMac `json:"sorMacIue,omitempty"`

	// SorXmacIue Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorMac
	SorXmacIue SorMac `json:"sorXmacIue,omitempty"`

	// UeUpdateStatus Original definition in TS29505_Subscription_Data.yaml#/components/schemas/UeUpdateStatus
	UeUpdateStatus       UeUpdateStatus         `json:"ueUpdateStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SorInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SorInfo
type SorInfo struct {
	// AckInd Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/AckInd
	AckInd AckInd `json:"ackInd"`

	// Countersor Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/CounterSor
	Countersor       CounterSor `json:"countersor,omitempty"`
	ProvisioningTime DateTime   `json:"provisioningTime"`

	// SorMacIausf Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorMac
	SorMacIausf SorMac `json:"sorMacIausf,omitempty"`

	// SteeringContainer Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SteeringContainer
	SteeringContainer    *SteeringContainer     `json:"steeringContainer,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SorMac Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorMac
type SorMac = string

// SorSecurityInfo Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorSecurityInfo
type SorSecurityInfo struct {
	// CounterSor Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/CounterSor
	CounterSor CounterSor `json:"counterSor"`

	// SorMacIausf Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorMac
	SorMacIausf SorMac `json:"sorMacIausf"`

	// SorXmacIue Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorMac
	SorXmacIue           SorMac                 `json:"sorXmacIue,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SorUpdateIndicator Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SorUpdateIndicator
type SorUpdateIndicator string

// SorUpdateInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SorUpdateInfo
type SorUpdateInfo struct {
	VplmnId              PlmnId                 `json:"vplmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SpatialValidity describes explicitly the route to an Application location (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SpatialValidity)
type SpatialValidity struct {
	PresenceInfoList     map[string]PresenceInfo `json:"presenceInfoList"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// SpatialValidityRm this data type is defined in the same way as the SpatialValidity data type, but with the OpenAPI nullable property set to true (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SpatialValidityRm)
type SpatialValidityRm struct {
	PresenceInfoList     map[string]PresenceInfo `json:"presenceInfoList"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// SponId Contains an identity of a sponsor. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SponId)
type SponId = string

// SponsorConnectivityData Contains the sponsored data connectivity related information for a sponsor identifier. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/SponsorConnectivityData)
type SponsorConnectivityData struct {
	AspIds               []string               `json:"aspIds"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SponsoringStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/SponsoringStatus
type SponsoringStatus string

// SqnScheme Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SqnScheme
type SqnScheme string

// SscMode defines model for SscMode.
type SscMode string

// SscModes Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SscModes
type SscModes struct {
	AllowedSscModes      []SscMode              `json:"allowedSscModes,omitempty"`
	DefaultSscMode       SscMode                `json:"defaultSscMode"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// StationaryIndication Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
type StationaryIndication string

// StationaryIndicationRm Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
type StationaryIndicationRm string

// Status Overal status of the NRF (Original definition in TS29510_Nnrf_Bootstrapping.yaml#/components/schemas/Status)
type Status string

// StatusChange Original definition in TS29518_Namf_Communication.yaml#/components/schemas/StatusChange
type StatusChange string

// StatusInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/StatusInfo
type StatusInfo struct {
	AnType AccessType `json:"anType,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause *Cause `json:"cause,omitempty"`

	// CnAssistedRanPara Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/CnAssistedRanPara
	CnAssistedRanPara *CnAssistedRanPara `json:"cnAssistedRanPara,omitempty"`

	// ResourceStatus Possible values are - RELEASED - UNCHANGED - TRANSFERRED - UPDATED - ALT_ANCHOR_SMF
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ResourceStatus)
	ResourceStatus       ResourceStatus         `json:"resourceStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// StatusNotification Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/StatusNotification
type StatusNotification struct {
	ApnRateStatus *ApnRateStatus `json:"apnRateStatus,omitempty"`

	// EpsPdnCnxInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxInfo
	EpsPdnCnxInfo       *EpsPdnCnxInfo       `json:"epsPdnCnxInfo,omitempty"`
	NewSmfId            *NfInstanceId        `json:"newSmfId,omitempty"`
	SmallDataRateStatus *SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`

	// StatusInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/StatusInfo
	StatusInfo           StatusInfo             `json:"statusInfo"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SteerModeValue Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SteerModeValue
type SteerModeValue string

// SteeringContainer Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SteeringContainer
type SteeringContainer struct {
	union json.RawMessage
}

// SteeringContainer0 defines model for .
type SteeringContainer0 = []SteeringInfo

// SteeringFunctionality Possible values are
//   - MPTCP: Indicates that PCF authorizes the MPTCP functionality to support traffic steering, switching and splitting.
//   - ATSSS_LL: Indicates that PCF authorizes the ATSSS-LL functionality to support traffic steering, switching and splitting.
//     (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SteeringFunctionality)
type SteeringFunctionality string

// SteeringInfo Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SteeringInfo
type SteeringInfo struct {
	AccessTechList       []AccessTech           `json:"accessTechList,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SteeringMode Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SteeringMode
type SteeringMode struct {
	N3gLoad *Uinteger    `json:"3gLoad,omitempty"`
	Active  AccessType   `json:"active,omitempty"`
	PrioAcc AccessType   `json:"prioAcc,omitempty"`
	Standby AccessTypeRm `json:"standby,omitempty"`

	// SteerModeValue Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SteerModeValue
	SteerModeValue       SteerModeValue         `json:"steerModeValue"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// StnSr defines model for StnSr.
type StnSr = string

// StnSrRm defines model for StnSrRm.
type StnSrRm = string

// StoredSearchResult Contains a complete search result (i.e. a number of discovered NF Instances), stored by NRF as a consequence of a prior search result (Original definition in TS29510_Nnrf_NFDiscovery.yaml#/components/schemas/StoredSearchResult)
type StoredSearchResult struct {
	NfInstances          []NFDiscoveryNFProfile `json:"nfInstances"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubId Identifies an Individual SMF Notification Subscription. To enable that the value is used as part of a URI, the string shall only contain characters allowed according to the "lower-with-hyphen" naming convention defined in 3GPP TS 29.501. In an OpenAPI schema, the format shall be designated as "SubId". (Original definition in TS29508_Nsmf_EventExposure.yaml#/components/schemas/SubId)
type SubId = string

// SubscribedDefaultQos defines model for SubscribedDefaultQos.
type SubscribedDefaultQos struct {
	N5qi                 N5Qi                   `json:"5qi"`
	Arp                  Arp                    `json:"arp"`
	PriorityLevel        N5QiPriorityLevel      `json:"priorityLevel,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubscribedEvent Possible values are - UP_PATH_CHANGE: The AF requests to be notified when the UP path changes for the PDU session.
//
//	(Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/SubscribedEvent)
type SubscribedEvent string

// SubscribedSnssai Original definition in TS29531_Nnssf_NSSelection.yaml#/components/schemas/SubscribedSnssai
type SubscribedSnssai struct {
	DefaultIndication    *bool                  `json:"defaultIndication,omitempty"`
	SubscribedSnssai     Snssai                 `json:"subscribedSnssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubscriberId Original definition in TS29504_Nudr_GroupIDmap.yaml#/components/schemas/SubscriberId
type SubscriberId = string

// SubscriptionData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SubscriptionData
type SubscriptionData struct {
	AmfStatusUri         Uri                    `json:"amfStatusUri"`
	GuamiList            []Guami                `json:"guamiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubscriptionDataSets Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SubscriptionDataSets
type SubscriptionDataSets struct {
	// AmData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/AccessAndMobilitySubscriptionData
	AmData *AccessAndMobilitySubscriptionData `json:"amData,omitempty"`

	// LcsBroadcastAssistanceTypesData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsBroadcastAssistanceTypesData
	LcsBroadcastAssistanceTypesData *LcsBroadcastAssistanceTypesData `json:"lcsBroadcastAssistanceTypesData,omitempty"`

	// LcsMoData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsMoData
	LcsMoData *LcsMoData `json:"lcsMoData,omitempty"`

	// LcsPrivacyData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/LcsPrivacyData
	LcsPrivacyData *LcsPrivacyData                     `json:"lcsPrivacyData,omitempty"`
	SmData         []SessionManagementSubscriptionData `json:"smData,omitempty"`

	// SmfSelData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmfSelectionSubscriptionData
	SmfSelData *SmfSelectionSubscriptionData `json:"smfSelData,omitempty"`

	// SmsMngData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsManagementSubscriptionData
	SmsMngData *SmsManagementSubscriptionData `json:"smsMngData,omitempty"`

	// SmsSubsData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsSubscriptionData
	SmsSubsData *SmsSubscriptionData `json:"smsSubsData,omitempty"`
	TraceData   *TraceData           `json:"traceData"`

	// UecAmfData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeContextInAmfData
	UecAmfData *UeContextInAmfData `json:"uecAmfData,omitempty"`

	// UecSmfData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeContextInSmfData
	UecSmfData *UeContextInSmfData `json:"uecSmfData,omitempty"`

	// UecSmsfData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeContextInSmsfData
	UecSmsfData *UeContextInSmsfData `json:"uecSmsfData,omitempty"`

	// V2xData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/V2xSubscriptionData
	V2xData              *V2xSubscriptionData   `json:"v2xData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubscriptionDataSubscriptions Original definition in TS29505_Subscription_Data.yaml#/components/schemas/SubscriptionDataSubscriptions
type SubscriptionDataSubscriptions struct {
	CallbackReference         Uri       `json:"callbackReference"`
	Expiry                    *DateTime `json:"expiry,omitempty"`
	MonitoredResourceUris     []Uri     `json:"monitoredResourceUris"`
	OriginalCallbackReference *Uri      `json:"originalCallbackReference,omitempty"`

	// SdmSubscription Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SdmSubscription
	SdmSubscription      *SdmSubscription       `json:"sdmSubscription,omitempty"`
	SubscriptionId       *string                `json:"subscriptionId,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	UeId                 VarUeId                `json:"ueId,omitempty"`
	UniqueSubscription   *bool                  `json:"uniqueSubscription,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Success Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Success
type Success = bool

// Suci Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/Suci
type Suci = string

// SuggestedPacketNumDl Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SuggestedPacketNumDl
type SuggestedPacketNumDl struct {
	SuggestedPacketNumDl int                    `json:"suggestedPacketNumDl"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Supi defines model for Supi.
type Supi = string

// SupiOrSuci defines model for SupiOrSuci.
type SupiOrSuci = string

// SupiRange A range of SUPIs (subscriber identities), either based on a numeric range, or based on regular-expression matching (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SupiRange)
type SupiRange struct {
	End                  string                 `json:"end,omitempty"`
	Pattern              *string                `json:"pattern,omitempty"`
	Start                string                 `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SupportedCodec defines model for SupportedCodec.
type SupportedCodec = Bytes

// SupportedFeatures defines model for SupportedFeatures.
type SupportedFeatures = string

// SupportedNssaiAvailabilityData Original definition in TS29531_Nnssf_NSSAIAvailability.yaml#/components/schemas/SupportedNssaiAvailabilityData
type SupportedNssaiAvailabilityData struct {
	SupportedSnssaiList  []ExtSnssai            `json:"supportedSnssaiList"`
	Tai                  Tai                    `json:"tai"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	TaiRangeList         []TaiRange             `json:"taiRangeList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TS29122DateTime string with format "date-time" as defined in OpenAPI. (Original definition in TS29122_CommonData.yaml#/components/schemas/DateTime)
type TS29122DateTime = string

// TS29122DurationSec Unsigned integer identifying a period of time in units of seconds. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSec)
type TS29122DurationSec = int

// TS29122DurationSecRm Unsigned integer identifying a period of time in units of seconds with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSecRm)
type TS29122DurationSecRm = int

// TS29122ExternalGroupId string containing a local identifier followed by "@" and a domain identifier. Both the local identifier and the domain identifier shall be encoded as strings that do not contain any "@" characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more information. (Original definition in TS29122_CommonData.yaml#/components/schemas/ExternalGroupId)
type TS29122ExternalGroupId = string

// TS29122InvalidParam Original definition in TS29122_CommonData.yaml#/components/schemas/InvalidParam
type TS29122InvalidParam struct {
	// Param Attribute's name encoded as a JSON Pointer, or header's name.
	Param string `json:"param"`

	// Reason A human-readable reason, e.g. "must be a positive integer".
	Reason               *string                `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TS29122Ipv4Addr string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv4Addr)
type TS29122Ipv4Addr = string

// TS29122Ipv6Addr string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv6Addr)
type TS29122Ipv6Addr = string

// TS29122Link string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
type TS29122Link = string

// TS29122ProblemDetails Original definition in TS29122_CommonData.yaml#/components/schemas/ProblemDetails
type TS29122ProblemDetails struct {
	// Cause A machine-readable application error cause specific to this occurrence of the problem. This IE should be present and provide application-related error information, if available.
	Cause *string `json:"cause,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance string providing an URI formatted according to IETF RFC 3986. (Original definition in TS29122_CommonData.yaml#/components/schemas/Uri)
	Instance *TS29122Uri `json:"instance,omitempty"`

	// InvalidParams Description of invalid parameters, for a request rejected due to invalid parameters.
	InvalidParams []TS29122InvalidParam `json:"invalidParams,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status *int `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem.
	Title *string `json:"title,omitempty"`

	// Type string providing an URI formatted according to IETF RFC 3986. (Original definition in TS29122_CommonData.yaml#/components/schemas/Uri)
	Type                 *TS29122Uri            `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TS29122Uri string providing an URI formatted according to IETF RFC 3986. (Original definition in TS29122_CommonData.yaml#/components/schemas/Uri)
type TS29122Uri = string

// TS29522EventNotification Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/EventNotification
type TS29522EventNotification struct {
	// AfAckUri string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
	AfAckUri *TS29122Link `json:"afAckUri,omitempty"`

	// AfTransId Identifies an NEF Northbound interface transaction, generated by the AF.
	AfTransId *string `json:"afTransId,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType        DnaiChangeType   `json:"dnaiChgType"`
	Gpsi               Gpsi             `json:"gpsi,omitempty"`
	SourceDnai         *Dnai            `json:"sourceDnai,omitempty"`
	SourceTrafficRoute *RouteToLocation `json:"sourceTrafficRoute"`

	// SrcUeIpv4Addr string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv4Addr)
	SrcUeIpv4Addr   *TS29122Ipv4Addr `json:"srcUeIpv4Addr,omitempty"`
	SrcUeIpv6Prefix *Ipv6Prefix      `json:"srcUeIpv6Prefix,omitempty"`

	// SubscribedEvent Possible values are - UP_PATH_CHANGE: The AF requests to be notified when the UP path changes for the PDU session.
	//  (Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/SubscribedEvent)
	SubscribedEvent    SubscribedEvent  `json:"subscribedEvent"`
	TargetDnai         *Dnai            `json:"targetDnai,omitempty"`
	TargetTrafficRoute *RouteToLocation `json:"targetTrafficRoute"`

	// TgtUeIpv4Addr string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv4Addr)
	TgtUeIpv4Addr        *TS29122Ipv4Addr       `json:"tgtUeIpv4Addr,omitempty"`
	TgtUeIpv6Prefix      *Ipv6Prefix            `json:"tgtUeIpv6Prefix,omitempty"`
	UeMac                MacAddr48              `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TS29522TrafficInfluSub Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/TrafficInfluSub
type TS29522TrafficInfluSub struct {
	AddrPreserInd *bool `json:"addrPreserInd,omitempty"`
	AfAckInd      *bool `json:"afAckInd,omitempty"`

	// AfAppId Identifies an application.
	AfAppId *string `json:"afAppId,omitempty"`

	// AfServiceId Identifies a service on behalf of which the AF is issuing the request.
	AfServiceId *string `json:"afServiceId,omitempty"`

	// AfTransId Identifies an NEF Northbound interface transaction, generated by the AF.
	AfTransId *string `json:"afTransId,omitempty"`

	// AnyUeInd Identifies whether the AF request applies to any UE. This attribute shall set to "true" if applicable for any UE, otherwise, set to "false".
	AnyUeInd *bool `json:"anyUeInd,omitempty"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool `json:"appReloInd,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType *DnaiChangeType `json:"dnaiChgType,omitempty"`
	Dnn         *Dnn            `json:"dnn,omitempty"`

	// EthTrafficFilters Identifies Ethernet packet filters.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`

	// ExternalGroupId string containing a local identifier followed by "@" and a domain identifier. Both the local identifier and the domain identifier shall be encoded as strings that do not contain any "@" characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more information. (Original definition in TS29122_CommonData.yaml#/components/schemas/ExternalGroupId)
	ExternalGroupId *TS29122ExternalGroupId `json:"externalGroupId,omitempty"`
	Gpsi            Gpsi                    `json:"gpsi,omitempty"`
	IpDomain        *string                 `json:"ipDomain,omitempty"`

	// Ipv4Addr string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv4Addr)
	Ipv4Addr *TS29122Ipv4Addr `json:"ipv4Addr,omitempty"`

	// Ipv6Addr string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used. (Original definition in TS29122_CommonData.yaml#/components/schemas/Ipv6Addr)
	Ipv6Addr *TS29122Ipv6Addr `json:"ipv6Addr,omitempty"`
	MacAddr  MacAddr48        `json:"macAddr,omitempty"`

	// NotificationDestination string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
	NotificationDestination *TS29122Link `json:"notificationDestination,omitempty"`

	// RequestTestNotification Set to true by the SCS/AS to request the NEF to send a test notification as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`

	// Self string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
	Self   *TS29122Link `json:"self,omitempty"`
	Snssai *Snssai      `json:"snssai,omitempty"`

	// SubscribedEvents Identifies the requirement to be notified of the event(s).
	SubscribedEvents []SubscribedEvent   `json:"subscribedEvents,omitempty"`
	SuppFeat         *SupportedFeatures  `json:"suppFeat,omitempty"`
	TempValidities   *[]TemporalValidity `json:"tempValidities,omitempty"`
	TfcCorrInd       *bool               `json:"tfcCorrInd,omitempty"`

	// TrafficFilters Identifies IP packet filters.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`

	// ValidGeoZoneIds Identifies a geographic zone that the AF request applies only to the traffic of UE(s) located in this specific zone.
	ValidGeoZoneIds []string `json:"validGeoZoneIds,omitempty"`

	// WebsockNotifConfig Original definition in TS29122_CommonData.yaml#/components/schemas/WebsockNotifConfig
	WebsockNotifConfig   *WebsockNotifConfig    `json:"websockNotifConfig,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Tac defines model for Tac.
type Tac = string

// TacInfo defines model for TacInfo.
type TacInfo struct {
	TacList              []Tac                  `json:"tacList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TacRange Range of TACs (Tracking Area Codes) (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TacRange)
type TacRange struct {
	End                  string                 `json:"end,omitempty"`
	Pattern              *string                `json:"pattern,omitempty"`
	Start                string                 `json:"start,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Tai defines model for Tai.
type Tai struct {
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	Tac                  Tac                    `json:"tac"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TaiRange Range of TAIs (Tracking Area Identities) (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TaiRange)
type TaiRange struct {
	Nid                  Nid                    `json:"nid,omitempty"`
	PlmnId               PlmnId                 `json:"plmnId"`
	TacRangeList         []TacRange             `json:"tacRangeList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Teid Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Teid
type Teid = string

// TemporalValidity Indicates the time interval(s) during which the AF request is to be applied (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TemporalValidity)
type TemporalValidity struct {
	StartTime            *DateTime              `json:"startTime,omitempty"`
	StopTime             *DateTime              `json:"stopTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TerminationCause Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TerminationCause
type TerminationCause string

// TerminationInfo indicates the cause for requesting the deletion of the Individual Application Session Context resource (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TerminationInfo)
type TerminationInfo struct {
	ResUri Uri `json:"resUri"`

	// TermCause Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TerminationCause
	TermCause            TerminationCause       `json:"termCause"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TerminationNotification Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/TerminationNotification
type TerminationNotification struct {
	// Cause Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SmPolicyAssociationReleaseCause
	Cause                SmPolicyAssociationReleaseCause `json:"cause"`
	ResourceUri          Uri                             `json:"resourceUri"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// TimeOfDay String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).
type TimeOfDay = string

// TimePeriod Contains the periodicity for the defined usage monitoring data limits. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/TimePeriod)
type TimePeriod struct {
	MaxNumPeriod *Uinteger `json:"maxNumPeriod,omitempty"`

	// Period Original definition in TS29519_Policy_Data.yaml#/components/schemas/Periodicity
	Period               Periodicity            `json:"period"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TimeWindow Original definition in TS29122_CommonData.yaml#/components/schemas/TimeWindow
type TimeWindow struct {
	// StartTime string with format "date-time" as defined in OpenAPI. (Original definition in TS29122_CommonData.yaml#/components/schemas/DateTime)
	StartTime TS29122DateTime `json:"startTime"`

	// StopTime string with format "date-time" as defined in OpenAPI. (Original definition in TS29122_CommonData.yaml#/components/schemas/DateTime)
	StopTime             TS29122DateTime        `json:"stopTime"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TimeZone defines model for TimeZone.
type TimeZone = string

// TnapId defines model for TnapId.
type TnapId struct {
	BssId                *string                `json:"bssId,omitempty"`
	CivicAddress         *Bytes                 `json:"civicAddress,omitempty"`
	SsId                 *string                `json:"ssId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TngfId defines model for TngfId.
type TngfId = string

// TngfInfo Infomation of the TNGF endpoints (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TngfInfo)
type TngfInfo struct {
	// EndpointFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	EndpointFqdn          *Fqdn                  `json:"endpointFqdn,omitempty"`
	Ipv4EndpointAddresses []Ipv4Addr             `json:"ipv4EndpointAddresses,omitempty"`
	Ipv6EndpointAddresses []Ipv6Addr             `json:"ipv6EndpointAddresses,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// TosTrafficClass 2-octet string, where each octet is encoded in hexadecimal representation. The first octet contains the IPv4 Type-of-Service or the IPv6 Traffic-Class field and the second octet contains the ToS/Traffic Class mask field. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TosTrafficClass)
type TosTrafficClass = string

// TosTrafficClassRm this data type is defined in the same way as the TosTrafficClass data type, but with the OpenAPI nullable property set to true (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TosTrafficClassRm)
type TosTrafficClassRm = string

// TraceData defines model for TraceData.
type TraceData struct {
	CollectionEntityIpv4Addr  Ipv4Addr               `json:"collectionEntityIpv4Addr,omitempty"`
	CollectionEntityIpv6Addr  *Ipv6Addr              `json:"collectionEntityIpv6Addr,omitempty"`
	EventList                 string                 `json:"eventList"`
	InterfaceList             string                 `json:"interfaceList,omitempty"`
	NeTypeList                string                 `json:"neTypeList"`
	TraceDepth                TraceDepth             `json:"traceDepth"`
	TraceRef                  string                 `json:"traceRef"`
	TraceReportingConsumerUri *Uri                   `json:"traceReportingConsumerUri,omitempty"`
	AdditionalProperties      map[string]interface{} `json:"-"`
}

// TraceDataResponse Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/TraceDataResponse
type TraceDataResponse struct {
	// SharedTraceDataId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SharedDataId
	SharedTraceDataId    SharedDataId           `json:"sharedTraceDataId,omitempty"`
	TraceData            *TraceData             `json:"traceData"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TraceDepth defines model for TraceDepth.
type TraceDepth string

// TrafficControlData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/TrafficControlData
type TrafficControlData struct {
	AddRedirectInfo []RedirectInformation `json:"addRedirectInfo,omitempty"`

	// FlowStatus Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/FlowStatus
	FlowStatus *FlowStatus `json:"flowStatus,omitempty"`

	// MulAccCtrl Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/MulticastAccessControl
	MulAccCtrl *MulticastAccessControl `json:"mulAccCtrl,omitempty"`

	// MuteNotif Indicates whether applicat'on's start or stop notification is to be muted.
	MuteNotif *bool `json:"muteNotif,omitempty"`

	// RedirectInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RedirectInformation
	RedirectInfo *RedirectInformation `json:"redirectInfo,omitempty"`

	// RouteToLocs A list of location which the traffic shall be routed to for the AF request
	RouteToLocs []RouteToLocation `json:"routeToLocs,omitempty"`

	// SteerFun Possible values are
	//   - MPTCP: Indicates that PCF authorizes the MPTCP functionality to support traffic steering, switching and splitting.
	//   - ATSSS_LL: Indicates that PCF authorizes the ATSSS-LL functionality to support traffic steering, switching and splitting.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SteeringFunctionality)
	SteerFun *SteeringFunctionality `json:"steerFun,omitempty"`

	// SteerModeDl Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SteeringMode
	SteerModeDl *SteeringMode `json:"steerModeDl,omitempty"`

	// SteerModeUl Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/SteeringMode
	SteerModeUl *SteeringMode `json:"steerModeUl,omitempty"`

	// TcId Univocally identifies the traffic control policy data within a PDU session.
	TcId          string `json:"tcId"`
	TraffCorreInd *bool  `json:"traffCorreInd,omitempty"`

	// TrafficSteeringPolIdDl Reference to a pre-configured traffic steering policy for downlink traffic at the SMF.
	TrafficSteeringPolIdDl *string `json:"trafficSteeringPolIdDl"`

	// TrafficSteeringPolIdUl Reference to a pre-configured traffic steering policy for uplink traffic at the SMF.
	TrafficSteeringPolIdUl *string `json:"trafficSteeringPolIdUl"`

	// UpPathChgEvent Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UpPathChgEvent
	UpPathChgEvent       *UpPathChgEvent        `json:"upPathChgEvent"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TrafficDescriptor Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/TrafficDescriptor
type TrafficDescriptor struct {
	DddTrafficDescriptorList []DddTrafficDescriptor `json:"dddTrafficDescriptorList,omitempty"`
	Dnn                      *Dnn                   `json:"dnn,omitempty"`
	SNssai                   *Snssai                `json:"sNssai,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// TrafficInfluData Original definition in TS29519_Application_Data.yaml#/components/schemas/TrafficInfluData
type TrafficInfluData struct {
	AddrPreserInd *bool `json:"addrPreserInd,omitempty"`
	AfAckInd      *bool `json:"afAckInd,omitempty"`

	// AfAppId Identifies an application.
	AfAppId *string `json:"afAppId,omitempty"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool `json:"appReloInd,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType *DnaiChangeType `json:"dnaiChgType,omitempty"`
	Dnn         *Dnn            `json:"dnn,omitempty"`

	// EthTrafficFilters Identifies Ethernet packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	Headers           []string             `json:"headers,omitempty"`
	InterGroupId      GroupId              `json:"interGroupId,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/NetworkAreaInfo)
	NwAreaInfo        *PcfNetworkAreaInfo `json:"nwAreaInfo,omitempty"`
	ResUri            *Uri                `json:"resUri,omitempty"`
	Snssai            *Snssai             `json:"snssai,omitempty"`
	SubscribedEvents  []SubscribedEvent   `json:"subscribedEvents,omitempty"`
	Supi              Supi                `json:"supi,omitempty"`
	SupportedFeatures *SupportedFeatures  `json:"supportedFeatures,omitempty"`

	// TempValidities Identifies the temporal validities for the N6 traffic routing requirement.
	TempValidities []TemporalValidity `json:"tempValidities,omitempty"`
	TraffCorreInd  *bool              `json:"traffCorreInd,omitempty"`

	// TrafficFilters Identifies IP packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`

	// UpPathChgNotifCorreId Contains the Notification Correlation Id allocated by the NEF for the UP path change notification.
	UpPathChgNotifCorreId *string                `json:"upPathChgNotifCorreId,omitempty"`
	UpPathChgNotifUri     *Uri                   `json:"upPathChgNotifUri,omitempty"`
	ValidEndTime          *DateTime              `json:"validEndTime,omitempty"`
	ValidStartTime        *DateTime              `json:"validStartTime,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// TrafficInfluDataNotif Original definition in TS29519_Application_Data.yaml#/components/schemas/TrafficInfluDataNotif
type TrafficInfluDataNotif struct {
	ResUri Uri `json:"resUri"`

	// TrafficInfluData Original definition in TS29519_Application_Data.yaml#/components/schemas/TrafficInfluData
	TrafficInfluData     *TrafficInfluData      `json:"trafficInfluData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TrafficInfluDataPatch Original definition in TS29519_Application_Data.yaml#/components/schemas/TrafficInfluDataPatch
type TrafficInfluDataPatch struct {
	AddrPreserInd *bool `json:"addrPreserInd,omitempty"`
	AfAckInd      *bool `json:"afAckInd,omitempty"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool `json:"appReloInd,omitempty"`
	Dnn        *Dnn  `json:"dnn,omitempty"`

	// EthTrafficFilters Identifies Ethernet packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	Headers           []string             `json:"headers,omitempty"`
	InternalGroupId   GroupId              `json:"internalGroupId,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/NetworkAreaInfo)
	NwAreaInfo *PcfNetworkAreaInfo `json:"nwAreaInfo,omitempty"`
	Snssai     *Snssai             `json:"snssai,omitempty"`
	Supi       Supi                `json:"supi,omitempty"`

	// TempValidities Identifies the temporal validities for the N6 traffic routing requirement.
	TempValidities *[]TemporalValidity `json:"tempValidities"`
	TraffCorreInd  *bool               `json:"traffCorreInd,omitempty"`

	// TrafficFilters Identifies IP packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`

	// UpPathChgNotifCorreId Contains the Notification Correlation Id allocated by the NEF for the UP path change notification.
	UpPathChgNotifCorreId *string                `json:"upPathChgNotifCorreId,omitempty"`
	UpPathChgNotifUri     *Uri                   `json:"upPathChgNotifUri,omitempty"`
	ValidEndTime          *DateTime              `json:"validEndTime,omitempty"`
	ValidStartTime        *DateTime              `json:"validStartTime,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// TrafficInfluSub Original definition in TS29519_Application_Data.yaml#/components/schemas/TrafficInfluSub
type TrafficInfluSub struct {
	// Dnns Each element identifies a DNN.
	Dnns   []Dnn     `json:"dnns,omitempty"`
	Expiry *DateTime `json:"expiry,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds []GroupId `json:"internalGroupIds,omitempty"`
	NotificationUri  Uri       `json:"notificationUri"`

	// Snssais Each element identifies a slice.
	Snssais []Snssai `json:"snssais,omitempty"`

	// Supis Each element identifies the user.
	Supis                []Supi                 `json:"supis,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TrafficInfluSubPatch Original definition in TS29522_TrafficInfluence.yaml#/components/schemas/TrafficInfluSubPatch
type TrafficInfluSubPatch struct {
	AddrPreserInd *bool `json:"addrPreserInd"`
	AfAckInd      *bool `json:"afAckInd"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool `json:"appReloInd"`

	// EthTrafficFilters Identifies Ethernet packet filters.
	EthTrafficFilters []EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	TempValidities    *[]TemporalValidity  `json:"tempValidities"`
	TfcCorrInd        *bool                `json:"tfcCorrInd"`

	// TrafficFilters Identifies IP packet filters.
	TrafficFilters []FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []RouteToLocation `json:"trafficRoutes,omitempty"`

	// ValidGeoZoneIds Identifies a geographic zone that the AF request applies only to the traffic of UE(s) located in this specific zone.
	ValidGeoZoneIds      *[]string              `json:"validGeoZoneIds"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
type TrafficProfile string

// TrafficProfileRm Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
type TrafficProfileRm string

// TransferMoDataReqData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TransferMoDataReqData
type TransferMoDataReqData struct {
	MoData               RefToBinaryData        `json:"moData"`
	MoExpDataCounter     *MoExpDataCounter      `json:"moExpDataCounter,omitempty"`
	UeLocation           *UserLocation          `json:"ueLocation,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TransferMtDataAddInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TransferMtDataAddInfo
type TransferMtDataAddInfo struct {
	MaxWaitingTime       *DurationSec           `json:"maxWaitingTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TransferMtDataError defines model for TransferMtDataError.
type TransferMtDataError struct {
	// AccessTokenError Error returned in the access token response message (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError *AccessTokenErr `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   *AccessTokenReq        `json:"accessTokenRequest,omitempty"`
	Cause                *string                `json:"cause,omitempty"`
	Detail               *string                `json:"detail,omitempty"`
	Instance             *Uri                   `json:"instance,omitempty"`
	InvalidParams        []InvalidParam         `json:"invalidParams,omitempty"`
	MaxWaitingTime       *DurationSec           `json:"maxWaitingTime,omitempty"`
	NrfId                *string                `json:"nrfId,omitempty"`
	Status               int                    `json:"status,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *Uri                   `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TransferMtDataReqData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TransferMtDataReqData
type TransferMtDataReqData struct {
	MtData               RefToBinaryData        `json:"mtData"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TransferPolicy Describes a transfer policy. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/TransferPolicy)
type TransferPolicy struct {
	MaxBitRateDl BitRate `json:"maxBitRateDl,omitempty"`
	MaxBitRateUl BitRate `json:"maxBitRateUl,omitempty"`

	// RatingGroup Indicates a rating group for the recommended time window.
	RatingGroup int `json:"ratingGroup"`

	// RecTimeInt Original definition in TS29122_CommonData.yaml#/components/schemas/TimeWindow
	RecTimeInt TimeWindow `json:"recTimeInt"`

	// TransPolicyId Contains an identity of a transfer policy.
	TransPolicyId        int                    `json:"transPolicyId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TransferReason Original definition in TS29518_Namf_Communication.yaml#/components/schemas/TransferReason
type TransferReason string

// TransportProtocol Possible values are - UDP: User Datagram Protocol. - TCP: Transmission Control Protocol.
type TransportProtocol string

// TriggerRequest Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/TriggerRequest
type TriggerRequest struct {
	Supi                 Supi                   `json:"supi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TscPriorityLevel Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscPriorityLevel
type TscPriorityLevel = int

// TscPriorityLevelRm Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscPriorityLevelRm
type TscPriorityLevelRm = int

// TscaiInputContainer Indicates TSC Traffic pattern. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscaiInputContainer)
type TscaiInputContainer struct {
	BurstArrivalTime     *DateTime              `json:"burstArrivalTime,omitempty"`
	Periodicity          *Uinteger              `json:"periodicity,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TsnBridgeInfo Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/TsnBridgeInfo
type TsnBridgeInfo struct {
	BridgeId             *Uint64                `json:"bridgeId,omitempty"`
	DsttAddr             MacAddr48              `json:"dsttAddr,omitempty"`
	DsttPortNum          *TsnPortNumber         `json:"dsttPortNum,omitempty"`
	DsttResidTime        *Uinteger              `json:"dsttResidTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TsnPortNumber defines model for TsnPortNumber.
type TsnPortNumber = Uinteger

// TsnQosContainer Indicates TSC Traffic QoS. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TsnQosContainer)
type TsnQosContainer struct {
	MaxTscBurstSize ExtMaxDataBurstVol `json:"maxTscBurstSize,omitempty"`
	TscPackDelay    PacketDelBudget    `json:"tscPackDelay,omitempty"`

	// TscPrioLevel Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscPriorityLevel
	TscPrioLevel         TscPriorityLevel       `json:"tscPrioLevel,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TsnQosContainerRm Indicates removable TSC Traffic QoS. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TsnQosContainerRm)
type TsnQosContainerRm struct {
	MaxTscBurstSize *ExtMaxDataBurstVolRm `json:"maxTscBurstSize"`
	TscPackDelay    *PacketDelBudgetRm    `json:"tscPackDelay"`

	// TscPrioLevel Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/TscPriorityLevelRm
	TscPrioLevel         *TscPriorityLevelRm    `json:"tscPrioLevel"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
type TunnelInfo struct {
	AnType AccessType `json:"anType,omitempty"`

	// GtpTeid Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Teid
	GtpTeid              Teid                   `json:"gtpTeid"`
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TwapId defines model for TwapId.
type TwapId struct {
	BssId                *string                `json:"bssId,omitempty"`
	CivicAddress         *Bytes                 `json:"civicAddress,omitempty"`
	SsId                 string                 `json:"ssId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TwifInfo Addressing information (IP addresses, FQDN) of the TWIF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TwifInfo)
type TwifInfo struct {
	// EndpointFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	EndpointFqdn          *Fqdn                  `json:"endpointFqdn,omitempty"`
	Ipv4EndpointAddresses []Ipv4Addr             `json:"ipv4EndpointAddresses,omitempty"`
	Ipv6EndpointAddresses []Ipv6Addr             `json:"ipv6EndpointAddresses,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// UEAuthenticationCtx Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/UEAuthenticationCtx
type UEAuthenticationCtx struct {
	N5gAuthData UEAuthenticationCtx_5gAuthData `json:"5gAuthData"`
	Links       map[string]LinksValueSchema    `json:"_links"`

	// AuthType Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/AuthType
	AuthType AusfAuthType `json:"authType"`

	// ServingNetworkName Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/ServingNetworkName
	ServingNetworkName   ServingNetworkName     `json:"servingNetworkName,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UEAuthenticationCtx_5gAuthData defines model for UEAuthenticationCtx.5gAuthData.
type UEAuthenticationCtx_5gAuthData struct {
	union json.RawMessage
}

// UEContextRelease Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UEContextRelease
type UEContextRelease struct {
	NgapCause            NgApCause              `json:"ngapCause"`
	Supi                 Supi                   `json:"supi,omitempty"`
	UnauthenticatedSupi  *bool                  `json:"unauthenticatedSupi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UEIdExt Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/UEIdExt
type UEIdExt struct {
	Gpsi                 Gpsi                   `json:"gpsi,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UEPolicyPolicyAssociation Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/PolicyAssociation
type UEPolicyPolicyAssociation struct {
	// N2Pc5Pol Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	N2Pc5Pol *N2InfoContent           `json:"n2Pc5Pol,omitempty"`
	Pras     *map[string]PresenceInfo `json:"pras,omitempty"`

	// Request Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/PolicyAssociationRequest
	Request  *UEPolicyPolicyAssociationRequest `json:"request,omitempty"`
	SuppFeat SupportedFeatures                 `json:"suppFeat"`

	// Triggers Request Triggers that the PCF subscribes. Only values "LOC_CH" and "PRA_CH" are permitted.
	Triggers             []UEPolicyRequestTrigger `json:"triggers,omitempty"`
	UePolicy             *UePolicy                `json:"uePolicy,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// UEPolicyPolicyAssociationReleaseCause Possible values are - UNSPECIFIED: This value is used for unspecified reasons. - UE_SUBSCRIPTION: This value is used to indicate that the policy association needs to be terminated because the subscription of UE has changed (e.g. was removed). - INSUFFICIENT_RES: This value is used to indicate that the server is overloaded and needs to abort the policy association.
//
//	(Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/PolicyAssociationReleaseCause)
type UEPolicyPolicyAssociationReleaseCause string

// UEPolicyPolicyAssociationRequest Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/PolicyAssociationRequest
type UEPolicyPolicyAssociationRequest struct {
	AccessType AccessType `json:"accessType,omitempty"`

	// AltNotifFqdns Alternate or backup FQDN(s) where to send Notifications.
	AltNotifFqdns []Fqdn `json:"altNotifFqdns,omitempty"`

	// AltNotifIpv4Addrs Alternate or backup IPv4 Address(es) where to send Notifications.
	AltNotifIpv4Addrs []Ipv4Addr `json:"altNotifIpv4Addrs,omitempty"`

	// AltNotifIpv6Addrs Alternate or backup IPv6 Address(es) where to send Notifications.
	AltNotifIpv6Addrs []Ipv6Addr    `json:"altNotifIpv6Addrs,omitempty"`
	Gpsi              Gpsi          `json:"gpsi,omitempty"`
	GroupIds          []GroupId     `json:"groupIds,omitempty"`
	Guami             *Guami        `json:"guami,omitempty"`
	HPcfId            *NfInstanceId `json:"hPcfId,omitempty"`
	NotificationUri   Uri           `json:"notificationUri"`

	// Pc5Capab Possible values are - LTE_PC5: This value is used to indicate that UE supports PC5 LTE RAT for V2X communication over PC5 reference point. - NR_PC5: This value is used to indicate that UE supports PC5 NR RAT for V2X communication over PC5 reference point. - LTE_NR_PC5: This value is used to indicate that UE supports both PC5 LTE and NR RAT for V2X communication over PC5 reference point..
	//  (Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/Pc5Capability)
	Pc5Capab *Pc5Capability `json:"pc5Capab,omitempty"`
	Pei      Pei            `json:"pei,omitempty"`
	RatType  *RatType       `json:"ratType,omitempty"`

	// ServiceName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	ServiceName          *ServiceName           `json:"serviceName,omitempty"`
	ServingNfId          *NfInstanceId          `json:"servingNfId,omitempty"`
	ServingPlmn          *PlmnIdNid             `json:"servingPlmn,omitempty"`
	Supi                 Supi                   `json:"supi"`
	SuppFeat             SupportedFeatures      `json:"suppFeat"`
	TimeZone             *TimeZone              `json:"timeZone,omitempty"`
	UePolReq             *UePolicyRequest       `json:"uePolReq,omitempty"`
	UserLoc              *UserLocation          `json:"userLoc,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UEPolicyPolicyAssociationUpdateRequest Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/PolicyAssociationUpdateRequest
type UEPolicyPolicyAssociationUpdateRequest struct {
	// AltNotifFqdns Alternate or backup FQDN(s) where to send Notifications.
	AltNotifFqdns []Fqdn `json:"altNotifFqdns,omitempty"`

	// AltNotifIpv4Addrs Alternate or backup IPv4 Address(es) where to send Notifications.
	AltNotifIpv4Addrs []Ipv4Addr `json:"altNotifIpv4Addrs,omitempty"`

	// AltNotifIpv6Addrs Alternate or backup IPv6 Address(es) where to send Notifications.
	AltNotifIpv6Addrs []Ipv6Addr `json:"altNotifIpv6Addrs,omitempty"`

	// ConnectState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/CmState
	ConnectState    *CmState  `json:"connectState,omitempty"`
	GroupIds        []GroupId `json:"groupIds,omitempty"`
	Guami           *Guami    `json:"guami,omitempty"`
	NotificationUri *Uri      `json:"notificationUri,omitempty"`
	PlmnId          *PlmnId   `json:"plmnId,omitempty"`

	// PraStatuses Map of PRA status information.
	PraStatuses *map[string]PresenceInfo `json:"praStatuses,omitempty"`
	ServingNfId *NfInstanceId            `json:"servingNfId,omitempty"`

	// Triggers Request Triggers that the NF service consumer observes.
	Triggers       []UEPolicyRequestTrigger `json:"triggers,omitempty"`
	UePolDelResult *UePolicyDeliveryResult  `json:"uePolDelResult,omitempty"`
	UePolReq       *UePolicyRequest         `json:"uePolReq,omitempty"`

	// UePolTransFailNotif Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/UePolicyTransferFailureNotification
	UePolTransFailNotif  *UePolicyTransferFailureNotification `json:"uePolTransFailNotif,omitempty"`
	UserLoc              *UserLocation                        `json:"userLoc,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// UEPolicyPolicyUpdate Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/PolicyUpdate
type UEPolicyPolicyUpdate struct {
	// N2Pc5Pol Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	N2Pc5Pol *N2InfoContent `json:"n2Pc5Pol,omitempty"`

	// Pras Map of PRA information.
	Pras        *map[string]PresenceInfo `json:"pras"`
	ResourceUri Uri                      `json:"resourceUri"`

	// Triggers Request Triggers that the PCF subscribes. Only values "LOC_CH" and "PRA_CH" are permitted.
	Triggers             *[]UEPolicyRequestTrigger `json:"triggers"`
	UePolicy             *UePolicy                 `json:"uePolicy,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// UEPolicyRequestTrigger Possible values are - LOC_CH: Location change (tracking area). The tracking area of the UE has changed. - PRA_CH: Change of UE presence in PRA. The AMF reports the current presence status of the UE in a Presence Reporting Area, and notifies that the UE enters/leaves the Presence Reporting Area. - UE_POLICY: A MANAGE UE POLICY COMPLETE message or a MANAGE UE POLICY COMMAND REJECT message, as defined in Annex D.5 of 3GPP TS 24.501 or a "UE POLICY PROVISIONING REQUEST" message, as defined in subclause 7.2.1.1 of 3GPP TS 24.587 , has been received by the AMF and is being forwarded. - PLMN_CH: PLMN change. the serving PLMN of UE has changed.  - CON_STATE_CH: Connectivity state change: the connectivity state of UE has changed.  - GROUP_ID_LIST_CHG: UE Internal Group Identifier(s) has changed. This event does not require a subscription
//
//	(Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/RequestTrigger)
type UEPolicyRequestTrigger string

// UEPolicyTerminationNotification Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/TerminationNotification
type UEPolicyTerminationNotification struct {
	// Cause Possible values are - UNSPECIFIED: This value is used for unspecified reasons. - UE_SUBSCRIPTION: This value is used to indicate that the policy association needs to be terminated because the subscription of UE has changed (e.g. was removed). - INSUFFICIENT_RES: This value is used to indicate that the server is overloaded and needs to abort the policy association.
	//  (Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/PolicyAssociationReleaseCause)
	Cause                UEPolicyPolicyAssociationReleaseCause `json:"cause"`
	ResourceUri          Uri                                   `json:"resourceUri"`
	AdditionalProperties map[string]interface{}                `json:"-"`
}

// UPInterfaceType Types of User-Plane interfaces of the UPF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UPInterfaceType)
type UPInterfaceType string

// UdmInfo Information of an UDM NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdmInfo)
type UdmInfo struct {
	ExternalGroupIdentifiersRanges []IdentityRange        `json:"externalGroupIdentifiersRanges,omitempty"`
	GpsiRanges                     []IdentityRange        `json:"gpsiRanges,omitempty"`
	GroupId                        *NfGroupId             `json:"groupId,omitempty"`
	InternalGroupIdentifiersRanges []InternalGroupIdRange `json:"internalGroupIdentifiersRanges,omitempty"`
	RoutingIndicators              []string               `json:"routingIndicators,omitempty"`
	SupiRanges                     []SupiRange            `json:"supiRanges,omitempty"`
	AdditionalProperties           map[string]interface{} `json:"-"`
}

// UdrInfo Information of an UDR NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdrInfo)
type UdrInfo struct {
	ExternalGroupIdentifiersRanges []IdentityRange        `json:"externalGroupIdentifiersRanges,omitempty"`
	GpsiRanges                     []IdentityRange        `json:"gpsiRanges,omitempty"`
	GroupId                        *NfGroupId             `json:"groupId,omitempty"`
	SupiRanges                     []SupiRange            `json:"supiRanges,omitempty"`
	SupportedDataSets              []DataSetId            `json:"supportedDataSets,omitempty"`
	AdditionalProperties           map[string]interface{} `json:"-"`
}

// UdsfInfo Information related to UDSF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UdsfInfo)
type UdsfInfo struct {
	GroupId *NfGroupId `json:"groupId,omitempty"`

	// StorageIdRanges A map (list of key-value pairs) where realmId serves as key and each value in the map is an array of IdentityRanges. Each IdentityRange is a range of storageIds.
	StorageIdRanges      *map[string][]IdentityRange `json:"storageIdRanges,omitempty"`
	SupiRanges           []SupiRange                 `json:"supiRanges,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// UeAuth defines model for UeAuth.
type UeAuth string

// UeCampingRep Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UeCampingRep
type UeCampingRep struct {
	AccessType AccessType `json:"accessType,omitempty"`

	// NetLocAccSupp Possible values are - ANR_NOT_SUPPORTED: Indicates that the access network does not support the report of access network information. - TZR_NOT_SUPPORTED: Indicates that the access network does not support the report of UE time zone. - LOC_NOT_SUPPORTED: Indicates that the access network does not support the report of UE Location (or PLMN Id).
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/NetLocAccessSupport)
	NetLocAccSupp *NetLocAccessSupport `json:"netLocAccSupp,omitempty"`
	RatType       *RatType             `json:"ratType,omitempty"`

	// ServNfId Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ServingNfIdentity
	ServNfId             *ServingNfIdentity     `json:"servNfId,omitempty"`
	ServingNetwork       *PlmnIdNid             `json:"servingNetwork,omitempty"`
	UeTimeZone           *TimeZone              `json:"ueTimeZone,omitempty"`
	UserLocationInfo     *UserLocation          `json:"userLocationInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContext
type UeContext struct {
	N5gMmCapability        *N5GMmCapability   `json:"5gMmCapability,omitempty"`
	AmPolicyReqTriggerList []PolicyReqTrigger `json:"amPolicyReqTriggerList,omitempty"`
	AusfGroupId            *NfGroupId         `json:"ausfGroupId,omitempty"`
	CMsisdn                CMsisdn            `json:"cMsisdn,omitempty"`

	// CagData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/CagData
	CagData             *CagData      `json:"cagData,omitempty"`
	DrxParameter        *DrxParameter `json:"drxParameter,omitempty"`
	EcRestrictionDataNb *bool         `json:"ecRestrictionDataNb,omitempty"`

	// EcRestrictionDataWb Original definition in TS29518_Namf_Communication.yaml#/components/schemas/EcRestrictionDataWb
	EcRestrictionDataWb   *EcRestrictionDataWb      `json:"ecRestrictionDataWb,omitempty"`
	EventSubscriptionList []ExtAmfEventSubscription `json:"eventSubscriptionList,omitempty"`
	ForbiddenAreaList     []Area                    `json:"forbiddenAreaList,omitempty"`
	GpsiList              []Gpsi                    `json:"gpsiList,omitempty"`
	GroupList             []GroupId                 `json:"groupList,omitempty"`
	HpcfId                *NfInstanceId             `json:"hpcfId,omitempty"`
	HpcfSetId             *NfSetId                  `json:"hpcfSetId,omitempty"`
	IabOperationAllowed   *bool                     `json:"iabOperationAllowed,omitempty"`

	// ImmediateMdtConf Original definition in TS29518_Namf_Communication.yaml#/components/schemas/ImmediateMdtConf
	ImmediateMdtConf   *ImmediateMdtConf `json:"immediateMdtConf,omitempty"`
	LteCatMInd         *bool             `json:"lteCatMInd,omitempty"`
	ManagementMdtInd   *bool             `json:"managementMdtInd,omitempty"`
	MmContextList      []MmContext       `json:"mmContextList,omitempty"`
	MoExpDataCounter   *MoExpDataCounter `json:"moExpDataCounter,omitempty"`
	MsClassmark2       *MSClassmark2     `json:"msClassmark2,omitempty"`
	PcfAmPolicyUri     *Uri              `json:"pcfAmPolicyUri,omitempty"`
	PcfAmpBindingInfo  *string           `json:"pcfAmpBindingInfo,omitempty"`
	PcfAmpServiceSetId *NfServiceSetId   `json:"pcfAmpServiceSetId,omitempty"`

	// PcfBinding Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SbiBindingLevel
	PcfBinding         *SbiBindingLevel `json:"pcfBinding,omitempty"`
	PcfGroupId         *NfGroupId       `json:"pcfGroupId,omitempty"`
	PcfId              *NfInstanceId    `json:"pcfId,omitempty"`
	PcfRfsp            RfspIndex        `json:"pcfRfsp,omitempty"`
	PcfSetId           *NfSetId         `json:"pcfSetId,omitempty"`
	PcfUeAmbr          *Ambr            `json:"pcfUeAmbr,omitempty"`
	PcfUePolicyUri     *Uri             `json:"pcfUePolicyUri,omitempty"`
	PcfUepBindingInfo  *string          `json:"pcfUepBindingInfo,omitempty"`
	PcfUepServiceSetId *NfServiceSetId  `json:"pcfUepServiceSetId,omitempty"`
	Pei                Pei              `json:"pei,omitempty"`

	// PraInAmPolicy A map(list of key-value pairs) where praId serves as key.
	PraInAmPolicy *map[string]PresenceInfo `json:"praInAmPolicy,omitempty"`

	// PraInUePolicy A map(list of key-value pairs) where praId serves as key.
	PraInUePolicy              *map[string]PresenceInfo `json:"praInUePolicy,omitempty"`
	RestrictedCoreNwTypeList   []CoreNetworkType        `json:"restrictedCoreNwTypeList,omitempty"`
	RestrictedPrimaryRatList   []RatType                `json:"restrictedPrimaryRatList,omitempty"`
	RestrictedRatList          []RatType                `json:"restrictedRatList,omitempty"`
	RestrictedSecondaryRatList []RatType                `json:"restrictedSecondaryRatList,omitempty"`
	RoutingIndicator           *string                  `json:"routingIndicator,omitempty"`

	// SeafData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/SeafData
	SeafData                 *SeafData                 `json:"seafData,omitempty"`
	ServiceAreaRestriction   *ServiceAreaRestriction   `json:"serviceAreaRestriction,omitempty"`
	ServiceGapExpiryTime     *DateTime                 `json:"serviceGapExpiryTime,omitempty"`
	SessionContextList       []PduSessionContext       `json:"sessionContextList,omitempty"`
	SmallDataRateStatusInfos []SmallDataRateStatusInfo `json:"smallDataRateStatusInfos,omitempty"`

	// SmfSelInfo Original definition in TS29507_Npcf_AMPolicyControl.yaml#/components/schemas/SmfSelectionData
	SmfSelInfo             *SmfSelectionData  `json:"smfSelInfo"`
	SmsfBindingInfo        *string            `json:"smsfBindingInfo,omitempty"`
	SmsfId                 *NfInstanceId      `json:"smsfId,omitempty"`
	SmsfServiceSetId       *NfServiceSetId    `json:"smsfServiceSetId,omitempty"`
	SmsfSetId              *NfSetId           `json:"smsfSetId,omitempty"`
	StnSr                  *StnSr             `json:"stnSr,omitempty"`
	SubRfsp                RfspIndex          `json:"subRfsp,omitempty"`
	SubUeAmbr              *Ambr              `json:"subUeAmbr,omitempty"`
	Supi                   Supi               `json:"supi,omitempty"`
	SupiUnauthInd          *bool              `json:"supiUnauthInd,omitempty"`
	SupportedCodecList     []SupportedCodec   `json:"supportedCodecList,omitempty"`
	TraceData              *TraceData         `json:"traceData"`
	UdmGroupId             *NfGroupId         `json:"udmGroupId,omitempty"`
	UePolicyReqTriggerList []PolicyReqTrigger `json:"uePolicyReqTriggerList,omitempty"`

	// UpdpSubscriptionData UE policy delivery related N1 message notification subscription data. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UpdpSubscriptionData)
	UpdpSubscriptionData       *UpdpSubscriptionData   `json:"updpSubscriptionData,omitempty"`
	UsedRfsp                   RfspIndex               `json:"usedRfsp,omitempty"`
	UsedServiceAreaRestriction *ServiceAreaRestriction `json:"usedServiceAreaRestriction,omitempty"`

	// V2xContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/V2xContext
	V2xContext           *V2xContext                     `json:"v2xContext,omitempty"`
	WlServAreaRes        *WirelineServiceAreaRestriction `json:"wlServAreaRes,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// UeContextCancelRelocateData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextCancelRelocateData
type UeContextCancelRelocateData struct {
	RelocationCancelRequest RefToBinaryData        `json:"relocationCancelRequest"`
	Supi                    Supi                   `json:"supi,omitempty"`
	AdditionalProperties    map[string]interface{} `json:"-"`
}

// UeContextCreateData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextCreateData
type UeContextCreateData struct {
	N2NotifyUri    *Uri              `json:"n2NotifyUri,omitempty"`
	NgapCause      *NgApCause        `json:"ngapCause,omitempty"`
	PduSessionList []N2SmInformation `json:"pduSessionList"`
	ServingNetwork *PlmnIdNid        `json:"servingNetwork,omitempty"`

	// SourceToTargetData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	SourceToTargetData N2InfoContent      `json:"sourceToTargetData"`
	SupportedFeatures  *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// TargetId Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgRanTargetId
	TargetId NgRanTargetId `json:"targetId"`

	// UeContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContext
	UeContext UeContext `json:"ueContext"`

	// UeRadioCapability Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	UeRadioCapability    *N2InfoContent         `json:"ueRadioCapability,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextCreateError Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextCreateError
type UeContextCreateError struct {
	Error     ProblemDetails `json:"error"`
	NgapCause *NgApCause     `json:"ngapCause,omitempty"`

	// TargetToSourceFailureData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	TargetToSourceFailureData *N2InfoContent         `json:"targetToSourceFailureData,omitempty"`
	AdditionalProperties      map[string]interface{} `json:"-"`
}

// UeContextCreatedData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextCreatedData
type UeContextCreatedData struct {
	FailedSessionList []N2SmInformation  `json:"failedSessionList,omitempty"`
	PcfReselectedInd  *bool              `json:"pcfReselectedInd,omitempty"`
	PduSessionList    []N2SmInformation  `json:"pduSessionList"`
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// TargetToSourceData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	TargetToSourceData N2InfoContent `json:"targetToSourceData"`

	// UeContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContext
	UeContext            UeContext              `json:"ueContext"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextInAmfData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeContextInAmfData
type UeContextInAmfData struct {
	// EpsInterworkingInfo Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/EpsInterworkingInfo
	EpsInterworkingInfo  *EpsInterworkingInfo   `json:"epsInterworkingInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextInSmfData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeContextInSmfData
type UeContextInSmfData struct {
	// EmergencyInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/EmergencyInfo
	EmergencyInfo *EmergencyInfo `json:"emergencyInfo,omitempty"`

	// PduSessions A map (list of key-value pairs where PduSessionId serves as key) of PduSessions
	PduSessions          *map[string]PduSession `json:"pduSessions,omitempty"`
	PgwInfo              []PgwInfo              `json:"pgwInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextInSmsfData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeContextInSmsfData
type UeContextInSmsfData struct {
	// SmsfInfo3GppAccess Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsfInfo
	SmsfInfo3GppAccess *SmsfInfo `json:"smsfInfo3GppAccess,omitempty"`

	// SmsfInfoNon3GppAccess Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/SmsfInfo
	SmsfInfoNon3GppAccess *SmsfInfo              `json:"smsfInfoNon3GppAccess,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// UeContextInfo Original definition in TS29518_Namf_MT.yaml#/components/schemas/UeContextInfo
type UeContextInfo struct {
	AccessType           AccessType             `json:"accessType,omitempty"`
	LastActTime          *DateTime              `json:"lastActTime,omitempty"`
	RatType              *RatType               `json:"ratType,omitempty"`
	SupportVoPS          *bool                  `json:"supportVoPS,omitempty"`
	SupportVoPSn3gpp     *bool                  `json:"supportVoPSn3gpp,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextInfoClass Original definition in TS29518_Namf_MT.yaml#/components/schemas/UeContextInfoClass
type UeContextInfoClass string

// UeContextRelocateData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextRelocateData
type UeContextRelocateData struct {
	ForwardRelocationRequest RefToBinaryData   `json:"forwardRelocationRequest"`
	NgapCause                *NgApCause        `json:"ngapCause,omitempty"`
	PduSessionList           []N2SmInformation `json:"pduSessionList,omitempty"`

	// SourceToTargetData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	SourceToTargetData N2InfoContent      `json:"sourceToTargetData"`
	SupportedFeatures  *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// TargetId Original definition in TS29518_Namf_Communication.yaml#/components/schemas/NgRanTargetId
	TargetId NgRanTargetId `json:"targetId"`

	// UeContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContext
	UeContext UeContext `json:"ueContext"`

	// UeRadioCapability Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	UeRadioCapability    *N2InfoContent         `json:"ueRadioCapability,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextRelocatedData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextRelocatedData
type UeContextRelocatedData struct {
	// UeContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContext
	UeContext            UeContext              `json:"ueContext"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextTransferReqData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextTransferReqData
type UeContextTransferReqData struct {
	AccessType AccessType `json:"accessType"`
	PlmnId     *PlmnId    `json:"plmnId,omitempty"`

	// Reason Original definition in TS29518_Namf_Communication.yaml#/components/schemas/TransferReason
	Reason TransferReason `json:"reason"`

	// RegRequest Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageContainer
	RegRequest           *N1MessageContainer    `json:"regRequest,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextTransferRspData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextTransferRspData
type UeContextTransferRspData struct {
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// UeContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContext
	UeContext UeContext `json:"ueContext"`

	// UeNbiotRadioCapability Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	UeNbiotRadioCapability *N2InfoContent `json:"ueNbiotRadioCapability,omitempty"`

	// UeRadioCapability Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	UeRadioCapability    *N2InfoContent         `json:"ueRadioCapability,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextTransferStatus Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextTransferStatus
type UeContextTransferStatus string

// UeDifferentiationInfo Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeDifferentiationInfo
type UeDifferentiationInfo struct {
	BatteryInd *BatteryIndication `json:"batteryInd,omitempty"`

	// PeriodicComInd Original definition in TS29518_Namf_Communication.yaml#/components/schemas/PeriodicCommunicationIndicator
	PeriodicComInd   *PeriodicCommunicationIndicator `json:"periodicComInd,omitempty"`
	PeriodicTime     *DurationSec                    `json:"periodicTime,omitempty"`
	ScheduledComTime *ScheduledCommunicationTime     `json:"scheduledComTime,omitempty"`

	// StationaryInd Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
	StationaryInd *StationaryIndication `json:"stationaryInd,omitempty"`

	// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
	TrafficProfile       *TrafficProfile        `json:"trafficProfile,omitempty"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeId Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeId
type UeId struct {
	GpsiList             []Gpsi                 `json:"gpsiList,omitempty"`
	Supi                 Supi                   `json:"supi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeIdentityInfo Represents 5GS-Level UE identities. (Original definition in TS29514_Npcf_PolicyAuthorization.yaml#/components/schemas/UeIdentityInfo)
type UeIdentityInfo struct {
	Gpsi                 Gpsi                   `json:"gpsi,omitempty"`
	Pei                  Pei                    `json:"pei,omitempty"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeInfo Original definition in TS29503_Nudm_MT.yaml#/components/schemas/UeInfo
type UeInfo struct {
	// N5gSrvccInfo Original definition in TS29503_Nudm_MT.yaml#/components/schemas/5GSrvccInfo
	N5gSrvccInfo *N5GSrvccInfo `json:"5gSrvccInfo,omitempty"`

	// TadsInfo Original definition in TS29518_Namf_MT.yaml#/components/schemas/UeContextInfo
	TadsInfo *UeContextInfo `json:"tadsInfo,omitempty"`

	// UserState Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/5GsUserState
	UserState            *N5GsUserState         `json:"userState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeInitiatedResourceRequest Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UeInitiatedResourceRequest
type UeInitiatedResourceRequest struct {
	PackFiltInfo []PacketFilterInfo `json:"packFiltInfo"`
	PccRuleId    *string            `json:"pccRuleId,omitempty"`
	Precedence   *int               `json:"precedence,omitempty"`

	// ReqQos Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RequestedQos
	ReqQos *RequestedQos `json:"reqQos,omitempty"`

	// RuleOp Possible values are - CREATE_PCC_RULE: Indicates to create a new PCC rule to reserve the resource requested by the UE.  - DELETE_PCC_RULE: Indicates to delete a PCC rule corresponding to reserve the resource requested by the UE. - MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS: Indicates to modify the PCC rule by adding new packet filter(s). - MODIFY_ PCC_RULE_AND_REPLACE_PACKET_FILTERS: Indicates to modify the PCC rule by replacing the existing packet filter(s). - MODIFY_ PCC_RULE_AND_DELETE_PACKET_FILTERS: Indicates to modify the PCC rule by deleting the existing packet filter(s). - MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS: Indicates to modify the PCC rule by modifying the QoS of the PCC rule.
	//  (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/RuleOperation)
	RuleOp               RuleOperation          `json:"ruleOp"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeN1N2InfoSubscriptionCreateData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeN1N2InfoSubscriptionCreateData
type UeN1N2InfoSubscriptionCreateData struct {
	// N1MessageClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1MessageClass
	N1MessageClass      *N1MessageClass `json:"n1MessageClass,omitempty"`
	N1NotifyCallbackUri *Uri            `json:"n1NotifyCallbackUri,omitempty"`

	// N2InformationClass Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InformationClass
	N2InformationClass   *N2InformationClass    `json:"n2InformationClass,omitempty"`
	N2NotifyCallbackUri  *Uri                   `json:"n2NotifyCallbackUri,omitempty"`
	NfId                 *NfInstanceId          `json:"nfId,omitempty"`
	OldGuami             *Guami                 `json:"oldGuami,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeN1N2InfoSubscriptionCreatedData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeN1N2InfoSubscriptionCreatedData
type UeN1N2InfoSubscriptionCreatedData struct {
	N1n2NotifySubscriptionId string                 `json:"n1n2NotifySubscriptionId"`
	SupportedFeatures        *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// UePolicy defines model for UePolicy.
type UePolicy = Bytes

// UePolicyDeliveryResult defines model for UePolicyDeliveryResult.
type UePolicyDeliveryResult = Bytes

// UePolicyRequest defines model for UePolicyRequest.
type UePolicyRequest = Bytes

// UePolicySection Contains the UE policy section. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UePolicySection)
type UePolicySection struct {
	UePolicySectionInfo  Bytes                  `json:"uePolicySectionInfo"`
	Upsi                 string                 `json:"upsi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UePolicySet Contains the UE policy data for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UePolicySet)
type UePolicySet struct {
	AllowedRouteSelDescs *map[string]PlmnRouteSelectionDescriptor `json:"allowedRouteSelDescs,omitempty"`
	AndspInd             *bool                                    `json:"andspInd,omitempty"`
	OsIds                []OsId                                   `json:"osIds,omitempty"`
	Pei                  Pei                                      `json:"pei,omitempty"`
	PraInfos             *map[string]PresenceInfo                 `json:"praInfos,omitempty"`
	SubscCats            []string                                 `json:"subscCats,omitempty"`
	SuppFeat             *SupportedFeatures                       `json:"suppFeat,omitempty"`
	UePolicySections     *map[string]UePolicySection              `json:"uePolicySections,omitempty"`
	Upsis                []string                                 `json:"upsis,omitempty"`
	AdditionalProperties map[string]interface{}                   `json:"-"`
}

// UePolicySetPatch Contains the UE policy set for a given subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UePolicySetPatch)
type UePolicySetPatch struct {
	AndspInd             *bool                       `json:"andspInd,omitempty"`
	OsIds                []OsId                      `json:"osIds,omitempty"`
	Pei                  Pei                         `json:"pei,omitempty"`
	UePolicySections     *map[string]UePolicySection `json:"uePolicySections,omitempty"`
	Upsis                []string                    `json:"upsis,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// UePolicyTransferFailureNotification Original definition in TS29525_Npcf_UEPolicyControl.yaml#/components/schemas/UePolicyTransferFailureNotification
type UePolicyTransferFailureNotification struct {
	// Cause Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N1N2MessageTransferCause
	Cause                N1N2MessageTransferCause `json:"cause"`
	Ptis                 []Uinteger               `json:"ptis"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// UeReachability Original definition in TS29518_Namf_EventExposure.yaml#/components/schemas/UeReachability
type UeReachability string

// UeRegStatusUpdateReqData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeRegStatusUpdateReqData
type UeRegStatusUpdateReqData struct {
	PcfReselectedInd     *bool           `json:"pcfReselectedInd,omitempty"`
	SmfChangeInfoList    []SmfChangeInfo `json:"smfChangeInfoList,omitempty"`
	ToReleaseSessionList []PduSessionId  `json:"toReleaseSessionList,omitempty"`

	// TransferStatus Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeContextTransferStatus
	TransferStatus       UeContextTransferStatus `json:"transferStatus"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// UeRegStatusUpdateRspData Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UeRegStatusUpdateRspData
type UeRegStatusUpdateRspData struct {
	RegStatusTransferComplete bool                   `json:"regStatusTransferComplete"`
	AdditionalProperties      map[string]interface{} `json:"-"`
}

// UeSecurityCapability defines model for UeSecurityCapability.
type UeSecurityCapability = Bytes

// UeUpdateStatus Original definition in TS29505_Subscription_Data.yaml#/components/schemas/UeUpdateStatus
type UeUpdateStatus string

// UeUsageType Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UeUsageType
type UeUsageType = int

// Uint16 defines model for Uint16.
type Uint16 = uint16

// Uint32 defines model for Uint32.
type Uint32 = uint32

// Uint32Rm defines model for Uint32Rm.
type Uint32Rm = uint32

// Uint64 defines model for Uint64.
type Uint64 = uint64

// Uinteger defines model for Uinteger.
type Uinteger = uint

// UlclBpInformation Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UlclBpInformation
type UlclBpInformation struct {
	UlclBpUpfId          *NfInstanceId          `json:"ulclBpUpfId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UnavailableAccessIndication Possible values are
//   - 3GA_UNAVAILABLE
//   - N3GA_UNAVAILABLE
//     (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UnavailableAccessIndication)
type UnavailableAccessIndication string

// UnrelatedClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UnrelatedClass
type UnrelatedClass struct {
	// DefaultUnrelatedClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DefaultUnrelatedClass
	DefaultUnrelatedClass DefaultUnrelatedClass `json:"defaultUnrelatedClass"`

	// ExternalUnrelatedClass Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ExternalUnrelatedClass
	ExternalUnrelatedClass      *ExternalUnrelatedClass     `json:"externalUnrelatedClass,omitempty"`
	ServiceTypeUnrelatedClasses []ServiceTypeUnrelatedClass `json:"serviceTypeUnrelatedClasses,omitempty"`
	AdditionalProperties        map[string]interface{}      `json:"-"`
}

// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
//
//	(Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpCnxState)
type UpCnxState string

// UpConfidentiality defines model for UpConfidentiality.
type UpConfidentiality string

// UpIntegrity defines model for UpIntegrity.
type UpIntegrity string

// UpPathChgEvent Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UpPathChgEvent
type UpPathChgEvent struct {
	AfAckInd *bool `json:"afAckInd,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType DnaiChangeType `json:"dnaiChgType"`

	// NotifCorreId It is used to set the value of Notification Correlation ID in the notification sent by the SMF.
	NotifCorreId         string                 `json:"notifCorreId"`
	NotificationUri      Uri                    `json:"notificationUri"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpSecurity defines model for UpSecurity.
type UpSecurity struct {
	UpConfid             UpConfidentiality      `json:"upConfid"`
	UpIntegr             UpIntegrity            `json:"upIntegr"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpSecurityInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/UpSecurityInfo
type UpSecurityInfo struct {
	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaxIntegrityProtectedDataRate)
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`

	// SecurityResult Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SecurityResult
	SecurityResult       *SecurityResult        `json:"securityResult,omitempty"`
	UpSecurity           UpSecurity             `json:"upSecurity"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdatedItem Identifies a fragment of a resource. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UpdatedItem)
type UpdatedItem struct {
	// Item Identifies a fragment (subset of resource data) of a given resource. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/ItemPath)
	Item                 ItemPath               `json:"item"`
	Value                interface{}            `json:"value"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdpSubscriptionData UE policy delivery related N1 message notification subscription data. (Original definition in TS29518_Namf_Communication.yaml#/components/schemas/UpdpSubscriptionData)
type UpdpSubscriptionData struct {
	SupportedFeatures        *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	UpdpCallbackBinding      *string                `json:"updpCallbackBinding,omitempty"`
	UpdpNotifyCallbackUri    Uri                    `json:"updpNotifyCallbackUri"`
	UpdpNotifySubscriptionId string                 `json:"updpNotifySubscriptionId"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// UpfCond Subscription to a set of NF Instances (UPFs), able to serve a certain service area (i.e. SMF serving area or TAI list) (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UpfCond)
type UpfCond struct {
	ConditionType        UpfCondConditionType   `json:"conditionType"`
	SmfServingArea       []string               `json:"smfServingArea,omitempty"`
	TaiList              []Tai                  `json:"taiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpfCondConditionType defines model for UpfCond.ConditionType.
type UpfCondConditionType string

// UpfInfo Information of an UPF NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/UpfInfo)
type UpfInfo struct {
	AtsssCapability      *AtsssCapability       `json:"atsssCapability,omitempty"`
	DataForwarding       *bool                  `json:"dataForwarding,omitempty"`
	InterfaceUpfInfoList []InterfaceUpfInfoItem `json:"interfaceUpfInfoList,omitempty"`
	Ipups                *bool                  `json:"ipups,omitempty"`
	IwkEpsInd            *bool                  `json:"iwkEpsInd,omitempty"`
	PduSessionTypes      []PduSessionType       `json:"pduSessionTypes,omitempty"`
	Priority             *int                   `json:"priority,omitempty"`
	RedundantGtpu        *bool                  `json:"redundantGtpu,omitempty"`
	SNssaiUpfInfoList    []SnssaiUpfInfoItem    `json:"sNssaiUpfInfoList"`
	SmfServingArea       []string               `json:"smfServingArea,omitempty"`
	TaiList              []Tai                  `json:"taiList,omitempty"`

	// TngfInfo Infomation of the TNGF endpoints (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TngfInfo)
	TngfInfo *TngfInfo `json:"tngfInfo,omitempty"`

	// TwifInfo Addressing information (IP addresses, FQDN) of the TWIF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TwifInfo)
	TwifInfo    *TwifInfo `json:"twifInfo,omitempty"`
	UeIpAddrInd *bool     `json:"ueIpAddrInd,omitempty"`

	// WAgfInfo Information of the W-AGF end-points (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/WAgfInfo)
	WAgfInfo             *WAgfInfo              `json:"wAgfInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpuAckInd Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuAckInd
type UpuAckInd = bool

// UpuData Original definition in TS29505_Subscription_Data.yaml#/components/schemas/UpuData
type UpuData struct {
	ProvisioningTime DateTime `json:"provisioningTime"`

	// UeUpdateStatus Original definition in TS29505_Subscription_Data.yaml#/components/schemas/UeUpdateStatus
	UeUpdateStatus UeUpdateStatus `json:"ueUpdateStatus"`

	// UpuMacIue Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuMac
	UpuMacIue UpuMac `json:"upuMacIue,omitempty"`

	// UpuXmacIue Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuMac
	UpuXmacIue           UpuMac                 `json:"upuXmacIue,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpuHeader Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuHeader
type UpuHeader = string

// UpuInfo Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UpuInfo
type UpuInfo struct {
	// CounterUpu Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/CounterUpu
	CounterUpu       CounterUpu `json:"counterUpu,omitempty"`
	ProvisioningTime DateTime   `json:"provisioningTime"`

	// UpuAckInd Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuAckInd
	UpuAckInd   UpuAckInd     `json:"upuAckInd"`
	UpuDataList []AusfUpuData `json:"upuDataList"`

	// UpuMacIausf Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuMac
	UpuMacIausf UpuMac `json:"upuMacIausf,omitempty"`

	// UpuRegInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UpuRegInd
	UpuRegInd            UpuRegInd              `json:"upuRegInd"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpuMac Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuMac
type UpuMac = string

// UpuRegInd Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/UpuRegInd
type UpuRegInd = bool

// UpuSecurityInfo Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuSecurityInfo
type UpuSecurityInfo struct {
	// CounterUpu Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/CounterUpu
	CounterUpu CounterUpu `json:"counterUpu"`

	// UpuMacIausf Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuMac
	UpuMacIausf UpuMac `json:"upuMacIausf"`

	// UpuXmacIue Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuMac
	UpuXmacIue           UpuMac                 `json:"upuXmacIue,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Uri defines model for Uri.
type Uri = string

// UriScheme defines model for UriScheme.
type UriScheme string

// UsageMonData Contains remain allowed usage data for a subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UsageMonData)
type UsageMonData struct {
	// AllowedUsage Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThreshold
	AllowedUsage *UsageThreshold               `json:"allowedUsage,omitempty"`
	LimitId      string                        `json:"limitId"`
	ResetTime    *DateTime                     `json:"resetTime,omitempty"`
	Scopes       *map[string]UsageMonDataScope `json:"scopes,omitempty"`
	SuppFeat     *SupportedFeatures            `json:"suppFeat,omitempty"`

	// UmLevel Original definition in TS29519_Policy_Data.yaml#/components/schemas/UsageMonLevel
	UmLevel              *UsageMonLevel         `json:"umLevel,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UsageMonDataLimit Contains usage monitoring control data for a subscriber. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UsageMonDataLimit)
type UsageMonDataLimit struct {
	EndDate *DateTime `json:"endDate,omitempty"`
	LimitId string    `json:"limitId"`

	// ResetPeriod Contains the periodicity for the defined usage monitoring data limits. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/TimePeriod)
	ResetPeriod *TimePeriod                   `json:"resetPeriod,omitempty"`
	Scopes      *map[string]UsageMonDataScope `json:"scopes,omitempty"`
	StartDate   *DateTime                     `json:"startDate,omitempty"`

	// UmLevel Original definition in TS29519_Policy_Data.yaml#/components/schemas/UsageMonLevel
	UmLevel *UsageMonLevel `json:"umLevel,omitempty"`

	// UsageLimit Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThreshold
	UsageLimit           *UsageThreshold        `json:"usageLimit,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UsageMonDataScope Contains a SNSSAI and DNN combinations to which the UsageMonData instance belongs to. (Original definition in TS29519_Policy_Data.yaml#/components/schemas/UsageMonDataScope)
type UsageMonDataScope struct {
	Dnn                  []Dnn                  `json:"dnn,omitempty"`
	Snssai               Snssai                 `json:"snssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UsageMonLevel Original definition in TS29519_Policy_Data.yaml#/components/schemas/UsageMonLevel
type UsageMonLevel string

// UsageMonitoringData Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UsageMonitoringData
type UsageMonitoringData struct {
	// ExUsagePccRuleIds Contains the PCC rule identifier(s) which corresponding service data flow(s) shall be excluded from PDU Session usage monitoring. It is only included in the UsageMonitoringData instance for session level usage monitoring.
	ExUsagePccRuleIds *[]string      `json:"exUsagePccRuleIds"`
	InactivityTime    *DurationSecRm `json:"inactivityTime"`
	MonitoringTime    *DateTimeRm    `json:"monitoringTime"`
	NextTimeThreshold *DurationSecRm `json:"nextTimeThreshold"`

	// NextVolThreshold Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	NextVolThreshold *VolumeRm `json:"nextVolThreshold"`

	// NextVolThresholdDownlink Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	NextVolThresholdDownlink *VolumeRm `json:"nextVolThresholdDownlink"`

	// NextVolThresholdUplink Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	NextVolThresholdUplink *VolumeRm      `json:"nextVolThresholdUplink"`
	TimeThreshold          *DurationSecRm `json:"timeThreshold"`

	// UmId Univocally identifies the usage monitoring policy data within a PDU session.
	UmId string `json:"umId"`

	// VolumeThreshold Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	VolumeThreshold *VolumeRm `json:"volumeThreshold"`

	// VolumeThresholdDownlink Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	VolumeThresholdDownlink *VolumeRm `json:"volumeThresholdDownlink"`

	// VolumeThresholdUplink Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	VolumeThresholdUplink *VolumeRm              `json:"volumeThresholdUplink"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// UsageThreshold Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThreshold
type UsageThreshold struct {
	// DownlinkVolume Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	DownlinkVolume *Volume `json:"downlinkVolume,omitempty"`

	// Duration Unsigned integer identifying a period of time in units of seconds. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSec)
	Duration *TS29122DurationSec `json:"duration,omitempty"`

	// TotalVolume Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	TotalVolume *Volume `json:"totalVolume,omitempty"`

	// UplinkVolume Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
	UplinkVolume         *Volume                `json:"uplinkVolume,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UsageThresholdRm Original definition in TS29122_CommonData.yaml#/components/schemas/UsageThresholdRm
type UsageThresholdRm struct {
	// DownlinkVolume Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	DownlinkVolume *VolumeRm `json:"downlinkVolume"`

	// Duration Unsigned integer identifying a period of time in units of seconds with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/DurationSecRm)
	Duration *TS29122DurationSecRm `json:"duration"`

	// TotalVolume Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	TotalVolume *VolumeRm `json:"totalVolume"`

	// UplinkVolume Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
	UplinkVolume         *VolumeRm              `json:"uplinkVolume"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserIdentifier Original definition in TS29503_Nudm_NIDDAU.yaml#/components/schemas/UserIdentifier
type UserIdentifier struct {
	Gpsi                 Gpsi                   `json:"gpsi,omitempty"`
	Supi                 Supi                   `json:"supi"`
	ValidityTime         *DateTime              `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserLocation defines model for UserLocation.
type UserLocation struct {
	EutraLocation        *EutraLocation         `json:"eutraLocation,omitempty"`
	GeraLocation         *GeraLocation          `json:"geraLocation,omitempty"`
	N3gaLocation         *N3gaLocation          `json:"n3gaLocation,omitempty"`
	NrLocation           *NrLocation            `json:"nrLocation,omitempty"`
	UtraLocation         *UtraLocation          `json:"utraLocation,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserPlaneLocationArea Original definition in TS29122_PfdManagement.yaml#/components/schemas/UserPlaneLocationArea
type UserPlaneLocationArea struct {
	// Dnais Identifies a list of DNAI which the user plane functions support.
	Dnais *[]Dnai `json:"dnais,omitempty"`

	// LocationArea Original definition in TS29122_CommonData.yaml#/components/schemas/LocationArea
	LocationArea *LocationArea `json:"locationArea,omitempty"`

	// LocationArea5G Original definition in TS29122_CommonData.yaml#/components/schemas/LocationArea5G
	LocationArea5G       *LocationArea5G        `json:"locationArea5G,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UtraLocation defines model for UtraLocation.
type UtraLocation struct {
	AgeOfLocationInformation *int                   `json:"ageOfLocationInformation,omitempty"`
	Cgi                      *CellGlobalId          `json:"cgi,omitempty"`
	GeodeticInformation      string                 `json:"geodeticInformation,omitempty"`
	GeographicalInformation  string                 `json:"geographicalInformation,omitempty"`
	Lai                      *LocationAreaId        `json:"lai,omitempty"`
	Rai                      *RoutingAreaId         `json:"rai,omitempty"`
	Sai                      *ServiceAreaId         `json:"sai,omitempty"`
	UeLocationTimestamp      *DateTime              `json:"ueLocationTimestamp,omitempty"`
	AdditionalProperties     map[string]interface{} `json:"-"`
}

// V2xContext Original definition in TS29518_Namf_Communication.yaml#/components/schemas/V2xContext
type V2xContext struct {
	LteUeSidelinkAmbr    BitRate                `json:"lteUeSidelinkAmbr,omitempty"`
	LteV2xServicesAuth   *LteV2xAuth            `json:"lteV2xServicesAuth,omitempty"`
	NrUeSidelinkAmbr     BitRate                `json:"nrUeSidelinkAmbr,omitempty"`
	NrV2xServicesAuth    *NrV2xAuth             `json:"nrV2xServicesAuth,omitempty"`
	Pc5QoSPara           *Pc5QoSPara            `json:"pc5QoSPara,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// V2xInformation Original definition in TS29518_Namf_Communication.yaml#/components/schemas/V2xInformation
type V2xInformation struct {
	// N2Pc5Pol Original definition in TS29518_Namf_Communication.yaml#/components/schemas/N2InfoContent
	N2Pc5Pol             *N2InfoContent         `json:"n2Pc5Pol,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// V2xSubscriptionData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/V2xSubscriptionData
type V2xSubscriptionData struct {
	LtePc5Ambr           BitRate                `json:"ltePc5Ambr,omitempty"`
	LteV2xServicesAuth   *LteV2xAuth            `json:"lteV2xServicesAuth,omitempty"`
	NrUePc5Ambr          BitRate                `json:"nrUePc5Ambr,omitempty"`
	NrV2xServicesAuth    *NrV2xAuth             `json:"nrV2xServicesAuth,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ValidTimePeriod Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/ValidTimePeriod
type ValidTimePeriod struct {
	EndTime              *DateTime              `json:"endTime,omitempty"`
	StartTime            *DateTime              `json:"startTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VarPlmnId Original definition in TS29505_Subscription_Data.yaml#/components/schemas/VarPlmnId
type VarPlmnId = string

// VarSnssai defines model for VarSnssai.
type VarSnssai = Snssai

// VarUeGroupId Original definition in TS29505_Subscription_Data.yaml#/components/schemas/VarUeGroupId
type VarUeGroupId = string

// VarUeId defines model for VarUeId.
type VarUeId = string

// VendorId Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA) (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/VendorId)
type VendorId = string

// VendorSpecificFeature Information about a vendor-specific feature (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/VendorSpecificFeature)
type VendorSpecificFeature struct {
	FeatureName          string                 `json:"featureName"`
	FeatureVersion       string                 `json:"featureVersion"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VgmlcAddress Original definition in TS29503_Nudm_UECM.yaml#/components/schemas/VgmlcAddress
type VgmlcAddress struct {
	VgmlcAddressIpv4 Ipv4Addr  `json:"vgmlcAddressIpv4,omitempty"`
	VgmlcAddressIpv6 *Ipv6Addr `json:"vgmlcAddressIpv6,omitempty"`

	// VgmlcFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	VgmlcFqdn            *Fqdn                  `json:"vgmlcFqdn,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VnGroupData Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/VnGroupData
type VnGroupData struct {
	AppDescriptors []AppDescriptor `json:"appDescriptors,omitempty"`
	Dnn            *Dnn            `json:"dnn,omitempty"`

	// PduSessionTypes Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/PduSessionTypes
	PduSessionTypes      *PduSessionTypes       `json:"pduSessionTypes,omitempty"`
	SingleNssai          *Snssai                `json:"singleNssai,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Volume Unsigned integer identifying a volume in units of bytes. (Original definition in TS29122_CommonData.yaml#/components/schemas/Volume)
type Volume = int64

// VolumeRm Unsigned integer identifying a volume in units of bytes with "nullable=true" property. (Original definition in TS29122_CommonData.yaml#/components/schemas/VolumeRm)
type VolumeRm = int64

// VolumeTimedReport defines model for VolumeTimedReport.
type VolumeTimedReport struct {
	DownlinkVolume       Int64                  `json:"downlinkVolume"`
	EndTimeStamp         DateTime               `json:"endTimeStamp"`
	StartTimeStamp       DateTime               `json:"startTimeStamp"`
	UplinkVolume         Int64                  `json:"uplinkVolume"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VplmnQos Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VplmnQos
type VplmnQos struct {
	N5qi                 *N5Qi                  `json:"5qi,omitempty"`
	Arp                  *Arp                   `json:"arp,omitempty"`
	GuaFbrDl             BitRate                `json:"guaFbrDl,omitempty"`
	GuaFbrUl             BitRate                `json:"guaFbrUl,omitempty"`
	MaxFbrDl             BitRate                `json:"maxFbrDl,omitempty"`
	MaxFbrUl             BitRate                `json:"maxFbrUl,omitempty"`
	SessionAmbr          *Ambr                  `json:"sessionAmbr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VsmfUpdateData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VsmfUpdateData
type VsmfUpdateData struct {
	// AdditionalCnTunnelInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TunnelInfo
	AdditionalCnTunnelInfo *TunnelInfo  `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnGranted        *bool        `json:"alwaysOnGranted,omitempty"`
	AssignEbiList          []Arp        `json:"assignEbiList,omitempty"`
	BackOffTimer           *DurationSec `json:"backOffTimer,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/Cause)
	Cause         *Cause          `json:"cause,omitempty"`
	DnaiList      *[]Dnai         `json:"dnaiList,omitempty"`
	EpsBearerInfo []EpsBearerInfo `json:"epsBearerInfo,omitempty"`

	// EpsPdnCnxInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsPdnCnxInfo
	EpsPdnCnxInfo     *EpsPdnCnxInfo `json:"epsPdnCnxInfo,omitempty"`
	HsmfPduSessionUri *Uri           `json:"hsmfPduSessionUri,omitempty"`
	MaAcceptedInd     *bool          `json:"maAcceptedInd,omitempty"`

	// MaReleaseInd Possible values are
	//   - REL_MAPDU_OVER_3GPP
	//   - REL_MAPDU_OVER_N3GPP
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/MaReleaseIndication)
	MaReleaseInd    *MaReleaseIndication `json:"maReleaseInd,omitempty"`
	ModifiedEbiList []EbiArpMapping      `json:"modifiedEbiList,omitempty"`
	N1SmInfoToUe    *RefToBinaryData     `json:"n1SmInfoToUe,omitempty"`
	N1smCause       *string              `json:"n1smCause,omitempty"`

	// N4Info Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4Info *N4Information `json:"n4Info,omitempty"`

	// N4InfoExt1 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`

	// N4InfoExt2 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt2 *N4Information `json:"n4InfoExt2,omitempty"`

	// Pti Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProcedureTransactionId
	Pti                       *ProcedureTransactionId       `json:"pti,omitempty"`
	QosFlowsAddModRequestList []QosFlowAddModifyRequestItem `json:"qosFlowsAddModRequestList,omitempty"`
	QosFlowsRelRequestList    []QosFlowReleaseRequestItem   `json:"qosFlowsRelRequestList,omitempty"`

	// QosMonitoringInfo Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/QosMonitoringInfo
	QosMonitoringInfo *QosMonitoringInfo `json:"qosMonitoringInfo,omitempty"`

	// RequestIndication Possible values are - UE_REQ_PDU_SES_MOD - UE_REQ_PDU_SES_REL - PDU_SES_MOB - NW_REQ_PDU_SES_AUTH - NW_REQ_PDU_SES_MOD - NW_REQ_PDU_SES_REL - EBI_ASSIGNMENT_REQ - REL_DUE_TO_5G_AN_REQUEST
	//  (Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/RequestIndication)
	RequestIndication           RequestIndication      `json:"requestIndication"`
	RevokeEbiList               []SmfEpsBearerId       `json:"revokeEbiList,omitempty"`
	SessionAmbr                 *Ambr                  `json:"sessionAmbr,omitempty"`
	SmallDataRateControlEnabled *bool                  `json:"smallDataRateControlEnabled,omitempty"`
	SupportedFeatures           *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties        map[string]interface{} `json:"-"`
}

// VsmfUpdateError Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VsmfUpdateError
type VsmfUpdateError struct {
	N5gMmCauseValue       *N5GMmCause      `json:"5gMmCauseValue,omitempty"`
	Error                 ProblemDetails   `json:"error"`
	FailedToAssignEbiList []Arp            `json:"failedToAssignEbiList,omitempty"`
	N1SmInfoFromUe        *RefToBinaryData `json:"n1SmInfoFromUe,omitempty"`
	N1smCause             string           `json:"n1smCause,omitempty"`

	// N4Info Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4Info *N4Information `json:"n4Info,omitempty"`

	// N4InfoExt1 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`

	// N4InfoExt2 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt2 *N4Information `json:"n4InfoExt2,omitempty"`
	NgApCause  *NgApCause     `json:"ngApCause,omitempty"`

	// Pti Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ProcedureTransactionId
	Pti                  *ProcedureTransactionId `json:"pti,omitempty"`
	RecoveryTime         *DateTime               `json:"recoveryTime,omitempty"`
	UnknownN1SmInfo      *RefToBinaryData        `json:"unknownN1SmInfo,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// VsmfUpdatedData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VsmfUpdatedData
type VsmfUpdatedData struct {
	AddUeLocation         *UserLocation    `json:"addUeLocation,omitempty"`
	AssignedEbiList       []EbiArpMapping  `json:"assignedEbiList,omitempty"`
	FailedToAssignEbiList []Arp            `json:"failedToAssignEbiList,omitempty"`
	N1SmInfoFromUe        *RefToBinaryData `json:"n1SmInfoFromUe,omitempty"`

	// N4Info Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4Info *N4Information `json:"n4Info,omitempty"`

	// N4InfoExt1 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt1 *N4Information `json:"n4InfoExt1,omitempty"`

	// N4InfoExt2 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/N4Information
	N4InfoExt2                 *N4Information            `json:"n4InfoExt2,omitempty"`
	QosFlowsAddModList         []QosFlowItem             `json:"qosFlowsAddModList,omitempty"`
	QosFlowsFailedtoAddModList []QosFlowItem             `json:"qosFlowsFailedtoAddModList,omitempty"`
	QosFlowsFailedtoRelList    []QosFlowItem             `json:"qosFlowsFailedtoRelList,omitempty"`
	QosFlowsRelList            []QosFlowItem             `json:"qosFlowsRelList,omitempty"`
	ReleasedEbiList            []SmfEpsBearerId          `json:"releasedEbiList,omitempty"`
	SecondaryRatUsageInfo      []SecondaryRatUsageInfo   `json:"secondaryRatUsageInfo,omitempty"`
	SecondaryRatUsageReport    []SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`
	UeLocation                 *UserLocation             `json:"ueLocation,omitempty"`
	UeTimeZone                 *TimeZone                 `json:"ueTimeZone,omitempty"`
	UnknownN1SmInfo            *RefToBinaryData          `json:"unknownN1SmInfo,omitempty"`
	AdditionalProperties       map[string]interface{}    `json:"-"`
}

// WAgfId defines model for WAgfId.
type WAgfId = string

// WAgfInfo Information of the W-AGF end-points (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/WAgfInfo)
type WAgfInfo struct {
	// EndpointFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	EndpointFqdn          *Fqdn                  `json:"endpointFqdn,omitempty"`
	Ipv4EndpointAddresses []Ipv4Addr             `json:"ipv4EndpointAddresses,omitempty"`
	Ipv6EndpointAddresses []Ipv6Addr             `json:"ipv6EndpointAddresses,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// WebsockNotifConfig Original definition in TS29122_CommonData.yaml#/components/schemas/WebsockNotifConfig
type WebsockNotifConfig struct {
	// RequestWebsocketUri Set by the SCS/AS to indicate that the Websocket delivery is requested.
	RequestWebsocketUri *bool `json:"requestWebsocketUri,omitempty"`

	// WebsocketUri string formatted according to IETF RFC 3986 identifying a referenced resource. (Original definition in TS29122_CommonData.yaml#/components/schemas/Link)
	WebsocketUri         *TS29122Link           `json:"websocketUri,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// WildcardDnn defines model for WildcardDnn.
type WildcardDnn = string

// WirelineArea defines model for WirelineArea.
type WirelineArea struct {
	AreaCodeB            *AreaCode              `json:"areaCodeB,omitempty"`
	AreaCodeC            *AreaCode              `json:"areaCodeC,omitempty"`
	GlobalLineIds        []Gli                  `json:"globalLineIds,omitempty"`
	HfcNIds              []HfcNId               `json:"hfcNIds,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// WirelineServiceAreaRestriction defines model for WirelineServiceAreaRestriction.
type WirelineServiceAreaRestriction struct {
	Areas                *[]WirelineArea        `json:"areas,omitempty"`
	RestrictionType      *RestrictionType       `json:"restrictionType,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Xres Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/Xres
type Xres = string

// XresStar Original definition in TS29503_Nudm_UEAU.yaml#/components/schemas/XresStar
type XresStar = string

// AusfAuthType Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/AuthType
type AusfAuthType string

// AusfRgAuthCtx Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/RgAuthCtx
type AusfRgAuthCtx struct {
	AuthInd *bool `json:"authInd,omitempty"`

	// AuthResult Original definition in TS29509_Nausf_UEAuthentication.yaml#/components/schemas/AuthResult
	AuthResult           AuthResult             `json:"authResult"`
	Supi                 Supi                   `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AusfSecuredPacket Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SecuredPacket
type AusfSecuredPacket = string

// AusfSorInfo Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SorInfo
type AusfSorInfo struct {
	// AckInd Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/AckInd
	AckInd AckInd `json:"ackInd"`

	// SteeringContainer Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SteeringContainer
	SteeringContainer    *AusfSteeringContainer `json:"steeringContainer,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AusfSteeringContainer Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SteeringContainer
type AusfSteeringContainer struct {
	union json.RawMessage
}

// AusfSteeringContainer0 defines model for .
type AusfSteeringContainer0 = []SteeringInfo

// AusfUpuData Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuData
type AusfUpuData struct {
	DefaultConfNssai []Snssai `json:"defaultConfNssai,omitempty"`

	// RoutingId Original reference TS29544_Nspaf_SecuredPacket.yaml#/components/schemas/RoutingId
	RoutingId *string `json:"routingId,omitempty"`

	// SecPacket Original definition in TS29509_Nausf_SoRProtection.yaml#/components/schemas/SecuredPacket
	SecPacket            *AusfSecuredPacket     `json:"secPacket,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AusfUpuInfo Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuInfo
type AusfUpuInfo struct {
	SupportedFeatures *SupportedFeatures `json:"supportedFeatures,omitempty"`

	// UpuAckInd Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuAckInd
	UpuAckInd   UpuAckInd     `json:"upuAckInd"`
	UpuDataList []AusfUpuData `json:"upuDataList"`

	// UpuHeader Original definition in TS29509_Nausf_UPUProtection.yaml#/components/schemas/UpuHeader
	UpuHeader            UpuHeader              `json:"upuHeader,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BsfExtProblemDetails defines model for bsf-ExtProblemDetails.
type BsfExtProblemDetails struct {
	// AccessTokenError Error returned in the access token response message (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError *AccessTokenErr `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original definition in TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest *AccessTokenReq `json:"accessTokenRequest,omitempty"`
	Cause              *string         `json:"cause,omitempty"`
	Detail             *string         `json:"detail,omitempty"`
	Instance           *Uri            `json:"instance,omitempty"`
	InvalidParams      []InvalidParam  `json:"invalidParams,omitempty"`
	NrfId              *string         `json:"nrfId,omitempty"`

	// PcfSmFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	PcfSmFqdn *Fqdn `json:"pcfSmFqdn,omitempty"`

	// PcfSmIpEndPoints IP end points of the PCF hosting the Npcf_SMPolicyControl service.
	PcfSmIpEndPoints     []IpEndPoint           `json:"pcfSmIpEndPoints,omitempty"`
	Status               int                    `json:"status,omitempty"`
	SupportedFeatures    *SupportedFeatures     `json:"supportedFeatures,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *Uri                   `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NrfNFService Information of a given NF Service Instance; it is part of the NFProfile of an NF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFService)
type NrfNFService struct {
	AllowedNfDomains                 []string                          `json:"allowedNfDomains,omitempty"`
	AllowedNfTypes                   []NFType                          `json:"allowedNfTypes,omitempty"`
	AllowedNssais                    []ExtSnssai                       `json:"allowedNssais,omitempty"`
	AllowedOperationsPerNfInstance   *map[string][]string              `json:"allowedOperationsPerNfInstance,omitempty"`
	AllowedOperationsPerNfType       *map[string][]string              `json:"allowedOperationsPerNfType,omitempty"`
	AllowedPlmns                     []PlmnId                          `json:"allowedPlmns,omitempty"`
	AllowedSnpns                     []PlmnIdNid                       `json:"allowedSnpns,omitempty"`
	ApiPrefix                        *string                           `json:"apiPrefix,omitempty"`
	Capacity                         *int                              `json:"capacity,omitempty"`
	DefaultNotificationSubscriptions []DefaultNotificationSubscription `json:"defaultNotificationSubscriptions,omitempty"`

	// Fqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	Fqdn *Fqdn `json:"fqdn,omitempty"`

	// InterPlmnFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	InterPlmnFqdn      *Fqdn            `json:"interPlmnFqdn,omitempty"`
	IpEndPoints        []IpEndPoint     `json:"ipEndPoints,omitempty"`
	Load               *int             `json:"load,omitempty"`
	LoadTimeStamp      *DateTime        `json:"loadTimeStamp,omitempty"`
	NfServiceSetIdList []NfServiceSetId `json:"nfServiceSetIdList,omitempty"`

	// NfServiceStatus Status of a given NF Service Instance of an NF Instance stored in NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFServiceStatus)
	NfServiceStatus   NFServiceStatus `json:"nfServiceStatus"`
	Oauth2Required    *bool           `json:"oauth2Required,omitempty"`
	PerPlmnSnssaiList []PlmnSnssai    `json:"perPlmnSnssaiList,omitempty"`
	Priority          *int            `json:"priority,omitempty"`
	RecoveryTime      *DateTime       `json:"recoveryTime,omitempty"`
	SNssais           []ExtSnssai     `json:"sNssais,omitempty"`
	Scheme            UriScheme       `json:"scheme"`
	ServiceInstanceId string          `json:"serviceInstanceId"`

	// ServiceName Service names known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/ServiceName)
	ServiceName                     ServiceName                         `json:"serviceName"`
	SupportedFeatures               *SupportedFeatures                  `json:"supportedFeatures,omitempty"`
	SupportedVendorSpecificFeatures *map[string][]VendorSpecificFeature `json:"supportedVendorSpecificFeatures,omitempty"`

	// VendorId Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA) (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/VendorId)
	VendorId             VendorId               `json:"vendorId,omitempty"`
	Versions             []NFServiceVersion     `json:"versions"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NrfPfdData List of Application IDs and/or AF IDs managed by a given NEF Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/PfdData)
type NrfPfdData struct {
	AfIds                []string               `json:"afIds,omitempty"`
	AppIds               []string               `json:"appIds,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NrfSubscriptionData Information of a subscription to notifications to NRF events, included in subscription requests and responses (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/SubscriptionData)
type NrfSubscriptionData struct {
	NfStatusNotificationUri string `json:"nfStatusNotificationUri"`
	Nid                     Nid    `json:"nid,omitempty"`

	// NotifCondition Condition (list of attributes in the NF Profile) to determine whether a notification must be sent by NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NotifCondition)
	NotifCondition       *NotifCondition    `json:"notifCondition,omitempty"`
	NrfSupportedFeatures *SupportedFeatures `json:"nrfSupportedFeatures,omitempty"`
	PlmnId               *PlmnId            `json:"plmnId,omitempty"`

	// ReqNfFqdn Fully Qualified Domain Name (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/Fqdn)
	ReqNfFqdn       *Fqdn         `json:"reqNfFqdn,omitempty"`
	ReqNfInstanceId *NfInstanceId `json:"reqNfInstanceId,omitempty"`

	// ReqNfType NF types known to NRF (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/NFType)
	ReqNfType            *NFType                         `json:"reqNfType,omitempty"`
	ReqNotifEvents       []NotificationEventType         `json:"reqNotifEvents,omitempty"`
	ReqPerPlmnSnssais    []PlmnSnssai                    `json:"reqPerPlmnSnssais,omitempty"`
	ReqPlmnList          []PlmnId                        `json:"reqPlmnList,omitempty"`
	ReqSnpnList          []PlmnIdNid                     `json:"reqSnpnList,omitempty"`
	ReqSnssais           []Snssai                        `json:"reqSnssais,omitempty"`
	RequesterFeatures    *SupportedFeatures              `json:"requesterFeatures,omitempty"`
	ServingScope         []string                        `json:"servingScope,omitempty"`
	SubscrCond           *NrfSubscriptionData_SubscrCond `json:"subscrCond,omitempty"`
	SubscriptionId       string                          `json:"subscriptionId,omitempty"`
	ValidityTime         *DateTime                       `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// NrfSubscriptionData_SubscrCond defines model for NrfSubscriptionData.SubscrCond.
type NrfSubscriptionData_SubscrCond struct {
	union json.RawMessage
}

// NrfTransportProtocol Types of transport protocol used in a given IP endpoint of an NF Service Instance (Original definition in TS29510_Nnrf_NFManagement.yaml#/components/schemas/TransportProtocol)
type NrfTransportProtocol string

// PcfAtsssCapability Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AtsssCapability
type PcfAtsssCapability string

// PcfBdtPolicyData Describes the authorization data of an Individual BDT policy resource. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtPolicyData)
type PcfBdtPolicyData struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154. (Original definition in TS29122_CommonData.yaml#/components/schemas/BdtReferenceId)
	BdtRefId BdtReferenceId `json:"bdtRefId"`

	// SelTransPolicyId Contains an identity of the selected transfer policy.
	SelTransPolicyId *int               `json:"selTransPolicyId,omitempty"`
	SuppFeat         *SupportedFeatures `json:"suppFeat,omitempty"`

	// TransfPolicies Contains transfer policies.
	TransfPolicies       []TransferPolicy       `json:"transfPolicies"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcfBdtPolicyDataPatch A JSON Merge Patch body schema containing modification instruction to be performed on the bdtPolData attribute of the BdtPolicy data structure to select a transfer policy. Adds selTransPolicyId to BdtPolicyData data structure. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/BdtPolicyDataPatch)
type PcfBdtPolicyDataPatch struct {
	// SelTransPolicyId Contains an identity (i.e. transPolicyId value) of the selected transfer policy. If the BdtNotification_5G feature is supported value 0 indicates that no transfer policy is selected.
	SelTransPolicyId     int                    `json:"selTransPolicyId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcfFailureCode Possible values are
//   - UNK_RULE_ID: Indicates that the pre-provisioned PCC rule could not be successfully activated because the PCC rule identifier is unknown to the SMF.
//   - RA_GR_ERR: Indicate that the PCC rule could not be successfully installed or enforced because the Rating Group specified within the Charging Data policy decision which the PCC rule refers to is unknown or, invalid.
//   - SER_ID_ERR: Indicate that the PCC rule could not be successfully installed or enforced because the Service Identifier specified within the Charging Data policy decision which the PCC rule refers to is invalid, unknown, or not applicable to the service being charged.
//   - NF_MAL: Indicate that the PCC rule could not be successfully installed (for those provisioned from the PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to SMF/UPF malfunction.
//   - RES_LIM: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to a limitation of resources at the SMF/UPF.
//   - MAX_NR_QoS_FLOW: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to the fact that the maximum number of QoS flows has been reached for the PDU session.
//   - MISS_FLOW_INFO: Indicate that the PCC rule could not be successfully installed or enforced because neither the "flowInfos" attribute nor the "appId" attribute is specified within the PccRule data structure by the PCF during the first install request of the PCC rule.
//   - RES_ALLO_FAIL: Indicate that the PCC rule could not be successfully installed or maintained since the QoS flow establishment/modification failed, or the QoS flow was released.
//   - UNSUCC_QOS_VAL: indicate that the QoS validation has failed or when Guaranteed Bandwidth > Max-Requested-Bandwidth.
//   - INCOR_FLOW_INFO: Indicate that the PCC rule could not be successfully installed or modified at the SMF because the provided flow information is not supported by the network (e.g. the provided IP address(es) or Ipv6 prefix(es) do not correspond to an IP version applicable for the PDU session).
//   - PS_TO_CS_HAN: Indicate that the PCC rule could not be maintained because of PS to CS handover.
//   - APP_ID_ERR: Indicate that the rule could not be successfully installed or enforced because the Application Identifier is invalid, unknown, or not applicable to the application required for detection.
//   - NO_QOS_FLOW_BOUND: Indicate that there is no QoS flow which the SMF can bind the PCC rule(s) to.
//   - FILTER_RES: Indicate that the Flow Information within the "flowInfos" attribute cannot be handled by the SMF because any of the restrictions defined in subclause 5.4.2 of 3GPP TS 29.212 was not met.
//   - MISS_REDI_SER_ADDR: Indicate that the PCC rule could not be successfully installed or enforced at the SMF because there is no valid Redirect Server Address within the Traffic Control Data policy decision which the PCC rule refers to provided by the PCF and no preconfigured redirection address for this PCC rule at the SMF.
//   - CM_END_USER_SER_DENIED: Indicate that the charging system denied the service request due to service restrictions (e.g. terminate rating group) or limitations related to the end-user, for example the end-user's account could not cover the requested service.
//   - CM_CREDIT_CON_NOT_APP: Indicate that the charging system determined that the service can be granted to the end user but no further credit control is needed for the service (e.g. service is free of charge or is treated for offline charging).
//   - CM_AUTH_REJ: Indicate that the charging system denied the service request in order to terminate the service for which credit is requested.
//   - CM_USER_UNK: Indicate that the specified end user could not be found in the charging system.
//   - CM_RAT_FAILED: Indicate that the charging system cannot rate the service request due to insufficient rating input, incorrect AVP combination or due to an attribute or an attribute value that is not recognized or supported in the rating.
//   - UE_STA_SUSP: Indicates that the UE is in suspend state.
//     (Original definition in TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FailureCode)
type PcfFailureCode string

// PcfNetworkAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29554_Npcf_BDTPolicyControl.yaml#/components/schemas/NetworkAreaInfo)
type PcfNetworkAreaInfo struct {
	// Ecgis Contains a list of E-UTRA cell identities.
	Ecgis []Ecgi `json:"ecgis,omitempty"`

	// GRanNodeIds Contains a list of NG RAN nodes.
	GRanNodeIds []GlobalRanNodeId `json:"gRanNodeIds,omitempty"`

	// Ncgis Contains a list of NR cell identities.
	Ncgis []Ncgi `json:"ncgis,omitempty"`

	// Tais Contains a list of tracking area identities.
	Tais                 []Tai                  `json:"tais,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmfEpsBearerId Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/EpsBearerId
type SmfEpsBearerId = int

// SmfIpAddress Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/IpAddress
type SmfIpAddress struct {
	Ipv4Addr             Ipv4Addr               `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *Ipv6Addr              `json:"ipv6Addr,omitempty"`
	Ipv6Prefix           *Ipv6Prefix            `json:"ipv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UdmDataSetName Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DataSetName
type UdmDataSetName string

// UdmDatasetNames Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/DatasetNames
type UdmDatasetNames = []UdmDataSetName

// UdmEEReferenceId Original definition in TS29503_Nudm_EE.yaml#/components/schemas/ReferenceId
type UdmEEReferenceId = int

// UdmEcRestrictionDataWb Original definition in TS29503_Nudm_SDM.yaml#/components/schemas/EcRestrictionDataWb
type UdmEcRestrictionDataWb struct {
	EcModeARestricted    *bool                  `json:"ecModeARestricted,omitempty"`
	EcModeBRestricted    *bool                  `json:"ecModeBRestricted,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UdmLocationArea Original definition in TS29503_Nudm_PP.yaml#/components/schemas/LocationArea
type UdmLocationArea struct {
	// CivicAddresses Identifies a list of civic addresses of the user where the UE is located.
	CivicAddresses *[]interface{} `json:"civicAddresses,omitempty"`

	// GeographicAreas Identifies a list of geographic area of the user where the UE is located.
	GeographicAreas *[]interface{} `json:"geographicAreas,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs. (Original definition in TS29503_Nudm_PP.yaml#/components/schemas/NetworkAreaInfo)
	NwAreaInfo           *NetworkAreaInfo       `json:"nwAreaInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UdmPPReferenceId Original definition in TS29503_Nudm_PP.yaml#/components/schemas/ReferenceId
type UdmPPReferenceId = int

// N307 defines model for 307.
type N307 = RedirectResponse

// N308 defines model for 308.
type N308 = RedirectResponse

// N400 defines model for 400.
type N400 = ProblemDetails

// N401 defines model for 401.
type N401 = ProblemDetails

// N403 defines model for 403.
type N403 = ProblemDetails

// N404 defines model for 404.
type N404 = ProblemDetails

// N408 defines model for 408.
type N408 = ProblemDetails

// N409 defines model for 409.
type N409 = ProblemDetails

// N410 defines model for 410.
type N410 = ProblemDetails

// N411 defines model for 411.
type N411 = ProblemDetails

// N412 defines model for 412.
type N412 = ProblemDetails

// N413 defines model for 413.
type N413 = ProblemDetails

// N414 defines model for 414.
type N414 = ProblemDetails

// N415 defines model for 415.
type N415 = ProblemDetails

// N429 defines model for 429.
type N429 = ProblemDetails

// N500 defines model for 500.
type N500 = ProblemDetails

// N501 defines model for 501.
type N501 = ProblemDetails

// N503 defines model for 503.
type N503 = ProblemDetails

// N504 defines model for 504.
type N504 = ProblemDetails

// Default defines model for default.
type Default = ProblemDetails

// Getter for additional properties for N5GSrvccInfo. Returns the specified
// element and whether it was found
func (a N5GSrvccInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N5GSrvccInfo
func (a *N5GSrvccInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N5GSrvccInfo to handle AdditionalProperties
func (a *N5GSrvccInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cMsisdn"]; found {
		err = json.Unmarshal(raw, &a.CMsisdn)
		if err != nil {
			return fmt.Errorf("error reading 'cMsisdn': %w", err)
		}
		delete(object, "cMsisdn")
	}

	if raw, found := object["stnSr"]; found {
		err = json.Unmarshal(raw, &a.StnSr)
		if err != nil {
			return fmt.Errorf("error reading 'stnSr': %w", err)
		}
		delete(object, "stnSr")
	}

	if raw, found := object["ue5GSrvccCapability"]; found {
		err = json.Unmarshal(raw, &a.Ue5GSrvccCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ue5GSrvccCapability': %w", err)
		}
		delete(object, "ue5GSrvccCapability")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N5GSrvccInfo to handle AdditionalProperties
func (a N5GSrvccInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CMsisdn) != 0 {
		object["cMsisdn"], err = json.Marshal(a.CMsisdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cMsisdn': %w", err)
		}
	}

	if a.StnSr != nil {
		object["stnSr"], err = json.Marshal(a.StnSr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stnSr': %w", err)
		}
	}

	object["ue5GSrvccCapability"], err = json.Marshal(a.Ue5GSrvccCapability)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ue5GSrvccCapability': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N5GVnGroupConfiguration. Returns the specified
// element and whether it was found
func (a N5GVnGroupConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N5GVnGroupConfiguration
func (a *N5GVnGroupConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N5GVnGroupConfiguration to handle AdditionalProperties
func (a *N5GVnGroupConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gVnGroupData"]; found {
		err = json.Unmarshal(raw, &a.N5gVnGroupData)
		if err != nil {
			return fmt.Errorf("error reading '5gVnGroupData': %w", err)
		}
		delete(object, "5gVnGroupData")
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["internalGroupIdentifier"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIdentifier)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIdentifier': %w", err)
		}
		delete(object, "internalGroupIdentifier")
	}

	if raw, found := object["members"]; found {
		err = json.Unmarshal(raw, &a.Members)
		if err != nil {
			return fmt.Errorf("error reading 'members': %w", err)
		}
		delete(object, "members")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N5GVnGroupConfiguration to handle AdditionalProperties
func (a N5GVnGroupConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gVnGroupData != nil {
		object["5gVnGroupData"], err = json.Marshal(a.N5gVnGroupData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gVnGroupData': %w", err)
		}
	}

	if a.AfInstanceId != nil {
		object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
		}
	}

	if len(a.InternalGroupIdentifier) != 0 {
		object["internalGroupIdentifier"], err = json.Marshal(a.InternalGroupIdentifier)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIdentifier': %w", err)
		}
	}

	if len(a.Members) != 0 {
		object["members"], err = json.Marshal(a.Members)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'members': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	if a.ReferenceId != nil {
		object["referenceId"], err = json.Marshal(a.ReferenceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N5GVnGroupData. Returns the specified
// element and whether it was found
func (a N5GVnGroupData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N5GVnGroupData
func (a *N5GVnGroupData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N5GVnGroupData to handle AdditionalProperties
func (a *N5GVnGroupData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appDescriptors"]; found {
		err = json.Unmarshal(raw, &a.AppDescriptors)
		if err != nil {
			return fmt.Errorf("error reading 'appDescriptors': %w", err)
		}
		delete(object, "appDescriptors")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["secondaryAuth"]; found {
		err = json.Unmarshal(raw, &a.SecondaryAuth)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryAuth': %w", err)
		}
		delete(object, "secondaryAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N5GVnGroupData to handle AdditionalProperties
func (a N5GVnGroupData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AppDescriptors) != 0 {
		object["appDescriptors"], err = json.Marshal(a.AppDescriptors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appDescriptors': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.PduSessionTypes) != 0 {
		object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
		}
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	if a.SecondaryAuth != nil {
		object["secondaryAuth"], err = json.Marshal(a.SecondaryAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N5GsUserStateInfo. Returns the specified
// element and whether it was found
func (a N5GsUserStateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N5GsUserStateInfo
func (a *N5GsUserStateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N5GsUserStateInfo to handle AdditionalProperties
func (a *N5GsUserStateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gsUserState"]; found {
		err = json.Unmarshal(raw, &a.N5gsUserState)
		if err != nil {
			return fmt.Errorf("error reading '5gsUserState': %w", err)
		}
		delete(object, "5gsUserState")
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N5GsUserStateInfo to handle AdditionalProperties
func (a N5GsUserStateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5gsUserState"], err = json.Marshal(a.N5gsUserState)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5gsUserState': %w", err)
	}

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AMPolicyPolicyAssociation. Returns the specified
// element and whether it was found
func (a AMPolicyPolicyAssociation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AMPolicyPolicyAssociation
func (a *AMPolicyPolicyAssociation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AMPolicyPolicyAssociation to handle AdditionalProperties
func (a *AMPolicyPolicyAssociation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pras"]; found {
		err = json.Unmarshal(raw, &a.Pras)
		if err != nil {
			return fmt.Errorf("error reading 'pras': %w", err)
		}
		delete(object, "pras")
	}

	if raw, found := object["request"]; found {
		err = json.Unmarshal(raw, &a.Request)
		if err != nil {
			return fmt.Errorf("error reading 'request': %w", err)
		}
		delete(object, "request")
	}

	if raw, found := object["rfsp"]; found {
		err = json.Unmarshal(raw, &a.Rfsp)
		if err != nil {
			return fmt.Errorf("error reading 'rfsp': %w", err)
		}
		delete(object, "rfsp")
	}

	if raw, found := object["servAreaRes"]; found {
		err = json.Unmarshal(raw, &a.ServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'servAreaRes': %w", err)
		}
		delete(object, "servAreaRes")
	}

	if raw, found := object["smfSelInfo"]; found {
		err = json.Unmarshal(raw, &a.SmfSelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelInfo': %w", err)
		}
		delete(object, "smfSelInfo")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["triggers"]; found {
		err = json.Unmarshal(raw, &a.Triggers)
		if err != nil {
			return fmt.Errorf("error reading 'triggers': %w", err)
		}
		delete(object, "triggers")
	}

	if raw, found := object["ueAmbr"]; found {
		err = json.Unmarshal(raw, &a.UeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'ueAmbr': %w", err)
		}
		delete(object, "ueAmbr")
	}

	if raw, found := object["wlServAreaRes"]; found {
		err = json.Unmarshal(raw, &a.WlServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'wlServAreaRes': %w", err)
		}
		delete(object, "wlServAreaRes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AMPolicyPolicyAssociation to handle AdditionalProperties
func (a AMPolicyPolicyAssociation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Pras != nil {
		object["pras"], err = json.Marshal(a.Pras)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pras': %w", err)
		}
	}

	if a.Request != nil {
		object["request"], err = json.Marshal(a.Request)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'request': %w", err)
		}
	}

	if a.Rfsp != 0 {
		object["rfsp"], err = json.Marshal(a.Rfsp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rfsp': %w", err)
		}
	}

	if a.ServAreaRes != nil {
		object["servAreaRes"], err = json.Marshal(a.ServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servAreaRes': %w", err)
		}
	}

	object["smfSelInfo"], err = json.Marshal(a.SmfSelInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfSelInfo': %w", err)
	}

	object["suppFeat"], err = json.Marshal(a.SuppFeat)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
	}

	if len(a.Triggers) != 0 {
		object["triggers"], err = json.Marshal(a.Triggers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'triggers': %w", err)
		}
	}

	if a.UeAmbr != nil {
		object["ueAmbr"], err = json.Marshal(a.UeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueAmbr': %w", err)
		}
	}

	if a.WlServAreaRes != nil {
		object["wlServAreaRes"], err = json.Marshal(a.WlServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wlServAreaRes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AMPolicyPolicyAssociationRequest. Returns the specified
// element and whether it was found
func (a AMPolicyPolicyAssociationRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AMPolicyPolicyAssociationRequest
func (a *AMPolicyPolicyAssociationRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AMPolicyPolicyAssociationRequest to handle AdditionalProperties
func (a *AMPolicyPolicyAssociationRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["accessTypes"]; found {
		err = json.Unmarshal(raw, &a.AccessTypes)
		if err != nil {
			return fmt.Errorf("error reading 'accessTypes': %w", err)
		}
		delete(object, "accessTypes")
	}

	if raw, found := object["allowedSnssais"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnssais': %w", err)
		}
		delete(object, "allowedSnssais")
	}

	if raw, found := object["altNotifFqdns"]; found {
		err = json.Unmarshal(raw, &a.AltNotifFqdns)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifFqdns': %w", err)
		}
		delete(object, "altNotifFqdns")
	}

	if raw, found := object["altNotifIpv4Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv4Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv4Addrs': %w", err)
		}
		delete(object, "altNotifIpv4Addrs")
	}

	if raw, found := object["altNotifIpv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv6Addrs': %w", err)
		}
		delete(object, "altNotifIpv6Addrs")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["groupIds"]; found {
		err = json.Unmarshal(raw, &a.GroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'groupIds': %w", err)
		}
		delete(object, "groupIds")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["mappingSnssais"]; found {
		err = json.Unmarshal(raw, &a.MappingSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'mappingSnssais': %w", err)
		}
		delete(object, "mappingSnssais")
	}

	if raw, found := object["n3gAllowedSnssais"]; found {
		err = json.Unmarshal(raw, &a.N3gAllowedSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'n3gAllowedSnssais': %w", err)
		}
		delete(object, "n3gAllowedSnssais")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["ratTypes"]; found {
		err = json.Unmarshal(raw, &a.RatTypes)
		if err != nil {
			return fmt.Errorf("error reading 'ratTypes': %w", err)
		}
		delete(object, "ratTypes")
	}

	if raw, found := object["rfsp"]; found {
		err = json.Unmarshal(raw, &a.Rfsp)
		if err != nil {
			return fmt.Errorf("error reading 'rfsp': %w", err)
		}
		delete(object, "rfsp")
	}

	if raw, found := object["servAreaRes"]; found {
		err = json.Unmarshal(raw, &a.ServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'servAreaRes': %w", err)
		}
		delete(object, "servAreaRes")
	}

	if raw, found := object["servingPlmn"]; found {
		err = json.Unmarshal(raw, &a.ServingPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'servingPlmn': %w", err)
		}
		delete(object, "servingPlmn")
	}

	if raw, found := object["serviveName"]; found {
		err = json.Unmarshal(raw, &a.ServiveName)
		if err != nil {
			return fmt.Errorf("error reading 'serviveName': %w", err)
		}
		delete(object, "serviveName")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["timeZone"]; found {
		err = json.Unmarshal(raw, &a.TimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'timeZone': %w", err)
		}
		delete(object, "timeZone")
	}

	if raw, found := object["traceReq"]; found {
		err = json.Unmarshal(raw, &a.TraceReq)
		if err != nil {
			return fmt.Errorf("error reading 'traceReq': %w", err)
		}
		delete(object, "traceReq")
	}

	if raw, found := object["ueAmbr"]; found {
		err = json.Unmarshal(raw, &a.UeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'ueAmbr': %w", err)
		}
		delete(object, "ueAmbr")
	}

	if raw, found := object["userLoc"]; found {
		err = json.Unmarshal(raw, &a.UserLoc)
		if err != nil {
			return fmt.Errorf("error reading 'userLoc': %w", err)
		}
		delete(object, "userLoc")
	}

	if raw, found := object["wlServAreaRes"]; found {
		err = json.Unmarshal(raw, &a.WlServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'wlServAreaRes': %w", err)
		}
		delete(object, "wlServAreaRes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AMPolicyPolicyAssociationRequest to handle AdditionalProperties
func (a AMPolicyPolicyAssociationRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if len(a.AccessTypes) != 0 {
		object["accessTypes"], err = json.Marshal(a.AccessTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTypes': %w", err)
		}
	}

	if len(a.AllowedSnssais) != 0 {
		object["allowedSnssais"], err = json.Marshal(a.AllowedSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSnssais': %w", err)
		}
	}

	if len(a.AltNotifFqdns) != 0 {
		object["altNotifFqdns"], err = json.Marshal(a.AltNotifFqdns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifFqdns': %w", err)
		}
	}

	if len(a.AltNotifIpv4Addrs) != 0 {
		object["altNotifIpv4Addrs"], err = json.Marshal(a.AltNotifIpv4Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv4Addrs': %w", err)
		}
	}

	if len(a.AltNotifIpv6Addrs) != 0 {
		object["altNotifIpv6Addrs"], err = json.Marshal(a.AltNotifIpv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv6Addrs': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.GroupIds) != 0 {
		object["groupIds"], err = json.Marshal(a.GroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupIds': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if len(a.MappingSnssais) != 0 {
		object["mappingSnssais"], err = json.Marshal(a.MappingSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingSnssais': %w", err)
		}
	}

	if len(a.N3gAllowedSnssais) != 0 {
		object["n3gAllowedSnssais"], err = json.Marshal(a.N3gAllowedSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3gAllowedSnssais': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if len(a.RatTypes) != 0 {
		object["ratTypes"], err = json.Marshal(a.RatTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratTypes': %w", err)
		}
	}

	if a.Rfsp != 0 {
		object["rfsp"], err = json.Marshal(a.Rfsp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rfsp': %w", err)
		}
	}

	if a.ServAreaRes != nil {
		object["servAreaRes"], err = json.Marshal(a.ServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servAreaRes': %w", err)
		}
	}

	if a.ServingPlmn != nil {
		object["servingPlmn"], err = json.Marshal(a.ServingPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingPlmn': %w", err)
		}
	}

	if a.ServiveName != nil {
		object["serviveName"], err = json.Marshal(a.ServiveName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviveName': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	object["suppFeat"], err = json.Marshal(a.SuppFeat)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
	}

	if a.TimeZone != nil {
		object["timeZone"], err = json.Marshal(a.TimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeZone': %w", err)
		}
	}

	object["traceReq"], err = json.Marshal(a.TraceReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceReq': %w", err)
	}

	if a.UeAmbr != nil {
		object["ueAmbr"], err = json.Marshal(a.UeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueAmbr': %w", err)
		}
	}

	if a.UserLoc != nil {
		object["userLoc"], err = json.Marshal(a.UserLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLoc': %w", err)
		}
	}

	if a.WlServAreaRes != nil {
		object["wlServAreaRes"], err = json.Marshal(a.WlServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wlServAreaRes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AMPolicyPolicyAssociationUpdateRequest. Returns the specified
// element and whether it was found
func (a AMPolicyPolicyAssociationUpdateRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AMPolicyPolicyAssociationUpdateRequest
func (a *AMPolicyPolicyAssociationUpdateRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AMPolicyPolicyAssociationUpdateRequest to handle AdditionalProperties
func (a *AMPolicyPolicyAssociationUpdateRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTypes"]; found {
		err = json.Unmarshal(raw, &a.AccessTypes)
		if err != nil {
			return fmt.Errorf("error reading 'accessTypes': %w", err)
		}
		delete(object, "accessTypes")
	}

	if raw, found := object["allowedSnssais"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnssais': %w", err)
		}
		delete(object, "allowedSnssais")
	}

	if raw, found := object["altNotifFqdns"]; found {
		err = json.Unmarshal(raw, &a.AltNotifFqdns)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifFqdns': %w", err)
		}
		delete(object, "altNotifFqdns")
	}

	if raw, found := object["altNotifIpv4Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv4Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv4Addrs': %w", err)
		}
		delete(object, "altNotifIpv4Addrs")
	}

	if raw, found := object["altNotifIpv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv6Addrs': %w", err)
		}
		delete(object, "altNotifIpv6Addrs")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["mappingSnssais"]; found {
		err = json.Unmarshal(raw, &a.MappingSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'mappingSnssais': %w", err)
		}
		delete(object, "mappingSnssais")
	}

	if raw, found := object["n3gAllowedSnssais"]; found {
		err = json.Unmarshal(raw, &a.N3gAllowedSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'n3gAllowedSnssais': %w", err)
		}
		delete(object, "n3gAllowedSnssais")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["praStatuses"]; found {
		err = json.Unmarshal(raw, &a.PraStatuses)
		if err != nil {
			return fmt.Errorf("error reading 'praStatuses': %w", err)
		}
		delete(object, "praStatuses")
	}

	if raw, found := object["ratTypes"]; found {
		err = json.Unmarshal(raw, &a.RatTypes)
		if err != nil {
			return fmt.Errorf("error reading 'ratTypes': %w", err)
		}
		delete(object, "ratTypes")
	}

	if raw, found := object["rfsp"]; found {
		err = json.Unmarshal(raw, &a.Rfsp)
		if err != nil {
			return fmt.Errorf("error reading 'rfsp': %w", err)
		}
		delete(object, "rfsp")
	}

	if raw, found := object["servAreaRes"]; found {
		err = json.Unmarshal(raw, &a.ServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'servAreaRes': %w", err)
		}
		delete(object, "servAreaRes")
	}

	if raw, found := object["smfSelInfo"]; found {
		err = json.Unmarshal(raw, &a.SmfSelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelInfo': %w", err)
		}
		delete(object, "smfSelInfo")
	}

	if raw, found := object["traceReq"]; found {
		err = json.Unmarshal(raw, &a.TraceReq)
		if err != nil {
			return fmt.Errorf("error reading 'traceReq': %w", err)
		}
		delete(object, "traceReq")
	}

	if raw, found := object["triggers"]; found {
		err = json.Unmarshal(raw, &a.Triggers)
		if err != nil {
			return fmt.Errorf("error reading 'triggers': %w", err)
		}
		delete(object, "triggers")
	}

	if raw, found := object["ueAmbr"]; found {
		err = json.Unmarshal(raw, &a.UeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'ueAmbr': %w", err)
		}
		delete(object, "ueAmbr")
	}

	if raw, found := object["userLoc"]; found {
		err = json.Unmarshal(raw, &a.UserLoc)
		if err != nil {
			return fmt.Errorf("error reading 'userLoc': %w", err)
		}
		delete(object, "userLoc")
	}

	if raw, found := object["wlServAreaRes"]; found {
		err = json.Unmarshal(raw, &a.WlServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'wlServAreaRes': %w", err)
		}
		delete(object, "wlServAreaRes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AMPolicyPolicyAssociationUpdateRequest to handle AdditionalProperties
func (a AMPolicyPolicyAssociationUpdateRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessTypes) != 0 {
		object["accessTypes"], err = json.Marshal(a.AccessTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTypes': %w", err)
		}
	}

	if len(a.AllowedSnssais) != 0 {
		object["allowedSnssais"], err = json.Marshal(a.AllowedSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSnssais': %w", err)
		}
	}

	if len(a.AltNotifFqdns) != 0 {
		object["altNotifFqdns"], err = json.Marshal(a.AltNotifFqdns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifFqdns': %w", err)
		}
	}

	if len(a.AltNotifIpv4Addrs) != 0 {
		object["altNotifIpv4Addrs"], err = json.Marshal(a.AltNotifIpv4Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv4Addrs': %w", err)
		}
	}

	if len(a.AltNotifIpv6Addrs) != 0 {
		object["altNotifIpv6Addrs"], err = json.Marshal(a.AltNotifIpv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv6Addrs': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if len(a.MappingSnssais) != 0 {
		object["mappingSnssais"], err = json.Marshal(a.MappingSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingSnssais': %w", err)
		}
	}

	if len(a.N3gAllowedSnssais) != 0 {
		object["n3gAllowedSnssais"], err = json.Marshal(a.N3gAllowedSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3gAllowedSnssais': %w", err)
		}
	}

	if a.NotificationUri != nil {
		object["notificationUri"], err = json.Marshal(a.NotificationUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
		}
	}

	if a.PraStatuses != nil {
		object["praStatuses"], err = json.Marshal(a.PraStatuses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praStatuses': %w", err)
		}
	}

	if len(a.RatTypes) != 0 {
		object["ratTypes"], err = json.Marshal(a.RatTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratTypes': %w", err)
		}
	}

	if a.Rfsp != 0 {
		object["rfsp"], err = json.Marshal(a.Rfsp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rfsp': %w", err)
		}
	}

	if a.ServAreaRes != nil {
		object["servAreaRes"], err = json.Marshal(a.ServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servAreaRes': %w", err)
		}
	}

	object["smfSelInfo"], err = json.Marshal(a.SmfSelInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfSelInfo': %w", err)
	}

	object["traceReq"], err = json.Marshal(a.TraceReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceReq': %w", err)
	}

	if len(a.Triggers) != 0 {
		object["triggers"], err = json.Marshal(a.Triggers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'triggers': %w", err)
		}
	}

	if a.UeAmbr != nil {
		object["ueAmbr"], err = json.Marshal(a.UeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueAmbr': %w", err)
		}
	}

	if a.UserLoc != nil {
		object["userLoc"], err = json.Marshal(a.UserLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLoc': %w", err)
		}
	}

	if a.WlServAreaRes != nil {
		object["wlServAreaRes"], err = json.Marshal(a.WlServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wlServAreaRes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AMPolicyPolicyUpdate. Returns the specified
// element and whether it was found
func (a AMPolicyPolicyUpdate) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AMPolicyPolicyUpdate
func (a *AMPolicyPolicyUpdate) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AMPolicyPolicyUpdate to handle AdditionalProperties
func (a *AMPolicyPolicyUpdate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pras"]; found {
		err = json.Unmarshal(raw, &a.Pras)
		if err != nil {
			return fmt.Errorf("error reading 'pras': %w", err)
		}
		delete(object, "pras")
	}

	if raw, found := object["resourceUri"]; found {
		err = json.Unmarshal(raw, &a.ResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'resourceUri': %w", err)
		}
		delete(object, "resourceUri")
	}

	if raw, found := object["rfsp"]; found {
		err = json.Unmarshal(raw, &a.Rfsp)
		if err != nil {
			return fmt.Errorf("error reading 'rfsp': %w", err)
		}
		delete(object, "rfsp")
	}

	if raw, found := object["servAreaRes"]; found {
		err = json.Unmarshal(raw, &a.ServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'servAreaRes': %w", err)
		}
		delete(object, "servAreaRes")
	}

	if raw, found := object["smfSelInfo"]; found {
		err = json.Unmarshal(raw, &a.SmfSelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelInfo': %w", err)
		}
		delete(object, "smfSelInfo")
	}

	if raw, found := object["triggers"]; found {
		err = json.Unmarshal(raw, &a.Triggers)
		if err != nil {
			return fmt.Errorf("error reading 'triggers': %w", err)
		}
		delete(object, "triggers")
	}

	if raw, found := object["ueAmbr"]; found {
		err = json.Unmarshal(raw, &a.UeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'ueAmbr': %w", err)
		}
		delete(object, "ueAmbr")
	}

	if raw, found := object["wlServAreaRes"]; found {
		err = json.Unmarshal(raw, &a.WlServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'wlServAreaRes': %w", err)
		}
		delete(object, "wlServAreaRes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AMPolicyPolicyUpdate to handle AdditionalProperties
func (a AMPolicyPolicyUpdate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["pras"], err = json.Marshal(a.Pras)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pras': %w", err)
	}

	object["resourceUri"], err = json.Marshal(a.ResourceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceUri': %w", err)
	}

	if a.Rfsp != 0 {
		object["rfsp"], err = json.Marshal(a.Rfsp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rfsp': %w", err)
		}
	}

	if a.ServAreaRes != nil {
		object["servAreaRes"], err = json.Marshal(a.ServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servAreaRes': %w", err)
		}
	}

	object["smfSelInfo"], err = json.Marshal(a.SmfSelInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfSelInfo': %w", err)
	}

	object["triggers"], err = json.Marshal(a.Triggers)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'triggers': %w", err)
	}

	if a.UeAmbr != nil {
		object["ueAmbr"], err = json.Marshal(a.UeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueAmbr': %w", err)
		}
	}

	if a.WlServAreaRes != nil {
		object["wlServAreaRes"], err = json.Marshal(a.WlServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wlServAreaRes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AMPolicyTerminationNotification. Returns the specified
// element and whether it was found
func (a AMPolicyTerminationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AMPolicyTerminationNotification
func (a *AMPolicyTerminationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AMPolicyTerminationNotification to handle AdditionalProperties
func (a *AMPolicyTerminationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["resourceUri"]; found {
		err = json.Unmarshal(raw, &a.ResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'resourceUri': %w", err)
		}
		delete(object, "resourceUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AMPolicyTerminationNotification to handle AdditionalProperties
func (a AMPolicyTerminationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cause"], err = json.Marshal(a.Cause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cause': %w", err)
	}

	object["resourceUri"], err = json.Marshal(a.ResourceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceUri': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccNetChId. Returns the specified
// element and whether it was found
func (a AccNetChId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccNetChId
func (a *AccNetChId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccNetChId to handle AdditionalProperties
func (a *AccNetChId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accNetChaIdValue"]; found {
		err = json.Unmarshal(raw, &a.AccNetChaIdValue)
		if err != nil {
			return fmt.Errorf("error reading 'accNetChaIdValue': %w", err)
		}
		delete(object, "accNetChaIdValue")
	}

	if raw, found := object["refPccRuleIds"]; found {
		err = json.Unmarshal(raw, &a.RefPccRuleIds)
		if err != nil {
			return fmt.Errorf("error reading 'refPccRuleIds': %w", err)
		}
		delete(object, "refPccRuleIds")
	}

	if raw, found := object["sessionChScope"]; found {
		err = json.Unmarshal(raw, &a.SessionChScope)
		if err != nil {
			return fmt.Errorf("error reading 'sessionChScope': %w", err)
		}
		delete(object, "sessionChScope")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccNetChId to handle AdditionalProperties
func (a AccNetChId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accNetChaIdValue"], err = json.Marshal(a.AccNetChaIdValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accNetChaIdValue': %w", err)
	}

	if len(a.RefPccRuleIds) != 0 {
		object["refPccRuleIds"], err = json.Marshal(a.RefPccRuleIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refPccRuleIds': %w", err)
		}
	}

	if a.SessionChScope != nil {
		object["sessionChScope"], err = json.Marshal(a.SessionChScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionChScope': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccNetChargingAddress. Returns the specified
// element and whether it was found
func (a AccNetChargingAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccNetChargingAddress
func (a *AccNetChargingAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccNetChargingAddress to handle AdditionalProperties
func (a *AccNetChargingAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anChargIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AnChargIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anChargIpv4Addr': %w", err)
		}
		delete(object, "anChargIpv4Addr")
	}

	if raw, found := object["anChargIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AnChargIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anChargIpv6Addr': %w", err)
		}
		delete(object, "anChargIpv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccNetChargingAddress to handle AdditionalProperties
func (a AccNetChargingAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnChargIpv4Addr) != 0 {
		object["anChargIpv4Addr"], err = json.Marshal(a.AnChargIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anChargIpv4Addr': %w", err)
		}
	}

	if a.AnChargIpv6Addr != nil {
		object["anChargIpv6Addr"], err = json.Marshal(a.AnChargIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anChargIpv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AcceptableServiceInfo. Returns the specified
// element and whether it was found
func (a AcceptableServiceInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcceptableServiceInfo
func (a *AcceptableServiceInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcceptableServiceInfo to handle AdditionalProperties
func (a *AcceptableServiceInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accBwMedComps"]; found {
		err = json.Unmarshal(raw, &a.AccBwMedComps)
		if err != nil {
			return fmt.Errorf("error reading 'accBwMedComps': %w", err)
		}
		delete(object, "accBwMedComps")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcceptableServiceInfo to handle AdditionalProperties
func (a AcceptableServiceInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccBwMedComps != nil {
		object["accBwMedComps"], err = json.Marshal(a.AccBwMedComps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accBwMedComps': %w", err)
		}
	}

	if len(a.MarBwDl) != 0 {
		object["marBwDl"], err = json.Marshal(a.MarBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
		}
	}

	if len(a.MarBwUl) != 0 {
		object["marBwUl"], err = json.Marshal(a.MarBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessAndMobilityData. Returns the specified
// element and whether it was found
func (a AccessAndMobilityData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessAndMobilityData
func (a *AccessAndMobilityData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessAndMobilityData to handle AdditionalProperties
func (a *AccessAndMobilityData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["connStates"]; found {
		err = json.Unmarshal(raw, &a.ConnStates)
		if err != nil {
			return fmt.Errorf("error reading 'connStates': %w", err)
		}
		delete(object, "connStates")
	}

	if raw, found := object["connStatesTs"]; found {
		err = json.Unmarshal(raw, &a.ConnStatesTs)
		if err != nil {
			return fmt.Errorf("error reading 'connStatesTs': %w", err)
		}
		delete(object, "connStatesTs")
	}

	if raw, found := object["currentPlmn"]; found {
		err = json.Unmarshal(raw, &a.CurrentPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'currentPlmn': %w", err)
		}
		delete(object, "currentPlmn")
	}

	if raw, found := object["currentPlmnTs"]; found {
		err = json.Unmarshal(raw, &a.CurrentPlmnTs)
		if err != nil {
			return fmt.Errorf("error reading 'currentPlmnTs': %w", err)
		}
		delete(object, "currentPlmnTs")
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if raw, found := object["locationTs"]; found {
		err = json.Unmarshal(raw, &a.LocationTs)
		if err != nil {
			return fmt.Errorf("error reading 'locationTs': %w", err)
		}
		delete(object, "locationTs")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["ratTypesTs"]; found {
		err = json.Unmarshal(raw, &a.RatTypesTs)
		if err != nil {
			return fmt.Errorf("error reading 'ratTypesTs': %w", err)
		}
		delete(object, "ratTypesTs")
	}

	if raw, found := object["reachabilityStatus"]; found {
		err = json.Unmarshal(raw, &a.ReachabilityStatus)
		if err != nil {
			return fmt.Errorf("error reading 'reachabilityStatus': %w", err)
		}
		delete(object, "reachabilityStatus")
	}

	if raw, found := object["reachabilityStatusTs"]; found {
		err = json.Unmarshal(raw, &a.ReachabilityStatusTs)
		if err != nil {
			return fmt.Errorf("error reading 'reachabilityStatusTs': %w", err)
		}
		delete(object, "reachabilityStatusTs")
	}

	if raw, found := object["regStates"]; found {
		err = json.Unmarshal(raw, &a.RegStates)
		if err != nil {
			return fmt.Errorf("error reading 'regStates': %w", err)
		}
		delete(object, "regStates")
	}

	if raw, found := object["regStatesTs"]; found {
		err = json.Unmarshal(raw, &a.RegStatesTs)
		if err != nil {
			return fmt.Errorf("error reading 'regStatesTs': %w", err)
		}
		delete(object, "regStatesTs")
	}

	if raw, found := object["roamingStatus"]; found {
		err = json.Unmarshal(raw, &a.RoamingStatus)
		if err != nil {
			return fmt.Errorf("error reading 'roamingStatus': %w", err)
		}
		delete(object, "roamingStatus")
	}

	if raw, found := object["roamingStatusTs"]; found {
		err = json.Unmarshal(raw, &a.RoamingStatusTs)
		if err != nil {
			return fmt.Errorf("error reading 'roamingStatusTs': %w", err)
		}
		delete(object, "roamingStatusTs")
	}

	if raw, found := object["smsOverNasStatus"]; found {
		err = json.Unmarshal(raw, &a.SmsOverNasStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smsOverNasStatus': %w", err)
		}
		delete(object, "smsOverNasStatus")
	}

	if raw, found := object["smsOverNasStatusTs"]; found {
		err = json.Unmarshal(raw, &a.SmsOverNasStatusTs)
		if err != nil {
			return fmt.Errorf("error reading 'smsOverNasStatusTs': %w", err)
		}
		delete(object, "smsOverNasStatusTs")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["timeZone"]; found {
		err = json.Unmarshal(raw, &a.TimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'timeZone': %w", err)
		}
		delete(object, "timeZone")
	}

	if raw, found := object["timeZoneTs"]; found {
		err = json.Unmarshal(raw, &a.TimeZoneTs)
		if err != nil {
			return fmt.Errorf("error reading 'timeZoneTs': %w", err)
		}
		delete(object, "timeZoneTs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessAndMobilityData to handle AdditionalProperties
func (a AccessAndMobilityData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.ConnStates != nil {
		object["connStates"], err = json.Marshal(a.ConnStates)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'connStates': %w", err)
		}
	}

	if a.ConnStatesTs != nil {
		object["connStatesTs"], err = json.Marshal(a.ConnStatesTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'connStatesTs': %w", err)
		}
	}

	if a.CurrentPlmn != nil {
		object["currentPlmn"], err = json.Marshal(a.CurrentPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentPlmn': %w", err)
		}
	}

	if a.CurrentPlmnTs != nil {
		object["currentPlmnTs"], err = json.Marshal(a.CurrentPlmnTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentPlmnTs': %w", err)
		}
	}

	if a.Location != nil {
		object["location"], err = json.Marshal(a.Location)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'location': %w", err)
		}
	}

	if a.LocationTs != nil {
		object["locationTs"], err = json.Marshal(a.LocationTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationTs': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RatTypesTs != nil {
		object["ratTypesTs"], err = json.Marshal(a.RatTypesTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratTypesTs': %w", err)
		}
	}

	if a.ReachabilityStatus != nil {
		object["reachabilityStatus"], err = json.Marshal(a.ReachabilityStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachabilityStatus': %w", err)
		}
	}

	if a.ReachabilityStatusTs != nil {
		object["reachabilityStatusTs"], err = json.Marshal(a.ReachabilityStatusTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachabilityStatusTs': %w", err)
		}
	}

	if a.RegStates != nil {
		object["regStates"], err = json.Marshal(a.RegStates)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'regStates': %w", err)
		}
	}

	if a.RegStatesTs != nil {
		object["regStatesTs"], err = json.Marshal(a.RegStatesTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'regStatesTs': %w", err)
		}
	}

	if a.RoamingStatus != nil {
		object["roamingStatus"], err = json.Marshal(a.RoamingStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingStatus': %w", err)
		}
	}

	if a.RoamingStatusTs != nil {
		object["roamingStatusTs"], err = json.Marshal(a.RoamingStatusTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingStatusTs': %w", err)
		}
	}

	if a.SmsOverNasStatus != nil {
		object["smsOverNasStatus"], err = json.Marshal(a.SmsOverNasStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsOverNasStatus': %w", err)
		}
	}

	if a.SmsOverNasStatusTs != nil {
		object["smsOverNasStatusTs"], err = json.Marshal(a.SmsOverNasStatusTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsOverNasStatusTs': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TimeZone != nil {
		object["timeZone"], err = json.Marshal(a.TimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeZone': %w", err)
		}
	}

	if a.TimeZoneTs != nil {
		object["timeZoneTs"], err = json.Marshal(a.TimeZoneTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeZoneTs': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessAndMobilitySubscriptionData. Returns the specified
// element and whether it was found
func (a AccessAndMobilitySubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessAndMobilitySubscriptionData
func (a *AccessAndMobilitySubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessAndMobilitySubscriptionData to handle AdditionalProperties
func (a *AccessAndMobilitySubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["activeTime"]; found {
		err = json.Unmarshal(raw, &a.ActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'activeTime': %w", err)
		}
		delete(object, "activeTime")
	}

	if raw, found := object["cMsisdn"]; found {
		err = json.Unmarshal(raw, &a.CMsisdn)
		if err != nil {
			return fmt.Errorf("error reading 'cMsisdn': %w", err)
		}
		delete(object, "cMsisdn")
	}

	if raw, found := object["cagData"]; found {
		err = json.Unmarshal(raw, &a.CagData)
		if err != nil {
			return fmt.Errorf("error reading 'cagData': %w", err)
		}
		delete(object, "cagData")
	}

	if raw, found := object["coreNetworkTypeRestrictions"]; found {
		err = json.Unmarshal(raw, &a.CoreNetworkTypeRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'coreNetworkTypeRestrictions': %w", err)
		}
		delete(object, "coreNetworkTypeRestrictions")
	}

	if raw, found := object["ecRestrictionDataNb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataNb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataNb': %w", err)
		}
		delete(object, "ecRestrictionDataNb")
	}

	if raw, found := object["ecRestrictionDataWb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataWb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataWb': %w", err)
		}
		delete(object, "ecRestrictionDataWb")
	}

	if raw, found := object["edrxParametersList"]; found {
		err = json.Unmarshal(raw, &a.EdrxParametersList)
		if err != nil {
			return fmt.Errorf("error reading 'edrxParametersList': %w", err)
		}
		delete(object, "edrxParametersList")
	}

	if raw, found := object["expectedUeBehaviourList"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUeBehaviourList)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUeBehaviourList': %w", err)
		}
		delete(object, "expectedUeBehaviourList")
	}

	if raw, found := object["forbiddenAreas"]; found {
		err = json.Unmarshal(raw, &a.ForbiddenAreas)
		if err != nil {
			return fmt.Errorf("error reading 'forbiddenAreas': %w", err)
		}
		delete(object, "forbiddenAreas")
	}

	if raw, found := object["gpsis"]; found {
		err = json.Unmarshal(raw, &a.Gpsis)
		if err != nil {
			return fmt.Errorf("error reading 'gpsis': %w", err)
		}
		delete(object, "gpsis")
	}

	if raw, found := object["iabOperationAllowed"]; found {
		err = json.Unmarshal(raw, &a.IabOperationAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'iabOperationAllowed': %w", err)
		}
		delete(object, "iabOperationAllowed")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["mcsPriority"]; found {
		err = json.Unmarshal(raw, &a.McsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mcsPriority': %w", err)
		}
		delete(object, "mcsPriority")
	}

	if raw, found := object["mdtConfiguration"]; found {
		err = json.Unmarshal(raw, &a.MdtConfiguration)
		if err != nil {
			return fmt.Errorf("error reading 'mdtConfiguration': %w", err)
		}
		delete(object, "mdtConfiguration")
	}

	if raw, found := object["mdtUserConsent"]; found {
		err = json.Unmarshal(raw, &a.MdtUserConsent)
		if err != nil {
			return fmt.Errorf("error reading 'mdtUserConsent': %w", err)
		}
		delete(object, "mdtUserConsent")
	}

	if raw, found := object["micoAllowed"]; found {
		err = json.Unmarshal(raw, &a.MicoAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'micoAllowed': %w", err)
		}
		delete(object, "micoAllowed")
	}

	if raw, found := object["mpsPriority"]; found {
		err = json.Unmarshal(raw, &a.MpsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mpsPriority': %w", err)
		}
		delete(object, "mpsPriority")
	}

	if raw, found := object["nbIoTUePriority"]; found {
		err = json.Unmarshal(raw, &a.NbIoTUePriority)
		if err != nil {
			return fmt.Errorf("error reading 'nbIoTUePriority': %w", err)
		}
		delete(object, "nbIoTUePriority")
	}

	if raw, found := object["nssai"]; found {
		err = json.Unmarshal(raw, &a.Nssai)
		if err != nil {
			return fmt.Errorf("error reading 'nssai': %w", err)
		}
		delete(object, "nssai")
	}

	if raw, found := object["nssaiInclusionAllowed"]; found {
		err = json.Unmarshal(raw, &a.NssaiInclusionAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'nssaiInclusionAllowed': %w", err)
		}
		delete(object, "nssaiInclusionAllowed")
	}

	if raw, found := object["odbPacketServices"]; found {
		err = json.Unmarshal(raw, &a.OdbPacketServices)
		if err != nil {
			return fmt.Errorf("error reading 'odbPacketServices': %w", err)
		}
		delete(object, "odbPacketServices")
	}

	if raw, found := object["primaryRatRestrictions"]; found {
		err = json.Unmarshal(raw, &a.PrimaryRatRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'primaryRatRestrictions': %w", err)
		}
		delete(object, "primaryRatRestrictions")
	}

	if raw, found := object["ptwParametersList"]; found {
		err = json.Unmarshal(raw, &a.PtwParametersList)
		if err != nil {
			return fmt.Errorf("error reading 'ptwParametersList': %w", err)
		}
		delete(object, "ptwParametersList")
	}

	if raw, found := object["ratRestrictions"]; found {
		err = json.Unmarshal(raw, &a.RatRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'ratRestrictions': %w", err)
		}
		delete(object, "ratRestrictions")
	}

	if raw, found := object["rfspIndex"]; found {
		err = json.Unmarshal(raw, &a.RfspIndex)
		if err != nil {
			return fmt.Errorf("error reading 'rfspIndex': %w", err)
		}
		delete(object, "rfspIndex")
	}

	if raw, found := object["rgWirelineCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.RgWirelineCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading 'rgWirelineCharacteristics': %w", err)
		}
		delete(object, "rgWirelineCharacteristics")
	}

	if raw, found := object["secondaryRatRestrictions"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatRestrictions': %w", err)
		}
		delete(object, "secondaryRatRestrictions")
	}

	if raw, found := object["serviceAreaRestriction"]; found {
		err = json.Unmarshal(raw, &a.ServiceAreaRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'serviceAreaRestriction': %w", err)
		}
		delete(object, "serviceAreaRestriction")
	}

	if raw, found := object["serviceGapTime"]; found {
		err = json.Unmarshal(raw, &a.ServiceGapTime)
		if err != nil {
			return fmt.Errorf("error reading 'serviceGapTime': %w", err)
		}
		delete(object, "serviceGapTime")
	}

	if raw, found := object["sharedAmDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedAmDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedAmDataIds': %w", err)
		}
		delete(object, "sharedAmDataIds")
	}

	if raw, found := object["sharedVnGroupDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedVnGroupDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedVnGroupDataIds': %w", err)
		}
		delete(object, "sharedVnGroupDataIds")
	}

	if raw, found := object["sorInfo"]; found {
		err = json.Unmarshal(raw, &a.SorInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sorInfo': %w", err)
		}
		delete(object, "sorInfo")
	}

	if raw, found := object["sorInfoExpectInd"]; found {
		err = json.Unmarshal(raw, &a.SorInfoExpectInd)
		if err != nil {
			return fmt.Errorf("error reading 'sorInfoExpectInd': %w", err)
		}
		delete(object, "sorInfoExpectInd")
	}

	if raw, found := object["sorUpdateIndicatorList"]; found {
		err = json.Unmarshal(raw, &a.SorUpdateIndicatorList)
		if err != nil {
			return fmt.Errorf("error reading 'sorUpdateIndicatorList': %w", err)
		}
		delete(object, "sorUpdateIndicatorList")
	}

	if raw, found := object["sorafRetrieval"]; found {
		err = json.Unmarshal(raw, &a.SorafRetrieval)
		if err != nil {
			return fmt.Errorf("error reading 'sorafRetrieval': %w", err)
		}
		delete(object, "sorafRetrieval")
	}

	if raw, found := object["stnSr"]; found {
		err = json.Unmarshal(raw, &a.StnSr)
		if err != nil {
			return fmt.Errorf("error reading 'stnSr': %w", err)
		}
		delete(object, "stnSr")
	}

	if raw, found := object["subsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.SubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'subsRegTimer': %w", err)
		}
		delete(object, "subsRegTimer")
	}

	if raw, found := object["subscribedDnnList"]; found {
		err = json.Unmarshal(raw, &a.SubscribedDnnList)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedDnnList': %w", err)
		}
		delete(object, "subscribedDnnList")
	}

	if raw, found := object["subscribedUeAmbr"]; found {
		err = json.Unmarshal(raw, &a.SubscribedUeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedUeAmbr': %w", err)
		}
		delete(object, "subscribedUeAmbr")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["ueUsageType"]; found {
		err = json.Unmarshal(raw, &a.UeUsageType)
		if err != nil {
			return fmt.Errorf("error reading 'ueUsageType': %w", err)
		}
		delete(object, "ueUsageType")
	}

	if raw, found := object["upuInfo"]; found {
		err = json.Unmarshal(raw, &a.UpuInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upuInfo': %w", err)
		}
		delete(object, "upuInfo")
	}

	if raw, found := object["wirelineForbiddenAreas"]; found {
		err = json.Unmarshal(raw, &a.WirelineForbiddenAreas)
		if err != nil {
			return fmt.Errorf("error reading 'wirelineForbiddenAreas': %w", err)
		}
		delete(object, "wirelineForbiddenAreas")
	}

	if raw, found := object["wirelineServiceAreaRestriction"]; found {
		err = json.Unmarshal(raw, &a.WirelineServiceAreaRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'wirelineServiceAreaRestriction': %w", err)
		}
		delete(object, "wirelineServiceAreaRestriction")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessAndMobilitySubscriptionData to handle AdditionalProperties
func (a AccessAndMobilitySubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["activeTime"], err = json.Marshal(a.ActiveTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'activeTime': %w", err)
	}

	if len(a.CMsisdn) != 0 {
		object["cMsisdn"], err = json.Marshal(a.CMsisdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cMsisdn': %w", err)
		}
	}

	if a.CagData != nil {
		object["cagData"], err = json.Marshal(a.CagData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cagData': %w", err)
		}
	}

	if a.CoreNetworkTypeRestrictions != nil {
		object["coreNetworkTypeRestrictions"], err = json.Marshal(a.CoreNetworkTypeRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'coreNetworkTypeRestrictions': %w", err)
		}
	}

	if a.EcRestrictionDataNb != nil {
		object["ecRestrictionDataNb"], err = json.Marshal(a.EcRestrictionDataNb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataNb': %w", err)
		}
	}

	if a.EcRestrictionDataWb != nil {
		object["ecRestrictionDataWb"], err = json.Marshal(a.EcRestrictionDataWb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataWb': %w", err)
		}
	}

	if len(a.EdrxParametersList) != 0 {
		object["edrxParametersList"], err = json.Marshal(a.EdrxParametersList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'edrxParametersList': %w", err)
		}
	}

	if a.ExpectedUeBehaviourList != nil {
		object["expectedUeBehaviourList"], err = json.Marshal(a.ExpectedUeBehaviourList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUeBehaviourList': %w", err)
		}
	}

	if a.ForbiddenAreas != nil {
		object["forbiddenAreas"], err = json.Marshal(a.ForbiddenAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forbiddenAreas': %w", err)
		}
	}

	if a.Gpsis != nil {
		object["gpsis"], err = json.Marshal(a.Gpsis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsis': %w", err)
		}
	}

	if a.IabOperationAllowed != nil {
		object["iabOperationAllowed"], err = json.Marshal(a.IabOperationAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iabOperationAllowed': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	if a.McsPriority != nil {
		object["mcsPriority"], err = json.Marshal(a.McsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsPriority': %w", err)
		}
	}

	if a.MdtConfiguration != nil {
		object["mdtConfiguration"], err = json.Marshal(a.MdtConfiguration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mdtConfiguration': %w", err)
		}
	}

	if a.MdtUserConsent != nil {
		object["mdtUserConsent"], err = json.Marshal(a.MdtUserConsent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mdtUserConsent': %w", err)
		}
	}

	if a.MicoAllowed != nil {
		object["micoAllowed"], err = json.Marshal(a.MicoAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'micoAllowed': %w", err)
		}
	}

	if a.MpsPriority != nil {
		object["mpsPriority"], err = json.Marshal(a.MpsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsPriority': %w", err)
		}
	}

	if a.NbIoTUePriority != nil {
		object["nbIoTUePriority"], err = json.Marshal(a.NbIoTUePriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nbIoTUePriority': %w", err)
		}
	}

	object["nssai"], err = json.Marshal(a.Nssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nssai': %w", err)
	}

	if a.NssaiInclusionAllowed != nil {
		object["nssaiInclusionAllowed"], err = json.Marshal(a.NssaiInclusionAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nssaiInclusionAllowed': %w", err)
		}
	}

	if a.OdbPacketServices != nil {
		object["odbPacketServices"], err = json.Marshal(a.OdbPacketServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'odbPacketServices': %w", err)
		}
	}

	if a.PrimaryRatRestrictions != nil {
		object["primaryRatRestrictions"], err = json.Marshal(a.PrimaryRatRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'primaryRatRestrictions': %w", err)
		}
	}

	if len(a.PtwParametersList) != 0 {
		object["ptwParametersList"], err = json.Marshal(a.PtwParametersList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ptwParametersList': %w", err)
		}
	}

	if a.RatRestrictions != nil {
		object["ratRestrictions"], err = json.Marshal(a.RatRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratRestrictions': %w", err)
		}
	}

	object["rfspIndex"], err = json.Marshal(a.RfspIndex)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rfspIndex': %w", err)
	}

	if a.RgWirelineCharacteristics != nil {
		object["rgWirelineCharacteristics"], err = json.Marshal(a.RgWirelineCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rgWirelineCharacteristics': %w", err)
		}
	}

	if a.SecondaryRatRestrictions != nil {
		object["secondaryRatRestrictions"], err = json.Marshal(a.SecondaryRatRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatRestrictions': %w", err)
		}
	}

	if a.ServiceAreaRestriction != nil {
		object["serviceAreaRestriction"], err = json.Marshal(a.ServiceAreaRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceAreaRestriction': %w", err)
		}
	}

	if a.ServiceGapTime != nil {
		object["serviceGapTime"], err = json.Marshal(a.ServiceGapTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceGapTime': %w", err)
		}
	}

	if len(a.SharedAmDataIds) != 0 {
		object["sharedAmDataIds"], err = json.Marshal(a.SharedAmDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedAmDataIds': %w", err)
		}
	}

	if a.SharedVnGroupDataIds != nil {
		object["sharedVnGroupDataIds"], err = json.Marshal(a.SharedVnGroupDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedVnGroupDataIds': %w", err)
		}
	}

	if a.SorInfo != nil {
		object["sorInfo"], err = json.Marshal(a.SorInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorInfo': %w", err)
		}
	}

	if a.SorInfoExpectInd != nil {
		object["sorInfoExpectInd"], err = json.Marshal(a.SorInfoExpectInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorInfoExpectInd': %w", err)
		}
	}

	if len(a.SorUpdateIndicatorList) != 0 {
		object["sorUpdateIndicatorList"], err = json.Marshal(a.SorUpdateIndicatorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorUpdateIndicatorList': %w", err)
		}
	}

	if a.SorafRetrieval != nil {
		object["sorafRetrieval"], err = json.Marshal(a.SorafRetrieval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorafRetrieval': %w", err)
		}
	}

	if a.StnSr != nil {
		object["stnSr"], err = json.Marshal(a.StnSr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stnSr': %w", err)
		}
	}

	object["subsRegTimer"], err = json.Marshal(a.SubsRegTimer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subsRegTimer': %w", err)
	}

	if a.SubscribedDnnList != nil {
		object["subscribedDnnList"], err = json.Marshal(a.SubscribedDnnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedDnnList': %w", err)
		}
	}

	if a.SubscribedUeAmbr != nil {
		object["subscribedUeAmbr"], err = json.Marshal(a.SubscribedUeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedUeAmbr': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UeUsageType != nil {
		object["ueUsageType"], err = json.Marshal(a.UeUsageType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueUsageType': %w", err)
		}
	}

	if a.UpuInfo != nil {
		object["upuInfo"], err = json.Marshal(a.UpuInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuInfo': %w", err)
		}
	}

	if a.WirelineForbiddenAreas != nil {
		object["wirelineForbiddenAreas"], err = json.Marshal(a.WirelineForbiddenAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wirelineForbiddenAreas': %w", err)
		}
	}

	if a.WirelineServiceAreaRestriction != nil {
		object["wirelineServiceAreaRestriction"], err = json.Marshal(a.WirelineServiceAreaRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wirelineServiceAreaRestriction': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessNetChargingIdentifier. Returns the specified
// element and whether it was found
func (a AccessNetChargingIdentifier) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessNetChargingIdentifier
func (a *AccessNetChargingIdentifier) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessNetChargingIdentifier to handle AdditionalProperties
func (a *AccessNetChargingIdentifier) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accNetChaIdValue"]; found {
		err = json.Unmarshal(raw, &a.AccNetChaIdValue)
		if err != nil {
			return fmt.Errorf("error reading 'accNetChaIdValue': %w", err)
		}
		delete(object, "accNetChaIdValue")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessNetChargingIdentifier to handle AdditionalProperties
func (a AccessNetChargingIdentifier) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accNetChaIdValue"], err = json.Marshal(a.AccNetChaIdValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accNetChaIdValue': %w", err)
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessTokenErr. Returns the specified
// element and whether it was found
func (a AccessTokenErr) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessTokenErr
func (a *AccessTokenErr) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessTokenErr to handle AdditionalProperties
func (a *AccessTokenErr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["error_description"]; found {
		err = json.Unmarshal(raw, &a.ErrorDescription)
		if err != nil {
			return fmt.Errorf("error reading 'error_description': %w", err)
		}
		delete(object, "error_description")
	}

	if raw, found := object["error_uri"]; found {
		err = json.Unmarshal(raw, &a.ErrorUri)
		if err != nil {
			return fmt.Errorf("error reading 'error_uri': %w", err)
		}
		delete(object, "error_uri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessTokenErr to handle AdditionalProperties
func (a AccessTokenErr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.ErrorDescription != nil {
		object["error_description"], err = json.Marshal(a.ErrorDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error_description': %w", err)
		}
	}

	if a.ErrorUri != nil {
		object["error_uri"], err = json.Marshal(a.ErrorUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error_uri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessTokenReq. Returns the specified
// element and whether it was found
func (a AccessTokenReq) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessTokenReq
func (a *AccessTokenReq) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessTokenReq to handle AdditionalProperties
func (a *AccessTokenReq) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["grant_type"]; found {
		err = json.Unmarshal(raw, &a.GrantType)
		if err != nil {
			return fmt.Errorf("error reading 'grant_type': %w", err)
		}
		delete(object, "grant_type")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if raw, found := object["requesterFqdn"]; found {
		err = json.Unmarshal(raw, &a.RequesterFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'requesterFqdn': %w", err)
		}
		delete(object, "requesterFqdn")
	}

	if raw, found := object["requesterPlmn"]; found {
		err = json.Unmarshal(raw, &a.RequesterPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'requesterPlmn': %w", err)
		}
		delete(object, "requesterPlmn")
	}

	if raw, found := object["requesterPlmnList"]; found {
		err = json.Unmarshal(raw, &a.RequesterPlmnList)
		if err != nil {
			return fmt.Errorf("error reading 'requesterPlmnList': %w", err)
		}
		delete(object, "requesterPlmnList")
	}

	if raw, found := object["requesterSnpnList"]; found {
		err = json.Unmarshal(raw, &a.RequesterSnpnList)
		if err != nil {
			return fmt.Errorf("error reading 'requesterSnpnList': %w", err)
		}
		delete(object, "requesterSnpnList")
	}

	if raw, found := object["requesterSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.RequesterSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'requesterSnssaiList': %w", err)
		}
		delete(object, "requesterSnssaiList")
	}

	if raw, found := object["scope"]; found {
		err = json.Unmarshal(raw, &a.Scope)
		if err != nil {
			return fmt.Errorf("error reading 'scope': %w", err)
		}
		delete(object, "scope")
	}

	if raw, found := object["targetNfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.TargetNfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfInstanceId': %w", err)
		}
		delete(object, "targetNfInstanceId")
	}

	if raw, found := object["targetNfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.TargetNfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfServiceSetId': %w", err)
		}
		delete(object, "targetNfServiceSetId")
	}

	if raw, found := object["targetNfSetId"]; found {
		err = json.Unmarshal(raw, &a.TargetNfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfSetId': %w", err)
		}
		delete(object, "targetNfSetId")
	}

	if raw, found := object["targetNfType"]; found {
		err = json.Unmarshal(raw, &a.TargetNfType)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfType': %w", err)
		}
		delete(object, "targetNfType")
	}

	if raw, found := object["targetNsiList"]; found {
		err = json.Unmarshal(raw, &a.TargetNsiList)
		if err != nil {
			return fmt.Errorf("error reading 'targetNsiList': %w", err)
		}
		delete(object, "targetNsiList")
	}

	if raw, found := object["targetPlmn"]; found {
		err = json.Unmarshal(raw, &a.TargetPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'targetPlmn': %w", err)
		}
		delete(object, "targetPlmn")
	}

	if raw, found := object["targetSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.TargetSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'targetSnssaiList': %w", err)
		}
		delete(object, "targetSnssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessTokenReq to handle AdditionalProperties
func (a AccessTokenReq) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["grant_type"], err = json.Marshal(a.GrantType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'grant_type': %w", err)
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.NfType != nil {
		object["nfType"], err = json.Marshal(a.NfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
		}
	}

	if a.RequesterFqdn != nil {
		object["requesterFqdn"], err = json.Marshal(a.RequesterFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterFqdn': %w", err)
		}
	}

	if a.RequesterPlmn != nil {
		object["requesterPlmn"], err = json.Marshal(a.RequesterPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterPlmn': %w", err)
		}
	}

	if len(a.RequesterPlmnList) != 0 {
		object["requesterPlmnList"], err = json.Marshal(a.RequesterPlmnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterPlmnList': %w", err)
		}
	}

	if len(a.RequesterSnpnList) != 0 {
		object["requesterSnpnList"], err = json.Marshal(a.RequesterSnpnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterSnpnList': %w", err)
		}
	}

	if len(a.RequesterSnssaiList) != 0 {
		object["requesterSnssaiList"], err = json.Marshal(a.RequesterSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterSnssaiList': %w", err)
		}
	}

	object["scope"], err = json.Marshal(a.Scope)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scope': %w", err)
	}

	if a.TargetNfInstanceId != nil {
		object["targetNfInstanceId"], err = json.Marshal(a.TargetNfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfInstanceId': %w", err)
		}
	}

	if a.TargetNfServiceSetId != nil {
		object["targetNfServiceSetId"], err = json.Marshal(a.TargetNfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfServiceSetId': %w", err)
		}
	}

	if a.TargetNfSetId != nil {
		object["targetNfSetId"], err = json.Marshal(a.TargetNfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfSetId': %w", err)
		}
	}

	if a.TargetNfType != nil {
		object["targetNfType"], err = json.Marshal(a.TargetNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfType': %w", err)
		}
	}

	if len(a.TargetNsiList) != 0 {
		object["targetNsiList"], err = json.Marshal(a.TargetNsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNsiList': %w", err)
		}
	}

	if a.TargetPlmn != nil {
		object["targetPlmn"], err = json.Marshal(a.TargetPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetPlmn': %w", err)
		}
	}

	if len(a.TargetSnssaiList) != 0 {
		object["targetSnssaiList"], err = json.Marshal(a.TargetSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetSnssaiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessTokenRsp. Returns the specified
// element and whether it was found
func (a AccessTokenRsp) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessTokenRsp
func (a *AccessTokenRsp) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessTokenRsp to handle AdditionalProperties
func (a *AccessTokenRsp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["access_token"]; found {
		err = json.Unmarshal(raw, &a.AccessToken)
		if err != nil {
			return fmt.Errorf("error reading 'access_token': %w", err)
		}
		delete(object, "access_token")
	}

	if raw, found := object["expires_in"]; found {
		err = json.Unmarshal(raw, &a.ExpiresIn)
		if err != nil {
			return fmt.Errorf("error reading 'expires_in': %w", err)
		}
		delete(object, "expires_in")
	}

	if raw, found := object["scope"]; found {
		err = json.Unmarshal(raw, &a.Scope)
		if err != nil {
			return fmt.Errorf("error reading 'scope': %w", err)
		}
		delete(object, "scope")
	}

	if raw, found := object["token_type"]; found {
		err = json.Unmarshal(raw, &a.TokenType)
		if err != nil {
			return fmt.Errorf("error reading 'token_type': %w", err)
		}
		delete(object, "token_type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessTokenRsp to handle AdditionalProperties
func (a AccessTokenRsp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["access_token"], err = json.Marshal(a.AccessToken)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'access_token': %w", err)
	}

	if a.ExpiresIn != nil {
		object["expires_in"], err = json.Marshal(a.ExpiresIn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expires_in': %w", err)
		}
	}

	if len(a.Scope) != 0 {
		object["scope"], err = json.Marshal(a.Scope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scope': %w", err)
		}
	}

	object["token_type"], err = json.Marshal(a.TokenType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'token_type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccuUsageReport. Returns the specified
// element and whether it was found
func (a AccuUsageReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccuUsageReport
func (a *AccuUsageReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccuUsageReport to handle AdditionalProperties
func (a *AccuUsageReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nextTimeUsage"]; found {
		err = json.Unmarshal(raw, &a.NextTimeUsage)
		if err != nil {
			return fmt.Errorf("error reading 'nextTimeUsage': %w", err)
		}
		delete(object, "nextTimeUsage")
	}

	if raw, found := object["nextVolUsage"]; found {
		err = json.Unmarshal(raw, &a.NextVolUsage)
		if err != nil {
			return fmt.Errorf("error reading 'nextVolUsage': %w", err)
		}
		delete(object, "nextVolUsage")
	}

	if raw, found := object["nextVolUsageDownlink"]; found {
		err = json.Unmarshal(raw, &a.NextVolUsageDownlink)
		if err != nil {
			return fmt.Errorf("error reading 'nextVolUsageDownlink': %w", err)
		}
		delete(object, "nextVolUsageDownlink")
	}

	if raw, found := object["nextVolUsageUplink"]; found {
		err = json.Unmarshal(raw, &a.NextVolUsageUplink)
		if err != nil {
			return fmt.Errorf("error reading 'nextVolUsageUplink': %w", err)
		}
		delete(object, "nextVolUsageUplink")
	}

	if raw, found := object["refUmIds"]; found {
		err = json.Unmarshal(raw, &a.RefUmIds)
		if err != nil {
			return fmt.Errorf("error reading 'refUmIds': %w", err)
		}
		delete(object, "refUmIds")
	}

	if raw, found := object["timeUsage"]; found {
		err = json.Unmarshal(raw, &a.TimeUsage)
		if err != nil {
			return fmt.Errorf("error reading 'timeUsage': %w", err)
		}
		delete(object, "timeUsage")
	}

	if raw, found := object["volUsage"]; found {
		err = json.Unmarshal(raw, &a.VolUsage)
		if err != nil {
			return fmt.Errorf("error reading 'volUsage': %w", err)
		}
		delete(object, "volUsage")
	}

	if raw, found := object["volUsageDownlink"]; found {
		err = json.Unmarshal(raw, &a.VolUsageDownlink)
		if err != nil {
			return fmt.Errorf("error reading 'volUsageDownlink': %w", err)
		}
		delete(object, "volUsageDownlink")
	}

	if raw, found := object["volUsageUplink"]; found {
		err = json.Unmarshal(raw, &a.VolUsageUplink)
		if err != nil {
			return fmt.Errorf("error reading 'volUsageUplink': %w", err)
		}
		delete(object, "volUsageUplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccuUsageReport to handle AdditionalProperties
func (a AccuUsageReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NextTimeUsage != nil {
		object["nextTimeUsage"], err = json.Marshal(a.NextTimeUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nextTimeUsage': %w", err)
		}
	}

	if a.NextVolUsage != nil {
		object["nextVolUsage"], err = json.Marshal(a.NextVolUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nextVolUsage': %w", err)
		}
	}

	if a.NextVolUsageDownlink != nil {
		object["nextVolUsageDownlink"], err = json.Marshal(a.NextVolUsageDownlink)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nextVolUsageDownlink': %w", err)
		}
	}

	if a.NextVolUsageUplink != nil {
		object["nextVolUsageUplink"], err = json.Marshal(a.NextVolUsageUplink)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nextVolUsageUplink': %w", err)
		}
	}

	object["refUmIds"], err = json.Marshal(a.RefUmIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refUmIds': %w", err)
	}

	if a.TimeUsage != nil {
		object["timeUsage"], err = json.Marshal(a.TimeUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeUsage': %w", err)
		}
	}

	if a.VolUsage != nil {
		object["volUsage"], err = json.Marshal(a.VolUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'volUsage': %w", err)
		}
	}

	if a.VolUsageDownlink != nil {
		object["volUsageDownlink"], err = json.Marshal(a.VolUsageDownlink)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'volUsageDownlink': %w", err)
		}
	}

	if a.VolUsageUplink != nil {
		object["volUsageUplink"], err = json.Marshal(a.VolUsageUplink)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'volUsageUplink': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccumulatedUsage. Returns the specified
// element and whether it was found
func (a AccumulatedUsage) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccumulatedUsage
func (a *AccumulatedUsage) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccumulatedUsage to handle AdditionalProperties
func (a *AccumulatedUsage) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlinkVolume"]; found {
		err = json.Unmarshal(raw, &a.DownlinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'downlinkVolume': %w", err)
		}
		delete(object, "downlinkVolume")
	}

	if raw, found := object["duration"]; found {
		err = json.Unmarshal(raw, &a.Duration)
		if err != nil {
			return fmt.Errorf("error reading 'duration': %w", err)
		}
		delete(object, "duration")
	}

	if raw, found := object["totalVolume"]; found {
		err = json.Unmarshal(raw, &a.TotalVolume)
		if err != nil {
			return fmt.Errorf("error reading 'totalVolume': %w", err)
		}
		delete(object, "totalVolume")
	}

	if raw, found := object["uplinkVolume"]; found {
		err = json.Unmarshal(raw, &a.UplinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'uplinkVolume': %w", err)
		}
		delete(object, "uplinkVolume")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccumulatedUsage to handle AdditionalProperties
func (a AccumulatedUsage) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DownlinkVolume != nil {
		object["downlinkVolume"], err = json.Marshal(a.DownlinkVolume)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'downlinkVolume': %w", err)
		}
	}

	if a.Duration != nil {
		object["duration"], err = json.Marshal(a.Duration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'duration': %w", err)
		}
	}

	if a.TotalVolume != nil {
		object["totalVolume"], err = json.Marshal(a.TotalVolume)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'totalVolume': %w", err)
		}
	}

	if a.UplinkVolume != nil {
		object["uplinkVolume"], err = json.Marshal(a.UplinkVolume)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uplinkVolume': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AckOfNotify. Returns the specified
// element and whether it was found
func (a AckOfNotify) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AckOfNotify
func (a *AckOfNotify) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AckOfNotify to handle AdditionalProperties
func (a *AckOfNotify) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ackResult"]; found {
		err = json.Unmarshal(raw, &a.AckResult)
		if err != nil {
			return fmt.Errorf("error reading 'ackResult': %w", err)
		}
		delete(object, "ackResult")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AckOfNotify to handle AdditionalProperties
func (a AckOfNotify) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ackResult"], err = json.Marshal(a.AckResult)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ackResult': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	object["notifId"], err = json.Marshal(a.NotifId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AcknowledgeInfo. Returns the specified
// element and whether it was found
func (a AcknowledgeInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcknowledgeInfo
func (a *AcknowledgeInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcknowledgeInfo to handle AdditionalProperties
func (a *AcknowledgeInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["securedPacket"]; found {
		err = json.Unmarshal(raw, &a.SecuredPacket)
		if err != nil {
			return fmt.Errorf("error reading 'securedPacket': %w", err)
		}
		delete(object, "securedPacket")
	}

	if raw, found := object["sorMacIue"]; found {
		err = json.Unmarshal(raw, &a.SorMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'sorMacIue': %w", err)
		}
		delete(object, "sorMacIue")
	}

	if raw, found := object["ueNotReachable"]; found {
		err = json.Unmarshal(raw, &a.UeNotReachable)
		if err != nil {
			return fmt.Errorf("error reading 'ueNotReachable': %w", err)
		}
		delete(object, "ueNotReachable")
	}

	if raw, found := object["upuMacIue"]; found {
		err = json.Unmarshal(raw, &a.UpuMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'upuMacIue': %w", err)
		}
		delete(object, "upuMacIue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcknowledgeInfo to handle AdditionalProperties
func (a AcknowledgeInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	if a.SecuredPacket != nil {
		object["securedPacket"], err = json.Marshal(a.SecuredPacket)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'securedPacket': %w", err)
		}
	}

	if len(a.SorMacIue) != 0 {
		object["sorMacIue"], err = json.Marshal(a.SorMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorMacIue': %w", err)
		}
	}

	if a.UeNotReachable != nil {
		object["ueNotReachable"], err = json.Marshal(a.UeNotReachable)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueNotReachable': %w", err)
		}
	}

	if len(a.UpuMacIue) != 0 {
		object["upuMacIue"], err = json.Marshal(a.UpuMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuMacIue': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AcsInfo. Returns the specified
// element and whether it was found
func (a AcsInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcsInfo
func (a *AcsInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcsInfo to handle AdditionalProperties
func (a *AcsInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["acsIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AcsIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'acsIpv4Addr': %w", err)
		}
		delete(object, "acsIpv4Addr")
	}

	if raw, found := object["acsIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AcsIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'acsIpv6Addr': %w", err)
		}
		delete(object, "acsIpv6Addr")
	}

	if raw, found := object["acsUrl"]; found {
		err = json.Unmarshal(raw, &a.AcsUrl)
		if err != nil {
			return fmt.Errorf("error reading 'acsUrl': %w", err)
		}
		delete(object, "acsUrl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcsInfo to handle AdditionalProperties
func (a AcsInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AcsIpv4Addr) != 0 {
		object["acsIpv4Addr"], err = json.Marshal(a.AcsIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsIpv4Addr': %w", err)
		}
	}

	if a.AcsIpv6Addr != nil {
		object["acsIpv6Addr"], err = json.Marshal(a.AcsIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsIpv6Addr': %w", err)
		}
	}

	if a.AcsUrl != nil {
		object["acsUrl"], err = json.Marshal(a.AcsUrl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsUrl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AcsInfoRm. Returns the specified
// element and whether it was found
func (a AcsInfoRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcsInfoRm
func (a *AcsInfoRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcsInfoRm to handle AdditionalProperties
func (a *AcsInfoRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["acsIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AcsIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'acsIpv4Addr': %w", err)
		}
		delete(object, "acsIpv4Addr")
	}

	if raw, found := object["acsIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AcsIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'acsIpv6Addr': %w", err)
		}
		delete(object, "acsIpv6Addr")
	}

	if raw, found := object["acsUrl"]; found {
		err = json.Unmarshal(raw, &a.AcsUrl)
		if err != nil {
			return fmt.Errorf("error reading 'acsUrl': %w", err)
		}
		delete(object, "acsUrl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcsInfoRm to handle AdditionalProperties
func (a AcsInfoRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AcsIpv4Addr) != 0 {
		object["acsIpv4Addr"], err = json.Marshal(a.AcsIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsIpv4Addr': %w", err)
		}
	}

	if a.AcsIpv6Addr != nil {
		object["acsIpv6Addr"], err = json.Marshal(a.AcsIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsIpv6Addr': %w", err)
		}
	}

	if a.AcsUrl != nil {
		object["acsUrl"], err = json.Marshal(a.AcsUrl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsUrl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionInfoEnableUeReachability. Returns the specified
// element and whether it was found
func (a AdditionInfoEnableUeReachability) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionInfoEnableUeReachability
func (a *AdditionInfoEnableUeReachability) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionInfoEnableUeReachability to handle AdditionalProperties
func (a *AdditionInfoEnableUeReachability) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionInfoEnableUeReachability to handle AdditionalProperties
func (a AdditionInfoEnableUeReachability) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalAccessInfo. Returns the specified
// element and whether it was found
func (a AdditionalAccessInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalAccessInfo
func (a *AdditionalAccessInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalAccessInfo to handle AdditionalProperties
func (a *AdditionalAccessInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalAccessInfo to handle AdditionalProperties
func (a AdditionalAccessInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalSnssaiData. Returns the specified
// element and whether it was found
func (a AdditionalSnssaiData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalSnssaiData
func (a *AdditionalSnssaiData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalSnssaiData to handle AdditionalProperties
func (a *AdditionalSnssaiData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["requiredAuthnAuthz"]; found {
		err = json.Unmarshal(raw, &a.RequiredAuthnAuthz)
		if err != nil {
			return fmt.Errorf("error reading 'requiredAuthnAuthz': %w", err)
		}
		delete(object, "requiredAuthnAuthz")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalSnssaiData to handle AdditionalProperties
func (a AdditionalSnssaiData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RequiredAuthnAuthz != nil {
		object["requiredAuthnAuthz"], err = json.Marshal(a.RequiredAuthnAuthz)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requiredAuthnAuthz': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfAckInfo. Returns the specified
// element and whether it was found
func (a AfAckInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfAckInfo
func (a *AfAckInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfAckInfo to handle AdditionalProperties
func (a *AfAckInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ackResult"]; found {
		err = json.Unmarshal(raw, &a.AckResult)
		if err != nil {
			return fmt.Errorf("error reading 'ackResult': %w", err)
		}
		delete(object, "ackResult")
	}

	if raw, found := object["afTransId"]; found {
		err = json.Unmarshal(raw, &a.AfTransId)
		if err != nil {
			return fmt.Errorf("error reading 'afTransId': %w", err)
		}
		delete(object, "afTransId")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfAckInfo to handle AdditionalProperties
func (a AfAckInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ackResult"], err = json.Marshal(a.AckResult)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ackResult': %w", err)
	}

	if a.AfTransId != nil {
		object["afTransId"], err = json.Marshal(a.AfTransId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afTransId': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfEventExposureData. Returns the specified
// element and whether it was found
func (a AfEventExposureData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfEventExposureData
func (a *AfEventExposureData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfEventExposureData to handle AdditionalProperties
func (a *AfEventExposureData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afEvents"]; found {
		err = json.Unmarshal(raw, &a.AfEvents)
		if err != nil {
			return fmt.Errorf("error reading 'afEvents': %w", err)
		}
		delete(object, "afEvents")
	}

	if raw, found := object["afIds"]; found {
		err = json.Unmarshal(raw, &a.AfIds)
		if err != nil {
			return fmt.Errorf("error reading 'afIds': %w", err)
		}
		delete(object, "afIds")
	}

	if raw, found := object["appIds"]; found {
		err = json.Unmarshal(raw, &a.AppIds)
		if err != nil {
			return fmt.Errorf("error reading 'appIds': %w", err)
		}
		delete(object, "appIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfEventExposureData to handle AdditionalProperties
func (a AfEventExposureData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afEvents"], err = json.Marshal(a.AfEvents)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afEvents': %w", err)
	}

	if len(a.AfIds) != 0 {
		object["afIds"], err = json.Marshal(a.AfIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afIds': %w", err)
		}
	}

	if len(a.AppIds) != 0 {
		object["appIds"], err = json.Marshal(a.AppIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfEventNotification. Returns the specified
// element and whether it was found
func (a AfEventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfEventNotification
func (a *AfEventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfEventNotification to handle AdditionalProperties
func (a *AfEventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfEventNotification to handle AdditionalProperties
func (a AfEventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfEventSubscription. Returns the specified
// element and whether it was found
func (a AfEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfEventSubscription
func (a *AfEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfEventSubscription to handle AdditionalProperties
func (a *AfEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["notifMethod"]; found {
		err = json.Unmarshal(raw, &a.NotifMethod)
		if err != nil {
			return fmt.Errorf("error reading 'notifMethod': %w", err)
		}
		delete(object, "notifMethod")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["waitTime"]; found {
		err = json.Unmarshal(raw, &a.WaitTime)
		if err != nil {
			return fmt.Errorf("error reading 'waitTime': %w", err)
		}
		delete(object, "waitTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfEventSubscription to handle AdditionalProperties
func (a AfEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if a.NotifMethod != nil {
		object["notifMethod"], err = json.Marshal(a.NotifMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifMethod': %w", err)
		}
	}

	if a.RepPeriod != nil {
		object["repPeriod"], err = json.Marshal(a.RepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
		}
	}

	if a.WaitTime != nil {
		object["waitTime"], err = json.Marshal(a.WaitTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'waitTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfExternal. Returns the specified
// element and whether it was found
func (a AfExternal) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfExternal
func (a *AfExternal) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfExternal to handle AdditionalProperties
func (a *AfExternal) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfExternal to handle AdditionalProperties
func (a AfExternal) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfResultInfo. Returns the specified
// element and whether it was found
func (a AfResultInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfResultInfo
func (a *AfResultInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfResultInfo to handle AdditionalProperties
func (a *AfResultInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afStatus"]; found {
		err = json.Unmarshal(raw, &a.AfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'afStatus': %w", err)
		}
		delete(object, "afStatus")
	}

	if raw, found := object["trafficRoute"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoute)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoute': %w", err)
		}
		delete(object, "trafficRoute")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfResultInfo to handle AdditionalProperties
func (a AfResultInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afStatus"], err = json.Marshal(a.AfStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afStatus': %w", err)
	}

	object["trafficRoute"], err = json.Marshal(a.TrafficRoute)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trafficRoute': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfRoutingRequirement. Returns the specified
// element and whether it was found
func (a AfRoutingRequirement) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfRoutingRequirement
func (a *AfRoutingRequirement) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfRoutingRequirement to handle AdditionalProperties
func (a *AfRoutingRequirement) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["appReloc"]; found {
		err = json.Unmarshal(raw, &a.AppReloc)
		if err != nil {
			return fmt.Errorf("error reading 'appReloc': %w", err)
		}
		delete(object, "appReloc")
	}

	if raw, found := object["routeToLocs"]; found {
		err = json.Unmarshal(raw, &a.RouteToLocs)
		if err != nil {
			return fmt.Errorf("error reading 'routeToLocs': %w", err)
		}
		delete(object, "routeToLocs")
	}

	if raw, found := object["spVal"]; found {
		err = json.Unmarshal(raw, &a.SpVal)
		if err != nil {
			return fmt.Errorf("error reading 'spVal': %w", err)
		}
		delete(object, "spVal")
	}

	if raw, found := object["tempVals"]; found {
		err = json.Unmarshal(raw, &a.TempVals)
		if err != nil {
			return fmt.Errorf("error reading 'tempVals': %w", err)
		}
		delete(object, "tempVals")
	}

	if raw, found := object["upPathChgSub"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgSub)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgSub': %w", err)
		}
		delete(object, "upPathChgSub")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfRoutingRequirement to handle AdditionalProperties
func (a AfRoutingRequirement) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AppReloc != nil {
		object["appReloc"], err = json.Marshal(a.AppReloc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloc': %w", err)
		}
	}

	if len(a.RouteToLocs) != 0 {
		object["routeToLocs"], err = json.Marshal(a.RouteToLocs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routeToLocs': %w", err)
		}
	}

	if a.SpVal != nil {
		object["spVal"], err = json.Marshal(a.SpVal)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'spVal': %w", err)
		}
	}

	if len(a.TempVals) != 0 {
		object["tempVals"], err = json.Marshal(a.TempVals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tempVals': %w", err)
		}
	}

	object["upPathChgSub"], err = json.Marshal(a.UpPathChgSub)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upPathChgSub': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfRoutingRequirementRm. Returns the specified
// element and whether it was found
func (a AfRoutingRequirementRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfRoutingRequirementRm
func (a *AfRoutingRequirementRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfRoutingRequirementRm to handle AdditionalProperties
func (a *AfRoutingRequirementRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["appReloc"]; found {
		err = json.Unmarshal(raw, &a.AppReloc)
		if err != nil {
			return fmt.Errorf("error reading 'appReloc': %w", err)
		}
		delete(object, "appReloc")
	}

	if raw, found := object["routeToLocs"]; found {
		err = json.Unmarshal(raw, &a.RouteToLocs)
		if err != nil {
			return fmt.Errorf("error reading 'routeToLocs': %w", err)
		}
		delete(object, "routeToLocs")
	}

	if raw, found := object["spVal"]; found {
		err = json.Unmarshal(raw, &a.SpVal)
		if err != nil {
			return fmt.Errorf("error reading 'spVal': %w", err)
		}
		delete(object, "spVal")
	}

	if raw, found := object["tempVals"]; found {
		err = json.Unmarshal(raw, &a.TempVals)
		if err != nil {
			return fmt.Errorf("error reading 'tempVals': %w", err)
		}
		delete(object, "tempVals")
	}

	if raw, found := object["upPathChgSub"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgSub)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgSub': %w", err)
		}
		delete(object, "upPathChgSub")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfRoutingRequirementRm to handle AdditionalProperties
func (a AfRoutingRequirementRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
	}

	if a.AppReloc != nil {
		object["appReloc"], err = json.Marshal(a.AppReloc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloc': %w", err)
		}
	}

	object["routeToLocs"], err = json.Marshal(a.RouteToLocs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'routeToLocs': %w", err)
	}

	object["spVal"], err = json.Marshal(a.SpVal)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'spVal': %w", err)
	}

	object["tempVals"], err = json.Marshal(a.TempVals)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tempVals': %w", err)
	}

	object["upPathChgSub"], err = json.Marshal(a.UpPathChgSub)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upPathChgSub': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AllowedMtcProviderInfo. Returns the specified
// element and whether it was found
func (a AllowedMtcProviderInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AllowedMtcProviderInfo
func (a *AllowedMtcProviderInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AllowedMtcProviderInfo to handle AdditionalProperties
func (a *AllowedMtcProviderInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AllowedMtcProviderInfo to handle AdditionalProperties
func (a AllowedMtcProviderInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AllowedNssai. Returns the specified
// element and whether it was found
func (a AllowedNssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AllowedNssai
func (a *AllowedNssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AllowedNssai to handle AdditionalProperties
func (a *AllowedNssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["allowedSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnssaiList': %w", err)
		}
		delete(object, "allowedSnssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AllowedNssai to handle AdditionalProperties
func (a AllowedNssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	object["allowedSnssaiList"], err = json.Marshal(a.AllowedSnssaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedSnssaiList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AllowedSnssai. Returns the specified
// element and whether it was found
func (a AllowedSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AllowedSnssai
func (a *AllowedSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AllowedSnssai to handle AdditionalProperties
func (a *AllowedSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedSnssai"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnssai': %w", err)
		}
		delete(object, "allowedSnssai")
	}

	if raw, found := object["mappedHomeSnssai"]; found {
		err = json.Unmarshal(raw, &a.MappedHomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappedHomeSnssai': %w", err)
		}
		delete(object, "mappedHomeSnssai")
	}

	if raw, found := object["nsiInformationList"]; found {
		err = json.Unmarshal(raw, &a.NsiInformationList)
		if err != nil {
			return fmt.Errorf("error reading 'nsiInformationList': %w", err)
		}
		delete(object, "nsiInformationList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AllowedSnssai to handle AdditionalProperties
func (a AllowedSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedSnssai"], err = json.Marshal(a.AllowedSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedSnssai': %w", err)
	}

	if a.MappedHomeSnssai != nil {
		object["mappedHomeSnssai"], err = json.Marshal(a.MappedHomeSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappedHomeSnssai': %w", err)
		}
	}

	if len(a.NsiInformationList) != 0 {
		object["nsiInformationList"], err = json.Marshal(a.NsiInformationList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiInformationList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlternativeQosProfile. Returns the specified
// element and whether it was found
func (a AlternativeQosProfile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlternativeQosProfile
func (a *AlternativeQosProfile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlternativeQosProfile to handle AdditionalProperties
func (a *AlternativeQosProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["guaFbrDl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrDl': %w", err)
		}
		delete(object, "guaFbrDl")
	}

	if raw, found := object["guaFbrUl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrUl': %w", err)
		}
		delete(object, "guaFbrUl")
	}

	if raw, found := object["index"]; found {
		err = json.Unmarshal(raw, &a.Index)
		if err != nil {
			return fmt.Errorf("error reading 'index': %w", err)
		}
		delete(object, "index")
	}

	if raw, found := object["packetDelayBudget"]; found {
		err = json.Unmarshal(raw, &a.PacketDelayBudget)
		if err != nil {
			return fmt.Errorf("error reading 'packetDelayBudget': %w", err)
		}
		delete(object, "packetDelayBudget")
	}

	if raw, found := object["packetErrRate"]; found {
		err = json.Unmarshal(raw, &a.PacketErrRate)
		if err != nil {
			return fmt.Errorf("error reading 'packetErrRate': %w", err)
		}
		delete(object, "packetErrRate")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlternativeQosProfile to handle AdditionalProperties
func (a AlternativeQosProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GuaFbrDl) != 0 {
		object["guaFbrDl"], err = json.Marshal(a.GuaFbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrDl': %w", err)
		}
	}

	if len(a.GuaFbrUl) != 0 {
		object["guaFbrUl"], err = json.Marshal(a.GuaFbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrUl': %w", err)
		}
	}

	object["index"], err = json.Marshal(a.Index)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'index': %w", err)
	}

	if a.PacketDelayBudget != 0 {
		object["packetDelayBudget"], err = json.Marshal(a.PacketDelayBudget)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packetDelayBudget': %w", err)
		}
	}

	if len(a.PacketErrRate) != 0 {
		object["packetErrRate"], err = json.Marshal(a.PacketErrRate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packetErrRate': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmPolicyData. Returns the specified
// element and whether it was found
func (a AmPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmPolicyData
func (a *AmPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmPolicyData to handle AdditionalProperties
func (a *AmPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["praInfos"]; found {
		err = json.Unmarshal(raw, &a.PraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'praInfos': %w", err)
		}
		delete(object, "praInfos")
	}

	if raw, found := object["subscCats"]; found {
		err = json.Unmarshal(raw, &a.SubscCats)
		if err != nil {
			return fmt.Errorf("error reading 'subscCats': %w", err)
		}
		delete(object, "subscCats")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmPolicyData to handle AdditionalProperties
func (a AmPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PraInfos != nil {
		object["praInfos"], err = json.Marshal(a.PraInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInfos': %w", err)
		}
	}

	if len(a.SubscCats) != 0 {
		object["subscCats"], err = json.Marshal(a.SubscCats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscCats': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ambr. Returns the specified
// element and whether it was found
func (a Ambr) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ambr
func (a *Ambr) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ambr to handle AdditionalProperties
func (a *Ambr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return fmt.Errorf("error reading 'downlink': %w", err)
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return fmt.Errorf("error reading 'uplink': %w", err)
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ambr to handle AdditionalProperties
func (a Ambr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlink"], err = json.Marshal(a.Downlink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlink': %w", err)
	}

	object["uplink"], err = json.Marshal(a.Uplink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplink': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmbrRm. Returns the specified
// element and whether it was found
func (a AmbrRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmbrRm
func (a *AmbrRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmbrRm to handle AdditionalProperties
func (a *AmbrRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return fmt.Errorf("error reading 'downlink': %w", err)
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return fmt.Errorf("error reading 'uplink': %w", err)
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmbrRm to handle AdditionalProperties
func (a AmbrRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlink"], err = json.Marshal(a.Downlink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlink': %w", err)
	}

	object["uplink"], err = json.Marshal(a.Uplink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplink': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Amf3GppAccessRegistration. Returns the specified
// element and whether it was found
func (a Amf3GppAccessRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Amf3GppAccessRegistration
func (a *Amf3GppAccessRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Amf3GppAccessRegistration to handle AdditionalProperties
func (a *Amf3GppAccessRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfEeSubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.AmfEeSubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'amfEeSubscriptionId': %w", err)
		}
		delete(object, "amfEeSubscriptionId")
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["amfServiceNameDereg"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNameDereg)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNameDereg': %w", err)
		}
		delete(object, "amfServiceNameDereg")
	}

	if raw, found := object["amfServiceNamePcscfRest"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNamePcscfRest)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNamePcscfRest': %w", err)
		}
		delete(object, "amfServiceNamePcscfRest")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["deregCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.DeregCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'deregCallbackUri': %w", err)
		}
		delete(object, "deregCallbackUri")
	}

	if raw, found := object["drFlag"]; found {
		err = json.Unmarshal(raw, &a.DrFlag)
		if err != nil {
			return fmt.Errorf("error reading 'drFlag': %w", err)
		}
		delete(object, "drFlag")
	}

	if raw, found := object["epsInterworkingInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInfo': %w", err)
		}
		delete(object, "epsInterworkingInfo")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["initialRegistrationInd"]; found {
		err = json.Unmarshal(raw, &a.InitialRegistrationInd)
		if err != nil {
			return fmt.Errorf("error reading 'initialRegistrationInd': %w", err)
		}
		delete(object, "initialRegistrationInd")
	}

	if raw, found := object["noEeSubscriptionInd"]; found {
		err = json.Unmarshal(raw, &a.NoEeSubscriptionInd)
		if err != nil {
			return fmt.Errorf("error reading 'noEeSubscriptionInd': %w", err)
		}
		delete(object, "noEeSubscriptionInd")
	}

	if raw, found := object["pcscfRestorationCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.PcscfRestorationCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfRestorationCallbackUri': %w", err)
		}
		delete(object, "pcscfRestorationCallbackUri")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueSrvccCapability"]; found {
		err = json.Unmarshal(raw, &a.UeSrvccCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueSrvccCapability': %w", err)
		}
		delete(object, "ueSrvccCapability")
	}

	if raw, found := object["urrpIndicator"]; found {
		err = json.Unmarshal(raw, &a.UrrpIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'urrpIndicator': %w", err)
		}
		delete(object, "urrpIndicator")
	}

	if raw, found := object["vgmlcAddress"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddress)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddress': %w", err)
		}
		delete(object, "vgmlcAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Amf3GppAccessRegistration to handle AdditionalProperties
func (a Amf3GppAccessRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfEeSubscriptionId != nil {
		object["amfEeSubscriptionId"], err = json.Marshal(a.AmfEeSubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfEeSubscriptionId': %w", err)
		}
	}

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.AmfServiceNameDereg != nil {
		object["amfServiceNameDereg"], err = json.Marshal(a.AmfServiceNameDereg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNameDereg': %w", err)
		}
	}

	if a.AmfServiceNamePcscfRest != nil {
		object["amfServiceNamePcscfRest"], err = json.Marshal(a.AmfServiceNamePcscfRest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNamePcscfRest': %w", err)
		}
	}

	if len(a.BackupAmfInfo) != 0 {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	object["deregCallbackUri"], err = json.Marshal(a.DeregCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregCallbackUri': %w", err)
	}

	if a.DrFlag != nil {
		object["drFlag"], err = json.Marshal(a.DrFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'drFlag': %w", err)
		}
	}

	if a.EpsInterworkingInfo != nil {
		object["epsInterworkingInfo"], err = json.Marshal(a.EpsInterworkingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInfo': %w", err)
		}
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	if a.ImsVoPs != nil {
		object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
		}
	}

	if a.InitialRegistrationInd != nil {
		object["initialRegistrationInd"], err = json.Marshal(a.InitialRegistrationInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'initialRegistrationInd': %w", err)
		}
	}

	if a.NoEeSubscriptionInd != nil {
		object["noEeSubscriptionInd"], err = json.Marshal(a.NoEeSubscriptionInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noEeSubscriptionInd': %w", err)
		}
	}

	if a.PcscfRestorationCallbackUri != nil {
		object["pcscfRestorationCallbackUri"], err = json.Marshal(a.PcscfRestorationCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfRestorationCallbackUri': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	object["ratType"], err = json.Marshal(a.RatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UeSrvccCapability != nil {
		object["ueSrvccCapability"], err = json.Marshal(a.UeSrvccCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueSrvccCapability': %w", err)
		}
	}

	if a.UrrpIndicator != nil {
		object["urrpIndicator"], err = json.Marshal(a.UrrpIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urrpIndicator': %w", err)
		}
	}

	if a.VgmlcAddress != nil {
		object["vgmlcAddress"], err = json.Marshal(a.VgmlcAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Amf3GppAccessRegistrationModification. Returns the specified
// element and whether it was found
func (a Amf3GppAccessRegistrationModification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Amf3GppAccessRegistrationModification
func (a *Amf3GppAccessRegistrationModification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Amf3GppAccessRegistrationModification to handle AdditionalProperties
func (a *Amf3GppAccessRegistrationModification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["epsInterworkingInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInfo': %w", err)
		}
		delete(object, "epsInterworkingInfo")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if raw, found := object["ueSrvccCapability"]; found {
		err = json.Unmarshal(raw, &a.UeSrvccCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueSrvccCapability': %w", err)
		}
		delete(object, "ueSrvccCapability")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Amf3GppAccessRegistrationModification to handle AdditionalProperties
func (a Amf3GppAccessRegistrationModification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackupAmfInfo != nil {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.EpsInterworkingInfo != nil {
		object["epsInterworkingInfo"], err = json.Marshal(a.EpsInterworkingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInfo': %w", err)
		}
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	if a.ImsVoPs != nil {
		object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	object["ueSrvccCapability"], err = json.Marshal(a.UeSrvccCapability)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueSrvccCapability': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfCond. Returns the specified
// element and whether it was found
func (a AmfCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfCond
func (a *AmfCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfCond to handle AdditionalProperties
func (a *AmfCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfRegionId"]; found {
		err = json.Unmarshal(raw, &a.AmfRegionId)
		if err != nil {
			return fmt.Errorf("error reading 'amfRegionId': %w", err)
		}
		delete(object, "amfRegionId")
	}

	if raw, found := object["amfSetId"]; found {
		err = json.Unmarshal(raw, &a.AmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'amfSetId': %w", err)
		}
		delete(object, "amfSetId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfCond to handle AdditionalProperties
func (a AmfCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AmfRegionId) != 0 {
		object["amfRegionId"], err = json.Marshal(a.AmfRegionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfRegionId': %w", err)
		}
	}

	if len(a.AmfSetId) != 0 {
		object["amfSetId"], err = json.Marshal(a.AmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfSetId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfCreateEventSubscription. Returns the specified
// element and whether it was found
func (a AmfCreateEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfCreateEventSubscription
func (a *AmfCreateEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfCreateEventSubscription to handle AdditionalProperties
func (a *AmfCreateEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["subscription"]; found {
		err = json.Unmarshal(raw, &a.Subscription)
		if err != nil {
			return fmt.Errorf("error reading 'subscription': %w", err)
		}
		delete(object, "subscription")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfCreateEventSubscription to handle AdditionalProperties
func (a AmfCreateEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	object["subscription"], err = json.Marshal(a.Subscription)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscription': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfCreatedEventSubscription. Returns the specified
// element and whether it was found
func (a AmfCreatedEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfCreatedEventSubscription
func (a *AmfCreatedEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfCreatedEventSubscription to handle AdditionalProperties
func (a *AmfCreatedEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["reportList"]; found {
		err = json.Unmarshal(raw, &a.ReportList)
		if err != nil {
			return fmt.Errorf("error reading 'reportList': %w", err)
		}
		delete(object, "reportList")
	}

	if raw, found := object["subscription"]; found {
		err = json.Unmarshal(raw, &a.Subscription)
		if err != nil {
			return fmt.Errorf("error reading 'subscription': %w", err)
		}
		delete(object, "subscription")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfCreatedEventSubscription to handle AdditionalProperties
func (a AmfCreatedEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ReportList) != 0 {
		object["reportList"], err = json.Marshal(a.ReportList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportList': %w", err)
		}
	}

	object["subscription"], err = json.Marshal(a.Subscription)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscription': %w", err)
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfDeregInfo. Returns the specified
// element and whether it was found
func (a AmfDeregInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfDeregInfo
func (a *AmfDeregInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfDeregInfo to handle AdditionalProperties
func (a *AmfDeregInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["deregReason"]; found {
		err = json.Unmarshal(raw, &a.DeregReason)
		if err != nil {
			return fmt.Errorf("error reading 'deregReason': %w", err)
		}
		delete(object, "deregReason")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfDeregInfo to handle AdditionalProperties
func (a AmfDeregInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["deregReason"], err = json.Marshal(a.DeregReason)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregReason': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEvent. Returns the specified
// element and whether it was found
func (a AmfEvent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEvent
func (a *AmfEvent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEvent to handle AdditionalProperties
func (a *AmfEvent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areaList"]; found {
		err = json.Unmarshal(raw, &a.AreaList)
		if err != nil {
			return fmt.Errorf("error reading 'areaList': %w", err)
		}
		delete(object, "areaList")
	}

	if raw, found := object["idleStatusInd"]; found {
		err = json.Unmarshal(raw, &a.IdleStatusInd)
		if err != nil {
			return fmt.Errorf("error reading 'idleStatusInd': %w", err)
		}
		delete(object, "idleStatusInd")
	}

	if raw, found := object["immediateFlag"]; found {
		err = json.Unmarshal(raw, &a.ImmediateFlag)
		if err != nil {
			return fmt.Errorf("error reading 'immediateFlag': %w", err)
		}
		delete(object, "immediateFlag")
	}

	if raw, found := object["locationFilterList"]; found {
		err = json.Unmarshal(raw, &a.LocationFilterList)
		if err != nil {
			return fmt.Errorf("error reading 'locationFilterList': %w", err)
		}
		delete(object, "locationFilterList")
	}

	if raw, found := object["maxReports"]; found {
		err = json.Unmarshal(raw, &a.MaxReports)
		if err != nil {
			return fmt.Errorf("error reading 'maxReports': %w", err)
		}
		delete(object, "maxReports")
	}

	if raw, found := object["maxResponseTime"]; found {
		err = json.Unmarshal(raw, &a.MaxResponseTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxResponseTime': %w", err)
		}
		delete(object, "maxResponseTime")
	}

	if raw, found := object["nextPeriodicReportTime"]; found {
		err = json.Unmarshal(raw, &a.NextPeriodicReportTime)
		if err != nil {
			return fmt.Errorf("error reading 'nextPeriodicReportTime': %w", err)
		}
		delete(object, "nextPeriodicReportTime")
	}

	if raw, found := object["reachabilityFilter"]; found {
		err = json.Unmarshal(raw, &a.ReachabilityFilter)
		if err != nil {
			return fmt.Errorf("error reading 'reachabilityFilter': %w", err)
		}
		delete(object, "reachabilityFilter")
	}

	if raw, found := object["refId"]; found {
		err = json.Unmarshal(raw, &a.RefId)
		if err != nil {
			return fmt.Errorf("error reading 'refId': %w", err)
		}
		delete(object, "refId")
	}

	if raw, found := object["reportUeReachable"]; found {
		err = json.Unmarshal(raw, &a.ReportUeReachable)
		if err != nil {
			return fmt.Errorf("error reading 'reportUeReachable': %w", err)
		}
		delete(object, "reportUeReachable")
	}

	if raw, found := object["trafficDescriptorList"]; found {
		err = json.Unmarshal(raw, &a.TrafficDescriptorList)
		if err != nil {
			return fmt.Errorf("error reading 'trafficDescriptorList': %w", err)
		}
		delete(object, "trafficDescriptorList")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEvent to handle AdditionalProperties
func (a AmfEvent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AreaList) != 0 {
		object["areaList"], err = json.Marshal(a.AreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaList': %w", err)
		}
	}

	if a.IdleStatusInd != nil {
		object["idleStatusInd"], err = json.Marshal(a.IdleStatusInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'idleStatusInd': %w", err)
		}
	}

	if a.ImmediateFlag != nil {
		object["immediateFlag"], err = json.Marshal(a.ImmediateFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immediateFlag': %w", err)
		}
	}

	if len(a.LocationFilterList) != 0 {
		object["locationFilterList"], err = json.Marshal(a.LocationFilterList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationFilterList': %w", err)
		}
	}

	if a.MaxReports != nil {
		object["maxReports"], err = json.Marshal(a.MaxReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxReports': %w", err)
		}
	}

	if a.MaxResponseTime != nil {
		object["maxResponseTime"], err = json.Marshal(a.MaxResponseTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxResponseTime': %w", err)
		}
	}

	if a.NextPeriodicReportTime != nil {
		object["nextPeriodicReportTime"], err = json.Marshal(a.NextPeriodicReportTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nextPeriodicReportTime': %w", err)
		}
	}

	if a.ReachabilityFilter != nil {
		object["reachabilityFilter"], err = json.Marshal(a.ReachabilityFilter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachabilityFilter': %w", err)
		}
	}

	if a.RefId != nil {
		object["refId"], err = json.Marshal(a.RefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refId': %w", err)
		}
	}

	if a.ReportUeReachable != nil {
		object["reportUeReachable"], err = json.Marshal(a.ReportUeReachable)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportUeReachable': %w", err)
		}
	}

	if len(a.TrafficDescriptorList) != 0 {
		object["trafficDescriptorList"], err = json.Marshal(a.TrafficDescriptorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficDescriptorList': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventArea. Returns the specified
// element and whether it was found
func (a AmfEventArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventArea
func (a *AmfEventArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventArea to handle AdditionalProperties
func (a *AmfEventArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ladnInfo"]; found {
		err = json.Unmarshal(raw, &a.LadnInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ladnInfo': %w", err)
		}
		delete(object, "ladnInfo")
	}

	if raw, found := object["nsiId"]; found {
		err = json.Unmarshal(raw, &a.NsiId)
		if err != nil {
			return fmt.Errorf("error reading 'nsiId': %w", err)
		}
		delete(object, "nsiId")
	}

	if raw, found := object["presenceInfo"]; found {
		err = json.Unmarshal(raw, &a.PresenceInfo)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInfo': %w", err)
		}
		delete(object, "presenceInfo")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventArea to handle AdditionalProperties
func (a AmfEventArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.LadnInfo != nil {
		object["ladnInfo"], err = json.Marshal(a.LadnInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ladnInfo': %w", err)
		}
	}

	if a.NsiId != nil {
		object["nsiId"], err = json.Marshal(a.NsiId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiId': %w", err)
		}
	}

	if a.PresenceInfo != nil {
		object["presenceInfo"], err = json.Marshal(a.PresenceInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInfo': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventMode. Returns the specified
// element and whether it was found
func (a AmfEventMode) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventMode
func (a *AmfEventMode) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventMode to handle AdditionalProperties
func (a *AmfEventMode) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["maxReports"]; found {
		err = json.Unmarshal(raw, &a.MaxReports)
		if err != nil {
			return fmt.Errorf("error reading 'maxReports': %w", err)
		}
		delete(object, "maxReports")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["sampRatio"]; found {
		err = json.Unmarshal(raw, &a.SampRatio)
		if err != nil {
			return fmt.Errorf("error reading 'sampRatio': %w", err)
		}
		delete(object, "sampRatio")
	}

	if raw, found := object["trigger"]; found {
		err = json.Unmarshal(raw, &a.Trigger)
		if err != nil {
			return fmt.Errorf("error reading 'trigger': %w", err)
		}
		delete(object, "trigger")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventMode to handle AdditionalProperties
func (a AmfEventMode) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if a.MaxReports != nil {
		object["maxReports"], err = json.Marshal(a.MaxReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxReports': %w", err)
		}
	}

	if a.RepPeriod != nil {
		object["repPeriod"], err = json.Marshal(a.RepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
		}
	}

	if a.SampRatio != 0 {
		object["sampRatio"], err = json.Marshal(a.SampRatio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sampRatio': %w", err)
		}
	}

	object["trigger"], err = json.Marshal(a.Trigger)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trigger': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventNotification. Returns the specified
// element and whether it was found
func (a AmfEventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventNotification
func (a *AmfEventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventNotification to handle AdditionalProperties
func (a *AmfEventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventSubsSyncInfo"]; found {
		err = json.Unmarshal(raw, &a.EventSubsSyncInfo)
		if err != nil {
			return fmt.Errorf("error reading 'eventSubsSyncInfo': %w", err)
		}
		delete(object, "eventSubsSyncInfo")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["reportList"]; found {
		err = json.Unmarshal(raw, &a.ReportList)
		if err != nil {
			return fmt.Errorf("error reading 'reportList': %w", err)
		}
		delete(object, "reportList")
	}

	if raw, found := object["subsChangeNotifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyCorrelationId': %w", err)
		}
		delete(object, "subsChangeNotifyCorrelationId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventNotification to handle AdditionalProperties
func (a AmfEventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EventSubsSyncInfo != nil {
		object["eventSubsSyncInfo"], err = json.Marshal(a.EventSubsSyncInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventSubsSyncInfo': %w", err)
		}
	}

	if a.NotifyCorrelationId != nil {
		object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
		}
	}

	if len(a.ReportList) != 0 {
		object["reportList"], err = json.Marshal(a.ReportList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportList': %w", err)
		}
	}

	if a.SubsChangeNotifyCorrelationId != nil {
		object["subsChangeNotifyCorrelationId"], err = json.Marshal(a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyCorrelationId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventReport. Returns the specified
// element and whether it was found
func (a AmfEventReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventReport
func (a *AmfEventReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventReport to handle AdditionalProperties
func (a *AmfEventReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gsUserStateList"]; found {
		err = json.Unmarshal(raw, &a.N5gsUserStateList)
		if err != nil {
			return fmt.Errorf("error reading '5gsUserStateList': %w", err)
		}
		delete(object, "5gsUserStateList")
	}

	if raw, found := object["accessTypeList"]; found {
		err = json.Unmarshal(raw, &a.AccessTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'accessTypeList': %w", err)
		}
		delete(object, "accessTypeList")
	}

	if raw, found := object["additionalLocation"]; found {
		err = json.Unmarshal(raw, &a.AdditionalLocation)
		if err != nil {
			return fmt.Errorf("error reading 'additionalLocation': %w", err)
		}
		delete(object, "additionalLocation")
	}

	if raw, found := object["anyUe"]; found {
		err = json.Unmarshal(raw, &a.AnyUe)
		if err != nil {
			return fmt.Errorf("error reading 'anyUe': %w", err)
		}
		delete(object, "anyUe")
	}

	if raw, found := object["areaList"]; found {
		err = json.Unmarshal(raw, &a.AreaList)
		if err != nil {
			return fmt.Errorf("error reading 'areaList': %w", err)
		}
		delete(object, "areaList")
	}

	if raw, found := object["cmInfoList"]; found {
		err = json.Unmarshal(raw, &a.CmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'cmInfoList': %w", err)
		}
		delete(object, "cmInfoList")
	}

	if raw, found := object["commFailure"]; found {
		err = json.Unmarshal(raw, &a.CommFailure)
		if err != nil {
			return fmt.Errorf("error reading 'commFailure': %w", err)
		}
		delete(object, "commFailure")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["idleStatusIndication"]; found {
		err = json.Unmarshal(raw, &a.IdleStatusIndication)
		if err != nil {
			return fmt.Errorf("error reading 'idleStatusIndication': %w", err)
		}
		delete(object, "idleStatusIndication")
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if raw, found := object["lossOfConnectReason"]; found {
		err = json.Unmarshal(raw, &a.LossOfConnectReason)
		if err != nil {
			return fmt.Errorf("error reading 'lossOfConnectReason': %w", err)
		}
		delete(object, "lossOfConnectReason")
	}

	if raw, found := object["maxAvailabilityTime"]; found {
		err = json.Unmarshal(raw, &a.MaxAvailabilityTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxAvailabilityTime': %w", err)
		}
		delete(object, "maxAvailabilityTime")
	}

	if raw, found := object["numberOfUes"]; found {
		err = json.Unmarshal(raw, &a.NumberOfUes)
		if err != nil {
			return fmt.Errorf("error reading 'numberOfUes': %w", err)
		}
		delete(object, "numberOfUes")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["reachability"]; found {
		err = json.Unmarshal(raw, &a.Reachability)
		if err != nil {
			return fmt.Errorf("error reading 'reachability': %w", err)
		}
		delete(object, "reachability")
	}

	if raw, found := object["refId"]; found {
		err = json.Unmarshal(raw, &a.RefId)
		if err != nil {
			return fmt.Errorf("error reading 'refId': %w", err)
		}
		delete(object, "refId")
	}

	if raw, found := object["registrationNumber"]; found {
		err = json.Unmarshal(raw, &a.RegistrationNumber)
		if err != nil {
			return fmt.Errorf("error reading 'registrationNumber': %w", err)
		}
		delete(object, "registrationNumber")
	}

	if raw, found := object["rmInfoList"]; found {
		err = json.Unmarshal(raw, &a.RmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'rmInfoList': %w", err)
		}
		delete(object, "rmInfoList")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if raw, found := object["timezone"]; found {
		err = json.Unmarshal(raw, &a.Timezone)
		if err != nil {
			return fmt.Errorf("error reading 'timezone': %w", err)
		}
		delete(object, "timezone")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["typeCode"]; found {
		err = json.Unmarshal(raw, &a.TypeCode)
		if err != nil {
			return fmt.Errorf("error reading 'typeCode': %w", err)
		}
		delete(object, "typeCode")
	}

	if raw, found := object["ueIdExt"]; found {
		err = json.Unmarshal(raw, &a.UeIdExt)
		if err != nil {
			return fmt.Errorf("error reading 'ueIdExt': %w", err)
		}
		delete(object, "ueIdExt")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventReport to handle AdditionalProperties
func (a AmfEventReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.N5gsUserStateList) != 0 {
		object["5gsUserStateList"], err = json.Marshal(a.N5gsUserStateList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gsUserStateList': %w", err)
		}
	}

	if len(a.AccessTypeList) != 0 {
		object["accessTypeList"], err = json.Marshal(a.AccessTypeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTypeList': %w", err)
		}
	}

	if a.AdditionalLocation != nil {
		object["additionalLocation"], err = json.Marshal(a.AdditionalLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalLocation': %w", err)
		}
	}

	if a.AnyUe != nil {
		object["anyUe"], err = json.Marshal(a.AnyUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUe': %w", err)
		}
	}

	if len(a.AreaList) != 0 {
		object["areaList"], err = json.Marshal(a.AreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaList': %w", err)
		}
	}

	if len(a.CmInfoList) != 0 {
		object["cmInfoList"], err = json.Marshal(a.CmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cmInfoList': %w", err)
		}
	}

	if a.CommFailure != nil {
		object["commFailure"], err = json.Marshal(a.CommFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commFailure': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.IdleStatusIndication != nil {
		object["idleStatusIndication"], err = json.Marshal(a.IdleStatusIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'idleStatusIndication': %w", err)
		}
	}

	if a.Location != nil {
		object["location"], err = json.Marshal(a.Location)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'location': %w", err)
		}
	}

	if a.LossOfConnectReason != nil {
		object["lossOfConnectReason"], err = json.Marshal(a.LossOfConnectReason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lossOfConnectReason': %w", err)
		}
	}

	if a.MaxAvailabilityTime != nil {
		object["maxAvailabilityTime"], err = json.Marshal(a.MaxAvailabilityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxAvailabilityTime': %w", err)
		}
	}

	if a.NumberOfUes != nil {
		object["numberOfUes"], err = json.Marshal(a.NumberOfUes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numberOfUes': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.Reachability != nil {
		object["reachability"], err = json.Marshal(a.Reachability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachability': %w", err)
		}
	}

	if a.RefId != nil {
		object["refId"], err = json.Marshal(a.RefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refId': %w", err)
		}
	}

	if a.RegistrationNumber != nil {
		object["registrationNumber"], err = json.Marshal(a.RegistrationNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationNumber': %w", err)
		}
	}

	if len(a.RmInfoList) != 0 {
		object["rmInfoList"], err = json.Marshal(a.RmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rmInfoList': %w", err)
		}
	}

	object["state"], err = json.Marshal(a.State)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'state': %w", err)
	}

	if a.SubscriptionId != nil {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	if a.Timezone != nil {
		object["timezone"], err = json.Marshal(a.Timezone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timezone': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if len(a.TypeCode) != 0 {
		object["typeCode"], err = json.Marshal(a.TypeCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'typeCode': %w", err)
		}
	}

	if len(a.UeIdExt) != 0 {
		object["ueIdExt"], err = json.Marshal(a.UeIdExt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIdExt': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventState. Returns the specified
// element and whether it was found
func (a AmfEventState) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventState
func (a *AmfEventState) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventState to handle AdditionalProperties
func (a *AmfEventState) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["active"]; found {
		err = json.Unmarshal(raw, &a.Active)
		if err != nil {
			return fmt.Errorf("error reading 'active': %w", err)
		}
		delete(object, "active")
	}

	if raw, found := object["remainDuration"]; found {
		err = json.Unmarshal(raw, &a.RemainDuration)
		if err != nil {
			return fmt.Errorf("error reading 'remainDuration': %w", err)
		}
		delete(object, "remainDuration")
	}

	if raw, found := object["remainReports"]; found {
		err = json.Unmarshal(raw, &a.RemainReports)
		if err != nil {
			return fmt.Errorf("error reading 'remainReports': %w", err)
		}
		delete(object, "remainReports")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventState to handle AdditionalProperties
func (a AmfEventState) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["active"], err = json.Marshal(a.Active)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'active': %w", err)
	}

	if a.RemainDuration != nil {
		object["remainDuration"], err = json.Marshal(a.RemainDuration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainDuration': %w", err)
		}
	}

	if a.RemainReports != nil {
		object["remainReports"], err = json.Marshal(a.RemainReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainReports': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventSubsSyncInfo. Returns the specified
// element and whether it was found
func (a AmfEventSubsSyncInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventSubsSyncInfo
func (a *AmfEventSubsSyncInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventSubsSyncInfo to handle AdditionalProperties
func (a *AmfEventSubsSyncInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["subscriptionList"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionList)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionList': %w", err)
		}
		delete(object, "subscriptionList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventSubsSyncInfo to handle AdditionalProperties
func (a AmfEventSubsSyncInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["subscriptionList"], err = json.Marshal(a.SubscriptionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventSubscription. Returns the specified
// element and whether it was found
func (a AmfEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventSubscription
func (a *AmfEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventSubscription to handle AdditionalProperties
func (a *AmfEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anyUE"]; found {
		err = json.Unmarshal(raw, &a.AnyUE)
		if err != nil {
			return fmt.Errorf("error reading 'anyUE': %w", err)
		}
		delete(object, "anyUE")
	}

	if raw, found := object["eventList"]; found {
		err = json.Unmarshal(raw, &a.EventList)
		if err != nil {
			return fmt.Errorf("error reading 'eventList': %w", err)
		}
		delete(object, "eventList")
	}

	if raw, found := object["eventNotifyUri"]; found {
		err = json.Unmarshal(raw, &a.EventNotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'eventNotifyUri': %w", err)
		}
		delete(object, "eventNotifyUri")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["nfId"]; found {
		err = json.Unmarshal(raw, &a.NfId)
		if err != nil {
			return fmt.Errorf("error reading 'nfId': %w", err)
		}
		delete(object, "nfId")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["options"]; found {
		err = json.Unmarshal(raw, &a.Options)
		if err != nil {
			return fmt.Errorf("error reading 'options': %w", err)
		}
		delete(object, "options")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["sourceNfType"]; found {
		err = json.Unmarshal(raw, &a.SourceNfType)
		if err != nil {
			return fmt.Errorf("error reading 'sourceNfType': %w", err)
		}
		delete(object, "sourceNfType")
	}

	if raw, found := object["subsChangeNotifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyCorrelationId': %w", err)
		}
		delete(object, "subsChangeNotifyCorrelationId")
	}

	if raw, found := object["subsChangeNotifyUri"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyUri': %w", err)
		}
		delete(object, "subsChangeNotifyUri")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventSubscription to handle AdditionalProperties
func (a AmfEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnyUE != nil {
		object["anyUE"], err = json.Marshal(a.AnyUE)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUE': %w", err)
		}
	}

	object["eventList"], err = json.Marshal(a.EventList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventList': %w", err)
	}

	object["eventNotifyUri"], err = json.Marshal(a.EventNotifyUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventNotifyUri': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.GroupId) != 0 {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	object["nfId"], err = json.Marshal(a.NfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfId': %w", err)
	}

	object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
	}

	if a.Options != nil {
		object["options"], err = json.Marshal(a.Options)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'options': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.SourceNfType != nil {
		object["sourceNfType"], err = json.Marshal(a.SourceNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceNfType': %w", err)
		}
	}

	if a.SubsChangeNotifyCorrelationId != nil {
		object["subsChangeNotifyCorrelationId"], err = json.Marshal(a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyCorrelationId': %w", err)
		}
	}

	if a.SubsChangeNotifyUri != nil {
		object["subsChangeNotifyUri"], err = json.Marshal(a.SubsChangeNotifyUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyUri': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventSubscriptionAddInfo. Returns the specified
// element and whether it was found
func (a AmfEventSubscriptionAddInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventSubscriptionAddInfo
func (a *AmfEventSubscriptionAddInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventSubscriptionAddInfo to handle AdditionalProperties
func (a *AmfEventSubscriptionAddInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aoiStateList"]; found {
		err = json.Unmarshal(raw, &a.AoiStateList)
		if err != nil {
			return fmt.Errorf("error reading 'aoiStateList': %w", err)
		}
		delete(object, "aoiStateList")
	}

	if raw, found := object["bindingInfo"]; found {
		err = json.Unmarshal(raw, &a.BindingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'bindingInfo': %w", err)
		}
		delete(object, "bindingInfo")
	}

	if raw, found := object["eventSyncInd"]; found {
		err = json.Unmarshal(raw, &a.EventSyncInd)
		if err != nil {
			return fmt.Errorf("error reading 'eventSyncInd': %w", err)
		}
		delete(object, "eventSyncInd")
	}

	if raw, found := object["subscribingNfType"]; found {
		err = json.Unmarshal(raw, &a.SubscribingNfType)
		if err != nil {
			return fmt.Errorf("error reading 'subscribingNfType': %w", err)
		}
		delete(object, "subscribingNfType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventSubscriptionAddInfo to handle AdditionalProperties
func (a AmfEventSubscriptionAddInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AoiStateList != nil {
		object["aoiStateList"], err = json.Marshal(a.AoiStateList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'aoiStateList': %w", err)
		}
	}

	if len(a.BindingInfo) != 0 {
		object["bindingInfo"], err = json.Marshal(a.BindingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bindingInfo': %w", err)
		}
	}

	if a.EventSyncInd != nil {
		object["eventSyncInd"], err = json.Marshal(a.EventSyncInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventSyncInd': %w", err)
		}
	}

	if a.SubscribingNfType != nil {
		object["subscribingNfType"], err = json.Marshal(a.SubscribingNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribingNfType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfEventSubscriptionInfo. Returns the specified
// element and whether it was found
func (a AmfEventSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfEventSubscriptionInfo
func (a *AmfEventSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfEventSubscriptionInfo to handle AdditionalProperties
func (a *AmfEventSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["oldSubId"]; found {
		err = json.Unmarshal(raw, &a.OldSubId)
		if err != nil {
			return fmt.Errorf("error reading 'oldSubId': %w", err)
		}
		delete(object, "oldSubId")
	}

	if raw, found := object["refIdList"]; found {
		err = json.Unmarshal(raw, &a.RefIdList)
		if err != nil {
			return fmt.Errorf("error reading 'refIdList': %w", err)
		}
		delete(object, "refIdList")
	}

	if raw, found := object["subId"]; found {
		err = json.Unmarshal(raw, &a.SubId)
		if err != nil {
			return fmt.Errorf("error reading 'subId': %w", err)
		}
		delete(object, "subId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfEventSubscriptionInfo to handle AdditionalProperties
func (a AmfEventSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NotifyCorrelationId != nil {
		object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
		}
	}

	if a.OldSubId != nil {
		object["oldSubId"], err = json.Marshal(a.OldSubId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSubId': %w", err)
		}
	}

	object["refIdList"], err = json.Marshal(a.RefIdList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refIdList': %w", err)
	}

	object["subId"], err = json.Marshal(a.SubId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfInfo. Returns the specified
// element and whether it was found
func (a AmfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfInfo
func (a *AmfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfInfo to handle AdditionalProperties
func (a *AmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfRegionId"]; found {
		err = json.Unmarshal(raw, &a.AmfRegionId)
		if err != nil {
			return fmt.Errorf("error reading 'amfRegionId': %w", err)
		}
		delete(object, "amfRegionId")
	}

	if raw, found := object["amfSetId"]; found {
		err = json.Unmarshal(raw, &a.AmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'amfSetId': %w", err)
		}
		delete(object, "amfSetId")
	}

	if raw, found := object["backupInfoAmfFailure"]; found {
		err = json.Unmarshal(raw, &a.BackupInfoAmfFailure)
		if err != nil {
			return fmt.Errorf("error reading 'backupInfoAmfFailure': %w", err)
		}
		delete(object, "backupInfoAmfFailure")
	}

	if raw, found := object["backupInfoAmfRemoval"]; found {
		err = json.Unmarshal(raw, &a.BackupInfoAmfRemoval)
		if err != nil {
			return fmt.Errorf("error reading 'backupInfoAmfRemoval': %w", err)
		}
		delete(object, "backupInfoAmfRemoval")
	}

	if raw, found := object["guamiList"]; found {
		err = json.Unmarshal(raw, &a.GuamiList)
		if err != nil {
			return fmt.Errorf("error reading 'guamiList': %w", err)
		}
		delete(object, "guamiList")
	}

	if raw, found := object["n2InterfaceAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.N2InterfaceAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2InterfaceAmfInfo': %w", err)
		}
		delete(object, "n2InterfaceAmfInfo")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["taiRangeList"]; found {
		err = json.Unmarshal(raw, &a.TaiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'taiRangeList': %w", err)
		}
		delete(object, "taiRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfInfo to handle AdditionalProperties
func (a AmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["amfRegionId"], err = json.Marshal(a.AmfRegionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfRegionId': %w", err)
	}

	object["amfSetId"], err = json.Marshal(a.AmfSetId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfSetId': %w", err)
	}

	if len(a.BackupInfoAmfFailure) != 0 {
		object["backupInfoAmfFailure"], err = json.Marshal(a.BackupInfoAmfFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupInfoAmfFailure': %w", err)
		}
	}

	if len(a.BackupInfoAmfRemoval) != 0 {
		object["backupInfoAmfRemoval"], err = json.Marshal(a.BackupInfoAmfRemoval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupInfoAmfRemoval': %w", err)
		}
	}

	object["guamiList"], err = json.Marshal(a.GuamiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guamiList': %w", err)
	}

	if a.N2InterfaceAmfInfo != nil {
		object["n2InterfaceAmfInfo"], err = json.Marshal(a.N2InterfaceAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2InterfaceAmfInfo': %w", err)
		}
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	if len(a.TaiRangeList) != 0 {
		object["taiRangeList"], err = json.Marshal(a.TaiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiRangeList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfNon3GppAccessRegistration. Returns the specified
// element and whether it was found
func (a AmfNon3GppAccessRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfNon3GppAccessRegistration
func (a *AmfNon3GppAccessRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfNon3GppAccessRegistration to handle AdditionalProperties
func (a *AmfNon3GppAccessRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfEeSubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.AmfEeSubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'amfEeSubscriptionId': %w", err)
		}
		delete(object, "amfEeSubscriptionId")
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["amfServiceNameDereg"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNameDereg)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNameDereg': %w", err)
		}
		delete(object, "amfServiceNameDereg")
	}

	if raw, found := object["amfServiceNamePcscfRest"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNamePcscfRest)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNamePcscfRest': %w", err)
		}
		delete(object, "amfServiceNamePcscfRest")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["deregCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.DeregCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'deregCallbackUri': %w", err)
		}
		delete(object, "deregCallbackUri")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["noEeSubscriptionInd"]; found {
		err = json.Unmarshal(raw, &a.NoEeSubscriptionInd)
		if err != nil {
			return fmt.Errorf("error reading 'noEeSubscriptionInd': %w", err)
		}
		delete(object, "noEeSubscriptionInd")
	}

	if raw, found := object["pcscfRestorationCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.PcscfRestorationCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfRestorationCallbackUri': %w", err)
		}
		delete(object, "pcscfRestorationCallbackUri")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["urrpIndicator"]; found {
		err = json.Unmarshal(raw, &a.UrrpIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'urrpIndicator': %w", err)
		}
		delete(object, "urrpIndicator")
	}

	if raw, found := object["vgmlcAddress"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddress)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddress': %w", err)
		}
		delete(object, "vgmlcAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfNon3GppAccessRegistration to handle AdditionalProperties
func (a AmfNon3GppAccessRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfEeSubscriptionId != nil {
		object["amfEeSubscriptionId"], err = json.Marshal(a.AmfEeSubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfEeSubscriptionId': %w", err)
		}
	}

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.AmfServiceNameDereg != nil {
		object["amfServiceNameDereg"], err = json.Marshal(a.AmfServiceNameDereg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNameDereg': %w", err)
		}
	}

	if a.AmfServiceNamePcscfRest != nil {
		object["amfServiceNamePcscfRest"], err = json.Marshal(a.AmfServiceNamePcscfRest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNamePcscfRest': %w", err)
		}
	}

	if len(a.BackupAmfInfo) != 0 {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	object["deregCallbackUri"], err = json.Marshal(a.DeregCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregCallbackUri': %w", err)
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
	}

	if a.NoEeSubscriptionInd != nil {
		object["noEeSubscriptionInd"], err = json.Marshal(a.NoEeSubscriptionInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noEeSubscriptionInd': %w", err)
		}
	}

	if a.PcscfRestorationCallbackUri != nil {
		object["pcscfRestorationCallbackUri"], err = json.Marshal(a.PcscfRestorationCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfRestorationCallbackUri': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	object["ratType"], err = json.Marshal(a.RatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UrrpIndicator != nil {
		object["urrpIndicator"], err = json.Marshal(a.UrrpIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urrpIndicator': %w", err)
		}
	}

	if a.VgmlcAddress != nil {
		object["vgmlcAddress"], err = json.Marshal(a.VgmlcAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfNon3GppAccessRegistrationModification. Returns the specified
// element and whether it was found
func (a AmfNon3GppAccessRegistrationModification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfNon3GppAccessRegistrationModification
func (a *AmfNon3GppAccessRegistrationModification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfNon3GppAccessRegistrationModification to handle AdditionalProperties
func (a *AmfNon3GppAccessRegistrationModification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfNon3GppAccessRegistrationModification to handle AdditionalProperties
func (a AmfNon3GppAccessRegistrationModification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackupAmfInfo != nil {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	if a.ImsVoPs != nil {
		object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfStatusChangeNotification. Returns the specified
// element and whether it was found
func (a AmfStatusChangeNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfStatusChangeNotification
func (a *AmfStatusChangeNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfStatusChangeNotification to handle AdditionalProperties
func (a *AmfStatusChangeNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfStatusInfoList"]; found {
		err = json.Unmarshal(raw, &a.AmfStatusInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'amfStatusInfoList': %w", err)
		}
		delete(object, "amfStatusInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfStatusChangeNotification to handle AdditionalProperties
func (a AmfStatusChangeNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["amfStatusInfoList"], err = json.Marshal(a.AmfStatusInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfStatusInfoList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfStatusInfo. Returns the specified
// element and whether it was found
func (a AmfStatusInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfStatusInfo
func (a *AmfStatusInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfStatusInfo to handle AdditionalProperties
func (a *AmfStatusInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["guamiList"]; found {
		err = json.Unmarshal(raw, &a.GuamiList)
		if err != nil {
			return fmt.Errorf("error reading 'guamiList': %w", err)
		}
		delete(object, "guamiList")
	}

	if raw, found := object["statusChange"]; found {
		err = json.Unmarshal(raw, &a.StatusChange)
		if err != nil {
			return fmt.Errorf("error reading 'statusChange': %w", err)
		}
		delete(object, "statusChange")
	}

	if raw, found := object["targetAmfFailure"]; found {
		err = json.Unmarshal(raw, &a.TargetAmfFailure)
		if err != nil {
			return fmt.Errorf("error reading 'targetAmfFailure': %w", err)
		}
		delete(object, "targetAmfFailure")
	}

	if raw, found := object["targetAmfRemoval"]; found {
		err = json.Unmarshal(raw, &a.TargetAmfRemoval)
		if err != nil {
			return fmt.Errorf("error reading 'targetAmfRemoval': %w", err)
		}
		delete(object, "targetAmfRemoval")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfStatusInfo to handle AdditionalProperties
func (a AmfStatusInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["guamiList"], err = json.Marshal(a.GuamiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guamiList': %w", err)
	}

	object["statusChange"], err = json.Marshal(a.StatusChange)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'statusChange': %w", err)
	}

	if a.TargetAmfFailure != nil {
		object["targetAmfFailure"], err = json.Marshal(a.TargetAmfFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetAmfFailure': %w", err)
		}
	}

	if a.TargetAmfRemoval != nil {
		object["targetAmfRemoval"], err = json.Marshal(a.TargetAmfRemoval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetAmfRemoval': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfSubscriptionInfo. Returns the specified
// element and whether it was found
func (a AmfSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfSubscriptionInfo
func (a *AmfSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfSubscriptionInfo to handle AdditionalProperties
func (a *AmfSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["subsChangeNotifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyCorrelationId': %w", err)
		}
		delete(object, "subsChangeNotifyCorrelationId")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfSubscriptionInfo to handle AdditionalProperties
func (a AmfSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.SubsChangeNotifyCorrelationId != nil {
		object["subsChangeNotifyCorrelationId"], err = json.Marshal(a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyCorrelationId': %w", err)
		}
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfUpdateEventOptionItem. Returns the specified
// element and whether it was found
func (a AmfUpdateEventOptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfUpdateEventOptionItem
func (a *AmfUpdateEventOptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfUpdateEventOptionItem to handle AdditionalProperties
func (a *AmfUpdateEventOptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfUpdateEventOptionItem to handle AdditionalProperties
func (a AmfUpdateEventOptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfUpdateEventSubscriptionItem. Returns the specified
// element and whether it was found
func (a AmfUpdateEventSubscriptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfUpdateEventSubscriptionItem
func (a *AmfUpdateEventSubscriptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfUpdateEventSubscriptionItem to handle AdditionalProperties
func (a *AmfUpdateEventSubscriptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfUpdateEventSubscriptionItem to handle AdditionalProperties
func (a AmfUpdateEventSubscriptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfUpdatedEventSubscription. Returns the specified
// element and whether it was found
func (a AmfUpdatedEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfUpdatedEventSubscription
func (a *AmfUpdatedEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfUpdatedEventSubscription to handle AdditionalProperties
func (a *AmfUpdatedEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["reportList"]; found {
		err = json.Unmarshal(raw, &a.ReportList)
		if err != nil {
			return fmt.Errorf("error reading 'reportList': %w", err)
		}
		delete(object, "reportList")
	}

	if raw, found := object["subscription"]; found {
		err = json.Unmarshal(raw, &a.Subscription)
		if err != nil {
			return fmt.Errorf("error reading 'subscription': %w", err)
		}
		delete(object, "subscription")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfUpdatedEventSubscription to handle AdditionalProperties
func (a AmfUpdatedEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ReportList) != 0 {
		object["reportList"], err = json.Marshal(a.ReportList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportList': %w", err)
		}
	}

	object["subscription"], err = json.Marshal(a.Subscription)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscription': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AnGwAddress. Returns the specified
// element and whether it was found
func (a AnGwAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AnGwAddress
func (a *AnGwAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AnGwAddress to handle AdditionalProperties
func (a *AnGwAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anGwIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AnGwIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwIpv4Addr': %w", err)
		}
		delete(object, "anGwIpv4Addr")
	}

	if raw, found := object["anGwIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AnGwIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwIpv6Addr': %w", err)
		}
		delete(object, "anGwIpv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AnGwAddress to handle AdditionalProperties
func (a AnGwAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnGwIpv4Addr) != 0 {
		object["anGwIpv4Addr"], err = json.Marshal(a.AnGwIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwIpv4Addr': %w", err)
		}
	}

	if a.AnGwIpv6Addr != nil {
		object["anGwIpv6Addr"], err = json.Marshal(a.AnGwIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwIpv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AnchorSmfFeatures. Returns the specified
// element and whether it was found
func (a AnchorSmfFeatures) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AnchorSmfFeatures
func (a *AnchorSmfFeatures) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AnchorSmfFeatures to handle AdditionalProperties
func (a *AnchorSmfFeatures) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["psetrSupportInd"]; found {
		err = json.Unmarshal(raw, &a.PsetrSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'psetrSupportInd': %w", err)
		}
		delete(object, "psetrSupportInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AnchorSmfFeatures to handle AdditionalProperties
func (a AnchorSmfFeatures) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PsetrSupportInd != nil {
		object["psetrSupportInd"], err = json.Marshal(a.PsetrSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psetrSupportInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApnRateStatus. Returns the specified
// element and whether it was found
func (a ApnRateStatus) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApnRateStatus
func (a *ApnRateStatus) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApnRateStatus to handle AdditionalProperties
func (a *ApnRateStatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["remainExReportsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsDl': %w", err)
		}
		delete(object, "remainExReportsDl")
	}

	if raw, found := object["remainExReportsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsUl': %w", err)
		}
		delete(object, "remainExReportsUl")
	}

	if raw, found := object["remainPacketsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsDl': %w", err)
		}
		delete(object, "remainPacketsDl")
	}

	if raw, found := object["remainPacketsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsUl': %w", err)
		}
		delete(object, "remainPacketsUl")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApnRateStatus to handle AdditionalProperties
func (a ApnRateStatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RemainExReportsDl != nil {
		object["remainExReportsDl"], err = json.Marshal(a.RemainExReportsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsDl': %w", err)
		}
	}

	if a.RemainExReportsUl != nil {
		object["remainExReportsUl"], err = json.Marshal(a.RemainExReportsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsUl': %w", err)
		}
	}

	if a.RemainPacketsDl != nil {
		object["remainPacketsDl"], err = json.Marshal(a.RemainPacketsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsDl': %w", err)
		}
	}

	if a.RemainPacketsUl != nil {
		object["remainPacketsUl"], err = json.Marshal(a.RemainPacketsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsUl': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppDescriptor. Returns the specified
// element and whether it was found
func (a AppDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppDescriptor
func (a *AppDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppDescriptor to handle AdditionalProperties
func (a *AppDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appId"]; found {
		err = json.Unmarshal(raw, &a.AppId)
		if err != nil {
			return fmt.Errorf("error reading 'appId': %w", err)
		}
		delete(object, "appId")
	}

	if raw, found := object["osId"]; found {
		err = json.Unmarshal(raw, &a.OsId)
		if err != nil {
			return fmt.Errorf("error reading 'osId': %w", err)
		}
		delete(object, "osId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppDescriptor to handle AdditionalProperties
func (a AppDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AppId != nil {
		object["appId"], err = json.Marshal(a.AppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appId': %w", err)
		}
	}

	if a.OsId != nil {
		object["osId"], err = json.Marshal(a.OsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'osId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppDetectionInfo. Returns the specified
// element and whether it was found
func (a AppDetectionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppDetectionInfo
func (a *AppDetectionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppDetectionInfo to handle AdditionalProperties
func (a *AppDetectionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appId"]; found {
		err = json.Unmarshal(raw, &a.AppId)
		if err != nil {
			return fmt.Errorf("error reading 'appId': %w", err)
		}
		delete(object, "appId")
	}

	if raw, found := object["instanceId"]; found {
		err = json.Unmarshal(raw, &a.InstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'instanceId': %w", err)
		}
		delete(object, "instanceId")
	}

	if raw, found := object["sdfDescriptions"]; found {
		err = json.Unmarshal(raw, &a.SdfDescriptions)
		if err != nil {
			return fmt.Errorf("error reading 'sdfDescriptions': %w", err)
		}
		delete(object, "sdfDescriptions")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppDetectionInfo to handle AdditionalProperties
func (a AppDetectionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["appId"], err = json.Marshal(a.AppId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'appId': %w", err)
	}

	if a.InstanceId != nil {
		object["instanceId"], err = json.Marshal(a.InstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instanceId': %w", err)
		}
	}

	if len(a.SdfDescriptions) != 0 {
		object["sdfDescriptions"], err = json.Marshal(a.SdfDescriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdfDescriptions': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppPortId. Returns the specified
// element and whether it was found
func (a AppPortId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppPortId
func (a *AppPortId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppPortId to handle AdditionalProperties
func (a *AppPortId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["destinationPort"]; found {
		err = json.Unmarshal(raw, &a.DestinationPort)
		if err != nil {
			return fmt.Errorf("error reading 'destinationPort': %w", err)
		}
		delete(object, "destinationPort")
	}

	if raw, found := object["originatorPort"]; found {
		err = json.Unmarshal(raw, &a.OriginatorPort)
		if err != nil {
			return fmt.Errorf("error reading 'originatorPort': %w", err)
		}
		delete(object, "originatorPort")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppPortId to handle AdditionalProperties
func (a AppPortId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DestinationPort != nil {
		object["destinationPort"], err = json.Marshal(a.DestinationPort)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'destinationPort': %w", err)
		}
	}

	if a.OriginatorPort != nil {
		object["originatorPort"], err = json.Marshal(a.OriginatorPort)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'originatorPort': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContext. Returns the specified
// element and whether it was found
func (a AppSessionContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContext
func (a *AppSessionContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContext to handle AdditionalProperties
func (a *AppSessionContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ascReqData"]; found {
		err = json.Unmarshal(raw, &a.AscReqData)
		if err != nil {
			return fmt.Errorf("error reading 'ascReqData': %w", err)
		}
		delete(object, "ascReqData")
	}

	if raw, found := object["ascRespData"]; found {
		err = json.Unmarshal(raw, &a.AscRespData)
		if err != nil {
			return fmt.Errorf("error reading 'ascRespData': %w", err)
		}
		delete(object, "ascRespData")
	}

	if raw, found := object["evsNotif"]; found {
		err = json.Unmarshal(raw, &a.EvsNotif)
		if err != nil {
			return fmt.Errorf("error reading 'evsNotif': %w", err)
		}
		delete(object, "evsNotif")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContext to handle AdditionalProperties
func (a AppSessionContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AscReqData != nil {
		object["ascReqData"], err = json.Marshal(a.AscReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ascReqData': %w", err)
		}
	}

	if a.AscRespData != nil {
		object["ascRespData"], err = json.Marshal(a.AscRespData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ascRespData': %w", err)
		}
	}

	if a.EvsNotif != nil {
		object["evsNotif"], err = json.Marshal(a.EvsNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'evsNotif': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextReqData. Returns the specified
// element and whether it was found
func (a AppSessionContextReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextReqData
func (a *AppSessionContextReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextReqData to handle AdditionalProperties
func (a *AppSessionContextReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afChargId"]; found {
		err = json.Unmarshal(raw, &a.AfChargId)
		if err != nil {
			return fmt.Errorf("error reading 'afChargId': %w", err)
		}
		delete(object, "afChargId")
	}

	if raw, found := object["afReqData"]; found {
		err = json.Unmarshal(raw, &a.AfReqData)
		if err != nil {
			return fmt.Errorf("error reading 'afReqData': %w", err)
		}
		delete(object, "afReqData")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["evSubsc"]; found {
		err = json.Unmarshal(raw, &a.EvSubsc)
		if err != nil {
			return fmt.Errorf("error reading 'evSubsc': %w", err)
		}
		delete(object, "evSubsc")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["mcVideoId"]; found {
		err = json.Unmarshal(raw, &a.McVideoId)
		if err != nil {
			return fmt.Errorf("error reading 'mcVideoId': %w", err)
		}
		delete(object, "mcVideoId")
	}

	if raw, found := object["mcpttId"]; found {
		err = json.Unmarshal(raw, &a.McpttId)
		if err != nil {
			return fmt.Errorf("error reading 'mcpttId': %w", err)
		}
		delete(object, "mcpttId")
	}

	if raw, found := object["mcsId"]; found {
		err = json.Unmarshal(raw, &a.McsId)
		if err != nil {
			return fmt.Errorf("error reading 'mcsId': %w", err)
		}
		delete(object, "mcsId")
	}

	if raw, found := object["medComponents"]; found {
		err = json.Unmarshal(raw, &a.MedComponents)
		if err != nil {
			return fmt.Errorf("error reading 'medComponents': %w", err)
		}
		delete(object, "medComponents")
	}

	if raw, found := object["mpsId"]; found {
		err = json.Unmarshal(raw, &a.MpsId)
		if err != nil {
			return fmt.Errorf("error reading 'mpsId': %w", err)
		}
		delete(object, "mpsId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["preemptControlInfo"]; found {
		err = json.Unmarshal(raw, &a.PreemptControlInfo)
		if err != nil {
			return fmt.Errorf("error reading 'preemptControlInfo': %w", err)
		}
		delete(object, "preemptControlInfo")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["servInfStatus"]; found {
		err = json.Unmarshal(raw, &a.ServInfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'servInfStatus': %w", err)
		}
		delete(object, "servInfStatus")
	}

	if raw, found := object["servUrn"]; found {
		err = json.Unmarshal(raw, &a.ServUrn)
		if err != nil {
			return fmt.Errorf("error reading 'servUrn': %w", err)
		}
		delete(object, "servUrn")
	}

	if raw, found := object["sliceInfo"]; found {
		err = json.Unmarshal(raw, &a.SliceInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sliceInfo': %w", err)
		}
		delete(object, "sliceInfo")
	}

	if raw, found := object["sponId"]; found {
		err = json.Unmarshal(raw, &a.SponId)
		if err != nil {
			return fmt.Errorf("error reading 'sponId': %w", err)
		}
		delete(object, "sponId")
	}

	if raw, found := object["sponStatus"]; found {
		err = json.Unmarshal(raw, &a.SponStatus)
		if err != nil {
			return fmt.Errorf("error reading 'sponStatus': %w", err)
		}
		delete(object, "sponStatus")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextReqData to handle AdditionalProperties
func (a AppSessionContextReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AfChargId != nil {
		object["afChargId"], err = json.Marshal(a.AfChargId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afChargId': %w", err)
		}
	}

	if a.AfReqData != nil {
		object["afReqData"], err = json.Marshal(a.AfReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afReqData': %w", err)
		}
	}

	if a.AfRoutReq != nil {
		object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
		}
	}

	if a.AspId != nil {
		object["aspId"], err = json.Marshal(a.AspId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
		}
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.EvSubsc != nil {
		object["evSubsc"], err = json.Marshal(a.EvSubsc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'evSubsc': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if a.McVideoId != nil {
		object["mcVideoId"], err = json.Marshal(a.McVideoId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcVideoId': %w", err)
		}
	}

	if a.McpttId != nil {
		object["mcpttId"], err = json.Marshal(a.McpttId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcpttId': %w", err)
		}
	}

	if a.McsId != nil {
		object["mcsId"], err = json.Marshal(a.McsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsId': %w", err)
		}
	}

	if a.MedComponents != nil {
		object["medComponents"], err = json.Marshal(a.MedComponents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medComponents': %w", err)
		}
	}

	if a.MpsId != nil {
		object["mpsId"], err = json.Marshal(a.MpsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsId': %w", err)
		}
	}

	object["notifUri"], err = json.Marshal(a.NotifUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
	}

	if a.PreemptControlInfo != nil {
		object["preemptControlInfo"], err = json.Marshal(a.PreemptControlInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptControlInfo': %w", err)
		}
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	if a.ServInfStatus != nil {
		object["servInfStatus"], err = json.Marshal(a.ServInfStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servInfStatus': %w", err)
		}
	}

	if a.ServUrn != nil {
		object["servUrn"], err = json.Marshal(a.ServUrn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servUrn': %w", err)
		}
	}

	if a.SliceInfo != nil {
		object["sliceInfo"], err = json.Marshal(a.SliceInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sliceInfo': %w", err)
		}
	}

	if a.SponId != nil {
		object["sponId"], err = json.Marshal(a.SponId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponId': %w", err)
		}
	}

	if a.SponStatus != nil {
		object["sponStatus"], err = json.Marshal(a.SponStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponStatus': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["suppFeat"], err = json.Marshal(a.SuppFeat)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	if len(a.UeIpv4) != 0 {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextRespData. Returns the specified
// element and whether it was found
func (a AppSessionContextRespData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextRespData
func (a *AppSessionContextRespData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextRespData to handle AdditionalProperties
func (a *AppSessionContextRespData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["servAuthInfo"]; found {
		err = json.Unmarshal(raw, &a.ServAuthInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servAuthInfo': %w", err)
		}
		delete(object, "servAuthInfo")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["ueIds"]; found {
		err = json.Unmarshal(raw, &a.UeIds)
		if err != nil {
			return fmt.Errorf("error reading 'ueIds': %w", err)
		}
		delete(object, "ueIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextRespData to handle AdditionalProperties
func (a AppSessionContextRespData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ServAuthInfo != nil {
		object["servAuthInfo"], err = json.Marshal(a.ServAuthInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servAuthInfo': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if len(a.UeIds) != 0 {
		object["ueIds"], err = json.Marshal(a.UeIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextUpdateData. Returns the specified
// element and whether it was found
func (a AppSessionContextUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextUpdateData
func (a *AppSessionContextUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextUpdateData to handle AdditionalProperties
func (a *AppSessionContextUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["evSubsc"]; found {
		err = json.Unmarshal(raw, &a.EvSubsc)
		if err != nil {
			return fmt.Errorf("error reading 'evSubsc': %w", err)
		}
		delete(object, "evSubsc")
	}

	if raw, found := object["mcVideoId"]; found {
		err = json.Unmarshal(raw, &a.McVideoId)
		if err != nil {
			return fmt.Errorf("error reading 'mcVideoId': %w", err)
		}
		delete(object, "mcVideoId")
	}

	if raw, found := object["mcpttId"]; found {
		err = json.Unmarshal(raw, &a.McpttId)
		if err != nil {
			return fmt.Errorf("error reading 'mcpttId': %w", err)
		}
		delete(object, "mcpttId")
	}

	if raw, found := object["mcsId"]; found {
		err = json.Unmarshal(raw, &a.McsId)
		if err != nil {
			return fmt.Errorf("error reading 'mcsId': %w", err)
		}
		delete(object, "mcsId")
	}

	if raw, found := object["medComponents"]; found {
		err = json.Unmarshal(raw, &a.MedComponents)
		if err != nil {
			return fmt.Errorf("error reading 'medComponents': %w", err)
		}
		delete(object, "medComponents")
	}

	if raw, found := object["mpsId"]; found {
		err = json.Unmarshal(raw, &a.MpsId)
		if err != nil {
			return fmt.Errorf("error reading 'mpsId': %w", err)
		}
		delete(object, "mpsId")
	}

	if raw, found := object["preemptControlInfo"]; found {
		err = json.Unmarshal(raw, &a.PreemptControlInfo)
		if err != nil {
			return fmt.Errorf("error reading 'preemptControlInfo': %w", err)
		}
		delete(object, "preemptControlInfo")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["servInfStatus"]; found {
		err = json.Unmarshal(raw, &a.ServInfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'servInfStatus': %w", err)
		}
		delete(object, "servInfStatus")
	}

	if raw, found := object["sipForkInd"]; found {
		err = json.Unmarshal(raw, &a.SipForkInd)
		if err != nil {
			return fmt.Errorf("error reading 'sipForkInd': %w", err)
		}
		delete(object, "sipForkInd")
	}

	if raw, found := object["sponId"]; found {
		err = json.Unmarshal(raw, &a.SponId)
		if err != nil {
			return fmt.Errorf("error reading 'sponId': %w", err)
		}
		delete(object, "sponId")
	}

	if raw, found := object["sponStatus"]; found {
		err = json.Unmarshal(raw, &a.SponStatus)
		if err != nil {
			return fmt.Errorf("error reading 'sponStatus': %w", err)
		}
		delete(object, "sponStatus")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextUpdateData to handle AdditionalProperties
func (a AppSessionContextUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
	}

	if a.AspId != nil {
		object["aspId"], err = json.Marshal(a.AspId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
		}
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	object["evSubsc"], err = json.Marshal(a.EvSubsc)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'evSubsc': %w", err)
	}

	if a.McVideoId != nil {
		object["mcVideoId"], err = json.Marshal(a.McVideoId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcVideoId': %w", err)
		}
	}

	if a.McpttId != nil {
		object["mcpttId"], err = json.Marshal(a.McpttId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcpttId': %w", err)
		}
	}

	if a.McsId != nil {
		object["mcsId"], err = json.Marshal(a.McsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsId': %w", err)
		}
	}

	if a.MedComponents != nil {
		object["medComponents"], err = json.Marshal(a.MedComponents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medComponents': %w", err)
		}
	}

	if a.MpsId != nil {
		object["mpsId"], err = json.Marshal(a.MpsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsId': %w", err)
		}
	}

	if a.PreemptControlInfo != nil {
		object["preemptControlInfo"], err = json.Marshal(a.PreemptControlInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptControlInfo': %w", err)
		}
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	if a.ServInfStatus != nil {
		object["servInfStatus"], err = json.Marshal(a.ServInfStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servInfStatus': %w", err)
		}
	}

	if a.SipForkInd != nil {
		object["sipForkInd"], err = json.Marshal(a.SipForkInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sipForkInd': %w", err)
		}
	}

	if a.SponId != nil {
		object["sponId"], err = json.Marshal(a.SponId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponId': %w", err)
		}
	}

	if a.SponStatus != nil {
		object["sponStatus"], err = json.Marshal(a.SponStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponStatus': %w", err)
		}
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextUpdateDataPatch. Returns the specified
// element and whether it was found
func (a AppSessionContextUpdateDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextUpdateDataPatch
func (a *AppSessionContextUpdateDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextUpdateDataPatch to handle AdditionalProperties
func (a *AppSessionContextUpdateDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ascReqData"]; found {
		err = json.Unmarshal(raw, &a.AscReqData)
		if err != nil {
			return fmt.Errorf("error reading 'ascReqData': %w", err)
		}
		delete(object, "ascReqData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextUpdateDataPatch to handle AdditionalProperties
func (a AppSessionContextUpdateDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AscReqData != nil {
		object["ascReqData"], err = json.Marshal(a.AscReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ascReqData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApplicationDataChangeNotif. Returns the specified
// element and whether it was found
func (a ApplicationDataChangeNotif) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApplicationDataChangeNotif
func (a *ApplicationDataChangeNotif) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApplicationDataChangeNotif to handle AdditionalProperties
func (a *ApplicationDataChangeNotif) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtPolicyData"]; found {
		err = json.Unmarshal(raw, &a.BdtPolicyData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtPolicyData': %w", err)
		}
		delete(object, "bdtPolicyData")
	}

	if raw, found := object["iptvConfigData"]; found {
		err = json.Unmarshal(raw, &a.IptvConfigData)
		if err != nil {
			return fmt.Errorf("error reading 'iptvConfigData': %w", err)
		}
		delete(object, "iptvConfigData")
	}

	if raw, found := object["pfdData"]; found {
		err = json.Unmarshal(raw, &a.PfdData)
		if err != nil {
			return fmt.Errorf("error reading 'pfdData': %w", err)
		}
		delete(object, "pfdData")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["serParamData"]; found {
		err = json.Unmarshal(raw, &a.SerParamData)
		if err != nil {
			return fmt.Errorf("error reading 'serParamData': %w", err)
		}
		delete(object, "serParamData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApplicationDataChangeNotif to handle AdditionalProperties
func (a ApplicationDataChangeNotif) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtPolicyData != nil {
		object["bdtPolicyData"], err = json.Marshal(a.BdtPolicyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtPolicyData': %w", err)
		}
	}

	if a.IptvConfigData != nil {
		object["iptvConfigData"], err = json.Marshal(a.IptvConfigData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iptvConfigData': %w", err)
		}
	}

	if a.PfdData != nil {
		object["pfdData"], err = json.Marshal(a.PfdData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdData': %w", err)
		}
	}

	object["resUri"], err = json.Marshal(a.ResUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
	}

	if a.SerParamData != nil {
		object["serParamData"], err = json.Marshal(a.SerParamData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serParamData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApplicationDataSubs. Returns the specified
// element and whether it was found
func (a ApplicationDataSubs) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApplicationDataSubs
func (a *ApplicationDataSubs) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApplicationDataSubs to handle AdditionalProperties
func (a *ApplicationDataSubs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dataFilters"]; found {
		err = json.Unmarshal(raw, &a.DataFilters)
		if err != nil {
			return fmt.Errorf("error reading 'dataFilters': %w", err)
		}
		delete(object, "dataFilters")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApplicationDataSubs to handle AdditionalProperties
func (a ApplicationDataSubs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DataFilters) != 0 {
		object["dataFilters"], err = json.Marshal(a.DataFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataFilters': %w", err)
		}
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Area. Returns the specified
// element and whether it was found
func (a Area) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Area
func (a *Area) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Area to handle AdditionalProperties
func (a *Area) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areaCode"]; found {
		err = json.Unmarshal(raw, &a.AreaCode)
		if err != nil {
			return fmt.Errorf("error reading 'areaCode': %w", err)
		}
		delete(object, "areaCode")
	}

	if raw, found := object["tacs"]; found {
		err = json.Unmarshal(raw, &a.Tacs)
		if err != nil {
			return fmt.Errorf("error reading 'tacs': %w", err)
		}
		delete(object, "tacs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Area to handle AdditionalProperties
func (a Area) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AreaCode != nil {
		object["areaCode"], err = json.Marshal(a.AreaCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaCode': %w", err)
		}
	}

	if len(a.Tacs) != 0 {
		object["tacs"], err = json.Marshal(a.Tacs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tacs': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AreaOfInterestEventState. Returns the specified
// element and whether it was found
func (a AreaOfInterestEventState) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AreaOfInterestEventState
func (a *AreaOfInterestEventState) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AreaOfInterestEventState to handle AdditionalProperties
func (a *AreaOfInterestEventState) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["individualPraIdList"]; found {
		err = json.Unmarshal(raw, &a.IndividualPraIdList)
		if err != nil {
			return fmt.Errorf("error reading 'individualPraIdList': %w", err)
		}
		delete(object, "individualPraIdList")
	}

	if raw, found := object["presence"]; found {
		err = json.Unmarshal(raw, &a.Presence)
		if err != nil {
			return fmt.Errorf("error reading 'presence': %w", err)
		}
		delete(object, "presence")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AreaOfInterestEventState to handle AdditionalProperties
func (a AreaOfInterestEventState) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.IndividualPraIdList) != 0 {
		object["individualPraIdList"], err = json.Marshal(a.IndividualPraIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'individualPraIdList': %w", err)
		}
	}

	object["presence"], err = json.Marshal(a.Presence)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'presence': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AreaOfValidity. Returns the specified
// element and whether it was found
func (a AreaOfValidity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AreaOfValidity
func (a *AreaOfValidity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AreaOfValidity to handle AdditionalProperties
func (a *AreaOfValidity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AreaOfValidity to handle AdditionalProperties
func (a AreaOfValidity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["taiList"], err = json.Marshal(a.TaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AreaScope. Returns the specified
// element and whether it was found
func (a AreaScope) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AreaScope
func (a *AreaScope) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AreaScope to handle AdditionalProperties
func (a *AreaScope) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eutraCellIdList"]; found {
		err = json.Unmarshal(raw, &a.EutraCellIdList)
		if err != nil {
			return fmt.Errorf("error reading 'eutraCellIdList': %w", err)
		}
		delete(object, "eutraCellIdList")
	}

	if raw, found := object["nrCellIdList"]; found {
		err = json.Unmarshal(raw, &a.NrCellIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nrCellIdList': %w", err)
		}
		delete(object, "nrCellIdList")
	}

	if raw, found := object["tacInfoPerPlmn"]; found {
		err = json.Unmarshal(raw, &a.TacInfoPerPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'tacInfoPerPlmn': %w", err)
		}
		delete(object, "tacInfoPerPlmn")
	}

	if raw, found := object["tacList"]; found {
		err = json.Unmarshal(raw, &a.TacList)
		if err != nil {
			return fmt.Errorf("error reading 'tacList': %w", err)
		}
		delete(object, "tacList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AreaScope to handle AdditionalProperties
func (a AreaScope) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.EutraCellIdList) != 0 {
		object["eutraCellIdList"], err = json.Marshal(a.EutraCellIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eutraCellIdList': %w", err)
		}
	}

	if len(a.NrCellIdList) != 0 {
		object["nrCellIdList"], err = json.Marshal(a.NrCellIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrCellIdList': %w", err)
		}
	}

	if a.TacInfoPerPlmn != nil {
		object["tacInfoPerPlmn"], err = json.Marshal(a.TacInfoPerPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tacInfoPerPlmn': %w", err)
		}
	}

	if len(a.TacList) != 0 {
		object["tacList"], err = json.Marshal(a.TacList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tacList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Arp. Returns the specified
// element and whether it was found
func (a Arp) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Arp
func (a *Arp) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Arp to handle AdditionalProperties
func (a *Arp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["preemptCap"]; found {
		err = json.Unmarshal(raw, &a.PreemptCap)
		if err != nil {
			return fmt.Errorf("error reading 'preemptCap': %w", err)
		}
		delete(object, "preemptCap")
	}

	if raw, found := object["preemptVuln"]; found {
		err = json.Unmarshal(raw, &a.PreemptVuln)
		if err != nil {
			return fmt.Errorf("error reading 'preemptVuln': %w", err)
		}
		delete(object, "preemptVuln")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Arp to handle AdditionalProperties
func (a Arp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["preemptCap"], err = json.Marshal(a.PreemptCap)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'preemptCap': %w", err)
	}

	object["preemptVuln"], err = json.Marshal(a.PreemptVuln)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'preemptVuln': %w", err)
	}

	object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AssignEbiData. Returns the specified
// element and whether it was found
func (a AssignEbiData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AssignEbiData
func (a *AssignEbiData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AssignEbiData to handle AdditionalProperties
func (a *AssignEbiData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["arpList"]; found {
		err = json.Unmarshal(raw, &a.ArpList)
		if err != nil {
			return fmt.Errorf("error reading 'arpList': %w", err)
		}
		delete(object, "arpList")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["releasedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ReleasedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'releasedEbiList': %w", err)
		}
		delete(object, "releasedEbiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AssignEbiData to handle AdditionalProperties
func (a AssignEbiData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ArpList) != 0 {
		object["arpList"], err = json.Marshal(a.ArpList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arpList': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	if len(a.ReleasedEbiList) != 0 {
		object["releasedEbiList"], err = json.Marshal(a.ReleasedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'releasedEbiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AssignEbiError. Returns the specified
// element and whether it was found
func (a AssignEbiError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AssignEbiError
func (a *AssignEbiError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AssignEbiError to handle AdditionalProperties
func (a *AssignEbiError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["failureDetails"]; found {
		err = json.Unmarshal(raw, &a.FailureDetails)
		if err != nil {
			return fmt.Errorf("error reading 'failureDetails': %w", err)
		}
		delete(object, "failureDetails")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AssignEbiError to handle AdditionalProperties
func (a AssignEbiError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	object["failureDetails"], err = json.Marshal(a.FailureDetails)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'failureDetails': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AssignEbiFailed. Returns the specified
// element and whether it was found
func (a AssignEbiFailed) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AssignEbiFailed
func (a *AssignEbiFailed) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AssignEbiFailed to handle AdditionalProperties
func (a *AssignEbiFailed) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["failedArpList"]; found {
		err = json.Unmarshal(raw, &a.FailedArpList)
		if err != nil {
			return fmt.Errorf("error reading 'failedArpList': %w", err)
		}
		delete(object, "failedArpList")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AssignEbiFailed to handle AdditionalProperties
func (a AssignEbiFailed) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.FailedArpList) != 0 {
		object["failedArpList"], err = json.Marshal(a.FailedArpList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedArpList': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AssignedEbiData. Returns the specified
// element and whether it was found
func (a AssignedEbiData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AssignedEbiData
func (a *AssignedEbiData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AssignedEbiData to handle AdditionalProperties
func (a *AssignedEbiData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["assignedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AssignedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'assignedEbiList': %w", err)
		}
		delete(object, "assignedEbiList")
	}

	if raw, found := object["failedArpList"]; found {
		err = json.Unmarshal(raw, &a.FailedArpList)
		if err != nil {
			return fmt.Errorf("error reading 'failedArpList': %w", err)
		}
		delete(object, "failedArpList")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["releasedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ReleasedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'releasedEbiList': %w", err)
		}
		delete(object, "releasedEbiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AssignedEbiData to handle AdditionalProperties
func (a AssignedEbiData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["assignedEbiList"], err = json.Marshal(a.AssignedEbiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'assignedEbiList': %w", err)
	}

	if len(a.FailedArpList) != 0 {
		object["failedArpList"], err = json.Marshal(a.FailedArpList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedArpList': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	if len(a.ReleasedEbiList) != 0 {
		object["releasedEbiList"], err = json.Marshal(a.ReleasedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'releasedEbiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Atom. Returns the specified
// element and whether it was found
func (a Atom) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Atom
func (a *Atom) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Atom to handle AdditionalProperties
func (a *Atom) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attr"]; found {
		err = json.Unmarshal(raw, &a.Attr)
		if err != nil {
			return fmt.Errorf("error reading 'attr': %w", err)
		}
		delete(object, "attr")
	}

	if raw, found := object["negative"]; found {
		err = json.Unmarshal(raw, &a.Negative)
		if err != nil {
			return fmt.Errorf("error reading 'negative': %w", err)
		}
		delete(object, "negative")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Atom to handle AdditionalProperties
func (a Atom) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["attr"], err = json.Marshal(a.Attr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'attr': %w", err)
	}

	if a.Negative != nil {
		object["negative"], err = json.Marshal(a.Negative)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'negative': %w", err)
		}
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AtsssCapability. Returns the specified
// element and whether it was found
func (a AtsssCapability) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AtsssCapability
func (a *AtsssCapability) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AtsssCapability to handle AdditionalProperties
func (a *AtsssCapability) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["atsssLL"]; found {
		err = json.Unmarshal(raw, &a.AtsssLL)
		if err != nil {
			return fmt.Errorf("error reading 'atsssLL': %w", err)
		}
		delete(object, "atsssLL")
	}

	if raw, found := object["mptcp"]; found {
		err = json.Unmarshal(raw, &a.Mptcp)
		if err != nil {
			return fmt.Errorf("error reading 'mptcp': %w", err)
		}
		delete(object, "mptcp")
	}

	if raw, found := object["rttWithoutPmf"]; found {
		err = json.Unmarshal(raw, &a.RttWithoutPmf)
		if err != nil {
			return fmt.Errorf("error reading 'rttWithoutPmf': %w", err)
		}
		delete(object, "rttWithoutPmf")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AtsssCapability to handle AdditionalProperties
func (a AtsssCapability) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AtsssLL != nil {
		object["atsssLL"], err = json.Marshal(a.AtsssLL)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssLL': %w", err)
		}
	}

	if a.Mptcp != nil {
		object["mptcp"], err = json.Marshal(a.Mptcp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mptcp': %w", err)
		}
	}

	if a.RttWithoutPmf != nil {
		object["rttWithoutPmf"], err = json.Marshal(a.RttWithoutPmf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rttWithoutPmf': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AusfInfo. Returns the specified
// element and whether it was found
func (a AusfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AusfInfo
func (a *AusfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AusfInfo to handle AdditionalProperties
func (a *AusfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["routingIndicators"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicators)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicators': %w", err)
		}
		delete(object, "routingIndicators")
	}

	if raw, found := object["supiRanges"]; found {
		err = json.Unmarshal(raw, &a.SupiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'supiRanges': %w", err)
		}
		delete(object, "supiRanges")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AusfInfo to handle AdditionalProperties
func (a AusfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if len(a.RoutingIndicators) != 0 {
		object["routingIndicators"], err = json.Marshal(a.RoutingIndicators)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicators': %w", err)
		}
	}

	if len(a.SupiRanges) != 0 {
		object["supiRanges"], err = json.Marshal(a.SupiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiRanges': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthEvent. Returns the specified
// element and whether it was found
func (a AuthEvent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthEvent
func (a *AuthEvent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthEvent to handle AdditionalProperties
func (a *AuthEvent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authRemovalInd"]; found {
		err = json.Unmarshal(raw, &a.AuthRemovalInd)
		if err != nil {
			return fmt.Errorf("error reading 'authRemovalInd': %w", err)
		}
		delete(object, "authRemovalInd")
	}

	if raw, found := object["authType"]; found {
		err = json.Unmarshal(raw, &a.AuthType)
		if err != nil {
			return fmt.Errorf("error reading 'authType': %w", err)
		}
		delete(object, "authType")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["nfSetId"]; found {
		err = json.Unmarshal(raw, &a.NfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetId': %w", err)
		}
		delete(object, "nfSetId")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if raw, found := object["success"]; found {
		err = json.Unmarshal(raw, &a.Success)
		if err != nil {
			return fmt.Errorf("error reading 'success': %w", err)
		}
		delete(object, "success")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthEvent to handle AdditionalProperties
func (a AuthEvent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AuthRemovalInd != nil {
		object["authRemovalInd"], err = json.Marshal(a.AuthRemovalInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authRemovalInd': %w", err)
		}
	}

	object["authType"], err = json.Marshal(a.AuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authType': %w", err)
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.NfSetId != nil {
		object["nfSetId"], err = json.Marshal(a.NfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetId': %w", err)
		}
	}

	object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
	}

	object["success"], err = json.Marshal(a.Success)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'success': %w", err)
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationInfo. Returns the specified
// element and whether it was found
func (a AuthenticationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationInfo
func (a *AuthenticationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationInfo to handle AdditionalProperties
func (a *AuthenticationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellCagInfo"]; found {
		err = json.Unmarshal(raw, &a.CellCagInfo)
		if err != nil {
			return fmt.Errorf("error reading 'cellCagInfo': %w", err)
		}
		delete(object, "cellCagInfo")
	}

	if raw, found := object["n5gcInd"]; found {
		err = json.Unmarshal(raw, &a.N5gcInd)
		if err != nil {
			return fmt.Errorf("error reading 'n5gcInd': %w", err)
		}
		delete(object, "n5gcInd")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["resynchronizationInfo"]; found {
		err = json.Unmarshal(raw, &a.ResynchronizationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'resynchronizationInfo': %w", err)
		}
		delete(object, "resynchronizationInfo")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if raw, found := object["supiOrSuci"]; found {
		err = json.Unmarshal(raw, &a.SupiOrSuci)
		if err != nil {
			return fmt.Errorf("error reading 'supiOrSuci': %w", err)
		}
		delete(object, "supiOrSuci")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationInfo to handle AdditionalProperties
func (a AuthenticationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CellCagInfo) != 0 {
		object["cellCagInfo"], err = json.Marshal(a.CellCagInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellCagInfo': %w", err)
		}
	}

	if a.N5gcInd != nil {
		object["n5gcInd"], err = json.Marshal(a.N5gcInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n5gcInd': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.ResynchronizationInfo != nil {
		object["resynchronizationInfo"], err = json.Marshal(a.ResynchronizationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resynchronizationInfo': %w", err)
		}
	}

	if len(a.RoutingIndicator) != 0 {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
	}

	object["supiOrSuci"], err = json.Marshal(a.SupiOrSuci)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supiOrSuci': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationInfoRequest. Returns the specified
// element and whether it was found
func (a AuthenticationInfoRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationInfoRequest
func (a *AuthenticationInfoRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationInfoRequest to handle AdditionalProperties
func (a *AuthenticationInfoRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ausfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AusfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInstanceId': %w", err)
		}
		delete(object, "ausfInstanceId")
	}

	if raw, found := object["cellCagInfo"]; found {
		err = json.Unmarshal(raw, &a.CellCagInfo)
		if err != nil {
			return fmt.Errorf("error reading 'cellCagInfo': %w", err)
		}
		delete(object, "cellCagInfo")
	}

	if raw, found := object["n5gcInd"]; found {
		err = json.Unmarshal(raw, &a.N5gcInd)
		if err != nil {
			return fmt.Errorf("error reading 'n5gcInd': %w", err)
		}
		delete(object, "n5gcInd")
	}

	if raw, found := object["resynchronizationInfo"]; found {
		err = json.Unmarshal(raw, &a.ResynchronizationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'resynchronizationInfo': %w", err)
		}
		delete(object, "resynchronizationInfo")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationInfoRequest to handle AdditionalProperties
func (a AuthenticationInfoRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ausfInstanceId"], err = json.Marshal(a.AusfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ausfInstanceId': %w", err)
	}

	if len(a.CellCagInfo) != 0 {
		object["cellCagInfo"], err = json.Marshal(a.CellCagInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellCagInfo': %w", err)
		}
	}

	if a.N5gcInd != nil {
		object["n5gcInd"], err = json.Marshal(a.N5gcInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n5gcInd': %w", err)
		}
	}

	if a.ResynchronizationInfo != nil {
		object["resynchronizationInfo"], err = json.Marshal(a.ResynchronizationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resynchronizationInfo': %w", err)
		}
	}

	object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationInfoResult. Returns the specified
// element and whether it was found
func (a AuthenticationInfoResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationInfoResult
func (a *AuthenticationInfoResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationInfoResult to handle AdditionalProperties
func (a *AuthenticationInfoResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authType"]; found {
		err = json.Unmarshal(raw, &a.AuthType)
		if err != nil {
			return fmt.Errorf("error reading 'authType': %w", err)
		}
		delete(object, "authType")
	}

	if raw, found := object["authenticationVector"]; found {
		err = json.Unmarshal(raw, &a.AuthenticationVector)
		if err != nil {
			return fmt.Errorf("error reading 'authenticationVector': %w", err)
		}
		delete(object, "authenticationVector")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationInfoResult to handle AdditionalProperties
func (a AuthenticationInfoResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authType"], err = json.Marshal(a.AuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authType': %w", err)
	}

	if a.AuthenticationVector != nil {
		object["authenticationVector"], err = json.Marshal(a.AuthenticationVector)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authenticationVector': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationSubscription. Returns the specified
// element and whether it was found
func (a AuthenticationSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationSubscription
func (a *AuthenticationSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationSubscription to handle AdditionalProperties
func (a *AuthenticationSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["algorithmId"]; found {
		err = json.Unmarshal(raw, &a.AlgorithmId)
		if err != nil {
			return fmt.Errorf("error reading 'algorithmId': %w", err)
		}
		delete(object, "algorithmId")
	}

	if raw, found := object["authenticationManagementField"]; found {
		err = json.Unmarshal(raw, &a.AuthenticationManagementField)
		if err != nil {
			return fmt.Errorf("error reading 'authenticationManagementField': %w", err)
		}
		delete(object, "authenticationManagementField")
	}

	if raw, found := object["authenticationMethod"]; found {
		err = json.Unmarshal(raw, &a.AuthenticationMethod)
		if err != nil {
			return fmt.Errorf("error reading 'authenticationMethod': %w", err)
		}
		delete(object, "authenticationMethod")
	}

	if raw, found := object["encOpcKey"]; found {
		err = json.Unmarshal(raw, &a.EncOpcKey)
		if err != nil {
			return fmt.Errorf("error reading 'encOpcKey': %w", err)
		}
		delete(object, "encOpcKey")
	}

	if raw, found := object["encPermanentKey"]; found {
		err = json.Unmarshal(raw, &a.EncPermanentKey)
		if err != nil {
			return fmt.Errorf("error reading 'encPermanentKey': %w", err)
		}
		delete(object, "encPermanentKey")
	}

	if raw, found := object["encTopcKey"]; found {
		err = json.Unmarshal(raw, &a.EncTopcKey)
		if err != nil {
			return fmt.Errorf("error reading 'encTopcKey': %w", err)
		}
		delete(object, "encTopcKey")
	}

	if raw, found := object["n5gcAuthMethod"]; found {
		err = json.Unmarshal(raw, &a.N5gcAuthMethod)
		if err != nil {
			return fmt.Errorf("error reading 'n5gcAuthMethod': %w", err)
		}
		delete(object, "n5gcAuthMethod")
	}

	if raw, found := object["protectionParameterId"]; found {
		err = json.Unmarshal(raw, &a.ProtectionParameterId)
		if err != nil {
			return fmt.Errorf("error reading 'protectionParameterId': %w", err)
		}
		delete(object, "protectionParameterId")
	}

	if raw, found := object["rgAuthenticationInd"]; found {
		err = json.Unmarshal(raw, &a.RgAuthenticationInd)
		if err != nil {
			return fmt.Errorf("error reading 'rgAuthenticationInd': %w", err)
		}
		delete(object, "rgAuthenticationInd")
	}

	if raw, found := object["sequenceNumber"]; found {
		err = json.Unmarshal(raw, &a.SequenceNumber)
		if err != nil {
			return fmt.Errorf("error reading 'sequenceNumber': %w", err)
		}
		delete(object, "sequenceNumber")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["vectorGenerationInHss"]; found {
		err = json.Unmarshal(raw, &a.VectorGenerationInHss)
		if err != nil {
			return fmt.Errorf("error reading 'vectorGenerationInHss': %w", err)
		}
		delete(object, "vectorGenerationInHss")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationSubscription to handle AdditionalProperties
func (a AuthenticationSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AlgorithmId != nil {
		object["algorithmId"], err = json.Marshal(a.AlgorithmId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'algorithmId': %w", err)
		}
	}

	if len(a.AuthenticationManagementField) != 0 {
		object["authenticationManagementField"], err = json.Marshal(a.AuthenticationManagementField)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authenticationManagementField': %w", err)
		}
	}

	object["authenticationMethod"], err = json.Marshal(a.AuthenticationMethod)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authenticationMethod': %w", err)
	}

	if a.EncOpcKey != nil {
		object["encOpcKey"], err = json.Marshal(a.EncOpcKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'encOpcKey': %w", err)
		}
	}

	if a.EncPermanentKey != nil {
		object["encPermanentKey"], err = json.Marshal(a.EncPermanentKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'encPermanentKey': %w", err)
		}
	}

	if a.EncTopcKey != nil {
		object["encTopcKey"], err = json.Marshal(a.EncTopcKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'encTopcKey': %w", err)
		}
	}

	if a.N5gcAuthMethod != nil {
		object["n5gcAuthMethod"], err = json.Marshal(a.N5gcAuthMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n5gcAuthMethod': %w", err)
		}
	}

	if a.ProtectionParameterId != nil {
		object["protectionParameterId"], err = json.Marshal(a.ProtectionParameterId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'protectionParameterId': %w", err)
		}
	}

	if a.RgAuthenticationInd != nil {
		object["rgAuthenticationInd"], err = json.Marshal(a.RgAuthenticationInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rgAuthenticationInd': %w", err)
		}
	}

	if a.SequenceNumber != nil {
		object["sequenceNumber"], err = json.Marshal(a.SequenceNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sequenceNumber': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.VectorGenerationInHss != nil {
		object["vectorGenerationInHss"], err = json.Marshal(a.VectorGenerationInHss)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vectorGenerationInHss': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizationData. Returns the specified
// element and whether it was found
func (a AuthorizationData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizationData
func (a *AuthorizationData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizationData to handle AdditionalProperties
func (a *AuthorizationData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authorizationData"]; found {
		err = json.Unmarshal(raw, &a.AuthorizationData)
		if err != nil {
			return fmt.Errorf("error reading 'authorizationData': %w", err)
		}
		delete(object, "authorizationData")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizationData to handle AdditionalProperties
func (a AuthorizationData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authorizationData"], err = json.Marshal(a.AuthorizationData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authorizationData': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizationInfo. Returns the specified
// element and whether it was found
func (a AuthorizationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizationInfo
func (a *AuthorizationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizationInfo to handle AdditionalProperties
func (a *AuthorizationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["authUpdateCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.AuthUpdateCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'authUpdateCallbackUri': %w", err)
		}
		delete(object, "authUpdateCallbackUri")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["nefId"]; found {
		err = json.Unmarshal(raw, &a.NefId)
		if err != nil {
			return fmt.Errorf("error reading 'nefId': %w", err)
		}
		delete(object, "nefId")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizationInfo to handle AdditionalProperties
func (a AuthorizationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	object["authUpdateCallbackUri"], err = json.Marshal(a.AuthUpdateCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authUpdateCallbackUri': %w", err)
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
	}

	if a.NefId != nil {
		object["nefId"], err = json.Marshal(a.NefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefId': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizedDefaultQos. Returns the specified
// element and whether it was found
func (a AuthorizedDefaultQos) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizedDefaultQos
func (a *AuthorizedDefaultQos) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizedDefaultQos to handle AdditionalProperties
func (a *AuthorizedDefaultQos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["averWindow"]; found {
		err = json.Unmarshal(raw, &a.AverWindow)
		if err != nil {
			return fmt.Errorf("error reading 'averWindow': %w", err)
		}
		delete(object, "averWindow")
	}

	if raw, found := object["extMaxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.ExtMaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'extMaxDataBurstVol': %w", err)
		}
		delete(object, "extMaxDataBurstVol")
	}

	if raw, found := object["gbrDl"]; found {
		err = json.Unmarshal(raw, &a.GbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrDl': %w", err)
		}
		delete(object, "gbrDl")
	}

	if raw, found := object["gbrUl"]; found {
		err = json.Unmarshal(raw, &a.GbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrUl': %w", err)
		}
		delete(object, "gbrUl")
	}

	if raw, found := object["maxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.MaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'maxDataBurstVol': %w", err)
		}
		delete(object, "maxDataBurstVol")
	}

	if raw, found := object["maxbrDl"]; found {
		err = json.Unmarshal(raw, &a.MaxbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxbrDl': %w", err)
		}
		delete(object, "maxbrDl")
	}

	if raw, found := object["maxbrUl"]; found {
		err = json.Unmarshal(raw, &a.MaxbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxbrUl': %w", err)
		}
		delete(object, "maxbrUl")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizedDefaultQos to handle AdditionalProperties
func (a AuthorizedDefaultQos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5qi != nil {
		object["5qi"], err = json.Marshal(a.N5qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5qi': %w", err)
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arp': %w", err)
		}
	}

	object["averWindow"], err = json.Marshal(a.AverWindow)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'averWindow': %w", err)
	}

	object["extMaxDataBurstVol"], err = json.Marshal(a.ExtMaxDataBurstVol)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'extMaxDataBurstVol': %w", err)
	}

	object["gbrDl"], err = json.Marshal(a.GbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gbrDl': %w", err)
	}

	object["gbrUl"], err = json.Marshal(a.GbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gbrUl': %w", err)
	}

	object["maxDataBurstVol"], err = json.Marshal(a.MaxDataBurstVol)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxDataBurstVol': %w", err)
	}

	object["maxbrDl"], err = json.Marshal(a.MaxbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxbrDl': %w", err)
	}

	object["maxbrUl"], err = json.Marshal(a.MaxbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxbrUl': %w", err)
	}

	object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizedNetworkSliceInfo. Returns the specified
// element and whether it was found
func (a AuthorizedNetworkSliceInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizedNetworkSliceInfo
func (a *AuthorizedNetworkSliceInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizedNetworkSliceInfo to handle AdditionalProperties
func (a *AuthorizedNetworkSliceInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNssaiList"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiList': %w", err)
		}
		delete(object, "allowedNssaiList")
	}

	if raw, found := object["candidateAmfList"]; found {
		err = json.Unmarshal(raw, &a.CandidateAmfList)
		if err != nil {
			return fmt.Errorf("error reading 'candidateAmfList': %w", err)
		}
		delete(object, "candidateAmfList")
	}

	if raw, found := object["configuredNssai"]; found {
		err = json.Unmarshal(raw, &a.ConfiguredNssai)
		if err != nil {
			return fmt.Errorf("error reading 'configuredNssai': %w", err)
		}
		delete(object, "configuredNssai")
	}

	if raw, found := object["mappingOfNssai"]; found {
		err = json.Unmarshal(raw, &a.MappingOfNssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappingOfNssai': %w", err)
		}
		delete(object, "mappingOfNssai")
	}

	if raw, found := object["nrfAmfSet"]; found {
		err = json.Unmarshal(raw, &a.NrfAmfSet)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAmfSet': %w", err)
		}
		delete(object, "nrfAmfSet")
	}

	if raw, found := object["nrfAmfSetAccessTokenUri"]; found {
		err = json.Unmarshal(raw, &a.NrfAmfSetAccessTokenUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAmfSetAccessTokenUri': %w", err)
		}
		delete(object, "nrfAmfSetAccessTokenUri")
	}

	if raw, found := object["nrfAmfSetNfMgtUri"]; found {
		err = json.Unmarshal(raw, &a.NrfAmfSetNfMgtUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAmfSetNfMgtUri': %w", err)
		}
		delete(object, "nrfAmfSetNfMgtUri")
	}

	if raw, found := object["nsiInformation"]; found {
		err = json.Unmarshal(raw, &a.NsiInformation)
		if err != nil {
			return fmt.Errorf("error reading 'nsiInformation': %w", err)
		}
		delete(object, "nsiInformation")
	}

	if raw, found := object["rejectedNssaiInPlmn"]; found {
		err = json.Unmarshal(raw, &a.RejectedNssaiInPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'rejectedNssaiInPlmn': %w", err)
		}
		delete(object, "rejectedNssaiInPlmn")
	}

	if raw, found := object["rejectedNssaiInTa"]; found {
		err = json.Unmarshal(raw, &a.RejectedNssaiInTa)
		if err != nil {
			return fmt.Errorf("error reading 'rejectedNssaiInTa': %w", err)
		}
		delete(object, "rejectedNssaiInTa")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetAmfServiceSet"]; found {
		err = json.Unmarshal(raw, &a.TargetAmfServiceSet)
		if err != nil {
			return fmt.Errorf("error reading 'targetAmfServiceSet': %w", err)
		}
		delete(object, "targetAmfServiceSet")
	}

	if raw, found := object["targetAmfSet"]; found {
		err = json.Unmarshal(raw, &a.TargetAmfSet)
		if err != nil {
			return fmt.Errorf("error reading 'targetAmfSet': %w", err)
		}
		delete(object, "targetAmfSet")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizedNetworkSliceInfo to handle AdditionalProperties
func (a AuthorizedNetworkSliceInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedNssaiList) != 0 {
		object["allowedNssaiList"], err = json.Marshal(a.AllowedNssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiList': %w", err)
		}
	}

	if len(a.CandidateAmfList) != 0 {
		object["candidateAmfList"], err = json.Marshal(a.CandidateAmfList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'candidateAmfList': %w", err)
		}
	}

	if len(a.ConfiguredNssai) != 0 {
		object["configuredNssai"], err = json.Marshal(a.ConfiguredNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'configuredNssai': %w", err)
		}
	}

	if len(a.MappingOfNssai) != 0 {
		object["mappingOfNssai"], err = json.Marshal(a.MappingOfNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingOfNssai': %w", err)
		}
	}

	if a.NrfAmfSet != nil {
		object["nrfAmfSet"], err = json.Marshal(a.NrfAmfSet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAmfSet': %w", err)
		}
	}

	if a.NrfAmfSetAccessTokenUri != nil {
		object["nrfAmfSetAccessTokenUri"], err = json.Marshal(a.NrfAmfSetAccessTokenUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAmfSetAccessTokenUri': %w", err)
		}
	}

	if a.NrfAmfSetNfMgtUri != nil {
		object["nrfAmfSetNfMgtUri"], err = json.Marshal(a.NrfAmfSetNfMgtUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAmfSetNfMgtUri': %w", err)
		}
	}

	if a.NsiInformation != nil {
		object["nsiInformation"], err = json.Marshal(a.NsiInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiInformation': %w", err)
		}
	}

	if len(a.RejectedNssaiInPlmn) != 0 {
		object["rejectedNssaiInPlmn"], err = json.Marshal(a.RejectedNssaiInPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rejectedNssaiInPlmn': %w", err)
		}
	}

	if len(a.RejectedNssaiInTa) != 0 {
		object["rejectedNssaiInTa"], err = json.Marshal(a.RejectedNssaiInTa)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rejectedNssaiInTa': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.TargetAmfServiceSet != nil {
		object["targetAmfServiceSet"], err = json.Marshal(a.TargetAmfServiceSet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetAmfServiceSet': %w", err)
		}
	}

	if len(a.TargetAmfSet) != 0 {
		object["targetAmfSet"], err = json.Marshal(a.TargetAmfSet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetAmfSet': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizedNssaiAvailabilityData. Returns the specified
// element and whether it was found
func (a AuthorizedNssaiAvailabilityData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizedNssaiAvailabilityData
func (a *AuthorizedNssaiAvailabilityData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizedNssaiAvailabilityData to handle AdditionalProperties
func (a *AuthorizedNssaiAvailabilityData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["restrictedSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.RestrictedSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedSnssaiList': %w", err)
		}
		delete(object, "restrictedSnssaiList")
	}

	if raw, found := object["supportedSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.SupportedSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'supportedSnssaiList': %w", err)
		}
		delete(object, "supportedSnssaiList")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["taiRangeList"]; found {
		err = json.Unmarshal(raw, &a.TaiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'taiRangeList': %w", err)
		}
		delete(object, "taiRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizedNssaiAvailabilityData to handle AdditionalProperties
func (a AuthorizedNssaiAvailabilityData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.RestrictedSnssaiList) != 0 {
		object["restrictedSnssaiList"], err = json.Marshal(a.RestrictedSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedSnssaiList': %w", err)
		}
	}

	object["supportedSnssaiList"], err = json.Marshal(a.SupportedSnssaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supportedSnssaiList': %w", err)
	}

	object["tai"], err = json.Marshal(a.Tai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tai': %w", err)
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	if len(a.TaiRangeList) != 0 {
		object["taiRangeList"], err = json.Marshal(a.TaiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiRangeList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizedNssaiAvailabilityInfo. Returns the specified
// element and whether it was found
func (a AuthorizedNssaiAvailabilityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizedNssaiAvailabilityInfo
func (a *AuthorizedNssaiAvailabilityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizedNssaiAvailabilityInfo to handle AdditionalProperties
func (a *AuthorizedNssaiAvailabilityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authorizedNssaiAvailabilityData"]; found {
		err = json.Unmarshal(raw, &a.AuthorizedNssaiAvailabilityData)
		if err != nil {
			return fmt.Errorf("error reading 'authorizedNssaiAvailabilityData': %w", err)
		}
		delete(object, "authorizedNssaiAvailabilityData")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizedNssaiAvailabilityInfo to handle AdditionalProperties
func (a AuthorizedNssaiAvailabilityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authorizedNssaiAvailabilityData"], err = json.Marshal(a.AuthorizedNssaiAvailabilityData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authorizedNssaiAvailabilityData': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Av5GHeAka. Returns the specified
// element and whether it was found
func (a Av5GHeAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Av5GHeAka
func (a *Av5GHeAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Av5GHeAka to handle AdditionalProperties
func (a *Av5GHeAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["kausf"]; found {
		err = json.Unmarshal(raw, &a.Kausf)
		if err != nil {
			return fmt.Errorf("error reading 'kausf': %w", err)
		}
		delete(object, "kausf")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xresStar"]; found {
		err = json.Unmarshal(raw, &a.XresStar)
		if err != nil {
			return fmt.Errorf("error reading 'xresStar': %w", err)
		}
		delete(object, "xresStar")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Av5GHeAka to handle AdditionalProperties
func (a Av5GHeAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["kausf"], err = json.Marshal(a.Kausf)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'kausf': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xresStar"], err = json.Marshal(a.XresStar)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xresStar': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Av5gAka. Returns the specified
// element and whether it was found
func (a Av5gAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Av5gAka
func (a *Av5gAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Av5gAka to handle AdditionalProperties
func (a *Av5gAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["hxresStar"]; found {
		err = json.Unmarshal(raw, &a.HxresStar)
		if err != nil {
			return fmt.Errorf("error reading 'hxresStar': %w", err)
		}
		delete(object, "hxresStar")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Av5gAka to handle AdditionalProperties
func (a Av5gAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["hxresStar"], err = json.Marshal(a.HxresStar)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hxresStar': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AvEapAkaPrime. Returns the specified
// element and whether it was found
func (a AvEapAkaPrime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AvEapAkaPrime
func (a *AvEapAkaPrime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AvEapAkaPrime to handle AdditionalProperties
func (a *AvEapAkaPrime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["ckPrime"]; found {
		err = json.Unmarshal(raw, &a.CkPrime)
		if err != nil {
			return fmt.Errorf("error reading 'ckPrime': %w", err)
		}
		delete(object, "ckPrime")
	}

	if raw, found := object["ikPrime"]; found {
		err = json.Unmarshal(raw, &a.IkPrime)
		if err != nil {
			return fmt.Errorf("error reading 'ikPrime': %w", err)
		}
		delete(object, "ikPrime")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xres"]; found {
		err = json.Unmarshal(raw, &a.Xres)
		if err != nil {
			return fmt.Errorf("error reading 'xres': %w", err)
		}
		delete(object, "xres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AvEapAkaPrime to handle AdditionalProperties
func (a AvEapAkaPrime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["ckPrime"], err = json.Marshal(a.CkPrime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ckPrime': %w", err)
	}

	object["ikPrime"], err = json.Marshal(a.IkPrime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ikPrime': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xres"], err = json.Marshal(a.Xres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AvEpsAka. Returns the specified
// element and whether it was found
func (a AvEpsAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AvEpsAka
func (a *AvEpsAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AvEpsAka to handle AdditionalProperties
func (a *AvEpsAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["kasme"]; found {
		err = json.Unmarshal(raw, &a.Kasme)
		if err != nil {
			return fmt.Errorf("error reading 'kasme': %w", err)
		}
		delete(object, "kasme")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xres"]; found {
		err = json.Unmarshal(raw, &a.Xres)
		if err != nil {
			return fmt.Errorf("error reading 'xres': %w", err)
		}
		delete(object, "xres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AvEpsAka to handle AdditionalProperties
func (a AvEpsAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["kasme"], err = json.Marshal(a.Kasme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'kasme': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xres"], err = json.Marshal(a.Xres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AvImsGbaEapAka. Returns the specified
// element and whether it was found
func (a AvImsGbaEapAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AvImsGbaEapAka
func (a *AvImsGbaEapAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AvImsGbaEapAka to handle AdditionalProperties
func (a *AvImsGbaEapAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["ck"]; found {
		err = json.Unmarshal(raw, &a.Ck)
		if err != nil {
			return fmt.Errorf("error reading 'ck': %w", err)
		}
		delete(object, "ck")
	}

	if raw, found := object["ik"]; found {
		err = json.Unmarshal(raw, &a.Ik)
		if err != nil {
			return fmt.Errorf("error reading 'ik': %w", err)
		}
		delete(object, "ik")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xres"]; found {
		err = json.Unmarshal(raw, &a.Xres)
		if err != nil {
			return fmt.Errorf("error reading 'xres': %w", err)
		}
		delete(object, "xres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AvImsGbaEapAka to handle AdditionalProperties
func (a AvImsGbaEapAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["ck"], err = json.Marshal(a.Ck)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ck': %w", err)
	}

	object["ik"], err = json.Marshal(a.Ik)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ik': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xres"], err = json.Marshal(a.Xres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BackupAmfInfo. Returns the specified
// element and whether it was found
func (a BackupAmfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BackupAmfInfo
func (a *BackupAmfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BackupAmfInfo to handle AdditionalProperties
func (a *BackupAmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backupAmf"]; found {
		err = json.Unmarshal(raw, &a.BackupAmf)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmf': %w", err)
		}
		delete(object, "backupAmf")
	}

	if raw, found := object["guamiList"]; found {
		err = json.Unmarshal(raw, &a.GuamiList)
		if err != nil {
			return fmt.Errorf("error reading 'guamiList': %w", err)
		}
		delete(object, "guamiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BackupAmfInfo to handle AdditionalProperties
func (a BackupAmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["backupAmf"], err = json.Marshal(a.BackupAmf)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'backupAmf': %w", err)
	}

	if len(a.GuamiList) != 0 {
		object["guamiList"], err = json.Marshal(a.GuamiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guamiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatteryIndication. Returns the specified
// element and whether it was found
func (a BatteryIndication) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatteryIndication
func (a *BatteryIndication) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatteryIndication to handle AdditionalProperties
func (a *BatteryIndication) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryInd"]; found {
		err = json.Unmarshal(raw, &a.BatteryInd)
		if err != nil {
			return fmt.Errorf("error reading 'batteryInd': %w", err)
		}
		delete(object, "batteryInd")
	}

	if raw, found := object["rechargeableInd"]; found {
		err = json.Unmarshal(raw, &a.RechargeableInd)
		if err != nil {
			return fmt.Errorf("error reading 'rechargeableInd': %w", err)
		}
		delete(object, "rechargeableInd")
	}

	if raw, found := object["replaceableInd"]; found {
		err = json.Unmarshal(raw, &a.ReplaceableInd)
		if err != nil {
			return fmt.Errorf("error reading 'replaceableInd': %w", err)
		}
		delete(object, "replaceableInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatteryIndication to handle AdditionalProperties
func (a BatteryIndication) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryInd != nil {
		object["batteryInd"], err = json.Marshal(a.BatteryInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryInd': %w", err)
		}
	}

	if a.RechargeableInd != nil {
		object["rechargeableInd"], err = json.Marshal(a.RechargeableInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rechargeableInd': %w", err)
		}
	}

	if a.ReplaceableInd != nil {
		object["replaceableInd"], err = json.Marshal(a.ReplaceableInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'replaceableInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatteryIndicationRm. Returns the specified
// element and whether it was found
func (a BatteryIndicationRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatteryIndicationRm
func (a *BatteryIndicationRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatteryIndicationRm to handle AdditionalProperties
func (a *BatteryIndicationRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryInd"]; found {
		err = json.Unmarshal(raw, &a.BatteryInd)
		if err != nil {
			return fmt.Errorf("error reading 'batteryInd': %w", err)
		}
		delete(object, "batteryInd")
	}

	if raw, found := object["rechargeableInd"]; found {
		err = json.Unmarshal(raw, &a.RechargeableInd)
		if err != nil {
			return fmt.Errorf("error reading 'rechargeableInd': %w", err)
		}
		delete(object, "rechargeableInd")
	}

	if raw, found := object["replaceableInd"]; found {
		err = json.Unmarshal(raw, &a.ReplaceableInd)
		if err != nil {
			return fmt.Errorf("error reading 'replaceableInd': %w", err)
		}
		delete(object, "replaceableInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatteryIndicationRm to handle AdditionalProperties
func (a BatteryIndicationRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryInd != nil {
		object["batteryInd"], err = json.Marshal(a.BatteryInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryInd': %w", err)
		}
	}

	if a.RechargeableInd != nil {
		object["rechargeableInd"], err = json.Marshal(a.RechargeableInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rechargeableInd': %w", err)
		}
	}

	if a.ReplaceableInd != nil {
		object["replaceableInd"], err = json.Marshal(a.ReplaceableInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'replaceableInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtData. Returns the specified
// element and whether it was found
func (a BdtData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtData
func (a *BdtData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtData to handle AdditionalProperties
func (a *BdtData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["bdtpStatus"]; found {
		err = json.Unmarshal(raw, &a.BdtpStatus)
		if err != nil {
			return fmt.Errorf("error reading 'bdtpStatus': %w", err)
		}
		delete(object, "bdtpStatus")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["numOfUes"]; found {
		err = json.Unmarshal(raw, &a.NumOfUes)
		if err != nil {
			return fmt.Errorf("error reading 'numOfUes': %w", err)
		}
		delete(object, "numOfUes")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["trafficDes"]; found {
		err = json.Unmarshal(raw, &a.TrafficDes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficDes': %w", err)
		}
		delete(object, "trafficDes")
	}

	if raw, found := object["transPolicy"]; found {
		err = json.Unmarshal(raw, &a.TransPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'transPolicy': %w", err)
		}
		delete(object, "transPolicy")
	}

	if raw, found := object["volPerUe"]; found {
		err = json.Unmarshal(raw, &a.VolPerUe)
		if err != nil {
			return fmt.Errorf("error reading 'volPerUe': %w", err)
		}
		delete(object, "volPerUe")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtData to handle AdditionalProperties
func (a BdtData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["aspId"], err = json.Marshal(a.AspId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	if a.BdtpStatus != nil {
		object["bdtpStatus"], err = json.Marshal(a.BdtpStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtpStatus': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.NumOfUes != nil {
		object["numOfUes"], err = json.Marshal(a.NumOfUes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numOfUes': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TrafficDes != nil {
		object["trafficDes"], err = json.Marshal(a.TrafficDes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficDes': %w", err)
		}
	}

	object["transPolicy"], err = json.Marshal(a.TransPolicy)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'transPolicy': %w", err)
	}

	if a.VolPerUe != nil {
		object["volPerUe"], err = json.Marshal(a.VolPerUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'volPerUe': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtDataPatch. Returns the specified
// element and whether it was found
func (a BdtDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtDataPatch
func (a *BdtDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtDataPatch to handle AdditionalProperties
func (a *BdtDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtpStatus"]; found {
		err = json.Unmarshal(raw, &a.BdtpStatus)
		if err != nil {
			return fmt.Errorf("error reading 'bdtpStatus': %w", err)
		}
		delete(object, "bdtpStatus")
	}

	if raw, found := object["transPolicy"]; found {
		err = json.Unmarshal(raw, &a.TransPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'transPolicy': %w", err)
		}
		delete(object, "transPolicy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtDataPatch to handle AdditionalProperties
func (a BdtDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtpStatus != nil {
		object["bdtpStatus"], err = json.Marshal(a.BdtpStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtpStatus': %w", err)
		}
	}

	if a.TransPolicy != nil {
		object["transPolicy"], err = json.Marshal(a.TransPolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'transPolicy': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtPolicy. Returns the specified
// element and whether it was found
func (a BdtPolicy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicy
func (a *BdtPolicy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicy to handle AdditionalProperties
func (a *BdtPolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtPolData"]; found {
		err = json.Unmarshal(raw, &a.BdtPolData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtPolData': %w", err)
		}
		delete(object, "bdtPolData")
	}

	if raw, found := object["bdtReqData"]; found {
		err = json.Unmarshal(raw, &a.BdtReqData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtReqData': %w", err)
		}
		delete(object, "bdtReqData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicy to handle AdditionalProperties
func (a BdtPolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtPolData != nil {
		object["bdtPolData"], err = json.Marshal(a.BdtPolData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtPolData': %w", err)
		}
	}

	if a.BdtReqData != nil {
		object["bdtReqData"], err = json.Marshal(a.BdtReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtReqData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtPolicyData. Returns the specified
// element and whether it was found
func (a BdtPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicyData
func (a *BdtPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicyData to handle AdditionalProperties
func (a *BdtPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicyData to handle AdditionalProperties
func (a BdtPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtPolicyDataPatch. Returns the specified
// element and whether it was found
func (a BdtPolicyDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicyDataPatch
func (a *BdtPolicyDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicyDataPatch to handle AdditionalProperties
func (a *BdtPolicyDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicyDataPatch to handle AdditionalProperties
func (a BdtPolicyDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtReqData. Returns the specified
// element and whether it was found
func (a BdtReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtReqData
func (a *BdtReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtReqData to handle AdditionalProperties
func (a *BdtReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["desTimeInt"]; found {
		err = json.Unmarshal(raw, &a.DesTimeInt)
		if err != nil {
			return fmt.Errorf("error reading 'desTimeInt': %w", err)
		}
		delete(object, "desTimeInt")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["numOfUes"]; found {
		err = json.Unmarshal(raw, &a.NumOfUes)
		if err != nil {
			return fmt.Errorf("error reading 'numOfUes': %w", err)
		}
		delete(object, "numOfUes")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["trafficDes"]; found {
		err = json.Unmarshal(raw, &a.TrafficDes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficDes': %w", err)
		}
		delete(object, "trafficDes")
	}

	if raw, found := object["volPerUe"]; found {
		err = json.Unmarshal(raw, &a.VolPerUe)
		if err != nil {
			return fmt.Errorf("error reading 'volPerUe': %w", err)
		}
		delete(object, "volPerUe")
	}

	if raw, found := object["warnNotifReq"]; found {
		err = json.Unmarshal(raw, &a.WarnNotifReq)
		if err != nil {
			return fmt.Errorf("error reading 'warnNotifReq': %w", err)
		}
		delete(object, "warnNotifReq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtReqData to handle AdditionalProperties
func (a BdtReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["aspId"], err = json.Marshal(a.AspId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
	}

	object["desTimeInt"], err = json.Marshal(a.DesTimeInt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'desTimeInt': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.NotifUri != nil {
		object["notifUri"], err = json.Marshal(a.NotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
		}
	}

	object["numOfUes"], err = json.Marshal(a.NumOfUes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'numOfUes': %w", err)
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TrafficDes != nil {
		object["trafficDes"], err = json.Marshal(a.TrafficDes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficDes': %w", err)
		}
	}

	object["volPerUe"], err = json.Marshal(a.VolPerUe)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'volPerUe': %w", err)
	}

	if a.WarnNotifReq != nil {
		object["warnNotifReq"], err = json.Marshal(a.WarnNotifReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'warnNotifReq': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtReqDataPatch. Returns the specified
// element and whether it was found
func (a BdtReqDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtReqDataPatch
func (a *BdtReqDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtReqDataPatch to handle AdditionalProperties
func (a *BdtReqDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["warnNotifReq"]; found {
		err = json.Unmarshal(raw, &a.WarnNotifReq)
		if err != nil {
			return fmt.Errorf("error reading 'warnNotifReq': %w", err)
		}
		delete(object, "warnNotifReq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtReqDataPatch to handle AdditionalProperties
func (a BdtReqDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.WarnNotifReq != nil {
		object["warnNotifReq"], err = json.Marshal(a.WarnNotifReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'warnNotifReq': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BindingResp. Returns the specified
// element and whether it was found
func (a BindingResp) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BindingResp
func (a *BindingResp) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BindingResp to handle AdditionalProperties
func (a *BindingResp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pcfSmFqdn"]; found {
		err = json.Unmarshal(raw, &a.PcfSmFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSmFqdn': %w", err)
		}
		delete(object, "pcfSmFqdn")
	}

	if raw, found := object["pcfSmIpEndPoints"]; found {
		err = json.Unmarshal(raw, &a.PcfSmIpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSmIpEndPoints': %w", err)
		}
		delete(object, "pcfSmIpEndPoints")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BindingResp to handle AdditionalProperties
func (a BindingResp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PcfSmFqdn != nil {
		object["pcfSmFqdn"], err = json.Marshal(a.PcfSmFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSmFqdn': %w", err)
		}
	}

	if len(a.PcfSmIpEndPoints) != 0 {
		object["pcfSmIpEndPoints"], err = json.Marshal(a.PcfSmIpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSmIpEndPoints': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BootstrappingInfo. Returns the specified
// element and whether it was found
func (a BootstrappingInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BootstrappingInfo
func (a *BootstrappingInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BootstrappingInfo to handle AdditionalProperties
func (a *BootstrappingInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading '_links': %w", err)
		}
		delete(object, "_links")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BootstrappingInfo to handle AdditionalProperties
func (a BootstrappingInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["_links"], err = json.Marshal(a.Links)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '_links': %w", err)
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BridgeManagementContainer. Returns the specified
// element and whether it was found
func (a BridgeManagementContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BridgeManagementContainer
func (a *BridgeManagementContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BridgeManagementContainer to handle AdditionalProperties
func (a *BridgeManagementContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.BridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'bridgeManCont': %w", err)
		}
		delete(object, "bridgeManCont")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BridgeManagementContainer to handle AdditionalProperties
func (a BridgeManagementContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bridgeManCont"], err = json.Marshal(a.BridgeManCont)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bridgeManCont': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BsfInfo. Returns the specified
// element and whether it was found
func (a BsfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BsfInfo
func (a *BsfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BsfInfo to handle AdditionalProperties
func (a *BsfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnList"]; found {
		err = json.Unmarshal(raw, &a.DnnList)
		if err != nil {
			return fmt.Errorf("error reading 'dnnList': %w", err)
		}
		delete(object, "dnnList")
	}

	if raw, found := object["ipDomainList"]; found {
		err = json.Unmarshal(raw, &a.IpDomainList)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomainList': %w", err)
		}
		delete(object, "ipDomainList")
	}

	if raw, found := object["ipv4AddressRanges"]; found {
		err = json.Unmarshal(raw, &a.Ipv4AddressRanges)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4AddressRanges': %w", err)
		}
		delete(object, "ipv4AddressRanges")
	}

	if raw, found := object["ipv6PrefixRanges"]; found {
		err = json.Unmarshal(raw, &a.Ipv6PrefixRanges)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6PrefixRanges': %w", err)
		}
		delete(object, "ipv6PrefixRanges")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BsfInfo to handle AdditionalProperties
func (a BsfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnnList) != 0 {
		object["dnnList"], err = json.Marshal(a.DnnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnList': %w", err)
		}
	}

	if len(a.IpDomainList) != 0 {
		object["ipDomainList"], err = json.Marshal(a.IpDomainList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomainList': %w", err)
		}
	}

	if len(a.Ipv4AddressRanges) != 0 {
		object["ipv4AddressRanges"], err = json.Marshal(a.Ipv4AddressRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4AddressRanges': %w", err)
		}
	}

	if len(a.Ipv6PrefixRanges) != 0 {
		object["ipv6PrefixRanges"], err = json.Marshal(a.Ipv6PrefixRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6PrefixRanges': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CagAckData. Returns the specified
// element and whether it was found
func (a CagAckData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CagAckData
func (a *CagAckData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CagAckData to handle AdditionalProperties
func (a *CagAckData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CagAckData to handle AdditionalProperties
func (a CagAckData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CagData. Returns the specified
// element and whether it was found
func (a CagData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CagData
func (a *CagData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CagData to handle AdditionalProperties
func (a *CagData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cagInfos"]; found {
		err = json.Unmarshal(raw, &a.CagInfos)
		if err != nil {
			return fmt.Errorf("error reading 'cagInfos': %w", err)
		}
		delete(object, "cagInfos")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CagData to handle AdditionalProperties
func (a CagData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cagInfos"], err = json.Marshal(a.CagInfos)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cagInfos': %w", err)
	}

	if a.ProvisioningTime != nil {
		object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CagInfo. Returns the specified
// element and whether it was found
func (a CagInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CagInfo
func (a *CagInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CagInfo to handle AdditionalProperties
func (a *CagInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedCagList"]; found {
		err = json.Unmarshal(raw, &a.AllowedCagList)
		if err != nil {
			return fmt.Errorf("error reading 'allowedCagList': %w", err)
		}
		delete(object, "allowedCagList")
	}

	if raw, found := object["cagOnlyIndicator"]; found {
		err = json.Unmarshal(raw, &a.CagOnlyIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'cagOnlyIndicator': %w", err)
		}
		delete(object, "cagOnlyIndicator")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CagInfo to handle AdditionalProperties
func (a CagInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedCagList"], err = json.Marshal(a.AllowedCagList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedCagList': %w", err)
	}

	if a.CagOnlyIndicator != nil {
		object["cagOnlyIndicator"], err = json.Marshal(a.CagOnlyIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cagOnlyIndicator': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CancelPosInfo. Returns the specified
// element and whether it was found
func (a CancelPosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CancelPosInfo
func (a *CancelPosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CancelPosInfo to handle AdditionalProperties
func (a *CancelPosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hgmlcCallBackURI"]; found {
		err = json.Unmarshal(raw, &a.HgmlcCallBackURI)
		if err != nil {
			return fmt.Errorf("error reading 'hgmlcCallBackURI': %w", err)
		}
		delete(object, "hgmlcCallBackURI")
	}

	if raw, found := object["ldrReference"]; found {
		err = json.Unmarshal(raw, &a.LdrReference)
		if err != nil {
			return fmt.Errorf("error reading 'ldrReference': %w", err)
		}
		delete(object, "ldrReference")
	}

	if raw, found := object["servingLMFIdentification"]; found {
		err = json.Unmarshal(raw, &a.ServingLMFIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'servingLMFIdentification': %w", err)
		}
		delete(object, "servingLMFIdentification")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CancelPosInfo to handle AdditionalProperties
func (a CancelPosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hgmlcCallBackURI"], err = json.Marshal(a.HgmlcCallBackURI)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hgmlcCallBackURI': %w", err)
	}

	object["ldrReference"], err = json.Marshal(a.LdrReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ldrReference': %w", err)
	}

	if a.ServingLMFIdentification != nil {
		object["servingLMFIdentification"], err = json.Marshal(a.ServingLMFIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingLMFIdentification': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CandidateForReplacement. Returns the specified
// element and whether it was found
func (a CandidateForReplacement) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CandidateForReplacement
func (a *CandidateForReplacement) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CandidateForReplacement to handle AdditionalProperties
func (a *CandidateForReplacement) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnns"]; found {
		err = json.Unmarshal(raw, &a.Dnns)
		if err != nil {
			return fmt.Errorf("error reading 'dnns': %w", err)
		}
		delete(object, "dnns")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CandidateForReplacement to handle AdditionalProperties
func (a CandidateForReplacement) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnns"], err = json.Marshal(a.Dnns)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnns': %w", err)
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CeModeBInd. Returns the specified
// element and whether it was found
func (a CeModeBInd) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CeModeBInd
func (a *CeModeBInd) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CeModeBInd to handle AdditionalProperties
func (a *CeModeBInd) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ceModeBSupportInd"]; found {
		err = json.Unmarshal(raw, &a.CeModeBSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'ceModeBSupportInd': %w", err)
		}
		delete(object, "ceModeBSupportInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CeModeBInd to handle AdditionalProperties
func (a CeModeBInd) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ceModeBSupportInd"], err = json.Marshal(a.CeModeBSupportInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ceModeBSupportInd': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CellGlobalId. Returns the specified
// element and whether it was found
func (a CellGlobalId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CellGlobalId
func (a *CellGlobalId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CellGlobalId to handle AdditionalProperties
func (a *CellGlobalId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellId"]; found {
		err = json.Unmarshal(raw, &a.CellId)
		if err != nil {
			return fmt.Errorf("error reading 'cellId': %w", err)
		}
		delete(object, "cellId")
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CellGlobalId to handle AdditionalProperties
func (a CellGlobalId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cellId"], err = json.Marshal(a.CellId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cellId': %w", err)
	}

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChangeItem. Returns the specified
// element and whether it was found
func (a ChangeItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChangeItem
func (a *ChangeItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChangeItem to handle AdditionalProperties
func (a *ChangeItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["from"]; found {
		err = json.Unmarshal(raw, &a.From)
		if err != nil {
			return fmt.Errorf("error reading 'from': %w", err)
		}
		delete(object, "from")
	}

	if raw, found := object["newValue"]; found {
		err = json.Unmarshal(raw, &a.NewValue)
		if err != nil {
			return fmt.Errorf("error reading 'newValue': %w", err)
		}
		delete(object, "newValue")
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["origValue"]; found {
		err = json.Unmarshal(raw, &a.OrigValue)
		if err != nil {
			return fmt.Errorf("error reading 'origValue': %w", err)
		}
		delete(object, "origValue")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChangeItem to handle AdditionalProperties
func (a ChangeItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.From != nil {
		object["from"], err = json.Marshal(a.From)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'from': %w", err)
		}
	}

	if a.NewValue != nil {
		object["newValue"], err = json.Marshal(a.NewValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newValue': %w", err)
		}
	}

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	if a.OrigValue != nil {
		object["origValue"], err = json.Marshal(a.OrigValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'origValue': %w", err)
		}
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChangeOfSupiPeiAssociationReport. Returns the specified
// element and whether it was found
func (a ChangeOfSupiPeiAssociationReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChangeOfSupiPeiAssociationReport
func (a *ChangeOfSupiPeiAssociationReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChangeOfSupiPeiAssociationReport to handle AdditionalProperties
func (a *ChangeOfSupiPeiAssociationReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["newPei"]; found {
		err = json.Unmarshal(raw, &a.NewPei)
		if err != nil {
			return fmt.Errorf("error reading 'newPei': %w", err)
		}
		delete(object, "newPei")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChangeOfSupiPeiAssociationReport to handle AdditionalProperties
func (a ChangeOfSupiPeiAssociationReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["newPei"], err = json.Marshal(a.NewPei)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'newPei': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChargingData. Returns the specified
// element and whether it was found
func (a ChargingData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChargingData
func (a *ChargingData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChargingData to handle AdditionalProperties
func (a *ChargingData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afChargId"]; found {
		err = json.Unmarshal(raw, &a.AfChargId)
		if err != nil {
			return fmt.Errorf("error reading 'afChargId': %w", err)
		}
		delete(object, "afChargId")
	}

	if raw, found := object["afChargingIdentifier"]; found {
		err = json.Unmarshal(raw, &a.AfChargingIdentifier)
		if err != nil {
			return fmt.Errorf("error reading 'afChargingIdentifier': %w", err)
		}
		delete(object, "afChargingIdentifier")
	}

	if raw, found := object["appSvcProvId"]; found {
		err = json.Unmarshal(raw, &a.AppSvcProvId)
		if err != nil {
			return fmt.Errorf("error reading 'appSvcProvId': %w", err)
		}
		delete(object, "appSvcProvId")
	}

	if raw, found := object["chgId"]; found {
		err = json.Unmarshal(raw, &a.ChgId)
		if err != nil {
			return fmt.Errorf("error reading 'chgId': %w", err)
		}
		delete(object, "chgId")
	}

	if raw, found := object["meteringMethod"]; found {
		err = json.Unmarshal(raw, &a.MeteringMethod)
		if err != nil {
			return fmt.Errorf("error reading 'meteringMethod': %w", err)
		}
		delete(object, "meteringMethod")
	}

	if raw, found := object["offline"]; found {
		err = json.Unmarshal(raw, &a.Offline)
		if err != nil {
			return fmt.Errorf("error reading 'offline': %w", err)
		}
		delete(object, "offline")
	}

	if raw, found := object["online"]; found {
		err = json.Unmarshal(raw, &a.Online)
		if err != nil {
			return fmt.Errorf("error reading 'online': %w", err)
		}
		delete(object, "online")
	}

	if raw, found := object["ratingGroup"]; found {
		err = json.Unmarshal(raw, &a.RatingGroup)
		if err != nil {
			return fmt.Errorf("error reading 'ratingGroup': %w", err)
		}
		delete(object, "ratingGroup")
	}

	if raw, found := object["reportingLevel"]; found {
		err = json.Unmarshal(raw, &a.ReportingLevel)
		if err != nil {
			return fmt.Errorf("error reading 'reportingLevel': %w", err)
		}
		delete(object, "reportingLevel")
	}

	if raw, found := object["sdfHandl"]; found {
		err = json.Unmarshal(raw, &a.SdfHandl)
		if err != nil {
			return fmt.Errorf("error reading 'sdfHandl': %w", err)
		}
		delete(object, "sdfHandl")
	}

	if raw, found := object["serviceId"]; found {
		err = json.Unmarshal(raw, &a.ServiceId)
		if err != nil {
			return fmt.Errorf("error reading 'serviceId': %w", err)
		}
		delete(object, "serviceId")
	}

	if raw, found := object["sponsorId"]; found {
		err = json.Unmarshal(raw, &a.SponsorId)
		if err != nil {
			return fmt.Errorf("error reading 'sponsorId': %w", err)
		}
		delete(object, "sponsorId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChargingData to handle AdditionalProperties
func (a ChargingData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfChargId != nil {
		object["afChargId"], err = json.Marshal(a.AfChargId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afChargId': %w", err)
		}
	}

	if a.AfChargingIdentifier != nil {
		object["afChargingIdentifier"], err = json.Marshal(a.AfChargingIdentifier)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afChargingIdentifier': %w", err)
		}
	}

	if a.AppSvcProvId != nil {
		object["appSvcProvId"], err = json.Marshal(a.AppSvcProvId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appSvcProvId': %w", err)
		}
	}

	object["chgId"], err = json.Marshal(a.ChgId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'chgId': %w", err)
	}

	if a.MeteringMethod != nil {
		object["meteringMethod"], err = json.Marshal(a.MeteringMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'meteringMethod': %w", err)
		}
	}

	if a.Offline != nil {
		object["offline"], err = json.Marshal(a.Offline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'offline': %w", err)
		}
	}

	if a.Online != nil {
		object["online"], err = json.Marshal(a.Online)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'online': %w", err)
		}
	}

	if a.RatingGroup != nil {
		object["ratingGroup"], err = json.Marshal(a.RatingGroup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratingGroup': %w", err)
		}
	}

	if a.ReportingLevel != nil {
		object["reportingLevel"], err = json.Marshal(a.ReportingLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportingLevel': %w", err)
		}
	}

	if a.SdfHandl != nil {
		object["sdfHandl"], err = json.Marshal(a.SdfHandl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdfHandl': %w", err)
		}
	}

	if a.ServiceId != nil {
		object["serviceId"], err = json.Marshal(a.ServiceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceId': %w", err)
		}
	}

	if a.SponsorId != nil {
		object["sponsorId"], err = json.Marshal(a.SponsorId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponsorId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChargingInformation. Returns the specified
// element and whether it was found
func (a ChargingInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChargingInformation
func (a *ChargingInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChargingInformation to handle AdditionalProperties
func (a *ChargingInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["primaryChfAddress"]; found {
		err = json.Unmarshal(raw, &a.PrimaryChfAddress)
		if err != nil {
			return fmt.Errorf("error reading 'primaryChfAddress': %w", err)
		}
		delete(object, "primaryChfAddress")
	}

	if raw, found := object["primaryChfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.PrimaryChfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'primaryChfInstanceId': %w", err)
		}
		delete(object, "primaryChfInstanceId")
	}

	if raw, found := object["primaryChfSetId"]; found {
		err = json.Unmarshal(raw, &a.PrimaryChfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'primaryChfSetId': %w", err)
		}
		delete(object, "primaryChfSetId")
	}

	if raw, found := object["secondaryChfAddress"]; found {
		err = json.Unmarshal(raw, &a.SecondaryChfAddress)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryChfAddress': %w", err)
		}
		delete(object, "secondaryChfAddress")
	}

	if raw, found := object["secondaryChfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SecondaryChfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryChfInstanceId': %w", err)
		}
		delete(object, "secondaryChfInstanceId")
	}

	if raw, found := object["secondaryChfSetId"]; found {
		err = json.Unmarshal(raw, &a.SecondaryChfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryChfSetId': %w", err)
		}
		delete(object, "secondaryChfSetId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChargingInformation to handle AdditionalProperties
func (a ChargingInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["primaryChfAddress"], err = json.Marshal(a.PrimaryChfAddress)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'primaryChfAddress': %w", err)
	}

	if a.PrimaryChfInstanceId != nil {
		object["primaryChfInstanceId"], err = json.Marshal(a.PrimaryChfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'primaryChfInstanceId': %w", err)
		}
	}

	if a.PrimaryChfSetId != nil {
		object["primaryChfSetId"], err = json.Marshal(a.PrimaryChfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'primaryChfSetId': %w", err)
		}
	}

	object["secondaryChfAddress"], err = json.Marshal(a.SecondaryChfAddress)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'secondaryChfAddress': %w", err)
	}

	if a.SecondaryChfInstanceId != nil {
		object["secondaryChfInstanceId"], err = json.Marshal(a.SecondaryChfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryChfInstanceId': %w", err)
		}
	}

	if a.SecondaryChfSetId != nil {
		object["secondaryChfSetId"], err = json.Marshal(a.SecondaryChfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryChfSetId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ChfInfo. Returns the specified
// element and whether it was found
func (a ChfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ChfInfo
func (a *ChfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ChfInfo to handle AdditionalProperties
func (a *ChfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsiRangeList"]; found {
		err = json.Unmarshal(raw, &a.GpsiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiRangeList': %w", err)
		}
		delete(object, "gpsiRangeList")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["plmnRangeList"]; found {
		err = json.Unmarshal(raw, &a.PlmnRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'plmnRangeList': %w", err)
		}
		delete(object, "plmnRangeList")
	}

	if raw, found := object["primaryChfInstance"]; found {
		err = json.Unmarshal(raw, &a.PrimaryChfInstance)
		if err != nil {
			return fmt.Errorf("error reading 'primaryChfInstance': %w", err)
		}
		delete(object, "primaryChfInstance")
	}

	if raw, found := object["secondaryChfInstance"]; found {
		err = json.Unmarshal(raw, &a.SecondaryChfInstance)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryChfInstance': %w", err)
		}
		delete(object, "secondaryChfInstance")
	}

	if raw, found := object["supiRangeList"]; found {
		err = json.Unmarshal(raw, &a.SupiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'supiRangeList': %w", err)
		}
		delete(object, "supiRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ChfInfo to handle AdditionalProperties
func (a ChfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GpsiRangeList) != 0 {
		object["gpsiRangeList"], err = json.Marshal(a.GpsiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiRangeList': %w", err)
		}
	}

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if len(a.PlmnRangeList) != 0 {
		object["plmnRangeList"], err = json.Marshal(a.PlmnRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnRangeList': %w", err)
		}
	}

	if a.PrimaryChfInstance != nil {
		object["primaryChfInstance"], err = json.Marshal(a.PrimaryChfInstance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'primaryChfInstance': %w", err)
		}
	}

	if a.SecondaryChfInstance != nil {
		object["secondaryChfInstance"], err = json.Marshal(a.SecondaryChfInstance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryChfInstance': %w", err)
		}
	}

	if len(a.SupiRangeList) != 0 {
		object["supiRangeList"], err = json.Marshal(a.SupiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiRangeList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CmInfo. Returns the specified
// element and whether it was found
func (a CmInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CmInfo
func (a *CmInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CmInfo to handle AdditionalProperties
func (a *CmInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["cmState"]; found {
		err = json.Unmarshal(raw, &a.CmState)
		if err != nil {
			return fmt.Errorf("error reading 'cmState': %w", err)
		}
		delete(object, "cmState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CmInfo to handle AdditionalProperties
func (a CmInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	object["cmState"], err = json.Marshal(a.CmState)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cmState': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CmInfoReport. Returns the specified
// element and whether it was found
func (a CmInfoReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CmInfoReport
func (a *CmInfoReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CmInfoReport to handle AdditionalProperties
func (a *CmInfoReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["newCmInfoList"]; found {
		err = json.Unmarshal(raw, &a.NewCmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'newCmInfoList': %w", err)
		}
		delete(object, "newCmInfoList")
	}

	if raw, found := object["oldCmInfoList"]; found {
		err = json.Unmarshal(raw, &a.OldCmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'oldCmInfoList': %w", err)
		}
		delete(object, "oldCmInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CmInfoReport to handle AdditionalProperties
func (a CmInfoReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["newCmInfoList"], err = json.Marshal(a.NewCmInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'newCmInfoList': %w", err)
	}

	if len(a.OldCmInfoList) != 0 {
		object["oldCmInfoList"], err = json.Marshal(a.OldCmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldCmInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CnAssistedRanPara. Returns the specified
// element and whether it was found
func (a CnAssistedRanPara) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CnAssistedRanPara
func (a *CnAssistedRanPara) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CnAssistedRanPara to handle AdditionalProperties
func (a *CnAssistedRanPara) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryIndication"]; found {
		err = json.Unmarshal(raw, &a.BatteryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'batteryIndication': %w", err)
		}
		delete(object, "batteryIndication")
	}

	if raw, found := object["communicationDurationTime"]; found {
		err = json.Unmarshal(raw, &a.CommunicationDurationTime)
		if err != nil {
			return fmt.Errorf("error reading 'communicationDurationTime': %w", err)
		}
		delete(object, "communicationDurationTime")
	}

	if raw, found := object["periodicTime"]; found {
		err = json.Unmarshal(raw, &a.PeriodicTime)
		if err != nil {
			return fmt.Errorf("error reading 'periodicTime': %w", err)
		}
		delete(object, "periodicTime")
	}

	if raw, found := object["scheduledCommunicationTime"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationTime)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationTime': %w", err)
		}
		delete(object, "scheduledCommunicationTime")
	}

	if raw, found := object["scheduledCommunicationType"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationType)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationType': %w", err)
		}
		delete(object, "scheduledCommunicationType")
	}

	if raw, found := object["stationaryIndication"]; found {
		err = json.Unmarshal(raw, &a.StationaryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'stationaryIndication': %w", err)
		}
		delete(object, "stationaryIndication")
	}

	if raw, found := object["trafficProfile"]; found {
		err = json.Unmarshal(raw, &a.TrafficProfile)
		if err != nil {
			return fmt.Errorf("error reading 'trafficProfile': %w", err)
		}
		delete(object, "trafficProfile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CnAssistedRanPara to handle AdditionalProperties
func (a CnAssistedRanPara) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryIndication != nil {
		object["batteryIndication"], err = json.Marshal(a.BatteryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryIndication': %w", err)
		}
	}

	if a.CommunicationDurationTime != nil {
		object["communicationDurationTime"], err = json.Marshal(a.CommunicationDurationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'communicationDurationTime': %w", err)
		}
	}

	if a.PeriodicTime != nil {
		object["periodicTime"], err = json.Marshal(a.PeriodicTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicTime': %w", err)
		}
	}

	if a.ScheduledCommunicationTime != nil {
		object["scheduledCommunicationTime"], err = json.Marshal(a.ScheduledCommunicationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationTime': %w", err)
		}
	}

	if a.ScheduledCommunicationType != nil {
		object["scheduledCommunicationType"], err = json.Marshal(a.ScheduledCommunicationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationType': %w", err)
		}
	}

	if a.StationaryIndication != nil {
		object["stationaryIndication"], err = json.Marshal(a.StationaryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stationaryIndication': %w", err)
		}
	}

	if a.TrafficProfile != nil {
		object["trafficProfile"], err = json.Marshal(a.TrafficProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficProfile': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CnTypeChangeReport. Returns the specified
// element and whether it was found
func (a CnTypeChangeReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CnTypeChangeReport
func (a *CnTypeChangeReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CnTypeChangeReport to handle AdditionalProperties
func (a *CnTypeChangeReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["newCnType"]; found {
		err = json.Unmarshal(raw, &a.NewCnType)
		if err != nil {
			return fmt.Errorf("error reading 'newCnType': %w", err)
		}
		delete(object, "newCnType")
	}

	if raw, found := object["oldCnType"]; found {
		err = json.Unmarshal(raw, &a.OldCnType)
		if err != nil {
			return fmt.Errorf("error reading 'oldCnType': %w", err)
		}
		delete(object, "oldCnType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CnTypeChangeReport to handle AdditionalProperties
func (a CnTypeChangeReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["newCnType"], err = json.Marshal(a.NewCnType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'newCnType': %w", err)
	}

	if a.OldCnType != nil {
		object["oldCnType"], err = json.Marshal(a.OldCnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldCnType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Cnf. Returns the specified
// element and whether it was found
func (a Cnf) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Cnf
func (a *Cnf) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Cnf to handle AdditionalProperties
func (a *Cnf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cnfUnits"]; found {
		err = json.Unmarshal(raw, &a.CnfUnits)
		if err != nil {
			return fmt.Errorf("error reading 'cnfUnits': %w", err)
		}
		delete(object, "cnfUnits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Cnf to handle AdditionalProperties
func (a Cnf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cnfUnits"], err = json.Marshal(a.CnfUnits)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cnfUnits': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CnfUnit. Returns the specified
// element and whether it was found
func (a CnfUnit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CnfUnit
func (a *CnfUnit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CnfUnit to handle AdditionalProperties
func (a *CnfUnit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cnfUnit"]; found {
		err = json.Unmarshal(raw, &a.CnfUnit)
		if err != nil {
			return fmt.Errorf("error reading 'cnfUnit': %w", err)
		}
		delete(object, "cnfUnit")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CnfUnit to handle AdditionalProperties
func (a CnfUnit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cnfUnit"], err = json.Marshal(a.CnfUnit)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cnfUnit': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommunicationCharacteristics. Returns the specified
// element and whether it was found
func (a CommunicationCharacteristics) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommunicationCharacteristics
func (a *CommunicationCharacteristics) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommunicationCharacteristics to handle AdditionalProperties
func (a *CommunicationCharacteristics) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ppActiveTime"]; found {
		err = json.Unmarshal(raw, &a.PpActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'ppActiveTime': %w", err)
		}
		delete(object, "ppActiveTime")
	}

	if raw, found := object["ppDlPacketCount"]; found {
		err = json.Unmarshal(raw, &a.PpDlPacketCount)
		if err != nil {
			return fmt.Errorf("error reading 'ppDlPacketCount': %w", err)
		}
		delete(object, "ppDlPacketCount")
	}

	if raw, found := object["ppDlPacketCountExt"]; found {
		err = json.Unmarshal(raw, &a.PpDlPacketCountExt)
		if err != nil {
			return fmt.Errorf("error reading 'ppDlPacketCountExt': %w", err)
		}
		delete(object, "ppDlPacketCountExt")
	}

	if raw, found := object["ppMaximumLatency"]; found {
		err = json.Unmarshal(raw, &a.PpMaximumLatency)
		if err != nil {
			return fmt.Errorf("error reading 'ppMaximumLatency': %w", err)
		}
		delete(object, "ppMaximumLatency")
	}

	if raw, found := object["ppMaximumResponseTime"]; found {
		err = json.Unmarshal(raw, &a.PpMaximumResponseTime)
		if err != nil {
			return fmt.Errorf("error reading 'ppMaximumResponseTime': %w", err)
		}
		delete(object, "ppMaximumResponseTime")
	}

	if raw, found := object["ppSubsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.PpSubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'ppSubsRegTimer': %w", err)
		}
		delete(object, "ppSubsRegTimer")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommunicationCharacteristics to handle AdditionalProperties
func (a CommunicationCharacteristics) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ppActiveTime"], err = json.Marshal(a.PpActiveTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppActiveTime': %w", err)
	}

	object["ppDlPacketCount"], err = json.Marshal(a.PpDlPacketCount)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppDlPacketCount': %w", err)
	}

	object["ppDlPacketCountExt"], err = json.Marshal(a.PpDlPacketCountExt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppDlPacketCountExt': %w", err)
	}

	object["ppMaximumLatency"], err = json.Marshal(a.PpMaximumLatency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppMaximumLatency': %w", err)
	}

	object["ppMaximumResponseTime"], err = json.Marshal(a.PpMaximumResponseTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppMaximumResponseTime': %w", err)
	}

	object["ppSubsRegTimer"], err = json.Marshal(a.PpSubsRegTimer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppSubsRegTimer': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommunicationFailure. Returns the specified
// element and whether it was found
func (a CommunicationFailure) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommunicationFailure
func (a *CommunicationFailure) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommunicationFailure to handle AdditionalProperties
func (a *CommunicationFailure) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nasReleaseCode"]; found {
		err = json.Unmarshal(raw, &a.NasReleaseCode)
		if err != nil {
			return fmt.Errorf("error reading 'nasReleaseCode': %w", err)
		}
		delete(object, "nasReleaseCode")
	}

	if raw, found := object["ranReleaseCode"]; found {
		err = json.Unmarshal(raw, &a.RanReleaseCode)
		if err != nil {
			return fmt.Errorf("error reading 'ranReleaseCode': %w", err)
		}
		delete(object, "ranReleaseCode")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommunicationFailure to handle AdditionalProperties
func (a CommunicationFailure) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NasReleaseCode != nil {
		object["nasReleaseCode"], err = json.Marshal(a.NasReleaseCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nasReleaseCode': %w", err)
		}
	}

	if a.RanReleaseCode != nil {
		object["ranReleaseCode"], err = json.Marshal(a.RanReleaseCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranReleaseCode': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConditionData. Returns the specified
// element and whether it was found
func (a ConditionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConditionData
func (a *ConditionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConditionData to handle AdditionalProperties
func (a *ConditionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["activationTime"]; found {
		err = json.Unmarshal(raw, &a.ActivationTime)
		if err != nil {
			return fmt.Errorf("error reading 'activationTime': %w", err)
		}
		delete(object, "activationTime")
	}

	if raw, found := object["condId"]; found {
		err = json.Unmarshal(raw, &a.CondId)
		if err != nil {
			return fmt.Errorf("error reading 'condId': %w", err)
		}
		delete(object, "condId")
	}

	if raw, found := object["deactivationTime"]; found {
		err = json.Unmarshal(raw, &a.DeactivationTime)
		if err != nil {
			return fmt.Errorf("error reading 'deactivationTime': %w", err)
		}
		delete(object, "deactivationTime")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConditionData to handle AdditionalProperties
func (a ConditionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	object["activationTime"], err = json.Marshal(a.ActivationTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'activationTime': %w", err)
	}

	object["condId"], err = json.Marshal(a.CondId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'condId': %w", err)
	}

	object["deactivationTime"], err = json.Marshal(a.DeactivationTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deactivationTime': %w", err)
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConfiguredSnssai. Returns the specified
// element and whether it was found
func (a ConfiguredSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConfiguredSnssai
func (a *ConfiguredSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConfiguredSnssai to handle AdditionalProperties
func (a *ConfiguredSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["configuredSnssai"]; found {
		err = json.Unmarshal(raw, &a.ConfiguredSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'configuredSnssai': %w", err)
		}
		delete(object, "configuredSnssai")
	}

	if raw, found := object["mappedHomeSnssai"]; found {
		err = json.Unmarshal(raw, &a.MappedHomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappedHomeSnssai': %w", err)
		}
		delete(object, "mappedHomeSnssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConfiguredSnssai to handle AdditionalProperties
func (a ConfiguredSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["configuredSnssai"], err = json.Marshal(a.ConfiguredSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'configuredSnssai': %w", err)
	}

	if a.MappedHomeSnssai != nil {
		object["mappedHomeSnssai"], err = json.Marshal(a.MappedHomeSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappedHomeSnssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConfirmationData. Returns the specified
// element and whether it was found
func (a ConfirmationData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConfirmationData
func (a *ConfirmationData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConfirmationData to handle AdditionalProperties
func (a *ConfirmationData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["resStar"]; found {
		err = json.Unmarshal(raw, &a.ResStar)
		if err != nil {
			return fmt.Errorf("error reading 'resStar': %w", err)
		}
		delete(object, "resStar")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConfirmationData to handle AdditionalProperties
func (a ConfirmationData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["resStar"], err = json.Marshal(a.ResStar)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resStar': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConfirmationDataResponse. Returns the specified
// element and whether it was found
func (a ConfirmationDataResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConfirmationDataResponse
func (a *ConfirmationDataResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConfirmationDataResponse to handle AdditionalProperties
func (a *ConfirmationDataResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authResult"]; found {
		err = json.Unmarshal(raw, &a.AuthResult)
		if err != nil {
			return fmt.Errorf("error reading 'authResult': %w", err)
		}
		delete(object, "authResult")
	}

	if raw, found := object["kseaf"]; found {
		err = json.Unmarshal(raw, &a.Kseaf)
		if err != nil {
			return fmt.Errorf("error reading 'kseaf': %w", err)
		}
		delete(object, "kseaf")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConfirmationDataResponse to handle AdditionalProperties
func (a ConfirmationDataResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authResult"], err = json.Marshal(a.AuthResult)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authResult': %w", err)
	}

	if len(a.Kseaf) != 0 {
		object["kseaf"], err = json.Marshal(a.Kseaf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'kseaf': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ContextDataSets. Returns the specified
// element and whether it was found
func (a ContextDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ContextDataSets
func (a *ContextDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ContextDataSets to handle AdditionalProperties
func (a *ContextDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amf3Gpp"]; found {
		err = json.Unmarshal(raw, &a.Amf3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amf3Gpp': %w", err)
		}
		delete(object, "amf3Gpp")
	}

	if raw, found := object["amfNon3Gpp"]; found {
		err = json.Unmarshal(raw, &a.AmfNon3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amfNon3Gpp': %w", err)
		}
		delete(object, "amfNon3Gpp")
	}

	if raw, found := object["eeSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.EeSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'eeSubscriptions': %w", err)
		}
		delete(object, "eeSubscriptions")
	}

	if raw, found := object["ipSmGw"]; found {
		err = json.Unmarshal(raw, &a.IpSmGw)
		if err != nil {
			return fmt.Errorf("error reading 'ipSmGw': %w", err)
		}
		delete(object, "ipSmGw")
	}

	if raw, found := object["sdmSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.SdmSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'sdmSubscriptions': %w", err)
		}
		delete(object, "sdmSubscriptions")
	}

	if raw, found := object["smfRegistrations"]; found {
		err = json.Unmarshal(raw, &a.SmfRegistrations)
		if err != nil {
			return fmt.Errorf("error reading 'smfRegistrations': %w", err)
		}
		delete(object, "smfRegistrations")
	}

	if raw, found := object["smsf3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.Smsf3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsf3GppAccess': %w", err)
		}
		delete(object, "smsf3GppAccess")
	}

	if raw, found := object["smsfNon3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.SmsfNon3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsfNon3GppAccess': %w", err)
		}
		delete(object, "smsfNon3GppAccess")
	}

	if raw, found := object["subscriptionDataSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionDataSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionDataSubscriptions': %w", err)
		}
		delete(object, "subscriptionDataSubscriptions")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ContextDataSets to handle AdditionalProperties
func (a ContextDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Amf3Gpp != nil {
		object["amf3Gpp"], err = json.Marshal(a.Amf3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amf3Gpp': %w", err)
		}
	}

	if a.AmfNon3Gpp != nil {
		object["amfNon3Gpp"], err = json.Marshal(a.AmfNon3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNon3Gpp': %w", err)
		}
	}

	if len(a.EeSubscriptions) != 0 {
		object["eeSubscriptions"], err = json.Marshal(a.EeSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eeSubscriptions': %w", err)
		}
	}

	if a.IpSmGw != nil {
		object["ipSmGw"], err = json.Marshal(a.IpSmGw)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipSmGw': %w", err)
		}
	}

	if len(a.SdmSubscriptions) != 0 {
		object["sdmSubscriptions"], err = json.Marshal(a.SdmSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdmSubscriptions': %w", err)
		}
	}

	if a.SmfRegistrations != nil {
		object["smfRegistrations"], err = json.Marshal(a.SmfRegistrations)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfRegistrations': %w", err)
		}
	}

	if a.Smsf3GppAccess != nil {
		object["smsf3GppAccess"], err = json.Marshal(a.Smsf3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsf3GppAccess': %w", err)
		}
	}

	if a.SmsfNon3GppAccess != nil {
		object["smsfNon3GppAccess"], err = json.Marshal(a.SmsfNon3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfNon3GppAccess': %w", err)
		}
	}

	if len(a.SubscriptionDataSubscriptions) != 0 {
		object["subscriptionDataSubscriptions"], err = json.Marshal(a.SubscriptionDataSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionDataSubscriptions': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ContextInfo. Returns the specified
// element and whether it was found
func (a ContextInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ContextInfo
func (a *ContextInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ContextInfo to handle AdditionalProperties
func (a *ContextInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["origHeaders"]; found {
		err = json.Unmarshal(raw, &a.OrigHeaders)
		if err != nil {
			return fmt.Errorf("error reading 'origHeaders': %w", err)
		}
		delete(object, "origHeaders")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ContextInfo to handle AdditionalProperties
func (a ContextInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.OrigHeaders) != 0 {
		object["origHeaders"], err = json.Marshal(a.OrigHeaders)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'origHeaders': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreatedEeSubscription. Returns the specified
// element and whether it was found
func (a CreatedEeSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreatedEeSubscription
func (a *CreatedEeSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreatedEeSubscription to handle AdditionalProperties
func (a *CreatedEeSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eeSubscription"]; found {
		err = json.Unmarshal(raw, &a.EeSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'eeSubscription': %w", err)
		}
		delete(object, "eeSubscription")
	}

	if raw, found := object["epcStatusInd"]; found {
		err = json.Unmarshal(raw, &a.EpcStatusInd)
		if err != nil {
			return fmt.Errorf("error reading 'epcStatusInd': %w", err)
		}
		delete(object, "epcStatusInd")
	}

	if raw, found := object["eventReports"]; found {
		err = json.Unmarshal(raw, &a.EventReports)
		if err != nil {
			return fmt.Errorf("error reading 'eventReports': %w", err)
		}
		delete(object, "eventReports")
	}

	if raw, found := object["numberOfUes"]; found {
		err = json.Unmarshal(raw, &a.NumberOfUes)
		if err != nil {
			return fmt.Errorf("error reading 'numberOfUes': %w", err)
		}
		delete(object, "numberOfUes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreatedEeSubscription to handle AdditionalProperties
func (a CreatedEeSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eeSubscription"], err = json.Marshal(a.EeSubscription)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eeSubscription': %w", err)
	}

	if a.EpcStatusInd != nil {
		object["epcStatusInd"], err = json.Marshal(a.EpcStatusInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epcStatusInd': %w", err)
		}
	}

	if len(a.EventReports) != 0 {
		object["eventReports"], err = json.Marshal(a.EventReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventReports': %w", err)
		}
	}

	if a.NumberOfUes != nil {
		object["numberOfUes"], err = json.Marshal(a.NumberOfUes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numberOfUes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DataChangeNotify. Returns the specified
// element and whether it was found
func (a DataChangeNotify) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DataChangeNotify
func (a *DataChangeNotify) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DataChangeNotify to handle AdditionalProperties
func (a *DataChangeNotify) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalSdmSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSdmSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSdmSubscriptions': %w", err)
		}
		delete(object, "additionalSdmSubscriptions")
	}

	if raw, found := object["notifyItems"]; found {
		err = json.Unmarshal(raw, &a.NotifyItems)
		if err != nil {
			return fmt.Errorf("error reading 'notifyItems': %w", err)
		}
		delete(object, "notifyItems")
	}

	if raw, found := object["originalCallbackReference"]; found {
		err = json.Unmarshal(raw, &a.OriginalCallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'originalCallbackReference': %w", err)
		}
		delete(object, "originalCallbackReference")
	}

	if raw, found := object["sdmSubscription"]; found {
		err = json.Unmarshal(raw, &a.SdmSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'sdmSubscription': %w", err)
		}
		delete(object, "sdmSubscription")
	}

	if raw, found := object["subscriptionDataSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionDataSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionDataSubscriptions': %w", err)
		}
		delete(object, "subscriptionDataSubscriptions")
	}

	if raw, found := object["ueId"]; found {
		err = json.Unmarshal(raw, &a.UeId)
		if err != nil {
			return fmt.Errorf("error reading 'ueId': %w", err)
		}
		delete(object, "ueId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DataChangeNotify to handle AdditionalProperties
func (a DataChangeNotify) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AdditionalSdmSubscriptions) != 0 {
		object["additionalSdmSubscriptions"], err = json.Marshal(a.AdditionalSdmSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSdmSubscriptions': %w", err)
		}
	}

	if len(a.NotifyItems) != 0 {
		object["notifyItems"], err = json.Marshal(a.NotifyItems)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyItems': %w", err)
		}
	}

	if len(a.OriginalCallbackReference) != 0 {
		object["originalCallbackReference"], err = json.Marshal(a.OriginalCallbackReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'originalCallbackReference': %w", err)
		}
	}

	if a.SdmSubscription != nil {
		object["sdmSubscription"], err = json.Marshal(a.SdmSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdmSubscription': %w", err)
		}
	}

	if a.SubscriptionDataSubscriptions != nil {
		object["subscriptionDataSubscriptions"], err = json.Marshal(a.SubscriptionDataSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionDataSubscriptions': %w", err)
		}
	}

	if len(a.UeId) != 0 {
		object["ueId"], err = json.Marshal(a.UeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DataFilter. Returns the specified
// element and whether it was found
func (a DataFilter) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DataFilter
func (a *DataFilter) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DataFilter to handle AdditionalProperties
func (a *DataFilter) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appIds"]; found {
		err = json.Unmarshal(raw, &a.AppIds)
		if err != nil {
			return fmt.Errorf("error reading 'appIds': %w", err)
		}
		delete(object, "appIds")
	}

	if raw, found := object["dataInd"]; found {
		err = json.Unmarshal(raw, &a.DataInd)
		if err != nil {
			return fmt.Errorf("error reading 'dataInd': %w", err)
		}
		delete(object, "dataInd")
	}

	if raw, found := object["dnns"]; found {
		err = json.Unmarshal(raw, &a.Dnns)
		if err != nil {
			return fmt.Errorf("error reading 'dnns': %w", err)
		}
		delete(object, "dnns")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["snssais"]; found {
		err = json.Unmarshal(raw, &a.Snssais)
		if err != nil {
			return fmt.Errorf("error reading 'snssais': %w", err)
		}
		delete(object, "snssais")
	}

	if raw, found := object["supis"]; found {
		err = json.Unmarshal(raw, &a.Supis)
		if err != nil {
			return fmt.Errorf("error reading 'supis': %w", err)
		}
		delete(object, "supis")
	}

	if raw, found := object["ueIpv4s"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4s)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4s': %w", err)
		}
		delete(object, "ueIpv4s")
	}

	if raw, found := object["ueIpv6s"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6s)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6s': %w", err)
		}
		delete(object, "ueIpv6s")
	}

	if raw, found := object["ueMacs"]; found {
		err = json.Unmarshal(raw, &a.UeMacs)
		if err != nil {
			return fmt.Errorf("error reading 'ueMacs': %w", err)
		}
		delete(object, "ueMacs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DataFilter to handle AdditionalProperties
func (a DataFilter) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AppIds) != 0 {
		object["appIds"], err = json.Marshal(a.AppIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appIds': %w", err)
		}
	}

	object["dataInd"], err = json.Marshal(a.DataInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dataInd': %w", err)
	}

	if len(a.Dnns) != 0 {
		object["dnns"], err = json.Marshal(a.Dnns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnns': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	if len(a.Snssais) != 0 {
		object["snssais"], err = json.Marshal(a.Snssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssais': %w", err)
		}
	}

	if len(a.Supis) != 0 {
		object["supis"], err = json.Marshal(a.Supis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supis': %w", err)
		}
	}

	if len(a.UeIpv4s) != 0 {
		object["ueIpv4s"], err = json.Marshal(a.UeIpv4s)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4s': %w", err)
		}
	}

	if len(a.UeIpv6s) != 0 {
		object["ueIpv6s"], err = json.Marshal(a.UeIpv6s)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6s': %w", err)
		}
	}

	if len(a.UeMacs) != 0 {
		object["ueMacs"], err = json.Marshal(a.UeMacs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMacs': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DatalinkReportingConfiguration. Returns the specified
// element and whether it was found
func (a DatalinkReportingConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DatalinkReportingConfiguration
func (a *DatalinkReportingConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DatalinkReportingConfiguration to handle AdditionalProperties
func (a *DatalinkReportingConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dddStatusList"]; found {
		err = json.Unmarshal(raw, &a.DddStatusList)
		if err != nil {
			return fmt.Errorf("error reading 'dddStatusList': %w", err)
		}
		delete(object, "dddStatusList")
	}

	if raw, found := object["dddTrafficDes"]; found {
		err = json.Unmarshal(raw, &a.DddTrafficDes)
		if err != nil {
			return fmt.Errorf("error reading 'dddTrafficDes': %w", err)
		}
		delete(object, "dddTrafficDes")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["slice"]; found {
		err = json.Unmarshal(raw, &a.Slice)
		if err != nil {
			return fmt.Errorf("error reading 'slice': %w", err)
		}
		delete(object, "slice")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DatalinkReportingConfiguration to handle AdditionalProperties
func (a DatalinkReportingConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DddStatusList) != 0 {
		object["dddStatusList"], err = json.Marshal(a.DddStatusList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddStatusList': %w", err)
		}
	}

	if len(a.DddTrafficDes) != 0 {
		object["dddTrafficDes"], err = json.Marshal(a.DddTrafficDes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddTrafficDes': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.Slice != nil {
		object["slice"], err = json.Marshal(a.Slice)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slice': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DddTrafficDescriptor. Returns the specified
// element and whether it was found
func (a DddTrafficDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DddTrafficDescriptor
func (a *DddTrafficDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DddTrafficDescriptor to handle AdditionalProperties
func (a *DddTrafficDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["macAddr"]; found {
		err = json.Unmarshal(raw, &a.MacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'macAddr': %w", err)
		}
		delete(object, "macAddr")
	}

	if raw, found := object["portNumber"]; found {
		err = json.Unmarshal(raw, &a.PortNumber)
		if err != nil {
			return fmt.Errorf("error reading 'portNumber': %w", err)
		}
		delete(object, "portNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DddTrafficDescriptor to handle AdditionalProperties
func (a DddTrafficDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if len(a.MacAddr) != 0 {
		object["macAddr"], err = json.Marshal(a.MacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'macAddr': %w", err)
		}
	}

	if a.PortNumber != nil {
		object["portNumber"], err = json.Marshal(a.PortNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'portNumber': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DdnFailureSubInfo. Returns the specified
// element and whether it was found
func (a DdnFailureSubInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DdnFailureSubInfo
func (a *DdnFailureSubInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DdnFailureSubInfo to handle AdditionalProperties
func (a *DdnFailureSubInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dddTrafficDescriptorList"]; found {
		err = json.Unmarshal(raw, &a.DddTrafficDescriptorList)
		if err != nil {
			return fmt.Errorf("error reading 'dddTrafficDescriptorList': %w", err)
		}
		delete(object, "dddTrafficDescriptorList")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DdnFailureSubInfo to handle AdditionalProperties
func (a DdnFailureSubInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DddTrafficDescriptorList) != 0 {
		object["dddTrafficDescriptorList"], err = json.Marshal(a.DddTrafficDescriptorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddTrafficDescriptorList': %w", err)
		}
	}

	object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DdnFailureSubs. Returns the specified
// element and whether it was found
func (a DdnFailureSubs) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DdnFailureSubs
func (a *DdnFailureSubs) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DdnFailureSubs to handle AdditionalProperties
func (a *DdnFailureSubs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ddnFailureSubsInd"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubsInd)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubsInd': %w", err)
		}
		delete(object, "ddnFailureSubsInd")
	}

	if raw, found := object["ddnFailureSubsInfoList"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubsInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubsInfoList': %w", err)
		}
		delete(object, "ddnFailureSubsInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DdnFailureSubs to handle AdditionalProperties
func (a DdnFailureSubs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DdnFailureSubsInd != nil {
		object["ddnFailureSubsInd"], err = json.Marshal(a.DdnFailureSubsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubsInd': %w", err)
		}
	}

	if len(a.DdnFailureSubsInfoList) != 0 {
		object["ddnFailureSubsInfoList"], err = json.Marshal(a.DdnFailureSubsInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubsInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DefaultNotificationSubscription. Returns the specified
// element and whether it was found
func (a DefaultNotificationSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DefaultNotificationSubscription
func (a *DefaultNotificationSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DefaultNotificationSubscription to handle AdditionalProperties
func (a *DefaultNotificationSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binding"]; found {
		err = json.Unmarshal(raw, &a.Binding)
		if err != nil {
			return fmt.Errorf("error reading 'binding': %w", err)
		}
		delete(object, "binding")
	}

	if raw, found := object["callbackUri"]; found {
		err = json.Unmarshal(raw, &a.CallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'callbackUri': %w", err)
		}
		delete(object, "callbackUri")
	}

	if raw, found := object["n1MessageClass"]; found {
		err = json.Unmarshal(raw, &a.N1MessageClass)
		if err != nil {
			return fmt.Errorf("error reading 'n1MessageClass': %w", err)
		}
		delete(object, "n1MessageClass")
	}

	if raw, found := object["n2InformationClass"]; found {
		err = json.Unmarshal(raw, &a.N2InformationClass)
		if err != nil {
			return fmt.Errorf("error reading 'n2InformationClass': %w", err)
		}
		delete(object, "n2InformationClass")
	}

	if raw, found := object["notificationType"]; found {
		err = json.Unmarshal(raw, &a.NotificationType)
		if err != nil {
			return fmt.Errorf("error reading 'notificationType': %w", err)
		}
		delete(object, "notificationType")
	}

	if raw, found := object["versions"]; found {
		err = json.Unmarshal(raw, &a.Versions)
		if err != nil {
			return fmt.Errorf("error reading 'versions': %w", err)
		}
		delete(object, "versions")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DefaultNotificationSubscription to handle AdditionalProperties
func (a DefaultNotificationSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Binding != nil {
		object["binding"], err = json.Marshal(a.Binding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binding': %w", err)
		}
	}

	object["callbackUri"], err = json.Marshal(a.CallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'callbackUri': %w", err)
	}

	if a.N1MessageClass != nil {
		object["n1MessageClass"], err = json.Marshal(a.N1MessageClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1MessageClass': %w", err)
		}
	}

	if a.N2InformationClass != nil {
		object["n2InformationClass"], err = json.Marshal(a.N2InformationClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2InformationClass': %w", err)
		}
	}

	object["notificationType"], err = json.Marshal(a.NotificationType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationType': %w", err)
	}

	if len(a.Versions) != 0 {
		object["versions"], err = json.Marshal(a.Versions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'versions': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DefaultUnrelatedClass. Returns the specified
// element and whether it was found
func (a DefaultUnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DefaultUnrelatedClass
func (a *DefaultUnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DefaultUnrelatedClass to handle AdditionalProperties
func (a *DefaultUnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["codeWordInd"]; found {
		err = json.Unmarshal(raw, &a.CodeWordInd)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordInd': %w", err)
		}
		delete(object, "codeWordInd")
	}

	if raw, found := object["codeWordList"]; found {
		err = json.Unmarshal(raw, &a.CodeWordList)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordList': %w", err)
		}
		delete(object, "codeWordList")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DefaultUnrelatedClass to handle AdditionalProperties
func (a DefaultUnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.CodeWordInd != nil {
		object["codeWordInd"], err = json.Marshal(a.CodeWordInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordInd': %w", err)
		}
	}

	if len(a.CodeWordList) != 0 {
		object["codeWordList"], err = json.Marshal(a.CodeWordList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordList': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeregistrationData. Returns the specified
// element and whether it was found
func (a DeregistrationData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeregistrationData
func (a *DeregistrationData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeregistrationData to handle AdditionalProperties
func (a *DeregistrationData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["deregReason"]; found {
		err = json.Unmarshal(raw, &a.DeregReason)
		if err != nil {
			return fmt.Errorf("error reading 'deregReason': %w", err)
		}
		delete(object, "deregReason")
	}

	if raw, found := object["newSmfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfInstanceId': %w", err)
		}
		delete(object, "newSmfInstanceId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeregistrationData to handle AdditionalProperties
func (a DeregistrationData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	object["deregReason"], err = json.Marshal(a.DeregReason)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregReason': %w", err)
	}

	if a.NewSmfInstanceId != nil {
		object["newSmfInstanceId"], err = json.Marshal(a.NewSmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfInstanceId': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeregistrationInfo. Returns the specified
// element and whether it was found
func (a DeregistrationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeregistrationInfo
func (a *DeregistrationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeregistrationInfo to handle AdditionalProperties
func (a *DeregistrationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeregistrationInfo to handle AdditionalProperties
func (a DeregistrationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnaiInformation. Returns the specified
// element and whether it was found
func (a DnaiInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnaiInformation
func (a *DnaiInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnaiInformation to handle AdditionalProperties
func (a *DnaiInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnai"]; found {
		err = json.Unmarshal(raw, &a.Dnai)
		if err != nil {
			return fmt.Errorf("error reading 'dnai': %w", err)
		}
		delete(object, "dnai")
	}

	if raw, found := object["noDnaiChangeInd"]; found {
		err = json.Unmarshal(raw, &a.NoDnaiChangeInd)
		if err != nil {
			return fmt.Errorf("error reading 'noDnaiChangeInd': %w", err)
		}
		delete(object, "noDnaiChangeInd")
	}

	if raw, found := object["noLocalPsaChangeInd"]; found {
		err = json.Unmarshal(raw, &a.NoLocalPsaChangeInd)
		if err != nil {
			return fmt.Errorf("error reading 'noLocalPsaChangeInd': %w", err)
		}
		delete(object, "noLocalPsaChangeInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnaiInformation to handle AdditionalProperties
func (a DnaiInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnai"], err = json.Marshal(a.Dnai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnai': %w", err)
	}

	if a.NoDnaiChangeInd != nil {
		object["noDnaiChangeInd"], err = json.Marshal(a.NoDnaiChangeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noDnaiChangeInd': %w", err)
		}
	}

	if a.NoLocalPsaChangeInd != nil {
		object["noLocalPsaChangeInd"], err = json.Marshal(a.NoLocalPsaChangeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noLocalPsaChangeInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Dnf. Returns the specified
// element and whether it was found
func (a Dnf) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Dnf
func (a *Dnf) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Dnf to handle AdditionalProperties
func (a *Dnf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnfUnits"]; found {
		err = json.Unmarshal(raw, &a.DnfUnits)
		if err != nil {
			return fmt.Errorf("error reading 'dnfUnits': %w", err)
		}
		delete(object, "dnfUnits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Dnf to handle AdditionalProperties
func (a Dnf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnfUnits"], err = json.Marshal(a.DnfUnits)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnfUnits': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnfUnit. Returns the specified
// element and whether it was found
func (a DnfUnit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnfUnit
func (a *DnfUnit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnfUnit to handle AdditionalProperties
func (a *DnfUnit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnfUnit"]; found {
		err = json.Unmarshal(raw, &a.DnfUnit)
		if err != nil {
			return fmt.Errorf("error reading 'dnfUnit': %w", err)
		}
		delete(object, "dnfUnit")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnfUnit to handle AdditionalProperties
func (a DnfUnit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnfUnit"], err = json.Marshal(a.DnfUnit)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnfUnit': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnConfiguration. Returns the specified
// element and whether it was found
func (a DnnConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnConfiguration
func (a *DnnConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnConfiguration to handle AdditionalProperties
func (a *DnnConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["3gppChargingCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.N3gppChargingCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading '3gppChargingCharacteristics': %w", err)
		}
		delete(object, "3gppChargingCharacteristics")
	}

	if raw, found := object["5gQosProfile"]; found {
		err = json.Unmarshal(raw, &a.N5gQosProfile)
		if err != nil {
			return fmt.Errorf("error reading '5gQosProfile': %w", err)
		}
		delete(object, "5gQosProfile")
	}

	if raw, found := object["acsInfo"]; found {
		err = json.Unmarshal(raw, &a.AcsInfo)
		if err != nil {
			return fmt.Errorf("error reading 'acsInfo': %w", err)
		}
		delete(object, "acsInfo")
	}

	if raw, found := object["atsssAllowed"]; found {
		err = json.Unmarshal(raw, &a.AtsssAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'atsssAllowed': %w", err)
		}
		delete(object, "atsssAllowed")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnAaaIpAddressAllocation"]; found {
		err = json.Unmarshal(raw, &a.DnAaaIpAddressAllocation)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaIpAddressAllocation': %w", err)
		}
		delete(object, "dnAaaIpAddressAllocation")
	}

	if raw, found := object["iptvAccCtrlInfo"]; found {
		err = json.Unmarshal(raw, &a.IptvAccCtrlInfo)
		if err != nil {
			return fmt.Errorf("error reading 'iptvAccCtrlInfo': %w", err)
		}
		delete(object, "iptvAccCtrlInfo")
	}

	if raw, found := object["ipv4FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv4FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4FrameRouteList': %w", err)
		}
		delete(object, "ipv4FrameRouteList")
	}

	if raw, found := object["ipv6FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv6FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6FrameRouteList': %w", err)
		}
		delete(object, "ipv6FrameRouteList")
	}

	if raw, found := object["iwkEpsInd"]; found {
		err = json.Unmarshal(raw, &a.IwkEpsInd)
		if err != nil {
			return fmt.Errorf("error reading 'iwkEpsInd': %w", err)
		}
		delete(object, "iwkEpsInd")
	}

	if raw, found := object["niddInfo"]; found {
		err = json.Unmarshal(raw, &a.NiddInfo)
		if err != nil {
			return fmt.Errorf("error reading 'niddInfo': %w", err)
		}
		delete(object, "niddInfo")
	}

	if raw, found := object["niddNefId"]; found {
		err = json.Unmarshal(raw, &a.NiddNefId)
		if err != nil {
			return fmt.Errorf("error reading 'niddNefId': %w", err)
		}
		delete(object, "niddNefId")
	}

	if raw, found := object["pduSessionContinuityInd"]; found {
		err = json.Unmarshal(raw, &a.PduSessionContinuityInd)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionContinuityInd': %w", err)
		}
		delete(object, "pduSessionContinuityInd")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if raw, found := object["redundantSessionAllowed"]; found {
		err = json.Unmarshal(raw, &a.RedundantSessionAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'redundantSessionAllowed': %w", err)
		}
		delete(object, "redundantSessionAllowed")
	}

	if raw, found := object["secondaryAuth"]; found {
		err = json.Unmarshal(raw, &a.SecondaryAuth)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryAuth': %w", err)
		}
		delete(object, "secondaryAuth")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["sscModes"]; found {
		err = json.Unmarshal(raw, &a.SscModes)
		if err != nil {
			return fmt.Errorf("error reading 'sscModes': %w", err)
		}
		delete(object, "sscModes")
	}

	if raw, found := object["staticIpAddress"]; found {
		err = json.Unmarshal(raw, &a.StaticIpAddress)
		if err != nil {
			return fmt.Errorf("error reading 'staticIpAddress': %w", err)
		}
		delete(object, "staticIpAddress")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnConfiguration to handle AdditionalProperties
func (a DnnConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N3gppChargingCharacteristics != nil {
		object["3gppChargingCharacteristics"], err = json.Marshal(a.N3gppChargingCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '3gppChargingCharacteristics': %w", err)
		}
	}

	if a.N5gQosProfile != nil {
		object["5gQosProfile"], err = json.Marshal(a.N5gQosProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gQosProfile': %w", err)
		}
	}

	if a.AcsInfo != nil {
		object["acsInfo"], err = json.Marshal(a.AcsInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsInfo': %w", err)
		}
	}

	if a.AtsssAllowed != nil {
		object["atsssAllowed"], err = json.Marshal(a.AtsssAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssAllowed': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	if a.DnAaaIpAddressAllocation != nil {
		object["dnAaaIpAddressAllocation"], err = json.Marshal(a.DnAaaIpAddressAllocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaIpAddressAllocation': %w", err)
		}
	}

	if a.IptvAccCtrlInfo != nil {
		object["iptvAccCtrlInfo"], err = json.Marshal(a.IptvAccCtrlInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iptvAccCtrlInfo': %w", err)
		}
	}

	if len(a.Ipv4FrameRouteList) != 0 {
		object["ipv4FrameRouteList"], err = json.Marshal(a.Ipv4FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4FrameRouteList': %w", err)
		}
	}

	if len(a.Ipv6FrameRouteList) != 0 {
		object["ipv6FrameRouteList"], err = json.Marshal(a.Ipv6FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6FrameRouteList': %w", err)
		}
	}

	if a.IwkEpsInd != nil {
		object["iwkEpsInd"], err = json.Marshal(a.IwkEpsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iwkEpsInd': %w", err)
		}
	}

	if a.NiddInfo != nil {
		object["niddInfo"], err = json.Marshal(a.NiddInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'niddInfo': %w", err)
		}
	}

	if a.NiddNefId != nil {
		object["niddNefId"], err = json.Marshal(a.NiddNefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'niddNefId': %w", err)
		}
	}

	if a.PduSessionContinuityInd != nil {
		object["pduSessionContinuityInd"], err = json.Marshal(a.PduSessionContinuityInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionContinuityInd': %w", err)
		}
	}

	object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
	}

	if a.RedundantSessionAllowed != nil {
		object["redundantSessionAllowed"], err = json.Marshal(a.RedundantSessionAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantSessionAllowed': %w", err)
		}
	}

	if a.SecondaryAuth != nil {
		object["secondaryAuth"], err = json.Marshal(a.SecondaryAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryAuth': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	object["sscModes"], err = json.Marshal(a.SscModes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sscModes': %w", err)
	}

	if len(a.StaticIpAddress) != 0 {
		object["staticIpAddress"], err = json.Marshal(a.StaticIpAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'staticIpAddress': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnInfo. Returns the specified
// element and whether it was found
func (a DnnInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnInfo
func (a *DnnInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnInfo to handle AdditionalProperties
func (a *DnnInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["defaultDnnIndicator"]; found {
		err = json.Unmarshal(raw, &a.DefaultDnnIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'defaultDnnIndicator': %w", err)
		}
		delete(object, "defaultDnnIndicator")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["dnnBarred"]; found {
		err = json.Unmarshal(raw, &a.DnnBarred)
		if err != nil {
			return fmt.Errorf("error reading 'dnnBarred': %w", err)
		}
		delete(object, "dnnBarred")
	}

	if raw, found := object["invokeNefInd"]; found {
		err = json.Unmarshal(raw, &a.InvokeNefInd)
		if err != nil {
			return fmt.Errorf("error reading 'invokeNefInd': %w", err)
		}
		delete(object, "invokeNefInd")
	}

	if raw, found := object["iwkEpsInd"]; found {
		err = json.Unmarshal(raw, &a.IwkEpsInd)
		if err != nil {
			return fmt.Errorf("error reading 'iwkEpsInd': %w", err)
		}
		delete(object, "iwkEpsInd")
	}

	if raw, found := object["lboRoamingAllowed"]; found {
		err = json.Unmarshal(raw, &a.LboRoamingAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'lboRoamingAllowed': %w", err)
		}
		delete(object, "lboRoamingAllowed")
	}

	if raw, found := object["sameSmfInd"]; found {
		err = json.Unmarshal(raw, &a.SameSmfInd)
		if err != nil {
			return fmt.Errorf("error reading 'sameSmfInd': %w", err)
		}
		delete(object, "sameSmfInd")
	}

	if raw, found := object["smfList"]; found {
		err = json.Unmarshal(raw, &a.SmfList)
		if err != nil {
			return fmt.Errorf("error reading 'smfList': %w", err)
		}
		delete(object, "smfList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnInfo to handle AdditionalProperties
func (a DnnInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DefaultDnnIndicator != nil {
		object["defaultDnnIndicator"], err = json.Marshal(a.DefaultDnnIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultDnnIndicator': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.DnnBarred != nil {
		object["dnnBarred"], err = json.Marshal(a.DnnBarred)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnBarred': %w", err)
		}
	}

	if a.InvokeNefInd != nil {
		object["invokeNefInd"], err = json.Marshal(a.InvokeNefInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invokeNefInd': %w", err)
		}
	}

	if a.IwkEpsInd != nil {
		object["iwkEpsInd"], err = json.Marshal(a.IwkEpsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iwkEpsInd': %w", err)
		}
	}

	if a.LboRoamingAllowed != nil {
		object["lboRoamingAllowed"], err = json.Marshal(a.LboRoamingAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lboRoamingAllowed': %w", err)
		}
	}

	if a.SameSmfInd != nil {
		object["sameSmfInd"], err = json.Marshal(a.SameSmfInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sameSmfInd': %w", err)
		}
	}

	if len(a.SmfList) != 0 {
		object["smfList"], err = json.Marshal(a.SmfList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnRouteSelectionDescriptor. Returns the specified
// element and whether it was found
func (a DnnRouteSelectionDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnRouteSelectionDescriptor
func (a *DnnRouteSelectionDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnRouteSelectionDescriptor to handle AdditionalProperties
func (a *DnnRouteSelectionDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["atsssInfo"]; found {
		err = json.Unmarshal(raw, &a.AtsssInfo)
		if err != nil {
			return fmt.Errorf("error reading 'atsssInfo': %w", err)
		}
		delete(object, "atsssInfo")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["pduSessTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessTypes': %w", err)
		}
		delete(object, "pduSessTypes")
	}

	if raw, found := object["sscModes"]; found {
		err = json.Unmarshal(raw, &a.SscModes)
		if err != nil {
			return fmt.Errorf("error reading 'sscModes': %w", err)
		}
		delete(object, "sscModes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnRouteSelectionDescriptor to handle AdditionalProperties
func (a DnnRouteSelectionDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AtsssInfo != nil {
		object["atsssInfo"], err = json.Marshal(a.AtsssInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssInfo': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.PduSessTypes) != 0 {
		object["pduSessTypes"], err = json.Marshal(a.PduSessTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessTypes': %w", err)
		}
	}

	if len(a.SscModes) != 0 {
		object["sscModes"], err = json.Marshal(a.SscModes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sscModes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnSmfInfoItem. Returns the specified
// element and whether it was found
func (a DnnSmfInfoItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnSmfInfoItem
func (a *DnnSmfInfoItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnSmfInfoItem to handle AdditionalProperties
func (a *DnnSmfInfoItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnSmfInfoItem to handle AdditionalProperties
func (a DnnSmfInfoItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnUpfInfoItem. Returns the specified
// element and whether it was found
func (a DnnUpfInfoItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnUpfInfoItem
func (a *DnnUpfInfoItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnUpfInfoItem to handle AdditionalProperties
func (a *DnnUpfInfoItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["dnaiNwInstanceList"]; found {
		err = json.Unmarshal(raw, &a.DnaiNwInstanceList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiNwInstanceList': %w", err)
		}
		delete(object, "dnaiNwInstanceList")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ipv4AddressRanges"]; found {
		err = json.Unmarshal(raw, &a.Ipv4AddressRanges)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4AddressRanges': %w", err)
		}
		delete(object, "ipv4AddressRanges")
	}

	if raw, found := object["ipv6PrefixRanges"]; found {
		err = json.Unmarshal(raw, &a.Ipv6PrefixRanges)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6PrefixRanges': %w", err)
		}
		delete(object, "ipv6PrefixRanges")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnUpfInfoItem to handle AdditionalProperties
func (a DnnUpfInfoItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if a.DnaiNwInstanceList != nil {
		object["dnaiNwInstanceList"], err = json.Marshal(a.DnaiNwInstanceList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiNwInstanceList': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.Ipv4AddressRanges) != 0 {
		object["ipv4AddressRanges"], err = json.Marshal(a.Ipv4AddressRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4AddressRanges': %w", err)
		}
	}

	if len(a.Ipv6PrefixRanges) != 0 {
		object["ipv6PrefixRanges"], err = json.Marshal(a.Ipv6PrefixRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6PrefixRanges': %w", err)
		}
	}

	if len(a.PduSessionTypes) != 0 {
		object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DownlinkDataNotificationControl. Returns the specified
// element and whether it was found
func (a DownlinkDataNotificationControl) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DownlinkDataNotificationControl
func (a *DownlinkDataNotificationControl) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DownlinkDataNotificationControl to handle AdditionalProperties
func (a *DownlinkDataNotificationControl) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifCtrlInds"]; found {
		err = json.Unmarshal(raw, &a.NotifCtrlInds)
		if err != nil {
			return fmt.Errorf("error reading 'notifCtrlInds': %w", err)
		}
		delete(object, "notifCtrlInds")
	}

	if raw, found := object["typesOfNotif"]; found {
		err = json.Unmarshal(raw, &a.TypesOfNotif)
		if err != nil {
			return fmt.Errorf("error reading 'typesOfNotif': %w", err)
		}
		delete(object, "typesOfNotif")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DownlinkDataNotificationControl to handle AdditionalProperties
func (a DownlinkDataNotificationControl) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.NotifCtrlInds) != 0 {
		object["notifCtrlInds"], err = json.Marshal(a.NotifCtrlInds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifCtrlInds': %w", err)
		}
	}

	if len(a.TypesOfNotif) != 0 {
		object["typesOfNotif"], err = json.Marshal(a.TypesOfNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'typesOfNotif': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DownlinkDataNotificationControlRm. Returns the specified
// element and whether it was found
func (a DownlinkDataNotificationControlRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DownlinkDataNotificationControlRm
func (a *DownlinkDataNotificationControlRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DownlinkDataNotificationControlRm to handle AdditionalProperties
func (a *DownlinkDataNotificationControlRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifCtrlInds"]; found {
		err = json.Unmarshal(raw, &a.NotifCtrlInds)
		if err != nil {
			return fmt.Errorf("error reading 'notifCtrlInds': %w", err)
		}
		delete(object, "notifCtrlInds")
	}

	if raw, found := object["typesOfNotif"]; found {
		err = json.Unmarshal(raw, &a.TypesOfNotif)
		if err != nil {
			return fmt.Errorf("error reading 'typesOfNotif': %w", err)
		}
		delete(object, "typesOfNotif")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DownlinkDataNotificationControlRm to handle AdditionalProperties
func (a DownlinkDataNotificationControlRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["notifCtrlInds"], err = json.Marshal(a.NotifCtrlInds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifCtrlInds': %w", err)
	}

	object["typesOfNotif"], err = json.Marshal(a.TypesOfNotif)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'typesOfNotif': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Dynamic5Qi. Returns the specified
// element and whether it was found
func (a Dynamic5Qi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Dynamic5Qi
func (a *Dynamic5Qi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Dynamic5Qi to handle AdditionalProperties
func (a *Dynamic5Qi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["averWindow"]; found {
		err = json.Unmarshal(raw, &a.AverWindow)
		if err != nil {
			return fmt.Errorf("error reading 'averWindow': %w", err)
		}
		delete(object, "averWindow")
	}

	if raw, found := object["cnPacketDelayBudgetDl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetDl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetDl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetDl")
	}

	if raw, found := object["cnPacketDelayBudgetUl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetUl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetUl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetUl")
	}

	if raw, found := object["extMaxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.ExtMaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'extMaxDataBurstVol': %w", err)
		}
		delete(object, "extMaxDataBurstVol")
	}

	if raw, found := object["extPacketDelBudget"]; found {
		err = json.Unmarshal(raw, &a.ExtPacketDelBudget)
		if err != nil {
			return fmt.Errorf("error reading 'extPacketDelBudget': %w", err)
		}
		delete(object, "extPacketDelBudget")
	}

	if raw, found := object["maxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.MaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'maxDataBurstVol': %w", err)
		}
		delete(object, "maxDataBurstVol")
	}

	if raw, found := object["packetDelayBudget"]; found {
		err = json.Unmarshal(raw, &a.PacketDelayBudget)
		if err != nil {
			return fmt.Errorf("error reading 'packetDelayBudget': %w", err)
		}
		delete(object, "packetDelayBudget")
	}

	if raw, found := object["packetErrRate"]; found {
		err = json.Unmarshal(raw, &a.PacketErrRate)
		if err != nil {
			return fmt.Errorf("error reading 'packetErrRate': %w", err)
		}
		delete(object, "packetErrRate")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if raw, found := object["resourceType"]; found {
		err = json.Unmarshal(raw, &a.ResourceType)
		if err != nil {
			return fmt.Errorf("error reading 'resourceType': %w", err)
		}
		delete(object, "resourceType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Dynamic5Qi to handle AdditionalProperties
func (a Dynamic5Qi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AverWindow != 0 {
		object["averWindow"], err = json.Marshal(a.AverWindow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'averWindow': %w", err)
		}
	}

	if a.CnPacketDelayBudgetDl != 0 {
		object["cnPacketDelayBudgetDl"], err = json.Marshal(a.CnPacketDelayBudgetDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetDl': %w", err)
		}
	}

	if a.CnPacketDelayBudgetUl != 0 {
		object["cnPacketDelayBudgetUl"], err = json.Marshal(a.CnPacketDelayBudgetUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetUl': %w", err)
		}
	}

	if a.ExtMaxDataBurstVol != 0 {
		object["extMaxDataBurstVol"], err = json.Marshal(a.ExtMaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extMaxDataBurstVol': %w", err)
		}
	}

	if a.ExtPacketDelBudget != 0 {
		object["extPacketDelBudget"], err = json.Marshal(a.ExtPacketDelBudget)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extPacketDelBudget': %w", err)
		}
	}

	if a.MaxDataBurstVol != 0 {
		object["maxDataBurstVol"], err = json.Marshal(a.MaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxDataBurstVol': %w", err)
		}
	}

	object["packetDelayBudget"], err = json.Marshal(a.PacketDelayBudget)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packetDelayBudget': %w", err)
	}

	object["packetErrRate"], err = json.Marshal(a.PacketErrRate)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packetErrRate': %w", err)
	}

	object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
	}

	object["resourceType"], err = json.Marshal(a.ResourceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EapSession. Returns the specified
// element and whether it was found
func (a EapSession) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EapSession
func (a *EapSession) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EapSession to handle AdditionalProperties
func (a *EapSession) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading '_links': %w", err)
		}
		delete(object, "_links")
	}

	if raw, found := object["authResult"]; found {
		err = json.Unmarshal(raw, &a.AuthResult)
		if err != nil {
			return fmt.Errorf("error reading 'authResult': %w", err)
		}
		delete(object, "authResult")
	}

	if raw, found := object["eapPayload"]; found {
		err = json.Unmarshal(raw, &a.EapPayload)
		if err != nil {
			return fmt.Errorf("error reading 'eapPayload': %w", err)
		}
		delete(object, "eapPayload")
	}

	if raw, found := object["kSeaf"]; found {
		err = json.Unmarshal(raw, &a.KSeaf)
		if err != nil {
			return fmt.Errorf("error reading 'kSeaf': %w", err)
		}
		delete(object, "kSeaf")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EapSession to handle AdditionalProperties
func (a EapSession) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["_links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_links': %w", err)
		}
	}

	if len(a.AuthResult) != 0 {
		object["authResult"], err = json.Marshal(a.AuthResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authResult': %w", err)
		}
	}

	object["eapPayload"], err = json.Marshal(a.EapPayload)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eapPayload': %w", err)
	}

	if len(a.KSeaf) != 0 {
		object["kSeaf"], err = json.Marshal(a.KSeaf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'kSeaf': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EbiArpMapping. Returns the specified
// element and whether it was found
func (a EbiArpMapping) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EbiArpMapping
func (a *EbiArpMapping) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EbiArpMapping to handle AdditionalProperties
func (a *EbiArpMapping) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["epsBearerId"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerId': %w", err)
		}
		delete(object, "epsBearerId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EbiArpMapping to handle AdditionalProperties
func (a EbiArpMapping) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["arp"], err = json.Marshal(a.Arp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'arp': %w", err)
	}

	object["epsBearerId"], err = json.Marshal(a.EpsBearerId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'epsBearerId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EcRestriction. Returns the specified
// element and whether it was found
func (a EcRestriction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EcRestriction
func (a *EcRestriction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EcRestriction to handle AdditionalProperties
func (a *EcRestriction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["plmnEcInfos"]; found {
		err = json.Unmarshal(raw, &a.PlmnEcInfos)
		if err != nil {
			return fmt.Errorf("error reading 'plmnEcInfos': %w", err)
		}
		delete(object, "plmnEcInfos")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EcRestriction to handle AdditionalProperties
func (a EcRestriction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	if len(a.PlmnEcInfos) != 0 {
		object["plmnEcInfos"], err = json.Marshal(a.PlmnEcInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnEcInfos': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EcRestrictionDataWb. Returns the specified
// element and whether it was found
func (a EcRestrictionDataWb) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EcRestrictionDataWb
func (a *EcRestrictionDataWb) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EcRestrictionDataWb to handle AdditionalProperties
func (a *EcRestrictionDataWb) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecModeARestricted"]; found {
		err = json.Unmarshal(raw, &a.EcModeARestricted)
		if err != nil {
			return fmt.Errorf("error reading 'ecModeARestricted': %w", err)
		}
		delete(object, "ecModeARestricted")
	}

	if raw, found := object["ecModeBRestricted"]; found {
		err = json.Unmarshal(raw, &a.EcModeBRestricted)
		if err != nil {
			return fmt.Errorf("error reading 'ecModeBRestricted': %w", err)
		}
		delete(object, "ecModeBRestricted")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EcRestrictionDataWb to handle AdditionalProperties
func (a EcRestrictionDataWb) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EcModeARestricted != nil {
		object["ecModeARestricted"], err = json.Marshal(a.EcModeARestricted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecModeARestricted': %w", err)
		}
	}

	object["ecModeBRestricted"], err = json.Marshal(a.EcModeBRestricted)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ecModeBRestricted': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ecgi. Returns the specified
// element and whether it was found
func (a Ecgi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ecgi
func (a *Ecgi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ecgi to handle AdditionalProperties
func (a *Ecgi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eutraCellId"]; found {
		err = json.Unmarshal(raw, &a.EutraCellId)
		if err != nil {
			return fmt.Errorf("error reading 'eutraCellId': %w", err)
		}
		delete(object, "eutraCellId")
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ecgi to handle AdditionalProperties
func (a Ecgi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eutraCellId"], err = json.Marshal(a.EutraCellId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eutraCellId': %w", err)
	}

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdrxParameters. Returns the specified
// element and whether it was found
func (a EdrxParameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdrxParameters
func (a *EdrxParameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdrxParameters to handle AdditionalProperties
func (a *EdrxParameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["edrxValue"]; found {
		err = json.Unmarshal(raw, &a.EdrxValue)
		if err != nil {
			return fmt.Errorf("error reading 'edrxValue': %w", err)
		}
		delete(object, "edrxValue")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdrxParameters to handle AdditionalProperties
func (a EdrxParameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["edrxValue"], err = json.Marshal(a.EdrxValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'edrxValue': %w", err)
	}

	object["ratType"], err = json.Marshal(a.RatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EeGroupProfileData. Returns the specified
// element and whether it was found
func (a EeGroupProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EeGroupProfileData
func (a *EeGroupProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EeGroupProfileData to handle AdditionalProperties
func (a *EeGroupProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProvider"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProvider)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProvider': %w", err)
		}
		delete(object, "allowedMtcProvider")
	}

	if raw, found := object["restrictedEventTypes"]; found {
		err = json.Unmarshal(raw, &a.RestrictedEventTypes)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedEventTypes': %w", err)
		}
		delete(object, "restrictedEventTypes")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EeGroupProfileData to handle AdditionalProperties
func (a EeGroupProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProvider != nil {
		object["allowedMtcProvider"], err = json.Marshal(a.AllowedMtcProvider)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProvider': %w", err)
		}
	}

	if a.RestrictedEventTypes != nil {
		object["restrictedEventTypes"], err = json.Marshal(a.RestrictedEventTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedEventTypes': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EeProfileData. Returns the specified
// element and whether it was found
func (a EeProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EeProfileData
func (a *EeProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EeProfileData to handle AdditionalProperties
func (a *EeProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProvider"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProvider)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProvider': %w", err)
		}
		delete(object, "allowedMtcProvider")
	}

	if raw, found := object["restrictedEventTypes"]; found {
		err = json.Unmarshal(raw, &a.RestrictedEventTypes)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedEventTypes': %w", err)
		}
		delete(object, "restrictedEventTypes")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EeProfileData to handle AdditionalProperties
func (a EeProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProvider != nil {
		object["allowedMtcProvider"], err = json.Marshal(a.AllowedMtcProvider)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProvider': %w", err)
		}
	}

	if a.RestrictedEventTypes != nil {
		object["restrictedEventTypes"], err = json.Marshal(a.RestrictedEventTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedEventTypes': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EeSubscription. Returns the specified
// element and whether it was found
func (a EeSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EeSubscription
func (a *EeSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EeSubscription to handle AdditionalProperties
func (a *EeSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["callbackReference"]; found {
		err = json.Unmarshal(raw, &a.CallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'callbackReference': %w", err)
		}
		delete(object, "callbackReference")
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["epcAppliedInd"]; found {
		err = json.Unmarshal(raw, &a.EpcAppliedInd)
		if err != nil {
			return fmt.Errorf("error reading 'epcAppliedInd': %w", err)
		}
		delete(object, "epcAppliedInd")
	}

	if raw, found := object["monitoringConfigurations"]; found {
		err = json.Unmarshal(raw, &a.MonitoringConfigurations)
		if err != nil {
			return fmt.Errorf("error reading 'monitoringConfigurations': %w", err)
		}
		delete(object, "monitoringConfigurations")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["reportingOptions"]; found {
		err = json.Unmarshal(raw, &a.ReportingOptions)
		if err != nil {
			return fmt.Errorf("error reading 'reportingOptions': %w", err)
		}
		delete(object, "reportingOptions")
	}

	if raw, found := object["scefDiamHost"]; found {
		err = json.Unmarshal(raw, &a.ScefDiamHost)
		if err != nil {
			return fmt.Errorf("error reading 'scefDiamHost': %w", err)
		}
		delete(object, "scefDiamHost")
	}

	if raw, found := object["scefDiamRealm"]; found {
		err = json.Unmarshal(raw, &a.ScefDiamRealm)
		if err != nil {
			return fmt.Errorf("error reading 'scefDiamRealm': %w", err)
		}
		delete(object, "scefDiamRealm")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EeSubscription to handle AdditionalProperties
func (a EeSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["callbackReference"], err = json.Marshal(a.CallbackReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'callbackReference': %w", err)
	}

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	if a.EpcAppliedInd != nil {
		object["epcAppliedInd"], err = json.Marshal(a.EpcAppliedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epcAppliedInd': %w", err)
		}
	}

	object["monitoringConfigurations"], err = json.Marshal(a.MonitoringConfigurations)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoringConfigurations': %w", err)
	}

	if a.NotifyCorrelationId != nil {
		object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
		}
	}

	if a.ReportingOptions != nil {
		object["reportingOptions"], err = json.Marshal(a.ReportingOptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportingOptions': %w", err)
		}
	}

	if len(a.ScefDiamHost) != 0 {
		object["scefDiamHost"], err = json.Marshal(a.ScefDiamHost)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scefDiamHost': %w", err)
		}
	}

	if len(a.ScefDiamRealm) != 0 {
		object["scefDiamRealm"], err = json.Marshal(a.ScefDiamRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scefDiamRealm': %w", err)
		}
	}

	if a.SubscriptionId != nil {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EmergencyInfo. Returns the specified
// element and whether it was found
func (a EmergencyInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EmergencyInfo
func (a *EmergencyInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EmergencyInfo to handle AdditionalProperties
func (a *EmergencyInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["epdgInd"]; found {
		err = json.Unmarshal(raw, &a.EpdgInd)
		if err != nil {
			return fmt.Errorf("error reading 'epdgInd': %w", err)
		}
		delete(object, "epdgInd")
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["pgwIpAddress"]; found {
		err = json.Unmarshal(raw, &a.PgwIpAddress)
		if err != nil {
			return fmt.Errorf("error reading 'pgwIpAddress': %w", err)
		}
		delete(object, "pgwIpAddress")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EmergencyInfo to handle AdditionalProperties
func (a EmergencyInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EpdgInd != nil {
		object["epdgInd"], err = json.Marshal(a.EpdgInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epdgInd': %w", err)
		}
	}

	if a.PgwFqdn != nil {
		object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
		}
	}

	if a.PgwIpAddress != nil {
		object["pgwIpAddress"], err = json.Marshal(a.PgwIpAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwIpAddress': %w", err)
		}
	}

	if a.SmfInstanceId != nil {
		object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnableUeReachabilityReqData. Returns the specified
// element and whether it was found
func (a EnableUeReachabilityReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnableUeReachabilityReqData
func (a *EnableUeReachabilityReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnableUeReachabilityReqData to handle AdditionalProperties
func (a *EnableUeReachabilityReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["extBufSupport"]; found {
		err = json.Unmarshal(raw, &a.ExtBufSupport)
		if err != nil {
			return fmt.Errorf("error reading 'extBufSupport': %w", err)
		}
		delete(object, "extBufSupport")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["reachability"]; found {
		err = json.Unmarshal(raw, &a.Reachability)
		if err != nil {
			return fmt.Errorf("error reading 'reachability': %w", err)
		}
		delete(object, "reachability")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnableUeReachabilityReqData to handle AdditionalProperties
func (a EnableUeReachabilityReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ExtBufSupport != nil {
		object["extBufSupport"], err = json.Marshal(a.ExtBufSupport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extBufSupport': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	object["reachability"], err = json.Marshal(a.Reachability)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reachability': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnableUeReachabilityRspData. Returns the specified
// element and whether it was found
func (a EnableUeReachabilityRspData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnableUeReachabilityRspData
func (a *EnableUeReachabilityRspData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnableUeReachabilityRspData to handle AdditionalProperties
func (a *EnableUeReachabilityRspData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["reachability"]; found {
		err = json.Unmarshal(raw, &a.Reachability)
		if err != nil {
			return fmt.Errorf("error reading 'reachability': %w", err)
		}
		delete(object, "reachability")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnableUeReachabilityRspData to handle AdditionalProperties
func (a EnableUeReachabilityRspData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["reachability"], err = json.Marshal(a.Reachability)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reachability': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnhancedCoverageRestrictionData. Returns the specified
// element and whether it was found
func (a EnhancedCoverageRestrictionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnhancedCoverageRestrictionData
func (a *EnhancedCoverageRestrictionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnhancedCoverageRestrictionData to handle AdditionalProperties
func (a *EnhancedCoverageRestrictionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plmnEcInfoList"]; found {
		err = json.Unmarshal(raw, &a.PlmnEcInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'plmnEcInfoList': %w", err)
		}
		delete(object, "plmnEcInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnhancedCoverageRestrictionData to handle AdditionalProperties
func (a EnhancedCoverageRestrictionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.PlmnEcInfoList) != 0 {
		object["plmnEcInfoList"], err = json.Marshal(a.PlmnEcInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnEcInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsBearerInfo. Returns the specified
// element and whether it was found
func (a EpsBearerInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsBearerInfo
func (a *EpsBearerInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsBearerInfo to handle AdditionalProperties
func (a *EpsBearerInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bearerLevelQoS"]; found {
		err = json.Unmarshal(raw, &a.BearerLevelQoS)
		if err != nil {
			return fmt.Errorf("error reading 'bearerLevelQoS': %w", err)
		}
		delete(object, "bearerLevelQoS")
	}

	if raw, found := object["ebi"]; found {
		err = json.Unmarshal(raw, &a.Ebi)
		if err != nil {
			return fmt.Errorf("error reading 'ebi': %w", err)
		}
		delete(object, "ebi")
	}

	if raw, found := object["pgwS8uFteid"]; found {
		err = json.Unmarshal(raw, &a.PgwS8uFteid)
		if err != nil {
			return fmt.Errorf("error reading 'pgwS8uFteid': %w", err)
		}
		delete(object, "pgwS8uFteid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsBearerInfo to handle AdditionalProperties
func (a EpsBearerInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bearerLevelQoS"], err = json.Marshal(a.BearerLevelQoS)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bearerLevelQoS': %w", err)
	}

	object["ebi"], err = json.Marshal(a.Ebi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ebi': %w", err)
	}

	object["pgwS8uFteid"], err = json.Marshal(a.PgwS8uFteid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwS8uFteid': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsInterworkingInfo. Returns the specified
// element and whether it was found
func (a EpsInterworkingInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsInterworkingInfo
func (a *EpsInterworkingInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsInterworkingInfo to handle AdditionalProperties
func (a *EpsInterworkingInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["epsIwkPgws"]; found {
		err = json.Unmarshal(raw, &a.EpsIwkPgws)
		if err != nil {
			return fmt.Errorf("error reading 'epsIwkPgws': %w", err)
		}
		delete(object, "epsIwkPgws")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsInterworkingInfo to handle AdditionalProperties
func (a EpsInterworkingInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EpsIwkPgws != nil {
		object["epsIwkPgws"], err = json.Marshal(a.EpsIwkPgws)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsIwkPgws': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsIwkPgw. Returns the specified
// element and whether it was found
func (a EpsIwkPgw) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsIwkPgw
func (a *EpsIwkPgw) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsIwkPgw to handle AdditionalProperties
func (a *EpsIwkPgw) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsIwkPgw to handle AdditionalProperties
func (a EpsIwkPgw) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
	}

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsNasSecurityMode. Returns the specified
// element and whether it was found
func (a EpsNasSecurityMode) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsNasSecurityMode
func (a *EpsNasSecurityMode) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsNasSecurityMode to handle AdditionalProperties
func (a *EpsNasSecurityMode) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cipheringAlgorithm"]; found {
		err = json.Unmarshal(raw, &a.CipheringAlgorithm)
		if err != nil {
			return fmt.Errorf("error reading 'cipheringAlgorithm': %w", err)
		}
		delete(object, "cipheringAlgorithm")
	}

	if raw, found := object["integrityAlgorithm"]; found {
		err = json.Unmarshal(raw, &a.IntegrityAlgorithm)
		if err != nil {
			return fmt.Errorf("error reading 'integrityAlgorithm': %w", err)
		}
		delete(object, "integrityAlgorithm")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsNasSecurityMode to handle AdditionalProperties
func (a EpsNasSecurityMode) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cipheringAlgorithm"], err = json.Marshal(a.CipheringAlgorithm)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cipheringAlgorithm': %w", err)
	}

	object["integrityAlgorithm"], err = json.Marshal(a.IntegrityAlgorithm)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'integrityAlgorithm': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsPdnCnxInfo. Returns the specified
// element and whether it was found
func (a EpsPdnCnxInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsPdnCnxInfo
func (a *EpsPdnCnxInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsPdnCnxInfo to handle AdditionalProperties
func (a *EpsPdnCnxInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["linkedBearerId"]; found {
		err = json.Unmarshal(raw, &a.LinkedBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'linkedBearerId': %w", err)
		}
		delete(object, "linkedBearerId")
	}

	if raw, found := object["pgwNodeName"]; found {
		err = json.Unmarshal(raw, &a.PgwNodeName)
		if err != nil {
			return fmt.Errorf("error reading 'pgwNodeName': %w", err)
		}
		delete(object, "pgwNodeName")
	}

	if raw, found := object["pgwS8cFteid"]; found {
		err = json.Unmarshal(raw, &a.PgwS8cFteid)
		if err != nil {
			return fmt.Errorf("error reading 'pgwS8cFteid': %w", err)
		}
		delete(object, "pgwS8cFteid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsPdnCnxInfo to handle AdditionalProperties
func (a EpsPdnCnxInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.LinkedBearerId != nil {
		object["linkedBearerId"], err = json.Marshal(a.LinkedBearerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'linkedBearerId': %w", err)
		}
	}

	if a.PgwNodeName != nil {
		object["pgwNodeName"], err = json.Marshal(a.PgwNodeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwNodeName': %w", err)
		}
	}

	object["pgwS8cFteid"], err = json.Marshal(a.PgwS8cFteid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwS8cFteid': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorReport. Returns the specified
// element and whether it was found
func (a ErrorReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorReport
func (a *ErrorReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorReport to handle AdditionalProperties
func (a *ErrorReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altQosParamId"]; found {
		err = json.Unmarshal(raw, &a.AltQosParamId)
		if err != nil {
			return fmt.Errorf("error reading 'altQosParamId': %w", err)
		}
		delete(object, "altQosParamId")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["polDecFailureReports"]; found {
		err = json.Unmarshal(raw, &a.PolDecFailureReports)
		if err != nil {
			return fmt.Errorf("error reading 'polDecFailureReports': %w", err)
		}
		delete(object, "polDecFailureReports")
	}

	if raw, found := object["ruleReports"]; found {
		err = json.Unmarshal(raw, &a.RuleReports)
		if err != nil {
			return fmt.Errorf("error reading 'ruleReports': %w", err)
		}
		delete(object, "ruleReports")
	}

	if raw, found := object["sessRuleReports"]; found {
		err = json.Unmarshal(raw, &a.SessRuleReports)
		if err != nil {
			return fmt.Errorf("error reading 'sessRuleReports': %w", err)
		}
		delete(object, "sessRuleReports")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorReport to handle AdditionalProperties
func (a ErrorReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltQosParamId != nil {
		object["altQosParamId"], err = json.Marshal(a.AltQosParamId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altQosParamId': %w", err)
		}
	}

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	if len(a.PolDecFailureReports) != 0 {
		object["polDecFailureReports"], err = json.Marshal(a.PolDecFailureReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'polDecFailureReports': %w", err)
		}
	}

	if len(a.RuleReports) != 0 {
		object["ruleReports"], err = json.Marshal(a.RuleReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ruleReports': %w", err)
		}
	}

	if len(a.SessRuleReports) != 0 {
		object["sessRuleReports"], err = json.Marshal(a.SessRuleReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessRuleReports': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EthFlowDescription. Returns the specified
// element and whether it was found
func (a EthFlowDescription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EthFlowDescription
func (a *EthFlowDescription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EthFlowDescription to handle AdditionalProperties
func (a *EthFlowDescription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["destMacAddr"]; found {
		err = json.Unmarshal(raw, &a.DestMacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'destMacAddr': %w", err)
		}
		delete(object, "destMacAddr")
	}

	if raw, found := object["destMacAddrEnd"]; found {
		err = json.Unmarshal(raw, &a.DestMacAddrEnd)
		if err != nil {
			return fmt.Errorf("error reading 'destMacAddrEnd': %w", err)
		}
		delete(object, "destMacAddrEnd")
	}

	if raw, found := object["ethType"]; found {
		err = json.Unmarshal(raw, &a.EthType)
		if err != nil {
			return fmt.Errorf("error reading 'ethType': %w", err)
		}
		delete(object, "ethType")
	}

	if raw, found := object["fDesc"]; found {
		err = json.Unmarshal(raw, &a.FDesc)
		if err != nil {
			return fmt.Errorf("error reading 'fDesc': %w", err)
		}
		delete(object, "fDesc")
	}

	if raw, found := object["fDir"]; found {
		err = json.Unmarshal(raw, &a.FDir)
		if err != nil {
			return fmt.Errorf("error reading 'fDir': %w", err)
		}
		delete(object, "fDir")
	}

	if raw, found := object["sourceMacAddr"]; found {
		err = json.Unmarshal(raw, &a.SourceMacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'sourceMacAddr': %w", err)
		}
		delete(object, "sourceMacAddr")
	}

	if raw, found := object["srcMacAddrEnd"]; found {
		err = json.Unmarshal(raw, &a.SrcMacAddrEnd)
		if err != nil {
			return fmt.Errorf("error reading 'srcMacAddrEnd': %w", err)
		}
		delete(object, "srcMacAddrEnd")
	}

	if raw, found := object["vlanTags"]; found {
		err = json.Unmarshal(raw, &a.VlanTags)
		if err != nil {
			return fmt.Errorf("error reading 'vlanTags': %w", err)
		}
		delete(object, "vlanTags")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EthFlowDescription to handle AdditionalProperties
func (a EthFlowDescription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DestMacAddr) != 0 {
		object["destMacAddr"], err = json.Marshal(a.DestMacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'destMacAddr': %w", err)
		}
	}

	if len(a.DestMacAddrEnd) != 0 {
		object["destMacAddrEnd"], err = json.Marshal(a.DestMacAddrEnd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'destMacAddrEnd': %w", err)
		}
	}

	object["ethType"], err = json.Marshal(a.EthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ethType': %w", err)
	}

	if a.FDesc != nil {
		object["fDesc"], err = json.Marshal(a.FDesc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fDesc': %w", err)
		}
	}

	if a.FDir != nil {
		object["fDir"], err = json.Marshal(a.FDir)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fDir': %w", err)
		}
	}

	if len(a.SourceMacAddr) != 0 {
		object["sourceMacAddr"], err = json.Marshal(a.SourceMacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceMacAddr': %w", err)
		}
	}

	if len(a.SrcMacAddrEnd) != 0 {
		object["srcMacAddrEnd"], err = json.Marshal(a.SrcMacAddrEnd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcMacAddrEnd': %w", err)
		}
	}

	if len(a.VlanTags) != 0 {
		object["vlanTags"], err = json.Marshal(a.VlanTags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vlanTags': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EthernetFlowInfo. Returns the specified
// element and whether it was found
func (a EthernetFlowInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EthernetFlowInfo
func (a *EthernetFlowInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EthernetFlowInfo to handle AdditionalProperties
func (a *EthernetFlowInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ethFlows"]; found {
		err = json.Unmarshal(raw, &a.EthFlows)
		if err != nil {
			return fmt.Errorf("error reading 'ethFlows': %w", err)
		}
		delete(object, "ethFlows")
	}

	if raw, found := object["flowNumber"]; found {
		err = json.Unmarshal(raw, &a.FlowNumber)
		if err != nil {
			return fmt.Errorf("error reading 'flowNumber': %w", err)
		}
		delete(object, "flowNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EthernetFlowInfo to handle AdditionalProperties
func (a EthernetFlowInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.EthFlows) != 0 {
		object["ethFlows"], err = json.Marshal(a.EthFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethFlows': %w", err)
		}
	}

	object["flowNumber"], err = json.Marshal(a.FlowNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flowNumber': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EutraLocation. Returns the specified
// element and whether it was found
func (a EutraLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EutraLocation
func (a *EutraLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EutraLocation to handle AdditionalProperties
func (a *EutraLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["globalENbId"]; found {
		err = json.Unmarshal(raw, &a.GlobalENbId)
		if err != nil {
			return fmt.Errorf("error reading 'globalENbId': %w", err)
		}
		delete(object, "globalENbId")
	}

	if raw, found := object["globalNgenbId"]; found {
		err = json.Unmarshal(raw, &a.GlobalNgenbId)
		if err != nil {
			return fmt.Errorf("error reading 'globalNgenbId': %w", err)
		}
		delete(object, "globalNgenbId")
	}

	if raw, found := object["ignoreEcgi"]; found {
		err = json.Unmarshal(raw, &a.IgnoreEcgi)
		if err != nil {
			return fmt.Errorf("error reading 'ignoreEcgi': %w", err)
		}
		delete(object, "ignoreEcgi")
	}

	if raw, found := object["ignoreTai"]; found {
		err = json.Unmarshal(raw, &a.IgnoreTai)
		if err != nil {
			return fmt.Errorf("error reading 'ignoreTai': %w", err)
		}
		delete(object, "ignoreTai")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EutraLocation to handle AdditionalProperties
func (a EutraLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	object["ecgi"], err = json.Marshal(a.Ecgi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.GlobalENbId != nil {
		object["globalENbId"], err = json.Marshal(a.GlobalENbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalENbId': %w", err)
		}
	}

	if a.GlobalNgenbId != nil {
		object["globalNgenbId"], err = json.Marshal(a.GlobalNgenbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalNgenbId': %w", err)
		}
	}

	if a.IgnoreEcgi != nil {
		object["ignoreEcgi"], err = json.Marshal(a.IgnoreEcgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ignoreEcgi': %w", err)
		}
	}

	if a.IgnoreTai != nil {
		object["ignoreTai"], err = json.Marshal(a.IgnoreTai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ignoreTai': %w", err)
		}
	}

	object["tai"], err = json.Marshal(a.Tai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tai': %w", err)
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventNotification. Returns the specified
// element and whether it was found
func (a EventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventNotification
func (a *EventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventNotification to handle AdditionalProperties
func (a *EventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accType"]; found {
		err = json.Unmarshal(raw, &a.AccType)
		if err != nil {
			return fmt.Errorf("error reading 'accType': %w", err)
		}
		delete(object, "accType")
	}

	if raw, found := object["adIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AdIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'adIpv4Addr': %w", err)
		}
		delete(object, "adIpv4Addr")
	}

	if raw, found := object["adIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.AdIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'adIpv6Prefix': %w", err)
		}
		delete(object, "adIpv6Prefix")
	}

	if raw, found := object["appId"]; found {
		err = json.Unmarshal(raw, &a.AppId)
		if err != nil {
			return fmt.Errorf("error reading 'appId': %w", err)
		}
		delete(object, "appId")
	}

	if raw, found := object["commFailure"]; found {
		err = json.Unmarshal(raw, &a.CommFailure)
		if err != nil {
			return fmt.Errorf("error reading 'commFailure': %w", err)
		}
		delete(object, "commFailure")
	}

	if raw, found := object["dddStatus"]; found {
		err = json.Unmarshal(raw, &a.DddStatus)
		if err != nil {
			return fmt.Errorf("error reading 'dddStatus': %w", err)
		}
		delete(object, "dddStatus")
	}

	if raw, found := object["dddTraDescriptor"]; found {
		err = json.Unmarshal(raw, &a.DddTraDescriptor)
		if err != nil {
			return fmt.Errorf("error reading 'dddTraDescriptor': %w", err)
		}
		delete(object, "dddTraDescriptor")
	}

	if raw, found := object["dlDelays"]; found {
		err = json.Unmarshal(raw, &a.DlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'dlDelays': %w", err)
		}
		delete(object, "dlDelays")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ethfDescs"]; found {
		err = json.Unmarshal(raw, &a.EthfDescs)
		if err != nil {
			return fmt.Errorf("error reading 'ethfDescs': %w", err)
		}
		delete(object, "ethfDescs")
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["fDescs"]; found {
		err = json.Unmarshal(raw, &a.FDescs)
		if err != nil {
			return fmt.Errorf("error reading 'fDescs': %w", err)
		}
		delete(object, "fDescs")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addrs': %w", err)
		}
		delete(object, "ipv6Addrs")
	}

	if raw, found := object["ipv6Prefixes"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefixes)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefixes': %w", err)
		}
		delete(object, "ipv6Prefixes")
	}

	if raw, found := object["maxWaitTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitTime': %w", err)
		}
		delete(object, "maxWaitTime")
	}

	if raw, found := object["pduSeId"]; found {
		err = json.Unmarshal(raw, &a.PduSeId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSeId': %w", err)
		}
		delete(object, "pduSeId")
	}

	if raw, found := object["pduSessType"]; found {
		err = json.Unmarshal(raw, &a.PduSessType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessType': %w", err)
		}
		delete(object, "pduSessType")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["reIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.ReIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'reIpv4Addr': %w", err)
		}
		delete(object, "reIpv4Addr")
	}

	if raw, found := object["reIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.ReIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'reIpv6Prefix': %w", err)
		}
		delete(object, "reIpv6Prefix")
	}

	if raw, found := object["rtDelays"]; found {
		err = json.Unmarshal(raw, &a.RtDelays)
		if err != nil {
			return fmt.Errorf("error reading 'rtDelays': %w", err)
		}
		delete(object, "rtDelays")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["sourceDnai"]; found {
		err = json.Unmarshal(raw, &a.SourceDnai)
		if err != nil {
			return fmt.Errorf("error reading 'sourceDnai': %w", err)
		}
		delete(object, "sourceDnai")
	}

	if raw, found := object["sourceTraRouting"]; found {
		err = json.Unmarshal(raw, &a.SourceTraRouting)
		if err != nil {
			return fmt.Errorf("error reading 'sourceTraRouting': %w", err)
		}
		delete(object, "sourceTraRouting")
	}

	if raw, found := object["sourceUeIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.SourceUeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'sourceUeIpv4Addr': %w", err)
		}
		delete(object, "sourceUeIpv4Addr")
	}

	if raw, found := object["sourceUeIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.SourceUeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'sourceUeIpv6Prefix': %w", err)
		}
		delete(object, "sourceUeIpv6Prefix")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["targetDnai"]; found {
		err = json.Unmarshal(raw, &a.TargetDnai)
		if err != nil {
			return fmt.Errorf("error reading 'targetDnai': %w", err)
		}
		delete(object, "targetDnai")
	}

	if raw, found := object["targetTraRouting"]; found {
		err = json.Unmarshal(raw, &a.TargetTraRouting)
		if err != nil {
			return fmt.Errorf("error reading 'targetTraRouting': %w", err)
		}
		delete(object, "targetTraRouting")
	}

	if raw, found := object["targetUeIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.TargetUeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'targetUeIpv4Addr': %w", err)
		}
		delete(object, "targetUeIpv4Addr")
	}

	if raw, found := object["targetUeIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.TargetUeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'targetUeIpv6Prefix': %w", err)
		}
		delete(object, "targetUeIpv6Prefix")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if raw, found := object["ulDelays"]; found {
		err = json.Unmarshal(raw, &a.UlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'ulDelays': %w", err)
		}
		delete(object, "ulDelays")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventNotification to handle AdditionalProperties
func (a EventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccType) != 0 {
		object["accType"], err = json.Marshal(a.AccType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accType': %w", err)
		}
	}

	if len(a.AdIpv4Addr) != 0 {
		object["adIpv4Addr"], err = json.Marshal(a.AdIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'adIpv4Addr': %w", err)
		}
	}

	if a.AdIpv6Prefix != nil {
		object["adIpv6Prefix"], err = json.Marshal(a.AdIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'adIpv6Prefix': %w", err)
		}
	}

	if a.AppId != nil {
		object["appId"], err = json.Marshal(a.AppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appId': %w", err)
		}
	}

	if a.CommFailure != nil {
		object["commFailure"], err = json.Marshal(a.CommFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commFailure': %w", err)
		}
	}

	if a.DddStatus != nil {
		object["dddStatus"], err = json.Marshal(a.DddStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddStatus': %w", err)
		}
	}

	if a.DddTraDescriptor != nil {
		object["dddTraDescriptor"], err = json.Marshal(a.DddTraDescriptor)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddTraDescriptor': %w", err)
		}
	}

	if len(a.DlDelays) != 0 {
		object["dlDelays"], err = json.Marshal(a.DlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDelays': %w", err)
		}
	}

	if a.DnaiChgType != nil {
		object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EthfDescs) != 0 {
		object["ethfDescs"], err = json.Marshal(a.EthfDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethfDescs': %w", err)
		}
	}

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if len(a.FDescs) != 0 {
		object["fDescs"], err = json.Marshal(a.FDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fDescs': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if len(a.Ipv6Addrs) != 0 {
		object["ipv6Addrs"], err = json.Marshal(a.Ipv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addrs': %w", err)
		}
	}

	if len(a.Ipv6Prefixes) != 0 {
		object["ipv6Prefixes"], err = json.Marshal(a.Ipv6Prefixes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefixes': %w", err)
		}
	}

	if a.MaxWaitTime != nil {
		object["maxWaitTime"], err = json.Marshal(a.MaxWaitTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitTime': %w", err)
		}
	}

	if a.PduSeId != nil {
		object["pduSeId"], err = json.Marshal(a.PduSeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSeId': %w", err)
		}
	}

	if a.PduSessType != nil {
		object["pduSessType"], err = json.Marshal(a.PduSessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessType': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.Qfi != nil {
		object["qfi"], err = json.Marshal(a.Qfi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
		}
	}

	if len(a.ReIpv4Addr) != 0 {
		object["reIpv4Addr"], err = json.Marshal(a.ReIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reIpv4Addr': %w", err)
		}
	}

	if a.ReIpv6Prefix != nil {
		object["reIpv6Prefix"], err = json.Marshal(a.ReIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reIpv6Prefix': %w", err)
		}
	}

	if len(a.RtDelays) != 0 {
		object["rtDelays"], err = json.Marshal(a.RtDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rtDelays': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if a.SourceDnai != nil {
		object["sourceDnai"], err = json.Marshal(a.SourceDnai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceDnai': %w", err)
		}
	}

	object["sourceTraRouting"], err = json.Marshal(a.SourceTraRouting)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sourceTraRouting': %w", err)
	}

	if len(a.SourceUeIpv4Addr) != 0 {
		object["sourceUeIpv4Addr"], err = json.Marshal(a.SourceUeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceUeIpv4Addr': %w", err)
		}
	}

	if a.SourceUeIpv6Prefix != nil {
		object["sourceUeIpv6Prefix"], err = json.Marshal(a.SourceUeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceUeIpv6Prefix': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.TargetDnai != nil {
		object["targetDnai"], err = json.Marshal(a.TargetDnai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetDnai': %w", err)
		}
	}

	object["targetTraRouting"], err = json.Marshal(a.TargetTraRouting)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'targetTraRouting': %w", err)
	}

	if len(a.TargetUeIpv4Addr) != 0 {
		object["targetUeIpv4Addr"], err = json.Marshal(a.TargetUeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetUeIpv4Addr': %w", err)
		}
	}

	if a.TargetUeIpv6Prefix != nil {
		object["targetUeIpv6Prefix"], err = json.Marshal(a.TargetUeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetUeIpv6Prefix': %w", err)
		}
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	if len(a.UlDelays) != 0 {
		object["ulDelays"], err = json.Marshal(a.UlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulDelays': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventSubscription. Returns the specified
// element and whether it was found
func (a EventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventSubscription
func (a *EventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventSubscription to handle AdditionalProperties
func (a *EventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appIds"]; found {
		err = json.Unmarshal(raw, &a.AppIds)
		if err != nil {
			return fmt.Errorf("error reading 'appIds': %w", err)
		}
		delete(object, "appIds")
	}

	if raw, found := object["dddStati"]; found {
		err = json.Unmarshal(raw, &a.DddStati)
		if err != nil {
			return fmt.Errorf("error reading 'dddStati': %w", err)
		}
		delete(object, "dddStati")
	}

	if raw, found := object["dddTraDescriptors"]; found {
		err = json.Unmarshal(raw, &a.DddTraDescriptors)
		if err != nil {
			return fmt.Errorf("error reading 'dddTraDescriptors': %w", err)
		}
		delete(object, "dddTraDescriptors")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventSubscription to handle AdditionalProperties
func (a EventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AppIds) != 0 {
		object["appIds"], err = json.Marshal(a.AppIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appIds': %w", err)
		}
	}

	if len(a.DddStati) != 0 {
		object["dddStati"], err = json.Marshal(a.DddStati)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddStati': %w", err)
		}
	}

	if len(a.DddTraDescriptors) != 0 {
		object["dddTraDescriptors"], err = json.Marshal(a.DddTraDescriptors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddTraDescriptors': %w", err)
		}
	}

	if a.DnaiChgType != nil {
		object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
		}
	}

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventsNotification. Returns the specified
// element and whether it was found
func (a EventsNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventsNotification
func (a *EventsNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventsNotification to handle AdditionalProperties
func (a *EventsNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["addAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.AddAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addAccessInfo': %w", err)
		}
		delete(object, "addAccessInfo")
	}

	if raw, found := object["anChargAddr"]; found {
		err = json.Unmarshal(raw, &a.AnChargAddr)
		if err != nil {
			return fmt.Errorf("error reading 'anChargAddr': %w", err)
		}
		delete(object, "anChargAddr")
	}

	if raw, found := object["anChargIds"]; found {
		err = json.Unmarshal(raw, &a.AnChargIds)
		if err != nil {
			return fmt.Errorf("error reading 'anChargIds': %w", err)
		}
		delete(object, "anChargIds")
	}

	if raw, found := object["anGwAddr"]; found {
		err = json.Unmarshal(raw, &a.AnGwAddr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwAddr': %w", err)
		}
		delete(object, "anGwAddr")
	}

	if raw, found := object["evNotifs"]; found {
		err = json.Unmarshal(raw, &a.EvNotifs)
		if err != nil {
			return fmt.Errorf("error reading 'evNotifs': %w", err)
		}
		delete(object, "evNotifs")
	}

	if raw, found := object["evSubsUri"]; found {
		err = json.Unmarshal(raw, &a.EvSubsUri)
		if err != nil {
			return fmt.Errorf("error reading 'evSubsUri': %w", err)
		}
		delete(object, "evSubsUri")
	}

	if raw, found := object["failedResourcAllocReports"]; found {
		err = json.Unmarshal(raw, &a.FailedResourcAllocReports)
		if err != nil {
			return fmt.Errorf("error reading 'failedResourcAllocReports': %w", err)
		}
		delete(object, "failedResourcAllocReports")
	}

	if raw, found := object["noNetLocSupp"]; found {
		err = json.Unmarshal(raw, &a.NoNetLocSupp)
		if err != nil {
			return fmt.Errorf("error reading 'noNetLocSupp': %w", err)
		}
		delete(object, "noNetLocSupp")
	}

	if raw, found := object["outOfCredReports"]; found {
		err = json.Unmarshal(raw, &a.OutOfCredReports)
		if err != nil {
			return fmt.Errorf("error reading 'outOfCredReports': %w", err)
		}
		delete(object, "outOfCredReports")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["qncReports"]; found {
		err = json.Unmarshal(raw, &a.QncReports)
		if err != nil {
			return fmt.Errorf("error reading 'qncReports': %w", err)
		}
		delete(object, "qncReports")
	}

	if raw, found := object["qosMonReports"]; found {
		err = json.Unmarshal(raw, &a.QosMonReports)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonReports': %w", err)
		}
		delete(object, "qosMonReports")
	}

	if raw, found := object["ranNasRelCauses"]; found {
		err = json.Unmarshal(raw, &a.RanNasRelCauses)
		if err != nil {
			return fmt.Errorf("error reading 'ranNasRelCauses': %w", err)
		}
		delete(object, "ranNasRelCauses")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["relAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.RelAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'relAccessInfo': %w", err)
		}
		delete(object, "relAccessInfo")
	}

	if raw, found := object["succResourcAllocReports"]; found {
		err = json.Unmarshal(raw, &a.SuccResourcAllocReports)
		if err != nil {
			return fmt.Errorf("error reading 'succResourcAllocReports': %w", err)
		}
		delete(object, "succResourcAllocReports")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if raw, found := object["ueLoc"]; found {
		err = json.Unmarshal(raw, &a.UeLoc)
		if err != nil {
			return fmt.Errorf("error reading 'ueLoc': %w", err)
		}
		delete(object, "ueLoc")
	}

	if raw, found := object["ueLocTime"]; found {
		err = json.Unmarshal(raw, &a.UeLocTime)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocTime': %w", err)
		}
		delete(object, "ueLocTime")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["usgRep"]; found {
		err = json.Unmarshal(raw, &a.UsgRep)
		if err != nil {
			return fmt.Errorf("error reading 'usgRep': %w", err)
		}
		delete(object, "usgRep")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventsNotification to handle AdditionalProperties
func (a EventsNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.AddAccessInfo != nil {
		object["addAccessInfo"], err = json.Marshal(a.AddAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addAccessInfo': %w", err)
		}
	}

	if a.AnChargAddr != nil {
		object["anChargAddr"], err = json.Marshal(a.AnChargAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anChargAddr': %w", err)
		}
	}

	if len(a.AnChargIds) != 0 {
		object["anChargIds"], err = json.Marshal(a.AnChargIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anChargIds': %w", err)
		}
	}

	if a.AnGwAddr != nil {
		object["anGwAddr"], err = json.Marshal(a.AnGwAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwAddr': %w", err)
		}
	}

	object["evNotifs"], err = json.Marshal(a.EvNotifs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'evNotifs': %w", err)
	}

	object["evSubsUri"], err = json.Marshal(a.EvSubsUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'evSubsUri': %w", err)
	}

	if len(a.FailedResourcAllocReports) != 0 {
		object["failedResourcAllocReports"], err = json.Marshal(a.FailedResourcAllocReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedResourcAllocReports': %w", err)
		}
	}

	if a.NoNetLocSupp != nil {
		object["noNetLocSupp"], err = json.Marshal(a.NoNetLocSupp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noNetLocSupp': %w", err)
		}
	}

	if len(a.OutOfCredReports) != 0 {
		object["outOfCredReports"], err = json.Marshal(a.OutOfCredReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'outOfCredReports': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if len(a.QncReports) != 0 {
		object["qncReports"], err = json.Marshal(a.QncReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qncReports': %w", err)
		}
	}

	if len(a.QosMonReports) != 0 {
		object["qosMonReports"], err = json.Marshal(a.QosMonReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonReports': %w", err)
		}
	}

	if len(a.RanNasRelCauses) != 0 {
		object["ranNasRelCauses"], err = json.Marshal(a.RanNasRelCauses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranNasRelCauses': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RelAccessInfo != nil {
		object["relAccessInfo"], err = json.Marshal(a.RelAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relAccessInfo': %w", err)
		}
	}

	if len(a.SuccResourcAllocReports) != 0 {
		object["succResourcAllocReports"], err = json.Marshal(a.SuccResourcAllocReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'succResourcAllocReports': %w", err)
		}
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	if a.UeLoc != nil {
		object["ueLoc"], err = json.Marshal(a.UeLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLoc': %w", err)
		}
	}

	if a.UeLocTime != nil {
		object["ueLocTime"], err = json.Marshal(a.UeLocTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocTime': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UsgRep != nil {
		object["usgRep"], err = json.Marshal(a.UsgRep)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usgRep': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventsSubscReqData. Returns the specified
// element and whether it was found
func (a EventsSubscReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventsSubscReqData
func (a *EventsSubscReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventsSubscReqData to handle AdditionalProperties
func (a *EventsSubscReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["events"]; found {
		err = json.Unmarshal(raw, &a.Events)
		if err != nil {
			return fmt.Errorf("error reading 'events': %w", err)
		}
		delete(object, "events")
	}

	if raw, found := object["notifCorreId"]; found {
		err = json.Unmarshal(raw, &a.NotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'notifCorreId': %w", err)
		}
		delete(object, "notifCorreId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["qosMon"]; found {
		err = json.Unmarshal(raw, &a.QosMon)
		if err != nil {
			return fmt.Errorf("error reading 'qosMon': %w", err)
		}
		delete(object, "qosMon")
	}

	if raw, found := object["reqAnis"]; found {
		err = json.Unmarshal(raw, &a.ReqAnis)
		if err != nil {
			return fmt.Errorf("error reading 'reqAnis': %w", err)
		}
		delete(object, "reqAnis")
	}

	if raw, found := object["reqQosMonParams"]; found {
		err = json.Unmarshal(raw, &a.ReqQosMonParams)
		if err != nil {
			return fmt.Errorf("error reading 'reqQosMonParams': %w", err)
		}
		delete(object, "reqQosMonParams")
	}

	if raw, found := object["usgThres"]; found {
		err = json.Unmarshal(raw, &a.UsgThres)
		if err != nil {
			return fmt.Errorf("error reading 'usgThres': %w", err)
		}
		delete(object, "usgThres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventsSubscReqData to handle AdditionalProperties
func (a EventsSubscReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["events"], err = json.Marshal(a.Events)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'events': %w", err)
	}

	if a.NotifCorreId != nil {
		object["notifCorreId"], err = json.Marshal(a.NotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifCorreId': %w", err)
		}
	}

	if a.NotifUri != nil {
		object["notifUri"], err = json.Marshal(a.NotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
		}
	}

	if a.QosMon != nil {
		object["qosMon"], err = json.Marshal(a.QosMon)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMon': %w", err)
		}
	}

	if len(a.ReqAnis) != 0 {
		object["reqAnis"], err = json.Marshal(a.ReqAnis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqAnis': %w", err)
		}
	}

	if len(a.ReqQosMonParams) != 0 {
		object["reqQosMonParams"], err = json.Marshal(a.ReqQosMonParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqQosMonParams': %w", err)
		}
	}

	if a.UsgThres != nil {
		object["usgThres"], err = json.Marshal(a.UsgThres)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usgThres': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventsSubscReqDataRm. Returns the specified
// element and whether it was found
func (a EventsSubscReqDataRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventsSubscReqDataRm
func (a *EventsSubscReqDataRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventsSubscReqDataRm to handle AdditionalProperties
func (a *EventsSubscReqDataRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["events"]; found {
		err = json.Unmarshal(raw, &a.Events)
		if err != nil {
			return fmt.Errorf("error reading 'events': %w", err)
		}
		delete(object, "events")
	}

	if raw, found := object["notifCorreId"]; found {
		err = json.Unmarshal(raw, &a.NotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'notifCorreId': %w", err)
		}
		delete(object, "notifCorreId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["qosMon"]; found {
		err = json.Unmarshal(raw, &a.QosMon)
		if err != nil {
			return fmt.Errorf("error reading 'qosMon': %w", err)
		}
		delete(object, "qosMon")
	}

	if raw, found := object["reqAnis"]; found {
		err = json.Unmarshal(raw, &a.ReqAnis)
		if err != nil {
			return fmt.Errorf("error reading 'reqAnis': %w", err)
		}
		delete(object, "reqAnis")
	}

	if raw, found := object["reqQosMonParams"]; found {
		err = json.Unmarshal(raw, &a.ReqQosMonParams)
		if err != nil {
			return fmt.Errorf("error reading 'reqQosMonParams': %w", err)
		}
		delete(object, "reqQosMonParams")
	}

	if raw, found := object["usgThres"]; found {
		err = json.Unmarshal(raw, &a.UsgThres)
		if err != nil {
			return fmt.Errorf("error reading 'usgThres': %w", err)
		}
		delete(object, "usgThres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventsSubscReqDataRm to handle AdditionalProperties
func (a EventsSubscReqDataRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["events"], err = json.Marshal(a.Events)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'events': %w", err)
	}

	if a.NotifCorreId != nil {
		object["notifCorreId"], err = json.Marshal(a.NotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifCorreId': %w", err)
		}
	}

	if a.NotifUri != nil {
		object["notifUri"], err = json.Marshal(a.NotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
		}
	}

	object["qosMon"], err = json.Marshal(a.QosMon)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosMon': %w", err)
	}

	if len(a.ReqAnis) != 0 {
		object["reqAnis"], err = json.Marshal(a.ReqAnis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqAnis': %w", err)
		}
	}

	if len(a.ReqQosMonParams) != 0 {
		object["reqQosMonParams"], err = json.Marshal(a.ReqQosMonParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqQosMonParams': %w", err)
		}
	}

	object["usgThres"], err = json.Marshal(a.UsgThres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'usgThres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExemptionInd. Returns the specified
// element and whether it was found
func (a ExemptionInd) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExemptionInd
func (a *ExemptionInd) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExemptionInd to handle AdditionalProperties
func (a *ExemptionInd) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnCongestion"]; found {
		err = json.Unmarshal(raw, &a.DnnCongestion)
		if err != nil {
			return fmt.Errorf("error reading 'dnnCongestion': %w", err)
		}
		delete(object, "dnnCongestion")
	}

	if raw, found := object["snssaiDnnCongestion"]; found {
		err = json.Unmarshal(raw, &a.SnssaiDnnCongestion)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiDnnCongestion': %w", err)
		}
		delete(object, "snssaiDnnCongestion")
	}

	if raw, found := object["snssaiOnlyCongestion"]; found {
		err = json.Unmarshal(raw, &a.SnssaiOnlyCongestion)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiOnlyCongestion': %w", err)
		}
		delete(object, "snssaiOnlyCongestion")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExemptionInd to handle AdditionalProperties
func (a ExemptionInd) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DnnCongestion != nil {
		object["dnnCongestion"], err = json.Marshal(a.DnnCongestion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnCongestion': %w", err)
		}
	}

	if a.SnssaiDnnCongestion != nil {
		object["snssaiDnnCongestion"], err = json.Marshal(a.SnssaiDnnCongestion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiDnnCongestion': %w", err)
		}
	}

	if a.SnssaiOnlyCongestion != nil {
		object["snssaiOnlyCongestion"], err = json.Marshal(a.SnssaiOnlyCongestion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiOnlyCongestion': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExpectedUeBehavior. Returns the specified
// element and whether it was found
func (a ExpectedUeBehavior) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExpectedUeBehavior
func (a *ExpectedUeBehavior) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExpectedUeBehavior to handle AdditionalProperties
func (a *ExpectedUeBehavior) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expMoveTrajectory"]; found {
		err = json.Unmarshal(raw, &a.ExpMoveTrajectory)
		if err != nil {
			return fmt.Errorf("error reading 'expMoveTrajectory': %w", err)
		}
		delete(object, "expMoveTrajectory")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExpectedUeBehavior to handle AdditionalProperties
func (a ExpectedUeBehavior) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["expMoveTrajectory"], err = json.Marshal(a.ExpMoveTrajectory)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'expMoveTrajectory': %w", err)
	}

	object["validityTime"], err = json.Marshal(a.ValidityTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExpectedUeBehaviour. Returns the specified
// element and whether it was found
func (a ExpectedUeBehaviour) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExpectedUeBehaviour
func (a *ExpectedUeBehaviour) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExpectedUeBehaviour to handle AdditionalProperties
func (a *ExpectedUeBehaviour) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["batteryIndication"]; found {
		err = json.Unmarshal(raw, &a.BatteryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'batteryIndication': %w", err)
		}
		delete(object, "batteryIndication")
	}

	if raw, found := object["communicationDurationTime"]; found {
		err = json.Unmarshal(raw, &a.CommunicationDurationTime)
		if err != nil {
			return fmt.Errorf("error reading 'communicationDurationTime': %w", err)
		}
		delete(object, "communicationDurationTime")
	}

	if raw, found := object["expectedUmts"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUmts)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUmts': %w", err)
		}
		delete(object, "expectedUmts")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["periodicTime"]; found {
		err = json.Unmarshal(raw, &a.PeriodicTime)
		if err != nil {
			return fmt.Errorf("error reading 'periodicTime': %w", err)
		}
		delete(object, "periodicTime")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["scheduledCommunicationTime"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationTime)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationTime': %w", err)
		}
		delete(object, "scheduledCommunicationTime")
	}

	if raw, found := object["scheduledCommunicationType"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationType)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationType': %w", err)
		}
		delete(object, "scheduledCommunicationType")
	}

	if raw, found := object["stationaryIndication"]; found {
		err = json.Unmarshal(raw, &a.StationaryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'stationaryIndication': %w", err)
		}
		delete(object, "stationaryIndication")
	}

	if raw, found := object["trafficProfile"]; found {
		err = json.Unmarshal(raw, &a.TrafficProfile)
		if err != nil {
			return fmt.Errorf("error reading 'trafficProfile': %w", err)
		}
		delete(object, "trafficProfile")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExpectedUeBehaviour to handle AdditionalProperties
func (a ExpectedUeBehaviour) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.BatteryIndication != nil {
		object["batteryIndication"], err = json.Marshal(a.BatteryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryIndication': %w", err)
		}
	}

	object["communicationDurationTime"], err = json.Marshal(a.CommunicationDurationTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'communicationDurationTime': %w", err)
	}

	object["expectedUmts"], err = json.Marshal(a.ExpectedUmts)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'expectedUmts': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["periodicTime"], err = json.Marshal(a.PeriodicTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'periodicTime': %w", err)
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ScheduledCommunicationTime != nil {
		object["scheduledCommunicationTime"], err = json.Marshal(a.ScheduledCommunicationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationTime': %w", err)
		}
	}

	if a.ScheduledCommunicationType != nil {
		object["scheduledCommunicationType"], err = json.Marshal(a.ScheduledCommunicationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationType': %w", err)
		}
	}

	if a.StationaryIndication != nil {
		object["stationaryIndication"], err = json.Marshal(a.StationaryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stationaryIndication': %w", err)
		}
	}

	if a.TrafficProfile != nil {
		object["trafficProfile"], err = json.Marshal(a.TrafficProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficProfile': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExpectedUeBehaviourData. Returns the specified
// element and whether it was found
func (a ExpectedUeBehaviourData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExpectedUeBehaviourData
func (a *ExpectedUeBehaviourData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExpectedUeBehaviourData to handle AdditionalProperties
func (a *ExpectedUeBehaviourData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryIndication"]; found {
		err = json.Unmarshal(raw, &a.BatteryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'batteryIndication': %w", err)
		}
		delete(object, "batteryIndication")
	}

	if raw, found := object["communicationDurationTime"]; found {
		err = json.Unmarshal(raw, &a.CommunicationDurationTime)
		if err != nil {
			return fmt.Errorf("error reading 'communicationDurationTime': %w", err)
		}
		delete(object, "communicationDurationTime")
	}

	if raw, found := object["expectedUmts"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUmts)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUmts': %w", err)
		}
		delete(object, "expectedUmts")
	}

	if raw, found := object["periodicTime"]; found {
		err = json.Unmarshal(raw, &a.PeriodicTime)
		if err != nil {
			return fmt.Errorf("error reading 'periodicTime': %w", err)
		}
		delete(object, "periodicTime")
	}

	if raw, found := object["scheduledCommunicationTime"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationTime)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationTime': %w", err)
		}
		delete(object, "scheduledCommunicationTime")
	}

	if raw, found := object["scheduledCommunicationType"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationType)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationType': %w", err)
		}
		delete(object, "scheduledCommunicationType")
	}

	if raw, found := object["stationaryIndication"]; found {
		err = json.Unmarshal(raw, &a.StationaryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'stationaryIndication': %w", err)
		}
		delete(object, "stationaryIndication")
	}

	if raw, found := object["trafficProfile"]; found {
		err = json.Unmarshal(raw, &a.TrafficProfile)
		if err != nil {
			return fmt.Errorf("error reading 'trafficProfile': %w", err)
		}
		delete(object, "trafficProfile")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExpectedUeBehaviourData to handle AdditionalProperties
func (a ExpectedUeBehaviourData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryIndication != nil {
		object["batteryIndication"], err = json.Marshal(a.BatteryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryIndication': %w", err)
		}
	}

	if a.CommunicationDurationTime != nil {
		object["communicationDurationTime"], err = json.Marshal(a.CommunicationDurationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'communicationDurationTime': %w", err)
		}
	}

	if len(a.ExpectedUmts) != 0 {
		object["expectedUmts"], err = json.Marshal(a.ExpectedUmts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUmts': %w", err)
		}
	}

	if a.PeriodicTime != nil {
		object["periodicTime"], err = json.Marshal(a.PeriodicTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicTime': %w", err)
		}
	}

	if a.ScheduledCommunicationTime != nil {
		object["scheduledCommunicationTime"], err = json.Marshal(a.ScheduledCommunicationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationTime': %w", err)
		}
	}

	if a.ScheduledCommunicationType != nil {
		object["scheduledCommunicationType"], err = json.Marshal(a.ScheduledCommunicationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationType': %w", err)
		}
	}

	if a.StationaryIndication != nil {
		object["stationaryIndication"], err = json.Marshal(a.StationaryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stationaryIndication': %w", err)
		}
	}

	if a.TrafficProfile != nil {
		object["trafficProfile"], err = json.Marshal(a.TrafficProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficProfile': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExposureDataChangeNotification. Returns the specified
// element and whether it was found
func (a ExposureDataChangeNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExposureDataChangeNotification
func (a *ExposureDataChangeNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExposureDataChangeNotification to handle AdditionalProperties
func (a *ExposureDataChangeNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessAndMobilityData"]; found {
		err = json.Unmarshal(raw, &a.AccessAndMobilityData)
		if err != nil {
			return fmt.Errorf("error reading 'accessAndMobilityData': %w", err)
		}
		delete(object, "accessAndMobilityData")
	}

	if raw, found := object["delResources"]; found {
		err = json.Unmarshal(raw, &a.DelResources)
		if err != nil {
			return fmt.Errorf("error reading 'delResources': %w", err)
		}
		delete(object, "delResources")
	}

	if raw, found := object["pduSessionManagementData"]; found {
		err = json.Unmarshal(raw, &a.PduSessionManagementData)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionManagementData': %w", err)
		}
		delete(object, "pduSessionManagementData")
	}

	if raw, found := object["ueId"]; found {
		err = json.Unmarshal(raw, &a.UeId)
		if err != nil {
			return fmt.Errorf("error reading 'ueId': %w", err)
		}
		delete(object, "ueId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExposureDataChangeNotification to handle AdditionalProperties
func (a ExposureDataChangeNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessAndMobilityData != nil {
		object["accessAndMobilityData"], err = json.Marshal(a.AccessAndMobilityData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessAndMobilityData': %w", err)
		}
	}

	if len(a.DelResources) != 0 {
		object["delResources"], err = json.Marshal(a.DelResources)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'delResources': %w", err)
		}
	}

	if len(a.PduSessionManagementData) != 0 {
		object["pduSessionManagementData"], err = json.Marshal(a.PduSessionManagementData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionManagementData': %w", err)
		}
	}

	if len(a.UeId) != 0 {
		object["ueId"], err = json.Marshal(a.UeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExposureDataSubscription. Returns the specified
// element and whether it was found
func (a ExposureDataSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExposureDataSubscription
func (a *ExposureDataSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExposureDataSubscription to handle AdditionalProperties
func (a *ExposureDataSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExposureDataSubscription to handle AdditionalProperties
func (a ExposureDataSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtAmfEventSubscription. Returns the specified
// element and whether it was found
func (a ExtAmfEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtAmfEventSubscription
func (a *ExtAmfEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtAmfEventSubscription to handle AdditionalProperties
func (a *ExtAmfEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anyUE"]; found {
		err = json.Unmarshal(raw, &a.AnyUE)
		if err != nil {
			return fmt.Errorf("error reading 'anyUE': %w", err)
		}
		delete(object, "anyUE")
	}

	if raw, found := object["aoiStateList"]; found {
		err = json.Unmarshal(raw, &a.AoiStateList)
		if err != nil {
			return fmt.Errorf("error reading 'aoiStateList': %w", err)
		}
		delete(object, "aoiStateList")
	}

	if raw, found := object["bindingInfo"]; found {
		err = json.Unmarshal(raw, &a.BindingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'bindingInfo': %w", err)
		}
		delete(object, "bindingInfo")
	}

	if raw, found := object["eventList"]; found {
		err = json.Unmarshal(raw, &a.EventList)
		if err != nil {
			return fmt.Errorf("error reading 'eventList': %w", err)
		}
		delete(object, "eventList")
	}

	if raw, found := object["eventNotifyUri"]; found {
		err = json.Unmarshal(raw, &a.EventNotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'eventNotifyUri': %w", err)
		}
		delete(object, "eventNotifyUri")
	}

	if raw, found := object["eventSyncInd"]; found {
		err = json.Unmarshal(raw, &a.EventSyncInd)
		if err != nil {
			return fmt.Errorf("error reading 'eventSyncInd': %w", err)
		}
		delete(object, "eventSyncInd")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["nfId"]; found {
		err = json.Unmarshal(raw, &a.NfId)
		if err != nil {
			return fmt.Errorf("error reading 'nfId': %w", err)
		}
		delete(object, "nfId")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if raw, found := object["options"]; found {
		err = json.Unmarshal(raw, &a.Options)
		if err != nil {
			return fmt.Errorf("error reading 'options': %w", err)
		}
		delete(object, "options")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["sourceNfType"]; found {
		err = json.Unmarshal(raw, &a.SourceNfType)
		if err != nil {
			return fmt.Errorf("error reading 'sourceNfType': %w", err)
		}
		delete(object, "sourceNfType")
	}

	if raw, found := object["subsChangeNotifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyCorrelationId': %w", err)
		}
		delete(object, "subsChangeNotifyCorrelationId")
	}

	if raw, found := object["subsChangeNotifyUri"]; found {
		err = json.Unmarshal(raw, &a.SubsChangeNotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'subsChangeNotifyUri': %w", err)
		}
		delete(object, "subsChangeNotifyUri")
	}

	if raw, found := object["subscribingNfType"]; found {
		err = json.Unmarshal(raw, &a.SubscribingNfType)
		if err != nil {
			return fmt.Errorf("error reading 'subscribingNfType': %w", err)
		}
		delete(object, "subscribingNfType")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtAmfEventSubscription to handle AdditionalProperties
func (a ExtAmfEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnyUE != nil {
		object["anyUE"], err = json.Marshal(a.AnyUE)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUE': %w", err)
		}
	}

	if a.AoiStateList != nil {
		object["aoiStateList"], err = json.Marshal(a.AoiStateList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'aoiStateList': %w", err)
		}
	}

	if len(a.BindingInfo) != 0 {
		object["bindingInfo"], err = json.Marshal(a.BindingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bindingInfo': %w", err)
		}
	}

	object["eventList"], err = json.Marshal(a.EventList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventList': %w", err)
	}

	object["eventNotifyUri"], err = json.Marshal(a.EventNotifyUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventNotifyUri': %w", err)
	}

	if a.EventSyncInd != nil {
		object["eventSyncInd"], err = json.Marshal(a.EventSyncInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventSyncInd': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.GroupId) != 0 {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	object["nfId"], err = json.Marshal(a.NfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfId': %w", err)
	}

	object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
	}

	if a.Options != nil {
		object["options"], err = json.Marshal(a.Options)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'options': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.SourceNfType != nil {
		object["sourceNfType"], err = json.Marshal(a.SourceNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceNfType': %w", err)
		}
	}

	if a.SubsChangeNotifyCorrelationId != nil {
		object["subsChangeNotifyCorrelationId"], err = json.Marshal(a.SubsChangeNotifyCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyCorrelationId': %w", err)
		}
	}

	if a.SubsChangeNotifyUri != nil {
		object["subsChangeNotifyUri"], err = json.Marshal(a.SubsChangeNotifyUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsChangeNotifyUri': %w", err)
		}
	}

	if a.SubscribingNfType != nil {
		object["subscribingNfType"], err = json.Marshal(a.SubscribingNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribingNfType': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtProblemDetails. Returns the specified
// element and whether it was found
func (a ExtProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtProblemDetails
func (a *ExtProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtProblemDetails to handle AdditionalProperties
func (a *ExtProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["remoteError"]; found {
		err = json.Unmarshal(raw, &a.RemoteError)
		if err != nil {
			return fmt.Errorf("error reading 'remoteError': %w", err)
		}
		delete(object, "remoteError")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtProblemDetails to handle AdditionalProperties
func (a ExtProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.RemoteError != nil {
		object["remoteError"], err = json.Marshal(a.RemoteError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remoteError': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtSnssai. Returns the specified
// element and whether it was found
func (a ExtSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtSnssai
func (a *ExtSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtSnssai to handle AdditionalProperties
func (a *ExtSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return fmt.Errorf("error reading 'sd': %w", err)
		}
		delete(object, "sd")
	}

	if raw, found := object["sdRanges"]; found {
		err = json.Unmarshal(raw, &a.SdRanges)
		if err != nil {
			return fmt.Errorf("error reading 'sdRanges': %w", err)
		}
		delete(object, "sdRanges")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return fmt.Errorf("error reading 'sst': %w", err)
		}
		delete(object, "sst")
	}

	if raw, found := object["wildcardSd"]; found {
		err = json.Unmarshal(raw, &a.WildcardSd)
		if err != nil {
			return fmt.Errorf("error reading 'wildcardSd': %w", err)
		}
		delete(object, "wildcardSd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtSnssai to handle AdditionalProperties
func (a ExtSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Sd) != 0 {
		object["sd"], err = json.Marshal(a.Sd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sd': %w", err)
		}
	}

	if len(a.SdRanges) != 0 {
		object["sdRanges"], err = json.Marshal(a.SdRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdRanges': %w", err)
		}
	}

	object["sst"], err = json.Marshal(a.Sst)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sst': %w", err)
	}

	if a.WildcardSd != nil {
		object["wildcardSd"], err = json.Marshal(a.WildcardSd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wildcardSd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtendedProblemDetails. Returns the specified
// element and whether it was found
func (a ExtendedProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtendedProblemDetails
func (a *ExtendedProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtendedProblemDetails to handle AdditionalProperties
func (a *ExtendedProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["acceptableServInfo"]; found {
		err = json.Unmarshal(raw, &a.AcceptableServInfo)
		if err != nil {
			return fmt.Errorf("error reading 'acceptableServInfo': %w", err)
		}
		delete(object, "acceptableServInfo")
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtendedProblemDetails to handle AdditionalProperties
func (a ExtendedProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AcceptableServInfo != nil {
		object["acceptableServInfo"], err = json.Marshal(a.AcceptableServInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acceptableServInfo': %w", err)
		}
	}

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalUnrelatedClass. Returns the specified
// element and whether it was found
func (a ExternalUnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalUnrelatedClass
func (a *ExternalUnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalUnrelatedClass to handle AdditionalProperties
func (a *ExternalUnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afExternals"]; found {
		err = json.Unmarshal(raw, &a.AfExternals)
		if err != nil {
			return fmt.Errorf("error reading 'afExternals': %w", err)
		}
		delete(object, "afExternals")
	}

	if raw, found := object["lcsClientExternals"]; found {
		err = json.Unmarshal(raw, &a.LcsClientExternals)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientExternals': %w", err)
		}
		delete(object, "lcsClientExternals")
	}

	if raw, found := object["lcsClientGroupExternals"]; found {
		err = json.Unmarshal(raw, &a.LcsClientGroupExternals)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientGroupExternals': %w", err)
		}
		delete(object, "lcsClientGroupExternals")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalUnrelatedClass to handle AdditionalProperties
func (a ExternalUnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AfExternals) != 0 {
		object["afExternals"], err = json.Marshal(a.AfExternals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afExternals': %w", err)
		}
	}

	if len(a.LcsClientExternals) != 0 {
		object["lcsClientExternals"], err = json.Marshal(a.LcsClientExternals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsClientExternals': %w", err)
		}
	}

	if len(a.LcsClientGroupExternals) != 0 {
		object["lcsClientGroupExternals"], err = json.Marshal(a.LcsClientGroupExternals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsClientGroupExternals': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for FlowInfo. Returns the specified
// element and whether it was found
func (a FlowInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FlowInfo
func (a *FlowInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FlowInfo to handle AdditionalProperties
func (a *FlowInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["flowDescriptions"]; found {
		err = json.Unmarshal(raw, &a.FlowDescriptions)
		if err != nil {
			return fmt.Errorf("error reading 'flowDescriptions': %w", err)
		}
		delete(object, "flowDescriptions")
	}

	if raw, found := object["flowId"]; found {
		err = json.Unmarshal(raw, &a.FlowId)
		if err != nil {
			return fmt.Errorf("error reading 'flowId': %w", err)
		}
		delete(object, "flowId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FlowInfo to handle AdditionalProperties
func (a FlowInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.FlowDescriptions) != 0 {
		object["flowDescriptions"], err = json.Marshal(a.FlowDescriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDescriptions': %w", err)
		}
	}

	object["flowId"], err = json.Marshal(a.FlowId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flowId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for FlowInformation. Returns the specified
// element and whether it was found
func (a FlowInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FlowInformation
func (a *FlowInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FlowInformation to handle AdditionalProperties
func (a *FlowInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ethFlowDescription"]; found {
		err = json.Unmarshal(raw, &a.EthFlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'ethFlowDescription': %w", err)
		}
		delete(object, "ethFlowDescription")
	}

	if raw, found := object["flowDescription"]; found {
		err = json.Unmarshal(raw, &a.FlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'flowDescription': %w", err)
		}
		delete(object, "flowDescription")
	}

	if raw, found := object["flowDirection"]; found {
		err = json.Unmarshal(raw, &a.FlowDirection)
		if err != nil {
			return fmt.Errorf("error reading 'flowDirection': %w", err)
		}
		delete(object, "flowDirection")
	}

	if raw, found := object["flowLabel"]; found {
		err = json.Unmarshal(raw, &a.FlowLabel)
		if err != nil {
			return fmt.Errorf("error reading 'flowLabel': %w", err)
		}
		delete(object, "flowLabel")
	}

	if raw, found := object["packFiltId"]; found {
		err = json.Unmarshal(raw, &a.PackFiltId)
		if err != nil {
			return fmt.Errorf("error reading 'packFiltId': %w", err)
		}
		delete(object, "packFiltId")
	}

	if raw, found := object["packetFilterUsage"]; found {
		err = json.Unmarshal(raw, &a.PacketFilterUsage)
		if err != nil {
			return fmt.Errorf("error reading 'packetFilterUsage': %w", err)
		}
		delete(object, "packetFilterUsage")
	}

	if raw, found := object["spi"]; found {
		err = json.Unmarshal(raw, &a.Spi)
		if err != nil {
			return fmt.Errorf("error reading 'spi': %w", err)
		}
		delete(object, "spi")
	}

	if raw, found := object["tosTrafficClass"]; found {
		err = json.Unmarshal(raw, &a.TosTrafficClass)
		if err != nil {
			return fmt.Errorf("error reading 'tosTrafficClass': %w", err)
		}
		delete(object, "tosTrafficClass")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FlowInformation to handle AdditionalProperties
func (a FlowInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EthFlowDescription != nil {
		object["ethFlowDescription"], err = json.Marshal(a.EthFlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethFlowDescription': %w", err)
		}
	}

	if a.FlowDescription != nil {
		object["flowDescription"], err = json.Marshal(a.FlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDescription': %w", err)
		}
	}

	if a.FlowDirection != nil {
		object["flowDirection"], err = json.Marshal(a.FlowDirection)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDirection': %w", err)
		}
	}

	object["flowLabel"], err = json.Marshal(a.FlowLabel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flowLabel': %w", err)
	}

	if a.PackFiltId != nil {
		object["packFiltId"], err = json.Marshal(a.PackFiltId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packFiltId': %w", err)
		}
	}

	if a.PacketFilterUsage != nil {
		object["packetFilterUsage"], err = json.Marshal(a.PacketFilterUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packetFilterUsage': %w", err)
		}
	}

	object["spi"], err = json.Marshal(a.Spi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'spi': %w", err)
	}

	object["tosTrafficClass"], err = json.Marshal(a.TosTrafficClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tosTrafficClass': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Flows. Returns the specified
// element and whether it was found
func (a Flows) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Flows
func (a *Flows) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Flows to handle AdditionalProperties
func (a *Flows) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contVers"]; found {
		err = json.Unmarshal(raw, &a.ContVers)
		if err != nil {
			return fmt.Errorf("error reading 'contVers': %w", err)
		}
		delete(object, "contVers")
	}

	if raw, found := object["fNums"]; found {
		err = json.Unmarshal(raw, &a.FNums)
		if err != nil {
			return fmt.Errorf("error reading 'fNums': %w", err)
		}
		delete(object, "fNums")
	}

	if raw, found := object["medCompN"]; found {
		err = json.Unmarshal(raw, &a.MedCompN)
		if err != nil {
			return fmt.Errorf("error reading 'medCompN': %w", err)
		}
		delete(object, "medCompN")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Flows to handle AdditionalProperties
func (a Flows) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ContVers) != 0 {
		object["contVers"], err = json.Marshal(a.ContVers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVers': %w", err)
		}
	}

	if len(a.FNums) != 0 {
		object["fNums"], err = json.Marshal(a.FNums)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fNums': %w", err)
		}
	}

	object["medCompN"], err = json.Marshal(a.MedCompN)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'medCompN': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for FrameRouteInfo. Returns the specified
// element and whether it was found
func (a FrameRouteInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FrameRouteInfo
func (a *FrameRouteInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FrameRouteInfo to handle AdditionalProperties
func (a *FrameRouteInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Mask"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Mask)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Mask': %w", err)
		}
		delete(object, "ipv4Mask")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FrameRouteInfo to handle AdditionalProperties
func (a FrameRouteInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Mask) != 0 {
		object["ipv4Mask"], err = json.Marshal(a.Ipv4Mask)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Mask': %w", err)
		}
	}

	if a.Ipv6Prefix != nil {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GNbId. Returns the specified
// element and whether it was found
func (a GNbId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GNbId
func (a *GNbId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GNbId to handle AdditionalProperties
func (a *GNbId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bitLength"]; found {
		err = json.Unmarshal(raw, &a.BitLength)
		if err != nil {
			return fmt.Errorf("error reading 'bitLength': %w", err)
		}
		delete(object, "bitLength")
	}

	if raw, found := object["gNBValue"]; found {
		err = json.Unmarshal(raw, &a.GNBValue)
		if err != nil {
			return fmt.Errorf("error reading 'gNBValue': %w", err)
		}
		delete(object, "gNBValue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GNbId to handle AdditionalProperties
func (a GNbId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bitLength"], err = json.Marshal(a.BitLength)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bitLength': %w", err)
	}

	object["gNBValue"], err = json.Marshal(a.GNBValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gNBValue': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GbrQosFlowInformation. Returns the specified
// element and whether it was found
func (a GbrQosFlowInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GbrQosFlowInformation
func (a *GbrQosFlowInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GbrQosFlowInformation to handle AdditionalProperties
func (a *GbrQosFlowInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["alternativeQosProfileList"]; found {
		err = json.Unmarshal(raw, &a.AlternativeQosProfileList)
		if err != nil {
			return fmt.Errorf("error reading 'alternativeQosProfileList': %w", err)
		}
		delete(object, "alternativeQosProfileList")
	}

	if raw, found := object["guaFbrDl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrDl': %w", err)
		}
		delete(object, "guaFbrDl")
	}

	if raw, found := object["guaFbrUl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrUl': %w", err)
		}
		delete(object, "guaFbrUl")
	}

	if raw, found := object["maxFbrDl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrDl': %w", err)
		}
		delete(object, "maxFbrDl")
	}

	if raw, found := object["maxFbrUl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrUl': %w", err)
		}
		delete(object, "maxFbrUl")
	}

	if raw, found := object["maxPacketLossRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateDl': %w", err)
		}
		delete(object, "maxPacketLossRateDl")
	}

	if raw, found := object["maxPacketLossRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateUl': %w", err)
		}
		delete(object, "maxPacketLossRateUl")
	}

	if raw, found := object["notifControl"]; found {
		err = json.Unmarshal(raw, &a.NotifControl)
		if err != nil {
			return fmt.Errorf("error reading 'notifControl': %w", err)
		}
		delete(object, "notifControl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GbrQosFlowInformation to handle AdditionalProperties
func (a GbrQosFlowInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AlternativeQosProfileList != nil {
		object["alternativeQosProfileList"], err = json.Marshal(a.AlternativeQosProfileList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alternativeQosProfileList': %w", err)
		}
	}

	object["guaFbrDl"], err = json.Marshal(a.GuaFbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guaFbrDl': %w", err)
	}

	object["guaFbrUl"], err = json.Marshal(a.GuaFbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guaFbrUl': %w", err)
	}

	object["maxFbrDl"], err = json.Marshal(a.MaxFbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxFbrDl': %w", err)
	}

	object["maxFbrUl"], err = json.Marshal(a.MaxFbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxFbrUl': %w", err)
	}

	if a.MaxPacketLossRateDl != nil {
		object["maxPacketLossRateDl"], err = json.Marshal(a.MaxPacketLossRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxPacketLossRateDl': %w", err)
		}
	}

	if a.MaxPacketLossRateUl != nil {
		object["maxPacketLossRateUl"], err = json.Marshal(a.MaxPacketLossRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxPacketLossRateUl': %w", err)
		}
	}

	if a.NotifControl != nil {
		object["notifControl"], err = json.Marshal(a.NotifControl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifControl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GeraLocation. Returns the specified
// element and whether it was found
func (a GeraLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GeraLocation
func (a *GeraLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GeraLocation to handle AdditionalProperties
func (a *GeraLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["cgi"]; found {
		err = json.Unmarshal(raw, &a.Cgi)
		if err != nil {
			return fmt.Errorf("error reading 'cgi': %w", err)
		}
		delete(object, "cgi")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["lai"]; found {
		err = json.Unmarshal(raw, &a.Lai)
		if err != nil {
			return fmt.Errorf("error reading 'lai': %w", err)
		}
		delete(object, "lai")
	}

	if raw, found := object["locationNumber"]; found {
		err = json.Unmarshal(raw, &a.LocationNumber)
		if err != nil {
			return fmt.Errorf("error reading 'locationNumber': %w", err)
		}
		delete(object, "locationNumber")
	}

	if raw, found := object["mscNumber"]; found {
		err = json.Unmarshal(raw, &a.MscNumber)
		if err != nil {
			return fmt.Errorf("error reading 'mscNumber': %w", err)
		}
		delete(object, "mscNumber")
	}

	if raw, found := object["rai"]; found {
		err = json.Unmarshal(raw, &a.Rai)
		if err != nil {
			return fmt.Errorf("error reading 'rai': %w", err)
		}
		delete(object, "rai")
	}

	if raw, found := object["sai"]; found {
		err = json.Unmarshal(raw, &a.Sai)
		if err != nil {
			return fmt.Errorf("error reading 'sai': %w", err)
		}
		delete(object, "sai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if raw, found := object["vlrNumber"]; found {
		err = json.Unmarshal(raw, &a.VlrNumber)
		if err != nil {
			return fmt.Errorf("error reading 'vlrNumber': %w", err)
		}
		delete(object, "vlrNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GeraLocation to handle AdditionalProperties
func (a GeraLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	if a.Cgi != nil {
		object["cgi"], err = json.Marshal(a.Cgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cgi': %w", err)
		}
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.Lai != nil {
		object["lai"], err = json.Marshal(a.Lai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lai': %w", err)
		}
	}

	if a.LocationNumber != nil {
		object["locationNumber"], err = json.Marshal(a.LocationNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationNumber': %w", err)
		}
	}

	if a.MscNumber != nil {
		object["mscNumber"], err = json.Marshal(a.MscNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mscNumber': %w", err)
		}
	}

	if a.Rai != nil {
		object["rai"], err = json.Marshal(a.Rai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rai': %w", err)
		}
	}

	if a.Sai != nil {
		object["sai"], err = json.Marshal(a.Sai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sai': %w", err)
		}
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	if a.VlrNumber != nil {
		object["vlrNumber"], err = json.Marshal(a.VlrNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vlrNumber': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GlobalRanNodeId. Returns the specified
// element and whether it was found
func (a GlobalRanNodeId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GlobalRanNodeId
func (a *GlobalRanNodeId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GlobalRanNodeId to handle AdditionalProperties
func (a *GlobalRanNodeId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eNbId"]; found {
		err = json.Unmarshal(raw, &a.ENbId)
		if err != nil {
			return fmt.Errorf("error reading 'eNbId': %w", err)
		}
		delete(object, "eNbId")
	}

	if raw, found := object["gNbId"]; found {
		err = json.Unmarshal(raw, &a.GNbId)
		if err != nil {
			return fmt.Errorf("error reading 'gNbId': %w", err)
		}
		delete(object, "gNbId")
	}

	if raw, found := object["n3IwfId"]; found {
		err = json.Unmarshal(raw, &a.N3IwfId)
		if err != nil {
			return fmt.Errorf("error reading 'n3IwfId': %w", err)
		}
		delete(object, "n3IwfId")
	}

	if raw, found := object["ngeNbId"]; found {
		err = json.Unmarshal(raw, &a.NgeNbId)
		if err != nil {
			return fmt.Errorf("error reading 'ngeNbId': %w", err)
		}
		delete(object, "ngeNbId")
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["tngfId"]; found {
		err = json.Unmarshal(raw, &a.TngfId)
		if err != nil {
			return fmt.Errorf("error reading 'tngfId': %w", err)
		}
		delete(object, "tngfId")
	}

	if raw, found := object["wagfId"]; found {
		err = json.Unmarshal(raw, &a.WagfId)
		if err != nil {
			return fmt.Errorf("error reading 'wagfId': %w", err)
		}
		delete(object, "wagfId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GlobalRanNodeId to handle AdditionalProperties
func (a GlobalRanNodeId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ENbId) != 0 {
		object["eNbId"], err = json.Marshal(a.ENbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eNbId': %w", err)
		}
	}

	if a.GNbId != nil {
		object["gNbId"], err = json.Marshal(a.GNbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gNbId': %w", err)
		}
	}

	if len(a.N3IwfId) != 0 {
		object["n3IwfId"], err = json.Marshal(a.N3IwfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3IwfId': %w", err)
		}
	}

	if len(a.NgeNbId) != 0 {
		object["ngeNbId"], err = json.Marshal(a.NgeNbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngeNbId': %w", err)
		}
	}

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if len(a.TngfId) != 0 {
		object["tngfId"], err = json.Marshal(a.TngfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tngfId': %w", err)
		}
	}

	if len(a.WagfId) != 0 {
		object["wagfId"], err = json.Marshal(a.WagfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wagfId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GmlcInfo. Returns the specified
// element and whether it was found
func (a GmlcInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GmlcInfo
func (a *GmlcInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GmlcInfo to handle AdditionalProperties
func (a *GmlcInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gmlcNumbers"]; found {
		err = json.Unmarshal(raw, &a.GmlcNumbers)
		if err != nil {
			return fmt.Errorf("error reading 'gmlcNumbers': %w", err)
		}
		delete(object, "gmlcNumbers")
	}

	if raw, found := object["servingClientTypes"]; found {
		err = json.Unmarshal(raw, &a.ServingClientTypes)
		if err != nil {
			return fmt.Errorf("error reading 'servingClientTypes': %w", err)
		}
		delete(object, "servingClientTypes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GmlcInfo to handle AdditionalProperties
func (a GmlcInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GmlcNumbers) != 0 {
		object["gmlcNumbers"], err = json.Marshal(a.GmlcNumbers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gmlcNumbers': %w", err)
		}
	}

	if len(a.ServingClientTypes) != 0 {
		object["servingClientTypes"], err = json.Marshal(a.ServingClientTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingClientTypes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GroupIdentifiers. Returns the specified
// element and whether it was found
func (a GroupIdentifiers) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GroupIdentifiers
func (a *GroupIdentifiers) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GroupIdentifiers to handle AdditionalProperties
func (a *GroupIdentifiers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["extGroupId"]; found {
		err = json.Unmarshal(raw, &a.ExtGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'extGroupId': %w", err)
		}
		delete(object, "extGroupId")
	}

	if raw, found := object["intGroupId"]; found {
		err = json.Unmarshal(raw, &a.IntGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'intGroupId': %w", err)
		}
		delete(object, "intGroupId")
	}

	if raw, found := object["ueIdList"]; found {
		err = json.Unmarshal(raw, &a.UeIdList)
		if err != nil {
			return fmt.Errorf("error reading 'ueIdList': %w", err)
		}
		delete(object, "ueIdList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GroupIdentifiers to handle AdditionalProperties
func (a GroupIdentifiers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ExtGroupId) != 0 {
		object["extGroupId"], err = json.Marshal(a.ExtGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extGroupId': %w", err)
		}
	}

	if len(a.IntGroupId) != 0 {
		object["intGroupId"], err = json.Marshal(a.IntGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'intGroupId': %w", err)
		}
	}

	if len(a.UeIdList) != 0 {
		object["ueIdList"], err = json.Marshal(a.UeIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIdList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GuamiListCond. Returns the specified
// element and whether it was found
func (a GuamiListCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GuamiListCond
func (a *GuamiListCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GuamiListCond to handle AdditionalProperties
func (a *GuamiListCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["guamiList"]; found {
		err = json.Unmarshal(raw, &a.GuamiList)
		if err != nil {
			return fmt.Errorf("error reading 'guamiList': %w", err)
		}
		delete(object, "guamiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GuamiListCond to handle AdditionalProperties
func (a GuamiListCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["guamiList"], err = json.Marshal(a.GuamiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guamiList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HfcNodeId. Returns the specified
// element and whether it was found
func (a HfcNodeId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HfcNodeId
func (a *HfcNodeId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HfcNodeId to handle AdditionalProperties
func (a *HfcNodeId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hfcNId"]; found {
		err = json.Unmarshal(raw, &a.HfcNId)
		if err != nil {
			return fmt.Errorf("error reading 'hfcNId': %w", err)
		}
		delete(object, "hfcNId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HfcNodeId to handle AdditionalProperties
func (a HfcNodeId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hfcNId"], err = json.Marshal(a.HfcNId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hfcNId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HsmfUpdateData. Returns the specified
// element and whether it was found
func (a HsmfUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HsmfUpdateData
func (a *HsmfUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HsmfUpdateData to handle AdditionalProperties
func (a *HsmfUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["NotifyList"]; found {
		err = json.Unmarshal(raw, &a.NotifyList)
		if err != nil {
			return fmt.Errorf("error reading 'NotifyList': %w", err)
		}
		delete(object, "NotifyList")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnRequested"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnRequested)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnRequested': %w", err)
		}
		delete(object, "alwaysOnRequested")
	}

	if raw, found := object["amfNfId"]; found {
		err = json.Unmarshal(raw, &a.AmfNfId)
		if err != nil {
			return fmt.Errorf("error reading 'amfNfId': %w", err)
		}
		delete(object, "amfNfId")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["anTypeCanBeChanged"]; found {
		err = json.Unmarshal(raw, &a.AnTypeCanBeChanged)
		if err != nil {
			return fmt.Errorf("error reading 'anTypeCanBeChanged': %w", err)
		}
		delete(object, "anTypeCanBeChanged")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dlServingPlmnRateCtl"]; found {
		err = json.Unmarshal(raw, &a.DlServingPlmnRateCtl)
		if err != nil {
			return fmt.Errorf("error reading 'dlServingPlmnRateCtl': %w", err)
		}
		delete(object, "dlServingPlmnRateCtl")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["epsBearerId"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerId': %w", err)
		}
		delete(object, "epsBearerId")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hoPreparationIndication"]; found {
		err = json.Unmarshal(raw, &a.HoPreparationIndication)
		if err != nil {
			return fmt.Errorf("error reading 'hoPreparationIndication': %w", err)
		}
		delete(object, "hoPreparationIndication")
	}

	if raw, found := object["iSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ISmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'iSmfServiceInstanceId': %w", err)
		}
		delete(object, "iSmfServiceInstanceId")
	}

	if raw, found := object["icnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.IcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'icnTunnelInfo': %w", err)
		}
		delete(object, "icnTunnelInfo")
	}

	if raw, found := object["ismfId"]; found {
		err = json.Unmarshal(raw, &a.IsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'ismfId': %w", err)
		}
		delete(object, "ismfId")
	}

	if raw, found := object["ismfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.IsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'ismfPduSessionUri': %w", err)
		}
		delete(object, "ismfPduSessionUri")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maReleaseInd"]; found {
		err = json.Unmarshal(raw, &a.MaReleaseInd)
		if err != nil {
			return fmt.Errorf("error reading 'maReleaseInd': %w", err)
		}
		delete(object, "maReleaseInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["pauseCharging"]; found {
		err = json.Unmarshal(raw, &a.PauseCharging)
		if err != nil {
			return fmt.Errorf("error reading 'pauseCharging': %w", err)
		}
		delete(object, "pauseCharging")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["psaInfo"]; found {
		err = json.Unmarshal(raw, &a.PsaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'psaInfo': %w", err)
		}
		delete(object, "psaInfo")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["qosFlowsNotifyList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsNotifyList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsNotifyList': %w", err)
		}
		delete(object, "qosFlowsNotifyList")
	}

	if raw, found := object["qosFlowsRelNotifyList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsRelNotifyList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsRelNotifyList': %w", err)
		}
		delete(object, "qosFlowsRelNotifyList")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["requestIndication"]; found {
		err = json.Unmarshal(raw, &a.RequestIndication)
		if err != nil {
			return fmt.Errorf("error reading 'requestIndication': %w", err)
		}
		delete(object, "requestIndication")
	}

	if raw, found := object["revokeEbiList"]; found {
		err = json.Unmarshal(raw, &a.RevokeEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'revokeEbiList': %w", err)
		}
		delete(object, "revokeEbiList")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["secondaryRatUsageReport"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageReport)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageReport': %w", err)
		}
		delete(object, "secondaryRatUsageReport")
	}

	if raw, found := object["securityResult"]; found {
		err = json.Unmarshal(raw, &a.SecurityResult)
		if err != nil {
			return fmt.Errorf("error reading 'securityResult': %w", err)
		}
		delete(object, "securityResult")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["ulclBpInfo"]; found {
		err = json.Unmarshal(raw, &a.UlclBpInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ulclBpInfo': %w", err)
		}
		delete(object, "ulclBpInfo")
	}

	if raw, found := object["unavailableAccessInd"]; found {
		err = json.Unmarshal(raw, &a.UnavailableAccessInd)
		if err != nil {
			return fmt.Errorf("error reading 'unavailableAccessInd': %w", err)
		}
		delete(object, "unavailableAccessInd")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if raw, found := object["upSecurityInfo"]; found {
		err = json.Unmarshal(raw, &a.UpSecurityInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurityInfo': %w", err)
		}
		delete(object, "upSecurityInfo")
	}

	if raw, found := object["vSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.VSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'vSmfServiceInstanceId': %w", err)
		}
		delete(object, "vSmfServiceInstanceId")
	}

	if raw, found := object["vcnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.VcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'vcnTunnelInfo': %w", err)
		}
		delete(object, "vcnTunnelInfo")
	}

	if raw, found := object["vplmnQos"]; found {
		err = json.Unmarshal(raw, &a.VplmnQos)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnQos': %w", err)
		}
		delete(object, "vplmnQos")
	}

	if raw, found := object["vsmfId"]; found {
		err = json.Unmarshal(raw, &a.VsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfId': %w", err)
		}
		delete(object, "vsmfId")
	}

	if raw, found := object["vsmfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.VsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfPduSessionUri': %w", err)
		}
		delete(object, "vsmfPduSessionUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HsmfUpdateData to handle AdditionalProperties
func (a HsmfUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if len(a.NotifyList) != 0 {
		object["NotifyList"], err = json.Marshal(a.NotifyList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'NotifyList': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnRequested != nil {
		object["alwaysOnRequested"], err = json.Marshal(a.AlwaysOnRequested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnRequested': %w", err)
		}
	}

	if a.AmfNfId != nil {
		object["amfNfId"], err = json.Marshal(a.AmfNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNfId': %w", err)
		}
	}

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	if a.AnTypeCanBeChanged != nil {
		object["anTypeCanBeChanged"], err = json.Marshal(a.AnTypeCanBeChanged)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anTypeCanBeChanged': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	object["dlServingPlmnRateCtl"], err = json.Marshal(a.DlServingPlmnRateCtl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dlServingPlmnRateCtl': %w", err)
	}

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if a.EpsBearerId != nil {
		object["epsBearerId"], err = json.Marshal(a.EpsBearerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerId': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HoPreparationIndication != nil {
		object["hoPreparationIndication"], err = json.Marshal(a.HoPreparationIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoPreparationIndication': %w", err)
		}
	}

	if a.ISmfServiceInstanceId != nil {
		object["iSmfServiceInstanceId"], err = json.Marshal(a.ISmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iSmfServiceInstanceId': %w", err)
		}
	}

	if a.IcnTunnelInfo != nil {
		object["icnTunnelInfo"], err = json.Marshal(a.IcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'icnTunnelInfo': %w", err)
		}
	}

	if a.IsmfId != nil {
		object["ismfId"], err = json.Marshal(a.IsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfId': %w", err)
		}
	}

	if a.IsmfPduSessionUri != nil {
		object["ismfPduSessionUri"], err = json.Marshal(a.IsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfPduSessionUri': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaReleaseInd != nil {
		object["maReleaseInd"], err = json.Marshal(a.MaReleaseInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maReleaseInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if a.PauseCharging != nil {
		object["pauseCharging"], err = json.Marshal(a.PauseCharging)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pauseCharging': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if len(a.PsaInfo) != 0 {
		object["psaInfo"], err = json.Marshal(a.PsaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaInfo': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if len(a.QosFlowsNotifyList) != 0 {
		object["qosFlowsNotifyList"], err = json.Marshal(a.QosFlowsNotifyList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsNotifyList': %w", err)
		}
	}

	if len(a.QosFlowsRelNotifyList) != 0 {
		object["qosFlowsRelNotifyList"], err = json.Marshal(a.QosFlowsRelNotifyList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsRelNotifyList': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	object["requestIndication"], err = json.Marshal(a.RequestIndication)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'requestIndication': %w", err)
	}

	if len(a.RevokeEbiList) != 0 {
		object["revokeEbiList"], err = json.Marshal(a.RevokeEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'revokeEbiList': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if len(a.SecondaryRatUsageReport) != 0 {
		object["secondaryRatUsageReport"], err = json.Marshal(a.SecondaryRatUsageReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageReport': %w", err)
		}
	}

	if a.SecurityResult != nil {
		object["securityResult"], err = json.Marshal(a.SecurityResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'securityResult': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UlclBpInfo != nil {
		object["ulclBpInfo"], err = json.Marshal(a.UlclBpInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulclBpInfo': %w", err)
		}
	}

	if a.UnavailableAccessInd != nil {
		object["unavailableAccessInd"], err = json.Marshal(a.UnavailableAccessInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unavailableAccessInd': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	if a.UpSecurityInfo != nil {
		object["upSecurityInfo"], err = json.Marshal(a.UpSecurityInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurityInfo': %w", err)
		}
	}

	if a.VSmfServiceInstanceId != nil {
		object["vSmfServiceInstanceId"], err = json.Marshal(a.VSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vSmfServiceInstanceId': %w", err)
		}
	}

	if a.VcnTunnelInfo != nil {
		object["vcnTunnelInfo"], err = json.Marshal(a.VcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vcnTunnelInfo': %w", err)
		}
	}

	if a.VplmnQos != nil {
		object["vplmnQos"], err = json.Marshal(a.VplmnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vplmnQos': %w", err)
		}
	}

	if a.VsmfId != nil {
		object["vsmfId"], err = json.Marshal(a.VsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfId': %w", err)
		}
	}

	if a.VsmfPduSessionUri != nil {
		object["vsmfPduSessionUri"], err = json.Marshal(a.VsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfPduSessionUri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HsmfUpdateError. Returns the specified
// element and whether it was found
func (a HsmfUpdateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HsmfUpdateError
func (a *HsmfUpdateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HsmfUpdateError to handle AdditionalProperties
func (a *HsmfUpdateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backOffTimer"]; found {
		err = json.Unmarshal(raw, &a.BackOffTimer)
		if err != nil {
			return fmt.Errorf("error reading 'backOffTimer': %w", err)
		}
		delete(object, "backOffTimer")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HsmfUpdateError to handle AdditionalProperties
func (a HsmfUpdateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackOffTimer != nil {
		object["backOffTimer"], err = json.Marshal(a.BackOffTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backOffTimer': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if len(a.N1smCause) != 0 {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HsmfUpdatedData. Returns the specified
// element and whether it was found
func (a HsmfUpdatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HsmfUpdatedData
func (a *HsmfUpdatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HsmfUpdatedData to handle AdditionalProperties
func (a *HsmfUpdatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["ipv6MultiHomingInd"]; found {
		err = json.Unmarshal(raw, &a.Ipv6MultiHomingInd)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6MultiHomingInd': %w", err)
		}
		delete(object, "ipv6MultiHomingInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["qosFlowsSetupList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsSetupList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsSetupList': %w", err)
		}
		delete(object, "qosFlowsSetupList")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HsmfUpdatedData to handle AdditionalProperties
func (a HsmfUpdatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.Ipv6MultiHomingInd != nil {
		object["ipv6MultiHomingInd"], err = json.Marshal(a.Ipv6MultiHomingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6MultiHomingInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if len(a.QosFlowsSetupList) != 0 {
		object["qosFlowsSetupList"], err = json.Marshal(a.QosFlowsSetupList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsSetupList': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssAuthenticationInfoRequest. Returns the specified
// element and whether it was found
func (a HssAuthenticationInfoRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssAuthenticationInfoRequest
func (a *HssAuthenticationInfoRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssAuthenticationInfoRequest to handle AdditionalProperties
func (a *HssAuthenticationInfoRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anId"]; found {
		err = json.Unmarshal(raw, &a.AnId)
		if err != nil {
			return fmt.Errorf("error reading 'anId': %w", err)
		}
		delete(object, "anId")
	}

	if raw, found := object["hssAuthType"]; found {
		err = json.Unmarshal(raw, &a.HssAuthType)
		if err != nil {
			return fmt.Errorf("error reading 'hssAuthType': %w", err)
		}
		delete(object, "hssAuthType")
	}

	if raw, found := object["numOfRequestedVectors"]; found {
		err = json.Unmarshal(raw, &a.NumOfRequestedVectors)
		if err != nil {
			return fmt.Errorf("error reading 'numOfRequestedVectors': %w", err)
		}
		delete(object, "numOfRequestedVectors")
	}

	if raw, found := object["requestingNodeType"]; found {
		err = json.Unmarshal(raw, &a.RequestingNodeType)
		if err != nil {
			return fmt.Errorf("error reading 'requestingNodeType': %w", err)
		}
		delete(object, "requestingNodeType")
	}

	if raw, found := object["resynchronizationInfo"]; found {
		err = json.Unmarshal(raw, &a.ResynchronizationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'resynchronizationInfo': %w", err)
		}
		delete(object, "resynchronizationInfo")
	}

	if raw, found := object["servingNetworkId"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkId': %w", err)
		}
		delete(object, "servingNetworkId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssAuthenticationInfoRequest to handle AdditionalProperties
func (a HssAuthenticationInfoRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnId != nil {
		object["anId"], err = json.Marshal(a.AnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anId': %w", err)
		}
	}

	object["hssAuthType"], err = json.Marshal(a.HssAuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssAuthType': %w", err)
	}

	object["numOfRequestedVectors"], err = json.Marshal(a.NumOfRequestedVectors)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'numOfRequestedVectors': %w", err)
	}

	if a.RequestingNodeType != nil {
		object["requestingNodeType"], err = json.Marshal(a.RequestingNodeType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestingNodeType': %w", err)
		}
	}

	if a.ResynchronizationInfo != nil {
		object["resynchronizationInfo"], err = json.Marshal(a.ResynchronizationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resynchronizationInfo': %w", err)
		}
	}

	if a.ServingNetworkId != nil {
		object["servingNetworkId"], err = json.Marshal(a.ServingNetworkId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetworkId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssAuthenticationInfoResult. Returns the specified
// element and whether it was found
func (a HssAuthenticationInfoResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssAuthenticationInfoResult
func (a *HssAuthenticationInfoResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssAuthenticationInfoResult to handle AdditionalProperties
func (a *HssAuthenticationInfoResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hssAuthenticationVectors"]; found {
		err = json.Unmarshal(raw, &a.HssAuthenticationVectors)
		if err != nil {
			return fmt.Errorf("error reading 'hssAuthenticationVectors': %w", err)
		}
		delete(object, "hssAuthenticationVectors")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssAuthenticationInfoResult to handle AdditionalProperties
func (a HssAuthenticationInfoResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hssAuthenticationVectors"], err = json.Marshal(a.HssAuthenticationVectors)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssAuthenticationVectors': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssInfo. Returns the specified
// element and whether it was found
func (a HssInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssInfo
func (a *HssInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssInfo to handle AdditionalProperties
func (a *HssInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["imsPrivateIdentityRanges"]; found {
		err = json.Unmarshal(raw, &a.ImsPrivateIdentityRanges)
		if err != nil {
			return fmt.Errorf("error reading 'imsPrivateIdentityRanges': %w", err)
		}
		delete(object, "imsPrivateIdentityRanges")
	}

	if raw, found := object["imsPublicIdentityRanges"]; found {
		err = json.Unmarshal(raw, &a.ImsPublicIdentityRanges)
		if err != nil {
			return fmt.Errorf("error reading 'imsPublicIdentityRanges': %w", err)
		}
		delete(object, "imsPublicIdentityRanges")
	}

	if raw, found := object["imsiRanges"]; found {
		err = json.Unmarshal(raw, &a.ImsiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'imsiRanges': %w", err)
		}
		delete(object, "imsiRanges")
	}

	if raw, found := object["msisdnRanges"]; found {
		err = json.Unmarshal(raw, &a.MsisdnRanges)
		if err != nil {
			return fmt.Errorf("error reading 'msisdnRanges': %w", err)
		}
		delete(object, "msisdnRanges")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssInfo to handle AdditionalProperties
func (a HssInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if len(a.ImsPrivateIdentityRanges) != 0 {
		object["imsPrivateIdentityRanges"], err = json.Marshal(a.ImsPrivateIdentityRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsPrivateIdentityRanges': %w", err)
		}
	}

	if len(a.ImsPublicIdentityRanges) != 0 {
		object["imsPublicIdentityRanges"], err = json.Marshal(a.ImsPublicIdentityRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsPublicIdentityRanges': %w", err)
		}
	}

	if len(a.ImsiRanges) != 0 {
		object["imsiRanges"], err = json.Marshal(a.ImsiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsiRanges': %w", err)
		}
	}

	if len(a.MsisdnRanges) != 0 {
		object["msisdnRanges"], err = json.Marshal(a.MsisdnRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'msisdnRanges': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssSubscriptionInfo. Returns the specified
// element and whether it was found
func (a HssSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssSubscriptionInfo
func (a *HssSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssSubscriptionInfo to handle AdditionalProperties
func (a *HssSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hssSubscriptionList"]; found {
		err = json.Unmarshal(raw, &a.HssSubscriptionList)
		if err != nil {
			return fmt.Errorf("error reading 'hssSubscriptionList': %w", err)
		}
		delete(object, "hssSubscriptionList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssSubscriptionInfo to handle AdditionalProperties
func (a HssSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hssSubscriptionList"], err = json.Marshal(a.HssSubscriptionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssSubscriptionList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssSubscriptionItem. Returns the specified
// element and whether it was found
func (a HssSubscriptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssSubscriptionItem
func (a *HssSubscriptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssSubscriptionItem to handle AdditionalProperties
func (a *HssSubscriptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hssInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HssInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hssInstanceId': %w", err)
		}
		delete(object, "hssInstanceId")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssSubscriptionItem to handle AdditionalProperties
func (a HssSubscriptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hssInstanceId"], err = json.Marshal(a.HssInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssInstanceId': %w", err)
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IdTranslationResult. Returns the specified
// element and whether it was found
func (a IdTranslationResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IdTranslationResult
func (a *IdTranslationResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IdTranslationResult to handle AdditionalProperties
func (a *IdTranslationResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IdTranslationResult to handle AdditionalProperties
func (a IdTranslationResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IdentityData. Returns the specified
// element and whether it was found
func (a IdentityData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IdentityData
func (a *IdentityData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IdentityData to handle AdditionalProperties
func (a *IdentityData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsiList"]; found {
		err = json.Unmarshal(raw, &a.GpsiList)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiList': %w", err)
		}
		delete(object, "gpsiList")
	}

	if raw, found := object["supiList"]; found {
		err = json.Unmarshal(raw, &a.SupiList)
		if err != nil {
			return fmt.Errorf("error reading 'supiList': %w", err)
		}
		delete(object, "supiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IdentityData to handle AdditionalProperties
func (a IdentityData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GpsiList) != 0 {
		object["gpsiList"], err = json.Marshal(a.GpsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiList': %w", err)
		}
	}

	if len(a.SupiList) != 0 {
		object["supiList"], err = json.Marshal(a.SupiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IdentityRange. Returns the specified
// element and whether it was found
func (a IdentityRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IdentityRange
func (a *IdentityRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IdentityRange to handle AdditionalProperties
func (a *IdentityRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IdentityRange to handle AdditionalProperties
func (a IdentityRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if a.Pattern != nil {
		object["pattern"], err = json.Marshal(a.Pattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IdleStatusIndication. Returns the specified
// element and whether it was found
func (a IdleStatusIndication) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IdleStatusIndication
func (a *IdleStatusIndication) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IdleStatusIndication to handle AdditionalProperties
func (a *IdleStatusIndication) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["activeTime"]; found {
		err = json.Unmarshal(raw, &a.ActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'activeTime': %w", err)
		}
		delete(object, "activeTime")
	}

	if raw, found := object["edrxCycleLength"]; found {
		err = json.Unmarshal(raw, &a.EdrxCycleLength)
		if err != nil {
			return fmt.Errorf("error reading 'edrxCycleLength': %w", err)
		}
		delete(object, "edrxCycleLength")
	}

	if raw, found := object["subsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.SubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'subsRegTimer': %w", err)
		}
		delete(object, "subsRegTimer")
	}

	if raw, found := object["suggestedNumOfDlPackets"]; found {
		err = json.Unmarshal(raw, &a.SuggestedNumOfDlPackets)
		if err != nil {
			return fmt.Errorf("error reading 'suggestedNumOfDlPackets': %w", err)
		}
		delete(object, "suggestedNumOfDlPackets")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IdleStatusIndication to handle AdditionalProperties
func (a IdleStatusIndication) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ActiveTime != nil {
		object["activeTime"], err = json.Marshal(a.ActiveTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'activeTime': %w", err)
		}
	}

	if a.EdrxCycleLength != nil {
		object["edrxCycleLength"], err = json.Marshal(a.EdrxCycleLength)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'edrxCycleLength': %w", err)
		}
	}

	if a.SubsRegTimer != nil {
		object["subsRegTimer"], err = json.Marshal(a.SubsRegTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsRegTimer': %w", err)
		}
	}

	if a.SuggestedNumOfDlPackets != nil {
		object["suggestedNumOfDlPackets"], err = json.Marshal(a.SuggestedNumOfDlPackets)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suggestedNumOfDlPackets': %w", err)
		}
	}

	if a.TimeStamp != nil {
		object["timeStamp"], err = json.Marshal(a.TimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ImmediateMdtConf. Returns the specified
// element and whether it was found
func (a ImmediateMdtConf) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ImmediateMdtConf
func (a *ImmediateMdtConf) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ImmediateMdtConf to handle AdditionalProperties
func (a *ImmediateMdtConf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addPositioningMethodList"]; found {
		err = json.Unmarshal(raw, &a.AddPositioningMethodList)
		if err != nil {
			return fmt.Errorf("error reading 'addPositioningMethodList': %w", err)
		}
		delete(object, "addPositioningMethodList")
	}

	if raw, found := object["areaScope"]; found {
		err = json.Unmarshal(raw, &a.AreaScope)
		if err != nil {
			return fmt.Errorf("error reading 'areaScope': %w", err)
		}
		delete(object, "areaScope")
	}

	if raw, found := object["collectionPeriodRmmLte"]; found {
		err = json.Unmarshal(raw, &a.CollectionPeriodRmmLte)
		if err != nil {
			return fmt.Errorf("error reading 'collectionPeriodRmmLte': %w", err)
		}
		delete(object, "collectionPeriodRmmLte")
	}

	if raw, found := object["collectionPeriodRmmNr"]; found {
		err = json.Unmarshal(raw, &a.CollectionPeriodRmmNr)
		if err != nil {
			return fmt.Errorf("error reading 'collectionPeriodRmmNr': %w", err)
		}
		delete(object, "collectionPeriodRmmNr")
	}

	if raw, found := object["eventThresholdRsrp"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrp)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrp': %w", err)
		}
		delete(object, "eventThresholdRsrp")
	}

	if raw, found := object["eventThresholdRsrpNr"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrpNr)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrpNr': %w", err)
		}
		delete(object, "eventThresholdRsrpNr")
	}

	if raw, found := object["eventThresholdRsrq"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrq)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrq': %w", err)
		}
		delete(object, "eventThresholdRsrq")
	}

	if raw, found := object["eventThresholdRsrqNr"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrqNr)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrqNr': %w", err)
		}
		delete(object, "eventThresholdRsrqNr")
	}

	if raw, found := object["jobType"]; found {
		err = json.Unmarshal(raw, &a.JobType)
		if err != nil {
			return fmt.Errorf("error reading 'jobType': %w", err)
		}
		delete(object, "jobType")
	}

	if raw, found := object["mdtAllowedPlmnIdList"]; found {
		err = json.Unmarshal(raw, &a.MdtAllowedPlmnIdList)
		if err != nil {
			return fmt.Errorf("error reading 'mdtAllowedPlmnIdList': %w", err)
		}
		delete(object, "mdtAllowedPlmnIdList")
	}

	if raw, found := object["measurementLteList"]; found {
		err = json.Unmarshal(raw, &a.MeasurementLteList)
		if err != nil {
			return fmt.Errorf("error reading 'measurementLteList': %w", err)
		}
		delete(object, "measurementLteList")
	}

	if raw, found := object["measurementNrList"]; found {
		err = json.Unmarshal(raw, &a.MeasurementNrList)
		if err != nil {
			return fmt.Errorf("error reading 'measurementNrList': %w", err)
		}
		delete(object, "measurementNrList")
	}

	if raw, found := object["measurementPeriodLte"]; found {
		err = json.Unmarshal(raw, &a.MeasurementPeriodLte)
		if err != nil {
			return fmt.Errorf("error reading 'measurementPeriodLte': %w", err)
		}
		delete(object, "measurementPeriodLte")
	}

	if raw, found := object["positioningMethod"]; found {
		err = json.Unmarshal(raw, &a.PositioningMethod)
		if err != nil {
			return fmt.Errorf("error reading 'positioningMethod': %w", err)
		}
		delete(object, "positioningMethod")
	}

	if raw, found := object["reportAmount"]; found {
		err = json.Unmarshal(raw, &a.ReportAmount)
		if err != nil {
			return fmt.Errorf("error reading 'reportAmount': %w", err)
		}
		delete(object, "reportAmount")
	}

	if raw, found := object["reportInterval"]; found {
		err = json.Unmarshal(raw, &a.ReportInterval)
		if err != nil {
			return fmt.Errorf("error reading 'reportInterval': %w", err)
		}
		delete(object, "reportInterval")
	}

	if raw, found := object["reportIntervalNr"]; found {
		err = json.Unmarshal(raw, &a.ReportIntervalNr)
		if err != nil {
			return fmt.Errorf("error reading 'reportIntervalNr': %w", err)
		}
		delete(object, "reportIntervalNr")
	}

	if raw, found := object["reportingTriggerList"]; found {
		err = json.Unmarshal(raw, &a.ReportingTriggerList)
		if err != nil {
			return fmt.Errorf("error reading 'reportingTriggerList': %w", err)
		}
		delete(object, "reportingTriggerList")
	}

	if raw, found := object["sensorMeasurementList"]; found {
		err = json.Unmarshal(raw, &a.SensorMeasurementList)
		if err != nil {
			return fmt.Errorf("error reading 'sensorMeasurementList': %w", err)
		}
		delete(object, "sensorMeasurementList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ImmediateMdtConf to handle AdditionalProperties
func (a ImmediateMdtConf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddPositioningMethodList) != 0 {
		object["addPositioningMethodList"], err = json.Marshal(a.AddPositioningMethodList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addPositioningMethodList': %w", err)
		}
	}

	if a.AreaScope != nil {
		object["areaScope"], err = json.Marshal(a.AreaScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaScope': %w", err)
		}
	}

	if a.CollectionPeriodRmmLte != nil {
		object["collectionPeriodRmmLte"], err = json.Marshal(a.CollectionPeriodRmmLte)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionPeriodRmmLte': %w", err)
		}
	}

	if a.CollectionPeriodRmmNr != nil {
		object["collectionPeriodRmmNr"], err = json.Marshal(a.CollectionPeriodRmmNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionPeriodRmmNr': %w", err)
		}
	}

	if a.EventThresholdRsrp != nil {
		object["eventThresholdRsrp"], err = json.Marshal(a.EventThresholdRsrp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrp': %w", err)
		}
	}

	if a.EventThresholdRsrpNr != nil {
		object["eventThresholdRsrpNr"], err = json.Marshal(a.EventThresholdRsrpNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrpNr': %w", err)
		}
	}

	if a.EventThresholdRsrq != nil {
		object["eventThresholdRsrq"], err = json.Marshal(a.EventThresholdRsrq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrq': %w", err)
		}
	}

	if a.EventThresholdRsrqNr != nil {
		object["eventThresholdRsrqNr"], err = json.Marshal(a.EventThresholdRsrqNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrqNr': %w", err)
		}
	}

	object["jobType"], err = json.Marshal(a.JobType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'jobType': %w", err)
	}

	if len(a.MdtAllowedPlmnIdList) != 0 {
		object["mdtAllowedPlmnIdList"], err = json.Marshal(a.MdtAllowedPlmnIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mdtAllowedPlmnIdList': %w", err)
		}
	}

	if len(a.MeasurementLteList) != 0 {
		object["measurementLteList"], err = json.Marshal(a.MeasurementLteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementLteList': %w", err)
		}
	}

	if len(a.MeasurementNrList) != 0 {
		object["measurementNrList"], err = json.Marshal(a.MeasurementNrList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementNrList': %w", err)
		}
	}

	if a.MeasurementPeriodLte != nil {
		object["measurementPeriodLte"], err = json.Marshal(a.MeasurementPeriodLte)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementPeriodLte': %w", err)
		}
	}

	if a.PositioningMethod != nil {
		object["positioningMethod"], err = json.Marshal(a.PositioningMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'positioningMethod': %w", err)
		}
	}

	if a.ReportAmount != nil {
		object["reportAmount"], err = json.Marshal(a.ReportAmount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportAmount': %w", err)
		}
	}

	if a.ReportInterval != nil {
		object["reportInterval"], err = json.Marshal(a.ReportInterval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportInterval': %w", err)
		}
	}

	if a.ReportIntervalNr != nil {
		object["reportIntervalNr"], err = json.Marshal(a.ReportIntervalNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportIntervalNr': %w", err)
		}
	}

	if len(a.ReportingTriggerList) != 0 {
		object["reportingTriggerList"], err = json.Marshal(a.ReportingTriggerList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportingTriggerList': %w", err)
		}
	}

	if len(a.SensorMeasurementList) != 0 {
		object["sensorMeasurementList"], err = json.Marshal(a.SensorMeasurementList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sensorMeasurementList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ImsiRange. Returns the specified
// element and whether it was found
func (a ImsiRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ImsiRange
func (a *ImsiRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ImsiRange to handle AdditionalProperties
func (a *ImsiRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ImsiRange to handle AdditionalProperties
func (a ImsiRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if a.Pattern != nil {
		object["pattern"], err = json.Marshal(a.Pattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IndirectDataForwardingTunnelInfo. Returns the specified
// element and whether it was found
func (a IndirectDataForwardingTunnelInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IndirectDataForwardingTunnelInfo
func (a *IndirectDataForwardingTunnelInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IndirectDataForwardingTunnelInfo to handle AdditionalProperties
func (a *IndirectDataForwardingTunnelInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalTnlNb"]; found {
		err = json.Unmarshal(raw, &a.AdditionalTnlNb)
		if err != nil {
			return fmt.Errorf("error reading 'additionalTnlNb': %w", err)
		}
		delete(object, "additionalTnlNb")
	}

	if raw, found := object["drbId"]; found {
		err = json.Unmarshal(raw, &a.DrbId)
		if err != nil {
			return fmt.Errorf("error reading 'drbId': %w", err)
		}
		delete(object, "drbId")
	}

	if raw, found := object["gtpTeid"]; found {
		err = json.Unmarshal(raw, &a.GtpTeid)
		if err != nil {
			return fmt.Errorf("error reading 'gtpTeid': %w", err)
		}
		delete(object, "gtpTeid")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IndirectDataForwardingTunnelInfo to handle AdditionalProperties
func (a IndirectDataForwardingTunnelInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalTnlNb != 0 {
		object["additionalTnlNb"], err = json.Marshal(a.AdditionalTnlNb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalTnlNb': %w", err)
		}
	}

	if a.DrbId != 0 {
		object["drbId"], err = json.Marshal(a.DrbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'drbId': %w", err)
		}
	}

	object["gtpTeid"], err = json.Marshal(a.GtpTeid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gtpTeid': %w", err)
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InterFreqTargetInfo. Returns the specified
// element and whether it was found
func (a InterFreqTargetInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InterFreqTargetInfo
func (a *InterFreqTargetInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InterFreqTargetInfo to handle AdditionalProperties
func (a *InterFreqTargetInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellIdList"]; found {
		err = json.Unmarshal(raw, &a.CellIdList)
		if err != nil {
			return fmt.Errorf("error reading 'cellIdList': %w", err)
		}
		delete(object, "cellIdList")
	}

	if raw, found := object["dlCarrierFreq"]; found {
		err = json.Unmarshal(raw, &a.DlCarrierFreq)
		if err != nil {
			return fmt.Errorf("error reading 'dlCarrierFreq': %w", err)
		}
		delete(object, "dlCarrierFreq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InterFreqTargetInfo to handle AdditionalProperties
func (a InterFreqTargetInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CellIdList) != 0 {
		object["cellIdList"], err = json.Marshal(a.CellIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellIdList': %w", err)
		}
	}

	object["dlCarrierFreq"], err = json.Marshal(a.DlCarrierFreq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dlCarrierFreq': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InterfaceUpfInfoItem. Returns the specified
// element and whether it was found
func (a InterfaceUpfInfoItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InterfaceUpfInfoItem
func (a *InterfaceUpfInfoItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InterfaceUpfInfoItem to handle AdditionalProperties
func (a *InterfaceUpfInfoItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endpointFqdn"]; found {
		err = json.Unmarshal(raw, &a.EndpointFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'endpointFqdn': %w", err)
		}
		delete(object, "endpointFqdn")
	}

	if raw, found := object["interfaceType"]; found {
		err = json.Unmarshal(raw, &a.InterfaceType)
		if err != nil {
			return fmt.Errorf("error reading 'interfaceType': %w", err)
		}
		delete(object, "interfaceType")
	}

	if raw, found := object["ipv4EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4EndpointAddresses': %w", err)
		}
		delete(object, "ipv4EndpointAddresses")
	}

	if raw, found := object["ipv6EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv6EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6EndpointAddresses': %w", err)
		}
		delete(object, "ipv6EndpointAddresses")
	}

	if raw, found := object["networkInstance"]; found {
		err = json.Unmarshal(raw, &a.NetworkInstance)
		if err != nil {
			return fmt.Errorf("error reading 'networkInstance': %w", err)
		}
		delete(object, "networkInstance")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InterfaceUpfInfoItem to handle AdditionalProperties
func (a InterfaceUpfInfoItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndpointFqdn != nil {
		object["endpointFqdn"], err = json.Marshal(a.EndpointFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endpointFqdn': %w", err)
		}
	}

	object["interfaceType"], err = json.Marshal(a.InterfaceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'interfaceType': %w", err)
	}

	if len(a.Ipv4EndpointAddresses) != 0 {
		object["ipv4EndpointAddresses"], err = json.Marshal(a.Ipv4EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4EndpointAddresses': %w", err)
		}
	}

	if len(a.Ipv6EndpointAddresses) != 0 {
		object["ipv6EndpointAddresses"], err = json.Marshal(a.Ipv6EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6EndpointAddresses': %w", err)
		}
	}

	if a.NetworkInstance != nil {
		object["networkInstance"], err = json.Marshal(a.NetworkInstance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'networkInstance': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InternalGroupIdRange. Returns the specified
// element and whether it was found
func (a InternalGroupIdRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InternalGroupIdRange
func (a *InternalGroupIdRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InternalGroupIdRange to handle AdditionalProperties
func (a *InternalGroupIdRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InternalGroupIdRange to handle AdditionalProperties
func (a InternalGroupIdRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if a.Pattern != nil {
		object["pattern"], err = json.Marshal(a.Pattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InvalidParam. Returns the specified
// element and whether it was found
func (a InvalidParam) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InvalidParam
func (a *InvalidParam) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InvalidParam to handle AdditionalProperties
func (a *InvalidParam) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["param"]; found {
		err = json.Unmarshal(raw, &a.Param)
		if err != nil {
			return fmt.Errorf("error reading 'param': %w", err)
		}
		delete(object, "param")
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &a.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
		delete(object, "reason")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InvalidParam to handle AdditionalProperties
func (a InvalidParam) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["param"], err = json.Marshal(a.Param)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'param': %w", err)
	}

	if a.Reason != nil {
		object["reason"], err = json.Marshal(a.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpAddress. Returns the specified
// element and whether it was found
func (a IpAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpAddress
func (a *IpAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpAddress to handle AdditionalProperties
func (a *IpAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpAddress to handle AdditionalProperties
func (a IpAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if a.Ipv6Prefix != nil {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpEndPoint. Returns the specified
// element and whether it was found
func (a IpEndPoint) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpEndPoint
func (a *IpEndPoint) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpEndPoint to handle AdditionalProperties
func (a *IpEndPoint) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Address"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Address': %w", err)
		}
		delete(object, "ipv4Address")
	}

	if raw, found := object["ipv6Address"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Address)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Address': %w", err)
		}
		delete(object, "ipv6Address")
	}

	if raw, found := object["port"]; found {
		err = json.Unmarshal(raw, &a.Port)
		if err != nil {
			return fmt.Errorf("error reading 'port': %w", err)
		}
		delete(object, "port")
	}

	if raw, found := object["transport"]; found {
		err = json.Unmarshal(raw, &a.Transport)
		if err != nil {
			return fmt.Errorf("error reading 'transport': %w", err)
		}
		delete(object, "transport")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpEndPoint to handle AdditionalProperties
func (a IpEndPoint) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Address) != 0 {
		object["ipv4Address"], err = json.Marshal(a.Ipv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Address': %w", err)
		}
	}

	if a.Ipv6Address != nil {
		object["ipv6Address"], err = json.Marshal(a.Ipv6Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Address': %w", err)
		}
	}

	if a.Port != nil {
		object["port"], err = json.Marshal(a.Port)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'port': %w", err)
		}
	}

	if a.Transport != nil {
		object["transport"], err = json.Marshal(a.Transport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'transport': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpFlowInfo. Returns the specified
// element and whether it was found
func (a IpFlowInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpFlowInfo
func (a *IpFlowInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpFlowInfo to handle AdditionalProperties
func (a *IpFlowInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["flowNumber"]; found {
		err = json.Unmarshal(raw, &a.FlowNumber)
		if err != nil {
			return fmt.Errorf("error reading 'flowNumber': %w", err)
		}
		delete(object, "flowNumber")
	}

	if raw, found := object["ipFlows"]; found {
		err = json.Unmarshal(raw, &a.IpFlows)
		if err != nil {
			return fmt.Errorf("error reading 'ipFlows': %w", err)
		}
		delete(object, "ipFlows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpFlowInfo to handle AdditionalProperties
func (a IpFlowInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["flowNumber"], err = json.Marshal(a.FlowNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flowNumber': %w", err)
	}

	if len(a.IpFlows) != 0 {
		object["ipFlows"], err = json.Marshal(a.IpFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipFlows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpMulticastAddressInfo. Returns the specified
// element and whether it was found
func (a IpMulticastAddressInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpMulticastAddressInfo
func (a *IpMulticastAddressInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpMulticastAddressInfo to handle AdditionalProperties
func (a *IpMulticastAddressInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4MulAddr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4MulAddr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4MulAddr': %w", err)
		}
		delete(object, "ipv4MulAddr")
	}

	if raw, found := object["ipv6MulAddr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6MulAddr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6MulAddr': %w", err)
		}
		delete(object, "ipv6MulAddr")
	}

	if raw, found := object["srcIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.SrcIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'srcIpv4Addr': %w", err)
		}
		delete(object, "srcIpv4Addr")
	}

	if raw, found := object["srcIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.SrcIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'srcIpv6Addr': %w", err)
		}
		delete(object, "srcIpv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpMulticastAddressInfo to handle AdditionalProperties
func (a IpMulticastAddressInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4MulAddr) != 0 {
		object["ipv4MulAddr"], err = json.Marshal(a.Ipv4MulAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4MulAddr': %w", err)
		}
	}

	if a.Ipv6MulAddr != nil {
		object["ipv6MulAddr"], err = json.Marshal(a.Ipv6MulAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6MulAddr': %w", err)
		}
	}

	if len(a.SrcIpv4Addr) != 0 {
		object["srcIpv4Addr"], err = json.Marshal(a.SrcIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcIpv4Addr': %w", err)
		}
	}

	if a.SrcIpv6Addr != nil {
		object["srcIpv6Addr"], err = json.Marshal(a.SrcIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcIpv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpSmGwRegistration. Returns the specified
// element and whether it was found
func (a IpSmGwRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpSmGwRegistration
func (a *IpSmGwRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpSmGwRegistration to handle AdditionalProperties
func (a *IpSmGwRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipSmGwDiameterAddress"]; found {
		err = json.Unmarshal(raw, &a.IpSmGwDiameterAddress)
		if err != nil {
			return fmt.Errorf("error reading 'ipSmGwDiameterAddress': %w", err)
		}
		delete(object, "ipSmGwDiameterAddress")
	}

	if raw, found := object["ipSmGwMapAddress"]; found {
		err = json.Unmarshal(raw, &a.IpSmGwMapAddress)
		if err != nil {
			return fmt.Errorf("error reading 'ipSmGwMapAddress': %w", err)
		}
		delete(object, "ipSmGwMapAddress")
	}

	if raw, found := object["unriIndicator"]; found {
		err = json.Unmarshal(raw, &a.UnriIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'unriIndicator': %w", err)
		}
		delete(object, "unriIndicator")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpSmGwRegistration to handle AdditionalProperties
func (a IpSmGwRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.IpSmGwDiameterAddress != nil {
		object["ipSmGwDiameterAddress"], err = json.Marshal(a.IpSmGwDiameterAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipSmGwDiameterAddress': %w", err)
		}
	}

	if len(a.IpSmGwMapAddress) != 0 {
		object["ipSmGwMapAddress"], err = json.Marshal(a.IpSmGwMapAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipSmGwMapAddress': %w", err)
		}
	}

	if a.UnriIndicator != nil {
		object["unriIndicator"], err = json.Marshal(a.UnriIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unriIndicator': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IptvConfigData. Returns the specified
// element and whether it was found
func (a IptvConfigData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IptvConfigData
func (a *IptvConfigData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IptvConfigData to handle AdditionalProperties
func (a *IptvConfigData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["multiAccCtrls"]; found {
		err = json.Unmarshal(raw, &a.MultiAccCtrls)
		if err != nil {
			return fmt.Errorf("error reading 'multiAccCtrls': %w", err)
		}
		delete(object, "multiAccCtrls")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IptvConfigData to handle AdditionalProperties
func (a IptvConfigData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afAppId"], err = json.Marshal(a.AfAppId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	object["multiAccCtrls"], err = json.Marshal(a.MultiAccCtrls)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'multiAccCtrls': %w", err)
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ipv4AddressRange. Returns the specified
// element and whether it was found
func (a Ipv4AddressRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ipv4AddressRange
func (a *Ipv4AddressRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ipv4AddressRange to handle AdditionalProperties
func (a *Ipv4AddressRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ipv4AddressRange to handle AdditionalProperties
func (a Ipv4AddressRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ipv6PrefixRange. Returns the specified
// element and whether it was found
func (a Ipv6PrefixRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ipv6PrefixRange
func (a *Ipv6PrefixRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ipv6PrefixRange to handle AdditionalProperties
func (a *Ipv6PrefixRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ipv6PrefixRange to handle AdditionalProperties
func (a Ipv6PrefixRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.End != nil {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if a.Start != nil {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for KeyAmf. Returns the specified
// element and whether it was found
func (a KeyAmf) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KeyAmf
func (a *KeyAmf) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KeyAmf to handle AdditionalProperties
func (a *KeyAmf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["keyType"]; found {
		err = json.Unmarshal(raw, &a.KeyType)
		if err != nil {
			return fmt.Errorf("error reading 'keyType': %w", err)
		}
		delete(object, "keyType")
	}

	if raw, found := object["keyVal"]; found {
		err = json.Unmarshal(raw, &a.KeyVal)
		if err != nil {
			return fmt.Errorf("error reading 'keyVal': %w", err)
		}
		delete(object, "keyVal")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KeyAmf to handle AdditionalProperties
func (a KeyAmf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["keyType"], err = json.Marshal(a.KeyType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'keyType': %w", err)
	}

	object["keyVal"], err = json.Marshal(a.KeyVal)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'keyVal': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LadnInfo. Returns the specified
// element and whether it was found
func (a LadnInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LadnInfo
func (a *LadnInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LadnInfo to handle AdditionalProperties
func (a *LadnInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ladn"]; found {
		err = json.Unmarshal(raw, &a.Ladn)
		if err != nil {
			return fmt.Errorf("error reading 'ladn': %w", err)
		}
		delete(object, "ladn")
	}

	if raw, found := object["presence"]; found {
		err = json.Unmarshal(raw, &a.Presence)
		if err != nil {
			return fmt.Errorf("error reading 'presence': %w", err)
		}
		delete(object, "presence")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LadnInfo to handle AdditionalProperties
func (a LadnInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ladn"], err = json.Marshal(a.Ladn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ladn': %w", err)
	}

	if a.Presence != nil {
		object["presence"], err = json.Marshal(a.Presence)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presence': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsBroadcastAssistanceTypesData. Returns the specified
// element and whether it was found
func (a LcsBroadcastAssistanceTypesData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsBroadcastAssistanceTypesData
func (a *LcsBroadcastAssistanceTypesData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsBroadcastAssistanceTypesData to handle AdditionalProperties
func (a *LcsBroadcastAssistanceTypesData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["locationAssistanceType"]; found {
		err = json.Unmarshal(raw, &a.LocationAssistanceType)
		if err != nil {
			return fmt.Errorf("error reading 'locationAssistanceType': %w", err)
		}
		delete(object, "locationAssistanceType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsBroadcastAssistanceTypesData to handle AdditionalProperties
func (a LcsBroadcastAssistanceTypesData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["locationAssistanceType"], err = json.Marshal(a.LocationAssistanceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'locationAssistanceType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsClientExternal. Returns the specified
// element and whether it was found
func (a LcsClientExternal) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsClientExternal
func (a *LcsClientExternal) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsClientExternal to handle AdditionalProperties
func (a *LcsClientExternal) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsClientExternal to handle AdditionalProperties
func (a LcsClientExternal) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsClientGroupExternal. Returns the specified
// element and whether it was found
func (a LcsClientGroupExternal) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsClientGroupExternal
func (a *LcsClientGroupExternal) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsClientGroupExternal to handle AdditionalProperties
func (a *LcsClientGroupExternal) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["lcsClientGroupId"]; found {
		err = json.Unmarshal(raw, &a.LcsClientGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientGroupId': %w", err)
		}
		delete(object, "lcsClientGroupId")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsClientGroupExternal to handle AdditionalProperties
func (a LcsClientGroupExternal) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if len(a.LcsClientGroupId) != 0 {
		object["lcsClientGroupId"], err = json.Marshal(a.LcsClientGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsClientGroupId': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsMoData. Returns the specified
// element and whether it was found
func (a LcsMoData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsMoData
func (a *LcsMoData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsMoData to handle AdditionalProperties
func (a *LcsMoData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedServiceClasses"]; found {
		err = json.Unmarshal(raw, &a.AllowedServiceClasses)
		if err != nil {
			return fmt.Errorf("error reading 'allowedServiceClasses': %w", err)
		}
		delete(object, "allowedServiceClasses")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsMoData to handle AdditionalProperties
func (a LcsMoData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedServiceClasses"], err = json.Marshal(a.AllowedServiceClasses)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedServiceClasses': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsPrivacy. Returns the specified
// element and whether it was found
func (a LcsPrivacy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsPrivacy
func (a *LcsPrivacy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsPrivacy to handle AdditionalProperties
func (a *LcsPrivacy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["lpi"]; found {
		err = json.Unmarshal(raw, &a.Lpi)
		if err != nil {
			return fmt.Errorf("error reading 'lpi': %w", err)
		}
		delete(object, "lpi")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsPrivacy to handle AdditionalProperties
func (a LcsPrivacy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfInstanceId != nil {
		object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
		}
	}

	if a.Lpi != nil {
		object["lpi"], err = json.Marshal(a.Lpi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lpi': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	if a.ReferenceId != nil {
		object["referenceId"], err = json.Marshal(a.ReferenceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsPrivacyData. Returns the specified
// element and whether it was found
func (a LcsPrivacyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsPrivacyData
func (a *LcsPrivacyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsPrivacyData to handle AdditionalProperties
func (a *LcsPrivacyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lpi"]; found {
		err = json.Unmarshal(raw, &a.Lpi)
		if err != nil {
			return fmt.Errorf("error reading 'lpi': %w", err)
		}
		delete(object, "lpi")
	}

	if raw, found := object["plmnOperatorClasses"]; found {
		err = json.Unmarshal(raw, &a.PlmnOperatorClasses)
		if err != nil {
			return fmt.Errorf("error reading 'plmnOperatorClasses': %w", err)
		}
		delete(object, "plmnOperatorClasses")
	}

	if raw, found := object["unrelatedClass"]; found {
		err = json.Unmarshal(raw, &a.UnrelatedClass)
		if err != nil {
			return fmt.Errorf("error reading 'unrelatedClass': %w", err)
		}
		delete(object, "unrelatedClass")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsPrivacyData to handle AdditionalProperties
func (a LcsPrivacyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Lpi != nil {
		object["lpi"], err = json.Marshal(a.Lpi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lpi': %w", err)
		}
	}

	if len(a.PlmnOperatorClasses) != 0 {
		object["plmnOperatorClasses"], err = json.Marshal(a.PlmnOperatorClasses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnOperatorClasses': %w", err)
		}
	}

	if a.UnrelatedClass != nil {
		object["unrelatedClass"], err = json.Marshal(a.UnrelatedClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unrelatedClass': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LimitIdToMonitoringKey. Returns the specified
// element and whether it was found
func (a LimitIdToMonitoringKey) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LimitIdToMonitoringKey
func (a *LimitIdToMonitoringKey) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LimitIdToMonitoringKey to handle AdditionalProperties
func (a *LimitIdToMonitoringKey) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["limitId"]; found {
		err = json.Unmarshal(raw, &a.LimitId)
		if err != nil {
			return fmt.Errorf("error reading 'limitId': %w", err)
		}
		delete(object, "limitId")
	}

	if raw, found := object["monkey"]; found {
		err = json.Unmarshal(raw, &a.Monkey)
		if err != nil {
			return fmt.Errorf("error reading 'monkey': %w", err)
		}
		delete(object, "monkey")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LimitIdToMonitoringKey to handle AdditionalProperties
func (a LimitIdToMonitoringKey) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["limitId"], err = json.Marshal(a.LimitId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'limitId': %w", err)
	}

	if len(a.Monkey) != 0 {
		object["monkey"], err = json.Marshal(a.Monkey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monkey': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Link. Returns the specified
// element and whether it was found
func (a Link) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Link
func (a *Link) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Link to handle AdditionalProperties
func (a *Link) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["href"]; found {
		err = json.Unmarshal(raw, &a.Href)
		if err != nil {
			return fmt.Errorf("error reading 'href': %w", err)
		}
		delete(object, "href")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Link to handle AdditionalProperties
func (a Link) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Href != nil {
		object["href"], err = json.Marshal(a.Href)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'href': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LmfInfo. Returns the specified
// element and whether it was found
func (a LmfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LmfInfo
func (a *LmfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LmfInfo to handle AdditionalProperties
func (a *LmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lmfId"]; found {
		err = json.Unmarshal(raw, &a.LmfId)
		if err != nil {
			return fmt.Errorf("error reading 'lmfId': %w", err)
		}
		delete(object, "lmfId")
	}

	if raw, found := object["servingAccessTypes"]; found {
		err = json.Unmarshal(raw, &a.ServingAccessTypes)
		if err != nil {
			return fmt.Errorf("error reading 'servingAccessTypes': %w", err)
		}
		delete(object, "servingAccessTypes")
	}

	if raw, found := object["servingAnNodeTypes"]; found {
		err = json.Unmarshal(raw, &a.ServingAnNodeTypes)
		if err != nil {
			return fmt.Errorf("error reading 'servingAnNodeTypes': %w", err)
		}
		delete(object, "servingAnNodeTypes")
	}

	if raw, found := object["servingClientTypes"]; found {
		err = json.Unmarshal(raw, &a.ServingClientTypes)
		if err != nil {
			return fmt.Errorf("error reading 'servingClientTypes': %w", err)
		}
		delete(object, "servingClientTypes")
	}

	if raw, found := object["servingRatTypes"]; found {
		err = json.Unmarshal(raw, &a.ServingRatTypes)
		if err != nil {
			return fmt.Errorf("error reading 'servingRatTypes': %w", err)
		}
		delete(object, "servingRatTypes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LmfInfo to handle AdditionalProperties
func (a LmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.LmfId != nil {
		object["lmfId"], err = json.Marshal(a.LmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lmfId': %w", err)
		}
	}

	if len(a.ServingAccessTypes) != 0 {
		object["servingAccessTypes"], err = json.Marshal(a.ServingAccessTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingAccessTypes': %w", err)
		}
	}

	if len(a.ServingAnNodeTypes) != 0 {
		object["servingAnNodeTypes"], err = json.Marshal(a.ServingAnNodeTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingAnNodeTypes': %w", err)
		}
	}

	if len(a.ServingClientTypes) != 0 {
		object["servingClientTypes"], err = json.Marshal(a.ServingClientTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingClientTypes': %w", err)
		}
	}

	if len(a.ServingRatTypes) != 0 {
		object["servingRatTypes"], err = json.Marshal(a.ServingRatTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingRatTypes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationArea. Returns the specified
// element and whether it was found
func (a LocationArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationArea
func (a *LocationArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationArea to handle AdditionalProperties
func (a *LocationArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellIds"]; found {
		err = json.Unmarshal(raw, &a.CellIds)
		if err != nil {
			return fmt.Errorf("error reading 'cellIds': %w", err)
		}
		delete(object, "cellIds")
	}

	if raw, found := object["civicAddresses"]; found {
		err = json.Unmarshal(raw, &a.CivicAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddresses': %w", err)
		}
		delete(object, "civicAddresses")
	}

	if raw, found := object["enodeBIds"]; found {
		err = json.Unmarshal(raw, &a.EnodeBIds)
		if err != nil {
			return fmt.Errorf("error reading 'enodeBIds': %w", err)
		}
		delete(object, "enodeBIds")
	}

	if raw, found := object["geographicAreas"]; found {
		err = json.Unmarshal(raw, &a.GeographicAreas)
		if err != nil {
			return fmt.Errorf("error reading 'geographicAreas': %w", err)
		}
		delete(object, "geographicAreas")
	}

	if raw, found := object["routingAreaIds"]; found {
		err = json.Unmarshal(raw, &a.RoutingAreaIds)
		if err != nil {
			return fmt.Errorf("error reading 'routingAreaIds': %w", err)
		}
		delete(object, "routingAreaIds")
	}

	if raw, found := object["trackingAreaIds"]; found {
		err = json.Unmarshal(raw, &a.TrackingAreaIds)
		if err != nil {
			return fmt.Errorf("error reading 'trackingAreaIds': %w", err)
		}
		delete(object, "trackingAreaIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationArea to handle AdditionalProperties
func (a LocationArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CellIds) != 0 {
		object["cellIds"], err = json.Marshal(a.CellIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellIds': %w", err)
		}
	}

	if len(a.CivicAddresses) != 0 {
		object["civicAddresses"], err = json.Marshal(a.CivicAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddresses': %w", err)
		}
	}

	if len(a.EnodeBIds) != 0 {
		object["enodeBIds"], err = json.Marshal(a.EnodeBIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enodeBIds': %w", err)
		}
	}

	if len(a.GeographicAreas) != 0 {
		object["geographicAreas"], err = json.Marshal(a.GeographicAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicAreas': %w", err)
		}
	}

	if len(a.RoutingAreaIds) != 0 {
		object["routingAreaIds"], err = json.Marshal(a.RoutingAreaIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingAreaIds': %w", err)
		}
	}

	if len(a.TrackingAreaIds) != 0 {
		object["trackingAreaIds"], err = json.Marshal(a.TrackingAreaIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trackingAreaIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationArea5G. Returns the specified
// element and whether it was found
func (a LocationArea5G) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationArea5G
func (a *LocationArea5G) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationArea5G to handle AdditionalProperties
func (a *LocationArea5G) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["civicAddresses"]; found {
		err = json.Unmarshal(raw, &a.CivicAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddresses': %w", err)
		}
		delete(object, "civicAddresses")
	}

	if raw, found := object["geographicAreas"]; found {
		err = json.Unmarshal(raw, &a.GeographicAreas)
		if err != nil {
			return fmt.Errorf("error reading 'geographicAreas': %w", err)
		}
		delete(object, "geographicAreas")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationArea5G to handle AdditionalProperties
func (a LocationArea5G) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CivicAddresses != nil {
		object["civicAddresses"], err = json.Marshal(a.CivicAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddresses': %w", err)
		}
	}

	if a.GeographicAreas != nil {
		object["geographicAreas"], err = json.Marshal(a.GeographicAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicAreas': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationAreaId. Returns the specified
// element and whether it was found
func (a LocationAreaId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationAreaId
func (a *LocationAreaId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationAreaId to handle AdditionalProperties
func (a *LocationAreaId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationAreaId to handle AdditionalProperties
func (a LocationAreaId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationInfo. Returns the specified
// element and whether it was found
func (a LocationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationInfo
func (a *LocationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationInfo to handle AdditionalProperties
func (a *LocationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["registrationLocationInfoList"]; found {
		err = json.Unmarshal(raw, &a.RegistrationLocationInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'registrationLocationInfoList': %w", err)
		}
		delete(object, "registrationLocationInfoList")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationInfo to handle AdditionalProperties
func (a LocationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	object["registrationLocationInfoList"], err = json.Marshal(a.RegistrationLocationInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'registrationLocationInfoList': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationInfoRequest. Returns the specified
// element and whether it was found
func (a LocationInfoRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationInfoRequest
func (a *LocationInfoRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationInfoRequest to handle AdditionalProperties
func (a *LocationInfoRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["req5gsLoc"]; found {
		err = json.Unmarshal(raw, &a.Req5gsLoc)
		if err != nil {
			return fmt.Errorf("error reading 'req5gsLoc': %w", err)
		}
		delete(object, "req5gsLoc")
	}

	if raw, found := object["reqCurrentLoc"]; found {
		err = json.Unmarshal(raw, &a.ReqCurrentLoc)
		if err != nil {
			return fmt.Errorf("error reading 'reqCurrentLoc': %w", err)
		}
		delete(object, "reqCurrentLoc")
	}

	if raw, found := object["reqRatType"]; found {
		err = json.Unmarshal(raw, &a.ReqRatType)
		if err != nil {
			return fmt.Errorf("error reading 'reqRatType': %w", err)
		}
		delete(object, "reqRatType")
	}

	if raw, found := object["reqServingNode"]; found {
		err = json.Unmarshal(raw, &a.ReqServingNode)
		if err != nil {
			return fmt.Errorf("error reading 'reqServingNode': %w", err)
		}
		delete(object, "reqServingNode")
	}

	if raw, found := object["reqTimeZone"]; found {
		err = json.Unmarshal(raw, &a.ReqTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'reqTimeZone': %w", err)
		}
		delete(object, "reqTimeZone")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationInfoRequest to handle AdditionalProperties
func (a LocationInfoRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Req5gsLoc != nil {
		object["req5gsLoc"], err = json.Marshal(a.Req5gsLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'req5gsLoc': %w", err)
		}
	}

	if a.ReqCurrentLoc != nil {
		object["reqCurrentLoc"], err = json.Marshal(a.ReqCurrentLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqCurrentLoc': %w", err)
		}
	}

	if a.ReqRatType != nil {
		object["reqRatType"], err = json.Marshal(a.ReqRatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqRatType': %w", err)
		}
	}

	if a.ReqServingNode != nil {
		object["reqServingNode"], err = json.Marshal(a.ReqServingNode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqServingNode': %w", err)
		}
	}

	if a.ReqTimeZone != nil {
		object["reqTimeZone"], err = json.Marshal(a.ReqTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqTimeZone': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationInfoResult. Returns the specified
// element and whether it was found
func (a LocationInfoResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationInfoResult
func (a *LocationInfoResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationInfoResult to handle AdditionalProperties
func (a *LocationInfoResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["currentLoc"]; found {
		err = json.Unmarshal(raw, &a.CurrentLoc)
		if err != nil {
			return fmt.Errorf("error reading 'currentLoc': %w", err)
		}
		delete(object, "currentLoc")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["geoInfo"]; found {
		err = json.Unmarshal(raw, &a.GeoInfo)
		if err != nil {
			return fmt.Errorf("error reading 'geoInfo': %w", err)
		}
		delete(object, "geoInfo")
	}

	if raw, found := object["locationAge"]; found {
		err = json.Unmarshal(raw, &a.LocationAge)
		if err != nil {
			return fmt.Errorf("error reading 'locationAge': %w", err)
		}
		delete(object, "locationAge")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["smsfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmsfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInstanceId': %w", err)
		}
		delete(object, "smsfInstanceId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if raw, found := object["timezone"]; found {
		err = json.Unmarshal(raw, &a.Timezone)
		if err != nil {
			return fmt.Errorf("error reading 'timezone': %w", err)
		}
		delete(object, "timezone")
	}

	if raw, found := object["vPlmnId"]; found {
		err = json.Unmarshal(raw, &a.VPlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'vPlmnId': %w", err)
		}
		delete(object, "vPlmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationInfoResult to handle AdditionalProperties
func (a LocationInfoResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfInstanceId != nil {
		object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
		}
	}

	if a.CurrentLoc != nil {
		object["currentLoc"], err = json.Marshal(a.CurrentLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentLoc': %w", err)
		}
	}

	if a.Ecgi != nil {
		object["ecgi"], err = json.Marshal(a.Ecgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
		}
	}

	if a.GeoInfo != nil {
		object["geoInfo"], err = json.Marshal(a.GeoInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geoInfo': %w", err)
		}
	}

	if a.LocationAge != nil {
		object["locationAge"], err = json.Marshal(a.LocationAge)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationAge': %w", err)
		}
	}

	if a.Ncgi != nil {
		object["ncgi"], err = json.Marshal(a.Ncgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.SmsfInstanceId != nil {
		object["smsfInstanceId"], err = json.Marshal(a.SmsfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfInstanceId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Tai != nil {
		object["tai"], err = json.Marshal(a.Tai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tai': %w", err)
		}
	}

	if a.Timezone != nil {
		object["timezone"], err = json.Marshal(a.Timezone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timezone': %w", err)
		}
	}

	if a.VPlmnId != nil {
		object["vPlmnId"], err = json.Marshal(a.VPlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vPlmnId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationReport. Returns the specified
// element and whether it was found
func (a LocationReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationReport
func (a *LocationReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationReport to handle AdditionalProperties
func (a *LocationReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationReport to handle AdditionalProperties
func (a LocationReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["location"], err = json.Marshal(a.Location)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'location': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationReportingConfiguration. Returns the specified
// element and whether it was found
func (a LocationReportingConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationReportingConfiguration
func (a *LocationReportingConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationReportingConfiguration to handle AdditionalProperties
func (a *LocationReportingConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accuracy"]; found {
		err = json.Unmarshal(raw, &a.Accuracy)
		if err != nil {
			return fmt.Errorf("error reading 'accuracy': %w", err)
		}
		delete(object, "accuracy")
	}

	if raw, found := object["currentLocation"]; found {
		err = json.Unmarshal(raw, &a.CurrentLocation)
		if err != nil {
			return fmt.Errorf("error reading 'currentLocation': %w", err)
		}
		delete(object, "currentLocation")
	}

	if raw, found := object["n3gppAccuracy"]; found {
		err = json.Unmarshal(raw, &a.N3gppAccuracy)
		if err != nil {
			return fmt.Errorf("error reading 'n3gppAccuracy': %w", err)
		}
		delete(object, "n3gppAccuracy")
	}

	if raw, found := object["oneTime"]; found {
		err = json.Unmarshal(raw, &a.OneTime)
		if err != nil {
			return fmt.Errorf("error reading 'oneTime': %w", err)
		}
		delete(object, "oneTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationReportingConfiguration to handle AdditionalProperties
func (a LocationReportingConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Accuracy != nil {
		object["accuracy"], err = json.Marshal(a.Accuracy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accuracy': %w", err)
		}
	}

	object["currentLocation"], err = json.Marshal(a.CurrentLocation)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'currentLocation': %w", err)
	}

	if a.N3gppAccuracy != nil {
		object["n3gppAccuracy"], err = json.Marshal(a.N3gppAccuracy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3gppAccuracy': %w", err)
		}
	}

	if a.OneTime != nil {
		object["oneTime"], err = json.Marshal(a.OneTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oneTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LossConnectivityCfg. Returns the specified
// element and whether it was found
func (a LossConnectivityCfg) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LossConnectivityCfg
func (a *LossConnectivityCfg) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LossConnectivityCfg to handle AdditionalProperties
func (a *LossConnectivityCfg) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxDetectionTime"]; found {
		err = json.Unmarshal(raw, &a.MaxDetectionTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxDetectionTime': %w", err)
		}
		delete(object, "maxDetectionTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LossConnectivityCfg to handle AdditionalProperties
func (a LossConnectivityCfg) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxDetectionTime != nil {
		object["maxDetectionTime"], err = json.Marshal(a.MaxDetectionTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxDetectionTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LossConnectivityReport. Returns the specified
// element and whether it was found
func (a LossConnectivityReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LossConnectivityReport
func (a *LossConnectivityReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LossConnectivityReport to handle AdditionalProperties
func (a *LossConnectivityReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lossOfConnectReason"]; found {
		err = json.Unmarshal(raw, &a.LossOfConnectReason)
		if err != nil {
			return fmt.Errorf("error reading 'lossOfConnectReason': %w", err)
		}
		delete(object, "lossOfConnectReason")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LossConnectivityReport to handle AdditionalProperties
func (a LossConnectivityReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lossOfConnectReason"], err = json.Marshal(a.LossOfConnectReason)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lossOfConnectReason': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Lpi. Returns the specified
// element and whether it was found
func (a Lpi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Lpi
func (a *Lpi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Lpi to handle AdditionalProperties
func (a *Lpi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["locationPrivacyInd"]; found {
		err = json.Unmarshal(raw, &a.LocationPrivacyInd)
		if err != nil {
			return fmt.Errorf("error reading 'locationPrivacyInd': %w", err)
		}
		delete(object, "locationPrivacyInd")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Lpi to handle AdditionalProperties
func (a Lpi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["locationPrivacyInd"], err = json.Marshal(a.LocationPrivacyInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'locationPrivacyInd': %w", err)
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LteMInd. Returns the specified
// element and whether it was found
func (a LteMInd) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LteMInd
func (a *LteMInd) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LteMInd to handle AdditionalProperties
func (a *LteMInd) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lteCatMInd"]; found {
		err = json.Unmarshal(raw, &a.LteCatMInd)
		if err != nil {
			return fmt.Errorf("error reading 'lteCatMInd': %w", err)
		}
		delete(object, "lteCatMInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LteMInd to handle AdditionalProperties
func (a LteMInd) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lteCatMInd"], err = json.Marshal(a.LteCatMInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lteCatMInd': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LteV2xAuth. Returns the specified
// element and whether it was found
func (a LteV2xAuth) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LteV2xAuth
func (a *LteV2xAuth) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LteV2xAuth to handle AdditionalProperties
func (a *LteV2xAuth) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pedestrianUeAuth"]; found {
		err = json.Unmarshal(raw, &a.PedestrianUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'pedestrianUeAuth': %w", err)
		}
		delete(object, "pedestrianUeAuth")
	}

	if raw, found := object["vehicleUeAuth"]; found {
		err = json.Unmarshal(raw, &a.VehicleUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'vehicleUeAuth': %w", err)
		}
		delete(object, "vehicleUeAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LteV2xAuth to handle AdditionalProperties
func (a LteV2xAuth) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PedestrianUeAuth != nil {
		object["pedestrianUeAuth"], err = json.Marshal(a.PedestrianUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pedestrianUeAuth': %w", err)
		}
	}

	if a.VehicleUeAuth != nil {
		object["vehicleUeAuth"], err = json.Marshal(a.VehicleUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vehicleUeAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MappingOfSnssai. Returns the specified
// element and whether it was found
func (a MappingOfSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MappingOfSnssai
func (a *MappingOfSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MappingOfSnssai to handle AdditionalProperties
func (a *MappingOfSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["homeSnssai"]; found {
		err = json.Unmarshal(raw, &a.HomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'homeSnssai': %w", err)
		}
		delete(object, "homeSnssai")
	}

	if raw, found := object["servingSnssai"]; found {
		err = json.Unmarshal(raw, &a.ServingSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'servingSnssai': %w", err)
		}
		delete(object, "servingSnssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MappingOfSnssai to handle AdditionalProperties
func (a MappingOfSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["homeSnssai"], err = json.Marshal(a.HomeSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'homeSnssai': %w", err)
	}

	object["servingSnssai"], err = json.Marshal(a.ServingSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingSnssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MbsfnArea. Returns the specified
// element and whether it was found
func (a MbsfnArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MbsfnArea
func (a *MbsfnArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MbsfnArea to handle AdditionalProperties
func (a *MbsfnArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["carrierFrequency"]; found {
		err = json.Unmarshal(raw, &a.CarrierFrequency)
		if err != nil {
			return fmt.Errorf("error reading 'carrierFrequency': %w", err)
		}
		delete(object, "carrierFrequency")
	}

	if raw, found := object["mbsfnAreaId"]; found {
		err = json.Unmarshal(raw, &a.MbsfnAreaId)
		if err != nil {
			return fmt.Errorf("error reading 'mbsfnAreaId': %w", err)
		}
		delete(object, "mbsfnAreaId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MbsfnArea to handle AdditionalProperties
func (a MbsfnArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CarrierFrequency != nil {
		object["carrierFrequency"], err = json.Marshal(a.CarrierFrequency)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'carrierFrequency': %w", err)
		}
	}

	if a.MbsfnAreaId != nil {
		object["mbsfnAreaId"], err = json.Marshal(a.MbsfnAreaId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mbsfnAreaId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MdtConfiguration. Returns the specified
// element and whether it was found
func (a MdtConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MdtConfiguration
func (a *MdtConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MdtConfiguration to handle AdditionalProperties
func (a *MdtConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addPositioningMethodList"]; found {
		err = json.Unmarshal(raw, &a.AddPositioningMethodList)
		if err != nil {
			return fmt.Errorf("error reading 'addPositioningMethodList': %w", err)
		}
		delete(object, "addPositioningMethodList")
	}

	if raw, found := object["areaScope"]; found {
		err = json.Unmarshal(raw, &a.AreaScope)
		if err != nil {
			return fmt.Errorf("error reading 'areaScope': %w", err)
		}
		delete(object, "areaScope")
	}

	if raw, found := object["collectionPeriodRmmLte"]; found {
		err = json.Unmarshal(raw, &a.CollectionPeriodRmmLte)
		if err != nil {
			return fmt.Errorf("error reading 'collectionPeriodRmmLte': %w", err)
		}
		delete(object, "collectionPeriodRmmLte")
	}

	if raw, found := object["collectionPeriodRmmNr"]; found {
		err = json.Unmarshal(raw, &a.CollectionPeriodRmmNr)
		if err != nil {
			return fmt.Errorf("error reading 'collectionPeriodRmmNr': %w", err)
		}
		delete(object, "collectionPeriodRmmNr")
	}

	if raw, found := object["eventList"]; found {
		err = json.Unmarshal(raw, &a.EventList)
		if err != nil {
			return fmt.Errorf("error reading 'eventList': %w", err)
		}
		delete(object, "eventList")
	}

	if raw, found := object["eventThresholdRsrp"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrp)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrp': %w", err)
		}
		delete(object, "eventThresholdRsrp")
	}

	if raw, found := object["eventThresholdRsrpNr"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrpNr)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrpNr': %w", err)
		}
		delete(object, "eventThresholdRsrpNr")
	}

	if raw, found := object["eventThresholdRsrq"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrq)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrq': %w", err)
		}
		delete(object, "eventThresholdRsrq")
	}

	if raw, found := object["eventThresholdRsrqNr"]; found {
		err = json.Unmarshal(raw, &a.EventThresholdRsrqNr)
		if err != nil {
			return fmt.Errorf("error reading 'eventThresholdRsrqNr': %w", err)
		}
		delete(object, "eventThresholdRsrqNr")
	}

	if raw, found := object["interFreqTargetList"]; found {
		err = json.Unmarshal(raw, &a.InterFreqTargetList)
		if err != nil {
			return fmt.Errorf("error reading 'interFreqTargetList': %w", err)
		}
		delete(object, "interFreqTargetList")
	}

	if raw, found := object["jobType"]; found {
		err = json.Unmarshal(raw, &a.JobType)
		if err != nil {
			return fmt.Errorf("error reading 'jobType': %w", err)
		}
		delete(object, "jobType")
	}

	if raw, found := object["loggingDuration"]; found {
		err = json.Unmarshal(raw, &a.LoggingDuration)
		if err != nil {
			return fmt.Errorf("error reading 'loggingDuration': %w", err)
		}
		delete(object, "loggingDuration")
	}

	if raw, found := object["loggingDurationNr"]; found {
		err = json.Unmarshal(raw, &a.LoggingDurationNr)
		if err != nil {
			return fmt.Errorf("error reading 'loggingDurationNr': %w", err)
		}
		delete(object, "loggingDurationNr")
	}

	if raw, found := object["loggingInterval"]; found {
		err = json.Unmarshal(raw, &a.LoggingInterval)
		if err != nil {
			return fmt.Errorf("error reading 'loggingInterval': %w", err)
		}
		delete(object, "loggingInterval")
	}

	if raw, found := object["loggingIntervalNr"]; found {
		err = json.Unmarshal(raw, &a.LoggingIntervalNr)
		if err != nil {
			return fmt.Errorf("error reading 'loggingIntervalNr': %w", err)
		}
		delete(object, "loggingIntervalNr")
	}

	if raw, found := object["mbsfnAreaList"]; found {
		err = json.Unmarshal(raw, &a.MbsfnAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'mbsfnAreaList': %w", err)
		}
		delete(object, "mbsfnAreaList")
	}

	if raw, found := object["mdtAllowedPlmnIdList"]; found {
		err = json.Unmarshal(raw, &a.MdtAllowedPlmnIdList)
		if err != nil {
			return fmt.Errorf("error reading 'mdtAllowedPlmnIdList': %w", err)
		}
		delete(object, "mdtAllowedPlmnIdList")
	}

	if raw, found := object["measurementLteList"]; found {
		err = json.Unmarshal(raw, &a.MeasurementLteList)
		if err != nil {
			return fmt.Errorf("error reading 'measurementLteList': %w", err)
		}
		delete(object, "measurementLteList")
	}

	if raw, found := object["measurementNrList"]; found {
		err = json.Unmarshal(raw, &a.MeasurementNrList)
		if err != nil {
			return fmt.Errorf("error reading 'measurementNrList': %w", err)
		}
		delete(object, "measurementNrList")
	}

	if raw, found := object["measurementPeriodLte"]; found {
		err = json.Unmarshal(raw, &a.MeasurementPeriodLte)
		if err != nil {
			return fmt.Errorf("error reading 'measurementPeriodLte': %w", err)
		}
		delete(object, "measurementPeriodLte")
	}

	if raw, found := object["positioningMethod"]; found {
		err = json.Unmarshal(raw, &a.PositioningMethod)
		if err != nil {
			return fmt.Errorf("error reading 'positioningMethod': %w", err)
		}
		delete(object, "positioningMethod")
	}

	if raw, found := object["reportAmount"]; found {
		err = json.Unmarshal(raw, &a.ReportAmount)
		if err != nil {
			return fmt.Errorf("error reading 'reportAmount': %w", err)
		}
		delete(object, "reportAmount")
	}

	if raw, found := object["reportInterval"]; found {
		err = json.Unmarshal(raw, &a.ReportInterval)
		if err != nil {
			return fmt.Errorf("error reading 'reportInterval': %w", err)
		}
		delete(object, "reportInterval")
	}

	if raw, found := object["reportIntervalNr"]; found {
		err = json.Unmarshal(raw, &a.ReportIntervalNr)
		if err != nil {
			return fmt.Errorf("error reading 'reportIntervalNr': %w", err)
		}
		delete(object, "reportIntervalNr")
	}

	if raw, found := object["reportType"]; found {
		err = json.Unmarshal(raw, &a.ReportType)
		if err != nil {
			return fmt.Errorf("error reading 'reportType': %w", err)
		}
		delete(object, "reportType")
	}

	if raw, found := object["reportingTriggerList"]; found {
		err = json.Unmarshal(raw, &a.ReportingTriggerList)
		if err != nil {
			return fmt.Errorf("error reading 'reportingTriggerList': %w", err)
		}
		delete(object, "reportingTriggerList")
	}

	if raw, found := object["sensorMeasurementList"]; found {
		err = json.Unmarshal(raw, &a.SensorMeasurementList)
		if err != nil {
			return fmt.Errorf("error reading 'sensorMeasurementList': %w", err)
		}
		delete(object, "sensorMeasurementList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MdtConfiguration to handle AdditionalProperties
func (a MdtConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddPositioningMethodList) != 0 {
		object["addPositioningMethodList"], err = json.Marshal(a.AddPositioningMethodList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addPositioningMethodList': %w", err)
		}
	}

	if a.AreaScope != nil {
		object["areaScope"], err = json.Marshal(a.AreaScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaScope': %w", err)
		}
	}

	if a.CollectionPeriodRmmLte != nil {
		object["collectionPeriodRmmLte"], err = json.Marshal(a.CollectionPeriodRmmLte)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionPeriodRmmLte': %w", err)
		}
	}

	if a.CollectionPeriodRmmNr != nil {
		object["collectionPeriodRmmNr"], err = json.Marshal(a.CollectionPeriodRmmNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionPeriodRmmNr': %w", err)
		}
	}

	if len(a.EventList) != 0 {
		object["eventList"], err = json.Marshal(a.EventList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventList': %w", err)
		}
	}

	if a.EventThresholdRsrp != nil {
		object["eventThresholdRsrp"], err = json.Marshal(a.EventThresholdRsrp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrp': %w", err)
		}
	}

	if a.EventThresholdRsrpNr != nil {
		object["eventThresholdRsrpNr"], err = json.Marshal(a.EventThresholdRsrpNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrpNr': %w", err)
		}
	}

	if a.EventThresholdRsrq != nil {
		object["eventThresholdRsrq"], err = json.Marshal(a.EventThresholdRsrq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrq': %w", err)
		}
	}

	if a.EventThresholdRsrqNr != nil {
		object["eventThresholdRsrqNr"], err = json.Marshal(a.EventThresholdRsrqNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventThresholdRsrqNr': %w", err)
		}
	}

	if len(a.InterFreqTargetList) != 0 {
		object["interFreqTargetList"], err = json.Marshal(a.InterFreqTargetList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interFreqTargetList': %w", err)
		}
	}

	object["jobType"], err = json.Marshal(a.JobType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'jobType': %w", err)
	}

	if a.LoggingDuration != nil {
		object["loggingDuration"], err = json.Marshal(a.LoggingDuration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingDuration': %w", err)
		}
	}

	if a.LoggingDurationNr != nil {
		object["loggingDurationNr"], err = json.Marshal(a.LoggingDurationNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingDurationNr': %w", err)
		}
	}

	if a.LoggingInterval != nil {
		object["loggingInterval"], err = json.Marshal(a.LoggingInterval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingInterval': %w", err)
		}
	}

	if a.LoggingIntervalNr != nil {
		object["loggingIntervalNr"], err = json.Marshal(a.LoggingIntervalNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loggingIntervalNr': %w", err)
		}
	}

	if len(a.MbsfnAreaList) != 0 {
		object["mbsfnAreaList"], err = json.Marshal(a.MbsfnAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mbsfnAreaList': %w", err)
		}
	}

	if len(a.MdtAllowedPlmnIdList) != 0 {
		object["mdtAllowedPlmnIdList"], err = json.Marshal(a.MdtAllowedPlmnIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mdtAllowedPlmnIdList': %w", err)
		}
	}

	if a.MeasurementLteList != nil {
		object["measurementLteList"], err = json.Marshal(a.MeasurementLteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementLteList': %w", err)
		}
	}

	if len(a.MeasurementNrList) != 0 {
		object["measurementNrList"], err = json.Marshal(a.MeasurementNrList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementNrList': %w", err)
		}
	}

	if a.MeasurementPeriodLte != nil {
		object["measurementPeriodLte"], err = json.Marshal(a.MeasurementPeriodLte)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'measurementPeriodLte': %w", err)
		}
	}

	if a.PositioningMethod != nil {
		object["positioningMethod"], err = json.Marshal(a.PositioningMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'positioningMethod': %w", err)
		}
	}

	if a.ReportAmount != nil {
		object["reportAmount"], err = json.Marshal(a.ReportAmount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportAmount': %w", err)
		}
	}

	if a.ReportInterval != nil {
		object["reportInterval"], err = json.Marshal(a.ReportInterval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportInterval': %w", err)
		}
	}

	if a.ReportIntervalNr != nil {
		object["reportIntervalNr"], err = json.Marshal(a.ReportIntervalNr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportIntervalNr': %w", err)
		}
	}

	if a.ReportType != nil {
		object["reportType"], err = json.Marshal(a.ReportType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportType': %w", err)
		}
	}

	if len(a.ReportingTriggerList) != 0 {
		object["reportingTriggerList"], err = json.Marshal(a.ReportingTriggerList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportingTriggerList': %w", err)
		}
	}

	if len(a.SensorMeasurementList) != 0 {
		object["sensorMeasurementList"], err = json.Marshal(a.SensorMeasurementList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sensorMeasurementList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaComponent. Returns the specified
// element and whether it was found
func (a MediaComponent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaComponent
func (a *MediaComponent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaComponent to handle AdditionalProperties
func (a *MediaComponent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["altSerReqs"]; found {
		err = json.Unmarshal(raw, &a.AltSerReqs)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReqs': %w", err)
		}
		delete(object, "altSerReqs")
	}

	if raw, found := object["codecs"]; found {
		err = json.Unmarshal(raw, &a.Codecs)
		if err != nil {
			return fmt.Errorf("error reading 'codecs': %w", err)
		}
		delete(object, "codecs")
	}

	if raw, found := object["contVer"]; found {
		err = json.Unmarshal(raw, &a.ContVer)
		if err != nil {
			return fmt.Errorf("error reading 'contVer': %w", err)
		}
		delete(object, "contVer")
	}

	if raw, found := object["desMaxLatency"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLatency)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLatency': %w", err)
		}
		delete(object, "desMaxLatency")
	}

	if raw, found := object["desMaxLoss"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLoss)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLoss': %w", err)
		}
		delete(object, "desMaxLoss")
	}

	if raw, found := object["disUeNotif"]; found {
		err = json.Unmarshal(raw, &a.DisUeNotif)
		if err != nil {
			return fmt.Errorf("error reading 'disUeNotif': %w", err)
		}
		delete(object, "disUeNotif")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flusId"]; found {
		err = json.Unmarshal(raw, &a.FlusId)
		if err != nil {
			return fmt.Errorf("error reading 'flusId': %w", err)
		}
		delete(object, "flusId")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["maxPacketLossRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateDl': %w", err)
		}
		delete(object, "maxPacketLossRateDl")
	}

	if raw, found := object["maxPacketLossRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateUl': %w", err)
		}
		delete(object, "maxPacketLossRateUl")
	}

	if raw, found := object["maxSuppBwDl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwDl': %w", err)
		}
		delete(object, "maxSuppBwDl")
	}

	if raw, found := object["maxSuppBwUl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwUl': %w", err)
		}
		delete(object, "maxSuppBwUl")
	}

	if raw, found := object["medCompN"]; found {
		err = json.Unmarshal(raw, &a.MedCompN)
		if err != nil {
			return fmt.Errorf("error reading 'medCompN': %w", err)
		}
		delete(object, "medCompN")
	}

	if raw, found := object["medSubComps"]; found {
		err = json.Unmarshal(raw, &a.MedSubComps)
		if err != nil {
			return fmt.Errorf("error reading 'medSubComps': %w", err)
		}
		delete(object, "medSubComps")
	}

	if raw, found := object["medType"]; found {
		err = json.Unmarshal(raw, &a.MedType)
		if err != nil {
			return fmt.Errorf("error reading 'medType': %w", err)
		}
		delete(object, "medType")
	}

	if raw, found := object["minDesBwDl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwDl': %w", err)
		}
		delete(object, "minDesBwDl")
	}

	if raw, found := object["minDesBwUl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwUl': %w", err)
		}
		delete(object, "minDesBwUl")
	}

	if raw, found := object["mirBwDl"]; found {
		err = json.Unmarshal(raw, &a.MirBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwDl': %w", err)
		}
		delete(object, "mirBwDl")
	}

	if raw, found := object["mirBwUl"]; found {
		err = json.Unmarshal(raw, &a.MirBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwUl': %w", err)
		}
		delete(object, "mirBwUl")
	}

	if raw, found := object["preemptCap"]; found {
		err = json.Unmarshal(raw, &a.PreemptCap)
		if err != nil {
			return fmt.Errorf("error reading 'preemptCap': %w", err)
		}
		delete(object, "preemptCap")
	}

	if raw, found := object["preemptVuln"]; found {
		err = json.Unmarshal(raw, &a.PreemptVuln)
		if err != nil {
			return fmt.Errorf("error reading 'preemptVuln': %w", err)
		}
		delete(object, "preemptVuln")
	}

	if raw, found := object["prioSharingInd"]; found {
		err = json.Unmarshal(raw, &a.PrioSharingInd)
		if err != nil {
			return fmt.Errorf("error reading 'prioSharingInd': %w", err)
		}
		delete(object, "prioSharingInd")
	}

	if raw, found := object["qosReference"]; found {
		err = json.Unmarshal(raw, &a.QosReference)
		if err != nil {
			return fmt.Errorf("error reading 'qosReference': %w", err)
		}
		delete(object, "qosReference")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["rrBw"]; found {
		err = json.Unmarshal(raw, &a.RrBw)
		if err != nil {
			return fmt.Errorf("error reading 'rrBw': %w", err)
		}
		delete(object, "rrBw")
	}

	if raw, found := object["rsBw"]; found {
		err = json.Unmarshal(raw, &a.RsBw)
		if err != nil {
			return fmt.Errorf("error reading 'rsBw': %w", err)
		}
		delete(object, "rsBw")
	}

	if raw, found := object["sharingKeyDl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyDl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyDl': %w", err)
		}
		delete(object, "sharingKeyDl")
	}

	if raw, found := object["sharingKeyUl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyUl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyUl': %w", err)
		}
		delete(object, "sharingKeyUl")
	}

	if raw, found := object["tscaiInputDl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputDl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputDl': %w", err)
		}
		delete(object, "tscaiInputDl")
	}

	if raw, found := object["tscaiInputUl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputUl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputUl': %w", err)
		}
		delete(object, "tscaiInputUl")
	}

	if raw, found := object["tsnQos"]; found {
		err = json.Unmarshal(raw, &a.TsnQos)
		if err != nil {
			return fmt.Errorf("error reading 'tsnQos': %w", err)
		}
		delete(object, "tsnQos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaComponent to handle AdditionalProperties
func (a MediaComponent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AfRoutReq != nil {
		object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
		}
	}

	if len(a.AltSerReqs) != 0 {
		object["altSerReqs"], err = json.Marshal(a.AltSerReqs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altSerReqs': %w", err)
		}
	}

	if len(a.Codecs) != 0 {
		object["codecs"], err = json.Marshal(a.Codecs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codecs': %w", err)
		}
	}

	if a.ContVer != nil {
		object["contVer"], err = json.Marshal(a.ContVer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVer': %w", err)
		}
	}

	if a.DesMaxLatency != nil {
		object["desMaxLatency"], err = json.Marshal(a.DesMaxLatency)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'desMaxLatency': %w", err)
		}
	}

	if a.DesMaxLoss != nil {
		object["desMaxLoss"], err = json.Marshal(a.DesMaxLoss)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'desMaxLoss': %w", err)
		}
	}

	if a.DisUeNotif != nil {
		object["disUeNotif"], err = json.Marshal(a.DisUeNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'disUeNotif': %w", err)
		}
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	if a.FlusId != nil {
		object["flusId"], err = json.Marshal(a.FlusId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flusId': %w", err)
		}
	}

	if len(a.MarBwDl) != 0 {
		object["marBwDl"], err = json.Marshal(a.MarBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
		}
	}

	if len(a.MarBwUl) != 0 {
		object["marBwUl"], err = json.Marshal(a.MarBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
		}
	}

	object["maxPacketLossRateDl"], err = json.Marshal(a.MaxPacketLossRateDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateDl': %w", err)
	}

	object["maxPacketLossRateUl"], err = json.Marshal(a.MaxPacketLossRateUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateUl': %w", err)
	}

	if len(a.MaxSuppBwDl) != 0 {
		object["maxSuppBwDl"], err = json.Marshal(a.MaxSuppBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxSuppBwDl': %w", err)
		}
	}

	if len(a.MaxSuppBwUl) != 0 {
		object["maxSuppBwUl"], err = json.Marshal(a.MaxSuppBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxSuppBwUl': %w", err)
		}
	}

	object["medCompN"], err = json.Marshal(a.MedCompN)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'medCompN': %w", err)
	}

	if a.MedSubComps != nil {
		object["medSubComps"], err = json.Marshal(a.MedSubComps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medSubComps': %w", err)
		}
	}

	if a.MedType != nil {
		object["medType"], err = json.Marshal(a.MedType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medType': %w", err)
		}
	}

	if len(a.MinDesBwDl) != 0 {
		object["minDesBwDl"], err = json.Marshal(a.MinDesBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'minDesBwDl': %w", err)
		}
	}

	if len(a.MinDesBwUl) != 0 {
		object["minDesBwUl"], err = json.Marshal(a.MinDesBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'minDesBwUl': %w", err)
		}
	}

	if len(a.MirBwDl) != 0 {
		object["mirBwDl"], err = json.Marshal(a.MirBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mirBwDl': %w", err)
		}
	}

	if len(a.MirBwUl) != 0 {
		object["mirBwUl"], err = json.Marshal(a.MirBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mirBwUl': %w", err)
		}
	}

	if a.PreemptCap != nil {
		object["preemptCap"], err = json.Marshal(a.PreemptCap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptCap': %w", err)
		}
	}

	if a.PreemptVuln != nil {
		object["preemptVuln"], err = json.Marshal(a.PreemptVuln)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptVuln': %w", err)
		}
	}

	if a.PrioSharingInd != nil {
		object["prioSharingInd"], err = json.Marshal(a.PrioSharingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'prioSharingInd': %w", err)
		}
	}

	if a.QosReference != nil {
		object["qosReference"], err = json.Marshal(a.QosReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosReference': %w", err)
		}
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	if len(a.RrBw) != 0 {
		object["rrBw"], err = json.Marshal(a.RrBw)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rrBw': %w", err)
		}
	}

	if len(a.RsBw) != 0 {
		object["rsBw"], err = json.Marshal(a.RsBw)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rsBw': %w", err)
		}
	}

	if a.SharingKeyDl != nil {
		object["sharingKeyDl"], err = json.Marshal(a.SharingKeyDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharingKeyDl': %w", err)
		}
	}

	if a.SharingKeyUl != nil {
		object["sharingKeyUl"], err = json.Marshal(a.SharingKeyUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharingKeyUl': %w", err)
		}
	}

	object["tscaiInputDl"], err = json.Marshal(a.TscaiInputDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputDl': %w", err)
	}

	object["tscaiInputUl"], err = json.Marshal(a.TscaiInputUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputUl': %w", err)
	}

	if a.TsnQos != nil {
		object["tsnQos"], err = json.Marshal(a.TsnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnQos': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaComponentRm. Returns the specified
// element and whether it was found
func (a MediaComponentRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaComponentRm
func (a *MediaComponentRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaComponentRm to handle AdditionalProperties
func (a *MediaComponentRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["altSerReqs"]; found {
		err = json.Unmarshal(raw, &a.AltSerReqs)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReqs': %w", err)
		}
		delete(object, "altSerReqs")
	}

	if raw, found := object["codecs"]; found {
		err = json.Unmarshal(raw, &a.Codecs)
		if err != nil {
			return fmt.Errorf("error reading 'codecs': %w", err)
		}
		delete(object, "codecs")
	}

	if raw, found := object["contVer"]; found {
		err = json.Unmarshal(raw, &a.ContVer)
		if err != nil {
			return fmt.Errorf("error reading 'contVer': %w", err)
		}
		delete(object, "contVer")
	}

	if raw, found := object["desMaxLatency"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLatency)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLatency': %w", err)
		}
		delete(object, "desMaxLatency")
	}

	if raw, found := object["desMaxLoss"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLoss)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLoss': %w", err)
		}
		delete(object, "desMaxLoss")
	}

	if raw, found := object["disUeNotif"]; found {
		err = json.Unmarshal(raw, &a.DisUeNotif)
		if err != nil {
			return fmt.Errorf("error reading 'disUeNotif': %w", err)
		}
		delete(object, "disUeNotif")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flusId"]; found {
		err = json.Unmarshal(raw, &a.FlusId)
		if err != nil {
			return fmt.Errorf("error reading 'flusId': %w", err)
		}
		delete(object, "flusId")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["maxPacketLossRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateDl': %w", err)
		}
		delete(object, "maxPacketLossRateDl")
	}

	if raw, found := object["maxPacketLossRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateUl': %w", err)
		}
		delete(object, "maxPacketLossRateUl")
	}

	if raw, found := object["maxSuppBwDl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwDl': %w", err)
		}
		delete(object, "maxSuppBwDl")
	}

	if raw, found := object["maxSuppBwUl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwUl': %w", err)
		}
		delete(object, "maxSuppBwUl")
	}

	if raw, found := object["medCompN"]; found {
		err = json.Unmarshal(raw, &a.MedCompN)
		if err != nil {
			return fmt.Errorf("error reading 'medCompN': %w", err)
		}
		delete(object, "medCompN")
	}

	if raw, found := object["medSubComps"]; found {
		err = json.Unmarshal(raw, &a.MedSubComps)
		if err != nil {
			return fmt.Errorf("error reading 'medSubComps': %w", err)
		}
		delete(object, "medSubComps")
	}

	if raw, found := object["medType"]; found {
		err = json.Unmarshal(raw, &a.MedType)
		if err != nil {
			return fmt.Errorf("error reading 'medType': %w", err)
		}
		delete(object, "medType")
	}

	if raw, found := object["minDesBwDl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwDl': %w", err)
		}
		delete(object, "minDesBwDl")
	}

	if raw, found := object["minDesBwUl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwUl': %w", err)
		}
		delete(object, "minDesBwUl")
	}

	if raw, found := object["mirBwDl"]; found {
		err = json.Unmarshal(raw, &a.MirBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwDl': %w", err)
		}
		delete(object, "mirBwDl")
	}

	if raw, found := object["mirBwUl"]; found {
		err = json.Unmarshal(raw, &a.MirBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwUl': %w", err)
		}
		delete(object, "mirBwUl")
	}

	if raw, found := object["preemptCap"]; found {
		err = json.Unmarshal(raw, &a.PreemptCap)
		if err != nil {
			return fmt.Errorf("error reading 'preemptCap': %w", err)
		}
		delete(object, "preemptCap")
	}

	if raw, found := object["preemptVuln"]; found {
		err = json.Unmarshal(raw, &a.PreemptVuln)
		if err != nil {
			return fmt.Errorf("error reading 'preemptVuln': %w", err)
		}
		delete(object, "preemptVuln")
	}

	if raw, found := object["prioSharingInd"]; found {
		err = json.Unmarshal(raw, &a.PrioSharingInd)
		if err != nil {
			return fmt.Errorf("error reading 'prioSharingInd': %w", err)
		}
		delete(object, "prioSharingInd")
	}

	if raw, found := object["qosReference"]; found {
		err = json.Unmarshal(raw, &a.QosReference)
		if err != nil {
			return fmt.Errorf("error reading 'qosReference': %w", err)
		}
		delete(object, "qosReference")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["rrBw"]; found {
		err = json.Unmarshal(raw, &a.RrBw)
		if err != nil {
			return fmt.Errorf("error reading 'rrBw': %w", err)
		}
		delete(object, "rrBw")
	}

	if raw, found := object["rsBw"]; found {
		err = json.Unmarshal(raw, &a.RsBw)
		if err != nil {
			return fmt.Errorf("error reading 'rsBw': %w", err)
		}
		delete(object, "rsBw")
	}

	if raw, found := object["sharingKeyDl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyDl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyDl': %w", err)
		}
		delete(object, "sharingKeyDl")
	}

	if raw, found := object["sharingKeyUl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyUl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyUl': %w", err)
		}
		delete(object, "sharingKeyUl")
	}

	if raw, found := object["tscaiInputDl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputDl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputDl': %w", err)
		}
		delete(object, "tscaiInputDl")
	}

	if raw, found := object["tscaiInputUl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputUl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputUl': %w", err)
		}
		delete(object, "tscaiInputUl")
	}

	if raw, found := object["tsnQos"]; found {
		err = json.Unmarshal(raw, &a.TsnQos)
		if err != nil {
			return fmt.Errorf("error reading 'tsnQos': %w", err)
		}
		delete(object, "tsnQos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaComponentRm to handle AdditionalProperties
func (a MediaComponentRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
	}

	object["altSerReqs"], err = json.Marshal(a.AltSerReqs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'altSerReqs': %w", err)
	}

	if len(a.Codecs) != 0 {
		object["codecs"], err = json.Marshal(a.Codecs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codecs': %w", err)
		}
	}

	if a.ContVer != nil {
		object["contVer"], err = json.Marshal(a.ContVer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVer': %w", err)
		}
	}

	object["desMaxLatency"], err = json.Marshal(a.DesMaxLatency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'desMaxLatency': %w", err)
	}

	object["desMaxLoss"], err = json.Marshal(a.DesMaxLoss)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'desMaxLoss': %w", err)
	}

	if a.DisUeNotif != nil {
		object["disUeNotif"], err = json.Marshal(a.DisUeNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'disUeNotif': %w", err)
		}
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	object["flusId"], err = json.Marshal(a.FlusId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flusId': %w", err)
	}

	object["marBwDl"], err = json.Marshal(a.MarBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
	}

	object["marBwUl"], err = json.Marshal(a.MarBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
	}

	object["maxPacketLossRateDl"], err = json.Marshal(a.MaxPacketLossRateDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateDl': %w", err)
	}

	object["maxPacketLossRateUl"], err = json.Marshal(a.MaxPacketLossRateUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateUl': %w", err)
	}

	object["maxSuppBwDl"], err = json.Marshal(a.MaxSuppBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxSuppBwDl': %w", err)
	}

	object["maxSuppBwUl"], err = json.Marshal(a.MaxSuppBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxSuppBwUl': %w", err)
	}

	object["medCompN"], err = json.Marshal(a.MedCompN)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'medCompN': %w", err)
	}

	if a.MedSubComps != nil {
		object["medSubComps"], err = json.Marshal(a.MedSubComps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medSubComps': %w", err)
		}
	}

	if a.MedType != nil {
		object["medType"], err = json.Marshal(a.MedType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medType': %w", err)
		}
	}

	object["minDesBwDl"], err = json.Marshal(a.MinDesBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minDesBwDl': %w", err)
	}

	object["minDesBwUl"], err = json.Marshal(a.MinDesBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minDesBwUl': %w", err)
	}

	object["mirBwDl"], err = json.Marshal(a.MirBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mirBwDl': %w", err)
	}

	object["mirBwUl"], err = json.Marshal(a.MirBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mirBwUl': %w", err)
	}

	if a.PreemptCap != nil {
		object["preemptCap"], err = json.Marshal(a.PreemptCap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptCap': %w", err)
		}
	}

	if a.PreemptVuln != nil {
		object["preemptVuln"], err = json.Marshal(a.PreemptVuln)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptVuln': %w", err)
		}
	}

	if a.PrioSharingInd != nil {
		object["prioSharingInd"], err = json.Marshal(a.PrioSharingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'prioSharingInd': %w", err)
		}
	}

	object["qosReference"], err = json.Marshal(a.QosReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosReference': %w", err)
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	object["rrBw"], err = json.Marshal(a.RrBw)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rrBw': %w", err)
	}

	object["rsBw"], err = json.Marshal(a.RsBw)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rsBw': %w", err)
	}

	object["sharingKeyDl"], err = json.Marshal(a.SharingKeyDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharingKeyDl': %w", err)
	}

	object["sharingKeyUl"], err = json.Marshal(a.SharingKeyUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharingKeyUl': %w", err)
	}

	object["tscaiInputDl"], err = json.Marshal(a.TscaiInputDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputDl': %w", err)
	}

	object["tscaiInputUl"], err = json.Marshal(a.TscaiInputUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputUl': %w", err)
	}

	object["tsnQos"], err = json.Marshal(a.TsnQos)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tsnQos': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaSubComponent. Returns the specified
// element and whether it was found
func (a MediaSubComponent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaSubComponent
func (a *MediaSubComponent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaSubComponent to handle AdditionalProperties
func (a *MediaSubComponent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afSigProtocol"]; found {
		err = json.Unmarshal(raw, &a.AfSigProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'afSigProtocol': %w", err)
		}
		delete(object, "afSigProtocol")
	}

	if raw, found := object["ethfDescs"]; found {
		err = json.Unmarshal(raw, &a.EthfDescs)
		if err != nil {
			return fmt.Errorf("error reading 'ethfDescs': %w", err)
		}
		delete(object, "ethfDescs")
	}

	if raw, found := object["fDescs"]; found {
		err = json.Unmarshal(raw, &a.FDescs)
		if err != nil {
			return fmt.Errorf("error reading 'fDescs': %w", err)
		}
		delete(object, "fDescs")
	}

	if raw, found := object["fNum"]; found {
		err = json.Unmarshal(raw, &a.FNum)
		if err != nil {
			return fmt.Errorf("error reading 'fNum': %w", err)
		}
		delete(object, "fNum")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flowUsage"]; found {
		err = json.Unmarshal(raw, &a.FlowUsage)
		if err != nil {
			return fmt.Errorf("error reading 'flowUsage': %w", err)
		}
		delete(object, "flowUsage")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["tosTrCl"]; found {
		err = json.Unmarshal(raw, &a.TosTrCl)
		if err != nil {
			return fmt.Errorf("error reading 'tosTrCl': %w", err)
		}
		delete(object, "tosTrCl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaSubComponent to handle AdditionalProperties
func (a MediaSubComponent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfSigProtocol != nil {
		object["afSigProtocol"], err = json.Marshal(a.AfSigProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afSigProtocol': %w", err)
		}
	}

	if len(a.EthfDescs) != 0 {
		object["ethfDescs"], err = json.Marshal(a.EthfDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethfDescs': %w", err)
		}
	}

	if len(a.FDescs) != 0 {
		object["fDescs"], err = json.Marshal(a.FDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fDescs': %w", err)
		}
	}

	object["fNum"], err = json.Marshal(a.FNum)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fNum': %w", err)
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	if a.FlowUsage != nil {
		object["flowUsage"], err = json.Marshal(a.FlowUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowUsage': %w", err)
		}
	}

	if len(a.MarBwDl) != 0 {
		object["marBwDl"], err = json.Marshal(a.MarBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
		}
	}

	if len(a.MarBwUl) != 0 {
		object["marBwUl"], err = json.Marshal(a.MarBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
		}
	}

	if a.TosTrCl != nil {
		object["tosTrCl"], err = json.Marshal(a.TosTrCl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tosTrCl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaSubComponentRm. Returns the specified
// element and whether it was found
func (a MediaSubComponentRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaSubComponentRm
func (a *MediaSubComponentRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaSubComponentRm to handle AdditionalProperties
func (a *MediaSubComponentRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afSigProtocol"]; found {
		err = json.Unmarshal(raw, &a.AfSigProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'afSigProtocol': %w", err)
		}
		delete(object, "afSigProtocol")
	}

	if raw, found := object["ethfDescs"]; found {
		err = json.Unmarshal(raw, &a.EthfDescs)
		if err != nil {
			return fmt.Errorf("error reading 'ethfDescs': %w", err)
		}
		delete(object, "ethfDescs")
	}

	if raw, found := object["fDescs"]; found {
		err = json.Unmarshal(raw, &a.FDescs)
		if err != nil {
			return fmt.Errorf("error reading 'fDescs': %w", err)
		}
		delete(object, "fDescs")
	}

	if raw, found := object["fNum"]; found {
		err = json.Unmarshal(raw, &a.FNum)
		if err != nil {
			return fmt.Errorf("error reading 'fNum': %w", err)
		}
		delete(object, "fNum")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flowUsage"]; found {
		err = json.Unmarshal(raw, &a.FlowUsage)
		if err != nil {
			return fmt.Errorf("error reading 'flowUsage': %w", err)
		}
		delete(object, "flowUsage")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["tosTrCl"]; found {
		err = json.Unmarshal(raw, &a.TosTrCl)
		if err != nil {
			return fmt.Errorf("error reading 'tosTrCl': %w", err)
		}
		delete(object, "tosTrCl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaSubComponentRm to handle AdditionalProperties
func (a MediaSubComponentRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfSigProtocol != nil {
		object["afSigProtocol"], err = json.Marshal(a.AfSigProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afSigProtocol': %w", err)
		}
	}

	object["ethfDescs"], err = json.Marshal(a.EthfDescs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ethfDescs': %w", err)
	}

	object["fDescs"], err = json.Marshal(a.FDescs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fDescs': %w", err)
	}

	object["fNum"], err = json.Marshal(a.FNum)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fNum': %w", err)
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	if a.FlowUsage != nil {
		object["flowUsage"], err = json.Marshal(a.FlowUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowUsage': %w", err)
		}
	}

	object["marBwDl"], err = json.Marshal(a.MarBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
	}

	object["marBwUl"], err = json.Marshal(a.MarBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
	}

	object["tosTrCl"], err = json.Marshal(a.TosTrCl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tosTrCl': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MessageWaitingData. Returns the specified
// element and whether it was found
func (a MessageWaitingData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MessageWaitingData
func (a *MessageWaitingData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MessageWaitingData to handle AdditionalProperties
func (a *MessageWaitingData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mwdList"]; found {
		err = json.Unmarshal(raw, &a.MwdList)
		if err != nil {
			return fmt.Errorf("error reading 'mwdList': %w", err)
		}
		delete(object, "mwdList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MessageWaitingData to handle AdditionalProperties
func (a MessageWaitingData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.MwdList) != 0 {
		object["mwdList"], err = json.Marshal(a.MwdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mwdList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MmContext. Returns the specified
// element and whether it was found
func (a MmContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MmContext
func (a *MmContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MmContext to handle AdditionalProperties
func (a *MmContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["allowedHomeNssai"]; found {
		err = json.Unmarshal(raw, &a.AllowedHomeNssai)
		if err != nil {
			return fmt.Errorf("error reading 'allowedHomeNssai': %w", err)
		}
		delete(object, "allowedHomeNssai")
	}

	if raw, found := object["allowedNssai"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssai': %w", err)
		}
		delete(object, "allowedNssai")
	}

	if raw, found := object["anN2ApId"]; found {
		err = json.Unmarshal(raw, &a.AnN2ApId)
		if err != nil {
			return fmt.Errorf("error reading 'anN2ApId': %w", err)
		}
		delete(object, "anN2ApId")
	}

	if raw, found := object["epsNasSecurityMode"]; found {
		err = json.Unmarshal(raw, &a.EpsNasSecurityMode)
		if err != nil {
			return fmt.Errorf("error reading 'epsNasSecurityMode': %w", err)
		}
		delete(object, "epsNasSecurityMode")
	}

	if raw, found := object["expectedUEbehavior"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUEbehavior)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUEbehavior': %w", err)
		}
		delete(object, "expectedUEbehavior")
	}

	if raw, found := object["manAssiUeRadioCapId"]; found {
		err = json.Unmarshal(raw, &a.ManAssiUeRadioCapId)
		if err != nil {
			return fmt.Errorf("error reading 'manAssiUeRadioCapId': %w", err)
		}
		delete(object, "manAssiUeRadioCapId")
	}

	if raw, found := object["n3IwfId"]; found {
		err = json.Unmarshal(raw, &a.N3IwfId)
		if err != nil {
			return fmt.Errorf("error reading 'n3IwfId': %w", err)
		}
		delete(object, "n3IwfId")
	}

	if raw, found := object["nasDownlinkCount"]; found {
		err = json.Unmarshal(raw, &a.NasDownlinkCount)
		if err != nil {
			return fmt.Errorf("error reading 'nasDownlinkCount': %w", err)
		}
		delete(object, "nasDownlinkCount")
	}

	if raw, found := object["nasSecurityMode"]; found {
		err = json.Unmarshal(raw, &a.NasSecurityMode)
		if err != nil {
			return fmt.Errorf("error reading 'nasSecurityMode': %w", err)
		}
		delete(object, "nasSecurityMode")
	}

	if raw, found := object["nasUplinkCount"]; found {
		err = json.Unmarshal(raw, &a.NasUplinkCount)
		if err != nil {
			return fmt.Errorf("error reading 'nasUplinkCount': %w", err)
		}
		delete(object, "nasUplinkCount")
	}

	if raw, found := object["nsInstanceList"]; found {
		err = json.Unmarshal(raw, &a.NsInstanceList)
		if err != nil {
			return fmt.Errorf("error reading 'nsInstanceList': %w", err)
		}
		delete(object, "nsInstanceList")
	}

	if raw, found := object["nssaaStatusList"]; found {
		err = json.Unmarshal(raw, &a.NssaaStatusList)
		if err != nil {
			return fmt.Errorf("error reading 'nssaaStatusList': %w", err)
		}
		delete(object, "nssaaStatusList")
	}

	if raw, found := object["nssaiMappingList"]; found {
		err = json.Unmarshal(raw, &a.NssaiMappingList)
		if err != nil {
			return fmt.Errorf("error reading 'nssaiMappingList': %w", err)
		}
		delete(object, "nssaiMappingList")
	}

	if raw, found := object["pendingNssaiMappingList"]; found {
		err = json.Unmarshal(raw, &a.PendingNssaiMappingList)
		if err != nil {
			return fmt.Errorf("error reading 'pendingNssaiMappingList': %w", err)
		}
		delete(object, "pendingNssaiMappingList")
	}

	if raw, found := object["plmnAssiUeRadioCapId"]; found {
		err = json.Unmarshal(raw, &a.PlmnAssiUeRadioCapId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnAssiUeRadioCapId': %w", err)
		}
		delete(object, "plmnAssiUeRadioCapId")
	}

	if raw, found := object["s1UeNetworkCapability"]; found {
		err = json.Unmarshal(raw, &a.S1UeNetworkCapability)
		if err != nil {
			return fmt.Errorf("error reading 's1UeNetworkCapability': %w", err)
		}
		delete(object, "s1UeNetworkCapability")
	}

	if raw, found := object["tngfId"]; found {
		err = json.Unmarshal(raw, &a.TngfId)
		if err != nil {
			return fmt.Errorf("error reading 'tngfId': %w", err)
		}
		delete(object, "tngfId")
	}

	if raw, found := object["ucmfDicEntryId"]; found {
		err = json.Unmarshal(raw, &a.UcmfDicEntryId)
		if err != nil {
			return fmt.Errorf("error reading 'ucmfDicEntryId': %w", err)
		}
		delete(object, "ucmfDicEntryId")
	}

	if raw, found := object["ueDifferentiationInfo"]; found {
		err = json.Unmarshal(raw, &a.UeDifferentiationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ueDifferentiationInfo': %w", err)
		}
		delete(object, "ueDifferentiationInfo")
	}

	if raw, found := object["ueSecurityCapability"]; found {
		err = json.Unmarshal(raw, &a.UeSecurityCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueSecurityCapability': %w", err)
		}
		delete(object, "ueSecurityCapability")
	}

	if raw, found := object["wagfId"]; found {
		err = json.Unmarshal(raw, &a.WagfId)
		if err != nil {
			return fmt.Errorf("error reading 'wagfId': %w", err)
		}
		delete(object, "wagfId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MmContext to handle AdditionalProperties
func (a MmContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	if len(a.AllowedHomeNssai) != 0 {
		object["allowedHomeNssai"], err = json.Marshal(a.AllowedHomeNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedHomeNssai': %w", err)
		}
	}

	if len(a.AllowedNssai) != 0 {
		object["allowedNssai"], err = json.Marshal(a.AllowedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssai': %w", err)
		}
	}

	if a.AnN2ApId != nil {
		object["anN2ApId"], err = json.Marshal(a.AnN2ApId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anN2ApId': %w", err)
		}
	}

	if a.EpsNasSecurityMode != nil {
		object["epsNasSecurityMode"], err = json.Marshal(a.EpsNasSecurityMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsNasSecurityMode': %w", err)
		}
	}

	if a.ExpectedUEbehavior != nil {
		object["expectedUEbehavior"], err = json.Marshal(a.ExpectedUEbehavior)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUEbehavior': %w", err)
		}
	}

	if a.ManAssiUeRadioCapId != nil {
		object["manAssiUeRadioCapId"], err = json.Marshal(a.ManAssiUeRadioCapId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'manAssiUeRadioCapId': %w", err)
		}
	}

	if a.N3IwfId != nil {
		object["n3IwfId"], err = json.Marshal(a.N3IwfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3IwfId': %w", err)
		}
	}

	if a.NasDownlinkCount != nil {
		object["nasDownlinkCount"], err = json.Marshal(a.NasDownlinkCount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nasDownlinkCount': %w", err)
		}
	}

	if a.NasSecurityMode != nil {
		object["nasSecurityMode"], err = json.Marshal(a.NasSecurityMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nasSecurityMode': %w", err)
		}
	}

	if a.NasUplinkCount != nil {
		object["nasUplinkCount"], err = json.Marshal(a.NasUplinkCount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nasUplinkCount': %w", err)
		}
	}

	if len(a.NsInstanceList) != 0 {
		object["nsInstanceList"], err = json.Marshal(a.NsInstanceList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsInstanceList': %w", err)
		}
	}

	if len(a.NssaaStatusList) != 0 {
		object["nssaaStatusList"], err = json.Marshal(a.NssaaStatusList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nssaaStatusList': %w", err)
		}
	}

	if len(a.NssaiMappingList) != 0 {
		object["nssaiMappingList"], err = json.Marshal(a.NssaiMappingList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nssaiMappingList': %w", err)
		}
	}

	if len(a.PendingNssaiMappingList) != 0 {
		object["pendingNssaiMappingList"], err = json.Marshal(a.PendingNssaiMappingList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pendingNssaiMappingList': %w", err)
		}
	}

	if a.PlmnAssiUeRadioCapId != nil {
		object["plmnAssiUeRadioCapId"], err = json.Marshal(a.PlmnAssiUeRadioCapId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnAssiUeRadioCapId': %w", err)
		}
	}

	if a.S1UeNetworkCapability != nil {
		object["s1UeNetworkCapability"], err = json.Marshal(a.S1UeNetworkCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 's1UeNetworkCapability': %w", err)
		}
	}

	if a.TngfId != nil {
		object["tngfId"], err = json.Marshal(a.TngfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tngfId': %w", err)
		}
	}

	if a.UcmfDicEntryId != nil {
		object["ucmfDicEntryId"], err = json.Marshal(a.UcmfDicEntryId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ucmfDicEntryId': %w", err)
		}
	}

	if a.UeDifferentiationInfo != nil {
		object["ueDifferentiationInfo"], err = json.Marshal(a.UeDifferentiationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueDifferentiationInfo': %w", err)
		}
	}

	if a.UeSecurityCapability != nil {
		object["ueSecurityCapability"], err = json.Marshal(a.UeSecurityCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueSecurityCapability': %w", err)
		}
	}

	if a.WagfId != nil {
		object["wagfId"], err = json.Marshal(a.WagfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wagfId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MmeCapabilities. Returns the specified
// element and whether it was found
func (a MmeCapabilities) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MmeCapabilities
func (a *MmeCapabilities) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MmeCapabilities to handle AdditionalProperties
func (a *MmeCapabilities) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ethernetSupported"]; found {
		err = json.Unmarshal(raw, &a.EthernetSupported)
		if err != nil {
			return fmt.Errorf("error reading 'ethernetSupported': %w", err)
		}
		delete(object, "ethernetSupported")
	}

	if raw, found := object["nonIpSupported"]; found {
		err = json.Unmarshal(raw, &a.NonIpSupported)
		if err != nil {
			return fmt.Errorf("error reading 'nonIpSupported': %w", err)
		}
		delete(object, "nonIpSupported")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MmeCapabilities to handle AdditionalProperties
func (a MmeCapabilities) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EthernetSupported != nil {
		object["ethernetSupported"], err = json.Marshal(a.EthernetSupported)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethernetSupported': %w", err)
		}
	}

	if a.NonIpSupported != nil {
		object["nonIpSupported"], err = json.Marshal(a.NonIpSupported)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nonIpSupported': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MoExpDataCounter. Returns the specified
// element and whether it was found
func (a MoExpDataCounter) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MoExpDataCounter
func (a *MoExpDataCounter) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MoExpDataCounter to handle AdditionalProperties
func (a *MoExpDataCounter) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["counter"]; found {
		err = json.Unmarshal(raw, &a.Counter)
		if err != nil {
			return fmt.Errorf("error reading 'counter': %w", err)
		}
		delete(object, "counter")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MoExpDataCounter to handle AdditionalProperties
func (a MoExpDataCounter) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["counter"], err = json.Marshal(a.Counter)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'counter': %w", err)
	}

	if a.TimeStamp != nil {
		object["timeStamp"], err = json.Marshal(a.TimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModificationNotification. Returns the specified
// element and whether it was found
func (a ModificationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModificationNotification
func (a *ModificationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModificationNotification to handle AdditionalProperties
func (a *ModificationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifyItems"]; found {
		err = json.Unmarshal(raw, &a.NotifyItems)
		if err != nil {
			return fmt.Errorf("error reading 'notifyItems': %w", err)
		}
		delete(object, "notifyItems")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModificationNotification to handle AdditionalProperties
func (a ModificationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["notifyItems"], err = json.Marshal(a.NotifyItems)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyItems': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MonitoringConfiguration. Returns the specified
// element and whether it was found
func (a MonitoringConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MonitoringConfiguration
func (a *MonitoringConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MonitoringConfiguration to handle AdditionalProperties
func (a *MonitoringConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["associationType"]; found {
		err = json.Unmarshal(raw, &a.AssociationType)
		if err != nil {
			return fmt.Errorf("error reading 'associationType': %w", err)
		}
		delete(object, "associationType")
	}

	if raw, found := object["datalinkReportCfg"]; found {
		err = json.Unmarshal(raw, &a.DatalinkReportCfg)
		if err != nil {
			return fmt.Errorf("error reading 'datalinkReportCfg': %w", err)
		}
		delete(object, "datalinkReportCfg")
	}

	if raw, found := object["eventType"]; found {
		err = json.Unmarshal(raw, &a.EventType)
		if err != nil {
			return fmt.Errorf("error reading 'eventType': %w", err)
		}
		delete(object, "eventType")
	}

	if raw, found := object["idleStatusInd"]; found {
		err = json.Unmarshal(raw, &a.IdleStatusInd)
		if err != nil {
			return fmt.Errorf("error reading 'idleStatusInd': %w", err)
		}
		delete(object, "idleStatusInd")
	}

	if raw, found := object["immediateFlag"]; found {
		err = json.Unmarshal(raw, &a.ImmediateFlag)
		if err != nil {
			return fmt.Errorf("error reading 'immediateFlag': %w", err)
		}
		delete(object, "immediateFlag")
	}

	if raw, found := object["locationReportingConfiguration"]; found {
		err = json.Unmarshal(raw, &a.LocationReportingConfiguration)
		if err != nil {
			return fmt.Errorf("error reading 'locationReportingConfiguration': %w", err)
		}
		delete(object, "locationReportingConfiguration")
	}

	if raw, found := object["lossConnectivityCfg"]; found {
		err = json.Unmarshal(raw, &a.LossConnectivityCfg)
		if err != nil {
			return fmt.Errorf("error reading 'lossConnectivityCfg': %w", err)
		}
		delete(object, "lossConnectivityCfg")
	}

	if raw, found := object["maximumLatency"]; found {
		err = json.Unmarshal(raw, &a.MaximumLatency)
		if err != nil {
			return fmt.Errorf("error reading 'maximumLatency': %w", err)
		}
		delete(object, "maximumLatency")
	}

	if raw, found := object["maximumResponseTime"]; found {
		err = json.Unmarshal(raw, &a.MaximumResponseTime)
		if err != nil {
			return fmt.Errorf("error reading 'maximumResponseTime': %w", err)
		}
		delete(object, "maximumResponseTime")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["pduSessionStatusCfg"]; found {
		err = json.Unmarshal(raw, &a.PduSessionStatusCfg)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionStatusCfg': %w", err)
		}
		delete(object, "pduSessionStatusCfg")
	}

	if raw, found := object["reachabilityForSmsCfg"]; found {
		err = json.Unmarshal(raw, &a.ReachabilityForSmsCfg)
		if err != nil {
			return fmt.Errorf("error reading 'reachabilityForSmsCfg': %w", err)
		}
		delete(object, "reachabilityForSmsCfg")
	}

	if raw, found := object["suggestedPacketNumDl"]; found {
		err = json.Unmarshal(raw, &a.SuggestedPacketNumDl)
		if err != nil {
			return fmt.Errorf("error reading 'suggestedPacketNumDl': %w", err)
		}
		delete(object, "suggestedPacketNumDl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MonitoringConfiguration to handle AdditionalProperties
func (a MonitoringConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	if a.AssociationType != nil {
		object["associationType"], err = json.Marshal(a.AssociationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'associationType': %w", err)
		}
	}

	if a.DatalinkReportCfg != nil {
		object["datalinkReportCfg"], err = json.Marshal(a.DatalinkReportCfg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'datalinkReportCfg': %w", err)
		}
	}

	object["eventType"], err = json.Marshal(a.EventType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventType': %w", err)
	}

	if a.IdleStatusInd != nil {
		object["idleStatusInd"], err = json.Marshal(a.IdleStatusInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'idleStatusInd': %w", err)
		}
	}

	if a.ImmediateFlag != nil {
		object["immediateFlag"], err = json.Marshal(a.ImmediateFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immediateFlag': %w", err)
		}
	}

	if a.LocationReportingConfiguration != nil {
		object["locationReportingConfiguration"], err = json.Marshal(a.LocationReportingConfiguration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationReportingConfiguration': %w", err)
		}
	}

	if a.LossConnectivityCfg != nil {
		object["lossConnectivityCfg"], err = json.Marshal(a.LossConnectivityCfg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lossConnectivityCfg': %w", err)
		}
	}

	if a.MaximumLatency != nil {
		object["maximumLatency"], err = json.Marshal(a.MaximumLatency)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maximumLatency': %w", err)
		}
	}

	if a.MaximumResponseTime != nil {
		object["maximumResponseTime"], err = json.Marshal(a.MaximumResponseTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maximumResponseTime': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	if a.PduSessionStatusCfg != nil {
		object["pduSessionStatusCfg"], err = json.Marshal(a.PduSessionStatusCfg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionStatusCfg': %w", err)
		}
	}

	if a.ReachabilityForSmsCfg != nil {
		object["reachabilityForSmsCfg"], err = json.Marshal(a.ReachabilityForSmsCfg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachabilityForSmsCfg': %w", err)
		}
	}

	if a.SuggestedPacketNumDl != 0 {
		object["suggestedPacketNumDl"], err = json.Marshal(a.SuggestedPacketNumDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suggestedPacketNumDl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MonitoringReport. Returns the specified
// element and whether it was found
func (a MonitoringReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MonitoringReport
func (a *MonitoringReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MonitoringReport to handle AdditionalProperties
func (a *MonitoringReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventType"]; found {
		err = json.Unmarshal(raw, &a.EventType)
		if err != nil {
			return fmt.Errorf("error reading 'eventType': %w", err)
		}
		delete(object, "eventType")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["reachabilityForSmsReport"]; found {
		err = json.Unmarshal(raw, &a.ReachabilityForSmsReport)
		if err != nil {
			return fmt.Errorf("error reading 'reachabilityForSmsReport': %w", err)
		}
		delete(object, "reachabilityForSmsReport")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["report"]; found {
		err = json.Unmarshal(raw, &a.Report)
		if err != nil {
			return fmt.Errorf("error reading 'report': %w", err)
		}
		delete(object, "report")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MonitoringReport to handle AdditionalProperties
func (a MonitoringReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eventType"], err = json.Marshal(a.EventType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventType': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.ReachabilityForSmsReport != nil {
		object["reachabilityForSmsReport"], err = json.Marshal(a.ReachabilityForSmsReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reachabilityForSmsReport': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.Report != nil {
		object["report"], err = json.Marshal(a.Report)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'report': %w", err)
		}
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MtcProvider. Returns the specified
// element and whether it was found
func (a MtcProvider) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MtcProvider
func (a *MtcProvider) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MtcProvider to handle AdditionalProperties
func (a *MtcProvider) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MtcProvider to handle AdditionalProperties
func (a MtcProvider) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1MessageContainer. Returns the specified
// element and whether it was found
func (a N1MessageContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1MessageContainer
func (a *N1MessageContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1MessageContainer to handle AdditionalProperties
func (a *N1MessageContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n1MessageClass"]; found {
		err = json.Unmarshal(raw, &a.N1MessageClass)
		if err != nil {
			return fmt.Errorf("error reading 'n1MessageClass': %w", err)
		}
		delete(object, "n1MessageClass")
	}

	if raw, found := object["n1MessageContent"]; found {
		err = json.Unmarshal(raw, &a.N1MessageContent)
		if err != nil {
			return fmt.Errorf("error reading 'n1MessageContent': %w", err)
		}
		delete(object, "n1MessageContent")
	}

	if raw, found := object["nfId"]; found {
		err = json.Unmarshal(raw, &a.NfId)
		if err != nil {
			return fmt.Errorf("error reading 'nfId': %w", err)
		}
		delete(object, "nfId")
	}

	if raw, found := object["serviceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'serviceInstanceId': %w", err)
		}
		delete(object, "serviceInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1MessageContainer to handle AdditionalProperties
func (a N1MessageContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["n1MessageClass"], err = json.Marshal(a.N1MessageClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n1MessageClass': %w", err)
	}

	object["n1MessageContent"], err = json.Marshal(a.N1MessageContent)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n1MessageContent': %w", err)
	}

	if a.NfId != nil {
		object["nfId"], err = json.Marshal(a.NfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfId': %w", err)
		}
	}

	if a.ServiceInstanceId != nil {
		object["serviceInstanceId"], err = json.Marshal(a.ServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceInstanceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1MessageNotification. Returns the specified
// element and whether it was found
func (a N1MessageNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1MessageNotification
func (a *N1MessageNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1MessageNotification to handle AdditionalProperties
func (a *N1MessageNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cIoT5GSOptimisation"]; found {
		err = json.Unmarshal(raw, &a.CIoT5GSOptimisation)
		if err != nil {
			return fmt.Errorf("error reading 'cIoT5GSOptimisation': %w", err)
		}
		delete(object, "cIoT5GSOptimisation")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["lcsCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.LcsCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'lcsCorrelationId': %w", err)
		}
		delete(object, "lcsCorrelationId")
	}

	if raw, found := object["n1MessageContainer"]; found {
		err = json.Unmarshal(raw, &a.N1MessageContainer)
		if err != nil {
			return fmt.Errorf("error reading 'n1MessageContainer': %w", err)
		}
		delete(object, "n1MessageContainer")
	}

	if raw, found := object["n1NotifySubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.N1NotifySubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'n1NotifySubscriptionId': %w", err)
		}
		delete(object, "n1NotifySubscriptionId")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["newLmfIdentification"]; found {
		err = json.Unmarshal(raw, &a.NewLmfIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'newLmfIdentification': %w", err)
		}
		delete(object, "newLmfIdentification")
	}

	if raw, found := object["registrationCtxtContainer"]; found {
		err = json.Unmarshal(raw, &a.RegistrationCtxtContainer)
		if err != nil {
			return fmt.Errorf("error reading 'registrationCtxtContainer': %w", err)
		}
		delete(object, "registrationCtxtContainer")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1MessageNotification to handle AdditionalProperties
func (a N1MessageNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CIoT5GSOptimisation != nil {
		object["cIoT5GSOptimisation"], err = json.Marshal(a.CIoT5GSOptimisation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cIoT5GSOptimisation': %w", err)
		}
	}

	if a.Ecgi != nil {
		object["ecgi"], err = json.Marshal(a.Ecgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.LcsCorrelationId != nil {
		object["lcsCorrelationId"], err = json.Marshal(a.LcsCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsCorrelationId': %w", err)
		}
	}

	object["n1MessageContainer"], err = json.Marshal(a.N1MessageContainer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n1MessageContainer': %w", err)
	}

	if a.N1NotifySubscriptionId != nil {
		object["n1NotifySubscriptionId"], err = json.Marshal(a.N1NotifySubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1NotifySubscriptionId': %w", err)
		}
	}

	if a.Ncgi != nil {
		object["ncgi"], err = json.Marshal(a.Ncgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
		}
	}

	if a.NewLmfIdentification != nil {
		object["newLmfIdentification"], err = json.Marshal(a.NewLmfIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newLmfIdentification': %w", err)
		}
	}

	if a.RegistrationCtxtContainer != nil {
		object["registrationCtxtContainer"], err = json.Marshal(a.RegistrationCtxtContainer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationCtxtContainer': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1N2MessageTransferError. Returns the specified
// element and whether it was found
func (a N1N2MessageTransferError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1N2MessageTransferError
func (a *N1N2MessageTransferError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1N2MessageTransferError to handle AdditionalProperties
func (a *N1N2MessageTransferError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["errInfo"]; found {
		err = json.Unmarshal(raw, &a.ErrInfo)
		if err != nil {
			return fmt.Errorf("error reading 'errInfo': %w", err)
		}
		delete(object, "errInfo")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1N2MessageTransferError to handle AdditionalProperties
func (a N1N2MessageTransferError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ErrInfo != nil {
		object["errInfo"], err = json.Marshal(a.ErrInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'errInfo': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1N2MessageTransferReqData. Returns the specified
// element and whether it was found
func (a N1N2MessageTransferReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1N2MessageTransferReqData
func (a *N1N2MessageTransferReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1N2MessageTransferReqData to handle AdditionalProperties
func (a *N1N2MessageTransferReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["areaOfValidity"]; found {
		err = json.Unmarshal(raw, &a.AreaOfValidity)
		if err != nil {
			return fmt.Errorf("error reading 'areaOfValidity': %w", err)
		}
		delete(object, "areaOfValidity")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["extBufSupport"]; found {
		err = json.Unmarshal(raw, &a.ExtBufSupport)
		if err != nil {
			return fmt.Errorf("error reading 'extBufSupport': %w", err)
		}
		delete(object, "extBufSupport")
	}

	if raw, found := object["lastMsgIndication"]; found {
		err = json.Unmarshal(raw, &a.LastMsgIndication)
		if err != nil {
			return fmt.Errorf("error reading 'lastMsgIndication': %w", err)
		}
		delete(object, "lastMsgIndication")
	}

	if raw, found := object["lcsCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.LcsCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'lcsCorrelationId': %w", err)
		}
		delete(object, "lcsCorrelationId")
	}

	if raw, found := object["maAcceptedInd"]; found {
		err = json.Unmarshal(raw, &a.MaAcceptedInd)
		if err != nil {
			return fmt.Errorf("error reading 'maAcceptedInd': %w", err)
		}
		delete(object, "maAcceptedInd")
	}

	if raw, found := object["mtData"]; found {
		err = json.Unmarshal(raw, &a.MtData)
		if err != nil {
			return fmt.Errorf("error reading 'mtData': %w", err)
		}
		delete(object, "mtData")
	}

	if raw, found := object["n1MessageContainer"]; found {
		err = json.Unmarshal(raw, &a.N1MessageContainer)
		if err != nil {
			return fmt.Errorf("error reading 'n1MessageContainer': %w", err)
		}
		delete(object, "n1MessageContainer")
	}

	if raw, found := object["n1n2FailureTxfNotifURI"]; found {
		err = json.Unmarshal(raw, &a.N1n2FailureTxfNotifURI)
		if err != nil {
			return fmt.Errorf("error reading 'n1n2FailureTxfNotifURI': %w", err)
		}
		delete(object, "n1n2FailureTxfNotifURI")
	}

	if raw, found := object["n2InfoContainer"]; found {
		err = json.Unmarshal(raw, &a.N2InfoContainer)
		if err != nil {
			return fmt.Errorf("error reading 'n2InfoContainer': %w", err)
		}
		delete(object, "n2InfoContainer")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["ppi"]; found {
		err = json.Unmarshal(raw, &a.Ppi)
		if err != nil {
			return fmt.Errorf("error reading 'ppi': %w", err)
		}
		delete(object, "ppi")
	}

	if raw, found := object["skipInd"]; found {
		err = json.Unmarshal(raw, &a.SkipInd)
		if err != nil {
			return fmt.Errorf("error reading 'skipInd': %w", err)
		}
		delete(object, "skipInd")
	}

	if raw, found := object["smfReallocationInd"]; found {
		err = json.Unmarshal(raw, &a.SmfReallocationInd)
		if err != nil {
			return fmt.Errorf("error reading 'smfReallocationInd': %w", err)
		}
		delete(object, "smfReallocationInd")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetAccess"]; found {
		err = json.Unmarshal(raw, &a.TargetAccess)
		if err != nil {
			return fmt.Errorf("error reading 'targetAccess': %w", err)
		}
		delete(object, "targetAccess")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1N2MessageTransferReqData to handle AdditionalProperties
func (a N1N2MessageTransferReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5qi != nil {
		object["5qi"], err = json.Marshal(a.N5qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5qi': %w", err)
		}
	}

	if a.AreaOfValidity != nil {
		object["areaOfValidity"], err = json.Marshal(a.AreaOfValidity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaOfValidity': %w", err)
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arp': %w", err)
		}
	}

	if a.ExtBufSupport != nil {
		object["extBufSupport"], err = json.Marshal(a.ExtBufSupport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extBufSupport': %w", err)
		}
	}

	if a.LastMsgIndication != nil {
		object["lastMsgIndication"], err = json.Marshal(a.LastMsgIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lastMsgIndication': %w", err)
		}
	}

	if a.LcsCorrelationId != nil {
		object["lcsCorrelationId"], err = json.Marshal(a.LcsCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsCorrelationId': %w", err)
		}
	}

	if a.MaAcceptedInd != nil {
		object["maAcceptedInd"], err = json.Marshal(a.MaAcceptedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maAcceptedInd': %w", err)
		}
	}

	if a.MtData != nil {
		object["mtData"], err = json.Marshal(a.MtData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtData': %w", err)
		}
	}

	if a.N1MessageContainer != nil {
		object["n1MessageContainer"], err = json.Marshal(a.N1MessageContainer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1MessageContainer': %w", err)
		}
	}

	if a.N1n2FailureTxfNotifURI != nil {
		object["n1n2FailureTxfNotifURI"], err = json.Marshal(a.N1n2FailureTxfNotifURI)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1n2FailureTxfNotifURI': %w", err)
		}
	}

	if a.N2InfoContainer != nil {
		object["n2InfoContainer"], err = json.Marshal(a.N2InfoContainer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2InfoContainer': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if a.Ppi != nil {
		object["ppi"], err = json.Marshal(a.Ppi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ppi': %w", err)
		}
	}

	if a.SkipInd != nil {
		object["skipInd"], err = json.Marshal(a.SkipInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'skipInd': %w", err)
		}
	}

	if a.SmfReallocationInd != nil {
		object["smfReallocationInd"], err = json.Marshal(a.SmfReallocationInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfReallocationInd': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.TargetAccess) != 0 {
		object["targetAccess"], err = json.Marshal(a.TargetAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetAccess': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1N2MessageTransferRspData. Returns the specified
// element and whether it was found
func (a N1N2MessageTransferRspData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1N2MessageTransferRspData
func (a *N1N2MessageTransferRspData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1N2MessageTransferRspData to handle AdditionalProperties
func (a *N1N2MessageTransferRspData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1N2MessageTransferRspData to handle AdditionalProperties
func (a N1N2MessageTransferRspData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cause"], err = json.Marshal(a.Cause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cause': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1N2MsgTxfrErrDetail. Returns the specified
// element and whether it was found
func (a N1N2MsgTxfrErrDetail) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1N2MsgTxfrErrDetail
func (a *N1N2MsgTxfrErrDetail) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1N2MsgTxfrErrDetail to handle AdditionalProperties
func (a *N1N2MsgTxfrErrDetail) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["highestPrioArp"]; found {
		err = json.Unmarshal(raw, &a.HighestPrioArp)
		if err != nil {
			return fmt.Errorf("error reading 'highestPrioArp': %w", err)
		}
		delete(object, "highestPrioArp")
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if raw, found := object["retryAfter"]; found {
		err = json.Unmarshal(raw, &a.RetryAfter)
		if err != nil {
			return fmt.Errorf("error reading 'retryAfter': %w", err)
		}
		delete(object, "retryAfter")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1N2MsgTxfrErrDetail to handle AdditionalProperties
func (a N1N2MsgTxfrErrDetail) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.HighestPrioArp != nil {
		object["highestPrioArp"], err = json.Marshal(a.HighestPrioArp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'highestPrioArp': %w", err)
		}
	}

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	if a.RetryAfter != nil {
		object["retryAfter"], err = json.Marshal(a.RetryAfter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'retryAfter': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N1N2MsgTxfrFailureNotification. Returns the specified
// element and whether it was found
func (a N1N2MsgTxfrFailureNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N1N2MsgTxfrFailureNotification
func (a *N1N2MsgTxfrFailureNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N1N2MsgTxfrFailureNotification to handle AdditionalProperties
func (a *N1N2MsgTxfrFailureNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["n1n2MsgDataUri"]; found {
		err = json.Unmarshal(raw, &a.N1n2MsgDataUri)
		if err != nil {
			return fmt.Errorf("error reading 'n1n2MsgDataUri': %w", err)
		}
		delete(object, "n1n2MsgDataUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N1N2MsgTxfrFailureNotification to handle AdditionalProperties
func (a N1N2MsgTxfrFailureNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cause"], err = json.Marshal(a.Cause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cause': %w", err)
	}

	object["n1n2MsgDataUri"], err = json.Marshal(a.N1n2MsgDataUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n1n2MsgDataUri': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InfoContainer. Returns the specified
// element and whether it was found
func (a N2InfoContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InfoContainer
func (a *N2InfoContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InfoContainer to handle AdditionalProperties
func (a *N2InfoContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n2InformationClass"]; found {
		err = json.Unmarshal(raw, &a.N2InformationClass)
		if err != nil {
			return fmt.Errorf("error reading 'n2InformationClass': %w", err)
		}
		delete(object, "n2InformationClass")
	}

	if raw, found := object["nrppaInfo"]; found {
		err = json.Unmarshal(raw, &a.NrppaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nrppaInfo': %w", err)
		}
		delete(object, "nrppaInfo")
	}

	if raw, found := object["pwsInfo"]; found {
		err = json.Unmarshal(raw, &a.PwsInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pwsInfo': %w", err)
		}
		delete(object, "pwsInfo")
	}

	if raw, found := object["ranInfo"]; found {
		err = json.Unmarshal(raw, &a.RanInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ranInfo': %w", err)
		}
		delete(object, "ranInfo")
	}

	if raw, found := object["smInfo"]; found {
		err = json.Unmarshal(raw, &a.SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smInfo': %w", err)
		}
		delete(object, "smInfo")
	}

	if raw, found := object["v2xInfo"]; found {
		err = json.Unmarshal(raw, &a.V2xInfo)
		if err != nil {
			return fmt.Errorf("error reading 'v2xInfo': %w", err)
		}
		delete(object, "v2xInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InfoContainer to handle AdditionalProperties
func (a N2InfoContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["n2InformationClass"], err = json.Marshal(a.N2InformationClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n2InformationClass': %w", err)
	}

	if a.NrppaInfo != nil {
		object["nrppaInfo"], err = json.Marshal(a.NrppaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrppaInfo': %w", err)
		}
	}

	if a.PwsInfo != nil {
		object["pwsInfo"], err = json.Marshal(a.PwsInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pwsInfo': %w", err)
		}
	}

	if a.RanInfo != nil {
		object["ranInfo"], err = json.Marshal(a.RanInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranInfo': %w", err)
		}
	}

	if a.SmInfo != nil {
		object["smInfo"], err = json.Marshal(a.SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smInfo': %w", err)
		}
	}

	if a.V2xInfo != nil {
		object["v2xInfo"], err = json.Marshal(a.V2xInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'v2xInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InfoContent. Returns the specified
// element and whether it was found
func (a N2InfoContent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InfoContent
func (a *N2InfoContent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InfoContent to handle AdditionalProperties
func (a *N2InfoContent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ngapData"]; found {
		err = json.Unmarshal(raw, &a.NgapData)
		if err != nil {
			return fmt.Errorf("error reading 'ngapData': %w", err)
		}
		delete(object, "ngapData")
	}

	if raw, found := object["ngapIeType"]; found {
		err = json.Unmarshal(raw, &a.NgapIeType)
		if err != nil {
			return fmt.Errorf("error reading 'ngapIeType': %w", err)
		}
		delete(object, "ngapIeType")
	}

	if raw, found := object["ngapMessageType"]; found {
		err = json.Unmarshal(raw, &a.NgapMessageType)
		if err != nil {
			return fmt.Errorf("error reading 'ngapMessageType': %w", err)
		}
		delete(object, "ngapMessageType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InfoContent to handle AdditionalProperties
func (a N2InfoContent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ngapData"], err = json.Marshal(a.NgapData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ngapData': %w", err)
	}

	if a.NgapIeType != nil {
		object["ngapIeType"], err = json.Marshal(a.NgapIeType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngapIeType': %w", err)
		}
	}

	if a.NgapMessageType != nil {
		object["ngapMessageType"], err = json.Marshal(a.NgapMessageType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngapMessageType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InfoNotificationRspData. Returns the specified
// element and whether it was found
func (a N2InfoNotificationRspData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InfoNotificationRspData
func (a *N2InfoNotificationRspData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InfoNotificationRspData to handle AdditionalProperties
func (a *N2InfoNotificationRspData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["secRatDataUsageList"]; found {
		err = json.Unmarshal(raw, &a.SecRatDataUsageList)
		if err != nil {
			return fmt.Errorf("error reading 'secRatDataUsageList': %w", err)
		}
		delete(object, "secRatDataUsageList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InfoNotificationRspData to handle AdditionalProperties
func (a N2InfoNotificationRspData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SecRatDataUsageList) != 0 {
		object["secRatDataUsageList"], err = json.Marshal(a.SecRatDataUsageList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secRatDataUsageList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InformationNotification. Returns the specified
// element and whether it was found
func (a N2InformationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InformationNotification
func (a *N2InformationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InformationNotification to handle AdditionalProperties
func (a *N2InformationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anN2IPv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AnN2IPv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anN2IPv4Addr': %w", err)
		}
		delete(object, "anN2IPv4Addr")
	}

	if raw, found := object["anN2IPv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AnN2IPv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anN2IPv6Addr': %w", err)
		}
		delete(object, "anN2IPv6Addr")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["initialAmfName"]; found {
		err = json.Unmarshal(raw, &a.InitialAmfName)
		if err != nil {
			return fmt.Errorf("error reading 'initialAmfName': %w", err)
		}
		delete(object, "initialAmfName")
	}

	if raw, found := object["lcsCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.LcsCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'lcsCorrelationId': %w", err)
		}
		delete(object, "lcsCorrelationId")
	}

	if raw, found := object["n2InfoContainer"]; found {
		err = json.Unmarshal(raw, &a.N2InfoContainer)
		if err != nil {
			return fmt.Errorf("error reading 'n2InfoContainer': %w", err)
		}
		delete(object, "n2InfoContainer")
	}

	if raw, found := object["n2NotifySubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.N2NotifySubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'n2NotifySubscriptionId': %w", err)
		}
		delete(object, "n2NotifySubscriptionId")
	}

	if raw, found := object["notifyReason"]; found {
		err = json.Unmarshal(raw, &a.NotifyReason)
		if err != nil {
			return fmt.Errorf("error reading 'notifyReason': %w", err)
		}
		delete(object, "notifyReason")
	}

	if raw, found := object["notifySourceNgRan"]; found {
		err = json.Unmarshal(raw, &a.NotifySourceNgRan)
		if err != nil {
			return fmt.Errorf("error reading 'notifySourceNgRan': %w", err)
		}
		delete(object, "notifySourceNgRan")
	}

	if raw, found := object["ranNodeId"]; found {
		err = json.Unmarshal(raw, &a.RanNodeId)
		if err != nil {
			return fmt.Errorf("error reading 'ranNodeId': %w", err)
		}
		delete(object, "ranNodeId")
	}

	if raw, found := object["smfChangeInfoList"]; found {
		err = json.Unmarshal(raw, &a.SmfChangeInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'smfChangeInfoList': %w", err)
		}
		delete(object, "smfChangeInfoList")
	}

	if raw, found := object["toReleaseSessionList"]; found {
		err = json.Unmarshal(raw, &a.ToReleaseSessionList)
		if err != nil {
			return fmt.Errorf("error reading 'toReleaseSessionList': %w", err)
		}
		delete(object, "toReleaseSessionList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InformationNotification to handle AdditionalProperties
func (a N2InformationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnN2IPv4Addr) != 0 {
		object["anN2IPv4Addr"], err = json.Marshal(a.AnN2IPv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anN2IPv4Addr': %w", err)
		}
	}

	if a.AnN2IPv6Addr != nil {
		object["anN2IPv6Addr"], err = json.Marshal(a.AnN2IPv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anN2IPv6Addr': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.InitialAmfName != nil {
		object["initialAmfName"], err = json.Marshal(a.InitialAmfName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'initialAmfName': %w", err)
		}
	}

	if a.LcsCorrelationId != nil {
		object["lcsCorrelationId"], err = json.Marshal(a.LcsCorrelationId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsCorrelationId': %w", err)
		}
	}

	if a.N2InfoContainer != nil {
		object["n2InfoContainer"], err = json.Marshal(a.N2InfoContainer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2InfoContainer': %w", err)
		}
	}

	object["n2NotifySubscriptionId"], err = json.Marshal(a.N2NotifySubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n2NotifySubscriptionId': %w", err)
	}

	if a.NotifyReason != nil {
		object["notifyReason"], err = json.Marshal(a.NotifyReason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyReason': %w", err)
		}
	}

	if a.NotifySourceNgRan != nil {
		object["notifySourceNgRan"], err = json.Marshal(a.NotifySourceNgRan)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifySourceNgRan': %w", err)
		}
	}

	if a.RanNodeId != nil {
		object["ranNodeId"], err = json.Marshal(a.RanNodeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranNodeId': %w", err)
		}
	}

	if len(a.SmfChangeInfoList) != 0 {
		object["smfChangeInfoList"], err = json.Marshal(a.SmfChangeInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfChangeInfoList': %w", err)
		}
	}

	if len(a.ToReleaseSessionList) != 0 {
		object["toReleaseSessionList"], err = json.Marshal(a.ToReleaseSessionList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'toReleaseSessionList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InformationTransferError. Returns the specified
// element and whether it was found
func (a N2InformationTransferError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InformationTransferError
func (a *N2InformationTransferError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InformationTransferError to handle AdditionalProperties
func (a *N2InformationTransferError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["pwsErrorInfo"]; found {
		err = json.Unmarshal(raw, &a.PwsErrorInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pwsErrorInfo': %w", err)
		}
		delete(object, "pwsErrorInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InformationTransferError to handle AdditionalProperties
func (a N2InformationTransferError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.PwsErrorInfo != nil {
		object["pwsErrorInfo"], err = json.Marshal(a.PwsErrorInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pwsErrorInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InformationTransferReqData. Returns the specified
// element and whether it was found
func (a N2InformationTransferReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InformationTransferReqData
func (a *N2InformationTransferReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InformationTransferReqData to handle AdditionalProperties
func (a *N2InformationTransferReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["globalRanNodeList"]; found {
		err = json.Unmarshal(raw, &a.GlobalRanNodeList)
		if err != nil {
			return fmt.Errorf("error reading 'globalRanNodeList': %w", err)
		}
		delete(object, "globalRanNodeList")
	}

	if raw, found := object["n2Information"]; found {
		err = json.Unmarshal(raw, &a.N2Information)
		if err != nil {
			return fmt.Errorf("error reading 'n2Information': %w", err)
		}
		delete(object, "n2Information")
	}

	if raw, found := object["ratSelector"]; found {
		err = json.Unmarshal(raw, &a.RatSelector)
		if err != nil {
			return fmt.Errorf("error reading 'ratSelector': %w", err)
		}
		delete(object, "ratSelector")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InformationTransferReqData to handle AdditionalProperties
func (a N2InformationTransferReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GlobalRanNodeList) != 0 {
		object["globalRanNodeList"], err = json.Marshal(a.GlobalRanNodeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalRanNodeList': %w", err)
		}
	}

	object["n2Information"], err = json.Marshal(a.N2Information)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n2Information': %w", err)
	}

	if a.RatSelector != nil {
		object["ratSelector"], err = json.Marshal(a.RatSelector)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratSelector': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InformationTransferRspData. Returns the specified
// element and whether it was found
func (a N2InformationTransferRspData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InformationTransferRspData
func (a *N2InformationTransferRspData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InformationTransferRspData to handle AdditionalProperties
func (a *N2InformationTransferRspData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pwsRspData"]; found {
		err = json.Unmarshal(raw, &a.PwsRspData)
		if err != nil {
			return fmt.Errorf("error reading 'pwsRspData': %w", err)
		}
		delete(object, "pwsRspData")
	}

	if raw, found := object["result"]; found {
		err = json.Unmarshal(raw, &a.Result)
		if err != nil {
			return fmt.Errorf("error reading 'result': %w", err)
		}
		delete(object, "result")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InformationTransferRspData to handle AdditionalProperties
func (a N2InformationTransferRspData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PwsRspData != nil {
		object["pwsRspData"], err = json.Marshal(a.PwsRspData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pwsRspData': %w", err)
		}
	}

	object["result"], err = json.Marshal(a.Result)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'result': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2InterfaceAmfInfo. Returns the specified
// element and whether it was found
func (a N2InterfaceAmfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2InterfaceAmfInfo
func (a *N2InterfaceAmfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2InterfaceAmfInfo to handle AdditionalProperties
func (a *N2InterfaceAmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfName"]; found {
		err = json.Unmarshal(raw, &a.AmfName)
		if err != nil {
			return fmt.Errorf("error reading 'amfName': %w", err)
		}
		delete(object, "amfName")
	}

	if raw, found := object["ipv4EndpointAddress"]; found {
		err = json.Unmarshal(raw, &a.Ipv4EndpointAddress)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4EndpointAddress': %w", err)
		}
		delete(object, "ipv4EndpointAddress")
	}

	if raw, found := object["ipv6EndpointAddress"]; found {
		err = json.Unmarshal(raw, &a.Ipv6EndpointAddress)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6EndpointAddress': %w", err)
		}
		delete(object, "ipv6EndpointAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2InterfaceAmfInfo to handle AdditionalProperties
func (a N2InterfaceAmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfName != nil {
		object["amfName"], err = json.Marshal(a.AmfName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfName': %w", err)
		}
	}

	if len(a.Ipv4EndpointAddress) != 0 {
		object["ipv4EndpointAddress"], err = json.Marshal(a.Ipv4EndpointAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4EndpointAddress': %w", err)
		}
	}

	if len(a.Ipv6EndpointAddress) != 0 {
		object["ipv6EndpointAddress"], err = json.Marshal(a.Ipv6EndpointAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6EndpointAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2RanInformation. Returns the specified
// element and whether it was found
func (a N2RanInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2RanInformation
func (a *N2RanInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2RanInformation to handle AdditionalProperties
func (a *N2RanInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n2InfoContent"]; found {
		err = json.Unmarshal(raw, &a.N2InfoContent)
		if err != nil {
			return fmt.Errorf("error reading 'n2InfoContent': %w", err)
		}
		delete(object, "n2InfoContent")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2RanInformation to handle AdditionalProperties
func (a N2RanInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["n2InfoContent"], err = json.Marshal(a.N2InfoContent)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n2InfoContent': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N2SmInformation. Returns the specified
// element and whether it was found
func (a N2SmInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N2SmInformation
func (a *N2SmInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N2SmInformation to handle AdditionalProperties
func (a *N2SmInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["homePlmnSnssai"]; found {
		err = json.Unmarshal(raw, &a.HomePlmnSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'homePlmnSnssai': %w", err)
		}
		delete(object, "homePlmnSnssai")
	}

	if raw, found := object["iwkSnssai"]; found {
		err = json.Unmarshal(raw, &a.IwkSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'iwkSnssai': %w", err)
		}
		delete(object, "iwkSnssai")
	}

	if raw, found := object["n2InfoContent"]; found {
		err = json.Unmarshal(raw, &a.N2InfoContent)
		if err != nil {
			return fmt.Errorf("error reading 'n2InfoContent': %w", err)
		}
		delete(object, "n2InfoContent")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["subjectToHo"]; found {
		err = json.Unmarshal(raw, &a.SubjectToHo)
		if err != nil {
			return fmt.Errorf("error reading 'subjectToHo': %w", err)
		}
		delete(object, "subjectToHo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N2SmInformation to handle AdditionalProperties
func (a N2SmInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.HomePlmnSnssai != nil {
		object["homePlmnSnssai"], err = json.Marshal(a.HomePlmnSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'homePlmnSnssai': %w", err)
		}
	}

	if a.IwkSnssai != nil {
		object["iwkSnssai"], err = json.Marshal(a.IwkSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iwkSnssai': %w", err)
		}
	}

	if a.N2InfoContent != nil {
		object["n2InfoContent"], err = json.Marshal(a.N2InfoContent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2InfoContent': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.SubjectToHo != nil {
		object["subjectToHo"], err = json.Marshal(a.SubjectToHo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subjectToHo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N3gaLocation. Returns the specified
// element and whether it was found
func (a N3gaLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N3gaLocation
func (a *N3gaLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N3gaLocation to handle AdditionalProperties
func (a *N3gaLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gci"]; found {
		err = json.Unmarshal(raw, &a.Gci)
		if err != nil {
			return fmt.Errorf("error reading 'gci': %w", err)
		}
		delete(object, "gci")
	}

	if raw, found := object["gli"]; found {
		err = json.Unmarshal(raw, &a.Gli)
		if err != nil {
			return fmt.Errorf("error reading 'gli': %w", err)
		}
		delete(object, "gli")
	}

	if raw, found := object["hfcNodeId"]; found {
		err = json.Unmarshal(raw, &a.HfcNodeId)
		if err != nil {
			return fmt.Errorf("error reading 'hfcNodeId': %w", err)
		}
		delete(object, "hfcNodeId")
	}

	if raw, found := object["n3IwfId"]; found {
		err = json.Unmarshal(raw, &a.N3IwfId)
		if err != nil {
			return fmt.Errorf("error reading 'n3IwfId': %w", err)
		}
		delete(object, "n3IwfId")
	}

	if raw, found := object["n3gppTai"]; found {
		err = json.Unmarshal(raw, &a.N3gppTai)
		if err != nil {
			return fmt.Errorf("error reading 'n3gppTai': %w", err)
		}
		delete(object, "n3gppTai")
	}

	if raw, found := object["portNumber"]; found {
		err = json.Unmarshal(raw, &a.PortNumber)
		if err != nil {
			return fmt.Errorf("error reading 'portNumber': %w", err)
		}
		delete(object, "portNumber")
	}

	if raw, found := object["protocol"]; found {
		err = json.Unmarshal(raw, &a.Protocol)
		if err != nil {
			return fmt.Errorf("error reading 'protocol': %w", err)
		}
		delete(object, "protocol")
	}

	if raw, found := object["tnapId"]; found {
		err = json.Unmarshal(raw, &a.TnapId)
		if err != nil {
			return fmt.Errorf("error reading 'tnapId': %w", err)
		}
		delete(object, "tnapId")
	}

	if raw, found := object["twapId"]; found {
		err = json.Unmarshal(raw, &a.TwapId)
		if err != nil {
			return fmt.Errorf("error reading 'twapId': %w", err)
		}
		delete(object, "twapId")
	}

	if raw, found := object["ueIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4Addr': %w", err)
		}
		delete(object, "ueIpv4Addr")
	}

	if raw, found := object["ueIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Addr': %w", err)
		}
		delete(object, "ueIpv6Addr")
	}

	if raw, found := object["w5gbanLineType"]; found {
		err = json.Unmarshal(raw, &a.W5gbanLineType)
		if err != nil {
			return fmt.Errorf("error reading 'w5gbanLineType': %w", err)
		}
		delete(object, "w5gbanLineType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N3gaLocation to handle AdditionalProperties
func (a N3gaLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Gci != nil {
		object["gci"], err = json.Marshal(a.Gci)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gci': %w", err)
		}
	}

	if a.Gli != nil {
		object["gli"], err = json.Marshal(a.Gli)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gli': %w", err)
		}
	}

	if a.HfcNodeId != nil {
		object["hfcNodeId"], err = json.Marshal(a.HfcNodeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hfcNodeId': %w", err)
		}
	}

	if len(a.N3IwfId) != 0 {
		object["n3IwfId"], err = json.Marshal(a.N3IwfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3IwfId': %w", err)
		}
	}

	if a.N3gppTai != nil {
		object["n3gppTai"], err = json.Marshal(a.N3gppTai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3gppTai': %w", err)
		}
	}

	if a.PortNumber != nil {
		object["portNumber"], err = json.Marshal(a.PortNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'portNumber': %w", err)
		}
	}

	if a.Protocol != nil {
		object["protocol"], err = json.Marshal(a.Protocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'protocol': %w", err)
		}
	}

	if a.TnapId != nil {
		object["tnapId"], err = json.Marshal(a.TnapId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tnapId': %w", err)
		}
	}

	if a.TwapId != nil {
		object["twapId"], err = json.Marshal(a.TwapId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'twapId': %w", err)
		}
	}

	if len(a.UeIpv4Addr) != 0 {
		object["ueIpv4Addr"], err = json.Marshal(a.UeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4Addr': %w", err)
		}
	}

	if a.UeIpv6Addr != nil {
		object["ueIpv6Addr"], err = json.Marshal(a.UeIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Addr': %w", err)
		}
	}

	if a.W5gbanLineType != nil {
		object["w5gbanLineType"], err = json.Marshal(a.W5gbanLineType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'w5gbanLineType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N4Information. Returns the specified
// element and whether it was found
func (a N4Information) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N4Information
func (a *N4Information) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N4Information to handle AdditionalProperties
func (a *N4Information) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n4DnaiInfo"]; found {
		err = json.Unmarshal(raw, &a.N4DnaiInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n4DnaiInfo': %w", err)
		}
		delete(object, "n4DnaiInfo")
	}

	if raw, found := object["n4MessagePayload"]; found {
		err = json.Unmarshal(raw, &a.N4MessagePayload)
		if err != nil {
			return fmt.Errorf("error reading 'n4MessagePayload': %w", err)
		}
		delete(object, "n4MessagePayload")
	}

	if raw, found := object["n4MessageType"]; found {
		err = json.Unmarshal(raw, &a.N4MessageType)
		if err != nil {
			return fmt.Errorf("error reading 'n4MessageType': %w", err)
		}
		delete(object, "n4MessageType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N4Information to handle AdditionalProperties
func (a N4Information) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N4DnaiInfo != nil {
		object["n4DnaiInfo"], err = json.Marshal(a.N4DnaiInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4DnaiInfo': %w", err)
		}
	}

	object["n4MessagePayload"], err = json.Marshal(a.N4MessagePayload)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n4MessagePayload': %w", err)
	}

	object["n4MessageType"], err = json.Marshal(a.N4MessageType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n4MessageType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NFDiscoveryNFProfile. Returns the specified
// element and whether it was found
func (a NFDiscoveryNFProfile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NFDiscoveryNFProfile
func (a *NFDiscoveryNFProfile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NFDiscoveryNFProfile to handle AdditionalProperties
func (a *NFDiscoveryNFProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfInfo"]; found {
		err = json.Unmarshal(raw, &a.AmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'amfInfo': %w", err)
		}
		delete(object, "amfInfo")
	}

	if raw, found := object["amfInfoList"]; found {
		err = json.Unmarshal(raw, &a.AmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'amfInfoList': %w", err)
		}
		delete(object, "amfInfoList")
	}

	if raw, found := object["ausfInfo"]; found {
		err = json.Unmarshal(raw, &a.AusfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInfo': %w", err)
		}
		delete(object, "ausfInfo")
	}

	if raw, found := object["ausfInfoList"]; found {
		err = json.Unmarshal(raw, &a.AusfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInfoList': %w", err)
		}
		delete(object, "ausfInfoList")
	}

	if raw, found := object["bsfInfo"]; found {
		err = json.Unmarshal(raw, &a.BsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'bsfInfo': %w", err)
		}
		delete(object, "bsfInfo")
	}

	if raw, found := object["bsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.BsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'bsfInfoList': %w", err)
		}
		delete(object, "bsfInfoList")
	}

	if raw, found := object["capacity"]; found {
		err = json.Unmarshal(raw, &a.Capacity)
		if err != nil {
			return fmt.Errorf("error reading 'capacity': %w", err)
		}
		delete(object, "capacity")
	}

	if raw, found := object["chfInfo"]; found {
		err = json.Unmarshal(raw, &a.ChfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfo': %w", err)
		}
		delete(object, "chfInfo")
	}

	if raw, found := object["chfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ChfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfoList': %w", err)
		}
		delete(object, "chfInfoList")
	}

	if raw, found := object["customInfo"]; found {
		err = json.Unmarshal(raw, &a.CustomInfo)
		if err != nil {
			return fmt.Errorf("error reading 'customInfo': %w", err)
		}
		delete(object, "customInfo")
	}

	if raw, found := object["defaultNotificationSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.DefaultNotificationSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'defaultNotificationSubscriptions': %w", err)
		}
		delete(object, "defaultNotificationSubscriptions")
	}

	if raw, found := object["fqdn"]; found {
		err = json.Unmarshal(raw, &a.Fqdn)
		if err != nil {
			return fmt.Errorf("error reading 'fqdn': %w", err)
		}
		delete(object, "fqdn")
	}

	if raw, found := object["gmlcInfo"]; found {
		err = json.Unmarshal(raw, &a.GmlcInfo)
		if err != nil {
			return fmt.Errorf("error reading 'gmlcInfo': %w", err)
		}
		delete(object, "gmlcInfo")
	}

	if raw, found := object["hssInfoList"]; found {
		err = json.Unmarshal(raw, &a.HssInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'hssInfoList': %w", err)
		}
		delete(object, "hssInfoList")
	}

	if raw, found := object["ipv4Addresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addresses': %w", err)
		}
		delete(object, "ipv4Addresses")
	}

	if raw, found := object["ipv6Addresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addresses': %w", err)
		}
		delete(object, "ipv6Addresses")
	}

	if raw, found := object["lcHSupportInd"]; found {
		err = json.Unmarshal(raw, &a.LcHSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'lcHSupportInd': %w", err)
		}
		delete(object, "lcHSupportInd")
	}

	if raw, found := object["lmfInfo"]; found {
		err = json.Unmarshal(raw, &a.LmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'lmfInfo': %w", err)
		}
		delete(object, "lmfInfo")
	}

	if raw, found := object["load"]; found {
		err = json.Unmarshal(raw, &a.Load)
		if err != nil {
			return fmt.Errorf("error reading 'load': %w", err)
		}
		delete(object, "load")
	}

	if raw, found := object["loadTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.LoadTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'loadTimeStamp': %w", err)
		}
		delete(object, "loadTimeStamp")
	}

	if raw, found := object["locality"]; found {
		err = json.Unmarshal(raw, &a.Locality)
		if err != nil {
			return fmt.Errorf("error reading 'locality': %w", err)
		}
		delete(object, "locality")
	}

	if raw, found := object["nefInfo"]; found {
		err = json.Unmarshal(raw, &a.NefInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nefInfo': %w", err)
		}
		delete(object, "nefInfo")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["nfInstanceName"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceName)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceName': %w", err)
		}
		delete(object, "nfInstanceName")
	}

	if raw, found := object["nfServiceList"]; found {
		err = json.Unmarshal(raw, &a.NfServiceList)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceList': %w", err)
		}
		delete(object, "nfServiceList")
	}

	if raw, found := object["nfServicePersistence"]; found {
		err = json.Unmarshal(raw, &a.NfServicePersistence)
		if err != nil {
			return fmt.Errorf("error reading 'nfServicePersistence': %w", err)
		}
		delete(object, "nfServicePersistence")
	}

	if raw, found := object["nfServices"]; found {
		err = json.Unmarshal(raw, &a.NfServices)
		if err != nil {
			return fmt.Errorf("error reading 'nfServices': %w", err)
		}
		delete(object, "nfServices")
	}

	if raw, found := object["nfSetIdList"]; found {
		err = json.Unmarshal(raw, &a.NfSetIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetIdList': %w", err)
		}
		delete(object, "nfSetIdList")
	}

	if raw, found := object["nfSetRecoveryTimeList"]; found {
		err = json.Unmarshal(raw, &a.NfSetRecoveryTimeList)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetRecoveryTimeList': %w", err)
		}
		delete(object, "nfSetRecoveryTimeList")
	}

	if raw, found := object["nfStatus"]; found {
		err = json.Unmarshal(raw, &a.NfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'nfStatus': %w", err)
		}
		delete(object, "nfStatus")
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if raw, found := object["nsiList"]; found {
		err = json.Unmarshal(raw, &a.NsiList)
		if err != nil {
			return fmt.Errorf("error reading 'nsiList': %w", err)
		}
		delete(object, "nsiList")
	}

	if raw, found := object["nwdafInfo"]; found {
		err = json.Unmarshal(raw, &a.NwdafInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwdafInfo': %w", err)
		}
		delete(object, "nwdafInfo")
	}

	if raw, found := object["olcHSupportInd"]; found {
		err = json.Unmarshal(raw, &a.OlcHSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'olcHSupportInd': %w", err)
		}
		delete(object, "olcHSupportInd")
	}

	if raw, found := object["pcfInfo"]; found {
		err = json.Unmarshal(raw, &a.PcfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pcfInfo': %w", err)
		}
		delete(object, "pcfInfo")
	}

	if raw, found := object["pcfInfoList"]; found {
		err = json.Unmarshal(raw, &a.PcfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'pcfInfoList': %w", err)
		}
		delete(object, "pcfInfoList")
	}

	if raw, found := object["pcscfInfoList"]; found {
		err = json.Unmarshal(raw, &a.PcscfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfInfoList': %w", err)
		}
		delete(object, "pcscfInfoList")
	}

	if raw, found := object["perPlmnSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.PerPlmnSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'perPlmnSnssaiList': %w", err)
		}
		delete(object, "perPlmnSnssaiList")
	}

	if raw, found := object["plmnList"]; found {
		err = json.Unmarshal(raw, &a.PlmnList)
		if err != nil {
			return fmt.Errorf("error reading 'plmnList': %w", err)
		}
		delete(object, "plmnList")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["sNssais"]; found {
		err = json.Unmarshal(raw, &a.SNssais)
		if err != nil {
			return fmt.Errorf("error reading 'sNssais': %w", err)
		}
		delete(object, "sNssais")
	}

	if raw, found := object["scpDomains"]; found {
		err = json.Unmarshal(raw, &a.ScpDomains)
		if err != nil {
			return fmt.Errorf("error reading 'scpDomains': %w", err)
		}
		delete(object, "scpDomains")
	}

	if raw, found := object["scpInfo"]; found {
		err = json.Unmarshal(raw, &a.ScpInfo)
		if err != nil {
			return fmt.Errorf("error reading 'scpInfo': %w", err)
		}
		delete(object, "scpInfo")
	}

	if raw, found := object["serviceSetRecoveryTimeList"]; found {
		err = json.Unmarshal(raw, &a.ServiceSetRecoveryTimeList)
		if err != nil {
			return fmt.Errorf("error reading 'serviceSetRecoveryTimeList': %w", err)
		}
		delete(object, "serviceSetRecoveryTimeList")
	}

	if raw, found := object["servingScope"]; found {
		err = json.Unmarshal(raw, &a.ServingScope)
		if err != nil {
			return fmt.Errorf("error reading 'servingScope': %w", err)
		}
		delete(object, "servingScope")
	}

	if raw, found := object["smfInfo"]; found {
		err = json.Unmarshal(raw, &a.SmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smfInfo': %w", err)
		}
		delete(object, "smfInfo")
	}

	if raw, found := object["smfInfoList"]; found {
		err = json.Unmarshal(raw, &a.SmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'smfInfoList': %w", err)
		}
		delete(object, "smfInfoList")
	}

	if raw, found := object["snpnList"]; found {
		err = json.Unmarshal(raw, &a.SnpnList)
		if err != nil {
			return fmt.Errorf("error reading 'snpnList': %w", err)
		}
		delete(object, "snpnList")
	}

	if raw, found := object["udmInfo"]; found {
		err = json.Unmarshal(raw, &a.UdmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udmInfo': %w", err)
		}
		delete(object, "udmInfo")
	}

	if raw, found := object["udmInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udmInfoList': %w", err)
		}
		delete(object, "udmInfoList")
	}

	if raw, found := object["udrInfo"]; found {
		err = json.Unmarshal(raw, &a.UdrInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udrInfo': %w", err)
		}
		delete(object, "udrInfo")
	}

	if raw, found := object["udrInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdrInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udrInfoList': %w", err)
		}
		delete(object, "udrInfoList")
	}

	if raw, found := object["udsfInfo"]; found {
		err = json.Unmarshal(raw, &a.UdsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udsfInfo': %w", err)
		}
		delete(object, "udsfInfo")
	}

	if raw, found := object["udsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udsfInfoList': %w", err)
		}
		delete(object, "udsfInfoList")
	}

	if raw, found := object["upfInfo"]; found {
		err = json.Unmarshal(raw, &a.UpfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upfInfo': %w", err)
		}
		delete(object, "upfInfo")
	}

	if raw, found := object["upfInfoList"]; found {
		err = json.Unmarshal(raw, &a.UpfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'upfInfoList': %w", err)
		}
		delete(object, "upfInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NFDiscoveryNFProfile to handle AdditionalProperties
func (a NFDiscoveryNFProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfInfo != nil {
		object["amfInfo"], err = json.Marshal(a.AmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfInfo': %w", err)
		}
	}

	if a.AmfInfoList != nil {
		object["amfInfoList"], err = json.Marshal(a.AmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfInfoList': %w", err)
		}
	}

	if a.AusfInfo != nil {
		object["ausfInfo"], err = json.Marshal(a.AusfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ausfInfo': %w", err)
		}
	}

	if a.AusfInfoList != nil {
		object["ausfInfoList"], err = json.Marshal(a.AusfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ausfInfoList': %w", err)
		}
	}

	if a.BsfInfo != nil {
		object["bsfInfo"], err = json.Marshal(a.BsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bsfInfo': %w", err)
		}
	}

	if a.BsfInfoList != nil {
		object["bsfInfoList"], err = json.Marshal(a.BsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bsfInfoList': %w", err)
		}
	}

	if a.Capacity != nil {
		object["capacity"], err = json.Marshal(a.Capacity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'capacity': %w", err)
		}
	}

	if a.ChfInfo != nil {
		object["chfInfo"], err = json.Marshal(a.ChfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfo': %w", err)
		}
	}

	if a.ChfInfoList != nil {
		object["chfInfoList"], err = json.Marshal(a.ChfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfoList': %w", err)
		}
	}

	if a.CustomInfo != nil {
		object["customInfo"], err = json.Marshal(a.CustomInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'customInfo': %w", err)
		}
	}

	if a.DefaultNotificationSubscriptions != nil {
		object["defaultNotificationSubscriptions"], err = json.Marshal(a.DefaultNotificationSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultNotificationSubscriptions': %w", err)
		}
	}

	if a.Fqdn != nil {
		object["fqdn"], err = json.Marshal(a.Fqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fqdn': %w", err)
		}
	}

	if a.GmlcInfo != nil {
		object["gmlcInfo"], err = json.Marshal(a.GmlcInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gmlcInfo': %w", err)
		}
	}

	if a.HssInfoList != nil {
		object["hssInfoList"], err = json.Marshal(a.HssInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hssInfoList': %w", err)
		}
	}

	if len(a.Ipv4Addresses) != 0 {
		object["ipv4Addresses"], err = json.Marshal(a.Ipv4Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addresses': %w", err)
		}
	}

	if len(a.Ipv6Addresses) != 0 {
		object["ipv6Addresses"], err = json.Marshal(a.Ipv6Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addresses': %w", err)
		}
	}

	if a.LcHSupportInd != nil {
		object["lcHSupportInd"], err = json.Marshal(a.LcHSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcHSupportInd': %w", err)
		}
	}

	if a.LmfInfo != nil {
		object["lmfInfo"], err = json.Marshal(a.LmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lmfInfo': %w", err)
		}
	}

	if a.Load != nil {
		object["load"], err = json.Marshal(a.Load)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'load': %w", err)
		}
	}

	if a.LoadTimeStamp != nil {
		object["loadTimeStamp"], err = json.Marshal(a.LoadTimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loadTimeStamp': %w", err)
		}
	}

	if a.Locality != nil {
		object["locality"], err = json.Marshal(a.Locality)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locality': %w", err)
		}
	}

	if a.NefInfo != nil {
		object["nefInfo"], err = json.Marshal(a.NefInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefInfo': %w", err)
		}
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.NfInstanceName != nil {
		object["nfInstanceName"], err = json.Marshal(a.NfInstanceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfInstanceName': %w", err)
		}
	}

	if a.NfServiceList != nil {
		object["nfServiceList"], err = json.Marshal(a.NfServiceList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServiceList': %w", err)
		}
	}

	if a.NfServicePersistence != nil {
		object["nfServicePersistence"], err = json.Marshal(a.NfServicePersistence)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServicePersistence': %w", err)
		}
	}

	if len(a.NfServices) != 0 {
		object["nfServices"], err = json.Marshal(a.NfServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServices': %w", err)
		}
	}

	if len(a.NfSetIdList) != 0 {
		object["nfSetIdList"], err = json.Marshal(a.NfSetIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetIdList': %w", err)
		}
	}

	if a.NfSetRecoveryTimeList != nil {
		object["nfSetRecoveryTimeList"], err = json.Marshal(a.NfSetRecoveryTimeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetRecoveryTimeList': %w", err)
		}
	}

	object["nfStatus"], err = json.Marshal(a.NfStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfStatus': %w", err)
	}

	object["nfType"], err = json.Marshal(a.NfType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
	}

	if len(a.NsiList) != 0 {
		object["nsiList"], err = json.Marshal(a.NsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiList': %w", err)
		}
	}

	if a.NwdafInfo != nil {
		object["nwdafInfo"], err = json.Marshal(a.NwdafInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwdafInfo': %w", err)
		}
	}

	if a.OlcHSupportInd != nil {
		object["olcHSupportInd"], err = json.Marshal(a.OlcHSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'olcHSupportInd': %w", err)
		}
	}

	if a.PcfInfo != nil {
		object["pcfInfo"], err = json.Marshal(a.PcfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfInfo': %w", err)
		}
	}

	if a.PcfInfoList != nil {
		object["pcfInfoList"], err = json.Marshal(a.PcfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfInfoList': %w", err)
		}
	}

	if a.PcscfInfoList != nil {
		object["pcscfInfoList"], err = json.Marshal(a.PcscfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfInfoList': %w", err)
		}
	}

	if len(a.PerPlmnSnssaiList) != 0 {
		object["perPlmnSnssaiList"], err = json.Marshal(a.PerPlmnSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'perPlmnSnssaiList': %w", err)
		}
	}

	if len(a.PlmnList) != 0 {
		object["plmnList"], err = json.Marshal(a.PlmnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnList': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if len(a.SNssais) != 0 {
		object["sNssais"], err = json.Marshal(a.SNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssais': %w", err)
		}
	}

	if len(a.ScpDomains) != 0 {
		object["scpDomains"], err = json.Marshal(a.ScpDomains)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpDomains': %w", err)
		}
	}

	if a.ScpInfo != nil {
		object["scpInfo"], err = json.Marshal(a.ScpInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpInfo': %w", err)
		}
	}

	if a.ServiceSetRecoveryTimeList != nil {
		object["serviceSetRecoveryTimeList"], err = json.Marshal(a.ServiceSetRecoveryTimeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceSetRecoveryTimeList': %w", err)
		}
	}

	if len(a.ServingScope) != 0 {
		object["servingScope"], err = json.Marshal(a.ServingScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingScope': %w", err)
		}
	}

	if a.SmfInfo != nil {
		object["smfInfo"], err = json.Marshal(a.SmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInfo': %w", err)
		}
	}

	if a.SmfInfoList != nil {
		object["smfInfoList"], err = json.Marshal(a.SmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInfoList': %w", err)
		}
	}

	if len(a.SnpnList) != 0 {
		object["snpnList"], err = json.Marshal(a.SnpnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snpnList': %w", err)
		}
	}

	if a.UdmInfo != nil {
		object["udmInfo"], err = json.Marshal(a.UdmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmInfo': %w", err)
		}
	}

	if a.UdmInfoList != nil {
		object["udmInfoList"], err = json.Marshal(a.UdmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmInfoList': %w", err)
		}
	}

	if a.UdrInfo != nil {
		object["udrInfo"], err = json.Marshal(a.UdrInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udrInfo': %w", err)
		}
	}

	if a.UdrInfoList != nil {
		object["udrInfoList"], err = json.Marshal(a.UdrInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udrInfoList': %w", err)
		}
	}

	if a.UdsfInfo != nil {
		object["udsfInfo"], err = json.Marshal(a.UdsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udsfInfo': %w", err)
		}
	}

	if a.UdsfInfoList != nil {
		object["udsfInfoList"], err = json.Marshal(a.UdsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udsfInfoList': %w", err)
		}
	}

	if a.UpfInfo != nil {
		object["upfInfo"], err = json.Marshal(a.UpfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upfInfo': %w", err)
		}
	}

	if a.UpfInfoList != nil {
		object["upfInfoList"], err = json.Marshal(a.UpfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upfInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NFManagementNFProfile. Returns the specified
// element and whether it was found
func (a NFManagementNFProfile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NFManagementNFProfile
func (a *NFManagementNFProfile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NFManagementNFProfile to handle AdditionalProperties
func (a *NFManagementNFProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNfDomains"]; found {
		err = json.Unmarshal(raw, &a.AllowedNfDomains)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNfDomains': %w", err)
		}
		delete(object, "allowedNfDomains")
	}

	if raw, found := object["allowedNfTypes"]; found {
		err = json.Unmarshal(raw, &a.AllowedNfTypes)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNfTypes': %w", err)
		}
		delete(object, "allowedNfTypes")
	}

	if raw, found := object["allowedNssais"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssais)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssais': %w", err)
		}
		delete(object, "allowedNssais")
	}

	if raw, found := object["allowedPlmns"]; found {
		err = json.Unmarshal(raw, &a.AllowedPlmns)
		if err != nil {
			return fmt.Errorf("error reading 'allowedPlmns': %w", err)
		}
		delete(object, "allowedPlmns")
	}

	if raw, found := object["allowedSnpns"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnpns)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnpns': %w", err)
		}
		delete(object, "allowedSnpns")
	}

	if raw, found := object["amfInfo"]; found {
		err = json.Unmarshal(raw, &a.AmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'amfInfo': %w", err)
		}
		delete(object, "amfInfo")
	}

	if raw, found := object["amfInfoList"]; found {
		err = json.Unmarshal(raw, &a.AmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'amfInfoList': %w", err)
		}
		delete(object, "amfInfoList")
	}

	if raw, found := object["ausfInfo"]; found {
		err = json.Unmarshal(raw, &a.AusfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInfo': %w", err)
		}
		delete(object, "ausfInfo")
	}

	if raw, found := object["ausfInfoList"]; found {
		err = json.Unmarshal(raw, &a.AusfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInfoList': %w", err)
		}
		delete(object, "ausfInfoList")
	}

	if raw, found := object["bsfInfo"]; found {
		err = json.Unmarshal(raw, &a.BsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'bsfInfo': %w", err)
		}
		delete(object, "bsfInfo")
	}

	if raw, found := object["bsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.BsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'bsfInfoList': %w", err)
		}
		delete(object, "bsfInfoList")
	}

	if raw, found := object["capacity"]; found {
		err = json.Unmarshal(raw, &a.Capacity)
		if err != nil {
			return fmt.Errorf("error reading 'capacity': %w", err)
		}
		delete(object, "capacity")
	}

	if raw, found := object["chfInfo"]; found {
		err = json.Unmarshal(raw, &a.ChfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfo': %w", err)
		}
		delete(object, "chfInfo")
	}

	if raw, found := object["chfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ChfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfoList': %w", err)
		}
		delete(object, "chfInfoList")
	}

	if raw, found := object["customInfo"]; found {
		err = json.Unmarshal(raw, &a.CustomInfo)
		if err != nil {
			return fmt.Errorf("error reading 'customInfo': %w", err)
		}
		delete(object, "customInfo")
	}

	if raw, found := object["defaultNotificationSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.DefaultNotificationSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'defaultNotificationSubscriptions': %w", err)
		}
		delete(object, "defaultNotificationSubscriptions")
	}

	if raw, found := object["fqdn"]; found {
		err = json.Unmarshal(raw, &a.Fqdn)
		if err != nil {
			return fmt.Errorf("error reading 'fqdn': %w", err)
		}
		delete(object, "fqdn")
	}

	if raw, found := object["gmlcInfo"]; found {
		err = json.Unmarshal(raw, &a.GmlcInfo)
		if err != nil {
			return fmt.Errorf("error reading 'gmlcInfo': %w", err)
		}
		delete(object, "gmlcInfo")
	}

	if raw, found := object["heartBeatTimer"]; found {
		err = json.Unmarshal(raw, &a.HeartBeatTimer)
		if err != nil {
			return fmt.Errorf("error reading 'heartBeatTimer': %w", err)
		}
		delete(object, "heartBeatTimer")
	}

	if raw, found := object["hssInfoList"]; found {
		err = json.Unmarshal(raw, &a.HssInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'hssInfoList': %w", err)
		}
		delete(object, "hssInfoList")
	}

	if raw, found := object["interPlmnFqdn"]; found {
		err = json.Unmarshal(raw, &a.InterPlmnFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'interPlmnFqdn': %w", err)
		}
		delete(object, "interPlmnFqdn")
	}

	if raw, found := object["ipv4Addresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addresses': %w", err)
		}
		delete(object, "ipv4Addresses")
	}

	if raw, found := object["ipv6Addresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addresses': %w", err)
		}
		delete(object, "ipv6Addresses")
	}

	if raw, found := object["lcHSupportInd"]; found {
		err = json.Unmarshal(raw, &a.LcHSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'lcHSupportInd': %w", err)
		}
		delete(object, "lcHSupportInd")
	}

	if raw, found := object["lmfInfo"]; found {
		err = json.Unmarshal(raw, &a.LmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'lmfInfo': %w", err)
		}
		delete(object, "lmfInfo")
	}

	if raw, found := object["load"]; found {
		err = json.Unmarshal(raw, &a.Load)
		if err != nil {
			return fmt.Errorf("error reading 'load': %w", err)
		}
		delete(object, "load")
	}

	if raw, found := object["loadTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.LoadTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'loadTimeStamp': %w", err)
		}
		delete(object, "loadTimeStamp")
	}

	if raw, found := object["locality"]; found {
		err = json.Unmarshal(raw, &a.Locality)
		if err != nil {
			return fmt.Errorf("error reading 'locality': %w", err)
		}
		delete(object, "locality")
	}

	if raw, found := object["nefInfo"]; found {
		err = json.Unmarshal(raw, &a.NefInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nefInfo': %w", err)
		}
		delete(object, "nefInfo")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["nfInstanceName"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceName)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceName': %w", err)
		}
		delete(object, "nfInstanceName")
	}

	if raw, found := object["nfProfileChangesInd"]; found {
		err = json.Unmarshal(raw, &a.NfProfileChangesInd)
		if err != nil {
			return fmt.Errorf("error reading 'nfProfileChangesInd': %w", err)
		}
		delete(object, "nfProfileChangesInd")
	}

	if raw, found := object["nfProfileChangesSupportInd"]; found {
		err = json.Unmarshal(raw, &a.NfProfileChangesSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'nfProfileChangesSupportInd': %w", err)
		}
		delete(object, "nfProfileChangesSupportInd")
	}

	if raw, found := object["nfServiceList"]; found {
		err = json.Unmarshal(raw, &a.NfServiceList)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceList': %w", err)
		}
		delete(object, "nfServiceList")
	}

	if raw, found := object["nfServicePersistence"]; found {
		err = json.Unmarshal(raw, &a.NfServicePersistence)
		if err != nil {
			return fmt.Errorf("error reading 'nfServicePersistence': %w", err)
		}
		delete(object, "nfServicePersistence")
	}

	if raw, found := object["nfServices"]; found {
		err = json.Unmarshal(raw, &a.NfServices)
		if err != nil {
			return fmt.Errorf("error reading 'nfServices': %w", err)
		}
		delete(object, "nfServices")
	}

	if raw, found := object["nfSetIdList"]; found {
		err = json.Unmarshal(raw, &a.NfSetIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetIdList': %w", err)
		}
		delete(object, "nfSetIdList")
	}

	if raw, found := object["nfSetRecoveryTimeList"]; found {
		err = json.Unmarshal(raw, &a.NfSetRecoveryTimeList)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetRecoveryTimeList': %w", err)
		}
		delete(object, "nfSetRecoveryTimeList")
	}

	if raw, found := object["nfStatus"]; found {
		err = json.Unmarshal(raw, &a.NfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'nfStatus': %w", err)
		}
		delete(object, "nfStatus")
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if raw, found := object["nrfInfo"]; found {
		err = json.Unmarshal(raw, &a.NrfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nrfInfo': %w", err)
		}
		delete(object, "nrfInfo")
	}

	if raw, found := object["nsiList"]; found {
		err = json.Unmarshal(raw, &a.NsiList)
		if err != nil {
			return fmt.Errorf("error reading 'nsiList': %w", err)
		}
		delete(object, "nsiList")
	}

	if raw, found := object["nwdafInfo"]; found {
		err = json.Unmarshal(raw, &a.NwdafInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwdafInfo': %w", err)
		}
		delete(object, "nwdafInfo")
	}

	if raw, found := object["olcHSupportInd"]; found {
		err = json.Unmarshal(raw, &a.OlcHSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'olcHSupportInd': %w", err)
		}
		delete(object, "olcHSupportInd")
	}

	if raw, found := object["pcfInfo"]; found {
		err = json.Unmarshal(raw, &a.PcfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pcfInfo': %w", err)
		}
		delete(object, "pcfInfo")
	}

	if raw, found := object["pcfInfoList"]; found {
		err = json.Unmarshal(raw, &a.PcfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'pcfInfoList': %w", err)
		}
		delete(object, "pcfInfoList")
	}

	if raw, found := object["pcscfInfoList"]; found {
		err = json.Unmarshal(raw, &a.PcscfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfInfoList': %w", err)
		}
		delete(object, "pcscfInfoList")
	}

	if raw, found := object["perPlmnSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.PerPlmnSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'perPlmnSnssaiList': %w", err)
		}
		delete(object, "perPlmnSnssaiList")
	}

	if raw, found := object["plmnList"]; found {
		err = json.Unmarshal(raw, &a.PlmnList)
		if err != nil {
			return fmt.Errorf("error reading 'plmnList': %w", err)
		}
		delete(object, "plmnList")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["sNssais"]; found {
		err = json.Unmarshal(raw, &a.SNssais)
		if err != nil {
			return fmt.Errorf("error reading 'sNssais': %w", err)
		}
		delete(object, "sNssais")
	}

	if raw, found := object["scpDomains"]; found {
		err = json.Unmarshal(raw, &a.ScpDomains)
		if err != nil {
			return fmt.Errorf("error reading 'scpDomains': %w", err)
		}
		delete(object, "scpDomains")
	}

	if raw, found := object["scpInfo"]; found {
		err = json.Unmarshal(raw, &a.ScpInfo)
		if err != nil {
			return fmt.Errorf("error reading 'scpInfo': %w", err)
		}
		delete(object, "scpInfo")
	}

	if raw, found := object["serviceSetRecoveryTimeList"]; found {
		err = json.Unmarshal(raw, &a.ServiceSetRecoveryTimeList)
		if err != nil {
			return fmt.Errorf("error reading 'serviceSetRecoveryTimeList': %w", err)
		}
		delete(object, "serviceSetRecoveryTimeList")
	}

	if raw, found := object["servingScope"]; found {
		err = json.Unmarshal(raw, &a.ServingScope)
		if err != nil {
			return fmt.Errorf("error reading 'servingScope': %w", err)
		}
		delete(object, "servingScope")
	}

	if raw, found := object["smfInfo"]; found {
		err = json.Unmarshal(raw, &a.SmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smfInfo': %w", err)
		}
		delete(object, "smfInfo")
	}

	if raw, found := object["smfInfoList"]; found {
		err = json.Unmarshal(raw, &a.SmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'smfInfoList': %w", err)
		}
		delete(object, "smfInfoList")
	}

	if raw, found := object["snpnList"]; found {
		err = json.Unmarshal(raw, &a.SnpnList)
		if err != nil {
			return fmt.Errorf("error reading 'snpnList': %w", err)
		}
		delete(object, "snpnList")
	}

	if raw, found := object["udmInfo"]; found {
		err = json.Unmarshal(raw, &a.UdmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udmInfo': %w", err)
		}
		delete(object, "udmInfo")
	}

	if raw, found := object["udmInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udmInfoList': %w", err)
		}
		delete(object, "udmInfoList")
	}

	if raw, found := object["udrInfo"]; found {
		err = json.Unmarshal(raw, &a.UdrInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udrInfo': %w", err)
		}
		delete(object, "udrInfo")
	}

	if raw, found := object["udrInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdrInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udrInfoList': %w", err)
		}
		delete(object, "udrInfoList")
	}

	if raw, found := object["udsfInfo"]; found {
		err = json.Unmarshal(raw, &a.UdsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udsfInfo': %w", err)
		}
		delete(object, "udsfInfo")
	}

	if raw, found := object["udsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udsfInfoList': %w", err)
		}
		delete(object, "udsfInfoList")
	}

	if raw, found := object["upfInfo"]; found {
		err = json.Unmarshal(raw, &a.UpfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upfInfo': %w", err)
		}
		delete(object, "upfInfo")
	}

	if raw, found := object["upfInfoList"]; found {
		err = json.Unmarshal(raw, &a.UpfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'upfInfoList': %w", err)
		}
		delete(object, "upfInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NFManagementNFProfile to handle AdditionalProperties
func (a NFManagementNFProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedNfDomains) != 0 {
		object["allowedNfDomains"], err = json.Marshal(a.AllowedNfDomains)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNfDomains': %w", err)
		}
	}

	if len(a.AllowedNfTypes) != 0 {
		object["allowedNfTypes"], err = json.Marshal(a.AllowedNfTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNfTypes': %w", err)
		}
	}

	if len(a.AllowedNssais) != 0 {
		object["allowedNssais"], err = json.Marshal(a.AllowedNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssais': %w", err)
		}
	}

	if len(a.AllowedPlmns) != 0 {
		object["allowedPlmns"], err = json.Marshal(a.AllowedPlmns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedPlmns': %w", err)
		}
	}

	if len(a.AllowedSnpns) != 0 {
		object["allowedSnpns"], err = json.Marshal(a.AllowedSnpns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSnpns': %w", err)
		}
	}

	if a.AmfInfo != nil {
		object["amfInfo"], err = json.Marshal(a.AmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfInfo': %w", err)
		}
	}

	if a.AmfInfoList != nil {
		object["amfInfoList"], err = json.Marshal(a.AmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfInfoList': %w", err)
		}
	}

	if a.AusfInfo != nil {
		object["ausfInfo"], err = json.Marshal(a.AusfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ausfInfo': %w", err)
		}
	}

	if a.AusfInfoList != nil {
		object["ausfInfoList"], err = json.Marshal(a.AusfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ausfInfoList': %w", err)
		}
	}

	if a.BsfInfo != nil {
		object["bsfInfo"], err = json.Marshal(a.BsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bsfInfo': %w", err)
		}
	}

	if a.BsfInfoList != nil {
		object["bsfInfoList"], err = json.Marshal(a.BsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bsfInfoList': %w", err)
		}
	}

	if a.Capacity != nil {
		object["capacity"], err = json.Marshal(a.Capacity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'capacity': %w", err)
		}
	}

	if a.ChfInfo != nil {
		object["chfInfo"], err = json.Marshal(a.ChfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfo': %w", err)
		}
	}

	if a.ChfInfoList != nil {
		object["chfInfoList"], err = json.Marshal(a.ChfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfoList': %w", err)
		}
	}

	if a.CustomInfo != nil {
		object["customInfo"], err = json.Marshal(a.CustomInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'customInfo': %w", err)
		}
	}

	if a.DefaultNotificationSubscriptions != nil {
		object["defaultNotificationSubscriptions"], err = json.Marshal(a.DefaultNotificationSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultNotificationSubscriptions': %w", err)
		}
	}

	if a.Fqdn != nil {
		object["fqdn"], err = json.Marshal(a.Fqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fqdn': %w", err)
		}
	}

	if a.GmlcInfo != nil {
		object["gmlcInfo"], err = json.Marshal(a.GmlcInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gmlcInfo': %w", err)
		}
	}

	if a.HeartBeatTimer != nil {
		object["heartBeatTimer"], err = json.Marshal(a.HeartBeatTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'heartBeatTimer': %w", err)
		}
	}

	if a.HssInfoList != nil {
		object["hssInfoList"], err = json.Marshal(a.HssInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hssInfoList': %w", err)
		}
	}

	if a.InterPlmnFqdn != nil {
		object["interPlmnFqdn"], err = json.Marshal(a.InterPlmnFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interPlmnFqdn': %w", err)
		}
	}

	if len(a.Ipv4Addresses) != 0 {
		object["ipv4Addresses"], err = json.Marshal(a.Ipv4Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addresses': %w", err)
		}
	}

	if len(a.Ipv6Addresses) != 0 {
		object["ipv6Addresses"], err = json.Marshal(a.Ipv6Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addresses': %w", err)
		}
	}

	if a.LcHSupportInd != nil {
		object["lcHSupportInd"], err = json.Marshal(a.LcHSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcHSupportInd': %w", err)
		}
	}

	if a.LmfInfo != nil {
		object["lmfInfo"], err = json.Marshal(a.LmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lmfInfo': %w", err)
		}
	}

	if a.Load != nil {
		object["load"], err = json.Marshal(a.Load)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'load': %w", err)
		}
	}

	if a.LoadTimeStamp != nil {
		object["loadTimeStamp"], err = json.Marshal(a.LoadTimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loadTimeStamp': %w", err)
		}
	}

	if a.Locality != nil {
		object["locality"], err = json.Marshal(a.Locality)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locality': %w", err)
		}
	}

	if a.NefInfo != nil {
		object["nefInfo"], err = json.Marshal(a.NefInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefInfo': %w", err)
		}
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.NfInstanceName != nil {
		object["nfInstanceName"], err = json.Marshal(a.NfInstanceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfInstanceName': %w", err)
		}
	}

	if a.NfProfileChangesInd != nil {
		object["nfProfileChangesInd"], err = json.Marshal(a.NfProfileChangesInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfProfileChangesInd': %w", err)
		}
	}

	if a.NfProfileChangesSupportInd != nil {
		object["nfProfileChangesSupportInd"], err = json.Marshal(a.NfProfileChangesSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfProfileChangesSupportInd': %w", err)
		}
	}

	if a.NfServiceList != nil {
		object["nfServiceList"], err = json.Marshal(a.NfServiceList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServiceList': %w", err)
		}
	}

	if a.NfServicePersistence != nil {
		object["nfServicePersistence"], err = json.Marshal(a.NfServicePersistence)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServicePersistence': %w", err)
		}
	}

	if len(a.NfServices) != 0 {
		object["nfServices"], err = json.Marshal(a.NfServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServices': %w", err)
		}
	}

	if len(a.NfSetIdList) != 0 {
		object["nfSetIdList"], err = json.Marshal(a.NfSetIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetIdList': %w", err)
		}
	}

	if a.NfSetRecoveryTimeList != nil {
		object["nfSetRecoveryTimeList"], err = json.Marshal(a.NfSetRecoveryTimeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetRecoveryTimeList': %w", err)
		}
	}

	object["nfStatus"], err = json.Marshal(a.NfStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfStatus': %w", err)
	}

	object["nfType"], err = json.Marshal(a.NfType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
	}

	if a.NrfInfo != nil {
		object["nrfInfo"], err = json.Marshal(a.NrfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfInfo': %w", err)
		}
	}

	if len(a.NsiList) != 0 {
		object["nsiList"], err = json.Marshal(a.NsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiList': %w", err)
		}
	}

	if a.NwdafInfo != nil {
		object["nwdafInfo"], err = json.Marshal(a.NwdafInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwdafInfo': %w", err)
		}
	}

	if a.OlcHSupportInd != nil {
		object["olcHSupportInd"], err = json.Marshal(a.OlcHSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'olcHSupportInd': %w", err)
		}
	}

	if a.PcfInfo != nil {
		object["pcfInfo"], err = json.Marshal(a.PcfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfInfo': %w", err)
		}
	}

	if a.PcfInfoList != nil {
		object["pcfInfoList"], err = json.Marshal(a.PcfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfInfoList': %w", err)
		}
	}

	if a.PcscfInfoList != nil {
		object["pcscfInfoList"], err = json.Marshal(a.PcscfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfInfoList': %w", err)
		}
	}

	if len(a.PerPlmnSnssaiList) != 0 {
		object["perPlmnSnssaiList"], err = json.Marshal(a.PerPlmnSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'perPlmnSnssaiList': %w", err)
		}
	}

	if len(a.PlmnList) != 0 {
		object["plmnList"], err = json.Marshal(a.PlmnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnList': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if len(a.SNssais) != 0 {
		object["sNssais"], err = json.Marshal(a.SNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssais': %w", err)
		}
	}

	if len(a.ScpDomains) != 0 {
		object["scpDomains"], err = json.Marshal(a.ScpDomains)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpDomains': %w", err)
		}
	}

	if a.ScpInfo != nil {
		object["scpInfo"], err = json.Marshal(a.ScpInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpInfo': %w", err)
		}
	}

	if a.ServiceSetRecoveryTimeList != nil {
		object["serviceSetRecoveryTimeList"], err = json.Marshal(a.ServiceSetRecoveryTimeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceSetRecoveryTimeList': %w", err)
		}
	}

	if len(a.ServingScope) != 0 {
		object["servingScope"], err = json.Marshal(a.ServingScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingScope': %w", err)
		}
	}

	if a.SmfInfo != nil {
		object["smfInfo"], err = json.Marshal(a.SmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInfo': %w", err)
		}
	}

	if a.SmfInfoList != nil {
		object["smfInfoList"], err = json.Marshal(a.SmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInfoList': %w", err)
		}
	}

	if len(a.SnpnList) != 0 {
		object["snpnList"], err = json.Marshal(a.SnpnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snpnList': %w", err)
		}
	}

	if a.UdmInfo != nil {
		object["udmInfo"], err = json.Marshal(a.UdmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmInfo': %w", err)
		}
	}

	if a.UdmInfoList != nil {
		object["udmInfoList"], err = json.Marshal(a.UdmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmInfoList': %w", err)
		}
	}

	if a.UdrInfo != nil {
		object["udrInfo"], err = json.Marshal(a.UdrInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udrInfo': %w", err)
		}
	}

	if a.UdrInfoList != nil {
		object["udrInfoList"], err = json.Marshal(a.UdrInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udrInfoList': %w", err)
		}
	}

	if a.UdsfInfo != nil {
		object["udsfInfo"], err = json.Marshal(a.UdsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udsfInfo': %w", err)
		}
	}

	if a.UdsfInfoList != nil {
		object["udsfInfoList"], err = json.Marshal(a.UdsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udsfInfoList': %w", err)
		}
	}

	if a.UpfInfo != nil {
		object["upfInfo"], err = json.Marshal(a.UpfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upfInfo': %w", err)
		}
	}

	if a.UpfInfoList != nil {
		object["upfInfoList"], err = json.Marshal(a.UpfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upfInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NFService. Returns the specified
// element and whether it was found
func (a NFService) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NFService
func (a *NFService) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NFService to handle AdditionalProperties
func (a *NFService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedOperationsPerNfInstance"]; found {
		err = json.Unmarshal(raw, &a.AllowedOperationsPerNfInstance)
		if err != nil {
			return fmt.Errorf("error reading 'allowedOperationsPerNfInstance': %w", err)
		}
		delete(object, "allowedOperationsPerNfInstance")
	}

	if raw, found := object["allowedOperationsPerNfType"]; found {
		err = json.Unmarshal(raw, &a.AllowedOperationsPerNfType)
		if err != nil {
			return fmt.Errorf("error reading 'allowedOperationsPerNfType': %w", err)
		}
		delete(object, "allowedOperationsPerNfType")
	}

	if raw, found := object["apiPrefix"]; found {
		err = json.Unmarshal(raw, &a.ApiPrefix)
		if err != nil {
			return fmt.Errorf("error reading 'apiPrefix': %w", err)
		}
		delete(object, "apiPrefix")
	}

	if raw, found := object["capacity"]; found {
		err = json.Unmarshal(raw, &a.Capacity)
		if err != nil {
			return fmt.Errorf("error reading 'capacity': %w", err)
		}
		delete(object, "capacity")
	}

	if raw, found := object["defaultNotificationSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.DefaultNotificationSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'defaultNotificationSubscriptions': %w", err)
		}
		delete(object, "defaultNotificationSubscriptions")
	}

	if raw, found := object["fqdn"]; found {
		err = json.Unmarshal(raw, &a.Fqdn)
		if err != nil {
			return fmt.Errorf("error reading 'fqdn': %w", err)
		}
		delete(object, "fqdn")
	}

	if raw, found := object["ipEndPoints"]; found {
		err = json.Unmarshal(raw, &a.IpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'ipEndPoints': %w", err)
		}
		delete(object, "ipEndPoints")
	}

	if raw, found := object["load"]; found {
		err = json.Unmarshal(raw, &a.Load)
		if err != nil {
			return fmt.Errorf("error reading 'load': %w", err)
		}
		delete(object, "load")
	}

	if raw, found := object["loadTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.LoadTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'loadTimeStamp': %w", err)
		}
		delete(object, "loadTimeStamp")
	}

	if raw, found := object["nfServiceSetIdList"]; found {
		err = json.Unmarshal(raw, &a.NfServiceSetIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceSetIdList': %w", err)
		}
		delete(object, "nfServiceSetIdList")
	}

	if raw, found := object["nfServiceStatus"]; found {
		err = json.Unmarshal(raw, &a.NfServiceStatus)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceStatus': %w", err)
		}
		delete(object, "nfServiceStatus")
	}

	if raw, found := object["oauth2Required"]; found {
		err = json.Unmarshal(raw, &a.Oauth2Required)
		if err != nil {
			return fmt.Errorf("error reading 'oauth2Required': %w", err)
		}
		delete(object, "oauth2Required")
	}

	if raw, found := object["perPlmnSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.PerPlmnSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'perPlmnSnssaiList': %w", err)
		}
		delete(object, "perPlmnSnssaiList")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["sNssais"]; found {
		err = json.Unmarshal(raw, &a.SNssais)
		if err != nil {
			return fmt.Errorf("error reading 'sNssais': %w", err)
		}
		delete(object, "sNssais")
	}

	if raw, found := object["scheme"]; found {
		err = json.Unmarshal(raw, &a.Scheme)
		if err != nil {
			return fmt.Errorf("error reading 'scheme': %w", err)
		}
		delete(object, "scheme")
	}

	if raw, found := object["serviceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'serviceInstanceId': %w", err)
		}
		delete(object, "serviceInstanceId")
	}

	if raw, found := object["serviceName"]; found {
		err = json.Unmarshal(raw, &a.ServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'serviceName': %w", err)
		}
		delete(object, "serviceName")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["supportedVendorSpecificFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedVendorSpecificFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedVendorSpecificFeatures': %w", err)
		}
		delete(object, "supportedVendorSpecificFeatures")
	}

	if raw, found := object["vendorId"]; found {
		err = json.Unmarshal(raw, &a.VendorId)
		if err != nil {
			return fmt.Errorf("error reading 'vendorId': %w", err)
		}
		delete(object, "vendorId")
	}

	if raw, found := object["versions"]; found {
		err = json.Unmarshal(raw, &a.Versions)
		if err != nil {
			return fmt.Errorf("error reading 'versions': %w", err)
		}
		delete(object, "versions")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NFService to handle AdditionalProperties
func (a NFService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedOperationsPerNfInstance != nil {
		object["allowedOperationsPerNfInstance"], err = json.Marshal(a.AllowedOperationsPerNfInstance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedOperationsPerNfInstance': %w", err)
		}
	}

	if a.AllowedOperationsPerNfType != nil {
		object["allowedOperationsPerNfType"], err = json.Marshal(a.AllowedOperationsPerNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedOperationsPerNfType': %w", err)
		}
	}

	if a.ApiPrefix != nil {
		object["apiPrefix"], err = json.Marshal(a.ApiPrefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apiPrefix': %w", err)
		}
	}

	if a.Capacity != nil {
		object["capacity"], err = json.Marshal(a.Capacity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'capacity': %w", err)
		}
	}

	if len(a.DefaultNotificationSubscriptions) != 0 {
		object["defaultNotificationSubscriptions"], err = json.Marshal(a.DefaultNotificationSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultNotificationSubscriptions': %w", err)
		}
	}

	if a.Fqdn != nil {
		object["fqdn"], err = json.Marshal(a.Fqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fqdn': %w", err)
		}
	}

	if len(a.IpEndPoints) != 0 {
		object["ipEndPoints"], err = json.Marshal(a.IpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipEndPoints': %w", err)
		}
	}

	if a.Load != nil {
		object["load"], err = json.Marshal(a.Load)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'load': %w", err)
		}
	}

	if a.LoadTimeStamp != nil {
		object["loadTimeStamp"], err = json.Marshal(a.LoadTimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loadTimeStamp': %w", err)
		}
	}

	if len(a.NfServiceSetIdList) != 0 {
		object["nfServiceSetIdList"], err = json.Marshal(a.NfServiceSetIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServiceSetIdList': %w", err)
		}
	}

	object["nfServiceStatus"], err = json.Marshal(a.NfServiceStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfServiceStatus': %w", err)
	}

	if a.Oauth2Required != nil {
		object["oauth2Required"], err = json.Marshal(a.Oauth2Required)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oauth2Required': %w", err)
		}
	}

	if len(a.PerPlmnSnssaiList) != 0 {
		object["perPlmnSnssaiList"], err = json.Marshal(a.PerPlmnSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'perPlmnSnssaiList': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if len(a.SNssais) != 0 {
		object["sNssais"], err = json.Marshal(a.SNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssais': %w", err)
		}
	}

	object["scheme"], err = json.Marshal(a.Scheme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scheme': %w", err)
	}

	object["serviceInstanceId"], err = json.Marshal(a.ServiceInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceInstanceId': %w", err)
	}

	object["serviceName"], err = json.Marshal(a.ServiceName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceName': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.SupportedVendorSpecificFeatures != nil {
		object["supportedVendorSpecificFeatures"], err = json.Marshal(a.SupportedVendorSpecificFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedVendorSpecificFeatures': %w", err)
		}
	}

	if len(a.VendorId) != 0 {
		object["vendorId"], err = json.Marshal(a.VendorId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vendorId': %w", err)
		}
	}

	object["versions"], err = json.Marshal(a.Versions)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'versions': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NFServiceVersion. Returns the specified
// element and whether it was found
func (a NFServiceVersion) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NFServiceVersion
func (a *NFServiceVersion) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NFServiceVersion to handle AdditionalProperties
func (a *NFServiceVersion) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apiFullVersion"]; found {
		err = json.Unmarshal(raw, &a.ApiFullVersion)
		if err != nil {
			return fmt.Errorf("error reading 'apiFullVersion': %w", err)
		}
		delete(object, "apiFullVersion")
	}

	if raw, found := object["apiVersionInUri"]; found {
		err = json.Unmarshal(raw, &a.ApiVersionInUri)
		if err != nil {
			return fmt.Errorf("error reading 'apiVersionInUri': %w", err)
		}
		delete(object, "apiVersionInUri")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NFServiceVersion to handle AdditionalProperties
func (a NFServiceVersion) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["apiFullVersion"], err = json.Marshal(a.ApiFullVersion)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'apiFullVersion': %w", err)
	}

	object["apiVersionInUri"], err = json.Marshal(a.ApiVersionInUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'apiVersionInUri': %w", err)
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NasSecurityMode. Returns the specified
// element and whether it was found
func (a NasSecurityMode) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NasSecurityMode
func (a *NasSecurityMode) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NasSecurityMode to handle AdditionalProperties
func (a *NasSecurityMode) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cipheringAlgorithm"]; found {
		err = json.Unmarshal(raw, &a.CipheringAlgorithm)
		if err != nil {
			return fmt.Errorf("error reading 'cipheringAlgorithm': %w", err)
		}
		delete(object, "cipheringAlgorithm")
	}

	if raw, found := object["integrityAlgorithm"]; found {
		err = json.Unmarshal(raw, &a.IntegrityAlgorithm)
		if err != nil {
			return fmt.Errorf("error reading 'integrityAlgorithm': %w", err)
		}
		delete(object, "integrityAlgorithm")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NasSecurityMode to handle AdditionalProperties
func (a NasSecurityMode) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cipheringAlgorithm"], err = json.Marshal(a.CipheringAlgorithm)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cipheringAlgorithm': %w", err)
	}

	object["integrityAlgorithm"], err = json.Marshal(a.IntegrityAlgorithm)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'integrityAlgorithm': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ncgi. Returns the specified
// element and whether it was found
func (a Ncgi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ncgi
func (a *Ncgi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ncgi to handle AdditionalProperties
func (a *Ncgi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["nrCellId"]; found {
		err = json.Unmarshal(raw, &a.NrCellId)
		if err != nil {
			return fmt.Errorf("error reading 'nrCellId': %w", err)
		}
		delete(object, "nrCellId")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ncgi to handle AdditionalProperties
func (a Ncgi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["nrCellId"], err = json.Marshal(a.NrCellId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nrCellId': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NefCond. Returns the specified
// element and whether it was found
func (a NefCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NefCond
func (a *NefCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NefCond to handle AdditionalProperties
func (a *NefCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afEvents"]; found {
		err = json.Unmarshal(raw, &a.AfEvents)
		if err != nil {
			return fmt.Errorf("error reading 'afEvents': %w", err)
		}
		delete(object, "afEvents")
	}

	if raw, found := object["conditionType"]; found {
		err = json.Unmarshal(raw, &a.ConditionType)
		if err != nil {
			return fmt.Errorf("error reading 'conditionType': %w", err)
		}
		delete(object, "conditionType")
	}

	if raw, found := object["externalGroupIdentifiersRanges"]; found {
		err = json.Unmarshal(raw, &a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return fmt.Errorf("error reading 'externalGroupIdentifiersRanges': %w", err)
		}
		delete(object, "externalGroupIdentifiersRanges")
	}

	if raw, found := object["gpsiRanges"]; found {
		err = json.Unmarshal(raw, &a.GpsiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiRanges': %w", err)
		}
		delete(object, "gpsiRanges")
	}

	if raw, found := object["pfdData"]; found {
		err = json.Unmarshal(raw, &a.PfdData)
		if err != nil {
			return fmt.Errorf("error reading 'pfdData': %w", err)
		}
		delete(object, "pfdData")
	}

	if raw, found := object["servedFqdnList"]; found {
		err = json.Unmarshal(raw, &a.ServedFqdnList)
		if err != nil {
			return fmt.Errorf("error reading 'servedFqdnList': %w", err)
		}
		delete(object, "servedFqdnList")
	}

	if raw, found := object["snssaiList"]; found {
		err = json.Unmarshal(raw, &a.SnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiList': %w", err)
		}
		delete(object, "snssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NefCond to handle AdditionalProperties
func (a NefCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AfEvents) != 0 {
		object["afEvents"], err = json.Marshal(a.AfEvents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afEvents': %w", err)
		}
	}

	object["conditionType"], err = json.Marshal(a.ConditionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'conditionType': %w", err)
	}

	if len(a.ExternalGroupIdentifiersRanges) != 0 {
		object["externalGroupIdentifiersRanges"], err = json.Marshal(a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalGroupIdentifiersRanges': %w", err)
		}
	}

	if len(a.GpsiRanges) != 0 {
		object["gpsiRanges"], err = json.Marshal(a.GpsiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiRanges': %w", err)
		}
	}

	if a.PfdData != nil {
		object["pfdData"], err = json.Marshal(a.PfdData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdData': %w", err)
		}
	}

	if len(a.ServedFqdnList) != 0 {
		object["servedFqdnList"], err = json.Marshal(a.ServedFqdnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedFqdnList': %w", err)
		}
	}

	if len(a.SnssaiList) != 0 {
		object["snssaiList"], err = json.Marshal(a.SnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NefInfo. Returns the specified
// element and whether it was found
func (a NefInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NefInfo
func (a *NefInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NefInfo to handle AdditionalProperties
func (a *NefInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afEeData"]; found {
		err = json.Unmarshal(raw, &a.AfEeData)
		if err != nil {
			return fmt.Errorf("error reading 'afEeData': %w", err)
		}
		delete(object, "afEeData")
	}

	if raw, found := object["externalGroupIdentifiersRanges"]; found {
		err = json.Unmarshal(raw, &a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return fmt.Errorf("error reading 'externalGroupIdentifiersRanges': %w", err)
		}
		delete(object, "externalGroupIdentifiersRanges")
	}

	if raw, found := object["gpsiRanges"]; found {
		err = json.Unmarshal(raw, &a.GpsiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiRanges': %w", err)
		}
		delete(object, "gpsiRanges")
	}

	if raw, found := object["nefId"]; found {
		err = json.Unmarshal(raw, &a.NefId)
		if err != nil {
			return fmt.Errorf("error reading 'nefId': %w", err)
		}
		delete(object, "nefId")
	}

	if raw, found := object["pfdData"]; found {
		err = json.Unmarshal(raw, &a.PfdData)
		if err != nil {
			return fmt.Errorf("error reading 'pfdData': %w", err)
		}
		delete(object, "pfdData")
	}

	if raw, found := object["servedFqdnList"]; found {
		err = json.Unmarshal(raw, &a.ServedFqdnList)
		if err != nil {
			return fmt.Errorf("error reading 'servedFqdnList': %w", err)
		}
		delete(object, "servedFqdnList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NefInfo to handle AdditionalProperties
func (a NefInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfEeData != nil {
		object["afEeData"], err = json.Marshal(a.AfEeData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afEeData': %w", err)
		}
	}

	if len(a.ExternalGroupIdentifiersRanges) != 0 {
		object["externalGroupIdentifiersRanges"], err = json.Marshal(a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalGroupIdentifiersRanges': %w", err)
		}
	}

	if len(a.GpsiRanges) != 0 {
		object["gpsiRanges"], err = json.Marshal(a.GpsiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiRanges': %w", err)
		}
	}

	if a.NefId != nil {
		object["nefId"], err = json.Marshal(a.NefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefId': %w", err)
		}
	}

	if a.PfdData != nil {
		object["pfdData"], err = json.Marshal(a.PfdData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdData': %w", err)
		}
	}

	if len(a.ServedFqdnList) != 0 {
		object["servedFqdnList"], err = json.Marshal(a.ServedFqdnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedFqdnList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkAreaInfo. Returns the specified
// element and whether it was found
func (a NetworkAreaInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkAreaInfo
func (a *NetworkAreaInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkAreaInfo to handle AdditionalProperties
func (a *NetworkAreaInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecgis"]; found {
		err = json.Unmarshal(raw, &a.Ecgis)
		if err != nil {
			return fmt.Errorf("error reading 'ecgis': %w", err)
		}
		delete(object, "ecgis")
	}

	if raw, found := object["gRanNodeIds"]; found {
		err = json.Unmarshal(raw, &a.GRanNodeIds)
		if err != nil {
			return fmt.Errorf("error reading 'gRanNodeIds': %w", err)
		}
		delete(object, "gRanNodeIds")
	}

	if raw, found := object["ncgis"]; found {
		err = json.Unmarshal(raw, &a.Ncgis)
		if err != nil {
			return fmt.Errorf("error reading 'ncgis': %w", err)
		}
		delete(object, "ncgis")
	}

	if raw, found := object["tais"]; found {
		err = json.Unmarshal(raw, &a.Tais)
		if err != nil {
			return fmt.Errorf("error reading 'tais': %w", err)
		}
		delete(object, "tais")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkAreaInfo to handle AdditionalProperties
func (a NetworkAreaInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ecgis) != 0 {
		object["ecgis"], err = json.Marshal(a.Ecgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgis': %w", err)
		}
	}

	if len(a.GRanNodeIds) != 0 {
		object["gRanNodeIds"], err = json.Marshal(a.GRanNodeIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gRanNodeIds': %w", err)
		}
	}

	if len(a.Ncgis) != 0 {
		object["ncgis"], err = json.Marshal(a.Ncgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgis': %w", err)
		}
	}

	if len(a.Tais) != 0 {
		object["tais"], err = json.Marshal(a.Tais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tais': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkNodeDiameterAddress. Returns the specified
// element and whether it was found
func (a NetworkNodeDiameterAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkNodeDiameterAddress
func (a *NetworkNodeDiameterAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkNodeDiameterAddress to handle AdditionalProperties
func (a *NetworkNodeDiameterAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["realm"]; found {
		err = json.Unmarshal(raw, &a.Realm)
		if err != nil {
			return fmt.Errorf("error reading 'realm': %w", err)
		}
		delete(object, "realm")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkNodeDiameterAddress to handle AdditionalProperties
func (a NetworkNodeDiameterAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	object["realm"], err = json.Marshal(a.Realm)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'realm': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkSliceCond. Returns the specified
// element and whether it was found
func (a NetworkSliceCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkSliceCond
func (a *NetworkSliceCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkSliceCond to handle AdditionalProperties
func (a *NetworkSliceCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nsiList"]; found {
		err = json.Unmarshal(raw, &a.NsiList)
		if err != nil {
			return fmt.Errorf("error reading 'nsiList': %w", err)
		}
		delete(object, "nsiList")
	}

	if raw, found := object["snssaiList"]; found {
		err = json.Unmarshal(raw, &a.SnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiList': %w", err)
		}
		delete(object, "snssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkSliceCond to handle AdditionalProperties
func (a NetworkSliceCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NsiList != nil {
		object["nsiList"], err = json.Marshal(a.NsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiList': %w", err)
		}
	}

	object["snssaiList"], err = json.Marshal(a.SnssaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssaiList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NfGroupCond. Returns the specified
// element and whether it was found
func (a NfGroupCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NfGroupCond
func (a *NfGroupCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NfGroupCond to handle AdditionalProperties
func (a *NfGroupCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfGroupId"]; found {
		err = json.Unmarshal(raw, &a.NfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'nfGroupId': %w", err)
		}
		delete(object, "nfGroupId")
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NfGroupCond to handle AdditionalProperties
func (a NfGroupCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfGroupId"], err = json.Marshal(a.NfGroupId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfGroupId': %w", err)
	}

	object["nfType"], err = json.Marshal(a.NfType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NfInfo. Returns the specified
// element and whether it was found
func (a NfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NfInfo
func (a *NfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NfInfo to handle AdditionalProperties
func (a *NfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NfInfo to handle AdditionalProperties
func (a NfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NfType != nil {
		object["nfType"], err = json.Marshal(a.NfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NfInstanceIdCond. Returns the specified
// element and whether it was found
func (a NfInstanceIdCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NfInstanceIdCond
func (a *NfInstanceIdCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NfInstanceIdCond to handle AdditionalProperties
func (a *NfInstanceIdCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NfInstanceIdCond to handle AdditionalProperties
func (a NfInstanceIdCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NfInstanceIdListCond. Returns the specified
// element and whether it was found
func (a NfInstanceIdListCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NfInstanceIdListCond
func (a *NfInstanceIdListCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NfInstanceIdListCond to handle AdditionalProperties
func (a *NfInstanceIdListCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfInstanceIdList"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceIdList': %w", err)
		}
		delete(object, "nfInstanceIdList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NfInstanceIdListCond to handle AdditionalProperties
func (a NfInstanceIdListCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfInstanceIdList"], err = json.Marshal(a.NfInstanceIdList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceIdList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NfServiceSetCond. Returns the specified
// element and whether it was found
func (a NfServiceSetCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NfServiceSetCond
func (a *NfServiceSetCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NfServiceSetCond to handle AdditionalProperties
func (a *NfServiceSetCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.NfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceSetId': %w", err)
		}
		delete(object, "nfServiceSetId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NfServiceSetCond to handle AdditionalProperties
func (a NfServiceSetCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfServiceSetId"], err = json.Marshal(a.NfServiceSetId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfServiceSetId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NfSetCond. Returns the specified
// element and whether it was found
func (a NfSetCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NfSetCond
func (a *NfSetCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NfSetCond to handle AdditionalProperties
func (a *NfSetCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfSetId"]; found {
		err = json.Unmarshal(raw, &a.NfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetId': %w", err)
		}
		delete(object, "nfSetId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NfSetCond to handle AdditionalProperties
func (a NfSetCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfSetId"], err = json.Marshal(a.NfSetId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfSetId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NfTypeCond. Returns the specified
// element and whether it was found
func (a NfTypeCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NfTypeCond
func (a *NfTypeCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NfTypeCond to handle AdditionalProperties
func (a *NfTypeCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NfTypeCond to handle AdditionalProperties
func (a NfTypeCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfType"], err = json.Marshal(a.NfType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NgApCause. Returns the specified
// element and whether it was found
func (a NgApCause) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NgApCause
func (a *NgApCause) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NgApCause to handle AdditionalProperties
func (a *NgApCause) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["group"]; found {
		err = json.Unmarshal(raw, &a.Group)
		if err != nil {
			return fmt.Errorf("error reading 'group': %w", err)
		}
		delete(object, "group")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NgApCause to handle AdditionalProperties
func (a NgApCause) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["group"], err = json.Marshal(a.Group)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'group': %w", err)
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NgKsi. Returns the specified
// element and whether it was found
func (a NgKsi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NgKsi
func (a *NgKsi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NgKsi to handle AdditionalProperties
func (a *NgKsi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ksi"]; found {
		err = json.Unmarshal(raw, &a.Ksi)
		if err != nil {
			return fmt.Errorf("error reading 'ksi': %w", err)
		}
		delete(object, "ksi")
	}

	if raw, found := object["tsc"]; found {
		err = json.Unmarshal(raw, &a.Tsc)
		if err != nil {
			return fmt.Errorf("error reading 'tsc': %w", err)
		}
		delete(object, "tsc")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NgKsi to handle AdditionalProperties
func (a NgKsi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ksi"], err = json.Marshal(a.Ksi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ksi': %w", err)
	}

	object["tsc"], err = json.Marshal(a.Tsc)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tsc': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NgRanTargetId. Returns the specified
// element and whether it was found
func (a NgRanTargetId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NgRanTargetId
func (a *NgRanTargetId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NgRanTargetId to handle AdditionalProperties
func (a *NgRanTargetId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ranNodeId"]; found {
		err = json.Unmarshal(raw, &a.RanNodeId)
		if err != nil {
			return fmt.Errorf("error reading 'ranNodeId': %w", err)
		}
		delete(object, "ranNodeId")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NgRanTargetId to handle AdditionalProperties
func (a NgRanTargetId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ranNodeId"], err = json.Marshal(a.RanNodeId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ranNodeId': %w", err)
	}

	object["tai"], err = json.Marshal(a.Tai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NiddAuthUpdateInfo. Returns the specified
// element and whether it was found
func (a NiddAuthUpdateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NiddAuthUpdateInfo
func (a *NiddAuthUpdateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NiddAuthUpdateInfo to handle AdditionalProperties
func (a *NiddAuthUpdateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authorizationData"]; found {
		err = json.Unmarshal(raw, &a.AuthorizationData)
		if err != nil {
			return fmt.Errorf("error reading 'authorizationData': %w", err)
		}
		delete(object, "authorizationData")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["invalidityInd"]; found {
		err = json.Unmarshal(raw, &a.InvalidityInd)
		if err != nil {
			return fmt.Errorf("error reading 'invalidityInd': %w", err)
		}
		delete(object, "invalidityInd")
	}

	if raw, found := object["niddCause"]; found {
		err = json.Unmarshal(raw, &a.NiddCause)
		if err != nil {
			return fmt.Errorf("error reading 'niddCause': %w", err)
		}
		delete(object, "niddCause")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NiddAuthUpdateInfo to handle AdditionalProperties
func (a NiddAuthUpdateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authorizationData"], err = json.Marshal(a.AuthorizationData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authorizationData': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.InvalidityInd != nil {
		object["invalidityInd"], err = json.Marshal(a.InvalidityInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidityInd': %w", err)
		}
	}

	if a.NiddCause != nil {
		object["niddCause"], err = json.Marshal(a.NiddCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'niddCause': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NiddAuthUpdateNotification. Returns the specified
// element and whether it was found
func (a NiddAuthUpdateNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NiddAuthUpdateNotification
func (a *NiddAuthUpdateNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NiddAuthUpdateNotification to handle AdditionalProperties
func (a *NiddAuthUpdateNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["niddAuthUpdateInfoList"]; found {
		err = json.Unmarshal(raw, &a.NiddAuthUpdateInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'niddAuthUpdateInfoList': %w", err)
		}
		delete(object, "niddAuthUpdateInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NiddAuthUpdateNotification to handle AdditionalProperties
func (a NiddAuthUpdateNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["niddAuthUpdateInfoList"], err = json.Marshal(a.NiddAuthUpdateInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'niddAuthUpdateInfoList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NiddInformation. Returns the specified
// element and whether it was found
func (a NiddInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NiddInformation
func (a *NiddInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NiddInformation to handle AdditionalProperties
func (a *NiddInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["extGroupId"]; found {
		err = json.Unmarshal(raw, &a.ExtGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'extGroupId': %w", err)
		}
		delete(object, "extGroupId")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NiddInformation to handle AdditionalProperties
func (a NiddInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afId"], err = json.Marshal(a.AfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afId': %w", err)
	}

	if len(a.ExtGroupId) != 0 {
		object["extGroupId"], err = json.Marshal(a.ExtGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extGroupId': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NonDynamic5Qi. Returns the specified
// element and whether it was found
func (a NonDynamic5Qi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NonDynamic5Qi
func (a *NonDynamic5Qi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NonDynamic5Qi to handle AdditionalProperties
func (a *NonDynamic5Qi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["averWindow"]; found {
		err = json.Unmarshal(raw, &a.AverWindow)
		if err != nil {
			return fmt.Errorf("error reading 'averWindow': %w", err)
		}
		delete(object, "averWindow")
	}

	if raw, found := object["cnPacketDelayBudgetDl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetDl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetDl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetDl")
	}

	if raw, found := object["cnPacketDelayBudgetUl"]; found {
		err = json.Unmarshal(raw, &a.CnPacketDelayBudgetUl)
		if err != nil {
			return fmt.Errorf("error reading 'cnPacketDelayBudgetUl': %w", err)
		}
		delete(object, "cnPacketDelayBudgetUl")
	}

	if raw, found := object["extMaxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.ExtMaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'extMaxDataBurstVol': %w", err)
		}
		delete(object, "extMaxDataBurstVol")
	}

	if raw, found := object["maxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.MaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'maxDataBurstVol': %w", err)
		}
		delete(object, "maxDataBurstVol")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NonDynamic5Qi to handle AdditionalProperties
func (a NonDynamic5Qi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AverWindow != 0 {
		object["averWindow"], err = json.Marshal(a.AverWindow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'averWindow': %w", err)
		}
	}

	if a.CnPacketDelayBudgetDl != 0 {
		object["cnPacketDelayBudgetDl"], err = json.Marshal(a.CnPacketDelayBudgetDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetDl': %w", err)
		}
	}

	if a.CnPacketDelayBudgetUl != 0 {
		object["cnPacketDelayBudgetUl"], err = json.Marshal(a.CnPacketDelayBudgetUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnPacketDelayBudgetUl': %w", err)
		}
	}

	if a.ExtMaxDataBurstVol != 0 {
		object["extMaxDataBurstVol"], err = json.Marshal(a.ExtMaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extMaxDataBurstVol': %w", err)
		}
	}

	if a.MaxDataBurstVol != 0 {
		object["maxDataBurstVol"], err = json.Marshal(a.MaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxDataBurstVol': %w", err)
		}
	}

	if a.PriorityLevel != 0 {
		object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NonUeN2InfoSubscriptionCreateData. Returns the specified
// element and whether it was found
func (a NonUeN2InfoSubscriptionCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NonUeN2InfoSubscriptionCreateData
func (a *NonUeN2InfoSubscriptionCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NonUeN2InfoSubscriptionCreateData to handle AdditionalProperties
func (a *NonUeN2InfoSubscriptionCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anTypeList"]; found {
		err = json.Unmarshal(raw, &a.AnTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'anTypeList': %w", err)
		}
		delete(object, "anTypeList")
	}

	if raw, found := object["globalRanNodeList"]; found {
		err = json.Unmarshal(raw, &a.GlobalRanNodeList)
		if err != nil {
			return fmt.Errorf("error reading 'globalRanNodeList': %w", err)
		}
		delete(object, "globalRanNodeList")
	}

	if raw, found := object["n2InformationClass"]; found {
		err = json.Unmarshal(raw, &a.N2InformationClass)
		if err != nil {
			return fmt.Errorf("error reading 'n2InformationClass': %w", err)
		}
		delete(object, "n2InformationClass")
	}

	if raw, found := object["n2NotifyCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.N2NotifyCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'n2NotifyCallbackUri': %w", err)
		}
		delete(object, "n2NotifyCallbackUri")
	}

	if raw, found := object["nfId"]; found {
		err = json.Unmarshal(raw, &a.NfId)
		if err != nil {
			return fmt.Errorf("error reading 'nfId': %w", err)
		}
		delete(object, "nfId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NonUeN2InfoSubscriptionCreateData to handle AdditionalProperties
func (a NonUeN2InfoSubscriptionCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnTypeList) != 0 {
		object["anTypeList"], err = json.Marshal(a.AnTypeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anTypeList': %w", err)
		}
	}

	if len(a.GlobalRanNodeList) != 0 {
		object["globalRanNodeList"], err = json.Marshal(a.GlobalRanNodeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalRanNodeList': %w", err)
		}
	}

	object["n2InformationClass"], err = json.Marshal(a.N2InformationClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n2InformationClass': %w", err)
	}

	object["n2NotifyCallbackUri"], err = json.Marshal(a.N2NotifyCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n2NotifyCallbackUri': %w", err)
	}

	if a.NfId != nil {
		object["nfId"], err = json.Marshal(a.NfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NonUeN2InfoSubscriptionCreatedData. Returns the specified
// element and whether it was found
func (a NonUeN2InfoSubscriptionCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NonUeN2InfoSubscriptionCreatedData
func (a *NonUeN2InfoSubscriptionCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NonUeN2InfoSubscriptionCreatedData to handle AdditionalProperties
func (a *NonUeN2InfoSubscriptionCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n2InformationClass"]; found {
		err = json.Unmarshal(raw, &a.N2InformationClass)
		if err != nil {
			return fmt.Errorf("error reading 'n2InformationClass': %w", err)
		}
		delete(object, "n2InformationClass")
	}

	if raw, found := object["n2NotifySubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.N2NotifySubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'n2NotifySubscriptionId': %w", err)
		}
		delete(object, "n2NotifySubscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NonUeN2InfoSubscriptionCreatedData to handle AdditionalProperties
func (a NonUeN2InfoSubscriptionCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N2InformationClass != nil {
		object["n2InformationClass"], err = json.Marshal(a.N2InformationClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2InformationClass': %w", err)
		}
	}

	object["n2NotifySubscriptionId"], err = json.Marshal(a.N2NotifySubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n2NotifySubscriptionId': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotifCondition. Returns the specified
// element and whether it was found
func (a NotifCondition) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotifCondition
func (a *NotifCondition) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotifCondition to handle AdditionalProperties
func (a *NotifCondition) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["monitoredAttributes"]; found {
		err = json.Unmarshal(raw, &a.MonitoredAttributes)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredAttributes': %w", err)
		}
		delete(object, "monitoredAttributes")
	}

	if raw, found := object["unmonitoredAttributes"]; found {
		err = json.Unmarshal(raw, &a.UnmonitoredAttributes)
		if err != nil {
			return fmt.Errorf("error reading 'unmonitoredAttributes': %w", err)
		}
		delete(object, "unmonitoredAttributes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotifCondition to handle AdditionalProperties
func (a NotifCondition) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.MonitoredAttributes) != 0 {
		object["monitoredAttributes"], err = json.Marshal(a.MonitoredAttributes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monitoredAttributes': %w", err)
		}
	}

	if len(a.UnmonitoredAttributes) != 0 {
		object["unmonitoredAttributes"], err = json.Marshal(a.UnmonitoredAttributes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unmonitoredAttributes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Notification. Returns the specified
// element and whether it was found
func (a Notification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Notification
func (a *Notification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Notification to handle AdditionalProperties
func (a *Notification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["candPolicies"]; found {
		err = json.Unmarshal(raw, &a.CandPolicies)
		if err != nil {
			return fmt.Errorf("error reading 'candPolicies': %w", err)
		}
		delete(object, "candPolicies")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["timeWindow"]; found {
		err = json.Unmarshal(raw, &a.TimeWindow)
		if err != nil {
			return fmt.Errorf("error reading 'timeWindow': %w", err)
		}
		delete(object, "timeWindow")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Notification to handle AdditionalProperties
func (a Notification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	if len(a.CandPolicies) != 0 {
		object["candPolicies"], err = json.Marshal(a.CandPolicies)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'candPolicies': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.TimeWindow != nil {
		object["timeWindow"], err = json.Marshal(a.TimeWindow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeWindow': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotificationData. Returns the specified
// element and whether it was found
func (a NotificationData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotificationData
func (a *NotificationData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotificationData to handle AdditionalProperties
func (a *NotificationData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["conditionEvent"]; found {
		err = json.Unmarshal(raw, &a.ConditionEvent)
		if err != nil {
			return fmt.Errorf("error reading 'conditionEvent': %w", err)
		}
		delete(object, "conditionEvent")
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["nfInstanceUri"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceUri)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceUri': %w", err)
		}
		delete(object, "nfInstanceUri")
	}

	if raw, found := object["nfProfile"]; found {
		err = json.Unmarshal(raw, &a.NfProfile)
		if err != nil {
			return fmt.Errorf("error reading 'nfProfile': %w", err)
		}
		delete(object, "nfProfile")
	}

	if raw, found := object["profileChanges"]; found {
		err = json.Unmarshal(raw, &a.ProfileChanges)
		if err != nil {
			return fmt.Errorf("error reading 'profileChanges': %w", err)
		}
		delete(object, "profileChanges")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotificationData to handle AdditionalProperties
func (a NotificationData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConditionEvent != nil {
		object["conditionEvent"], err = json.Marshal(a.ConditionEvent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'conditionEvent': %w", err)
		}
	}

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	object["nfInstanceUri"], err = json.Marshal(a.NfInstanceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceUri': %w", err)
	}

	if a.NfProfile != nil {
		object["nfProfile"], err = json.Marshal(a.NfProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfProfile': %w", err)
		}
	}

	if len(a.ProfileChanges) != 0 {
		object["profileChanges"], err = json.Marshal(a.ProfileChanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'profileChanges': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotificationData_NfProfile. Returns the specified
// element and whether it was found
func (a NotificationData_NfProfile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotificationData_NfProfile
func (a *NotificationData_NfProfile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotificationData_NfProfile to handle AdditionalProperties
func (a *NotificationData_NfProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNfDomains"]; found {
		err = json.Unmarshal(raw, &a.AllowedNfDomains)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNfDomains': %w", err)
		}
		delete(object, "allowedNfDomains")
	}

	if raw, found := object["allowedNfTypes"]; found {
		err = json.Unmarshal(raw, &a.AllowedNfTypes)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNfTypes': %w", err)
		}
		delete(object, "allowedNfTypes")
	}

	if raw, found := object["allowedNssais"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssais)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssais': %w", err)
		}
		delete(object, "allowedNssais")
	}

	if raw, found := object["allowedPlmns"]; found {
		err = json.Unmarshal(raw, &a.AllowedPlmns)
		if err != nil {
			return fmt.Errorf("error reading 'allowedPlmns': %w", err)
		}
		delete(object, "allowedPlmns")
	}

	if raw, found := object["allowedSnpns"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnpns)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnpns': %w", err)
		}
		delete(object, "allowedSnpns")
	}

	if raw, found := object["amfInfo"]; found {
		err = json.Unmarshal(raw, &a.AmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'amfInfo': %w", err)
		}
		delete(object, "amfInfo")
	}

	if raw, found := object["amfInfoList"]; found {
		err = json.Unmarshal(raw, &a.AmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'amfInfoList': %w", err)
		}
		delete(object, "amfInfoList")
	}

	if raw, found := object["ausfInfo"]; found {
		err = json.Unmarshal(raw, &a.AusfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInfo': %w", err)
		}
		delete(object, "ausfInfo")
	}

	if raw, found := object["ausfInfoList"]; found {
		err = json.Unmarshal(raw, &a.AusfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInfoList': %w", err)
		}
		delete(object, "ausfInfoList")
	}

	if raw, found := object["bsfInfo"]; found {
		err = json.Unmarshal(raw, &a.BsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'bsfInfo': %w", err)
		}
		delete(object, "bsfInfo")
	}

	if raw, found := object["bsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.BsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'bsfInfoList': %w", err)
		}
		delete(object, "bsfInfoList")
	}

	if raw, found := object["capacity"]; found {
		err = json.Unmarshal(raw, &a.Capacity)
		if err != nil {
			return fmt.Errorf("error reading 'capacity': %w", err)
		}
		delete(object, "capacity")
	}

	if raw, found := object["chfInfo"]; found {
		err = json.Unmarshal(raw, &a.ChfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfo': %w", err)
		}
		delete(object, "chfInfo")
	}

	if raw, found := object["chfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ChfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfoList': %w", err)
		}
		delete(object, "chfInfoList")
	}

	if raw, found := object["customInfo"]; found {
		err = json.Unmarshal(raw, &a.CustomInfo)
		if err != nil {
			return fmt.Errorf("error reading 'customInfo': %w", err)
		}
		delete(object, "customInfo")
	}

	if raw, found := object["defaultNotificationSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.DefaultNotificationSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'defaultNotificationSubscriptions': %w", err)
		}
		delete(object, "defaultNotificationSubscriptions")
	}

	if raw, found := object["fqdn"]; found {
		err = json.Unmarshal(raw, &a.Fqdn)
		if err != nil {
			return fmt.Errorf("error reading 'fqdn': %w", err)
		}
		delete(object, "fqdn")
	}

	if raw, found := object["gmlcInfo"]; found {
		err = json.Unmarshal(raw, &a.GmlcInfo)
		if err != nil {
			return fmt.Errorf("error reading 'gmlcInfo': %w", err)
		}
		delete(object, "gmlcInfo")
	}

	if raw, found := object["heartBeatTimer"]; found {
		err = json.Unmarshal(raw, &a.HeartBeatTimer)
		if err != nil {
			return fmt.Errorf("error reading 'heartBeatTimer': %w", err)
		}
		delete(object, "heartBeatTimer")
	}

	if raw, found := object["hssInfoList"]; found {
		err = json.Unmarshal(raw, &a.HssInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'hssInfoList': %w", err)
		}
		delete(object, "hssInfoList")
	}

	if raw, found := object["interPlmnFqdn"]; found {
		err = json.Unmarshal(raw, &a.InterPlmnFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'interPlmnFqdn': %w", err)
		}
		delete(object, "interPlmnFqdn")
	}

	if raw, found := object["ipv4Addresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addresses': %w", err)
		}
		delete(object, "ipv4Addresses")
	}

	if raw, found := object["ipv6Addresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addresses': %w", err)
		}
		delete(object, "ipv6Addresses")
	}

	if raw, found := object["lcHSupportInd"]; found {
		err = json.Unmarshal(raw, &a.LcHSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'lcHSupportInd': %w", err)
		}
		delete(object, "lcHSupportInd")
	}

	if raw, found := object["lmfInfo"]; found {
		err = json.Unmarshal(raw, &a.LmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'lmfInfo': %w", err)
		}
		delete(object, "lmfInfo")
	}

	if raw, found := object["load"]; found {
		err = json.Unmarshal(raw, &a.Load)
		if err != nil {
			return fmt.Errorf("error reading 'load': %w", err)
		}
		delete(object, "load")
	}

	if raw, found := object["loadTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.LoadTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'loadTimeStamp': %w", err)
		}
		delete(object, "loadTimeStamp")
	}

	if raw, found := object["locality"]; found {
		err = json.Unmarshal(raw, &a.Locality)
		if err != nil {
			return fmt.Errorf("error reading 'locality': %w", err)
		}
		delete(object, "locality")
	}

	if raw, found := object["nefInfo"]; found {
		err = json.Unmarshal(raw, &a.NefInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nefInfo': %w", err)
		}
		delete(object, "nefInfo")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["nfInstanceName"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceName)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceName': %w", err)
		}
		delete(object, "nfInstanceName")
	}

	if raw, found := object["nfProfileChangesInd"]; found {
		err = json.Unmarshal(raw, &a.NfProfileChangesInd)
		if err != nil {
			return fmt.Errorf("error reading 'nfProfileChangesInd': %w", err)
		}
		delete(object, "nfProfileChangesInd")
	}

	if raw, found := object["nfProfileChangesSupportInd"]; found {
		err = json.Unmarshal(raw, &a.NfProfileChangesSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'nfProfileChangesSupportInd': %w", err)
		}
		delete(object, "nfProfileChangesSupportInd")
	}

	if raw, found := object["nfServiceList"]; found {
		err = json.Unmarshal(raw, &a.NfServiceList)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceList': %w", err)
		}
		delete(object, "nfServiceList")
	}

	if raw, found := object["nfServicePersistence"]; found {
		err = json.Unmarshal(raw, &a.NfServicePersistence)
		if err != nil {
			return fmt.Errorf("error reading 'nfServicePersistence': %w", err)
		}
		delete(object, "nfServicePersistence")
	}

	if raw, found := object["nfServices"]; found {
		err = json.Unmarshal(raw, &a.NfServices)
		if err != nil {
			return fmt.Errorf("error reading 'nfServices': %w", err)
		}
		delete(object, "nfServices")
	}

	if raw, found := object["nfSetIdList"]; found {
		err = json.Unmarshal(raw, &a.NfSetIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetIdList': %w", err)
		}
		delete(object, "nfSetIdList")
	}

	if raw, found := object["nfSetRecoveryTimeList"]; found {
		err = json.Unmarshal(raw, &a.NfSetRecoveryTimeList)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetRecoveryTimeList': %w", err)
		}
		delete(object, "nfSetRecoveryTimeList")
	}

	if raw, found := object["nfStatus"]; found {
		err = json.Unmarshal(raw, &a.NfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'nfStatus': %w", err)
		}
		delete(object, "nfStatus")
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if raw, found := object["nrfInfo"]; found {
		err = json.Unmarshal(raw, &a.NrfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nrfInfo': %w", err)
		}
		delete(object, "nrfInfo")
	}

	if raw, found := object["nsiList"]; found {
		err = json.Unmarshal(raw, &a.NsiList)
		if err != nil {
			return fmt.Errorf("error reading 'nsiList': %w", err)
		}
		delete(object, "nsiList")
	}

	if raw, found := object["nwdafInfo"]; found {
		err = json.Unmarshal(raw, &a.NwdafInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwdafInfo': %w", err)
		}
		delete(object, "nwdafInfo")
	}

	if raw, found := object["olcHSupportInd"]; found {
		err = json.Unmarshal(raw, &a.OlcHSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'olcHSupportInd': %w", err)
		}
		delete(object, "olcHSupportInd")
	}

	if raw, found := object["pcfInfo"]; found {
		err = json.Unmarshal(raw, &a.PcfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pcfInfo': %w", err)
		}
		delete(object, "pcfInfo")
	}

	if raw, found := object["pcfInfoList"]; found {
		err = json.Unmarshal(raw, &a.PcfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'pcfInfoList': %w", err)
		}
		delete(object, "pcfInfoList")
	}

	if raw, found := object["pcscfInfoList"]; found {
		err = json.Unmarshal(raw, &a.PcscfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfInfoList': %w", err)
		}
		delete(object, "pcscfInfoList")
	}

	if raw, found := object["perPlmnSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.PerPlmnSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'perPlmnSnssaiList': %w", err)
		}
		delete(object, "perPlmnSnssaiList")
	}

	if raw, found := object["plmnList"]; found {
		err = json.Unmarshal(raw, &a.PlmnList)
		if err != nil {
			return fmt.Errorf("error reading 'plmnList': %w", err)
		}
		delete(object, "plmnList")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["sNssais"]; found {
		err = json.Unmarshal(raw, &a.SNssais)
		if err != nil {
			return fmt.Errorf("error reading 'sNssais': %w", err)
		}
		delete(object, "sNssais")
	}

	if raw, found := object["scpDomains"]; found {
		err = json.Unmarshal(raw, &a.ScpDomains)
		if err != nil {
			return fmt.Errorf("error reading 'scpDomains': %w", err)
		}
		delete(object, "scpDomains")
	}

	if raw, found := object["scpInfo"]; found {
		err = json.Unmarshal(raw, &a.ScpInfo)
		if err != nil {
			return fmt.Errorf("error reading 'scpInfo': %w", err)
		}
		delete(object, "scpInfo")
	}

	if raw, found := object["serviceSetRecoveryTimeList"]; found {
		err = json.Unmarshal(raw, &a.ServiceSetRecoveryTimeList)
		if err != nil {
			return fmt.Errorf("error reading 'serviceSetRecoveryTimeList': %w", err)
		}
		delete(object, "serviceSetRecoveryTimeList")
	}

	if raw, found := object["servingScope"]; found {
		err = json.Unmarshal(raw, &a.ServingScope)
		if err != nil {
			return fmt.Errorf("error reading 'servingScope': %w", err)
		}
		delete(object, "servingScope")
	}

	if raw, found := object["smfInfo"]; found {
		err = json.Unmarshal(raw, &a.SmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smfInfo': %w", err)
		}
		delete(object, "smfInfo")
	}

	if raw, found := object["smfInfoList"]; found {
		err = json.Unmarshal(raw, &a.SmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'smfInfoList': %w", err)
		}
		delete(object, "smfInfoList")
	}

	if raw, found := object["snpnList"]; found {
		err = json.Unmarshal(raw, &a.SnpnList)
		if err != nil {
			return fmt.Errorf("error reading 'snpnList': %w", err)
		}
		delete(object, "snpnList")
	}

	if raw, found := object["udmInfo"]; found {
		err = json.Unmarshal(raw, &a.UdmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udmInfo': %w", err)
		}
		delete(object, "udmInfo")
	}

	if raw, found := object["udmInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udmInfoList': %w", err)
		}
		delete(object, "udmInfoList")
	}

	if raw, found := object["udrInfo"]; found {
		err = json.Unmarshal(raw, &a.UdrInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udrInfo': %w", err)
		}
		delete(object, "udrInfo")
	}

	if raw, found := object["udrInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdrInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udrInfoList': %w", err)
		}
		delete(object, "udrInfoList")
	}

	if raw, found := object["udsfInfo"]; found {
		err = json.Unmarshal(raw, &a.UdsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'udsfInfo': %w", err)
		}
		delete(object, "udsfInfo")
	}

	if raw, found := object["udsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.UdsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'udsfInfoList': %w", err)
		}
		delete(object, "udsfInfoList")
	}

	if raw, found := object["upfInfo"]; found {
		err = json.Unmarshal(raw, &a.UpfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upfInfo': %w", err)
		}
		delete(object, "upfInfo")
	}

	if raw, found := object["upfInfoList"]; found {
		err = json.Unmarshal(raw, &a.UpfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'upfInfoList': %w", err)
		}
		delete(object, "upfInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotificationData_NfProfile to handle AdditionalProperties
func (a NotificationData_NfProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedNfDomains) != 0 {
		object["allowedNfDomains"], err = json.Marshal(a.AllowedNfDomains)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNfDomains': %w", err)
		}
	}

	if len(a.AllowedNfTypes) != 0 {
		object["allowedNfTypes"], err = json.Marshal(a.AllowedNfTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNfTypes': %w", err)
		}
	}

	if len(a.AllowedNssais) != 0 {
		object["allowedNssais"], err = json.Marshal(a.AllowedNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssais': %w", err)
		}
	}

	if len(a.AllowedPlmns) != 0 {
		object["allowedPlmns"], err = json.Marshal(a.AllowedPlmns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedPlmns': %w", err)
		}
	}

	if len(a.AllowedSnpns) != 0 {
		object["allowedSnpns"], err = json.Marshal(a.AllowedSnpns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSnpns': %w", err)
		}
	}

	if a.AmfInfo != nil {
		object["amfInfo"], err = json.Marshal(a.AmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfInfo': %w", err)
		}
	}

	if a.AmfInfoList != nil {
		object["amfInfoList"], err = json.Marshal(a.AmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfInfoList': %w", err)
		}
	}

	if a.AusfInfo != nil {
		object["ausfInfo"], err = json.Marshal(a.AusfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ausfInfo': %w", err)
		}
	}

	if a.AusfInfoList != nil {
		object["ausfInfoList"], err = json.Marshal(a.AusfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ausfInfoList': %w", err)
		}
	}

	if a.BsfInfo != nil {
		object["bsfInfo"], err = json.Marshal(a.BsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bsfInfo': %w", err)
		}
	}

	if a.BsfInfoList != nil {
		object["bsfInfoList"], err = json.Marshal(a.BsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bsfInfoList': %w", err)
		}
	}

	if a.Capacity != nil {
		object["capacity"], err = json.Marshal(a.Capacity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'capacity': %w", err)
		}
	}

	if a.ChfInfo != nil {
		object["chfInfo"], err = json.Marshal(a.ChfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfo': %w", err)
		}
	}

	if a.ChfInfoList != nil {
		object["chfInfoList"], err = json.Marshal(a.ChfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfoList': %w", err)
		}
	}

	if a.CustomInfo != nil {
		object["customInfo"], err = json.Marshal(a.CustomInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'customInfo': %w", err)
		}
	}

	if a.DefaultNotificationSubscriptions != nil {
		object["defaultNotificationSubscriptions"], err = json.Marshal(a.DefaultNotificationSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultNotificationSubscriptions': %w", err)
		}
	}

	if a.Fqdn != nil {
		object["fqdn"], err = json.Marshal(a.Fqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fqdn': %w", err)
		}
	}

	if a.GmlcInfo != nil {
		object["gmlcInfo"], err = json.Marshal(a.GmlcInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gmlcInfo': %w", err)
		}
	}

	if a.HeartBeatTimer != nil {
		object["heartBeatTimer"], err = json.Marshal(a.HeartBeatTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'heartBeatTimer': %w", err)
		}
	}

	if a.HssInfoList != nil {
		object["hssInfoList"], err = json.Marshal(a.HssInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hssInfoList': %w", err)
		}
	}

	if a.InterPlmnFqdn != nil {
		object["interPlmnFqdn"], err = json.Marshal(a.InterPlmnFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interPlmnFqdn': %w", err)
		}
	}

	if len(a.Ipv4Addresses) != 0 {
		object["ipv4Addresses"], err = json.Marshal(a.Ipv4Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addresses': %w", err)
		}
	}

	if len(a.Ipv6Addresses) != 0 {
		object["ipv6Addresses"], err = json.Marshal(a.Ipv6Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addresses': %w", err)
		}
	}

	if a.LcHSupportInd != nil {
		object["lcHSupportInd"], err = json.Marshal(a.LcHSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcHSupportInd': %w", err)
		}
	}

	if a.LmfInfo != nil {
		object["lmfInfo"], err = json.Marshal(a.LmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lmfInfo': %w", err)
		}
	}

	if a.Load != nil {
		object["load"], err = json.Marshal(a.Load)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'load': %w", err)
		}
	}

	if a.LoadTimeStamp != nil {
		object["loadTimeStamp"], err = json.Marshal(a.LoadTimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loadTimeStamp': %w", err)
		}
	}

	if a.Locality != nil {
		object["locality"], err = json.Marshal(a.Locality)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locality': %w", err)
		}
	}

	if a.NefInfo != nil {
		object["nefInfo"], err = json.Marshal(a.NefInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefInfo': %w", err)
		}
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.NfInstanceName != nil {
		object["nfInstanceName"], err = json.Marshal(a.NfInstanceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfInstanceName': %w", err)
		}
	}

	if a.NfProfileChangesInd != nil {
		object["nfProfileChangesInd"], err = json.Marshal(a.NfProfileChangesInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfProfileChangesInd': %w", err)
		}
	}

	if a.NfProfileChangesSupportInd != nil {
		object["nfProfileChangesSupportInd"], err = json.Marshal(a.NfProfileChangesSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfProfileChangesSupportInd': %w", err)
		}
	}

	if a.NfServiceList != nil {
		object["nfServiceList"], err = json.Marshal(a.NfServiceList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServiceList': %w", err)
		}
	}

	if a.NfServicePersistence != nil {
		object["nfServicePersistence"], err = json.Marshal(a.NfServicePersistence)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServicePersistence': %w", err)
		}
	}

	if a.NfServices != nil {
		object["nfServices"], err = json.Marshal(a.NfServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServices': %w", err)
		}
	}

	if len(a.NfSetIdList) != 0 {
		object["nfSetIdList"], err = json.Marshal(a.NfSetIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetIdList': %w", err)
		}
	}

	if a.NfSetRecoveryTimeList != nil {
		object["nfSetRecoveryTimeList"], err = json.Marshal(a.NfSetRecoveryTimeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetRecoveryTimeList': %w", err)
		}
	}

	object["nfStatus"], err = json.Marshal(a.NfStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfStatus': %w", err)
	}

	object["nfType"], err = json.Marshal(a.NfType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
	}

	if a.NrfInfo != nil {
		object["nrfInfo"], err = json.Marshal(a.NrfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfInfo': %w", err)
		}
	}

	if len(a.NsiList) != 0 {
		object["nsiList"], err = json.Marshal(a.NsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiList': %w", err)
		}
	}

	if a.NwdafInfo != nil {
		object["nwdafInfo"], err = json.Marshal(a.NwdafInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwdafInfo': %w", err)
		}
	}

	if a.OlcHSupportInd != nil {
		object["olcHSupportInd"], err = json.Marshal(a.OlcHSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'olcHSupportInd': %w", err)
		}
	}

	if a.PcfInfo != nil {
		object["pcfInfo"], err = json.Marshal(a.PcfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfInfo': %w", err)
		}
	}

	if a.PcfInfoList != nil {
		object["pcfInfoList"], err = json.Marshal(a.PcfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfInfoList': %w", err)
		}
	}

	if a.PcscfInfoList != nil {
		object["pcscfInfoList"], err = json.Marshal(a.PcscfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfInfoList': %w", err)
		}
	}

	if len(a.PerPlmnSnssaiList) != 0 {
		object["perPlmnSnssaiList"], err = json.Marshal(a.PerPlmnSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'perPlmnSnssaiList': %w", err)
		}
	}

	if len(a.PlmnList) != 0 {
		object["plmnList"], err = json.Marshal(a.PlmnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnList': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if len(a.SNssais) != 0 {
		object["sNssais"], err = json.Marshal(a.SNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssais': %w", err)
		}
	}

	if len(a.ScpDomains) != 0 {
		object["scpDomains"], err = json.Marshal(a.ScpDomains)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpDomains': %w", err)
		}
	}

	if a.ScpInfo != nil {
		object["scpInfo"], err = json.Marshal(a.ScpInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpInfo': %w", err)
		}
	}

	if a.ServiceSetRecoveryTimeList != nil {
		object["serviceSetRecoveryTimeList"], err = json.Marshal(a.ServiceSetRecoveryTimeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceSetRecoveryTimeList': %w", err)
		}
	}

	if len(a.ServingScope) != 0 {
		object["servingScope"], err = json.Marshal(a.ServingScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingScope': %w", err)
		}
	}

	if a.SmfInfo != nil {
		object["smfInfo"], err = json.Marshal(a.SmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInfo': %w", err)
		}
	}

	if a.SmfInfoList != nil {
		object["smfInfoList"], err = json.Marshal(a.SmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInfoList': %w", err)
		}
	}

	if len(a.SnpnList) != 0 {
		object["snpnList"], err = json.Marshal(a.SnpnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snpnList': %w", err)
		}
	}

	if a.UdmInfo != nil {
		object["udmInfo"], err = json.Marshal(a.UdmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmInfo': %w", err)
		}
	}

	if a.UdmInfoList != nil {
		object["udmInfoList"], err = json.Marshal(a.UdmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmInfoList': %w", err)
		}
	}

	if a.UdrInfo != nil {
		object["udrInfo"], err = json.Marshal(a.UdrInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udrInfo': %w", err)
		}
	}

	if a.UdrInfoList != nil {
		object["udrInfoList"], err = json.Marshal(a.UdrInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udrInfoList': %w", err)
		}
	}

	if a.UdsfInfo != nil {
		object["udsfInfo"], err = json.Marshal(a.UdsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udsfInfo': %w", err)
		}
	}

	if a.UdsfInfoList != nil {
		object["udsfInfoList"], err = json.Marshal(a.UdsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udsfInfoList': %w", err)
		}
	}

	if a.UpfInfo != nil {
		object["upfInfo"], err = json.Marshal(a.UpfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upfInfo': %w", err)
		}
	}

	if a.UpfInfoList != nil {
		object["upfInfoList"], err = json.Marshal(a.UpfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upfInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotificationItem. Returns the specified
// element and whether it was found
func (a NotificationItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotificationItem
func (a *NotificationItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotificationItem to handle AdditionalProperties
func (a *NotificationItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifItems"]; found {
		err = json.Unmarshal(raw, &a.NotifItems)
		if err != nil {
			return fmt.Errorf("error reading 'notifItems': %w", err)
		}
		delete(object, "notifItems")
	}

	if raw, found := object["resourceId"]; found {
		err = json.Unmarshal(raw, &a.ResourceId)
		if err != nil {
			return fmt.Errorf("error reading 'resourceId': %w", err)
		}
		delete(object, "resourceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotificationItem to handle AdditionalProperties
func (a NotificationItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["notifItems"], err = json.Marshal(a.NotifItems)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifItems': %w", err)
	}

	object["resourceId"], err = json.Marshal(a.ResourceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotifiedPosInfo. Returns the specified
// element and whether it was found
func (a NotifiedPosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotifiedPosInfo
func (a *NotifiedPosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotifiedPosInfo to handle AdditionalProperties
func (a *NotifiedPosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationEstimate"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationEstimate': %w", err)
		}
		delete(object, "ageOfLocationEstimate")
	}

	if raw, found := object["altitude"]; found {
		err = json.Unmarshal(raw, &a.Altitude)
		if err != nil {
			return fmt.Errorf("error reading 'altitude': %w", err)
		}
		delete(object, "altitude")
	}

	if raw, found := object["barometricPressure"]; found {
		err = json.Unmarshal(raw, &a.BarometricPressure)
		if err != nil {
			return fmt.Errorf("error reading 'barometricPressure': %w", err)
		}
		delete(object, "barometricPressure")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["gnssPositioningDataList"]; found {
		err = json.Unmarshal(raw, &a.GnssPositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'gnssPositioningDataList': %w", err)
		}
		delete(object, "gnssPositioningDataList")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hgmlcCallBackURI"]; found {
		err = json.Unmarshal(raw, &a.HgmlcCallBackURI)
		if err != nil {
			return fmt.Errorf("error reading 'hgmlcCallBackURI': %w", err)
		}
		delete(object, "hgmlcCallBackURI")
	}

	if raw, found := object["ldrReference"]; found {
		err = json.Unmarshal(raw, &a.LdrReference)
		if err != nil {
			return fmt.Errorf("error reading 'ldrReference': %w", err)
		}
		delete(object, "ldrReference")
	}

	if raw, found := object["locationEstimate"]; found {
		err = json.Unmarshal(raw, &a.LocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'locationEstimate': %w", err)
		}
		delete(object, "locationEstimate")
	}

	if raw, found := object["locationEvent"]; found {
		err = json.Unmarshal(raw, &a.LocationEvent)
		if err != nil {
			return fmt.Errorf("error reading 'locationEvent': %w", err)
		}
		delete(object, "locationEvent")
	}

	if raw, found := object["mscServerId"]; found {
		err = json.Unmarshal(raw, &a.MscServerId)
		if err != nil {
			return fmt.Errorf("error reading 'mscServerId': %w", err)
		}
		delete(object, "mscServerId")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["positioningDataList"]; found {
		err = json.Unmarshal(raw, &a.PositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'positioningDataList': %w", err)
		}
		delete(object, "positioningDataList")
	}

	if raw, found := object["servingLMFIdentification"]; found {
		err = json.Unmarshal(raw, &a.ServingLMFIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'servingLMFIdentification': %w", err)
		}
		delete(object, "servingLMFIdentification")
	}

	if raw, found := object["servingNode"]; found {
		err = json.Unmarshal(raw, &a.ServingNode)
		if err != nil {
			return fmt.Errorf("error reading 'servingNode': %w", err)
		}
		delete(object, "servingNode")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["targetMmeName"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeName)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeName': %w", err)
		}
		delete(object, "targetMmeName")
	}

	if raw, found := object["targetMmeRealm"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeRealm)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeRealm': %w", err)
		}
		delete(object, "targetMmeRealm")
	}

	if raw, found := object["terminationCause"]; found {
		err = json.Unmarshal(raw, &a.TerminationCause)
		if err != nil {
			return fmt.Errorf("error reading 'terminationCause': %w", err)
		}
		delete(object, "terminationCause")
	}

	if raw, found := object["utranSrvccInd"]; found {
		err = json.Unmarshal(raw, &a.UtranSrvccInd)
		if err != nil {
			return fmt.Errorf("error reading 'utranSrvccInd': %w", err)
		}
		delete(object, "utranSrvccInd")
	}

	if raw, found := object["velocityEstimate"]; found {
		err = json.Unmarshal(raw, &a.VelocityEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'velocityEstimate': %w", err)
		}
		delete(object, "velocityEstimate")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotifiedPosInfo to handle AdditionalProperties
func (a NotifiedPosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationEstimate != nil {
		object["ageOfLocationEstimate"], err = json.Marshal(a.AgeOfLocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationEstimate': %w", err)
		}
	}

	if a.Altitude != nil {
		object["altitude"], err = json.Marshal(a.Altitude)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altitude': %w", err)
		}
	}

	if a.BarometricPressure != nil {
		object["barometricPressure"], err = json.Marshal(a.BarometricPressure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'barometricPressure': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	if a.Ecgi != nil {
		object["ecgi"], err = json.Marshal(a.Ecgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
		}
	}

	if a.GnssPositioningDataList != nil {
		object["gnssPositioningDataList"], err = json.Marshal(a.GnssPositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gnssPositioningDataList': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HgmlcCallBackURI != nil {
		object["hgmlcCallBackURI"], err = json.Marshal(a.HgmlcCallBackURI)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hgmlcCallBackURI': %w", err)
		}
	}

	if a.LdrReference != nil {
		object["ldrReference"], err = json.Marshal(a.LdrReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ldrReference': %w", err)
		}
	}

	if a.LocationEstimate != nil {
		object["locationEstimate"], err = json.Marshal(a.LocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationEstimate': %w", err)
		}
	}

	object["locationEvent"], err = json.Marshal(a.LocationEvent)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'locationEvent': %w", err)
	}

	if len(a.MscServerId) != 0 {
		object["mscServerId"], err = json.Marshal(a.MscServerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mscServerId': %w", err)
		}
	}

	if a.Ncgi != nil {
		object["ncgi"], err = json.Marshal(a.Ncgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PositioningDataList != nil {
		object["positioningDataList"], err = json.Marshal(a.PositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'positioningDataList': %w", err)
		}
	}

	if a.ServingLMFIdentification != nil {
		object["servingLMFIdentification"], err = json.Marshal(a.ServingLMFIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingLMFIdentification': %w", err)
		}
	}

	if a.ServingNode != nil {
		object["servingNode"], err = json.Marshal(a.ServingNode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNode': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if len(a.TargetMmeName) != 0 {
		object["targetMmeName"], err = json.Marshal(a.TargetMmeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeName': %w", err)
		}
	}

	if len(a.TargetMmeRealm) != 0 {
		object["targetMmeRealm"], err = json.Marshal(a.TargetMmeRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeRealm': %w", err)
		}
	}

	if a.TerminationCause != nil {
		object["terminationCause"], err = json.Marshal(a.TerminationCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'terminationCause': %w", err)
		}
	}

	if a.UtranSrvccInd != nil {
		object["utranSrvccInd"], err = json.Marshal(a.UtranSrvccInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'utranSrvccInd': %w", err)
		}
	}

	if a.VelocityEstimate != nil {
		object["velocityEstimate"], err = json.Marshal(a.VelocityEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'velocityEstimate': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NotifyItem. Returns the specified
// element and whether it was found
func (a NotifyItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NotifyItem
func (a *NotifyItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NotifyItem to handle AdditionalProperties
func (a *NotifyItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["changes"]; found {
		err = json.Unmarshal(raw, &a.Changes)
		if err != nil {
			return fmt.Errorf("error reading 'changes': %w", err)
		}
		delete(object, "changes")
	}

	if raw, found := object["resourceId"]; found {
		err = json.Unmarshal(raw, &a.ResourceId)
		if err != nil {
			return fmt.Errorf("error reading 'resourceId': %w", err)
		}
		delete(object, "resourceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NotifyItem to handle AdditionalProperties
func (a NotifyItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["changes"], err = json.Marshal(a.Changes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'changes': %w", err)
	}

	object["resourceId"], err = json.Marshal(a.ResourceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NpnAccessInfo. Returns the specified
// element and whether it was found
func (a NpnAccessInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NpnAccessInfo
func (a *NpnAccessInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NpnAccessInfo to handle AdditionalProperties
func (a *NpnAccessInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cellCagInfo"]; found {
		err = json.Unmarshal(raw, &a.CellCagInfo)
		if err != nil {
			return fmt.Errorf("error reading 'cellCagInfo': %w", err)
		}
		delete(object, "cellCagInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NpnAccessInfo to handle AdditionalProperties
func (a NpnAccessInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CellCagInfo) != 0 {
		object["cellCagInfo"], err = json.Marshal(a.CellCagInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellCagInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrLocation. Returns the specified
// element and whether it was found
func (a NrLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrLocation
func (a *NrLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrLocation to handle AdditionalProperties
func (a *NrLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["globalGnbId"]; found {
		err = json.Unmarshal(raw, &a.GlobalGnbId)
		if err != nil {
			return fmt.Errorf("error reading 'globalGnbId': %w", err)
		}
		delete(object, "globalGnbId")
	}

	if raw, found := object["ignoreNcgi"]; found {
		err = json.Unmarshal(raw, &a.IgnoreNcgi)
		if err != nil {
			return fmt.Errorf("error reading 'ignoreNcgi': %w", err)
		}
		delete(object, "ignoreNcgi")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrLocation to handle AdditionalProperties
func (a NrLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.GlobalGnbId != nil {
		object["globalGnbId"], err = json.Marshal(a.GlobalGnbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalGnbId': %w", err)
		}
	}

	if a.IgnoreNcgi != nil {
		object["ignoreNcgi"], err = json.Marshal(a.IgnoreNcgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ignoreNcgi': %w", err)
		}
	}

	object["ncgi"], err = json.Marshal(a.Ncgi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
	}

	object["tai"], err = json.Marshal(a.Tai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tai': %w", err)
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrV2xAuth. Returns the specified
// element and whether it was found
func (a NrV2xAuth) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrV2xAuth
func (a *NrV2xAuth) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrV2xAuth to handle AdditionalProperties
func (a *NrV2xAuth) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pedestrianUeAuth"]; found {
		err = json.Unmarshal(raw, &a.PedestrianUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'pedestrianUeAuth': %w", err)
		}
		delete(object, "pedestrianUeAuth")
	}

	if raw, found := object["vehicleUeAuth"]; found {
		err = json.Unmarshal(raw, &a.VehicleUeAuth)
		if err != nil {
			return fmt.Errorf("error reading 'vehicleUeAuth': %w", err)
		}
		delete(object, "vehicleUeAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrV2xAuth to handle AdditionalProperties
func (a NrV2xAuth) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PedestrianUeAuth != nil {
		object["pedestrianUeAuth"], err = json.Marshal(a.PedestrianUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pedestrianUeAuth': %w", err)
		}
	}

	if a.VehicleUeAuth != nil {
		object["vehicleUeAuth"], err = json.Marshal(a.VehicleUeAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vehicleUeAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfInfo. Returns the specified
// element and whether it was found
func (a NrfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfInfo
func (a *NrfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfInfo to handle AdditionalProperties
func (a *NrfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["servedAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedAmfInfo': %w", err)
		}
		delete(object, "servedAmfInfo")
	}

	if raw, found := object["servedAmfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedAmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedAmfInfoList': %w", err)
		}
		delete(object, "servedAmfInfoList")
	}

	if raw, found := object["servedAusfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedAusfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedAusfInfo': %w", err)
		}
		delete(object, "servedAusfInfo")
	}

	if raw, found := object["servedAusfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedAusfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedAusfInfoList': %w", err)
		}
		delete(object, "servedAusfInfoList")
	}

	if raw, found := object["servedBsfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedBsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedBsfInfo': %w", err)
		}
		delete(object, "servedBsfInfo")
	}

	if raw, found := object["servedBsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedBsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedBsfInfoList': %w", err)
		}
		delete(object, "servedBsfInfoList")
	}

	if raw, found := object["servedChfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedChfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedChfInfo': %w", err)
		}
		delete(object, "servedChfInfo")
	}

	if raw, found := object["servedChfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedChfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedChfInfoList': %w", err)
		}
		delete(object, "servedChfInfoList")
	}

	if raw, found := object["servedGmlcInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedGmlcInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedGmlcInfo': %w", err)
		}
		delete(object, "servedGmlcInfo")
	}

	if raw, found := object["servedHssInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedHssInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedHssInfoList': %w", err)
		}
		delete(object, "servedHssInfoList")
	}

	if raw, found := object["servedLmfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedLmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedLmfInfo': %w", err)
		}
		delete(object, "servedLmfInfo")
	}

	if raw, found := object["servedNefInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedNefInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedNefInfo': %w", err)
		}
		delete(object, "servedNefInfo")
	}

	if raw, found := object["servedNfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedNfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedNfInfo': %w", err)
		}
		delete(object, "servedNfInfo")
	}

	if raw, found := object["servedNwdafInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedNwdafInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedNwdafInfo': %w", err)
		}
		delete(object, "servedNwdafInfo")
	}

	if raw, found := object["servedPcfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedPcfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedPcfInfo': %w", err)
		}
		delete(object, "servedPcfInfo")
	}

	if raw, found := object["servedPcfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedPcfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedPcfInfoList': %w", err)
		}
		delete(object, "servedPcfInfoList")
	}

	if raw, found := object["servedPcscfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedPcscfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedPcscfInfoList': %w", err)
		}
		delete(object, "servedPcscfInfoList")
	}

	if raw, found := object["servedScpInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedScpInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedScpInfoList': %w", err)
		}
		delete(object, "servedScpInfoList")
	}

	if raw, found := object["servedSmfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedSmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedSmfInfo': %w", err)
		}
		delete(object, "servedSmfInfo")
	}

	if raw, found := object["servedSmfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedSmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedSmfInfoList': %w", err)
		}
		delete(object, "servedSmfInfoList")
	}

	if raw, found := object["servedUdmInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedUdmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedUdmInfo': %w", err)
		}
		delete(object, "servedUdmInfo")
	}

	if raw, found := object["servedUdmInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedUdmInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedUdmInfoList': %w", err)
		}
		delete(object, "servedUdmInfoList")
	}

	if raw, found := object["servedUdrInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedUdrInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedUdrInfo': %w", err)
		}
		delete(object, "servedUdrInfo")
	}

	if raw, found := object["servedUdrInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedUdrInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedUdrInfoList': %w", err)
		}
		delete(object, "servedUdrInfoList")
	}

	if raw, found := object["servedUdsfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedUdsfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedUdsfInfo': %w", err)
		}
		delete(object, "servedUdsfInfo")
	}

	if raw, found := object["servedUdsfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedUdsfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedUdsfInfoList': %w", err)
		}
		delete(object, "servedUdsfInfoList")
	}

	if raw, found := object["servedUpfInfo"]; found {
		err = json.Unmarshal(raw, &a.ServedUpfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servedUpfInfo': %w", err)
		}
		delete(object, "servedUpfInfo")
	}

	if raw, found := object["servedUpfInfoList"]; found {
		err = json.Unmarshal(raw, &a.ServedUpfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'servedUpfInfoList': %w", err)
		}
		delete(object, "servedUpfInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfInfo to handle AdditionalProperties
func (a NrfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ServedAmfInfo != nil {
		object["servedAmfInfo"], err = json.Marshal(a.ServedAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedAmfInfo': %w", err)
		}
	}

	if a.ServedAmfInfoList != nil {
		object["servedAmfInfoList"], err = json.Marshal(a.ServedAmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedAmfInfoList': %w", err)
		}
	}

	if a.ServedAusfInfo != nil {
		object["servedAusfInfo"], err = json.Marshal(a.ServedAusfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedAusfInfo': %w", err)
		}
	}

	if a.ServedAusfInfoList != nil {
		object["servedAusfInfoList"], err = json.Marshal(a.ServedAusfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedAusfInfoList': %w", err)
		}
	}

	if a.ServedBsfInfo != nil {
		object["servedBsfInfo"], err = json.Marshal(a.ServedBsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedBsfInfo': %w", err)
		}
	}

	if a.ServedBsfInfoList != nil {
		object["servedBsfInfoList"], err = json.Marshal(a.ServedBsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedBsfInfoList': %w", err)
		}
	}

	if a.ServedChfInfo != nil {
		object["servedChfInfo"], err = json.Marshal(a.ServedChfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedChfInfo': %w", err)
		}
	}

	if a.ServedChfInfoList != nil {
		object["servedChfInfoList"], err = json.Marshal(a.ServedChfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedChfInfoList': %w", err)
		}
	}

	if a.ServedGmlcInfo != nil {
		object["servedGmlcInfo"], err = json.Marshal(a.ServedGmlcInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedGmlcInfo': %w", err)
		}
	}

	if a.ServedHssInfoList != nil {
		object["servedHssInfoList"], err = json.Marshal(a.ServedHssInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedHssInfoList': %w", err)
		}
	}

	if a.ServedLmfInfo != nil {
		object["servedLmfInfo"], err = json.Marshal(a.ServedLmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedLmfInfo': %w", err)
		}
	}

	if a.ServedNefInfo != nil {
		object["servedNefInfo"], err = json.Marshal(a.ServedNefInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedNefInfo': %w", err)
		}
	}

	if a.ServedNfInfo != nil {
		object["servedNfInfo"], err = json.Marshal(a.ServedNfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedNfInfo': %w", err)
		}
	}

	if a.ServedNwdafInfo != nil {
		object["servedNwdafInfo"], err = json.Marshal(a.ServedNwdafInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedNwdafInfo': %w", err)
		}
	}

	if a.ServedPcfInfo != nil {
		object["servedPcfInfo"], err = json.Marshal(a.ServedPcfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedPcfInfo': %w", err)
		}
	}

	if a.ServedPcfInfoList != nil {
		object["servedPcfInfoList"], err = json.Marshal(a.ServedPcfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedPcfInfoList': %w", err)
		}
	}

	if a.ServedPcscfInfoList != nil {
		object["servedPcscfInfoList"], err = json.Marshal(a.ServedPcscfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedPcscfInfoList': %w", err)
		}
	}

	if a.ServedScpInfoList != nil {
		object["servedScpInfoList"], err = json.Marshal(a.ServedScpInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedScpInfoList': %w", err)
		}
	}

	if a.ServedSmfInfo != nil {
		object["servedSmfInfo"], err = json.Marshal(a.ServedSmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedSmfInfo': %w", err)
		}
	}

	if a.ServedSmfInfoList != nil {
		object["servedSmfInfoList"], err = json.Marshal(a.ServedSmfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedSmfInfoList': %w", err)
		}
	}

	if a.ServedUdmInfo != nil {
		object["servedUdmInfo"], err = json.Marshal(a.ServedUdmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUdmInfo': %w", err)
		}
	}

	if a.ServedUdmInfoList != nil {
		object["servedUdmInfoList"], err = json.Marshal(a.ServedUdmInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUdmInfoList': %w", err)
		}
	}

	if a.ServedUdrInfo != nil {
		object["servedUdrInfo"], err = json.Marshal(a.ServedUdrInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUdrInfo': %w", err)
		}
	}

	if a.ServedUdrInfoList != nil {
		object["servedUdrInfoList"], err = json.Marshal(a.ServedUdrInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUdrInfoList': %w", err)
		}
	}

	if a.ServedUdsfInfo != nil {
		object["servedUdsfInfo"], err = json.Marshal(a.ServedUdsfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUdsfInfo': %w", err)
		}
	}

	if a.ServedUdsfInfoList != nil {
		object["servedUdsfInfoList"], err = json.Marshal(a.ServedUdsfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUdsfInfoList': %w", err)
		}
	}

	if a.ServedUpfInfo != nil {
		object["servedUpfInfo"], err = json.Marshal(a.ServedUpfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUpfInfo': %w", err)
		}
	}

	if a.ServedUpfInfoList != nil {
		object["servedUpfInfoList"], err = json.Marshal(a.ServedUpfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedUpfInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrppaInformation. Returns the specified
// element and whether it was found
func (a NrppaInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrppaInformation
func (a *NrppaInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrppaInformation to handle AdditionalProperties
func (a *NrppaInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfId"]; found {
		err = json.Unmarshal(raw, &a.NfId)
		if err != nil {
			return fmt.Errorf("error reading 'nfId': %w", err)
		}
		delete(object, "nfId")
	}

	if raw, found := object["nrppaPdu"]; found {
		err = json.Unmarshal(raw, &a.NrppaPdu)
		if err != nil {
			return fmt.Errorf("error reading 'nrppaPdu': %w", err)
		}
		delete(object, "nrppaPdu")
	}

	if raw, found := object["serviceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'serviceInstanceId': %w", err)
		}
		delete(object, "serviceInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrppaInformation to handle AdditionalProperties
func (a NrppaInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfId"], err = json.Marshal(a.NfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfId': %w", err)
	}

	object["nrppaPdu"], err = json.Marshal(a.NrppaPdu)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nrppaPdu': %w", err)
	}

	if a.ServiceInstanceId != nil {
		object["serviceInstanceId"], err = json.Marshal(a.ServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceInstanceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NsiInformation. Returns the specified
// element and whether it was found
func (a NsiInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NsiInformation
func (a *NsiInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NsiInformation to handle AdditionalProperties
func (a *NsiInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nrfAccessTokenUri"]; found {
		err = json.Unmarshal(raw, &a.NrfAccessTokenUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAccessTokenUri': %w", err)
		}
		delete(object, "nrfAccessTokenUri")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["nrfNfMgtUri"]; found {
		err = json.Unmarshal(raw, &a.NrfNfMgtUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfNfMgtUri': %w", err)
		}
		delete(object, "nrfNfMgtUri")
	}

	if raw, found := object["nsiId"]; found {
		err = json.Unmarshal(raw, &a.NsiId)
		if err != nil {
			return fmt.Errorf("error reading 'nsiId': %w", err)
		}
		delete(object, "nsiId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NsiInformation to handle AdditionalProperties
func (a NsiInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NrfAccessTokenUri != nil {
		object["nrfAccessTokenUri"], err = json.Marshal(a.NrfAccessTokenUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAccessTokenUri': %w", err)
		}
	}

	object["nrfId"], err = json.Marshal(a.NrfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
	}

	if a.NrfNfMgtUri != nil {
		object["nrfNfMgtUri"], err = json.Marshal(a.NrfNfMgtUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfNfMgtUri': %w", err)
		}
	}

	if a.NsiId != nil {
		object["nsiId"], err = json.Marshal(a.NsiId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NsmfEventExposure. Returns the specified
// element and whether it was found
func (a NsmfEventExposure) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NsmfEventExposure
func (a *NsmfEventExposure) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NsmfEventExposure to handle AdditionalProperties
func (a *NsmfEventExposure) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ImmeRep"]; found {
		err = json.Unmarshal(raw, &a.ImmeRep)
		if err != nil {
			return fmt.Errorf("error reading 'ImmeRep': %w", err)
		}
		delete(object, "ImmeRep")
	}

	if raw, found := object["altNotifFqdns"]; found {
		err = json.Unmarshal(raw, &a.AltNotifFqdns)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifFqdns': %w", err)
		}
		delete(object, "altNotifFqdns")
	}

	if raw, found := object["altNotifIpv4Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv4Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv4Addrs': %w", err)
		}
		delete(object, "altNotifIpv4Addrs")
	}

	if raw, found := object["altNotifIpv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv6Addrs': %w", err)
		}
		delete(object, "altNotifIpv6Addrs")
	}

	if raw, found := object["anyUeInd"]; found {
		err = json.Unmarshal(raw, &a.AnyUeInd)
		if err != nil {
			return fmt.Errorf("error reading 'anyUeInd': %w", err)
		}
		delete(object, "anyUeInd")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["eventSubs"]; found {
		err = json.Unmarshal(raw, &a.EventSubs)
		if err != nil {
			return fmt.Errorf("error reading 'eventSubs': %w", err)
		}
		delete(object, "eventSubs")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["grpRepTime"]; found {
		err = json.Unmarshal(raw, &a.GrpRepTime)
		if err != nil {
			return fmt.Errorf("error reading 'grpRepTime': %w", err)
		}
		delete(object, "grpRepTime")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["maxReportNbr"]; found {
		err = json.Unmarshal(raw, &a.MaxReportNbr)
		if err != nil {
			return fmt.Errorf("error reading 'maxReportNbr': %w", err)
		}
		delete(object, "maxReportNbr")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["notifMethod"]; found {
		err = json.Unmarshal(raw, &a.NotifMethod)
		if err != nil {
			return fmt.Errorf("error reading 'notifMethod': %w", err)
		}
		delete(object, "notifMethod")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["pduSeId"]; found {
		err = json.Unmarshal(raw, &a.PduSeId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSeId': %w", err)
		}
		delete(object, "pduSeId")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["sampRatio"]; found {
		err = json.Unmarshal(raw, &a.SampRatio)
		if err != nil {
			return fmt.Errorf("error reading 'sampRatio': %w", err)
		}
		delete(object, "sampRatio")
	}

	if raw, found := object["serviveName"]; found {
		err = json.Unmarshal(raw, &a.ServiveName)
		if err != nil {
			return fmt.Errorf("error reading 'serviveName': %w", err)
		}
		delete(object, "serviveName")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["subId"]; found {
		err = json.Unmarshal(raw, &a.SubId)
		if err != nil {
			return fmt.Errorf("error reading 'subId': %w", err)
		}
		delete(object, "subId")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NsmfEventExposure to handle AdditionalProperties
func (a NsmfEventExposure) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ImmeRep != nil {
		object["ImmeRep"], err = json.Marshal(a.ImmeRep)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ImmeRep': %w", err)
		}
	}

	if len(a.AltNotifFqdns) != 0 {
		object["altNotifFqdns"], err = json.Marshal(a.AltNotifFqdns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifFqdns': %w", err)
		}
	}

	if len(a.AltNotifIpv4Addrs) != 0 {
		object["altNotifIpv4Addrs"], err = json.Marshal(a.AltNotifIpv4Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv4Addrs': %w", err)
		}
	}

	if len(a.AltNotifIpv6Addrs) != 0 {
		object["altNotifIpv6Addrs"], err = json.Marshal(a.AltNotifIpv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv6Addrs': %w", err)
		}
	}

	if a.AnyUeInd != nil {
		object["anyUeInd"], err = json.Marshal(a.AnyUeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUeInd': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	object["eventSubs"], err = json.Marshal(a.EventSubs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventSubs': %w", err)
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.GroupId) != 0 {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if a.GrpRepTime != nil {
		object["grpRepTime"], err = json.Marshal(a.GrpRepTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'grpRepTime': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.MaxReportNbr != nil {
		object["maxReportNbr"], err = json.Marshal(a.MaxReportNbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxReportNbr': %w", err)
		}
	}

	object["notifId"], err = json.Marshal(a.NotifId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
	}

	if a.NotifMethod != nil {
		object["notifMethod"], err = json.Marshal(a.NotifMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifMethod': %w", err)
		}
	}

	object["notifUri"], err = json.Marshal(a.NotifUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
	}

	if a.PduSeId != nil {
		object["pduSeId"], err = json.Marshal(a.PduSeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSeId': %w", err)
		}
	}

	if a.RepPeriod != nil {
		object["repPeriod"], err = json.Marshal(a.RepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
		}
	}

	if a.SampRatio != 0 {
		object["sampRatio"], err = json.Marshal(a.SampRatio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sampRatio': %w", err)
		}
	}

	if a.ServiveName != nil {
		object["serviveName"], err = json.Marshal(a.ServiveName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviveName': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if a.SubId != nil {
		object["subId"], err = json.Marshal(a.SubId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subId': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NsmfEventExposureNotification. Returns the specified
// element and whether it was found
func (a NsmfEventExposureNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NsmfEventExposureNotification
func (a *NsmfEventExposureNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NsmfEventExposureNotification to handle AdditionalProperties
func (a *NsmfEventExposureNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ackUri"]; found {
		err = json.Unmarshal(raw, &a.AckUri)
		if err != nil {
			return fmt.Errorf("error reading 'ackUri': %w", err)
		}
		delete(object, "ackUri")
	}

	if raw, found := object["eventNotifs"]; found {
		err = json.Unmarshal(raw, &a.EventNotifs)
		if err != nil {
			return fmt.Errorf("error reading 'eventNotifs': %w", err)
		}
		delete(object, "eventNotifs")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NsmfEventExposureNotification to handle AdditionalProperties
func (a NsmfEventExposureNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AckUri != nil {
		object["ackUri"], err = json.Marshal(a.AckUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ackUri': %w", err)
		}
	}

	object["eventNotifs"], err = json.Marshal(a.EventNotifs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventNotifs': %w", err)
	}

	object["notifId"], err = json.Marshal(a.NotifId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssaaStatus. Returns the specified
// element and whether it was found
func (a NssaaStatus) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssaaStatus
func (a *NssaaStatus) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssaaStatus to handle AdditionalProperties
func (a *NssaaStatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssaaStatus to handle AdditionalProperties
func (a NssaaStatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	object["status"], err = json.Marshal(a.Status)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'status': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Nssai. Returns the specified
// element and whether it was found
func (a Nssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Nssai
func (a *Nssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Nssai to handle AdditionalProperties
func (a *Nssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalSnssaiData"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSnssaiData)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSnssaiData': %w", err)
		}
		delete(object, "additionalSnssaiData")
	}

	if raw, found := object["defaultSingleNssais"]; found {
		err = json.Unmarshal(raw, &a.DefaultSingleNssais)
		if err != nil {
			return fmt.Errorf("error reading 'defaultSingleNssais': %w", err)
		}
		delete(object, "defaultSingleNssais")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["singleNssais"]; found {
		err = json.Unmarshal(raw, &a.SingleNssais)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssais': %w", err)
		}
		delete(object, "singleNssais")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Nssai to handle AdditionalProperties
func (a Nssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalSnssaiData != nil {
		object["additionalSnssaiData"], err = json.Marshal(a.AdditionalSnssaiData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSnssaiData': %w", err)
		}
	}

	object["defaultSingleNssais"], err = json.Marshal(a.DefaultSingleNssais)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultSingleNssais': %w", err)
	}

	if a.ProvisioningTime != nil {
		object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
		}
	}

	if len(a.SingleNssais) != 0 {
		object["singleNssais"], err = json.Marshal(a.SingleNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssais': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssaiAckData. Returns the specified
// element and whether it was found
func (a NssaiAckData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssaiAckData
func (a *NssaiAckData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssaiAckData to handle AdditionalProperties
func (a *NssaiAckData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssaiAckData to handle AdditionalProperties
func (a NssaiAckData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssaiAvailabilityInfo. Returns the specified
// element and whether it was found
func (a NssaiAvailabilityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssaiAvailabilityInfo
func (a *NssaiAvailabilityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssaiAvailabilityInfo to handle AdditionalProperties
func (a *NssaiAvailabilityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfSetId"]; found {
		err = json.Unmarshal(raw, &a.AmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'amfSetId': %w", err)
		}
		delete(object, "amfSetId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["supportedNssaiAvailabilityData"]; found {
		err = json.Unmarshal(raw, &a.SupportedNssaiAvailabilityData)
		if err != nil {
			return fmt.Errorf("error reading 'supportedNssaiAvailabilityData': %w", err)
		}
		delete(object, "supportedNssaiAvailabilityData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssaiAvailabilityInfo to handle AdditionalProperties
func (a NssaiAvailabilityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AmfSetId) != 0 {
		object["amfSetId"], err = json.Marshal(a.AmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfSetId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["supportedNssaiAvailabilityData"], err = json.Marshal(a.SupportedNssaiAvailabilityData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supportedNssaiAvailabilityData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssaiMapping. Returns the specified
// element and whether it was found
func (a NssaiMapping) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssaiMapping
func (a *NssaiMapping) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssaiMapping to handle AdditionalProperties
func (a *NssaiMapping) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hSnssai"]; found {
		err = json.Unmarshal(raw, &a.HSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'hSnssai': %w", err)
		}
		delete(object, "hSnssai")
	}

	if raw, found := object["mappedSnssai"]; found {
		err = json.Unmarshal(raw, &a.MappedSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappedSnssai': %w", err)
		}
		delete(object, "mappedSnssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssaiMapping to handle AdditionalProperties
func (a NssaiMapping) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hSnssai"], err = json.Marshal(a.HSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hSnssai': %w", err)
	}

	object["mappedSnssai"], err = json.Marshal(a.MappedSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mappedSnssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssfEventNotification. Returns the specified
// element and whether it was found
func (a NssfEventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssfEventNotification
func (a *NssfEventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssfEventNotification to handle AdditionalProperties
func (a *NssfEventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authorizedNssaiAvailabilityData"]; found {
		err = json.Unmarshal(raw, &a.AuthorizedNssaiAvailabilityData)
		if err != nil {
			return fmt.Errorf("error reading 'authorizedNssaiAvailabilityData': %w", err)
		}
		delete(object, "authorizedNssaiAvailabilityData")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssfEventNotification to handle AdditionalProperties
func (a NssfEventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authorizedNssaiAvailabilityData"], err = json.Marshal(a.AuthorizedNssaiAvailabilityData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authorizedNssaiAvailabilityData': %w", err)
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssfEventSubscriptionCreateData. Returns the specified
// element and whether it was found
func (a NssfEventSubscriptionCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssfEventSubscriptionCreateData
func (a *NssfEventSubscriptionCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssfEventSubscriptionCreateData to handle AdditionalProperties
func (a *NssfEventSubscriptionCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfSetId"]; found {
		err = json.Unmarshal(raw, &a.AmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'amfSetId': %w", err)
		}
		delete(object, "amfSetId")
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["nfNssaiAvailabilityUri"]; found {
		err = json.Unmarshal(raw, &a.NfNssaiAvailabilityUri)
		if err != nil {
			return fmt.Errorf("error reading 'nfNssaiAvailabilityUri': %w", err)
		}
		delete(object, "nfNssaiAvailabilityUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["taiRangeList"]; found {
		err = json.Unmarshal(raw, &a.TaiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'taiRangeList': %w", err)
		}
		delete(object, "taiRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssfEventSubscriptionCreateData to handle AdditionalProperties
func (a NssfEventSubscriptionCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AmfSetId) != 0 {
		object["amfSetId"], err = json.Marshal(a.AmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfSetId': %w", err)
		}
	}

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	object["nfNssaiAvailabilityUri"], err = json.Marshal(a.NfNssaiAvailabilityUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfNssaiAvailabilityUri': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["taiList"], err = json.Marshal(a.TaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
	}

	if len(a.TaiRangeList) != 0 {
		object["taiRangeList"], err = json.Marshal(a.TaiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiRangeList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NssfEventSubscriptionCreatedData. Returns the specified
// element and whether it was found
func (a NssfEventSubscriptionCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NssfEventSubscriptionCreatedData
func (a *NssfEventSubscriptionCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NssfEventSubscriptionCreatedData to handle AdditionalProperties
func (a *NssfEventSubscriptionCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authorizedNssaiAvailabilityData"]; found {
		err = json.Unmarshal(raw, &a.AuthorizedNssaiAvailabilityData)
		if err != nil {
			return fmt.Errorf("error reading 'authorizedNssaiAvailabilityData': %w", err)
		}
		delete(object, "authorizedNssaiAvailabilityData")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NssfEventSubscriptionCreatedData to handle AdditionalProperties
func (a NssfEventSubscriptionCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AuthorizedNssaiAvailabilityData) != 0 {
		object["authorizedNssaiAvailabilityData"], err = json.Marshal(a.AuthorizedNssaiAvailabilityData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authorizedNssaiAvailabilityData': %w", err)
		}
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NwdafCond. Returns the specified
// element and whether it was found
func (a NwdafCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NwdafCond
func (a *NwdafCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NwdafCond to handle AdditionalProperties
func (a *NwdafCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["analyticsIds"]; found {
		err = json.Unmarshal(raw, &a.AnalyticsIds)
		if err != nil {
			return fmt.Errorf("error reading 'analyticsIds': %w", err)
		}
		delete(object, "analyticsIds")
	}

	if raw, found := object["conditionType"]; found {
		err = json.Unmarshal(raw, &a.ConditionType)
		if err != nil {
			return fmt.Errorf("error reading 'conditionType': %w", err)
		}
		delete(object, "conditionType")
	}

	if raw, found := object["snssaiList"]; found {
		err = json.Unmarshal(raw, &a.SnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiList': %w", err)
		}
		delete(object, "snssaiList")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["taiRangeList"]; found {
		err = json.Unmarshal(raw, &a.TaiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'taiRangeList': %w", err)
		}
		delete(object, "taiRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NwdafCond to handle AdditionalProperties
func (a NwdafCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnalyticsIds) != 0 {
		object["analyticsIds"], err = json.Marshal(a.AnalyticsIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'analyticsIds': %w", err)
		}
	}

	object["conditionType"], err = json.Marshal(a.ConditionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'conditionType': %w", err)
	}

	if len(a.SnssaiList) != 0 {
		object["snssaiList"], err = json.Marshal(a.SnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiList': %w", err)
		}
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	if len(a.TaiRangeList) != 0 {
		object["taiRangeList"], err = json.Marshal(a.TaiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiRangeList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NwdafInfo. Returns the specified
// element and whether it was found
func (a NwdafInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NwdafInfo
func (a *NwdafInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NwdafInfo to handle AdditionalProperties
func (a *NwdafInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventIds"]; found {
		err = json.Unmarshal(raw, &a.EventIds)
		if err != nil {
			return fmt.Errorf("error reading 'eventIds': %w", err)
		}
		delete(object, "eventIds")
	}

	if raw, found := object["nwdafEvents"]; found {
		err = json.Unmarshal(raw, &a.NwdafEvents)
		if err != nil {
			return fmt.Errorf("error reading 'nwdafEvents': %w", err)
		}
		delete(object, "nwdafEvents")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["taiRangeList"]; found {
		err = json.Unmarshal(raw, &a.TaiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'taiRangeList': %w", err)
		}
		delete(object, "taiRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NwdafInfo to handle AdditionalProperties
func (a NwdafInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.EventIds) != 0 {
		object["eventIds"], err = json.Marshal(a.EventIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventIds': %w", err)
		}
	}

	if len(a.NwdafEvents) != 0 {
		object["nwdafEvents"], err = json.Marshal(a.NwdafEvents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwdafEvents': %w", err)
		}
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	if len(a.TaiRangeList) != 0 {
		object["taiRangeList"], err = json.Marshal(a.TaiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiRangeList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OdbData. Returns the specified
// element and whether it was found
func (a OdbData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OdbData
func (a *OdbData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OdbData to handle AdditionalProperties
func (a *OdbData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["roamingOdb"]; found {
		err = json.Unmarshal(raw, &a.RoamingOdb)
		if err != nil {
			return fmt.Errorf("error reading 'roamingOdb': %w", err)
		}
		delete(object, "roamingOdb")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OdbData to handle AdditionalProperties
func (a OdbData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RoamingOdb != nil {
		object["roamingOdb"], err = json.Marshal(a.RoamingOdb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingOdb': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OperatorSpecificDataContainer. Returns the specified
// element and whether it was found
func (a OperatorSpecificDataContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OperatorSpecificDataContainer
func (a *OperatorSpecificDataContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OperatorSpecificDataContainer to handle AdditionalProperties
func (a *OperatorSpecificDataContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dataType"]; found {
		err = json.Unmarshal(raw, &a.DataType)
		if err != nil {
			return fmt.Errorf("error reading 'dataType': %w", err)
		}
		delete(object, "dataType")
	}

	if raw, found := object["dataTypeDefinition"]; found {
		err = json.Unmarshal(raw, &a.DataTypeDefinition)
		if err != nil {
			return fmt.Errorf("error reading 'dataTypeDefinition': %w", err)
		}
		delete(object, "dataTypeDefinition")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OperatorSpecificDataContainer to handle AdditionalProperties
func (a OperatorSpecificDataContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dataType"], err = json.Marshal(a.DataType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dataType': %w", err)
	}

	if a.DataTypeDefinition != nil {
		object["dataTypeDefinition"], err = json.Marshal(a.DataTypeDefinition)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataTypeDefinition': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OptionsResponse. Returns the specified
// element and whether it was found
func (a OptionsResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OptionsResponse
func (a *OptionsResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OptionsResponse to handle AdditionalProperties
func (a *OptionsResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OptionsResponse to handle AdditionalProperties
func (a OptionsResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OutOfCreditInformation. Returns the specified
// element and whether it was found
func (a OutOfCreditInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OutOfCreditInformation
func (a *OutOfCreditInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OutOfCreditInformation to handle AdditionalProperties
func (a *OutOfCreditInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["finUnitAct"]; found {
		err = json.Unmarshal(raw, &a.FinUnitAct)
		if err != nil {
			return fmt.Errorf("error reading 'finUnitAct': %w", err)
		}
		delete(object, "finUnitAct")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OutOfCreditInformation to handle AdditionalProperties
func (a OutOfCreditInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["finUnitAct"], err = json.Marshal(a.FinUnitAct)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'finUnitAct': %w", err)
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PWSErrorData. Returns the specified
// element and whether it was found
func (a PWSErrorData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PWSErrorData
func (a *PWSErrorData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PWSErrorData to handle AdditionalProperties
func (a *PWSErrorData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["namfCause"]; found {
		err = json.Unmarshal(raw, &a.NamfCause)
		if err != nil {
			return fmt.Errorf("error reading 'namfCause': %w", err)
		}
		delete(object, "namfCause")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PWSErrorData to handle AdditionalProperties
func (a PWSErrorData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["namfCause"], err = json.Marshal(a.NamfCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'namfCause': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PWSResponseData. Returns the specified
// element and whether it was found
func (a PWSResponseData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PWSResponseData
func (a *PWSResponseData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PWSResponseData to handle AdditionalProperties
func (a *PWSResponseData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["messageIdentifier"]; found {
		err = json.Unmarshal(raw, &a.MessageIdentifier)
		if err != nil {
			return fmt.Errorf("error reading 'messageIdentifier': %w", err)
		}
		delete(object, "messageIdentifier")
	}

	if raw, found := object["ngapMessageType"]; found {
		err = json.Unmarshal(raw, &a.NgapMessageType)
		if err != nil {
			return fmt.Errorf("error reading 'ngapMessageType': %w", err)
		}
		delete(object, "ngapMessageType")
	}

	if raw, found := object["serialNumber"]; found {
		err = json.Unmarshal(raw, &a.SerialNumber)
		if err != nil {
			return fmt.Errorf("error reading 'serialNumber': %w", err)
		}
		delete(object, "serialNumber")
	}

	if raw, found := object["unknownTaiList"]; found {
		err = json.Unmarshal(raw, &a.UnknownTaiList)
		if err != nil {
			return fmt.Errorf("error reading 'unknownTaiList': %w", err)
		}
		delete(object, "unknownTaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PWSResponseData to handle AdditionalProperties
func (a PWSResponseData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["messageIdentifier"], err = json.Marshal(a.MessageIdentifier)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'messageIdentifier': %w", err)
	}

	object["ngapMessageType"], err = json.Marshal(a.NgapMessageType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ngapMessageType': %w", err)
	}

	object["serialNumber"], err = json.Marshal(a.SerialNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serialNumber': %w", err)
	}

	if len(a.UnknownTaiList) != 0 {
		object["unknownTaiList"], err = json.Marshal(a.UnknownTaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownTaiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PacketFilterInfo. Returns the specified
// element and whether it was found
func (a PacketFilterInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PacketFilterInfo
func (a *PacketFilterInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PacketFilterInfo to handle AdditionalProperties
func (a *PacketFilterInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["flowDirection"]; found {
		err = json.Unmarshal(raw, &a.FlowDirection)
		if err != nil {
			return fmt.Errorf("error reading 'flowDirection': %w", err)
		}
		delete(object, "flowDirection")
	}

	if raw, found := object["flowLabel"]; found {
		err = json.Unmarshal(raw, &a.FlowLabel)
		if err != nil {
			return fmt.Errorf("error reading 'flowLabel': %w", err)
		}
		delete(object, "flowLabel")
	}

	if raw, found := object["packFiltCont"]; found {
		err = json.Unmarshal(raw, &a.PackFiltCont)
		if err != nil {
			return fmt.Errorf("error reading 'packFiltCont': %w", err)
		}
		delete(object, "packFiltCont")
	}

	if raw, found := object["packFiltId"]; found {
		err = json.Unmarshal(raw, &a.PackFiltId)
		if err != nil {
			return fmt.Errorf("error reading 'packFiltId': %w", err)
		}
		delete(object, "packFiltId")
	}

	if raw, found := object["spi"]; found {
		err = json.Unmarshal(raw, &a.Spi)
		if err != nil {
			return fmt.Errorf("error reading 'spi': %w", err)
		}
		delete(object, "spi")
	}

	if raw, found := object["tosTrafficClass"]; found {
		err = json.Unmarshal(raw, &a.TosTrafficClass)
		if err != nil {
			return fmt.Errorf("error reading 'tosTrafficClass': %w", err)
		}
		delete(object, "tosTrafficClass")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PacketFilterInfo to handle AdditionalProperties
func (a PacketFilterInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.FlowDirection != nil {
		object["flowDirection"], err = json.Marshal(a.FlowDirection)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDirection': %w", err)
		}
	}

	if a.FlowLabel != nil {
		object["flowLabel"], err = json.Marshal(a.FlowLabel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowLabel': %w", err)
		}
	}

	if a.PackFiltCont != nil {
		object["packFiltCont"], err = json.Marshal(a.PackFiltCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packFiltCont': %w", err)
		}
	}

	if a.PackFiltId != nil {
		object["packFiltId"], err = json.Marshal(a.PackFiltId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packFiltId': %w", err)
		}
	}

	if a.Spi != nil {
		object["spi"], err = json.Marshal(a.Spi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'spi': %w", err)
		}
	}

	if a.TosTrafficClass != nil {
		object["tosTrafficClass"], err = json.Marshal(a.TosTrafficClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tosTrafficClass': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ParameterCombination. Returns the specified
// element and whether it was found
func (a ParameterCombination) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ParameterCombination
func (a *ParameterCombination) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ParameterCombination to handle AdditionalProperties
func (a *ParameterCombination) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ParameterCombination to handle AdditionalProperties
func (a ParameterCombination) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PartialSuccessReport. Returns the specified
// element and whether it was found
func (a PartialSuccessReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PartialSuccessReport
func (a *PartialSuccessReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PartialSuccessReport to handle AdditionalProperties
func (a *PartialSuccessReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["failureCause"]; found {
		err = json.Unmarshal(raw, &a.FailureCause)
		if err != nil {
			return fmt.Errorf("error reading 'failureCause': %w", err)
		}
		delete(object, "failureCause")
	}

	if raw, found := object["policyDecFailureReports"]; found {
		err = json.Unmarshal(raw, &a.PolicyDecFailureReports)
		if err != nil {
			return fmt.Errorf("error reading 'policyDecFailureReports': %w", err)
		}
		delete(object, "policyDecFailureReports")
	}

	if raw, found := object["ruleReports"]; found {
		err = json.Unmarshal(raw, &a.RuleReports)
		if err != nil {
			return fmt.Errorf("error reading 'ruleReports': %w", err)
		}
		delete(object, "ruleReports")
	}

	if raw, found := object["sessRuleReports"]; found {
		err = json.Unmarshal(raw, &a.SessRuleReports)
		if err != nil {
			return fmt.Errorf("error reading 'sessRuleReports': %w", err)
		}
		delete(object, "sessRuleReports")
	}

	if raw, found := object["ueCampingRep"]; found {
		err = json.Unmarshal(raw, &a.UeCampingRep)
		if err != nil {
			return fmt.Errorf("error reading 'ueCampingRep': %w", err)
		}
		delete(object, "ueCampingRep")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PartialSuccessReport to handle AdditionalProperties
func (a PartialSuccessReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["failureCause"], err = json.Marshal(a.FailureCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'failureCause': %w", err)
	}

	if len(a.PolicyDecFailureReports) != 0 {
		object["policyDecFailureReports"], err = json.Marshal(a.PolicyDecFailureReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'policyDecFailureReports': %w", err)
		}
	}

	if len(a.RuleReports) != 0 {
		object["ruleReports"], err = json.Marshal(a.RuleReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ruleReports': %w", err)
		}
	}

	if len(a.SessRuleReports) != 0 {
		object["sessRuleReports"], err = json.Marshal(a.SessRuleReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessRuleReports': %w", err)
		}
	}

	if a.UeCampingRep != nil {
		object["ueCampingRep"], err = json.Marshal(a.UeCampingRep)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueCampingRep': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PatchBdtPolicy. Returns the specified
// element and whether it was found
func (a PatchBdtPolicy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchBdtPolicy
func (a *PatchBdtPolicy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchBdtPolicy to handle AdditionalProperties
func (a *PatchBdtPolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtPolData"]; found {
		err = json.Unmarshal(raw, &a.BdtPolData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtPolData': %w", err)
		}
		delete(object, "bdtPolData")
	}

	if raw, found := object["bdtReqData"]; found {
		err = json.Unmarshal(raw, &a.BdtReqData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtReqData': %w", err)
		}
		delete(object, "bdtReqData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchBdtPolicy to handle AdditionalProperties
func (a PatchBdtPolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtPolData != nil {
		object["bdtPolData"], err = json.Marshal(a.BdtPolData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtPolData': %w", err)
		}
	}

	if a.BdtReqData != nil {
		object["bdtReqData"], err = json.Marshal(a.BdtReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtReqData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PatchItem. Returns the specified
// element and whether it was found
func (a PatchItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchItem
func (a *PatchItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchItem to handle AdditionalProperties
func (a *PatchItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["from"]; found {
		err = json.Unmarshal(raw, &a.From)
		if err != nil {
			return fmt.Errorf("error reading 'from': %w", err)
		}
		delete(object, "from")
	}

	if raw, found := object["op"]; found {
		err = json.Unmarshal(raw, &a.Op)
		if err != nil {
			return fmt.Errorf("error reading 'op': %w", err)
		}
		delete(object, "op")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchItem to handle AdditionalProperties
func (a PatchItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.From != nil {
		object["from"], err = json.Marshal(a.From)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'from': %w", err)
		}
	}

	object["op"], err = json.Marshal(a.Op)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'op': %w", err)
	}

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PatchResult. Returns the specified
// element and whether it was found
func (a PatchResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchResult
func (a *PatchResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchResult to handle AdditionalProperties
func (a *PatchResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["report"]; found {
		err = json.Unmarshal(raw, &a.Report)
		if err != nil {
			return fmt.Errorf("error reading 'report': %w", err)
		}
		delete(object, "report")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchResult to handle AdditionalProperties
func (a PatchResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["report"], err = json.Marshal(a.Report)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'report': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pc5FlowBitRates. Returns the specified
// element and whether it was found
func (a Pc5FlowBitRates) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pc5FlowBitRates
func (a *Pc5FlowBitRates) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pc5FlowBitRates to handle AdditionalProperties
func (a *Pc5FlowBitRates) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["guaFbr"]; found {
		err = json.Unmarshal(raw, &a.GuaFbr)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbr': %w", err)
		}
		delete(object, "guaFbr")
	}

	if raw, found := object["maxFbr"]; found {
		err = json.Unmarshal(raw, &a.MaxFbr)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbr': %w", err)
		}
		delete(object, "maxFbr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pc5FlowBitRates to handle AdditionalProperties
func (a Pc5FlowBitRates) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GuaFbr) != 0 {
		object["guaFbr"], err = json.Marshal(a.GuaFbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbr': %w", err)
		}
	}

	if len(a.MaxFbr) != 0 {
		object["maxFbr"], err = json.Marshal(a.MaxFbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxFbr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pc5QoSPara. Returns the specified
// element and whether it was found
func (a Pc5QoSPara) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pc5QoSPara
func (a *Pc5QoSPara) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pc5QoSPara to handle AdditionalProperties
func (a *Pc5QoSPara) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pc5LinkAmbr"]; found {
		err = json.Unmarshal(raw, &a.Pc5LinkAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'pc5LinkAmbr': %w", err)
		}
		delete(object, "pc5LinkAmbr")
	}

	if raw, found := object["pc5QosFlowList"]; found {
		err = json.Unmarshal(raw, &a.Pc5QosFlowList)
		if err != nil {
			return fmt.Errorf("error reading 'pc5QosFlowList': %w", err)
		}
		delete(object, "pc5QosFlowList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pc5QoSPara to handle AdditionalProperties
func (a Pc5QoSPara) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Pc5LinkAmbr) != 0 {
		object["pc5LinkAmbr"], err = json.Marshal(a.Pc5LinkAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pc5LinkAmbr': %w", err)
		}
	}

	object["pc5QosFlowList"], err = json.Marshal(a.Pc5QosFlowList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pc5QosFlowList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pc5QosFlowItem. Returns the specified
// element and whether it was found
func (a Pc5QosFlowItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pc5QosFlowItem
func (a *Pc5QosFlowItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pc5QosFlowItem to handle AdditionalProperties
func (a *Pc5QosFlowItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pc5FlowBitRates"]; found {
		err = json.Unmarshal(raw, &a.Pc5FlowBitRates)
		if err != nil {
			return fmt.Errorf("error reading 'pc5FlowBitRates': %w", err)
		}
		delete(object, "pc5FlowBitRates")
	}

	if raw, found := object["pqi"]; found {
		err = json.Unmarshal(raw, &a.Pqi)
		if err != nil {
			return fmt.Errorf("error reading 'pqi': %w", err)
		}
		delete(object, "pqi")
	}

	if raw, found := object["range"]; found {
		err = json.Unmarshal(raw, &a.Range)
		if err != nil {
			return fmt.Errorf("error reading 'range': %w", err)
		}
		delete(object, "range")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pc5QosFlowItem to handle AdditionalProperties
func (a Pc5QosFlowItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Pc5FlowBitRates != nil {
		object["pc5FlowBitRates"], err = json.Marshal(a.Pc5FlowBitRates)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pc5FlowBitRates': %w", err)
		}
	}

	object["pqi"], err = json.Marshal(a.Pqi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pqi': %w", err)
	}

	if a.Range != nil {
		object["range"], err = json.Marshal(a.Range)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'range': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcEventExposureNotif. Returns the specified
// element and whether it was found
func (a PcEventExposureNotif) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcEventExposureNotif
func (a *PcEventExposureNotif) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcEventExposureNotif to handle AdditionalProperties
func (a *PcEventExposureNotif) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventNotifs"]; found {
		err = json.Unmarshal(raw, &a.EventNotifs)
		if err != nil {
			return fmt.Errorf("error reading 'eventNotifs': %w", err)
		}
		delete(object, "eventNotifs")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcEventExposureNotif to handle AdditionalProperties
func (a PcEventExposureNotif) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eventNotifs"], err = json.Marshal(a.EventNotifs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventNotifs': %w", err)
	}

	object["notifId"], err = json.Marshal(a.NotifId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcEventExposureSubsc. Returns the specified
// element and whether it was found
func (a PcEventExposureSubsc) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcEventExposureSubsc
func (a *PcEventExposureSubsc) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcEventExposureSubsc to handle AdditionalProperties
func (a *PcEventExposureSubsc) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventSubs"]; found {
		err = json.Unmarshal(raw, &a.EventSubs)
		if err != nil {
			return fmt.Errorf("error reading 'eventSubs': %w", err)
		}
		delete(object, "eventSubs")
	}

	if raw, found := object["eventsRepInfo"]; found {
		err = json.Unmarshal(raw, &a.EventsRepInfo)
		if err != nil {
			return fmt.Errorf("error reading 'eventsRepInfo': %w", err)
		}
		delete(object, "eventsRepInfo")
	}

	if raw, found := object["filterDnns"]; found {
		err = json.Unmarshal(raw, &a.FilterDnns)
		if err != nil {
			return fmt.Errorf("error reading 'filterDnns': %w", err)
		}
		delete(object, "filterDnns")
	}

	if raw, found := object["filterServices"]; found {
		err = json.Unmarshal(raw, &a.FilterServices)
		if err != nil {
			return fmt.Errorf("error reading 'filterServices': %w", err)
		}
		delete(object, "filterServices")
	}

	if raw, found := object["filterSnssais"]; found {
		err = json.Unmarshal(raw, &a.FilterSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'filterSnssais': %w", err)
		}
		delete(object, "filterSnssais")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcEventExposureSubsc to handle AdditionalProperties
func (a PcEventExposureSubsc) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eventSubs"], err = json.Marshal(a.EventSubs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventSubs': %w", err)
	}

	if a.EventsRepInfo != nil {
		object["eventsRepInfo"], err = json.Marshal(a.EventsRepInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventsRepInfo': %w", err)
		}
	}

	if len(a.FilterDnns) != 0 {
		object["filterDnns"], err = json.Marshal(a.FilterDnns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'filterDnns': %w", err)
		}
	}

	if len(a.FilterServices) != 0 {
		object["filterServices"], err = json.Marshal(a.FilterServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'filterServices': %w", err)
		}
	}

	if len(a.FilterSnssais) != 0 {
		object["filterSnssais"], err = json.Marshal(a.FilterSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'filterSnssais': %w", err)
		}
	}

	if len(a.GroupId) != 0 {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	object["notifId"], err = json.Marshal(a.NotifId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
	}

	object["notifUri"], err = json.Marshal(a.NotifUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcEventNotification. Returns the specified
// element and whether it was found
func (a PcEventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcEventNotification
func (a *PcEventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcEventNotification to handle AdditionalProperties
func (a *PcEventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accType"]; found {
		err = json.Unmarshal(raw, &a.AccType)
		if err != nil {
			return fmt.Errorf("error reading 'accType': %w", err)
		}
		delete(object, "accType")
	}

	if raw, found := object["addAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.AddAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addAccessInfo': %w", err)
		}
		delete(object, "addAccessInfo")
	}

	if raw, found := object["anGwAddr"]; found {
		err = json.Unmarshal(raw, &a.AnGwAddr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwAddr': %w", err)
		}
		delete(object, "anGwAddr")
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["pduSessionInfo"]; found {
		err = json.Unmarshal(raw, &a.PduSessionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionInfo': %w", err)
		}
		delete(object, "pduSessionInfo")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["relAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.RelAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'relAccessInfo': %w", err)
		}
		delete(object, "relAccessInfo")
	}

	if raw, found := object["repServices"]; found {
		err = json.Unmarshal(raw, &a.RepServices)
		if err != nil {
			return fmt.Errorf("error reading 'repServices': %w", err)
		}
		delete(object, "repServices")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcEventNotification to handle AdditionalProperties
func (a PcEventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccType) != 0 {
		object["accType"], err = json.Marshal(a.AccType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accType': %w", err)
		}
	}

	if a.AddAccessInfo != nil {
		object["addAccessInfo"], err = json.Marshal(a.AddAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addAccessInfo': %w", err)
		}
	}

	if a.AnGwAddr != nil {
		object["anGwAddr"], err = json.Marshal(a.AnGwAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwAddr': %w", err)
		}
	}

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.PduSessionInfo != nil {
		object["pduSessionInfo"], err = json.Marshal(a.PduSessionInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionInfo': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RelAccessInfo != nil {
		object["relAccessInfo"], err = json.Marshal(a.RelAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relAccessInfo': %w", err)
		}
	}

	if a.RepServices != nil {
		object["repServices"], err = json.Marshal(a.RepServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repServices': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PccRule. Returns the specified
// element and whether it was found
func (a PccRule) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PccRule
func (a *PccRule) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PccRule to handle AdditionalProperties
func (a *PccRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afSigProtocol"]; found {
		err = json.Unmarshal(raw, &a.AfSigProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'afSigProtocol': %w", err)
		}
		delete(object, "afSigProtocol")
	}

	if raw, found := object["appDescriptor"]; found {
		err = json.Unmarshal(raw, &a.AppDescriptor)
		if err != nil {
			return fmt.Errorf("error reading 'appDescriptor': %w", err)
		}
		delete(object, "appDescriptor")
	}

	if raw, found := object["appId"]; found {
		err = json.Unmarshal(raw, &a.AppId)
		if err != nil {
			return fmt.Errorf("error reading 'appId': %w", err)
		}
		delete(object, "appId")
	}

	if raw, found := object["appReloc"]; found {
		err = json.Unmarshal(raw, &a.AppReloc)
		if err != nil {
			return fmt.Errorf("error reading 'appReloc': %w", err)
		}
		delete(object, "appReloc")
	}

	if raw, found := object["contVer"]; found {
		err = json.Unmarshal(raw, &a.ContVer)
		if err != nil {
			return fmt.Errorf("error reading 'contVer': %w", err)
		}
		delete(object, "contVer")
	}

	if raw, found := object["ddNotifCtrl"]; found {
		err = json.Unmarshal(raw, &a.DdNotifCtrl)
		if err != nil {
			return fmt.Errorf("error reading 'ddNotifCtrl': %w", err)
		}
		delete(object, "ddNotifCtrl")
	}

	if raw, found := object["ddNotifCtrl2"]; found {
		err = json.Unmarshal(raw, &a.DdNotifCtrl2)
		if err != nil {
			return fmt.Errorf("error reading 'ddNotifCtrl2': %w", err)
		}
		delete(object, "ddNotifCtrl2")
	}

	if raw, found := object["disUeNotif"]; found {
		err = json.Unmarshal(raw, &a.DisUeNotif)
		if err != nil {
			return fmt.Errorf("error reading 'disUeNotif': %w", err)
		}
		delete(object, "disUeNotif")
	}

	if raw, found := object["flowInfos"]; found {
		err = json.Unmarshal(raw, &a.FlowInfos)
		if err != nil {
			return fmt.Errorf("error reading 'flowInfos': %w", err)
		}
		delete(object, "flowInfos")
	}

	if raw, found := object["pccRuleId"]; found {
		err = json.Unmarshal(raw, &a.PccRuleId)
		if err != nil {
			return fmt.Errorf("error reading 'pccRuleId': %w", err)
		}
		delete(object, "pccRuleId")
	}

	if raw, found := object["precedence"]; found {
		err = json.Unmarshal(raw, &a.Precedence)
		if err != nil {
			return fmt.Errorf("error reading 'precedence': %w", err)
		}
		delete(object, "precedence")
	}

	if raw, found := object["refAltQosParams"]; found {
		err = json.Unmarshal(raw, &a.RefAltQosParams)
		if err != nil {
			return fmt.Errorf("error reading 'refAltQosParams': %w", err)
		}
		delete(object, "refAltQosParams")
	}

	if raw, found := object["refChgData"]; found {
		err = json.Unmarshal(raw, &a.RefChgData)
		if err != nil {
			return fmt.Errorf("error reading 'refChgData': %w", err)
		}
		delete(object, "refChgData")
	}

	if raw, found := object["refChgN3gData"]; found {
		err = json.Unmarshal(raw, &a.RefChgN3gData)
		if err != nil {
			return fmt.Errorf("error reading 'refChgN3gData': %w", err)
		}
		delete(object, "refChgN3gData")
	}

	if raw, found := object["refCondData"]; found {
		err = json.Unmarshal(raw, &a.RefCondData)
		if err != nil {
			return fmt.Errorf("error reading 'refCondData': %w", err)
		}
		delete(object, "refCondData")
	}

	if raw, found := object["refQosData"]; found {
		err = json.Unmarshal(raw, &a.RefQosData)
		if err != nil {
			return fmt.Errorf("error reading 'refQosData': %w", err)
		}
		delete(object, "refQosData")
	}

	if raw, found := object["refQosMon"]; found {
		err = json.Unmarshal(raw, &a.RefQosMon)
		if err != nil {
			return fmt.Errorf("error reading 'refQosMon': %w", err)
		}
		delete(object, "refQosMon")
	}

	if raw, found := object["refTcData"]; found {
		err = json.Unmarshal(raw, &a.RefTcData)
		if err != nil {
			return fmt.Errorf("error reading 'refTcData': %w", err)
		}
		delete(object, "refTcData")
	}

	if raw, found := object["refUmData"]; found {
		err = json.Unmarshal(raw, &a.RefUmData)
		if err != nil {
			return fmt.Errorf("error reading 'refUmData': %w", err)
		}
		delete(object, "refUmData")
	}

	if raw, found := object["refUmN3gData"]; found {
		err = json.Unmarshal(raw, &a.RefUmN3gData)
		if err != nil {
			return fmt.Errorf("error reading 'refUmN3gData': %w", err)
		}
		delete(object, "refUmN3gData")
	}

	if raw, found := object["tscaiInputDl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputDl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputDl': %w", err)
		}
		delete(object, "tscaiInputDl")
	}

	if raw, found := object["tscaiInputUl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputUl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputUl': %w", err)
		}
		delete(object, "tscaiInputUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PccRule to handle AdditionalProperties
func (a PccRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
	}

	if a.AfSigProtocol != nil {
		object["afSigProtocol"], err = json.Marshal(a.AfSigProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afSigProtocol': %w", err)
		}
	}

	if a.AppDescriptor != nil {
		object["appDescriptor"], err = json.Marshal(a.AppDescriptor)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appDescriptor': %w", err)
		}
	}

	if a.AppId != nil {
		object["appId"], err = json.Marshal(a.AppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appId': %w", err)
		}
	}

	if a.AppReloc != nil {
		object["appReloc"], err = json.Marshal(a.AppReloc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloc': %w", err)
		}
	}

	if a.ContVer != nil {
		object["contVer"], err = json.Marshal(a.ContVer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVer': %w", err)
		}
	}

	if a.DdNotifCtrl != nil {
		object["ddNotifCtrl"], err = json.Marshal(a.DdNotifCtrl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddNotifCtrl': %w", err)
		}
	}

	object["ddNotifCtrl2"], err = json.Marshal(a.DdNotifCtrl2)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ddNotifCtrl2': %w", err)
	}

	object["disUeNotif"], err = json.Marshal(a.DisUeNotif)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'disUeNotif': %w", err)
	}

	if len(a.FlowInfos) != 0 {
		object["flowInfos"], err = json.Marshal(a.FlowInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowInfos': %w", err)
		}
	}

	object["pccRuleId"], err = json.Marshal(a.PccRuleId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pccRuleId': %w", err)
	}

	if a.Precedence != nil {
		object["precedence"], err = json.Marshal(a.Precedence)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'precedence': %w", err)
		}
	}

	if len(a.RefAltQosParams) != 0 {
		object["refAltQosParams"], err = json.Marshal(a.RefAltQosParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refAltQosParams': %w", err)
		}
	}

	object["refChgData"], err = json.Marshal(a.RefChgData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refChgData': %w", err)
	}

	object["refChgN3gData"], err = json.Marshal(a.RefChgN3gData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refChgN3gData': %w", err)
	}

	object["refCondData"], err = json.Marshal(a.RefCondData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refCondData': %w", err)
	}

	if len(a.RefQosData) != 0 {
		object["refQosData"], err = json.Marshal(a.RefQosData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refQosData': %w", err)
		}
	}

	object["refQosMon"], err = json.Marshal(a.RefQosMon)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refQosMon': %w", err)
	}

	if len(a.RefTcData) != 0 {
		object["refTcData"], err = json.Marshal(a.RefTcData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refTcData': %w", err)
		}
	}

	object["refUmData"], err = json.Marshal(a.RefUmData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refUmData': %w", err)
	}

	object["refUmN3gData"], err = json.Marshal(a.RefUmN3gData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refUmN3gData': %w", err)
	}

	object["tscaiInputDl"], err = json.Marshal(a.TscaiInputDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputDl': %w", err)
	}

	object["tscaiInputUl"], err = json.Marshal(a.TscaiInputUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputUl': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcfBinding. Returns the specified
// element and whether it was found
func (a PcfBinding) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcfBinding
func (a *PcfBinding) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcfBinding to handle AdditionalProperties
func (a *PcfBinding) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addIpv6Prefixes"]; found {
		err = json.Unmarshal(raw, &a.AddIpv6Prefixes)
		if err != nil {
			return fmt.Errorf("error reading 'addIpv6Prefixes': %w", err)
		}
		delete(object, "addIpv6Prefixes")
	}

	if raw, found := object["addMacAddrs"]; found {
		err = json.Unmarshal(raw, &a.AddMacAddrs)
		if err != nil {
			return fmt.Errorf("error reading 'addMacAddrs': %w", err)
		}
		delete(object, "addMacAddrs")
	}

	if raw, found := object["bindLevel"]; found {
		err = json.Unmarshal(raw, &a.BindLevel)
		if err != nil {
			return fmt.Errorf("error reading 'bindLevel': %w", err)
		}
		delete(object, "bindLevel")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv4FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv4FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4FrameRouteList': %w", err)
		}
		delete(object, "ipv4FrameRouteList")
	}

	if raw, found := object["ipv6FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv6FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6FrameRouteList': %w", err)
		}
		delete(object, "ipv6FrameRouteList")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if raw, found := object["macAddr48"]; found {
		err = json.Unmarshal(raw, &a.MacAddr48)
		if err != nil {
			return fmt.Errorf("error reading 'macAddr48': %w", err)
		}
		delete(object, "macAddr48")
	}

	if raw, found := object["paraCom"]; found {
		err = json.Unmarshal(raw, &a.ParaCom)
		if err != nil {
			return fmt.Errorf("error reading 'paraCom': %w", err)
		}
		delete(object, "paraCom")
	}

	if raw, found := object["pcfDiamHost"]; found {
		err = json.Unmarshal(raw, &a.PcfDiamHost)
		if err != nil {
			return fmt.Errorf("error reading 'pcfDiamHost': %w", err)
		}
		delete(object, "pcfDiamHost")
	}

	if raw, found := object["pcfDiamRealm"]; found {
		err = json.Unmarshal(raw, &a.PcfDiamRealm)
		if err != nil {
			return fmt.Errorf("error reading 'pcfDiamRealm': %w", err)
		}
		delete(object, "pcfDiamRealm")
	}

	if raw, found := object["pcfFqdn"]; found {
		err = json.Unmarshal(raw, &a.PcfFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pcfFqdn': %w", err)
		}
		delete(object, "pcfFqdn")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfIpEndPoints"]; found {
		err = json.Unmarshal(raw, &a.PcfIpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'pcfIpEndPoints': %w", err)
		}
		delete(object, "pcfIpEndPoints")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pcfSmFqdn"]; found {
		err = json.Unmarshal(raw, &a.PcfSmFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSmFqdn': %w", err)
		}
		delete(object, "pcfSmFqdn")
	}

	if raw, found := object["pcfSmIpEndPoints"]; found {
		err = json.Unmarshal(raw, &a.PcfSmIpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSmIpEndPoints': %w", err)
		}
		delete(object, "pcfSmIpEndPoints")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcfBinding to handle AdditionalProperties
func (a PcfBinding) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddIpv6Prefixes) != 0 {
		object["addIpv6Prefixes"], err = json.Marshal(a.AddIpv6Prefixes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addIpv6Prefixes': %w", err)
		}
	}

	if len(a.AddMacAddrs) != 0 {
		object["addMacAddrs"], err = json.Marshal(a.AddMacAddrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addMacAddrs': %w", err)
		}
	}

	if a.BindLevel != nil {
		object["bindLevel"], err = json.Marshal(a.BindLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bindLevel': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if len(a.Ipv4FrameRouteList) != 0 {
		object["ipv4FrameRouteList"], err = json.Marshal(a.Ipv4FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4FrameRouteList': %w", err)
		}
	}

	if len(a.Ipv6FrameRouteList) != 0 {
		object["ipv6FrameRouteList"], err = json.Marshal(a.Ipv6FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6FrameRouteList': %w", err)
		}
	}

	if a.Ipv6Prefix != nil {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	if len(a.MacAddr48) != 0 {
		object["macAddr48"], err = json.Marshal(a.MacAddr48)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'macAddr48': %w", err)
		}
	}

	if a.ParaCom != nil {
		object["paraCom"], err = json.Marshal(a.ParaCom)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paraCom': %w", err)
		}
	}

	if len(a.PcfDiamHost) != 0 {
		object["pcfDiamHost"], err = json.Marshal(a.PcfDiamHost)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfDiamHost': %w", err)
		}
	}

	if len(a.PcfDiamRealm) != 0 {
		object["pcfDiamRealm"], err = json.Marshal(a.PcfDiamRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfDiamRealm': %w", err)
		}
	}

	if a.PcfFqdn != nil {
		object["pcfFqdn"], err = json.Marshal(a.PcfFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfFqdn': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if len(a.PcfIpEndPoints) != 0 {
		object["pcfIpEndPoints"], err = json.Marshal(a.PcfIpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfIpEndPoints': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	if a.PcfSmFqdn != nil {
		object["pcfSmFqdn"], err = json.Marshal(a.PcfSmFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSmFqdn': %w", err)
		}
	}

	if len(a.PcfSmIpEndPoints) != 0 {
		object["pcfSmIpEndPoints"], err = json.Marshal(a.PcfSmIpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSmIpEndPoints': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcfBindingPatch. Returns the specified
// element and whether it was found
func (a PcfBindingPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcfBindingPatch
func (a *PcfBindingPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcfBindingPatch to handle AdditionalProperties
func (a *PcfBindingPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addIpv6Prefixes"]; found {
		err = json.Unmarshal(raw, &a.AddIpv6Prefixes)
		if err != nil {
			return fmt.Errorf("error reading 'addIpv6Prefixes': %w", err)
		}
		delete(object, "addIpv6Prefixes")
	}

	if raw, found := object["addMacAddrs"]; found {
		err = json.Unmarshal(raw, &a.AddMacAddrs)
		if err != nil {
			return fmt.Errorf("error reading 'addMacAddrs': %w", err)
		}
		delete(object, "addMacAddrs")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if raw, found := object["macAddr48"]; found {
		err = json.Unmarshal(raw, &a.MacAddr48)
		if err != nil {
			return fmt.Errorf("error reading 'macAddr48': %w", err)
		}
		delete(object, "macAddr48")
	}

	if raw, found := object["pcfDiamHost"]; found {
		err = json.Unmarshal(raw, &a.PcfDiamHost)
		if err != nil {
			return fmt.Errorf("error reading 'pcfDiamHost': %w", err)
		}
		delete(object, "pcfDiamHost")
	}

	if raw, found := object["pcfDiamRealm"]; found {
		err = json.Unmarshal(raw, &a.PcfDiamRealm)
		if err != nil {
			return fmt.Errorf("error reading 'pcfDiamRealm': %w", err)
		}
		delete(object, "pcfDiamRealm")
	}

	if raw, found := object["pcfFqdn"]; found {
		err = json.Unmarshal(raw, &a.PcfFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pcfFqdn': %w", err)
		}
		delete(object, "pcfFqdn")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfIpEndPoints"]; found {
		err = json.Unmarshal(raw, &a.PcfIpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'pcfIpEndPoints': %w", err)
		}
		delete(object, "pcfIpEndPoints")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcfBindingPatch to handle AdditionalProperties
func (a PcfBindingPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["addIpv6Prefixes"], err = json.Marshal(a.AddIpv6Prefixes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'addIpv6Prefixes': %w", err)
	}

	object["addMacAddrs"], err = json.Marshal(a.AddMacAddrs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'addMacAddrs': %w", err)
	}

	object["ipDomain"], err = json.Marshal(a.IpDomain)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
	}

	object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
	}

	object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
	}

	object["macAddr48"], err = json.Marshal(a.MacAddr48)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'macAddr48': %w", err)
	}

	if len(a.PcfDiamHost) != 0 {
		object["pcfDiamHost"], err = json.Marshal(a.PcfDiamHost)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfDiamHost': %w", err)
		}
	}

	if len(a.PcfDiamRealm) != 0 {
		object["pcfDiamRealm"], err = json.Marshal(a.PcfDiamRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfDiamRealm': %w", err)
		}
	}

	if a.PcfFqdn != nil {
		object["pcfFqdn"], err = json.Marshal(a.PcfFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfFqdn': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if len(a.PcfIpEndPoints) != 0 {
		object["pcfIpEndPoints"], err = json.Marshal(a.PcfIpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfIpEndPoints': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcfInfo. Returns the specified
// element and whether it was found
func (a PcfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcfInfo
func (a *PcfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcfInfo to handle AdditionalProperties
func (a *PcfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnList"]; found {
		err = json.Unmarshal(raw, &a.DnnList)
		if err != nil {
			return fmt.Errorf("error reading 'dnnList': %w", err)
		}
		delete(object, "dnnList")
	}

	if raw, found := object["gpsiRanges"]; found {
		err = json.Unmarshal(raw, &a.GpsiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiRanges': %w", err)
		}
		delete(object, "gpsiRanges")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["rxDiamHost"]; found {
		err = json.Unmarshal(raw, &a.RxDiamHost)
		if err != nil {
			return fmt.Errorf("error reading 'rxDiamHost': %w", err)
		}
		delete(object, "rxDiamHost")
	}

	if raw, found := object["rxDiamRealm"]; found {
		err = json.Unmarshal(raw, &a.RxDiamRealm)
		if err != nil {
			return fmt.Errorf("error reading 'rxDiamRealm': %w", err)
		}
		delete(object, "rxDiamRealm")
	}

	if raw, found := object["supiRanges"]; found {
		err = json.Unmarshal(raw, &a.SupiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'supiRanges': %w", err)
		}
		delete(object, "supiRanges")
	}

	if raw, found := object["v2xSupportInd"]; found {
		err = json.Unmarshal(raw, &a.V2xSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'v2xSupportInd': %w", err)
		}
		delete(object, "v2xSupportInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcfInfo to handle AdditionalProperties
func (a PcfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnnList) != 0 {
		object["dnnList"], err = json.Marshal(a.DnnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnList': %w", err)
		}
	}

	if len(a.GpsiRanges) != 0 {
		object["gpsiRanges"], err = json.Marshal(a.GpsiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiRanges': %w", err)
		}
	}

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if len(a.RxDiamHost) != 0 {
		object["rxDiamHost"], err = json.Marshal(a.RxDiamHost)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rxDiamHost': %w", err)
		}
	}

	if len(a.RxDiamRealm) != 0 {
		object["rxDiamRealm"], err = json.Marshal(a.RxDiamRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rxDiamRealm': %w", err)
		}
	}

	if len(a.SupiRanges) != 0 {
		object["supiRanges"], err = json.Marshal(a.SupiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiRanges': %w", err)
		}
	}

	if a.V2xSupportInd != nil {
		object["v2xSupportInd"], err = json.Marshal(a.V2xSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'v2xSupportInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcscfInfo. Returns the specified
// element and whether it was found
func (a PcscfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcscfInfo
func (a *PcscfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcscfInfo to handle AdditionalProperties
func (a *PcscfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["dnnList"]; found {
		err = json.Unmarshal(raw, &a.DnnList)
		if err != nil {
			return fmt.Errorf("error reading 'dnnList': %w", err)
		}
		delete(object, "dnnList")
	}

	if raw, found := object["gmFqdn"]; found {
		err = json.Unmarshal(raw, &a.GmFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'gmFqdn': %w", err)
		}
		delete(object, "gmFqdn")
	}

	if raw, found := object["gmIpv4Addresses"]; found {
		err = json.Unmarshal(raw, &a.GmIpv4Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'gmIpv4Addresses': %w", err)
		}
		delete(object, "gmIpv4Addresses")
	}

	if raw, found := object["gmIpv6Addresses"]; found {
		err = json.Unmarshal(raw, &a.GmIpv6Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'gmIpv6Addresses': %w", err)
		}
		delete(object, "gmIpv6Addresses")
	}

	if raw, found := object["servedIpv4AddressRanges"]; found {
		err = json.Unmarshal(raw, &a.ServedIpv4AddressRanges)
		if err != nil {
			return fmt.Errorf("error reading 'servedIpv4AddressRanges': %w", err)
		}
		delete(object, "servedIpv4AddressRanges")
	}

	if raw, found := object["servedIpv6PrefixRanges"]; found {
		err = json.Unmarshal(raw, &a.ServedIpv6PrefixRanges)
		if err != nil {
			return fmt.Errorf("error reading 'servedIpv6PrefixRanges': %w", err)
		}
		delete(object, "servedIpv6PrefixRanges")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcscfInfo to handle AdditionalProperties
func (a PcscfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if len(a.DnnList) != 0 {
		object["dnnList"], err = json.Marshal(a.DnnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnList': %w", err)
		}
	}

	if a.GmFqdn != nil {
		object["gmFqdn"], err = json.Marshal(a.GmFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gmFqdn': %w", err)
		}
	}

	if len(a.GmIpv4Addresses) != 0 {
		object["gmIpv4Addresses"], err = json.Marshal(a.GmIpv4Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gmIpv4Addresses': %w", err)
		}
	}

	if len(a.GmIpv6Addresses) != 0 {
		object["gmIpv6Addresses"], err = json.Marshal(a.GmIpv6Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gmIpv6Addresses': %w", err)
		}
	}

	if len(a.ServedIpv4AddressRanges) != 0 {
		object["servedIpv4AddressRanges"], err = json.Marshal(a.ServedIpv4AddressRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedIpv4AddressRanges': %w", err)
		}
	}

	if len(a.ServedIpv6PrefixRanges) != 0 {
		object["servedIpv6PrefixRanges"], err = json.Marshal(a.ServedIpv6PrefixRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedIpv6PrefixRanges': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcscfRestorationNotification. Returns the specified
// element and whether it was found
func (a PcscfRestorationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcscfRestorationNotification
func (a *PcscfRestorationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcscfRestorationNotification to handle AdditionalProperties
func (a *PcscfRestorationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcscfRestorationNotification to handle AdditionalProperties
func (a PcscfRestorationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcscfRestorationRequestData. Returns the specified
// element and whether it was found
func (a PcscfRestorationRequestData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcscfRestorationRequestData
func (a *PcscfRestorationRequestData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcscfRestorationRequestData to handle AdditionalProperties
func (a *PcscfRestorationRequestData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["sliceInfo"]; found {
		err = json.Unmarshal(raw, &a.SliceInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sliceInfo': %w", err)
		}
		delete(object, "sliceInfo")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcscfRestorationRequestData to handle AdditionalProperties
func (a PcscfRestorationRequestData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if a.SliceInfo != nil {
		object["sliceInfo"], err = json.Marshal(a.SliceInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sliceInfo': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if len(a.UeIpv4) != 0 {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PdnConnectivityStatReport. Returns the specified
// element and whether it was found
func (a PdnConnectivityStatReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PdnConnectivityStatReport
func (a *PdnConnectivityStatReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PdnConnectivityStatReport to handle AdditionalProperties
func (a *PdnConnectivityStatReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addrs': %w", err)
		}
		delete(object, "ipv6Addrs")
	}

	if raw, found := object["ipv6Prefixes"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefixes)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefixes': %w", err)
		}
		delete(object, "ipv6Prefixes")
	}

	if raw, found := object["pdnConnStat"]; found {
		err = json.Unmarshal(raw, &a.PdnConnStat)
		if err != nil {
			return fmt.Errorf("error reading 'pdnConnStat': %w", err)
		}
		delete(object, "pdnConnStat")
	}

	if raw, found := object["pduSeId"]; found {
		err = json.Unmarshal(raw, &a.PduSeId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSeId': %w", err)
		}
		delete(object, "pduSeId")
	}

	if raw, found := object["pduSessType"]; found {
		err = json.Unmarshal(raw, &a.PduSessType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessType': %w", err)
		}
		delete(object, "pduSessType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PdnConnectivityStatReport to handle AdditionalProperties
func (a PdnConnectivityStatReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if len(a.Ipv6Addrs) != 0 {
		object["ipv6Addrs"], err = json.Marshal(a.Ipv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addrs': %w", err)
		}
	}

	if len(a.Ipv6Prefixes) != 0 {
		object["ipv6Prefixes"], err = json.Marshal(a.Ipv6Prefixes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefixes': %w", err)
		}
	}

	object["pdnConnStat"], err = json.Marshal(a.PdnConnStat)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pdnConnStat': %w", err)
	}

	if a.PduSeId != nil {
		object["pduSeId"], err = json.Marshal(a.PduSeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSeId': %w", err)
		}
	}

	if a.PduSessType != nil {
		object["pduSessType"], err = json.Marshal(a.PduSessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSession. Returns the specified
// element and whether it was found
func (a PduSession) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSession
func (a *PduSession) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSession to handle AdditionalProperties
func (a *PduSession) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSession to handle AdditionalProperties
func (a PduSession) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if a.SingleNssai != nil {
		object["singleNssai"], err = json.Marshal(a.SingleNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
		}
	}

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionContext. Returns the specified
// element and whether it was found
func (a PduSessionContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionContext
func (a *PduSessionContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionContext to handle AdditionalProperties
func (a *PduSessionContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["additionalAccessType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAccessType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAccessType': %w", err)
		}
		delete(object, "additionalAccessType")
	}

	if raw, found := object["allocatedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AllocatedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'allocatedEbiList': %w", err)
		}
		delete(object, "allocatedEbiList")
	}

	if raw, found := object["cnAssistedRanPara"]; found {
		err = json.Unmarshal(raw, &a.CnAssistedRanPara)
		if err != nil {
			return fmt.Errorf("error reading 'cnAssistedRanPara': %w", err)
		}
		delete(object, "cnAssistedRanPara")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["hsmfId"]; found {
		err = json.Unmarshal(raw, &a.HsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'hsmfId': %w", err)
		}
		delete(object, "hsmfId")
	}

	if raw, found := object["hsmfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.HsmfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'hsmfServiceSetId': %w", err)
		}
		delete(object, "hsmfServiceSetId")
	}

	if raw, found := object["hsmfSetId"]; found {
		err = json.Unmarshal(raw, &a.HsmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'hsmfSetId': %w", err)
		}
		delete(object, "hsmfSetId")
	}

	if raw, found := object["ismfBinding"]; found {
		err = json.Unmarshal(raw, &a.IsmfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'ismfBinding': %w", err)
		}
		delete(object, "ismfBinding")
	}

	if raw, found := object["ismfId"]; found {
		err = json.Unmarshal(raw, &a.IsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'ismfId': %w", err)
		}
		delete(object, "ismfId")
	}

	if raw, found := object["ismfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.IsmfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'ismfServiceSetId': %w", err)
		}
		delete(object, "ismfServiceSetId")
	}

	if raw, found := object["ismfSetId"]; found {
		err = json.Unmarshal(raw, &a.IsmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'ismfSetId': %w", err)
		}
		delete(object, "ismfSetId")
	}

	if raw, found := object["maPduSession"]; found {
		err = json.Unmarshal(raw, &a.MaPduSession)
		if err != nil {
			return fmt.Errorf("error reading 'maPduSession': %w", err)
		}
		delete(object, "maPduSession")
	}

	if raw, found := object["nsInstance"]; found {
		err = json.Unmarshal(raw, &a.NsInstance)
		if err != nil {
			return fmt.Errorf("error reading 'nsInstance': %w", err)
		}
		delete(object, "nsInstance")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["selectedDnn"]; found {
		err = json.Unmarshal(raw, &a.SelectedDnn)
		if err != nil {
			return fmt.Errorf("error reading 'selectedDnn': %w", err)
		}
		delete(object, "selectedDnn")
	}

	if raw, found := object["smContextRef"]; found {
		err = json.Unmarshal(raw, &a.SmContextRef)
		if err != nil {
			return fmt.Errorf("error reading 'smContextRef': %w", err)
		}
		delete(object, "smContextRef")
	}

	if raw, found := object["smfBinding"]; found {
		err = json.Unmarshal(raw, &a.SmfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'smfBinding': %w", err)
		}
		delete(object, "smfBinding")
	}

	if raw, found := object["smfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfServiceInstanceId': %w", err)
		}
		delete(object, "smfServiceInstanceId")
	}

	if raw, found := object["vsmfBinding"]; found {
		err = json.Unmarshal(raw, &a.VsmfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfBinding': %w", err)
		}
		delete(object, "vsmfBinding")
	}

	if raw, found := object["vsmfId"]; found {
		err = json.Unmarshal(raw, &a.VsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfId': %w", err)
		}
		delete(object, "vsmfId")
	}

	if raw, found := object["vsmfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.VsmfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfServiceSetId': %w", err)
		}
		delete(object, "vsmfServiceSetId")
	}

	if raw, found := object["vsmfSetId"]; found {
		err = json.Unmarshal(raw, &a.VsmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfSetId': %w", err)
		}
		delete(object, "vsmfSetId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionContext to handle AdditionalProperties
func (a PduSessionContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	if len(a.AdditionalAccessType) != 0 {
		object["additionalAccessType"], err = json.Marshal(a.AdditionalAccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAccessType': %w", err)
		}
	}

	if len(a.AllocatedEbiList) != 0 {
		object["allocatedEbiList"], err = json.Marshal(a.AllocatedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allocatedEbiList': %w", err)
		}
	}

	if a.CnAssistedRanPara != nil {
		object["cnAssistedRanPara"], err = json.Marshal(a.CnAssistedRanPara)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnAssistedRanPara': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.HsmfId != nil {
		object["hsmfId"], err = json.Marshal(a.HsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hsmfId': %w", err)
		}
	}

	if a.HsmfServiceSetId != nil {
		object["hsmfServiceSetId"], err = json.Marshal(a.HsmfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hsmfServiceSetId': %w", err)
		}
	}

	if a.HsmfSetId != nil {
		object["hsmfSetId"], err = json.Marshal(a.HsmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hsmfSetId': %w", err)
		}
	}

	if a.IsmfBinding != nil {
		object["ismfBinding"], err = json.Marshal(a.IsmfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfBinding': %w", err)
		}
	}

	if a.IsmfId != nil {
		object["ismfId"], err = json.Marshal(a.IsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfId': %w", err)
		}
	}

	if a.IsmfServiceSetId != nil {
		object["ismfServiceSetId"], err = json.Marshal(a.IsmfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfServiceSetId': %w", err)
		}
	}

	if a.IsmfSetId != nil {
		object["ismfSetId"], err = json.Marshal(a.IsmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfSetId': %w", err)
		}
	}

	if a.MaPduSession != nil {
		object["maPduSession"], err = json.Marshal(a.MaPduSession)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maPduSession': %w", err)
		}
	}

	if a.NsInstance != nil {
		object["nsInstance"], err = json.Marshal(a.NsInstance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsInstance': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	if a.SelectedDnn != nil {
		object["selectedDnn"], err = json.Marshal(a.SelectedDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedDnn': %w", err)
		}
	}

	object["smContextRef"], err = json.Marshal(a.SmContextRef)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smContextRef': %w", err)
	}

	if a.SmfBinding != nil {
		object["smfBinding"], err = json.Marshal(a.SmfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfBinding': %w", err)
		}
	}

	if a.SmfServiceInstanceId != nil {
		object["smfServiceInstanceId"], err = json.Marshal(a.SmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServiceInstanceId': %w", err)
		}
	}

	if a.VsmfBinding != nil {
		object["vsmfBinding"], err = json.Marshal(a.VsmfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfBinding': %w", err)
		}
	}

	if a.VsmfId != nil {
		object["vsmfId"], err = json.Marshal(a.VsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfId': %w", err)
		}
	}

	if a.VsmfServiceSetId != nil {
		object["vsmfServiceSetId"], err = json.Marshal(a.VsmfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfServiceSetId': %w", err)
		}
	}

	if a.VsmfSetId != nil {
		object["vsmfSetId"], err = json.Marshal(a.VsmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfSetId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionCreateData. Returns the specified
// element and whether it was found
func (a PduSessionCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionCreateData
func (a *PduSessionCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionCreateData to handle AdditionalProperties
func (a *PduSessionCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnRequested"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnRequested)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnRequested': %w", err)
		}
		delete(object, "alwaysOnRequested")
	}

	if raw, found := object["amfNfId"]; found {
		err = json.Unmarshal(raw, &a.AmfNfId)
		if err != nil {
			return fmt.Errorf("error reading 'amfNfId': %w", err)
		}
		delete(object, "amfNfId")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["chargingId"]; found {
		err = json.Unmarshal(raw, &a.ChargingId)
		if err != nil {
			return fmt.Errorf("error reading 'chargingId': %w", err)
		}
		delete(object, "chargingId")
	}

	if raw, found := object["cpCiotEnabled"]; found {
		err = json.Unmarshal(raw, &a.CpCiotEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'cpCiotEnabled': %w", err)
		}
		delete(object, "cpCiotEnabled")
	}

	if raw, found := object["cpOnlyInd"]; found {
		err = json.Unmarshal(raw, &a.CpOnlyInd)
		if err != nil {
			return fmt.Errorf("error reading 'cpOnlyInd': %w", err)
		}
		delete(object, "cpOnlyInd")
	}

	if raw, found := object["dlServingPlmnRateCtl"]; found {
		err = json.Unmarshal(raw, &a.DlServingPlmnRateCtl)
		if err != nil {
			return fmt.Errorf("error reading 'dlServingPlmnRateCtl': %w", err)
		}
		delete(object, "dlServingPlmnRateCtl")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["epsBearerCtxStatus"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerCtxStatus)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerCtxStatus': %w", err)
		}
		delete(object, "epsBearerCtxStatus")
	}

	if raw, found := object["epsBearerId"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerId': %w", err)
		}
		delete(object, "epsBearerId")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hPcfId"]; found {
		err = json.Unmarshal(raw, &a.HPcfId)
		if err != nil {
			return fmt.Errorf("error reading 'hPcfId': %w", err)
		}
		delete(object, "hPcfId")
	}

	if raw, found := object["hoPreparationIndication"]; found {
		err = json.Unmarshal(raw, &a.HoPreparationIndication)
		if err != nil {
			return fmt.Errorf("error reading 'hoPreparationIndication': %w", err)
		}
		delete(object, "hoPreparationIndication")
	}

	if raw, found := object["iSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ISmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'iSmfServiceInstanceId': %w", err)
		}
		delete(object, "iSmfServiceInstanceId")
	}

	if raw, found := object["icnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.IcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'icnTunnelInfo': %w", err)
		}
		delete(object, "icnTunnelInfo")
	}

	if raw, found := object["invokeNef"]; found {
		err = json.Unmarshal(raw, &a.InvokeNef)
		if err != nil {
			return fmt.Errorf("error reading 'invokeNef': %w", err)
		}
		delete(object, "invokeNef")
	}

	if raw, found := object["ismfId"]; found {
		err = json.Unmarshal(raw, &a.IsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'ismfId': %w", err)
		}
		delete(object, "ismfId")
	}

	if raw, found := object["ismfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.IsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'ismfPduSessionUri': %w", err)
		}
		delete(object, "ismfPduSessionUri")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n9ForwardingTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.N9ForwardingTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n9ForwardingTunnelInfo': %w", err)
		}
		delete(object, "n9ForwardingTunnelInfo")
	}

	if raw, found := object["oldPduSessionId"]; found {
		err = json.Unmarshal(raw, &a.OldPduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'oldPduSessionId': %w", err)
		}
		delete(object, "oldPduSessionId")
	}

	if raw, found := object["pcfGroupId"]; found {
		err = json.Unmarshal(raw, &a.PcfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfGroupId': %w", err)
		}
		delete(object, "pcfGroupId")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["pgwS8cFteid"]; found {
		err = json.Unmarshal(raw, &a.PgwS8cFteid)
		if err != nil {
			return fmt.Errorf("error reading 'pgwS8cFteid': %w", err)
		}
		delete(object, "pgwS8cFteid")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["requestType"]; found {
		err = json.Unmarshal(raw, &a.RequestType)
		if err != nil {
			return fmt.Errorf("error reading 'requestType': %w", err)
		}
		delete(object, "requestType")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["selMode"]; found {
		err = json.Unmarshal(raw, &a.SelMode)
		if err != nil {
			return fmt.Errorf("error reading 'selMode': %w", err)
		}
		delete(object, "selMode")
	}

	if raw, found := object["selectedDnn"]; found {
		err = json.Unmarshal(raw, &a.SelectedDnn)
		if err != nil {
			return fmt.Errorf("error reading 'selectedDnn': %w", err)
		}
		delete(object, "selectedDnn")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["unauthenticatedSupi"]; found {
		err = json.Unmarshal(raw, &a.UnauthenticatedSupi)
		if err != nil {
			return fmt.Errorf("error reading 'unauthenticatedSupi': %w", err)
		}
		delete(object, "unauthenticatedSupi")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if raw, found := object["upSecurityInfo"]; found {
		err = json.Unmarshal(raw, &a.UpSecurityInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurityInfo': %w", err)
		}
		delete(object, "upSecurityInfo")
	}

	if raw, found := object["vSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.VSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'vSmfServiceInstanceId': %w", err)
		}
		delete(object, "vSmfServiceInstanceId")
	}

	if raw, found := object["vcnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.VcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'vcnTunnelInfo': %w", err)
		}
		delete(object, "vcnTunnelInfo")
	}

	if raw, found := object["vplmnQos"]; found {
		err = json.Unmarshal(raw, &a.VplmnQos)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnQos': %w", err)
		}
		delete(object, "vplmnQos")
	}

	if raw, found := object["vsmfId"]; found {
		err = json.Unmarshal(raw, &a.VsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfId': %w", err)
		}
		delete(object, "vsmfId")
	}

	if raw, found := object["vsmfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.VsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfPduSessionUri': %w", err)
		}
		delete(object, "vsmfPduSessionUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionCreateData to handle AdditionalProperties
func (a PduSessionCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnRequested != nil {
		object["alwaysOnRequested"], err = json.Marshal(a.AlwaysOnRequested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnRequested': %w", err)
		}
	}

	if a.AmfNfId != nil {
		object["amfNfId"], err = json.Marshal(a.AmfNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNfId': %w", err)
		}
	}

	object["anType"], err = json.Marshal(a.AnType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'anType': %w", err)
	}

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if len(a.ChargingId) != 0 {
		object["chargingId"], err = json.Marshal(a.ChargingId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingId': %w", err)
		}
	}

	if a.CpCiotEnabled != nil {
		object["cpCiotEnabled"], err = json.Marshal(a.CpCiotEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpCiotEnabled': %w", err)
		}
	}

	if a.CpOnlyInd != nil {
		object["cpOnlyInd"], err = json.Marshal(a.CpOnlyInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpOnlyInd': %w", err)
		}
	}

	if a.DlServingPlmnRateCtl != 0 {
		object["dlServingPlmnRateCtl"], err = json.Marshal(a.DlServingPlmnRateCtl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlServingPlmnRateCtl': %w", err)
		}
	}

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.EpsBearerCtxStatus) != 0 {
		object["epsBearerCtxStatus"], err = json.Marshal(a.EpsBearerCtxStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerCtxStatus': %w", err)
		}
	}

	if len(a.EpsBearerId) != 0 {
		object["epsBearerId"], err = json.Marshal(a.EpsBearerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerId': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HPcfId != nil {
		object["hPcfId"], err = json.Marshal(a.HPcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hPcfId': %w", err)
		}
	}

	if a.HoPreparationIndication != nil {
		object["hoPreparationIndication"], err = json.Marshal(a.HoPreparationIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoPreparationIndication': %w", err)
		}
	}

	if a.ISmfServiceInstanceId != nil {
		object["iSmfServiceInstanceId"], err = json.Marshal(a.ISmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iSmfServiceInstanceId': %w", err)
		}
	}

	if a.IcnTunnelInfo != nil {
		object["icnTunnelInfo"], err = json.Marshal(a.IcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'icnTunnelInfo': %w", err)
		}
	}

	if a.InvokeNef != nil {
		object["invokeNef"], err = json.Marshal(a.InvokeNef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invokeNef': %w", err)
		}
	}

	if a.IsmfId != nil {
		object["ismfId"], err = json.Marshal(a.IsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfId': %w", err)
		}
	}

	if a.IsmfPduSessionUri != nil {
		object["ismfPduSessionUri"], err = json.Marshal(a.IsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfPduSessionUri': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if a.N9ForwardingTunnelInfo != nil {
		object["n9ForwardingTunnelInfo"], err = json.Marshal(a.N9ForwardingTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9ForwardingTunnelInfo': %w", err)
		}
	}

	if a.OldPduSessionId != nil {
		object["oldPduSessionId"], err = json.Marshal(a.OldPduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldPduSessionId': %w", err)
		}
	}

	if a.PcfGroupId != nil {
		object["pcfGroupId"], err = json.Marshal(a.PcfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfGroupId': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PgwS8cFteid != nil {
		object["pgwS8cFteid"], err = json.Marshal(a.PgwS8cFteid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwS8cFteid': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.RequestType != nil {
		object["requestType"], err = json.Marshal(a.RequestType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestType': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.RoutingIndicator != nil {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if a.SelMode != nil {
		object["selMode"], err = json.Marshal(a.SelMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selMode': %w", err)
		}
	}

	if a.SelectedDnn != nil {
		object["selectedDnn"], err = json.Marshal(a.SelectedDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedDnn': %w", err)
		}
	}

	object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UnauthenticatedSupi != nil {
		object["unauthenticatedSupi"], err = json.Marshal(a.UnauthenticatedSupi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unauthenticatedSupi': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	if a.UpSecurityInfo != nil {
		object["upSecurityInfo"], err = json.Marshal(a.UpSecurityInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurityInfo': %w", err)
		}
	}

	if a.VSmfServiceInstanceId != nil {
		object["vSmfServiceInstanceId"], err = json.Marshal(a.VSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vSmfServiceInstanceId': %w", err)
		}
	}

	if a.VcnTunnelInfo != nil {
		object["vcnTunnelInfo"], err = json.Marshal(a.VcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vcnTunnelInfo': %w", err)
		}
	}

	if a.VplmnQos != nil {
		object["vplmnQos"], err = json.Marshal(a.VplmnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vplmnQos': %w", err)
		}
	}

	if a.VsmfId != nil {
		object["vsmfId"], err = json.Marshal(a.VsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfId': %w", err)
		}
	}

	if a.VsmfPduSessionUri != nil {
		object["vsmfPduSessionUri"], err = json.Marshal(a.VsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfPduSessionUri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionCreateError. Returns the specified
// element and whether it was found
func (a PduSessionCreateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionCreateError
func (a *PduSessionCreateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionCreateError to handle AdditionalProperties
func (a *PduSessionCreateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backOffTimer"]; found {
		err = json.Unmarshal(raw, &a.BackOffTimer)
		if err != nil {
			return fmt.Errorf("error reading 'backOffTimer': %w", err)
		}
		delete(object, "backOffTimer")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionCreateError to handle AdditionalProperties
func (a PduSessionCreateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackOffTimer != nil {
		object["backOffTimer"], err = json.Marshal(a.BackOffTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backOffTimer': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if len(a.N1smCause) != 0 {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionCreatedData. Returns the specified
// element and whether it was found
func (a PduSessionCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionCreatedData
func (a *PduSessionCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionCreatedData to handle AdditionalProperties
func (a *PduSessionCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnGranted"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnGranted)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnGranted': %w", err)
		}
		delete(object, "alwaysOnGranted")
	}

	if raw, found := object["cnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.CnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'cnTunnelInfo': %w", err)
		}
		delete(object, "cnTunnelInfo")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["enablePauseCharging"]; found {
		err = json.Unmarshal(raw, &a.EnablePauseCharging)
		if err != nil {
			return fmt.Errorf("error reading 'enablePauseCharging': %w", err)
		}
		delete(object, "enablePauseCharging")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hSmfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfInstanceId': %w", err)
		}
		delete(object, "hSmfInstanceId")
	}

	if raw, found := object["hSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfServiceInstanceId': %w", err)
		}
		delete(object, "hSmfServiceInstanceId")
	}

	if raw, found := object["hcnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.HcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'hcnTunnelInfo': %w", err)
		}
		delete(object, "hcnTunnelInfo")
	}

	if raw, found := object["homeProvidedChargingId"]; found {
		err = json.Unmarshal(raw, &a.HomeProvidedChargingId)
		if err != nil {
			return fmt.Errorf("error reading 'homeProvidedChargingId': %w", err)
		}
		delete(object, "homeProvidedChargingId")
	}

	if raw, found := object["ipv6Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Index': %w", err)
		}
		delete(object, "ipv6Index")
	}

	if raw, found := object["ipv6MultiHomingInd"]; found {
		err = json.Unmarshal(raw, &a.Ipv6MultiHomingInd)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6MultiHomingInd': %w", err)
		}
		delete(object, "ipv6MultiHomingInd")
	}

	if raw, found := object["maAcceptedInd"]; found {
		err = json.Unmarshal(raw, &a.MaAcceptedInd)
		if err != nil {
			return fmt.Errorf("error reading 'maAcceptedInd': %w", err)
		}
		delete(object, "maAcceptedInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRate"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRate': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRate")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["nefExtBufSupportInd"]; found {
		err = json.Unmarshal(raw, &a.NefExtBufSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'nefExtBufSupportInd': %w", err)
		}
		delete(object, "nefExtBufSupportInd")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionType"]; found {
		err = json.Unmarshal(raw, &a.PduSessionType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionType': %w", err)
		}
		delete(object, "pduSessionType")
	}

	if raw, found := object["qosFlowsSetupList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsSetupList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsSetupList': %w", err)
		}
		delete(object, "qosFlowsSetupList")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["redundantPduSessionInfo"]; found {
		err = json.Unmarshal(raw, &a.RedundantPduSessionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'redundantPduSessionInfo': %w", err)
		}
		delete(object, "redundantPduSessionInfo")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["smallDataRateControlEnabled"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateControlEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateControlEnabled': %w", err)
		}
		delete(object, "smallDataRateControlEnabled")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["smfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfServiceInstanceId': %w", err)
		}
		delete(object, "smfServiceInstanceId")
	}

	if raw, found := object["sscMode"]; found {
		err = json.Unmarshal(raw, &a.SscMode)
		if err != nil {
			return fmt.Errorf("error reading 'sscMode': %w", err)
		}
		delete(object, "sscMode")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueIpv4Address"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4Address': %w", err)
		}
		delete(object, "ueIpv4Address")
	}

	if raw, found := object["ueIpv6InterfaceId"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6InterfaceId)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6InterfaceId': %w", err)
		}
		delete(object, "ueIpv6InterfaceId")
	}

	if raw, found := object["ueIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Prefix': %w", err)
		}
		delete(object, "ueIpv6Prefix")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionCreatedData to handle AdditionalProperties
func (a PduSessionCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnGranted != nil {
		object["alwaysOnGranted"], err = json.Marshal(a.AlwaysOnGranted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnGranted': %w", err)
		}
	}

	if a.CnTunnelInfo != nil {
		object["cnTunnelInfo"], err = json.Marshal(a.CnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnTunnelInfo': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if a.EnablePauseCharging != nil {
		object["enablePauseCharging"], err = json.Marshal(a.EnablePauseCharging)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enablePauseCharging': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HSmfInstanceId != nil {
		object["hSmfInstanceId"], err = json.Marshal(a.HSmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfInstanceId': %w", err)
		}
	}

	if a.HSmfServiceInstanceId != nil {
		object["hSmfServiceInstanceId"], err = json.Marshal(a.HSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfServiceInstanceId': %w", err)
		}
	}

	if a.HcnTunnelInfo != nil {
		object["hcnTunnelInfo"], err = json.Marshal(a.HcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hcnTunnelInfo': %w", err)
		}
	}

	if len(a.HomeProvidedChargingId) != 0 {
		object["homeProvidedChargingId"], err = json.Marshal(a.HomeProvidedChargingId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'homeProvidedChargingId': %w", err)
		}
	}

	if a.Ipv6Index != nil {
		object["ipv6Index"], err = json.Marshal(a.Ipv6Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Index': %w", err)
		}
	}

	if a.Ipv6MultiHomingInd != nil {
		object["ipv6MultiHomingInd"], err = json.Marshal(a.Ipv6MultiHomingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6MultiHomingInd': %w", err)
		}
	}

	if a.MaAcceptedInd != nil {
		object["maAcceptedInd"], err = json.Marshal(a.MaAcceptedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maAcceptedInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRate != nil {
		object["maxIntegrityProtectedDataRate"], err = json.Marshal(a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRate': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if a.NefExtBufSupportInd != nil {
		object["nefExtBufSupportInd"], err = json.Marshal(a.NefExtBufSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefExtBufSupportInd': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	object["pduSessionType"], err = json.Marshal(a.PduSessionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionType': %w", err)
	}

	if len(a.QosFlowsSetupList) != 0 {
		object["qosFlowsSetupList"], err = json.Marshal(a.QosFlowsSetupList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsSetupList': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.RedundantPduSessionInfo != nil {
		object["redundantPduSessionInfo"], err = json.Marshal(a.RedundantPduSessionInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantPduSessionInfo': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	if a.SmallDataRateControlEnabled != nil {
		object["smallDataRateControlEnabled"], err = json.Marshal(a.SmallDataRateControlEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateControlEnabled': %w", err)
		}
	}

	if a.SmfInstanceId != nil {
		object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
		}
	}

	if a.SmfServiceInstanceId != nil {
		object["smfServiceInstanceId"], err = json.Marshal(a.SmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServiceInstanceId': %w", err)
		}
	}

	object["sscMode"], err = json.Marshal(a.SscMode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sscMode': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.UeIpv4Address) != 0 {
		object["ueIpv4Address"], err = json.Marshal(a.UeIpv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4Address': %w", err)
		}
	}

	if len(a.UeIpv6InterfaceId) != 0 {
		object["ueIpv6InterfaceId"], err = json.Marshal(a.UeIpv6InterfaceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6InterfaceId': %w", err)
		}
	}

	if a.UeIpv6Prefix != nil {
		object["ueIpv6Prefix"], err = json.Marshal(a.UeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Prefix': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionInformation. Returns the specified
// element and whether it was found
func (a PduSessionInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionInformation
func (a *PduSessionInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionInformation to handle AdditionalProperties
func (a *PduSessionInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionInformation to handle AdditionalProperties
func (a PduSessionInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	if len(a.UeIpv4) != 0 {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionManagementData. Returns the specified
// element and whether it was found
func (a PduSessionManagementData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionManagementData
func (a *PduSessionManagementData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionManagementData to handle AdditionalProperties
func (a *PduSessionManagementData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnai"]; found {
		err = json.Unmarshal(raw, &a.Dnai)
		if err != nil {
			return fmt.Errorf("error reading 'dnai': %w", err)
		}
		delete(object, "dnai")
	}

	if raw, found := object["dnaiTs"]; found {
		err = json.Unmarshal(raw, &a.DnaiTs)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiTs': %w", err)
		}
		delete(object, "dnaiTs")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ipAddrTs"]; found {
		err = json.Unmarshal(raw, &a.IpAddrTs)
		if err != nil {
			return fmt.Errorf("error reading 'ipAddrTs': %w", err)
		}
		delete(object, "ipAddrTs")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addrs': %w", err)
		}
		delete(object, "ipv6Addrs")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if raw, found := object["n6TrafficRoutingInfo"]; found {
		err = json.Unmarshal(raw, &a.N6TrafficRoutingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n6TrafficRoutingInfo': %w", err)
		}
		delete(object, "n6TrafficRoutingInfo")
	}

	if raw, found := object["n6TrafficRoutingInfoTs"]; found {
		err = json.Unmarshal(raw, &a.N6TrafficRoutingInfoTs)
		if err != nil {
			return fmt.Errorf("error reading 'n6TrafficRoutingInfoTs': %w", err)
		}
		delete(object, "n6TrafficRoutingInfoTs")
	}

	if raw, found := object["pduSessType"]; found {
		err = json.Unmarshal(raw, &a.PduSessType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessType': %w", err)
		}
		delete(object, "pduSessType")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionStatus"]; found {
		err = json.Unmarshal(raw, &a.PduSessionStatus)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionStatus': %w", err)
		}
		delete(object, "pduSessionStatus")
	}

	if raw, found := object["pduSessionStatusTs"]; found {
		err = json.Unmarshal(raw, &a.PduSessionStatusTs)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionStatusTs': %w", err)
		}
		delete(object, "pduSessionStatusTs")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionManagementData to handle AdditionalProperties
func (a PduSessionManagementData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnai != nil {
		object["dnai"], err = json.Marshal(a.Dnai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnai': %w", err)
		}
	}

	if a.DnaiTs != nil {
		object["dnaiTs"], err = json.Marshal(a.DnaiTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiTs': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.IpAddrTs != nil {
		object["ipAddrTs"], err = json.Marshal(a.IpAddrTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipAddrTs': %w", err)
		}
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if len(a.Ipv6Addrs) != 0 {
		object["ipv6Addrs"], err = json.Marshal(a.Ipv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addrs': %w", err)
		}
	}

	if len(a.Ipv6Prefix) != 0 {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	if a.N6TrafficRoutingInfo != nil {
		object["n6TrafficRoutingInfo"], err = json.Marshal(a.N6TrafficRoutingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n6TrafficRoutingInfo': %w", err)
		}
	}

	if a.N6TrafficRoutingInfoTs != nil {
		object["n6TrafficRoutingInfoTs"], err = json.Marshal(a.N6TrafficRoutingInfoTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n6TrafficRoutingInfoTs': %w", err)
		}
	}

	if a.PduSessType != nil {
		object["pduSessType"], err = json.Marshal(a.PduSessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessType': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if a.PduSessionStatus != nil {
		object["pduSessionStatus"], err = json.Marshal(a.PduSessionStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionStatus': %w", err)
		}
	}

	if a.PduSessionStatusTs != nil {
		object["pduSessionStatusTs"], err = json.Marshal(a.PduSessionStatusTs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionStatusTs': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionNotifyItem. Returns the specified
// element and whether it was found
func (a PduSessionNotifyItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionNotifyItem
func (a *PduSessionNotifyItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionNotifyItem to handle AdditionalProperties
func (a *PduSessionNotifyItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notificationCause"]; found {
		err = json.Unmarshal(raw, &a.NotificationCause)
		if err != nil {
			return fmt.Errorf("error reading 'notificationCause': %w", err)
		}
		delete(object, "notificationCause")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionNotifyItem to handle AdditionalProperties
func (a PduSessionNotifyItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["notificationCause"], err = json.Marshal(a.NotificationCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationCause': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionStatusCfg. Returns the specified
// element and whether it was found
func (a PduSessionStatusCfg) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionStatusCfg
func (a *PduSessionStatusCfg) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionStatusCfg to handle AdditionalProperties
func (a *PduSessionStatusCfg) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionStatusCfg to handle AdditionalProperties
func (a PduSessionStatusCfg) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionTsnBridge. Returns the specified
// element and whether it was found
func (a PduSessionTsnBridge) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionTsnBridge
func (a *PduSessionTsnBridge) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionTsnBridge to handle AdditionalProperties
func (a *PduSessionTsnBridge) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["tsnBridgeInfo"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeInfo': %w", err)
		}
		delete(object, "tsnBridgeInfo")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionTsnBridge to handle AdditionalProperties
func (a PduSessionTsnBridge) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["tsnBridgeInfo"], err = json.Marshal(a.TsnBridgeInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tsnBridgeInfo': %w", err)
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionTypes. Returns the specified
// element and whether it was found
func (a PduSessionTypes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionTypes
func (a *PduSessionTypes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionTypes to handle AdditionalProperties
func (a *PduSessionTypes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.AllowedSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSessionTypes': %w", err)
		}
		delete(object, "allowedSessionTypes")
	}

	if raw, found := object["defaultSessionType"]; found {
		err = json.Unmarshal(raw, &a.DefaultSessionType)
		if err != nil {
			return fmt.Errorf("error reading 'defaultSessionType': %w", err)
		}
		delete(object, "defaultSessionType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionTypes to handle AdditionalProperties
func (a PduSessionTypes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedSessionTypes) != 0 {
		object["allowedSessionTypes"], err = json.Marshal(a.AllowedSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSessionTypes': %w", err)
		}
	}

	object["defaultSessionType"], err = json.Marshal(a.DefaultSessionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultSessionType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PeiUpdateInfo. Returns the specified
// element and whether it was found
func (a PeiUpdateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PeiUpdateInfo
func (a *PeiUpdateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PeiUpdateInfo to handle AdditionalProperties
func (a *PeiUpdateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PeiUpdateInfo to handle AdditionalProperties
func (a PeiUpdateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["pei"], err = json.Marshal(a.Pei)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pei': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pfd. Returns the specified
// element and whether it was found
func (a Pfd) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pfd
func (a *Pfd) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pfd to handle AdditionalProperties
func (a *Pfd) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnProtocol"]; found {
		err = json.Unmarshal(raw, &a.DnProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'dnProtocol': %w", err)
		}
		delete(object, "dnProtocol")
	}

	if raw, found := object["domainNames"]; found {
		err = json.Unmarshal(raw, &a.DomainNames)
		if err != nil {
			return fmt.Errorf("error reading 'domainNames': %w", err)
		}
		delete(object, "domainNames")
	}

	if raw, found := object["flowDescriptions"]; found {
		err = json.Unmarshal(raw, &a.FlowDescriptions)
		if err != nil {
			return fmt.Errorf("error reading 'flowDescriptions': %w", err)
		}
		delete(object, "flowDescriptions")
	}

	if raw, found := object["pfdId"]; found {
		err = json.Unmarshal(raw, &a.PfdId)
		if err != nil {
			return fmt.Errorf("error reading 'pfdId': %w", err)
		}
		delete(object, "pfdId")
	}

	if raw, found := object["urls"]; found {
		err = json.Unmarshal(raw, &a.Urls)
		if err != nil {
			return fmt.Errorf("error reading 'urls': %w", err)
		}
		delete(object, "urls")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pfd to handle AdditionalProperties
func (a Pfd) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DnProtocol != nil {
		object["dnProtocol"], err = json.Marshal(a.DnProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnProtocol': %w", err)
		}
	}

	if len(a.DomainNames) != 0 {
		object["domainNames"], err = json.Marshal(a.DomainNames)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'domainNames': %w", err)
		}
	}

	if len(a.FlowDescriptions) != 0 {
		object["flowDescriptions"], err = json.Marshal(a.FlowDescriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDescriptions': %w", err)
		}
	}

	object["pfdId"], err = json.Marshal(a.PfdId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfdId': %w", err)
	}

	if len(a.Urls) != 0 {
		object["urls"], err = json.Marshal(a.Urls)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urls': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdChangeNotification. Returns the specified
// element and whether it was found
func (a PfdChangeNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdChangeNotification
func (a *PfdChangeNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdChangeNotification to handle AdditionalProperties
func (a *PfdChangeNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["partialFlag"]; found {
		err = json.Unmarshal(raw, &a.PartialFlag)
		if err != nil {
			return fmt.Errorf("error reading 'partialFlag': %w", err)
		}
		delete(object, "partialFlag")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["removalFlag"]; found {
		err = json.Unmarshal(raw, &a.RemovalFlag)
		if err != nil {
			return fmt.Errorf("error reading 'removalFlag': %w", err)
		}
		delete(object, "removalFlag")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdChangeNotification to handle AdditionalProperties
func (a PfdChangeNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	if a.PartialFlag != nil {
		object["partialFlag"], err = json.Marshal(a.PartialFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'partialFlag': %w", err)
		}
	}

	if len(a.Pfds) != 0 {
		object["pfds"], err = json.Marshal(a.Pfds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
		}
	}

	if a.RemovalFlag != nil {
		object["removalFlag"], err = json.Marshal(a.RemovalFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'removalFlag': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdChangeReport. Returns the specified
// element and whether it was found
func (a PfdChangeReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdChangeReport
func (a *PfdChangeReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdChangeReport to handle AdditionalProperties
func (a *PfdChangeReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["pfdError"]; found {
		err = json.Unmarshal(raw, &a.PfdError)
		if err != nil {
			return fmt.Errorf("error reading 'pfdError': %w", err)
		}
		delete(object, "pfdError")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdChangeReport to handle AdditionalProperties
func (a PfdChangeReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	object["pfdError"], err = json.Marshal(a.PfdError)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfdError': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdContent. Returns the specified
// element and whether it was found
func (a PfdContent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdContent
func (a *PfdContent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdContent to handle AdditionalProperties
func (a *PfdContent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnProtocol"]; found {
		err = json.Unmarshal(raw, &a.DnProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'dnProtocol': %w", err)
		}
		delete(object, "dnProtocol")
	}

	if raw, found := object["domainNames"]; found {
		err = json.Unmarshal(raw, &a.DomainNames)
		if err != nil {
			return fmt.Errorf("error reading 'domainNames': %w", err)
		}
		delete(object, "domainNames")
	}

	if raw, found := object["flowDescriptions"]; found {
		err = json.Unmarshal(raw, &a.FlowDescriptions)
		if err != nil {
			return fmt.Errorf("error reading 'flowDescriptions': %w", err)
		}
		delete(object, "flowDescriptions")
	}

	if raw, found := object["pfdId"]; found {
		err = json.Unmarshal(raw, &a.PfdId)
		if err != nil {
			return fmt.Errorf("error reading 'pfdId': %w", err)
		}
		delete(object, "pfdId")
	}

	if raw, found := object["urls"]; found {
		err = json.Unmarshal(raw, &a.Urls)
		if err != nil {
			return fmt.Errorf("error reading 'urls': %w", err)
		}
		delete(object, "urls")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdContent to handle AdditionalProperties
func (a PfdContent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DnProtocol != nil {
		object["dnProtocol"], err = json.Marshal(a.DnProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnProtocol': %w", err)
		}
	}

	if len(a.DomainNames) != 0 {
		object["domainNames"], err = json.Marshal(a.DomainNames)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'domainNames': %w", err)
		}
	}

	if len(a.FlowDescriptions) != 0 {
		object["flowDescriptions"], err = json.Marshal(a.FlowDescriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDescriptions': %w", err)
		}
	}

	if a.PfdId != nil {
		object["pfdId"], err = json.Marshal(a.PfdId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdId': %w", err)
		}
	}

	if len(a.Urls) != 0 {
		object["urls"], err = json.Marshal(a.Urls)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urls': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdData. Returns the specified
// element and whether it was found
func (a PfdData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdData
func (a *PfdData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdData to handle AdditionalProperties
func (a *PfdData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedDelay"]; found {
		err = json.Unmarshal(raw, &a.AllowedDelay)
		if err != nil {
			return fmt.Errorf("error reading 'allowedDelay': %w", err)
		}
		delete(object, "allowedDelay")
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["externalAppId"]; found {
		err = json.Unmarshal(raw, &a.ExternalAppId)
		if err != nil {
			return fmt.Errorf("error reading 'externalAppId': %w", err)
		}
		delete(object, "externalAppId")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdData to handle AdditionalProperties
func (a PfdData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedDelay"], err = json.Marshal(a.AllowedDelay)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedDelay': %w", err)
	}

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["externalAppId"], err = json.Marshal(a.ExternalAppId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'externalAppId': %w", err)
	}

	object["pfds"], err = json.Marshal(a.Pfds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdDataForApp. Returns the specified
// element and whether it was found
func (a PfdDataForApp) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdDataForApp
func (a *PfdDataForApp) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdDataForApp to handle AdditionalProperties
func (a *PfdDataForApp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdDataForApp to handle AdditionalProperties
func (a PfdDataForApp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["pfds"], err = json.Marshal(a.Pfds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdDataForAppExt. Returns the specified
// element and whether it was found
func (a PfdDataForAppExt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdDataForAppExt
func (a *PfdDataForAppExt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdDataForAppExt to handle AdditionalProperties
func (a *PfdDataForAppExt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdDataForAppExt to handle AdditionalProperties
func (a PfdDataForAppExt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["pfds"], err = json.Marshal(a.Pfds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdManagement. Returns the specified
// element and whether it was found
func (a PfdManagement) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdManagement
func (a *PfdManagement) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdManagement to handle AdditionalProperties
func (a *PfdManagement) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notificationDestination"]; found {
		err = json.Unmarshal(raw, &a.NotificationDestination)
		if err != nil {
			return fmt.Errorf("error reading 'notificationDestination': %w", err)
		}
		delete(object, "notificationDestination")
	}

	if raw, found := object["pfdDatas"]; found {
		err = json.Unmarshal(raw, &a.PfdDatas)
		if err != nil {
			return fmt.Errorf("error reading 'pfdDatas': %w", err)
		}
		delete(object, "pfdDatas")
	}

	if raw, found := object["pfdReports"]; found {
		err = json.Unmarshal(raw, &a.PfdReports)
		if err != nil {
			return fmt.Errorf("error reading 'pfdReports': %w", err)
		}
		delete(object, "pfdReports")
	}

	if raw, found := object["requestTestNotification"]; found {
		err = json.Unmarshal(raw, &a.RequestTestNotification)
		if err != nil {
			return fmt.Errorf("error reading 'requestTestNotification': %w", err)
		}
		delete(object, "requestTestNotification")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["websockNotifConfig"]; found {
		err = json.Unmarshal(raw, &a.WebsockNotifConfig)
		if err != nil {
			return fmt.Errorf("error reading 'websockNotifConfig': %w", err)
		}
		delete(object, "websockNotifConfig")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdManagement to handle AdditionalProperties
func (a PfdManagement) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NotificationDestination != nil {
		object["notificationDestination"], err = json.Marshal(a.NotificationDestination)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notificationDestination': %w", err)
		}
	}

	object["pfdDatas"], err = json.Marshal(a.PfdDatas)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfdDatas': %w", err)
	}

	if a.PfdReports != nil {
		object["pfdReports"], err = json.Marshal(a.PfdReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdReports': %w", err)
		}
	}

	if a.RequestTestNotification != nil {
		object["requestTestNotification"], err = json.Marshal(a.RequestTestNotification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestTestNotification': %w", err)
		}
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.WebsockNotifConfig != nil {
		object["websockNotifConfig"], err = json.Marshal(a.WebsockNotifConfig)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'websockNotifConfig': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdReport. Returns the specified
// element and whether it was found
func (a PfdReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdReport
func (a *PfdReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdReport to handle AdditionalProperties
func (a *PfdReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["externalAppIds"]; found {
		err = json.Unmarshal(raw, &a.ExternalAppIds)
		if err != nil {
			return fmt.Errorf("error reading 'externalAppIds': %w", err)
		}
		delete(object, "externalAppIds")
	}

	if raw, found := object["failureCode"]; found {
		err = json.Unmarshal(raw, &a.FailureCode)
		if err != nil {
			return fmt.Errorf("error reading 'failureCode': %w", err)
		}
		delete(object, "failureCode")
	}

	if raw, found := object["locationArea"]; found {
		err = json.Unmarshal(raw, &a.LocationArea)
		if err != nil {
			return fmt.Errorf("error reading 'locationArea': %w", err)
		}
		delete(object, "locationArea")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdReport to handle AdditionalProperties
func (a PfdReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["externalAppIds"], err = json.Marshal(a.ExternalAppIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'externalAppIds': %w", err)
	}

	object["failureCode"], err = json.Marshal(a.FailureCode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'failureCode': %w", err)
	}

	if a.LocationArea != nil {
		object["locationArea"], err = json.Marshal(a.LocationArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationArea': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdSubscription. Returns the specified
// element and whether it was found
func (a PfdSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdSubscription
func (a *PfdSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdSubscription to handle AdditionalProperties
func (a *PfdSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationIds"]; found {
		err = json.Unmarshal(raw, &a.ApplicationIds)
		if err != nil {
			return fmt.Errorf("error reading 'applicationIds': %w", err)
		}
		delete(object, "applicationIds")
	}

	if raw, found := object["notifyUri"]; found {
		err = json.Unmarshal(raw, &a.NotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifyUri': %w", err)
		}
		delete(object, "notifyUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdSubscription to handle AdditionalProperties
func (a PfdSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ApplicationIds) != 0 {
		object["applicationIds"], err = json.Marshal(a.ApplicationIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'applicationIds': %w", err)
		}
	}

	object["notifyUri"], err = json.Marshal(a.NotifyUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyUri': %w", err)
	}

	object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PgwInfo. Returns the specified
// element and whether it was found
func (a PgwInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PgwInfo
func (a *PgwInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PgwInfo to handle AdditionalProperties
func (a *PgwInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["epdgInd"]; found {
		err = json.Unmarshal(raw, &a.EpdgInd)
		if err != nil {
			return fmt.Errorf("error reading 'epdgInd': %w", err)
		}
		delete(object, "epdgInd")
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PgwInfo to handle AdditionalProperties
func (a PgwInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.EpdgInd != nil {
		object["epdgInd"], err = json.Marshal(a.EpdgInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epdgInd': %w", err)
		}
	}

	object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnEcInfo. Returns the specified
// element and whether it was found
func (a PlmnEcInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnEcInfo
func (a *PlmnEcInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnEcInfo to handle AdditionalProperties
func (a *PlmnEcInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecRestrictionDataNb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataNb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataNb': %w", err)
		}
		delete(object, "ecRestrictionDataNb")
	}

	if raw, found := object["ecRestrictionDataWb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataWb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataWb': %w", err)
		}
		delete(object, "ecRestrictionDataWb")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnEcInfo to handle AdditionalProperties
func (a PlmnEcInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EcRestrictionDataNb != nil {
		object["ecRestrictionDataNb"], err = json.Marshal(a.EcRestrictionDataNb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataNb': %w", err)
		}
	}

	if a.EcRestrictionDataWb != nil {
		object["ecRestrictionDataWb"], err = json.Marshal(a.EcRestrictionDataWb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataWb': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnIdNid. Returns the specified
// element and whether it was found
func (a PlmnIdNid) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnIdNid
func (a *PlmnIdNid) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnIdNid to handle AdditionalProperties
func (a *PlmnIdNid) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mcc"]; found {
		err = json.Unmarshal(raw, &a.Mcc)
		if err != nil {
			return fmt.Errorf("error reading 'mcc': %w", err)
		}
		delete(object, "mcc")
	}

	if raw, found := object["mnc"]; found {
		err = json.Unmarshal(raw, &a.Mnc)
		if err != nil {
			return fmt.Errorf("error reading 'mnc': %w", err)
		}
		delete(object, "mnc")
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnIdNid to handle AdditionalProperties
func (a PlmnIdNid) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["mcc"], err = json.Marshal(a.Mcc)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mcc': %w", err)
	}

	object["mnc"], err = json.Marshal(a.Mnc)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mnc': %w", err)
	}

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnOperatorClass. Returns the specified
// element and whether it was found
func (a PlmnOperatorClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnOperatorClass
func (a *PlmnOperatorClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnOperatorClass to handle AdditionalProperties
func (a *PlmnOperatorClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lcsClientClass"]; found {
		err = json.Unmarshal(raw, &a.LcsClientClass)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientClass': %w", err)
		}
		delete(object, "lcsClientClass")
	}

	if raw, found := object["lcsClientIds"]; found {
		err = json.Unmarshal(raw, &a.LcsClientIds)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientIds': %w", err)
		}
		delete(object, "lcsClientIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnOperatorClass to handle AdditionalProperties
func (a PlmnOperatorClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lcsClientClass"], err = json.Marshal(a.LcsClientClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsClientClass': %w", err)
	}

	object["lcsClientIds"], err = json.Marshal(a.LcsClientIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsClientIds': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnRange. Returns the specified
// element and whether it was found
func (a PlmnRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnRange
func (a *PlmnRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnRange to handle AdditionalProperties
func (a *PlmnRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnRange to handle AdditionalProperties
func (a PlmnRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if a.Pattern != nil {
		object["pattern"], err = json.Marshal(a.Pattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnRouteSelectionDescriptor. Returns the specified
// element and whether it was found
func (a PlmnRouteSelectionDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnRouteSelectionDescriptor
func (a *PlmnRouteSelectionDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnRouteSelectionDescriptor to handle AdditionalProperties
func (a *PlmnRouteSelectionDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["servingPlmn"]; found {
		err = json.Unmarshal(raw, &a.ServingPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'servingPlmn': %w", err)
		}
		delete(object, "servingPlmn")
	}

	if raw, found := object["snssaiRouteSelDescs"]; found {
		err = json.Unmarshal(raw, &a.SnssaiRouteSelDescs)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiRouteSelDescs': %w", err)
		}
		delete(object, "snssaiRouteSelDescs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnRouteSelectionDescriptor to handle AdditionalProperties
func (a PlmnRouteSelectionDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["servingPlmn"], err = json.Marshal(a.ServingPlmn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingPlmn': %w", err)
	}

	if len(a.SnssaiRouteSelDescs) != 0 {
		object["snssaiRouteSelDescs"], err = json.Marshal(a.SnssaiRouteSelDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiRouteSelDescs': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnSnssai. Returns the specified
// element and whether it was found
func (a PlmnSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnSnssai
func (a *PlmnSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnSnssai to handle AdditionalProperties
func (a *PlmnSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["sNssaiList"]; found {
		err = json.Unmarshal(raw, &a.SNssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'sNssaiList': %w", err)
		}
		delete(object, "sNssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnSnssai to handle AdditionalProperties
func (a PlmnSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["sNssaiList"], err = json.Marshal(a.SNssaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssaiList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyAuthorizationQosMonitoringReport. Returns the specified
// element and whether it was found
func (a PolicyAuthorizationQosMonitoringReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyAuthorizationQosMonitoringReport
func (a *PolicyAuthorizationQosMonitoringReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyAuthorizationQosMonitoringReport to handle AdditionalProperties
func (a *PolicyAuthorizationQosMonitoringReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dlDelays"]; found {
		err = json.Unmarshal(raw, &a.DlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'dlDelays': %w", err)
		}
		delete(object, "dlDelays")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if raw, found := object["rtDelays"]; found {
		err = json.Unmarshal(raw, &a.RtDelays)
		if err != nil {
			return fmt.Errorf("error reading 'rtDelays': %w", err)
		}
		delete(object, "rtDelays")
	}

	if raw, found := object["ulDelays"]; found {
		err = json.Unmarshal(raw, &a.UlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'ulDelays': %w", err)
		}
		delete(object, "ulDelays")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyAuthorizationQosMonitoringReport to handle AdditionalProperties
func (a PolicyAuthorizationQosMonitoringReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DlDelays) != 0 {
		object["dlDelays"], err = json.Marshal(a.DlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDelays': %w", err)
		}
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	if len(a.RtDelays) != 0 {
		object["rtDelays"], err = json.Marshal(a.RtDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rtDelays': %w", err)
		}
	}

	if len(a.UlDelays) != 0 {
		object["ulDelays"], err = json.Marshal(a.UlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulDelays': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyAuthorizationQosNotificationControlInfo. Returns the specified
// element and whether it was found
func (a PolicyAuthorizationQosNotificationControlInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyAuthorizationQosNotificationControlInfo
func (a *PolicyAuthorizationQosNotificationControlInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyAuthorizationQosNotificationControlInfo to handle AdditionalProperties
func (a *PolicyAuthorizationQosNotificationControlInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altSerReq"]; found {
		err = json.Unmarshal(raw, &a.AltSerReq)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReq': %w", err)
		}
		delete(object, "altSerReq")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if raw, found := object["notifType"]; found {
		err = json.Unmarshal(raw, &a.NotifType)
		if err != nil {
			return fmt.Errorf("error reading 'notifType': %w", err)
		}
		delete(object, "notifType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyAuthorizationQosNotificationControlInfo to handle AdditionalProperties
func (a PolicyAuthorizationQosNotificationControlInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltSerReq != nil {
		object["altSerReq"], err = json.Marshal(a.AltSerReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altSerReq': %w", err)
		}
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	object["notifType"], err = json.Marshal(a.NotifType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyDataChangeNotification. Returns the specified
// element and whether it was found
func (a PolicyDataChangeNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyDataChangeNotification
func (a *PolicyDataChangeNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyDataChangeNotification to handle AdditionalProperties
func (a *PolicyDataChangeNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["SponsorConnectivityData"]; found {
		err = json.Unmarshal(raw, &a.SponsorConnectivityData)
		if err != nil {
			return fmt.Errorf("error reading 'SponsorConnectivityData': %w", err)
		}
		delete(object, "SponsorConnectivityData")
	}

	if raw, found := object["amPolicyData"]; found {
		err = json.Unmarshal(raw, &a.AmPolicyData)
		if err != nil {
			return fmt.Errorf("error reading 'amPolicyData': %w", err)
		}
		delete(object, "amPolicyData")
	}

	if raw, found := object["bdtData"]; found {
		err = json.Unmarshal(raw, &a.BdtData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtData': %w", err)
		}
		delete(object, "bdtData")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["delResources"]; found {
		err = json.Unmarshal(raw, &a.DelResources)
		if err != nil {
			return fmt.Errorf("error reading 'delResources': %w", err)
		}
		delete(object, "delResources")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["opSpecData"]; found {
		err = json.Unmarshal(raw, &a.OpSpecData)
		if err != nil {
			return fmt.Errorf("error reading 'opSpecData': %w", err)
		}
		delete(object, "opSpecData")
	}

	if raw, found := object["opSpecDataMap"]; found {
		err = json.Unmarshal(raw, &a.OpSpecDataMap)
		if err != nil {
			return fmt.Errorf("error reading 'opSpecDataMap': %w", err)
		}
		delete(object, "opSpecDataMap")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["plmnUePolicySet"]; found {
		err = json.Unmarshal(raw, &a.PlmnUePolicySet)
		if err != nil {
			return fmt.Errorf("error reading 'plmnUePolicySet': %w", err)
		}
		delete(object, "plmnUePolicySet")
	}

	if raw, found := object["reportedFragments"]; found {
		err = json.Unmarshal(raw, &a.ReportedFragments)
		if err != nil {
			return fmt.Errorf("error reading 'reportedFragments': %w", err)
		}
		delete(object, "reportedFragments")
	}

	if raw, found := object["smPolicyData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicyData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicyData': %w", err)
		}
		delete(object, "smPolicyData")
	}

	if raw, found := object["sponsorId"]; found {
		err = json.Unmarshal(raw, &a.SponsorId)
		if err != nil {
			return fmt.Errorf("error reading 'sponsorId': %w", err)
		}
		delete(object, "sponsorId")
	}

	if raw, found := object["ueId"]; found {
		err = json.Unmarshal(raw, &a.UeId)
		if err != nil {
			return fmt.Errorf("error reading 'ueId': %w", err)
		}
		delete(object, "ueId")
	}

	if raw, found := object["uePolicySet"]; found {
		err = json.Unmarshal(raw, &a.UePolicySet)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySet': %w", err)
		}
		delete(object, "uePolicySet")
	}

	if raw, found := object["usageMonData"]; found {
		err = json.Unmarshal(raw, &a.UsageMonData)
		if err != nil {
			return fmt.Errorf("error reading 'usageMonData': %w", err)
		}
		delete(object, "usageMonData")
	}

	if raw, found := object["usageMonId"]; found {
		err = json.Unmarshal(raw, &a.UsageMonId)
		if err != nil {
			return fmt.Errorf("error reading 'usageMonId': %w", err)
		}
		delete(object, "usageMonId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyDataChangeNotification to handle AdditionalProperties
func (a PolicyDataChangeNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SponsorConnectivityData != nil {
		object["SponsorConnectivityData"], err = json.Marshal(a.SponsorConnectivityData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'SponsorConnectivityData': %w", err)
		}
	}

	if a.AmPolicyData != nil {
		object["amPolicyData"], err = json.Marshal(a.AmPolicyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amPolicyData': %w", err)
		}
	}

	if a.BdtData != nil {
		object["bdtData"], err = json.Marshal(a.BdtData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtData': %w", err)
		}
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	if len(a.DelResources) != 0 {
		object["delResources"], err = json.Marshal(a.DelResources)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'delResources': %w", err)
		}
	}

	if a.NotifId != nil {
		object["notifId"], err = json.Marshal(a.NotifId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
		}
	}

	if a.OpSpecData != nil {
		object["opSpecData"], err = json.Marshal(a.OpSpecData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'opSpecData': %w", err)
		}
	}

	if a.OpSpecDataMap != nil {
		object["opSpecDataMap"], err = json.Marshal(a.OpSpecDataMap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'opSpecDataMap': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.PlmnUePolicySet != nil {
		object["plmnUePolicySet"], err = json.Marshal(a.PlmnUePolicySet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnUePolicySet': %w", err)
		}
	}

	if len(a.ReportedFragments) != 0 {
		object["reportedFragments"], err = json.Marshal(a.ReportedFragments)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportedFragments': %w", err)
		}
	}

	if a.SmPolicyData != nil {
		object["smPolicyData"], err = json.Marshal(a.SmPolicyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicyData': %w", err)
		}
	}

	if a.SponsorId != nil {
		object["sponsorId"], err = json.Marshal(a.SponsorId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponsorId': %w", err)
		}
	}

	if len(a.UeId) != 0 {
		object["ueId"], err = json.Marshal(a.UeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueId': %w", err)
		}
	}

	if a.UePolicySet != nil {
		object["uePolicySet"], err = json.Marshal(a.UePolicySet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicySet': %w", err)
		}
	}

	if a.UsageMonData != nil {
		object["usageMonData"], err = json.Marshal(a.UsageMonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usageMonData': %w", err)
		}
	}

	if a.UsageMonId != nil {
		object["usageMonId"], err = json.Marshal(a.UsageMonId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usageMonId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PolicyDataSubscription. Returns the specified
// element and whether it was found
func (a PolicyDataSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PolicyDataSubscription
func (a *PolicyDataSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PolicyDataSubscription to handle AdditionalProperties
func (a *PolicyDataSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["monResItems"]; found {
		err = json.Unmarshal(raw, &a.MonResItems)
		if err != nil {
			return fmt.Errorf("error reading 'monResItems': %w", err)
		}
		delete(object, "monResItems")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PolicyDataSubscription to handle AdditionalProperties
func (a PolicyDataSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if len(a.MonResItems) != 0 {
		object["monResItems"], err = json.Marshal(a.MonResItems)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monResItems': %w", err)
		}
	}

	object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
	}

	if a.NotifId != nil {
		object["notifId"], err = json.Marshal(a.NotifId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PortManagementContainer. Returns the specified
// element and whether it was found
func (a PortManagementContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PortManagementContainer
func (a *PortManagementContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PortManagementContainer to handle AdditionalProperties
func (a *PortManagementContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["portManCont"]; found {
		err = json.Unmarshal(raw, &a.PortManCont)
		if err != nil {
			return fmt.Errorf("error reading 'portManCont': %w", err)
		}
		delete(object, "portManCont")
	}

	if raw, found := object["portNum"]; found {
		err = json.Unmarshal(raw, &a.PortNum)
		if err != nil {
			return fmt.Errorf("error reading 'portNum': %w", err)
		}
		delete(object, "portNum")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PortManagementContainer to handle AdditionalProperties
func (a PortManagementContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["portManCont"], err = json.Marshal(a.PortManCont)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'portManCont': %w", err)
	}

	object["portNum"], err = json.Marshal(a.PortNum)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'portNum': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pp5gVnGroupProfileData. Returns the specified
// element and whether it was found
func (a Pp5gVnGroupProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pp5gVnGroupProfileData
func (a *Pp5gVnGroupProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pp5gVnGroupProfileData to handle AdditionalProperties
func (a *Pp5gVnGroupProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProviders"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProviders)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProviders': %w", err)
		}
		delete(object, "allowedMtcProviders")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pp5gVnGroupProfileData to handle AdditionalProperties
func (a Pp5gVnGroupProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProviders != nil {
		object["allowedMtcProviders"], err = json.Marshal(a.AllowedMtcProviders)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProviders': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpActiveTime. Returns the specified
// element and whether it was found
func (a PpActiveTime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpActiveTime
func (a *PpActiveTime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpActiveTime to handle AdditionalProperties
func (a *PpActiveTime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["activeTime"]; found {
		err = json.Unmarshal(raw, &a.ActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'activeTime': %w", err)
		}
		delete(object, "activeTime")
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpActiveTime to handle AdditionalProperties
func (a PpActiveTime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["activeTime"], err = json.Marshal(a.ActiveTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'activeTime': %w", err)
	}

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpData. Returns the specified
// element and whether it was found
func (a PpData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpData
func (a *PpData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpData to handle AdditionalProperties
func (a *PpData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["acsInfo"]; found {
		err = json.Unmarshal(raw, &a.AcsInfo)
		if err != nil {
			return fmt.Errorf("error reading 'acsInfo': %w", err)
		}
		delete(object, "acsInfo")
	}

	if raw, found := object["communicationCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.CommunicationCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading 'communicationCharacteristics': %w", err)
		}
		delete(object, "communicationCharacteristics")
	}

	if raw, found := object["ecRestriction"]; found {
		err = json.Unmarshal(raw, &a.EcRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestriction': %w", err)
		}
		delete(object, "ecRestriction")
	}

	if raw, found := object["expectedUeBehaviourParameters"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUeBehaviourParameters)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUeBehaviourParameters': %w", err)
		}
		delete(object, "expectedUeBehaviourParameters")
	}

	if raw, found := object["lcsPrivacy"]; found {
		err = json.Unmarshal(raw, &a.LcsPrivacy)
		if err != nil {
			return fmt.Errorf("error reading 'lcsPrivacy': %w", err)
		}
		delete(object, "lcsPrivacy")
	}

	if raw, found := object["sorInfo"]; found {
		err = json.Unmarshal(raw, &a.SorInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sorInfo': %w", err)
		}
		delete(object, "sorInfo")
	}

	if raw, found := object["stnSr"]; found {
		err = json.Unmarshal(raw, &a.StnSr)
		if err != nil {
			return fmt.Errorf("error reading 'stnSr': %w", err)
		}
		delete(object, "stnSr")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpData to handle AdditionalProperties
func (a PpData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AcsInfo != nil {
		object["acsInfo"], err = json.Marshal(a.AcsInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsInfo': %w", err)
		}
	}

	if a.CommunicationCharacteristics != nil {
		object["communicationCharacteristics"], err = json.Marshal(a.CommunicationCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'communicationCharacteristics': %w", err)
		}
	}

	if a.EcRestriction != nil {
		object["ecRestriction"], err = json.Marshal(a.EcRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestriction': %w", err)
		}
	}

	if a.ExpectedUeBehaviourParameters != nil {
		object["expectedUeBehaviourParameters"], err = json.Marshal(a.ExpectedUeBehaviourParameters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUeBehaviourParameters': %w", err)
		}
	}

	if a.LcsPrivacy != nil {
		object["lcsPrivacy"], err = json.Marshal(a.LcsPrivacy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsPrivacy': %w", err)
		}
	}

	if a.SorInfo != nil {
		object["sorInfo"], err = json.Marshal(a.SorInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorInfo': %w", err)
		}
	}

	object["stnSr"], err = json.Marshal(a.StnSr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'stnSr': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpDlPacketCountExt. Returns the specified
// element and whether it was found
func (a PpDlPacketCountExt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpDlPacketCountExt
func (a *PpDlPacketCountExt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpDlPacketCountExt to handle AdditionalProperties
func (a *PpDlPacketCountExt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpDlPacketCountExt to handle AdditionalProperties
func (a PpDlPacketCountExt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpMaximumLatency. Returns the specified
// element and whether it was found
func (a PpMaximumLatency) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpMaximumLatency
func (a *PpMaximumLatency) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpMaximumLatency to handle AdditionalProperties
func (a *PpMaximumLatency) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["maximumLatency"]; found {
		err = json.Unmarshal(raw, &a.MaximumLatency)
		if err != nil {
			return fmt.Errorf("error reading 'maximumLatency': %w", err)
		}
		delete(object, "maximumLatency")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpMaximumLatency to handle AdditionalProperties
func (a PpMaximumLatency) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	object["maximumLatency"], err = json.Marshal(a.MaximumLatency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maximumLatency': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpMaximumResponseTime. Returns the specified
// element and whether it was found
func (a PpMaximumResponseTime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpMaximumResponseTime
func (a *PpMaximumResponseTime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpMaximumResponseTime to handle AdditionalProperties
func (a *PpMaximumResponseTime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["maximumResponseTime"]; found {
		err = json.Unmarshal(raw, &a.MaximumResponseTime)
		if err != nil {
			return fmt.Errorf("error reading 'maximumResponseTime': %w", err)
		}
		delete(object, "maximumResponseTime")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpMaximumResponseTime to handle AdditionalProperties
func (a PpMaximumResponseTime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	object["maximumResponseTime"], err = json.Marshal(a.MaximumResponseTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maximumResponseTime': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpProfileData. Returns the specified
// element and whether it was found
func (a PpProfileData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpProfileData
func (a *PpProfileData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpProfileData to handle AdditionalProperties
func (a *PpProfileData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedMtcProviders"]; found {
		err = json.Unmarshal(raw, &a.AllowedMtcProviders)
		if err != nil {
			return fmt.Errorf("error reading 'allowedMtcProviders': %w", err)
		}
		delete(object, "allowedMtcProviders")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpProfileData to handle AdditionalProperties
func (a PpProfileData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedMtcProviders != nil {
		object["allowedMtcProviders"], err = json.Marshal(a.AllowedMtcProviders)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedMtcProviders': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpSubsRegTimer. Returns the specified
// element and whether it was found
func (a PpSubsRegTimer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpSubsRegTimer
func (a *PpSubsRegTimer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpSubsRegTimer to handle AdditionalProperties
func (a *PpSubsRegTimer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["subsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.SubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'subsRegTimer': %w", err)
		}
		delete(object, "subsRegTimer")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpSubsRegTimer to handle AdditionalProperties
func (a PpSubsRegTimer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	object["subsRegTimer"], err = json.Marshal(a.SubsRegTimer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subsRegTimer': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PreferredSearch. Returns the specified
// element and whether it was found
func (a PreferredSearch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PreferredSearch
func (a *PreferredSearch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PreferredSearch to handle AdditionalProperties
func (a *PreferredSearch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["otherApiVersionsInd"]; found {
		err = json.Unmarshal(raw, &a.OtherApiVersionsInd)
		if err != nil {
			return fmt.Errorf("error reading 'otherApiVersionsInd': %w", err)
		}
		delete(object, "otherApiVersionsInd")
	}

	if raw, found := object["otherLocalityInd"]; found {
		err = json.Unmarshal(raw, &a.OtherLocalityInd)
		if err != nil {
			return fmt.Errorf("error reading 'otherLocalityInd': %w", err)
		}
		delete(object, "otherLocalityInd")
	}

	if raw, found := object["preferredApiVersionsMatchInd"]; found {
		err = json.Unmarshal(raw, &a.PreferredApiVersionsMatchInd)
		if err != nil {
			return fmt.Errorf("error reading 'preferredApiVersionsMatchInd': %w", err)
		}
		delete(object, "preferredApiVersionsMatchInd")
	}

	if raw, found := object["preferredFullPlmnMatchInd"]; found {
		err = json.Unmarshal(raw, &a.PreferredFullPlmnMatchInd)
		if err != nil {
			return fmt.Errorf("error reading 'preferredFullPlmnMatchInd': %w", err)
		}
		delete(object, "preferredFullPlmnMatchInd")
	}

	if raw, found := object["preferredLocalityMatchInd"]; found {
		err = json.Unmarshal(raw, &a.PreferredLocalityMatchInd)
		if err != nil {
			return fmt.Errorf("error reading 'preferredLocalityMatchInd': %w", err)
		}
		delete(object, "preferredLocalityMatchInd")
	}

	if raw, found := object["preferredTaiMatchInd"]; found {
		err = json.Unmarshal(raw, &a.PreferredTaiMatchInd)
		if err != nil {
			return fmt.Errorf("error reading 'preferredTaiMatchInd': %w", err)
		}
		delete(object, "preferredTaiMatchInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PreferredSearch to handle AdditionalProperties
func (a PreferredSearch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.OtherApiVersionsInd != nil {
		object["otherApiVersionsInd"], err = json.Marshal(a.OtherApiVersionsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'otherApiVersionsInd': %w", err)
		}
	}

	if a.OtherLocalityInd != nil {
		object["otherLocalityInd"], err = json.Marshal(a.OtherLocalityInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'otherLocalityInd': %w", err)
		}
	}

	if a.PreferredApiVersionsMatchInd != nil {
		object["preferredApiVersionsMatchInd"], err = json.Marshal(a.PreferredApiVersionsMatchInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preferredApiVersionsMatchInd': %w", err)
		}
	}

	if a.PreferredFullPlmnMatchInd != nil {
		object["preferredFullPlmnMatchInd"], err = json.Marshal(a.PreferredFullPlmnMatchInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preferredFullPlmnMatchInd': %w", err)
		}
	}

	if a.PreferredLocalityMatchInd != nil {
		object["preferredLocalityMatchInd"], err = json.Marshal(a.PreferredLocalityMatchInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preferredLocalityMatchInd': %w", err)
		}
	}

	if a.PreferredTaiMatchInd != nil {
		object["preferredTaiMatchInd"], err = json.Marshal(a.PreferredTaiMatchInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preferredTaiMatchInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PresenceInfo. Returns the specified
// element and whether it was found
func (a PresenceInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PresenceInfo
func (a *PresenceInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PresenceInfo to handle AdditionalProperties
func (a *PresenceInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalPraId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalPraId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalPraId': %w", err)
		}
		delete(object, "additionalPraId")
	}

	if raw, found := object["ecgiList"]; found {
		err = json.Unmarshal(raw, &a.EcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ecgiList': %w", err)
		}
		delete(object, "ecgiList")
	}

	if raw, found := object["globalRanNodeIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobalRanNodeIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globalRanNodeIdList': %w", err)
		}
		delete(object, "globalRanNodeIdList")
	}

	if raw, found := object["globaleNbIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobaleNbIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globaleNbIdList': %w", err)
		}
		delete(object, "globaleNbIdList")
	}

	if raw, found := object["ncgiList"]; found {
		err = json.Unmarshal(raw, &a.NcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ncgiList': %w", err)
		}
		delete(object, "ncgiList")
	}

	if raw, found := object["praId"]; found {
		err = json.Unmarshal(raw, &a.PraId)
		if err != nil {
			return fmt.Errorf("error reading 'praId': %w", err)
		}
		delete(object, "praId")
	}

	if raw, found := object["presenceState"]; found {
		err = json.Unmarshal(raw, &a.PresenceState)
		if err != nil {
			return fmt.Errorf("error reading 'presenceState': %w", err)
		}
		delete(object, "presenceState")
	}

	if raw, found := object["trackingAreaList"]; found {
		err = json.Unmarshal(raw, &a.TrackingAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'trackingAreaList': %w", err)
		}
		delete(object, "trackingAreaList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PresenceInfo to handle AdditionalProperties
func (a PresenceInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalPraId != nil {
		object["additionalPraId"], err = json.Marshal(a.AdditionalPraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalPraId': %w", err)
		}
	}

	if len(a.EcgiList) != 0 {
		object["ecgiList"], err = json.Marshal(a.EcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgiList': %w", err)
		}
	}

	if len(a.GlobalRanNodeIdList) != 0 {
		object["globalRanNodeIdList"], err = json.Marshal(a.GlobalRanNodeIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalRanNodeIdList': %w", err)
		}
	}

	if len(a.GlobaleNbIdList) != 0 {
		object["globaleNbIdList"], err = json.Marshal(a.GlobaleNbIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globaleNbIdList': %w", err)
		}
	}

	if len(a.NcgiList) != 0 {
		object["ncgiList"], err = json.Marshal(a.NcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgiList': %w", err)
		}
	}

	if a.PraId != nil {
		object["praId"], err = json.Marshal(a.PraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praId': %w", err)
		}
	}

	if a.PresenceState != nil {
		object["presenceState"], err = json.Marshal(a.PresenceState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceState': %w", err)
		}
	}

	if len(a.TrackingAreaList) != 0 {
		object["trackingAreaList"], err = json.Marshal(a.TrackingAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trackingAreaList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PresenceInfoRm. Returns the specified
// element and whether it was found
func (a PresenceInfoRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PresenceInfoRm
func (a *PresenceInfoRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PresenceInfoRm to handle AdditionalProperties
func (a *PresenceInfoRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalPraId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalPraId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalPraId': %w", err)
		}
		delete(object, "additionalPraId")
	}

	if raw, found := object["ecgiList"]; found {
		err = json.Unmarshal(raw, &a.EcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ecgiList': %w", err)
		}
		delete(object, "ecgiList")
	}

	if raw, found := object["globalRanNodeIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobalRanNodeIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globalRanNodeIdList': %w", err)
		}
		delete(object, "globalRanNodeIdList")
	}

	if raw, found := object["globaleNbIdList"]; found {
		err = json.Unmarshal(raw, &a.GlobaleNbIdList)
		if err != nil {
			return fmt.Errorf("error reading 'globaleNbIdList': %w", err)
		}
		delete(object, "globaleNbIdList")
	}

	if raw, found := object["ncgiList"]; found {
		err = json.Unmarshal(raw, &a.NcgiList)
		if err != nil {
			return fmt.Errorf("error reading 'ncgiList': %w", err)
		}
		delete(object, "ncgiList")
	}

	if raw, found := object["praId"]; found {
		err = json.Unmarshal(raw, &a.PraId)
		if err != nil {
			return fmt.Errorf("error reading 'praId': %w", err)
		}
		delete(object, "praId")
	}

	if raw, found := object["presenceState"]; found {
		err = json.Unmarshal(raw, &a.PresenceState)
		if err != nil {
			return fmt.Errorf("error reading 'presenceState': %w", err)
		}
		delete(object, "presenceState")
	}

	if raw, found := object["trackingAreaList"]; found {
		err = json.Unmarshal(raw, &a.TrackingAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'trackingAreaList': %w", err)
		}
		delete(object, "trackingAreaList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PresenceInfoRm to handle AdditionalProperties
func (a PresenceInfoRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalPraId != nil {
		object["additionalPraId"], err = json.Marshal(a.AdditionalPraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalPraId': %w", err)
		}
	}

	if a.EcgiList != nil {
		object["ecgiList"], err = json.Marshal(a.EcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgiList': %w", err)
		}
	}

	if a.GlobalRanNodeIdList != nil {
		object["globalRanNodeIdList"], err = json.Marshal(a.GlobalRanNodeIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalRanNodeIdList': %w", err)
		}
	}

	if len(a.GlobaleNbIdList) != 0 {
		object["globaleNbIdList"], err = json.Marshal(a.GlobaleNbIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globaleNbIdList': %w", err)
		}
	}

	if a.NcgiList != nil {
		object["ncgiList"], err = json.Marshal(a.NcgiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgiList': %w", err)
		}
	}

	if a.PraId != nil {
		object["praId"], err = json.Marshal(a.PraId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praId': %w", err)
		}
	}

	if a.PresenceState != nil {
		object["presenceState"], err = json.Marshal(a.PresenceState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceState': %w", err)
		}
	}

	if a.TrackingAreaList != nil {
		object["trackingAreaList"], err = json.Marshal(a.TrackingAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trackingAreaList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetailsAddInfo. Returns the specified
// element and whether it was found
func (a ProblemDetailsAddInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetailsAddInfo
func (a *ProblemDetailsAddInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetailsAddInfo to handle AdditionalProperties
func (a *ProblemDetailsAddInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["remoteError"]; found {
		err = json.Unmarshal(raw, &a.RemoteError)
		if err != nil {
			return fmt.Errorf("error reading 'remoteError': %w", err)
		}
		delete(object, "remoteError")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetailsAddInfo to handle AdditionalProperties
func (a ProblemDetailsAddInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RemoteError != nil {
		object["remoteError"], err = json.Marshal(a.RemoteError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remoteError': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetailsEnableUeReachability. Returns the specified
// element and whether it was found
func (a ProblemDetailsEnableUeReachability) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetailsEnableUeReachability
func (a *ProblemDetailsEnableUeReachability) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetailsEnableUeReachability to handle AdditionalProperties
func (a *ProblemDetailsEnableUeReachability) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetailsEnableUeReachability to handle AdditionalProperties
func (a ProblemDetailsEnableUeReachability) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProvideLocInfo. Returns the specified
// element and whether it was found
func (a ProvideLocInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProvideLocInfo
func (a *ProvideLocInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProvideLocInfo to handle AdditionalProperties
func (a *ProvideLocInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalLocation"]; found {
		err = json.Unmarshal(raw, &a.AdditionalLocation)
		if err != nil {
			return fmt.Errorf("error reading 'additionalLocation': %w", err)
		}
		delete(object, "additionalLocation")
	}

	if raw, found := object["currentLoc"]; found {
		err = json.Unmarshal(raw, &a.CurrentLoc)
		if err != nil {
			return fmt.Errorf("error reading 'currentLoc': %w", err)
		}
		delete(object, "currentLoc")
	}

	if raw, found := object["geoInfo"]; found {
		err = json.Unmarshal(raw, &a.GeoInfo)
		if err != nil {
			return fmt.Errorf("error reading 'geoInfo': %w", err)
		}
		delete(object, "geoInfo")
	}

	if raw, found := object["location"]; found {
		err = json.Unmarshal(raw, &a.Location)
		if err != nil {
			return fmt.Errorf("error reading 'location': %w", err)
		}
		delete(object, "location")
	}

	if raw, found := object["locationAge"]; found {
		err = json.Unmarshal(raw, &a.LocationAge)
		if err != nil {
			return fmt.Errorf("error reading 'locationAge': %w", err)
		}
		delete(object, "locationAge")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["timezone"]; found {
		err = json.Unmarshal(raw, &a.Timezone)
		if err != nil {
			return fmt.Errorf("error reading 'timezone': %w", err)
		}
		delete(object, "timezone")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProvideLocInfo to handle AdditionalProperties
func (a ProvideLocInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalLocation != nil {
		object["additionalLocation"], err = json.Marshal(a.AdditionalLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalLocation': %w", err)
		}
	}

	if a.CurrentLoc != nil {
		object["currentLoc"], err = json.Marshal(a.CurrentLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentLoc': %w", err)
		}
	}

	if a.GeoInfo != nil {
		object["geoInfo"], err = json.Marshal(a.GeoInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geoInfo': %w", err)
		}
	}

	if a.Location != nil {
		object["location"], err = json.Marshal(a.Location)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'location': %w", err)
		}
	}

	if a.LocationAge != nil {
		object["locationAge"], err = json.Marshal(a.LocationAge)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationAge': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Timezone != nil {
		object["timezone"], err = json.Marshal(a.Timezone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timezone': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProvidePosInfo. Returns the specified
// element and whether it was found
func (a ProvidePosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProvidePosInfo
func (a *ProvidePosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProvidePosInfo to handle AdditionalProperties
func (a *ProvidePosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accuracyFulfilmentIndicator"]; found {
		err = json.Unmarshal(raw, &a.AccuracyFulfilmentIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'accuracyFulfilmentIndicator': %w", err)
		}
		delete(object, "accuracyFulfilmentIndicator")
	}

	if raw, found := object["ageOfLocationEstimate"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationEstimate': %w", err)
		}
		delete(object, "ageOfLocationEstimate")
	}

	if raw, found := object["altitude"]; found {
		err = json.Unmarshal(raw, &a.Altitude)
		if err != nil {
			return fmt.Errorf("error reading 'altitude': %w", err)
		}
		delete(object, "altitude")
	}

	if raw, found := object["barometricPressure"]; found {
		err = json.Unmarshal(raw, &a.BarometricPressure)
		if err != nil {
			return fmt.Errorf("error reading 'barometricPressure': %w", err)
		}
		delete(object, "barometricPressure")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ecgi"]; found {
		err = json.Unmarshal(raw, &a.Ecgi)
		if err != nil {
			return fmt.Errorf("error reading 'ecgi': %w", err)
		}
		delete(object, "ecgi")
	}

	if raw, found := object["gnssPositioningDataList"]; found {
		err = json.Unmarshal(raw, &a.GnssPositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'gnssPositioningDataList': %w", err)
		}
		delete(object, "gnssPositioningDataList")
	}

	if raw, found := object["locationEstimate"]; found {
		err = json.Unmarshal(raw, &a.LocationEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'locationEstimate': %w", err)
		}
		delete(object, "locationEstimate")
	}

	if raw, found := object["locationPrivacyVerResult"]; found {
		err = json.Unmarshal(raw, &a.LocationPrivacyVerResult)
		if err != nil {
			return fmt.Errorf("error reading 'locationPrivacyVerResult': %w", err)
		}
		delete(object, "locationPrivacyVerResult")
	}

	if raw, found := object["ncgi"]; found {
		err = json.Unmarshal(raw, &a.Ncgi)
		if err != nil {
			return fmt.Errorf("error reading 'ncgi': %w", err)
		}
		delete(object, "ncgi")
	}

	if raw, found := object["positioningDataList"]; found {
		err = json.Unmarshal(raw, &a.PositioningDataList)
		if err != nil {
			return fmt.Errorf("error reading 'positioningDataList': %w", err)
		}
		delete(object, "positioningDataList")
	}

	if raw, found := object["servingLMFIdentification"]; found {
		err = json.Unmarshal(raw, &a.ServingLMFIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'servingLMFIdentification': %w", err)
		}
		delete(object, "servingLMFIdentification")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetMmeName"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeName)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeName': %w", err)
		}
		delete(object, "targetMmeName")
	}

	if raw, found := object["targetMmeRealm"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeRealm)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeRealm': %w", err)
		}
		delete(object, "targetMmeRealm")
	}

	if raw, found := object["targetServingNode"]; found {
		err = json.Unmarshal(raw, &a.TargetServingNode)
		if err != nil {
			return fmt.Errorf("error reading 'targetServingNode': %w", err)
		}
		delete(object, "targetServingNode")
	}

	if raw, found := object["utranSrvccInd"]; found {
		err = json.Unmarshal(raw, &a.UtranSrvccInd)
		if err != nil {
			return fmt.Errorf("error reading 'utranSrvccInd': %w", err)
		}
		delete(object, "utranSrvccInd")
	}

	if raw, found := object["velocityEstimate"]; found {
		err = json.Unmarshal(raw, &a.VelocityEstimate)
		if err != nil {
			return fmt.Errorf("error reading 'velocityEstimate': %w", err)
		}
		delete(object, "velocityEstimate")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProvidePosInfo to handle AdditionalProperties
func (a ProvidePosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccuracyFulfilmentIndicator != nil {
		object["accuracyFulfilmentIndicator"], err = json.Marshal(a.AccuracyFulfilmentIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accuracyFulfilmentIndicator': %w", err)
		}
	}

	if a.AgeOfLocationEstimate != nil {
		object["ageOfLocationEstimate"], err = json.Marshal(a.AgeOfLocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationEstimate': %w", err)
		}
	}

	if a.Altitude != nil {
		object["altitude"], err = json.Marshal(a.Altitude)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altitude': %w", err)
		}
	}

	if a.BarometricPressure != nil {
		object["barometricPressure"], err = json.Marshal(a.BarometricPressure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'barometricPressure': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	if a.Ecgi != nil {
		object["ecgi"], err = json.Marshal(a.Ecgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgi': %w", err)
		}
	}

	if a.GnssPositioningDataList != nil {
		object["gnssPositioningDataList"], err = json.Marshal(a.GnssPositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gnssPositioningDataList': %w", err)
		}
	}

	if a.LocationEstimate != nil {
		object["locationEstimate"], err = json.Marshal(a.LocationEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationEstimate': %w", err)
		}
	}

	if a.LocationPrivacyVerResult != nil {
		object["locationPrivacyVerResult"], err = json.Marshal(a.LocationPrivacyVerResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationPrivacyVerResult': %w", err)
		}
	}

	if a.Ncgi != nil {
		object["ncgi"], err = json.Marshal(a.Ncgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgi': %w", err)
		}
	}

	if a.PositioningDataList != nil {
		object["positioningDataList"], err = json.Marshal(a.PositioningDataList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'positioningDataList': %w", err)
		}
	}

	if a.ServingLMFIdentification != nil {
		object["servingLMFIdentification"], err = json.Marshal(a.ServingLMFIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingLMFIdentification': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.TargetMmeName) != 0 {
		object["targetMmeName"], err = json.Marshal(a.TargetMmeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeName': %w", err)
		}
	}

	if len(a.TargetMmeRealm) != 0 {
		object["targetMmeRealm"], err = json.Marshal(a.TargetMmeRealm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeRealm': %w", err)
		}
	}

	if a.TargetServingNode != nil {
		object["targetServingNode"], err = json.Marshal(a.TargetServingNode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetServingNode': %w", err)
		}
	}

	if a.UtranSrvccInd != nil {
		object["utranSrvccInd"], err = json.Marshal(a.UtranSrvccInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'utranSrvccInd': %w", err)
		}
	}

	if a.VelocityEstimate != nil {
		object["velocityEstimate"], err = json.Marshal(a.VelocityEstimate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'velocityEstimate': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProvisionedDataSets. Returns the specified
// element and whether it was found
func (a ProvisionedDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProvisionedDataSets
func (a *ProvisionedDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProvisionedDataSets to handle AdditionalProperties
func (a *ProvisionedDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amData"]; found {
		err = json.Unmarshal(raw, &a.AmData)
		if err != nil {
			return fmt.Errorf("error reading 'amData': %w", err)
		}
		delete(object, "amData")
	}

	if raw, found := object["lcsBcaData"]; found {
		err = json.Unmarshal(raw, &a.LcsBcaData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsBcaData': %w", err)
		}
		delete(object, "lcsBcaData")
	}

	if raw, found := object["lcsMoData"]; found {
		err = json.Unmarshal(raw, &a.LcsMoData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsMoData': %w", err)
		}
		delete(object, "lcsMoData")
	}

	if raw, found := object["lcsPrivacyData"]; found {
		err = json.Unmarshal(raw, &a.LcsPrivacyData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsPrivacyData': %w", err)
		}
		delete(object, "lcsPrivacyData")
	}

	if raw, found := object["smData"]; found {
		err = json.Unmarshal(raw, &a.SmData)
		if err != nil {
			return fmt.Errorf("error reading 'smData': %w", err)
		}
		delete(object, "smData")
	}

	if raw, found := object["smfSelData"]; found {
		err = json.Unmarshal(raw, &a.SmfSelData)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelData': %w", err)
		}
		delete(object, "smfSelData")
	}

	if raw, found := object["smsMngData"]; found {
		err = json.Unmarshal(raw, &a.SmsMngData)
		if err != nil {
			return fmt.Errorf("error reading 'smsMngData': %w", err)
		}
		delete(object, "smsMngData")
	}

	if raw, found := object["smsSubsData"]; found {
		err = json.Unmarshal(raw, &a.SmsSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'smsSubsData': %w", err)
		}
		delete(object, "smsSubsData")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["v2xData"]; found {
		err = json.Unmarshal(raw, &a.V2xData)
		if err != nil {
			return fmt.Errorf("error reading 'v2xData': %w", err)
		}
		delete(object, "v2xData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProvisionedDataSets to handle AdditionalProperties
func (a ProvisionedDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmData != nil {
		object["amData"], err = json.Marshal(a.AmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amData': %w", err)
		}
	}

	if a.LcsBcaData != nil {
		object["lcsBcaData"], err = json.Marshal(a.LcsBcaData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsBcaData': %w", err)
		}
	}

	if a.LcsMoData != nil {
		object["lcsMoData"], err = json.Marshal(a.LcsMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsMoData': %w", err)
		}
	}

	if a.LcsPrivacyData != nil {
		object["lcsPrivacyData"], err = json.Marshal(a.LcsPrivacyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsPrivacyData': %w", err)
		}
	}

	if a.SmData != nil {
		object["smData"], err = json.Marshal(a.SmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smData': %w", err)
		}
	}

	if a.SmfSelData != nil {
		object["smfSelData"], err = json.Marshal(a.SmfSelData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfSelData': %w", err)
		}
	}

	if a.SmsMngData != nil {
		object["smsMngData"], err = json.Marshal(a.SmsMngData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsMngData': %w", err)
		}
	}

	if a.SmsSubsData != nil {
		object["smsSubsData"], err = json.Marshal(a.SmsSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsSubsData': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.V2xData != nil {
		object["v2xData"], err = json.Marshal(a.V2xData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'v2xData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PsaInformation. Returns the specified
// element and whether it was found
func (a PsaInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PsaInformation
func (a *PsaInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PsaInformation to handle AdditionalProperties
func (a *PsaInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["psaInd"]; found {
		err = json.Unmarshal(raw, &a.PsaInd)
		if err != nil {
			return fmt.Errorf("error reading 'psaInd': %w", err)
		}
		delete(object, "psaInd")
	}

	if raw, found := object["psaUpfId"]; found {
		err = json.Unmarshal(raw, &a.PsaUpfId)
		if err != nil {
			return fmt.Errorf("error reading 'psaUpfId': %w", err)
		}
		delete(object, "psaUpfId")
	}

	if raw, found := object["ueIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Prefix': %w", err)
		}
		delete(object, "ueIpv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PsaInformation to handle AdditionalProperties
func (a PsaInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if a.PsaInd != nil {
		object["psaInd"], err = json.Marshal(a.PsaInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaInd': %w", err)
		}
	}

	if a.PsaUpfId != nil {
		object["psaUpfId"], err = json.Marshal(a.PsaUpfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaUpfId': %w", err)
		}
	}

	if a.UeIpv6Prefix != nil {
		object["ueIpv6Prefix"], err = json.Marshal(a.UeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PtwParameters. Returns the specified
// element and whether it was found
func (a PtwParameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PtwParameters
func (a *PtwParameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PtwParameters to handle AdditionalProperties
func (a *PtwParameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["operationMode"]; found {
		err = json.Unmarshal(raw, &a.OperationMode)
		if err != nil {
			return fmt.Errorf("error reading 'operationMode': %w", err)
		}
		delete(object, "operationMode")
	}

	if raw, found := object["ptwValue"]; found {
		err = json.Unmarshal(raw, &a.PtwValue)
		if err != nil {
			return fmt.Errorf("error reading 'ptwValue': %w", err)
		}
		delete(object, "ptwValue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PtwParameters to handle AdditionalProperties
func (a PtwParameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["operationMode"], err = json.Marshal(a.OperationMode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'operationMode': %w", err)
	}

	object["ptwValue"], err = json.Marshal(a.PtwValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ptwValue': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PwsInformation. Returns the specified
// element and whether it was found
func (a PwsInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PwsInformation
func (a *PwsInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PwsInformation to handle AdditionalProperties
func (a *PwsInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bcEmptyAreaList"]; found {
		err = json.Unmarshal(raw, &a.BcEmptyAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'bcEmptyAreaList': %w", err)
		}
		delete(object, "bcEmptyAreaList")
	}

	if raw, found := object["messageIdentifier"]; found {
		err = json.Unmarshal(raw, &a.MessageIdentifier)
		if err != nil {
			return fmt.Errorf("error reading 'messageIdentifier': %w", err)
		}
		delete(object, "messageIdentifier")
	}

	if raw, found := object["omcId"]; found {
		err = json.Unmarshal(raw, &a.OmcId)
		if err != nil {
			return fmt.Errorf("error reading 'omcId': %w", err)
		}
		delete(object, "omcId")
	}

	if raw, found := object["pwsContainer"]; found {
		err = json.Unmarshal(raw, &a.PwsContainer)
		if err != nil {
			return fmt.Errorf("error reading 'pwsContainer': %w", err)
		}
		delete(object, "pwsContainer")
	}

	if raw, found := object["sendRanResponse"]; found {
		err = json.Unmarshal(raw, &a.SendRanResponse)
		if err != nil {
			return fmt.Errorf("error reading 'sendRanResponse': %w", err)
		}
		delete(object, "sendRanResponse")
	}

	if raw, found := object["serialNumber"]; found {
		err = json.Unmarshal(raw, &a.SerialNumber)
		if err != nil {
			return fmt.Errorf("error reading 'serialNumber': %w", err)
		}
		delete(object, "serialNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PwsInformation to handle AdditionalProperties
func (a PwsInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.BcEmptyAreaList) != 0 {
		object["bcEmptyAreaList"], err = json.Marshal(a.BcEmptyAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bcEmptyAreaList': %w", err)
		}
	}

	object["messageIdentifier"], err = json.Marshal(a.MessageIdentifier)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'messageIdentifier': %w", err)
	}

	if a.OmcId != nil {
		object["omcId"], err = json.Marshal(a.OmcId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'omcId': %w", err)
		}
	}

	object["pwsContainer"], err = json.Marshal(a.PwsContainer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pwsContainer': %w", err)
	}

	if a.SendRanResponse != nil {
		object["sendRanResponse"], err = json.Marshal(a.SendRanResponse)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sendRanResponse': %w", err)
		}
	}

	object["serialNumber"], err = json.Marshal(a.SerialNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serialNumber': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosCharacteristics. Returns the specified
// element and whether it was found
func (a QosCharacteristics) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosCharacteristics
func (a *QosCharacteristics) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosCharacteristics to handle AdditionalProperties
func (a *QosCharacteristics) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["averagingWindow"]; found {
		err = json.Unmarshal(raw, &a.AveragingWindow)
		if err != nil {
			return fmt.Errorf("error reading 'averagingWindow': %w", err)
		}
		delete(object, "averagingWindow")
	}

	if raw, found := object["extMaxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.ExtMaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'extMaxDataBurstVol': %w", err)
		}
		delete(object, "extMaxDataBurstVol")
	}

	if raw, found := object["maxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.MaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'maxDataBurstVol': %w", err)
		}
		delete(object, "maxDataBurstVol")
	}

	if raw, found := object["packetDelayBudget"]; found {
		err = json.Unmarshal(raw, &a.PacketDelayBudget)
		if err != nil {
			return fmt.Errorf("error reading 'packetDelayBudget': %w", err)
		}
		delete(object, "packetDelayBudget")
	}

	if raw, found := object["packetErrorRate"]; found {
		err = json.Unmarshal(raw, &a.PacketErrorRate)
		if err != nil {
			return fmt.Errorf("error reading 'packetErrorRate': %w", err)
		}
		delete(object, "packetErrorRate")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if raw, found := object["resourceType"]; found {
		err = json.Unmarshal(raw, &a.ResourceType)
		if err != nil {
			return fmt.Errorf("error reading 'resourceType': %w", err)
		}
		delete(object, "resourceType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosCharacteristics to handle AdditionalProperties
func (a QosCharacteristics) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5qi"], err = json.Marshal(a.N5qi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5qi': %w", err)
	}

	if a.AveragingWindow != 0 {
		object["averagingWindow"], err = json.Marshal(a.AveragingWindow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'averagingWindow': %w", err)
		}
	}

	if a.ExtMaxDataBurstVol != 0 {
		object["extMaxDataBurstVol"], err = json.Marshal(a.ExtMaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extMaxDataBurstVol': %w", err)
		}
	}

	if a.MaxDataBurstVol != 0 {
		object["maxDataBurstVol"], err = json.Marshal(a.MaxDataBurstVol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxDataBurstVol': %w", err)
		}
	}

	object["packetDelayBudget"], err = json.Marshal(a.PacketDelayBudget)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packetDelayBudget': %w", err)
	}

	object["packetErrorRate"], err = json.Marshal(a.PacketErrorRate)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packetErrorRate': %w", err)
	}

	object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
	}

	object["resourceType"], err = json.Marshal(a.ResourceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosData. Returns the specified
// element and whether it was found
func (a QosData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosData
func (a *QosData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosData to handle AdditionalProperties
func (a *QosData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["averWindow"]; found {
		err = json.Unmarshal(raw, &a.AverWindow)
		if err != nil {
			return fmt.Errorf("error reading 'averWindow': %w", err)
		}
		delete(object, "averWindow")
	}

	if raw, found := object["defQosFlowIndication"]; found {
		err = json.Unmarshal(raw, &a.DefQosFlowIndication)
		if err != nil {
			return fmt.Errorf("error reading 'defQosFlowIndication': %w", err)
		}
		delete(object, "defQosFlowIndication")
	}

	if raw, found := object["extMaxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.ExtMaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'extMaxDataBurstVol': %w", err)
		}
		delete(object, "extMaxDataBurstVol")
	}

	if raw, found := object["gbrDl"]; found {
		err = json.Unmarshal(raw, &a.GbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrDl': %w", err)
		}
		delete(object, "gbrDl")
	}

	if raw, found := object["gbrUl"]; found {
		err = json.Unmarshal(raw, &a.GbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrUl': %w", err)
		}
		delete(object, "gbrUl")
	}

	if raw, found := object["maxDataBurstVol"]; found {
		err = json.Unmarshal(raw, &a.MaxDataBurstVol)
		if err != nil {
			return fmt.Errorf("error reading 'maxDataBurstVol': %w", err)
		}
		delete(object, "maxDataBurstVol")
	}

	if raw, found := object["maxPacketLossRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateDl': %w", err)
		}
		delete(object, "maxPacketLossRateDl")
	}

	if raw, found := object["maxPacketLossRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateUl': %w", err)
		}
		delete(object, "maxPacketLossRateUl")
	}

	if raw, found := object["maxbrDl"]; found {
		err = json.Unmarshal(raw, &a.MaxbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxbrDl': %w", err)
		}
		delete(object, "maxbrDl")
	}

	if raw, found := object["maxbrUl"]; found {
		err = json.Unmarshal(raw, &a.MaxbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxbrUl': %w", err)
		}
		delete(object, "maxbrUl")
	}

	if raw, found := object["packetDelayBudget"]; found {
		err = json.Unmarshal(raw, &a.PacketDelayBudget)
		if err != nil {
			return fmt.Errorf("error reading 'packetDelayBudget': %w", err)
		}
		delete(object, "packetDelayBudget")
	}

	if raw, found := object["packetErrorRate"]; found {
		err = json.Unmarshal(raw, &a.PacketErrorRate)
		if err != nil {
			return fmt.Errorf("error reading 'packetErrorRate': %w", err)
		}
		delete(object, "packetErrorRate")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if raw, found := object["qnc"]; found {
		err = json.Unmarshal(raw, &a.Qnc)
		if err != nil {
			return fmt.Errorf("error reading 'qnc': %w", err)
		}
		delete(object, "qnc")
	}

	if raw, found := object["qosId"]; found {
		err = json.Unmarshal(raw, &a.QosId)
		if err != nil {
			return fmt.Errorf("error reading 'qosId': %w", err)
		}
		delete(object, "qosId")
	}

	if raw, found := object["reflectiveQos"]; found {
		err = json.Unmarshal(raw, &a.ReflectiveQos)
		if err != nil {
			return fmt.Errorf("error reading 'reflectiveQos': %w", err)
		}
		delete(object, "reflectiveQos")
	}

	if raw, found := object["sharingKeyDl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyDl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyDl': %w", err)
		}
		delete(object, "sharingKeyDl")
	}

	if raw, found := object["sharingKeyUl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyUl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyUl': %w", err)
		}
		delete(object, "sharingKeyUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosData to handle AdditionalProperties
func (a QosData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5qi != nil {
		object["5qi"], err = json.Marshal(a.N5qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5qi': %w", err)
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arp': %w", err)
		}
	}

	object["averWindow"], err = json.Marshal(a.AverWindow)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'averWindow': %w", err)
	}

	if a.DefQosFlowIndication != nil {
		object["defQosFlowIndication"], err = json.Marshal(a.DefQosFlowIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defQosFlowIndication': %w", err)
		}
	}

	object["extMaxDataBurstVol"], err = json.Marshal(a.ExtMaxDataBurstVol)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'extMaxDataBurstVol': %w", err)
	}

	object["gbrDl"], err = json.Marshal(a.GbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gbrDl': %w", err)
	}

	object["gbrUl"], err = json.Marshal(a.GbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gbrUl': %w", err)
	}

	object["maxDataBurstVol"], err = json.Marshal(a.MaxDataBurstVol)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxDataBurstVol': %w", err)
	}

	object["maxPacketLossRateDl"], err = json.Marshal(a.MaxPacketLossRateDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateDl': %w", err)
	}

	object["maxPacketLossRateUl"], err = json.Marshal(a.MaxPacketLossRateUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateUl': %w", err)
	}

	object["maxbrDl"], err = json.Marshal(a.MaxbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxbrDl': %w", err)
	}

	object["maxbrUl"], err = json.Marshal(a.MaxbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxbrUl': %w", err)
	}

	if a.PacketDelayBudget != 0 {
		object["packetDelayBudget"], err = json.Marshal(a.PacketDelayBudget)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packetDelayBudget': %w", err)
		}
	}

	if len(a.PacketErrorRate) != 0 {
		object["packetErrorRate"], err = json.Marshal(a.PacketErrorRate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packetErrorRate': %w", err)
		}
	}

	object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
	}

	if a.Qnc != nil {
		object["qnc"], err = json.Marshal(a.Qnc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qnc': %w", err)
		}
	}

	object["qosId"], err = json.Marshal(a.QosId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosId': %w", err)
	}

	if a.ReflectiveQos != nil {
		object["reflectiveQos"], err = json.Marshal(a.ReflectiveQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reflectiveQos': %w", err)
		}
	}

	if a.SharingKeyDl != nil {
		object["sharingKeyDl"], err = json.Marshal(a.SharingKeyDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharingKeyDl': %w", err)
		}
	}

	if a.SharingKeyUl != nil {
		object["sharingKeyUl"], err = json.Marshal(a.SharingKeyUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharingKeyUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowAddModifyRequestItem. Returns the specified
// element and whether it was found
func (a QosFlowAddModifyRequestItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowAddModifyRequestItem
func (a *QosFlowAddModifyRequestItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowAddModifyRequestItem to handle AdditionalProperties
func (a *QosFlowAddModifyRequestItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["associatedAnType"]; found {
		err = json.Unmarshal(raw, &a.AssociatedAnType)
		if err != nil {
			return fmt.Errorf("error reading 'associatedAnType': %w", err)
		}
		delete(object, "associatedAnType")
	}

	if raw, found := object["ebi"]; found {
		err = json.Unmarshal(raw, &a.Ebi)
		if err != nil {
			return fmt.Errorf("error reading 'ebi': %w", err)
		}
		delete(object, "ebi")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["qosFlowDescription"]; found {
		err = json.Unmarshal(raw, &a.QosFlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowDescription': %w", err)
		}
		delete(object, "qosFlowDescription")
	}

	if raw, found := object["qosFlowProfile"]; found {
		err = json.Unmarshal(raw, &a.QosFlowProfile)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowProfile': %w", err)
		}
		delete(object, "qosFlowProfile")
	}

	if raw, found := object["qosRules"]; found {
		err = json.Unmarshal(raw, &a.QosRules)
		if err != nil {
			return fmt.Errorf("error reading 'qosRules': %w", err)
		}
		delete(object, "qosRules")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowAddModifyRequestItem to handle AdditionalProperties
func (a QosFlowAddModifyRequestItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AssociatedAnType != nil {
		object["associatedAnType"], err = json.Marshal(a.AssociatedAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'associatedAnType': %w", err)
		}
	}

	if a.Ebi != nil {
		object["ebi"], err = json.Marshal(a.Ebi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ebi': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	if a.QosFlowDescription != nil {
		object["qosFlowDescription"], err = json.Marshal(a.QosFlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowDescription': %w", err)
		}
	}

	if a.QosFlowProfile != nil {
		object["qosFlowProfile"], err = json.Marshal(a.QosFlowProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowProfile': %w", err)
		}
	}

	if a.QosRules != nil {
		object["qosRules"], err = json.Marshal(a.QosRules)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosRules': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowItem. Returns the specified
// element and whether it was found
func (a QosFlowItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowItem
func (a *QosFlowItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowItem to handle AdditionalProperties
func (a *QosFlowItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["currentQosProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.CurrentQosProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'currentQosProfileIndex': %w", err)
		}
		delete(object, "currentQosProfileIndex")
	}

	if raw, found := object["nullQoSProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.NullQoSProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'nullQoSProfileIndex': %w", err)
		}
		delete(object, "nullQoSProfileIndex")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowItem to handle AdditionalProperties
func (a QosFlowItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.CurrentQosProfileIndex != 0 {
		object["currentQosProfileIndex"], err = json.Marshal(a.CurrentQosProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentQosProfileIndex': %w", err)
		}
	}

	if a.NullQoSProfileIndex != nil {
		object["nullQoSProfileIndex"], err = json.Marshal(a.NullQoSProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nullQoSProfileIndex': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowNotifyItem. Returns the specified
// element and whether it was found
func (a QosFlowNotifyItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowNotifyItem
func (a *QosFlowNotifyItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowNotifyItem to handle AdditionalProperties
func (a *QosFlowNotifyItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["currentQosProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.CurrentQosProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'currentQosProfileIndex': %w", err)
		}
		delete(object, "currentQosProfileIndex")
	}

	if raw, found := object["notificationCause"]; found {
		err = json.Unmarshal(raw, &a.NotificationCause)
		if err != nil {
			return fmt.Errorf("error reading 'notificationCause': %w", err)
		}
		delete(object, "notificationCause")
	}

	if raw, found := object["nullQoSProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.NullQoSProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'nullQoSProfileIndex': %w", err)
		}
		delete(object, "nullQoSProfileIndex")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowNotifyItem to handle AdditionalProperties
func (a QosFlowNotifyItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CurrentQosProfileIndex != 0 {
		object["currentQosProfileIndex"], err = json.Marshal(a.CurrentQosProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentQosProfileIndex': %w", err)
		}
	}

	object["notificationCause"], err = json.Marshal(a.NotificationCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationCause': %w", err)
	}

	if a.NullQoSProfileIndex != nil {
		object["nullQoSProfileIndex"], err = json.Marshal(a.NullQoSProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nullQoSProfileIndex': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowProfile. Returns the specified
// element and whether it was found
func (a QosFlowProfile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowProfile
func (a *QosFlowProfile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowProfile to handle AdditionalProperties
func (a *QosFlowProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["additionalQosFlowInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalQosFlowInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalQosFlowInfo': %w", err)
		}
		delete(object, "additionalQosFlowInfo")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["dynamic5Qi"]; found {
		err = json.Unmarshal(raw, &a.Dynamic5Qi)
		if err != nil {
			return fmt.Errorf("error reading 'dynamic5Qi': %w", err)
		}
		delete(object, "dynamic5Qi")
	}

	if raw, found := object["gbrQosFlowInfo"]; found {
		err = json.Unmarshal(raw, &a.GbrQosFlowInfo)
		if err != nil {
			return fmt.Errorf("error reading 'gbrQosFlowInfo': %w", err)
		}
		delete(object, "gbrQosFlowInfo")
	}

	if raw, found := object["nonDynamic5Qi"]; found {
		err = json.Unmarshal(raw, &a.NonDynamic5Qi)
		if err != nil {
			return fmt.Errorf("error reading 'nonDynamic5Qi': %w", err)
		}
		delete(object, "nonDynamic5Qi")
	}

	if raw, found := object["qosMonitoringReq"]; found {
		err = json.Unmarshal(raw, &a.QosMonitoringReq)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonitoringReq': %w", err)
		}
		delete(object, "qosMonitoringReq")
	}

	if raw, found := object["qosRepPeriod"]; found {
		err = json.Unmarshal(raw, &a.QosRepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'qosRepPeriod': %w", err)
		}
		delete(object, "qosRepPeriod")
	}

	if raw, found := object["rqa"]; found {
		err = json.Unmarshal(raw, &a.Rqa)
		if err != nil {
			return fmt.Errorf("error reading 'rqa': %w", err)
		}
		delete(object, "rqa")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowProfile to handle AdditionalProperties
func (a QosFlowProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5qi"], err = json.Marshal(a.N5qi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5qi': %w", err)
	}

	if a.AdditionalQosFlowInfo != nil {
		object["additionalQosFlowInfo"], err = json.Marshal(a.AdditionalQosFlowInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalQosFlowInfo': %w", err)
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arp': %w", err)
		}
	}

	if a.Dynamic5Qi != nil {
		object["dynamic5Qi"], err = json.Marshal(a.Dynamic5Qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dynamic5Qi': %w", err)
		}
	}

	if a.GbrQosFlowInfo != nil {
		object["gbrQosFlowInfo"], err = json.Marshal(a.GbrQosFlowInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrQosFlowInfo': %w", err)
		}
	}

	if a.NonDynamic5Qi != nil {
		object["nonDynamic5Qi"], err = json.Marshal(a.NonDynamic5Qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nonDynamic5Qi': %w", err)
		}
	}

	if a.QosMonitoringReq != nil {
		object["qosMonitoringReq"], err = json.Marshal(a.QosMonitoringReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonitoringReq': %w", err)
		}
	}

	if a.QosRepPeriod != nil {
		object["qosRepPeriod"], err = json.Marshal(a.QosRepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosRepPeriod': %w", err)
		}
	}

	if a.Rqa != nil {
		object["rqa"], err = json.Marshal(a.Rqa)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rqa': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowReleaseRequestItem. Returns the specified
// element and whether it was found
func (a QosFlowReleaseRequestItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowReleaseRequestItem
func (a *QosFlowReleaseRequestItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowReleaseRequestItem to handle AdditionalProperties
func (a *QosFlowReleaseRequestItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["qosFlowDescription"]; found {
		err = json.Unmarshal(raw, &a.QosFlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowDescription': %w", err)
		}
		delete(object, "qosFlowDescription")
	}

	if raw, found := object["qosRules"]; found {
		err = json.Unmarshal(raw, &a.QosRules)
		if err != nil {
			return fmt.Errorf("error reading 'qosRules': %w", err)
		}
		delete(object, "qosRules")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowReleaseRequestItem to handle AdditionalProperties
func (a QosFlowReleaseRequestItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	if a.QosFlowDescription != nil {
		object["qosFlowDescription"], err = json.Marshal(a.QosFlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowDescription': %w", err)
		}
	}

	if a.QosRules != nil {
		object["qosRules"], err = json.Marshal(a.QosRules)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosRules': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowSetupItem. Returns the specified
// element and whether it was found
func (a QosFlowSetupItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowSetupItem
func (a *QosFlowSetupItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowSetupItem to handle AdditionalProperties
func (a *QosFlowSetupItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["associatedAnType"]; found {
		err = json.Unmarshal(raw, &a.AssociatedAnType)
		if err != nil {
			return fmt.Errorf("error reading 'associatedAnType': %w", err)
		}
		delete(object, "associatedAnType")
	}

	if raw, found := object["defaultQosRuleInd"]; found {
		err = json.Unmarshal(raw, &a.DefaultQosRuleInd)
		if err != nil {
			return fmt.Errorf("error reading 'defaultQosRuleInd': %w", err)
		}
		delete(object, "defaultQosRuleInd")
	}

	if raw, found := object["ebi"]; found {
		err = json.Unmarshal(raw, &a.Ebi)
		if err != nil {
			return fmt.Errorf("error reading 'ebi': %w", err)
		}
		delete(object, "ebi")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["qosFlowDescription"]; found {
		err = json.Unmarshal(raw, &a.QosFlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowDescription': %w", err)
		}
		delete(object, "qosFlowDescription")
	}

	if raw, found := object["qosFlowProfile"]; found {
		err = json.Unmarshal(raw, &a.QosFlowProfile)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowProfile': %w", err)
		}
		delete(object, "qosFlowProfile")
	}

	if raw, found := object["qosRules"]; found {
		err = json.Unmarshal(raw, &a.QosRules)
		if err != nil {
			return fmt.Errorf("error reading 'qosRules': %w", err)
		}
		delete(object, "qosRules")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowSetupItem to handle AdditionalProperties
func (a QosFlowSetupItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AssociatedAnType != nil {
		object["associatedAnType"], err = json.Marshal(a.AssociatedAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'associatedAnType': %w", err)
		}
	}

	if a.DefaultQosRuleInd != nil {
		object["defaultQosRuleInd"], err = json.Marshal(a.DefaultQosRuleInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultQosRuleInd': %w", err)
		}
	}

	if a.Ebi != nil {
		object["ebi"], err = json.Marshal(a.Ebi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ebi': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	if a.QosFlowDescription != nil {
		object["qosFlowDescription"], err = json.Marshal(a.QosFlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowDescription': %w", err)
		}
	}

	if a.QosFlowProfile != nil {
		object["qosFlowProfile"], err = json.Marshal(a.QosFlowProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowProfile': %w", err)
		}
	}

	object["qosRules"], err = json.Marshal(a.QosRules)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosRules': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowTunnel. Returns the specified
// element and whether it was found
func (a QosFlowTunnel) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowTunnel
func (a *QosFlowTunnel) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowTunnel to handle AdditionalProperties
func (a *QosFlowTunnel) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qfiList"]; found {
		err = json.Unmarshal(raw, &a.QfiList)
		if err != nil {
			return fmt.Errorf("error reading 'qfiList': %w", err)
		}
		delete(object, "qfiList")
	}

	if raw, found := object["tunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.TunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tunnelInfo': %w", err)
		}
		delete(object, "tunnelInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowTunnel to handle AdditionalProperties
func (a QosFlowTunnel) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["qfiList"], err = json.Marshal(a.QfiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfiList': %w", err)
	}

	object["tunnelInfo"], err = json.Marshal(a.TunnelInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tunnelInfo': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowUsageReport. Returns the specified
// element and whether it was found
func (a QosFlowUsageReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowUsageReport
func (a *QosFlowUsageReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowUsageReport to handle AdditionalProperties
func (a *QosFlowUsageReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlinkVolume"]; found {
		err = json.Unmarshal(raw, &a.DownlinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'downlinkVolume': %w", err)
		}
		delete(object, "downlinkVolume")
	}

	if raw, found := object["endTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.EndTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'endTimeStamp': %w", err)
		}
		delete(object, "endTimeStamp")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["startTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.StartTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'startTimeStamp': %w", err)
		}
		delete(object, "startTimeStamp")
	}

	if raw, found := object["uplinkVolume"]; found {
		err = json.Unmarshal(raw, &a.UplinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'uplinkVolume': %w", err)
		}
		delete(object, "uplinkVolume")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowUsageReport to handle AdditionalProperties
func (a QosFlowUsageReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlinkVolume"], err = json.Marshal(a.DownlinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlinkVolume': %w", err)
	}

	object["endTimeStamp"], err = json.Marshal(a.EndTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'endTimeStamp': %w", err)
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	object["startTimeStamp"], err = json.Marshal(a.StartTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'startTimeStamp': %w", err)
	}

	object["uplinkVolume"], err = json.Marshal(a.UplinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplinkVolume': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringData. Returns the specified
// element and whether it was found
func (a QosMonitoringData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringData
func (a *QosMonitoringData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringData to handle AdditionalProperties
func (a *QosMonitoringData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifyCorreId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorreId': %w", err)
		}
		delete(object, "notifyCorreId")
	}

	if raw, found := object["notifyUri"]; found {
		err = json.Unmarshal(raw, &a.NotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifyUri': %w", err)
		}
		delete(object, "notifyUri")
	}

	if raw, found := object["qmId"]; found {
		err = json.Unmarshal(raw, &a.QmId)
		if err != nil {
			return fmt.Errorf("error reading 'qmId': %w", err)
		}
		delete(object, "qmId")
	}

	if raw, found := object["repFreqs"]; found {
		err = json.Unmarshal(raw, &a.RepFreqs)
		if err != nil {
			return fmt.Errorf("error reading 'repFreqs': %w", err)
		}
		delete(object, "repFreqs")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["repThreshDl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshDl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshDl': %w", err)
		}
		delete(object, "repThreshDl")
	}

	if raw, found := object["repThreshRp"]; found {
		err = json.Unmarshal(raw, &a.RepThreshRp)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshRp': %w", err)
		}
		delete(object, "repThreshRp")
	}

	if raw, found := object["repThreshUl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshUl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshUl': %w", err)
		}
		delete(object, "repThreshUl")
	}

	if raw, found := object["reqQosMonParams"]; found {
		err = json.Unmarshal(raw, &a.ReqQosMonParams)
		if err != nil {
			return fmt.Errorf("error reading 'reqQosMonParams': %w", err)
		}
		delete(object, "reqQosMonParams")
	}

	if raw, found := object["waitTime"]; found {
		err = json.Unmarshal(raw, &a.WaitTime)
		if err != nil {
			return fmt.Errorf("error reading 'waitTime': %w", err)
		}
		delete(object, "waitTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringData to handle AdditionalProperties
func (a QosMonitoringData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NotifyCorreId != nil {
		object["notifyCorreId"], err = json.Marshal(a.NotifyCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorreId': %w", err)
		}
	}

	if a.NotifyUri != nil {
		object["notifyUri"], err = json.Marshal(a.NotifyUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyUri': %w", err)
		}
	}

	object["qmId"], err = json.Marshal(a.QmId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qmId': %w", err)
	}

	object["repFreqs"], err = json.Marshal(a.RepFreqs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'repFreqs': %w", err)
	}

	object["repPeriod"], err = json.Marshal(a.RepPeriod)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
	}

	object["repThreshDl"], err = json.Marshal(a.RepThreshDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'repThreshDl': %w", err)
	}

	object["repThreshRp"], err = json.Marshal(a.RepThreshRp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'repThreshRp': %w", err)
	}

	object["repThreshUl"], err = json.Marshal(a.RepThreshUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'repThreshUl': %w", err)
	}

	object["reqQosMonParams"], err = json.Marshal(a.ReqQosMonParams)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reqQosMonParams': %w", err)
	}

	object["waitTime"], err = json.Marshal(a.WaitTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'waitTime': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringInfo. Returns the specified
// element and whether it was found
func (a QosMonitoringInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringInfo
func (a *QosMonitoringInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringInfo to handle AdditionalProperties
func (a *QosMonitoringInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qosMonitoringInd"]; found {
		err = json.Unmarshal(raw, &a.QosMonitoringInd)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonitoringInd': %w", err)
		}
		delete(object, "qosMonitoringInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringInfo to handle AdditionalProperties
func (a QosMonitoringInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.QosMonitoringInd != nil {
		object["qosMonitoringInd"], err = json.Marshal(a.QosMonitoringInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonitoringInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringInformation. Returns the specified
// element and whether it was found
func (a QosMonitoringInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringInformation
func (a *QosMonitoringInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringInformation to handle AdditionalProperties
func (a *QosMonitoringInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["repThreshDl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshDl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshDl': %w", err)
		}
		delete(object, "repThreshDl")
	}

	if raw, found := object["repThreshRp"]; found {
		err = json.Unmarshal(raw, &a.RepThreshRp)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshRp': %w", err)
		}
		delete(object, "repThreshRp")
	}

	if raw, found := object["repThreshUl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshUl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshUl': %w", err)
		}
		delete(object, "repThreshUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringInformation to handle AdditionalProperties
func (a QosMonitoringInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RepThreshDl != nil {
		object["repThreshDl"], err = json.Marshal(a.RepThreshDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshDl': %w", err)
		}
	}

	if a.RepThreshRp != nil {
		object["repThreshRp"], err = json.Marshal(a.RepThreshRp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshRp': %w", err)
		}
	}

	if a.RepThreshUl != nil {
		object["repThreshUl"], err = json.Marshal(a.RepThreshUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringInformationRm. Returns the specified
// element and whether it was found
func (a QosMonitoringInformationRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringInformationRm
func (a *QosMonitoringInformationRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringInformationRm to handle AdditionalProperties
func (a *QosMonitoringInformationRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["repThreshDl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshDl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshDl': %w", err)
		}
		delete(object, "repThreshDl")
	}

	if raw, found := object["repThreshRp"]; found {
		err = json.Unmarshal(raw, &a.RepThreshRp)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshRp': %w", err)
		}
		delete(object, "repThreshRp")
	}

	if raw, found := object["repThreshUl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshUl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshUl': %w", err)
		}
		delete(object, "repThreshUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringInformationRm to handle AdditionalProperties
func (a QosMonitoringInformationRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RepThreshDl != nil {
		object["repThreshDl"], err = json.Marshal(a.RepThreshDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshDl': %w", err)
		}
	}

	if a.RepThreshRp != nil {
		object["repThreshRp"], err = json.Marshal(a.RepThreshRp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshRp': %w", err)
		}
	}

	if a.RepThreshUl != nil {
		object["repThreshUl"], err = json.Marshal(a.RepThreshUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RanNasRelCause. Returns the specified
// element and whether it was found
func (a RanNasRelCause) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RanNasRelCause
func (a *RanNasRelCause) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RanNasRelCause to handle AdditionalProperties
func (a *RanNasRelCause) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCause"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCause)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCause': %w", err)
		}
		delete(object, "5gMmCause")
	}

	if raw, found := object["5gSmCause"]; found {
		err = json.Unmarshal(raw, &a.N5gSmCause)
		if err != nil {
			return fmt.Errorf("error reading '5gSmCause': %w", err)
		}
		delete(object, "5gSmCause")
	}

	if raw, found := object["epsCause"]; found {
		err = json.Unmarshal(raw, &a.EpsCause)
		if err != nil {
			return fmt.Errorf("error reading 'epsCause': %w", err)
		}
		delete(object, "epsCause")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RanNasRelCause to handle AdditionalProperties
func (a RanNasRelCause) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCause != nil {
		object["5gMmCause"], err = json.Marshal(a.N5gMmCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCause': %w", err)
		}
	}

	if a.N5gSmCause != nil {
		object["5gSmCause"], err = json.Marshal(a.N5gSmCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gSmCause': %w", err)
		}
	}

	if a.EpsCause != nil {
		object["epsCause"], err = json.Marshal(a.EpsCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsCause': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReachabilityForSmsReport. Returns the specified
// element and whether it was found
func (a ReachabilityForSmsReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReachabilityForSmsReport
func (a *ReachabilityForSmsReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReachabilityForSmsReport to handle AdditionalProperties
func (a *ReachabilityForSmsReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxAvailabilityTime"]; found {
		err = json.Unmarshal(raw, &a.MaxAvailabilityTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxAvailabilityTime': %w", err)
		}
		delete(object, "maxAvailabilityTime")
	}

	if raw, found := object["smsfAccessType"]; found {
		err = json.Unmarshal(raw, &a.SmsfAccessType)
		if err != nil {
			return fmt.Errorf("error reading 'smsfAccessType': %w", err)
		}
		delete(object, "smsfAccessType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReachabilityForSmsReport to handle AdditionalProperties
func (a ReachabilityForSmsReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxAvailabilityTime != nil {
		object["maxAvailabilityTime"], err = json.Marshal(a.MaxAvailabilityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxAvailabilityTime': %w", err)
		}
	}

	object["smsfAccessType"], err = json.Marshal(a.SmsfAccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smsfAccessType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RedirectInformation. Returns the specified
// element and whether it was found
func (a RedirectInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RedirectInformation
func (a *RedirectInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RedirectInformation to handle AdditionalProperties
func (a *RedirectInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["redirectAddressType"]; found {
		err = json.Unmarshal(raw, &a.RedirectAddressType)
		if err != nil {
			return fmt.Errorf("error reading 'redirectAddressType': %w", err)
		}
		delete(object, "redirectAddressType")
	}

	if raw, found := object["redirectEnabled"]; found {
		err = json.Unmarshal(raw, &a.RedirectEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'redirectEnabled': %w", err)
		}
		delete(object, "redirectEnabled")
	}

	if raw, found := object["redirectServerAddress"]; found {
		err = json.Unmarshal(raw, &a.RedirectServerAddress)
		if err != nil {
			return fmt.Errorf("error reading 'redirectServerAddress': %w", err)
		}
		delete(object, "redirectServerAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RedirectInformation to handle AdditionalProperties
func (a RedirectInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RedirectAddressType != nil {
		object["redirectAddressType"], err = json.Marshal(a.RedirectAddressType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redirectAddressType': %w", err)
		}
	}

	if a.RedirectEnabled != nil {
		object["redirectEnabled"], err = json.Marshal(a.RedirectEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redirectEnabled': %w", err)
		}
	}

	if a.RedirectServerAddress != nil {
		object["redirectServerAddress"], err = json.Marshal(a.RedirectServerAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redirectServerAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RedirectResponse. Returns the specified
// element and whether it was found
func (a RedirectResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RedirectResponse
func (a *RedirectResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RedirectResponse to handle AdditionalProperties
func (a *RedirectResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["targetScp"]; found {
		err = json.Unmarshal(raw, &a.TargetScp)
		if err != nil {
			return fmt.Errorf("error reading 'targetScp': %w", err)
		}
		delete(object, "targetScp")
	}

	if raw, found := object["targetSepp"]; found {
		err = json.Unmarshal(raw, &a.TargetSepp)
		if err != nil {
			return fmt.Errorf("error reading 'targetSepp': %w", err)
		}
		delete(object, "targetSepp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RedirectResponse to handle AdditionalProperties
func (a RedirectResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.TargetScp != nil {
		object["targetScp"], err = json.Marshal(a.TargetScp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetScp': %w", err)
		}
	}

	if a.TargetSepp != nil {
		object["targetSepp"], err = json.Marshal(a.TargetSepp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetSepp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RedundantPduSessionInformation. Returns the specified
// element and whether it was found
func (a RedundantPduSessionInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RedundantPduSessionInformation
func (a *RedundantPduSessionInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RedundantPduSessionInformation to handle AdditionalProperties
func (a *RedundantPduSessionInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["rsn"]; found {
		err = json.Unmarshal(raw, &a.Rsn)
		if err != nil {
			return fmt.Errorf("error reading 'rsn': %w", err)
		}
		delete(object, "rsn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RedundantPduSessionInformation to handle AdditionalProperties
func (a RedundantPduSessionInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["rsn"], err = json.Marshal(a.Rsn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rsn': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RefToBinaryData. Returns the specified
// element and whether it was found
func (a RefToBinaryData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RefToBinaryData
func (a *RefToBinaryData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RefToBinaryData to handle AdditionalProperties
func (a *RefToBinaryData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contentId"]; found {
		err = json.Unmarshal(raw, &a.ContentId)
		if err != nil {
			return fmt.Errorf("error reading 'contentId': %w", err)
		}
		delete(object, "contentId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RefToBinaryData to handle AdditionalProperties
func (a RefToBinaryData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["contentId"], err = json.Marshal(a.ContentId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'contentId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RegistrationContextContainer. Returns the specified
// element and whether it was found
func (a RegistrationContextContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RegistrationContextContainer
func (a *RegistrationContextContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RegistrationContextContainer to handle AdditionalProperties
func (a *RegistrationContextContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNssai"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssai': %w", err)
		}
		delete(object, "allowedNssai")
	}

	if raw, found := object["anN2ApId"]; found {
		err = json.Unmarshal(raw, &a.AnN2ApId)
		if err != nil {
			return fmt.Errorf("error reading 'anN2ApId': %w", err)
		}
		delete(object, "anN2ApId")
	}

	if raw, found := object["anN2IPv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AnN2IPv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anN2IPv4Addr': %w", err)
		}
		delete(object, "anN2IPv4Addr")
	}

	if raw, found := object["anN2IPv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AnN2IPv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anN2IPv6Addr': %w", err)
		}
		delete(object, "anN2IPv6Addr")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["authenticatedInd"]; found {
		err = json.Unmarshal(raw, &a.AuthenticatedInd)
		if err != nil {
			return fmt.Errorf("error reading 'authenticatedInd': %w", err)
		}
		delete(object, "authenticatedInd")
	}

	if raw, found := object["ceModeBInd"]; found {
		err = json.Unmarshal(raw, &a.CeModeBInd)
		if err != nil {
			return fmt.Errorf("error reading 'ceModeBInd': %w", err)
		}
		delete(object, "ceModeBInd")
	}

	if raw, found := object["configuredNssai"]; found {
		err = json.Unmarshal(raw, &a.ConfiguredNssai)
		if err != nil {
			return fmt.Errorf("error reading 'configuredNssai': %w", err)
		}
		delete(object, "configuredNssai")
	}

	if raw, found := object["iabNodeInd"]; found {
		err = json.Unmarshal(raw, &a.IabNodeInd)
		if err != nil {
			return fmt.Errorf("error reading 'iabNodeInd': %w", err)
		}
		delete(object, "iabNodeInd")
	}

	if raw, found := object["initialAmfN2ApId"]; found {
		err = json.Unmarshal(raw, &a.InitialAmfN2ApId)
		if err != nil {
			return fmt.Errorf("error reading 'initialAmfN2ApId': %w", err)
		}
		delete(object, "initialAmfN2ApId")
	}

	if raw, found := object["initialAmfName"]; found {
		err = json.Unmarshal(raw, &a.InitialAmfName)
		if err != nil {
			return fmt.Errorf("error reading 'initialAmfName': %w", err)
		}
		delete(object, "initialAmfName")
	}

	if raw, found := object["localTimeZone"]; found {
		err = json.Unmarshal(raw, &a.LocalTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'localTimeZone': %w", err)
		}
		delete(object, "localTimeZone")
	}

	if raw, found := object["lteMInd"]; found {
		err = json.Unmarshal(raw, &a.LteMInd)
		if err != nil {
			return fmt.Errorf("error reading 'lteMInd': %w", err)
		}
		delete(object, "lteMInd")
	}

	if raw, found := object["npnAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.NpnAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'npnAccessInfo': %w", err)
		}
		delete(object, "npnAccessInfo")
	}

	if raw, found := object["ranNodeId"]; found {
		err = json.Unmarshal(raw, &a.RanNodeId)
		if err != nil {
			return fmt.Errorf("error reading 'ranNodeId': %w", err)
		}
		delete(object, "ranNodeId")
	}

	if raw, found := object["rejectedNssaiInPlmn"]; found {
		err = json.Unmarshal(raw, &a.RejectedNssaiInPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'rejectedNssaiInPlmn': %w", err)
		}
		delete(object, "rejectedNssaiInPlmn")
	}

	if raw, found := object["rejectedNssaiInTa"]; found {
		err = json.Unmarshal(raw, &a.RejectedNssaiInTa)
		if err != nil {
			return fmt.Errorf("error reading 'rejectedNssaiInTa': %w", err)
		}
		delete(object, "rejectedNssaiInTa")
	}

	if raw, found := object["rrcEstCause"]; found {
		err = json.Unmarshal(raw, &a.RrcEstCause)
		if err != nil {
			return fmt.Errorf("error reading 'rrcEstCause': %w", err)
		}
		delete(object, "rrcEstCause")
	}

	if raw, found := object["selectedPlmnId"]; found {
		err = json.Unmarshal(raw, &a.SelectedPlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedPlmnId': %w", err)
		}
		delete(object, "selectedPlmnId")
	}

	if raw, found := object["ueContext"]; found {
		err = json.Unmarshal(raw, &a.UeContext)
		if err != nil {
			return fmt.Errorf("error reading 'ueContext': %w", err)
		}
		delete(object, "ueContext")
	}

	if raw, found := object["ueContextRequest"]; found {
		err = json.Unmarshal(raw, &a.UeContextRequest)
		if err != nil {
			return fmt.Errorf("error reading 'ueContextRequest': %w", err)
		}
		delete(object, "ueContextRequest")
	}

	if raw, found := object["userLocation"]; found {
		err = json.Unmarshal(raw, &a.UserLocation)
		if err != nil {
			return fmt.Errorf("error reading 'userLocation': %w", err)
		}
		delete(object, "userLocation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RegistrationContextContainer to handle AdditionalProperties
func (a RegistrationContextContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedNssai != nil {
		object["allowedNssai"], err = json.Marshal(a.AllowedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssai': %w", err)
		}
	}

	object["anN2ApId"], err = json.Marshal(a.AnN2ApId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'anN2ApId': %w", err)
	}

	if len(a.AnN2IPv4Addr) != 0 {
		object["anN2IPv4Addr"], err = json.Marshal(a.AnN2IPv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anN2IPv4Addr': %w", err)
		}
	}

	if a.AnN2IPv6Addr != nil {
		object["anN2IPv6Addr"], err = json.Marshal(a.AnN2IPv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anN2IPv6Addr': %w", err)
		}
	}

	object["anType"], err = json.Marshal(a.AnType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'anType': %w", err)
	}

	if a.AuthenticatedInd != nil {
		object["authenticatedInd"], err = json.Marshal(a.AuthenticatedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authenticatedInd': %w", err)
		}
	}

	if a.CeModeBInd != nil {
		object["ceModeBInd"], err = json.Marshal(a.CeModeBInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ceModeBInd': %w", err)
		}
	}

	if len(a.ConfiguredNssai) != 0 {
		object["configuredNssai"], err = json.Marshal(a.ConfiguredNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'configuredNssai': %w", err)
		}
	}

	if a.IabNodeInd != nil {
		object["iabNodeInd"], err = json.Marshal(a.IabNodeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iabNodeInd': %w", err)
		}
	}

	if a.InitialAmfN2ApId != nil {
		object["initialAmfN2ApId"], err = json.Marshal(a.InitialAmfN2ApId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'initialAmfN2ApId': %w", err)
		}
	}

	object["initialAmfName"], err = json.Marshal(a.InitialAmfName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'initialAmfName': %w", err)
	}

	if a.LocalTimeZone != nil {
		object["localTimeZone"], err = json.Marshal(a.LocalTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'localTimeZone': %w", err)
		}
	}

	if a.LteMInd != nil {
		object["lteMInd"], err = json.Marshal(a.LteMInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lteMInd': %w", err)
		}
	}

	if a.NpnAccessInfo != nil {
		object["npnAccessInfo"], err = json.Marshal(a.NpnAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'npnAccessInfo': %w", err)
		}
	}

	object["ranNodeId"], err = json.Marshal(a.RanNodeId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ranNodeId': %w", err)
	}

	if len(a.RejectedNssaiInPlmn) != 0 {
		object["rejectedNssaiInPlmn"], err = json.Marshal(a.RejectedNssaiInPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rejectedNssaiInPlmn': %w", err)
		}
	}

	if len(a.RejectedNssaiInTa) != 0 {
		object["rejectedNssaiInTa"], err = json.Marshal(a.RejectedNssaiInTa)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rejectedNssaiInTa': %w", err)
		}
	}

	if len(a.RrcEstCause) != 0 {
		object["rrcEstCause"], err = json.Marshal(a.RrcEstCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rrcEstCause': %w", err)
		}
	}

	if a.SelectedPlmnId != nil {
		object["selectedPlmnId"], err = json.Marshal(a.SelectedPlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedPlmnId': %w", err)
		}
	}

	object["ueContext"], err = json.Marshal(a.UeContext)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueContext': %w", err)
	}

	if a.UeContextRequest != nil {
		object["ueContextRequest"], err = json.Marshal(a.UeContextRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueContextRequest': %w", err)
		}
	}

	object["userLocation"], err = json.Marshal(a.UserLocation)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'userLocation': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RegistrationDataSets. Returns the specified
// element and whether it was found
func (a RegistrationDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RegistrationDataSets
func (a *RegistrationDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RegistrationDataSets to handle AdditionalProperties
func (a *RegistrationDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amf3Gpp"]; found {
		err = json.Unmarshal(raw, &a.Amf3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amf3Gpp': %w", err)
		}
		delete(object, "amf3Gpp")
	}

	if raw, found := object["amfNon3Gpp"]; found {
		err = json.Unmarshal(raw, &a.AmfNon3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amfNon3Gpp': %w", err)
		}
		delete(object, "amfNon3Gpp")
	}

	if raw, found := object["smfRegistration"]; found {
		err = json.Unmarshal(raw, &a.SmfRegistration)
		if err != nil {
			return fmt.Errorf("error reading 'smfRegistration': %w", err)
		}
		delete(object, "smfRegistration")
	}

	if raw, found := object["smsf3Gpp"]; found {
		err = json.Unmarshal(raw, &a.Smsf3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'smsf3Gpp': %w", err)
		}
		delete(object, "smsf3Gpp")
	}

	if raw, found := object["smsfNon3Gpp"]; found {
		err = json.Unmarshal(raw, &a.SmsfNon3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'smsfNon3Gpp': %w", err)
		}
		delete(object, "smsfNon3Gpp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RegistrationDataSets to handle AdditionalProperties
func (a RegistrationDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Amf3Gpp != nil {
		object["amf3Gpp"], err = json.Marshal(a.Amf3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amf3Gpp': %w", err)
		}
	}

	if a.AmfNon3Gpp != nil {
		object["amfNon3Gpp"], err = json.Marshal(a.AmfNon3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNon3Gpp': %w", err)
		}
	}

	if a.SmfRegistration != nil {
		object["smfRegistration"], err = json.Marshal(a.SmfRegistration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfRegistration': %w", err)
		}
	}

	if a.Smsf3Gpp != nil {
		object["smsf3Gpp"], err = json.Marshal(a.Smsf3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsf3Gpp': %w", err)
		}
	}

	if a.SmsfNon3Gpp != nil {
		object["smsfNon3Gpp"], err = json.Marshal(a.SmsfNon3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfNon3Gpp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RegistrationLocationInfo. Returns the specified
// element and whether it was found
func (a RegistrationLocationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RegistrationLocationInfo
func (a *RegistrationLocationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RegistrationLocationInfo to handle AdditionalProperties
func (a *RegistrationLocationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTypeList"]; found {
		err = json.Unmarshal(raw, &a.AccessTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'accessTypeList': %w", err)
		}
		delete(object, "accessTypeList")
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["vgmlcAddress"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddress)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddress': %w", err)
		}
		delete(object, "vgmlcAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RegistrationLocationInfo to handle AdditionalProperties
func (a RegistrationLocationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessTypeList"], err = json.Marshal(a.AccessTypeList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessTypeList': %w", err)
	}

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.VgmlcAddress != nil {
		object["vgmlcAddress"], err = json.Marshal(a.VgmlcAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleaseData. Returns the specified
// element and whether it was found
func (a ReleaseData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleaseData
func (a *ReleaseData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleaseData to handle AdditionalProperties
func (a *ReleaseData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["secondaryRatUsageReport"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageReport)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageReport': %w", err)
		}
		delete(object, "secondaryRatUsageReport")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleaseData to handle AdditionalProperties
func (a ReleaseData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if len(a.SecondaryRatUsageReport) != 0 {
		object["secondaryRatUsageReport"], err = json.Marshal(a.SecondaryRatUsageReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageReport': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleasedData. Returns the specified
// element and whether it was found
func (a ReleasedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleasedData
func (a *ReleasedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleasedData to handle AdditionalProperties
func (a *ReleasedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleasedData to handle AdditionalProperties
func (a ReleasedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReportItem. Returns the specified
// element and whether it was found
func (a ReportItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReportItem
func (a *ReportItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReportItem to handle AdditionalProperties
func (a *ReportItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReportItem to handle AdditionalProperties
func (a ReportItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["path"], err = json.Marshal(a.Path)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'path': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReportingInformation. Returns the specified
// element and whether it was found
func (a ReportingInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReportingInformation
func (a *ReportingInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReportingInformation to handle AdditionalProperties
func (a *ReportingInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["grpRepTime"]; found {
		err = json.Unmarshal(raw, &a.GrpRepTime)
		if err != nil {
			return fmt.Errorf("error reading 'grpRepTime': %w", err)
		}
		delete(object, "grpRepTime")
	}

	if raw, found := object["immRep"]; found {
		err = json.Unmarshal(raw, &a.ImmRep)
		if err != nil {
			return fmt.Errorf("error reading 'immRep': %w", err)
		}
		delete(object, "immRep")
	}

	if raw, found := object["maxReportNbr"]; found {
		err = json.Unmarshal(raw, &a.MaxReportNbr)
		if err != nil {
			return fmt.Errorf("error reading 'maxReportNbr': %w", err)
		}
		delete(object, "maxReportNbr")
	}

	if raw, found := object["monDur"]; found {
		err = json.Unmarshal(raw, &a.MonDur)
		if err != nil {
			return fmt.Errorf("error reading 'monDur': %w", err)
		}
		delete(object, "monDur")
	}

	if raw, found := object["notifMethod"]; found {
		err = json.Unmarshal(raw, &a.NotifMethod)
		if err != nil {
			return fmt.Errorf("error reading 'notifMethod': %w", err)
		}
		delete(object, "notifMethod")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["sampRatio"]; found {
		err = json.Unmarshal(raw, &a.SampRatio)
		if err != nil {
			return fmt.Errorf("error reading 'sampRatio': %w", err)
		}
		delete(object, "sampRatio")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReportingInformation to handle AdditionalProperties
func (a ReportingInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.GrpRepTime != nil {
		object["grpRepTime"], err = json.Marshal(a.GrpRepTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'grpRepTime': %w", err)
		}
	}

	if a.ImmRep != nil {
		object["immRep"], err = json.Marshal(a.ImmRep)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immRep': %w", err)
		}
	}

	if a.MaxReportNbr != nil {
		object["maxReportNbr"], err = json.Marshal(a.MaxReportNbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxReportNbr': %w", err)
		}
	}

	if a.MonDur != nil {
		object["monDur"], err = json.Marshal(a.MonDur)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monDur': %w", err)
		}
	}

	if a.NotifMethod != nil {
		object["notifMethod"], err = json.Marshal(a.NotifMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifMethod': %w", err)
		}
	}

	if a.RepPeriod != nil {
		object["repPeriod"], err = json.Marshal(a.RepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
		}
	}

	if a.SampRatio != 0 {
		object["sampRatio"], err = json.Marshal(a.SampRatio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sampRatio': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReportingOptions. Returns the specified
// element and whether it was found
func (a ReportingOptions) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReportingOptions
func (a *ReportingOptions) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReportingOptions to handle AdditionalProperties
func (a *ReportingOptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["guardTime"]; found {
		err = json.Unmarshal(raw, &a.GuardTime)
		if err != nil {
			return fmt.Errorf("error reading 'guardTime': %w", err)
		}
		delete(object, "guardTime")
	}

	if raw, found := object["maxNumOfReports"]; found {
		err = json.Unmarshal(raw, &a.MaxNumOfReports)
		if err != nil {
			return fmt.Errorf("error reading 'maxNumOfReports': %w", err)
		}
		delete(object, "maxNumOfReports")
	}

	if raw, found := object["reportMode"]; found {
		err = json.Unmarshal(raw, &a.ReportMode)
		if err != nil {
			return fmt.Errorf("error reading 'reportMode': %w", err)
		}
		delete(object, "reportMode")
	}

	if raw, found := object["reportPeriod"]; found {
		err = json.Unmarshal(raw, &a.ReportPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'reportPeriod': %w", err)
		}
		delete(object, "reportPeriod")
	}

	if raw, found := object["samplingRatio"]; found {
		err = json.Unmarshal(raw, &a.SamplingRatio)
		if err != nil {
			return fmt.Errorf("error reading 'samplingRatio': %w", err)
		}
		delete(object, "samplingRatio")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReportingOptions to handle AdditionalProperties
func (a ReportingOptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if a.GuardTime != nil {
		object["guardTime"], err = json.Marshal(a.GuardTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guardTime': %w", err)
		}
	}

	if a.MaxNumOfReports != nil {
		object["maxNumOfReports"], err = json.Marshal(a.MaxNumOfReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxNumOfReports': %w", err)
		}
	}

	if a.ReportMode != nil {
		object["reportMode"], err = json.Marshal(a.ReportMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportMode': %w", err)
		}
	}

	if a.ReportPeriod != nil {
		object["reportPeriod"], err = json.Marshal(a.ReportPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reportPeriod': %w", err)
		}
	}

	if a.SamplingRatio != 0 {
		object["samplingRatio"], err = json.Marshal(a.SamplingRatio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'samplingRatio': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestLocInfo. Returns the specified
// element and whether it was found
func (a RequestLocInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestLocInfo
func (a *RequestLocInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestLocInfo to handle AdditionalProperties
func (a *RequestLocInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["req5gsLoc"]; found {
		err = json.Unmarshal(raw, &a.Req5gsLoc)
		if err != nil {
			return fmt.Errorf("error reading 'req5gsLoc': %w", err)
		}
		delete(object, "req5gsLoc")
	}

	if raw, found := object["reqCurrentLoc"]; found {
		err = json.Unmarshal(raw, &a.ReqCurrentLoc)
		if err != nil {
			return fmt.Errorf("error reading 'reqCurrentLoc': %w", err)
		}
		delete(object, "reqCurrentLoc")
	}

	if raw, found := object["reqRatType"]; found {
		err = json.Unmarshal(raw, &a.ReqRatType)
		if err != nil {
			return fmt.Errorf("error reading 'reqRatType': %w", err)
		}
		delete(object, "reqRatType")
	}

	if raw, found := object["reqTimeZone"]; found {
		err = json.Unmarshal(raw, &a.ReqTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'reqTimeZone': %w", err)
		}
		delete(object, "reqTimeZone")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestLocInfo to handle AdditionalProperties
func (a RequestLocInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Req5gsLoc != nil {
		object["req5gsLoc"], err = json.Marshal(a.Req5gsLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'req5gsLoc': %w", err)
		}
	}

	if a.ReqCurrentLoc != nil {
		object["reqCurrentLoc"], err = json.Marshal(a.ReqCurrentLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqCurrentLoc': %w", err)
		}
	}

	if a.ReqRatType != nil {
		object["reqRatType"], err = json.Marshal(a.ReqRatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqRatType': %w", err)
		}
	}

	if a.ReqTimeZone != nil {
		object["reqTimeZone"], err = json.Marshal(a.ReqTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqTimeZone': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestPosInfo. Returns the specified
// element and whether it was found
func (a RequestPosInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestPosInfo
func (a *RequestPosInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestPosInfo to handle AdditionalProperties
func (a *RequestPosInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalLcsSuppGADShapes"]; found {
		err = json.Unmarshal(raw, &a.AdditionalLcsSuppGADShapes)
		if err != nil {
			return fmt.Errorf("error reading 'additionalLcsSuppGADShapes': %w", err)
		}
		delete(object, "additionalLcsSuppGADShapes")
	}

	if raw, found := object["afID"]; found {
		err = json.Unmarshal(raw, &a.AfID)
		if err != nil {
			return fmt.Errorf("error reading 'afID': %w", err)
		}
		delete(object, "afID")
	}

	if raw, found := object["areaEventInfo"]; found {
		err = json.Unmarshal(raw, &a.AreaEventInfo)
		if err != nil {
			return fmt.Errorf("error reading 'areaEventInfo': %w", err)
		}
		delete(object, "areaEventInfo")
	}

	if raw, found := object["codeWord"]; found {
		err = json.Unmarshal(raw, &a.CodeWord)
		if err != nil {
			return fmt.Errorf("error reading 'codeWord': %w", err)
		}
		delete(object, "codeWord")
	}

	if raw, found := object["externalClientIdentification"]; found {
		err = json.Unmarshal(raw, &a.ExternalClientIdentification)
		if err != nil {
			return fmt.Errorf("error reading 'externalClientIdentification': %w", err)
		}
		delete(object, "externalClientIdentification")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hgmlcCallBackURI"]; found {
		err = json.Unmarshal(raw, &a.HgmlcCallBackURI)
		if err != nil {
			return fmt.Errorf("error reading 'hgmlcCallBackURI': %w", err)
		}
		delete(object, "hgmlcCallBackURI")
	}

	if raw, found := object["lcsClientType"]; found {
		err = json.Unmarshal(raw, &a.LcsClientType)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientType': %w", err)
		}
		delete(object, "lcsClientType")
	}

	if raw, found := object["lcsLocation"]; found {
		err = json.Unmarshal(raw, &a.LcsLocation)
		if err != nil {
			return fmt.Errorf("error reading 'lcsLocation': %w", err)
		}
		delete(object, "lcsLocation")
	}

	if raw, found := object["lcsQoS"]; found {
		err = json.Unmarshal(raw, &a.LcsQoS)
		if err != nil {
			return fmt.Errorf("error reading 'lcsQoS': %w", err)
		}
		delete(object, "lcsQoS")
	}

	if raw, found := object["lcsServiceType"]; found {
		err = json.Unmarshal(raw, &a.LcsServiceType)
		if err != nil {
			return fmt.Errorf("error reading 'lcsServiceType': %w", err)
		}
		delete(object, "lcsServiceType")
	}

	if raw, found := object["lcsSupportedGADShapes"]; found {
		err = json.Unmarshal(raw, &a.LcsSupportedGADShapes)
		if err != nil {
			return fmt.Errorf("error reading 'lcsSupportedGADShapes': %w", err)
		}
		delete(object, "lcsSupportedGADShapes")
	}

	if raw, found := object["ldrReference"]; found {
		err = json.Unmarshal(raw, &a.LdrReference)
		if err != nil {
			return fmt.Errorf("error reading 'ldrReference': %w", err)
		}
		delete(object, "ldrReference")
	}

	if raw, found := object["ldrType"]; found {
		err = json.Unmarshal(raw, &a.LdrType)
		if err != nil {
			return fmt.Errorf("error reading 'ldrType': %w", err)
		}
		delete(object, "ldrType")
	}

	if raw, found := object["locationNotificationUri"]; found {
		err = json.Unmarshal(raw, &a.LocationNotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'locationNotificationUri': %w", err)
		}
		delete(object, "locationNotificationUri")
	}

	if raw, found := object["motionEventInfo"]; found {
		err = json.Unmarshal(raw, &a.MotionEventInfo)
		if err != nil {
			return fmt.Errorf("error reading 'motionEventInfo': %w", err)
		}
		delete(object, "motionEventInfo")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["periodicEventInfo"]; found {
		err = json.Unmarshal(raw, &a.PeriodicEventInfo)
		if err != nil {
			return fmt.Errorf("error reading 'periodicEventInfo': %w", err)
		}
		delete(object, "periodicEventInfo")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["uePrivacyRequirements"]; found {
		err = json.Unmarshal(raw, &a.UePrivacyRequirements)
		if err != nil {
			return fmt.Errorf("error reading 'uePrivacyRequirements': %w", err)
		}
		delete(object, "uePrivacyRequirements")
	}

	if raw, found := object["velocityRequested"]; found {
		err = json.Unmarshal(raw, &a.VelocityRequested)
		if err != nil {
			return fmt.Errorf("error reading 'velocityRequested': %w", err)
		}
		delete(object, "velocityRequested")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestPosInfo to handle AdditionalProperties
func (a RequestPosInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AdditionalLcsSuppGADShapes) != 0 {
		object["additionalLcsSuppGADShapes"], err = json.Marshal(a.AdditionalLcsSuppGADShapes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalLcsSuppGADShapes': %w", err)
		}
	}

	if a.AfID != nil {
		object["afID"], err = json.Marshal(a.AfID)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afID': %w", err)
		}
	}

	if a.AreaEventInfo != nil {
		object["areaEventInfo"], err = json.Marshal(a.AreaEventInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaEventInfo': %w", err)
		}
	}

	if a.CodeWord != nil {
		object["codeWord"], err = json.Marshal(a.CodeWord)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWord': %w", err)
		}
	}

	if a.ExternalClientIdentification != nil {
		object["externalClientIdentification"], err = json.Marshal(a.ExternalClientIdentification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalClientIdentification': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HgmlcCallBackURI != nil {
		object["hgmlcCallBackURI"], err = json.Marshal(a.HgmlcCallBackURI)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hgmlcCallBackURI': %w", err)
		}
	}

	object["lcsClientType"], err = json.Marshal(a.LcsClientType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsClientType': %w", err)
	}

	object["lcsLocation"], err = json.Marshal(a.LcsLocation)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsLocation': %w", err)
	}

	if a.LcsQoS != nil {
		object["lcsQoS"], err = json.Marshal(a.LcsQoS)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsQoS': %w", err)
		}
	}

	if a.LcsServiceType != nil {
		object["lcsServiceType"], err = json.Marshal(a.LcsServiceType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsServiceType': %w", err)
		}
	}

	if a.LcsSupportedGADShapes != nil {
		object["lcsSupportedGADShapes"], err = json.Marshal(a.LcsSupportedGADShapes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsSupportedGADShapes': %w", err)
		}
	}

	if a.LdrReference != nil {
		object["ldrReference"], err = json.Marshal(a.LdrReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ldrReference': %w", err)
		}
	}

	if a.LdrType != nil {
		object["ldrType"], err = json.Marshal(a.LdrType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ldrType': %w", err)
		}
	}

	if a.LocationNotificationUri != nil {
		object["locationNotificationUri"], err = json.Marshal(a.LocationNotificationUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationNotificationUri': %w", err)
		}
	}

	if a.MotionEventInfo != nil {
		object["motionEventInfo"], err = json.Marshal(a.MotionEventInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'motionEventInfo': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PeriodicEventInfo != nil {
		object["periodicEventInfo"], err = json.Marshal(a.PeriodicEventInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicEventInfo': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UePrivacyRequirements != nil {
		object["uePrivacyRequirements"], err = json.Marshal(a.UePrivacyRequirements)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePrivacyRequirements': %w", err)
		}
	}

	if a.VelocityRequested != nil {
		object["velocityRequested"], err = json.Marshal(a.VelocityRequested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'velocityRequested': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestedQos. Returns the specified
// element and whether it was found
func (a RequestedQos) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestedQos
func (a *RequestedQos) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestedQos to handle AdditionalProperties
func (a *RequestedQos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["gbrDl"]; found {
		err = json.Unmarshal(raw, &a.GbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrDl': %w", err)
		}
		delete(object, "gbrDl")
	}

	if raw, found := object["gbrUl"]; found {
		err = json.Unmarshal(raw, &a.GbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrUl': %w", err)
		}
		delete(object, "gbrUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestedQos to handle AdditionalProperties
func (a RequestedQos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5qi"], err = json.Marshal(a.N5qi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5qi': %w", err)
	}

	if len(a.GbrDl) != 0 {
		object["gbrDl"], err = json.Marshal(a.GbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrDl': %w", err)
		}
	}

	if len(a.GbrUl) != 0 {
		object["gbrUl"], err = json.Marshal(a.GbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestedRuleData. Returns the specified
// element and whether it was found
func (a RequestedRuleData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestedRuleData
func (a *RequestedRuleData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestedRuleData to handle AdditionalProperties
func (a *RequestedRuleData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["refPccRuleIds"]; found {
		err = json.Unmarshal(raw, &a.RefPccRuleIds)
		if err != nil {
			return fmt.Errorf("error reading 'refPccRuleIds': %w", err)
		}
		delete(object, "refPccRuleIds")
	}

	if raw, found := object["reqData"]; found {
		err = json.Unmarshal(raw, &a.ReqData)
		if err != nil {
			return fmt.Errorf("error reading 'reqData': %w", err)
		}
		delete(object, "reqData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestedRuleData to handle AdditionalProperties
func (a RequestedRuleData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["refPccRuleIds"], err = json.Marshal(a.RefPccRuleIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refPccRuleIds': %w", err)
	}

	object["reqData"], err = json.Marshal(a.ReqData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reqData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestedUsageData. Returns the specified
// element and whether it was found
func (a RequestedUsageData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestedUsageData
func (a *RequestedUsageData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestedUsageData to handle AdditionalProperties
func (a *RequestedUsageData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allUmIds"]; found {
		err = json.Unmarshal(raw, &a.AllUmIds)
		if err != nil {
			return fmt.Errorf("error reading 'allUmIds': %w", err)
		}
		delete(object, "allUmIds")
	}

	if raw, found := object["refUmIds"]; found {
		err = json.Unmarshal(raw, &a.RefUmIds)
		if err != nil {
			return fmt.Errorf("error reading 'refUmIds': %w", err)
		}
		delete(object, "refUmIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestedUsageData to handle AdditionalProperties
func (a RequestedUsageData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllUmIds != nil {
		object["allUmIds"], err = json.Marshal(a.AllUmIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allUmIds': %w", err)
		}
	}

	if len(a.RefUmIds) != 0 {
		object["refUmIds"], err = json.Marshal(a.RefUmIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refUmIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourceItem. Returns the specified
// element and whether it was found
func (a ResourceItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourceItem
func (a *ResourceItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourceItem to handle AdditionalProperties
func (a *ResourceItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["items"]; found {
		err = json.Unmarshal(raw, &a.Items)
		if err != nil {
			return fmt.Errorf("error reading 'items': %w", err)
		}
		delete(object, "items")
	}

	if raw, found := object["monResourceUri"]; found {
		err = json.Unmarshal(raw, &a.MonResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'monResourceUri': %w", err)
		}
		delete(object, "monResourceUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourceItem to handle AdditionalProperties
func (a ResourceItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["items"], err = json.Marshal(a.Items)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'items': %w", err)
	}

	object["monResourceUri"], err = json.Marshal(a.MonResourceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monResourceUri': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourcesAllocationInfo. Returns the specified
// element and whether it was found
func (a ResourcesAllocationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourcesAllocationInfo
func (a *ResourcesAllocationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourcesAllocationInfo to handle AdditionalProperties
func (a *ResourcesAllocationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altSerReq"]; found {
		err = json.Unmarshal(raw, &a.AltSerReq)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReq': %w", err)
		}
		delete(object, "altSerReq")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if raw, found := object["mcResourcStatus"]; found {
		err = json.Unmarshal(raw, &a.McResourcStatus)
		if err != nil {
			return fmt.Errorf("error reading 'mcResourcStatus': %w", err)
		}
		delete(object, "mcResourcStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourcesAllocationInfo to handle AdditionalProperties
func (a ResourcesAllocationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltSerReq != nil {
		object["altSerReq"], err = json.Marshal(a.AltSerReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altSerReq': %w", err)
		}
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	if a.McResourcStatus != nil {
		object["mcResourcStatus"], err = json.Marshal(a.McResourcStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcResourcStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RestrictedSnssai. Returns the specified
// element and whether it was found
func (a RestrictedSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RestrictedSnssai
func (a *RestrictedSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RestrictedSnssai to handle AdditionalProperties
func (a *RestrictedSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["homePlmnId"]; found {
		err = json.Unmarshal(raw, &a.HomePlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'homePlmnId': %w", err)
		}
		delete(object, "homePlmnId")
	}

	if raw, found := object["homePlmnIdList"]; found {
		err = json.Unmarshal(raw, &a.HomePlmnIdList)
		if err != nil {
			return fmt.Errorf("error reading 'homePlmnIdList': %w", err)
		}
		delete(object, "homePlmnIdList")
	}

	if raw, found := object["roamingRestriction"]; found {
		err = json.Unmarshal(raw, &a.RoamingRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'roamingRestriction': %w", err)
		}
		delete(object, "roamingRestriction")
	}

	if raw, found := object["sNssaiList"]; found {
		err = json.Unmarshal(raw, &a.SNssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'sNssaiList': %w", err)
		}
		delete(object, "sNssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RestrictedSnssai to handle AdditionalProperties
func (a RestrictedSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["homePlmnId"], err = json.Marshal(a.HomePlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'homePlmnId': %w", err)
	}

	if len(a.HomePlmnIdList) != 0 {
		object["homePlmnIdList"], err = json.Marshal(a.HomePlmnIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'homePlmnIdList': %w", err)
		}
	}

	if a.RoamingRestriction != nil {
		object["roamingRestriction"], err = json.Marshal(a.RoamingRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingRestriction': %w", err)
		}
	}

	object["sNssaiList"], err = json.Marshal(a.SNssaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssaiList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResynchronizationInfo. Returns the specified
// element and whether it was found
func (a ResynchronizationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResynchronizationInfo
func (a *ResynchronizationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResynchronizationInfo to handle AdditionalProperties
func (a *ResynchronizationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["auts"]; found {
		err = json.Unmarshal(raw, &a.Auts)
		if err != nil {
			return fmt.Errorf("error reading 'auts': %w", err)
		}
		delete(object, "auts")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResynchronizationInfo to handle AdditionalProperties
func (a ResynchronizationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["auts"], err = json.Marshal(a.Auts)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'auts': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RetrieveData. Returns the specified
// element and whether it was found
func (a RetrieveData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RetrieveData
func (a *RetrieveData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RetrieveData to handle AdditionalProperties
func (a *RetrieveData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smallDataRateStatusReq"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatusReq)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatusReq': %w", err)
		}
		delete(object, "smallDataRateStatusReq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RetrieveData to handle AdditionalProperties
func (a RetrieveData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmallDataRateStatusReq != nil {
		object["smallDataRateStatusReq"], err = json.Marshal(a.SmallDataRateStatusReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatusReq': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RetrievedData. Returns the specified
// element and whether it was found
func (a RetrievedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RetrievedData
func (a *RetrievedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RetrievedData to handle AdditionalProperties
func (a *RetrievedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RetrievedData to handle AdditionalProperties
func (a RetrievedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RgAuthCtx. Returns the specified
// element and whether it was found
func (a RgAuthCtx) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RgAuthCtx
func (a *RgAuthCtx) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RgAuthCtx to handle AdditionalProperties
func (a *RgAuthCtx) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authInd"]; found {
		err = json.Unmarshal(raw, &a.AuthInd)
		if err != nil {
			return fmt.Errorf("error reading 'authInd': %w", err)
		}
		delete(object, "authInd")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RgAuthCtx to handle AdditionalProperties
func (a RgAuthCtx) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authInd"], err = json.Marshal(a.AuthInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authInd': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RgAuthenticationInfo. Returns the specified
// element and whether it was found
func (a RgAuthenticationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RgAuthenticationInfo
func (a *RgAuthenticationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RgAuthenticationInfo to handle AdditionalProperties
func (a *RgAuthenticationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authenticatedInd"]; found {
		err = json.Unmarshal(raw, &a.AuthenticatedInd)
		if err != nil {
			return fmt.Errorf("error reading 'authenticatedInd': %w", err)
		}
		delete(object, "authenticatedInd")
	}

	if raw, found := object["suci"]; found {
		err = json.Unmarshal(raw, &a.Suci)
		if err != nil {
			return fmt.Errorf("error reading 'suci': %w", err)
		}
		delete(object, "suci")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RgAuthenticationInfo to handle AdditionalProperties
func (a RgAuthenticationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authenticatedInd"], err = json.Marshal(a.AuthenticatedInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authenticatedInd': %w", err)
	}

	object["suci"], err = json.Marshal(a.Suci)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suci': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RmInfo. Returns the specified
// element and whether it was found
func (a RmInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RmInfo
func (a *RmInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RmInfo to handle AdditionalProperties
func (a *RmInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["rmState"]; found {
		err = json.Unmarshal(raw, &a.RmState)
		if err != nil {
			return fmt.Errorf("error reading 'rmState': %w", err)
		}
		delete(object, "rmState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RmInfo to handle AdditionalProperties
func (a RmInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	object["rmState"], err = json.Marshal(a.RmState)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rmState': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RoamingStatusReport. Returns the specified
// element and whether it was found
func (a RoamingStatusReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RoamingStatusReport
func (a *RoamingStatusReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RoamingStatusReport to handle AdditionalProperties
func (a *RoamingStatusReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["newServingPlmn"]; found {
		err = json.Unmarshal(raw, &a.NewServingPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'newServingPlmn': %w", err)
		}
		delete(object, "newServingPlmn")
	}

	if raw, found := object["roaming"]; found {
		err = json.Unmarshal(raw, &a.Roaming)
		if err != nil {
			return fmt.Errorf("error reading 'roaming': %w", err)
		}
		delete(object, "roaming")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RoamingStatusReport to handle AdditionalProperties
func (a RoamingStatusReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["newServingPlmn"], err = json.Marshal(a.NewServingPlmn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'newServingPlmn': %w", err)
	}

	object["roaming"], err = json.Marshal(a.Roaming)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'roaming': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RouteInformation. Returns the specified
// element and whether it was found
func (a RouteInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RouteInformation
func (a *RouteInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RouteInformation to handle AdditionalProperties
func (a *RouteInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["portNumber"]; found {
		err = json.Unmarshal(raw, &a.PortNumber)
		if err != nil {
			return fmt.Errorf("error reading 'portNumber': %w", err)
		}
		delete(object, "portNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RouteInformation to handle AdditionalProperties
func (a RouteInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	object["portNumber"], err = json.Marshal(a.PortNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'portNumber': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RouteToLocation. Returns the specified
// element and whether it was found
func (a RouteToLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RouteToLocation
func (a *RouteToLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RouteToLocation to handle AdditionalProperties
func (a *RouteToLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnai"]; found {
		err = json.Unmarshal(raw, &a.Dnai)
		if err != nil {
			return fmt.Errorf("error reading 'dnai': %w", err)
		}
		delete(object, "dnai")
	}

	if raw, found := object["routeInfo"]; found {
		err = json.Unmarshal(raw, &a.RouteInfo)
		if err != nil {
			return fmt.Errorf("error reading 'routeInfo': %w", err)
		}
		delete(object, "routeInfo")
	}

	if raw, found := object["routeProfId"]; found {
		err = json.Unmarshal(raw, &a.RouteProfId)
		if err != nil {
			return fmt.Errorf("error reading 'routeProfId': %w", err)
		}
		delete(object, "routeProfId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RouteToLocation to handle AdditionalProperties
func (a RouteToLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnai"], err = json.Marshal(a.Dnai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnai': %w", err)
	}

	object["routeInfo"], err = json.Marshal(a.RouteInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'routeInfo': %w", err)
	}

	object["routeProfId"], err = json.Marshal(a.RouteProfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'routeProfId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RoutingAreaId. Returns the specified
// element and whether it was found
func (a RoutingAreaId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RoutingAreaId
func (a *RoutingAreaId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RoutingAreaId to handle AdditionalProperties
func (a *RoutingAreaId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["rac"]; found {
		err = json.Unmarshal(raw, &a.Rac)
		if err != nil {
			return fmt.Errorf("error reading 'rac': %w", err)
		}
		delete(object, "rac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RoutingAreaId to handle AdditionalProperties
func (a RoutingAreaId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["rac"], err = json.Marshal(a.Rac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rac': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RuleReport. Returns the specified
// element and whether it was found
func (a RuleReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RuleReport
func (a *RuleReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RuleReport to handle AdditionalProperties
func (a *RuleReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contVers"]; found {
		err = json.Unmarshal(raw, &a.ContVers)
		if err != nil {
			return fmt.Errorf("error reading 'contVers': %w", err)
		}
		delete(object, "contVers")
	}

	if raw, found := object["failureCode"]; found {
		err = json.Unmarshal(raw, &a.FailureCode)
		if err != nil {
			return fmt.Errorf("error reading 'failureCode': %w", err)
		}
		delete(object, "failureCode")
	}

	if raw, found := object["finUnitAct"]; found {
		err = json.Unmarshal(raw, &a.FinUnitAct)
		if err != nil {
			return fmt.Errorf("error reading 'finUnitAct': %w", err)
		}
		delete(object, "finUnitAct")
	}

	if raw, found := object["pccRuleIds"]; found {
		err = json.Unmarshal(raw, &a.PccRuleIds)
		if err != nil {
			return fmt.Errorf("error reading 'pccRuleIds': %w", err)
		}
		delete(object, "pccRuleIds")
	}

	if raw, found := object["ranNasRelCauses"]; found {
		err = json.Unmarshal(raw, &a.RanNasRelCauses)
		if err != nil {
			return fmt.Errorf("error reading 'ranNasRelCauses': %w", err)
		}
		delete(object, "ranNasRelCauses")
	}

	if raw, found := object["ruleStatus"]; found {
		err = json.Unmarshal(raw, &a.RuleStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ruleStatus': %w", err)
		}
		delete(object, "ruleStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RuleReport to handle AdditionalProperties
func (a RuleReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ContVers) != 0 {
		object["contVers"], err = json.Marshal(a.ContVers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVers': %w", err)
		}
	}

	if a.FailureCode != nil {
		object["failureCode"], err = json.Marshal(a.FailureCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failureCode': %w", err)
		}
	}

	if a.FinUnitAct != nil {
		object["finUnitAct"], err = json.Marshal(a.FinUnitAct)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'finUnitAct': %w", err)
		}
	}

	object["pccRuleIds"], err = json.Marshal(a.PccRuleIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pccRuleIds': %w", err)
	}

	if len(a.RanNasRelCauses) != 0 {
		object["ranNasRelCauses"], err = json.Marshal(a.RanNasRelCauses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranNasRelCauses': %w", err)
		}
	}

	object["ruleStatus"], err = json.Marshal(a.RuleStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ruleStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SMPolicyQosMonitoringReport. Returns the specified
// element and whether it was found
func (a SMPolicyQosMonitoringReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SMPolicyQosMonitoringReport
func (a *SMPolicyQosMonitoringReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SMPolicyQosMonitoringReport to handle AdditionalProperties
func (a *SMPolicyQosMonitoringReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dlDelays"]; found {
		err = json.Unmarshal(raw, &a.DlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'dlDelays': %w", err)
		}
		delete(object, "dlDelays")
	}

	if raw, found := object["refPccRuleIds"]; found {
		err = json.Unmarshal(raw, &a.RefPccRuleIds)
		if err != nil {
			return fmt.Errorf("error reading 'refPccRuleIds': %w", err)
		}
		delete(object, "refPccRuleIds")
	}

	if raw, found := object["rtDelays"]; found {
		err = json.Unmarshal(raw, &a.RtDelays)
		if err != nil {
			return fmt.Errorf("error reading 'rtDelays': %w", err)
		}
		delete(object, "rtDelays")
	}

	if raw, found := object["ulDelays"]; found {
		err = json.Unmarshal(raw, &a.UlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'ulDelays': %w", err)
		}
		delete(object, "ulDelays")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SMPolicyQosMonitoringReport to handle AdditionalProperties
func (a SMPolicyQosMonitoringReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DlDelays) != 0 {
		object["dlDelays"], err = json.Marshal(a.DlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDelays': %w", err)
		}
	}

	object["refPccRuleIds"], err = json.Marshal(a.RefPccRuleIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refPccRuleIds': %w", err)
	}

	if len(a.RtDelays) != 0 {
		object["rtDelays"], err = json.Marshal(a.RtDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rtDelays': %w", err)
		}
	}

	if len(a.UlDelays) != 0 {
		object["ulDelays"], err = json.Marshal(a.UlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulDelays': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SMPolicyQosNotificationControlInfo. Returns the specified
// element and whether it was found
func (a SMPolicyQosNotificationControlInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SMPolicyQosNotificationControlInfo
func (a *SMPolicyQosNotificationControlInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SMPolicyQosNotificationControlInfo to handle AdditionalProperties
func (a *SMPolicyQosNotificationControlInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altQosParamId"]; found {
		err = json.Unmarshal(raw, &a.AltQosParamId)
		if err != nil {
			return fmt.Errorf("error reading 'altQosParamId': %w", err)
		}
		delete(object, "altQosParamId")
	}

	if raw, found := object["contVer"]; found {
		err = json.Unmarshal(raw, &a.ContVer)
		if err != nil {
			return fmt.Errorf("error reading 'contVer': %w", err)
		}
		delete(object, "contVer")
	}

	if raw, found := object["notifType"]; found {
		err = json.Unmarshal(raw, &a.NotifType)
		if err != nil {
			return fmt.Errorf("error reading 'notifType': %w", err)
		}
		delete(object, "notifType")
	}

	if raw, found := object["refPccRuleIds"]; found {
		err = json.Unmarshal(raw, &a.RefPccRuleIds)
		if err != nil {
			return fmt.Errorf("error reading 'refPccRuleIds': %w", err)
		}
		delete(object, "refPccRuleIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SMPolicyQosNotificationControlInfo to handle AdditionalProperties
func (a SMPolicyQosNotificationControlInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltQosParamId != nil {
		object["altQosParamId"], err = json.Marshal(a.AltQosParamId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altQosParamId': %w", err)
		}
	}

	if a.ContVer != nil {
		object["contVer"], err = json.Marshal(a.ContVer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVer': %w", err)
		}
	}

	object["notifType"], err = json.Marshal(a.NotifType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifType': %w", err)
	}

	object["refPccRuleIds"], err = json.Marshal(a.RefPccRuleIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refPccRuleIds': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ScheduledCommunicationTime. Returns the specified
// element and whether it was found
func (a ScheduledCommunicationTime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ScheduledCommunicationTime
func (a *ScheduledCommunicationTime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ScheduledCommunicationTime to handle AdditionalProperties
func (a *ScheduledCommunicationTime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["daysOfWeek"]; found {
		err = json.Unmarshal(raw, &a.DaysOfWeek)
		if err != nil {
			return fmt.Errorf("error reading 'daysOfWeek': %w", err)
		}
		delete(object, "daysOfWeek")
	}

	if raw, found := object["timeOfDayEnd"]; found {
		err = json.Unmarshal(raw, &a.TimeOfDayEnd)
		if err != nil {
			return fmt.Errorf("error reading 'timeOfDayEnd': %w", err)
		}
		delete(object, "timeOfDayEnd")
	}

	if raw, found := object["timeOfDayStart"]; found {
		err = json.Unmarshal(raw, &a.TimeOfDayStart)
		if err != nil {
			return fmt.Errorf("error reading 'timeOfDayStart': %w", err)
		}
		delete(object, "timeOfDayStart")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ScheduledCommunicationTime to handle AdditionalProperties
func (a ScheduledCommunicationTime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DaysOfWeek) != 0 {
		object["daysOfWeek"], err = json.Marshal(a.DaysOfWeek)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'daysOfWeek': %w", err)
		}
	}

	if a.TimeOfDayEnd != nil {
		object["timeOfDayEnd"], err = json.Marshal(a.TimeOfDayEnd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeOfDayEnd': %w", err)
		}
	}

	if a.TimeOfDayStart != nil {
		object["timeOfDayStart"], err = json.Marshal(a.TimeOfDayStart)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeOfDayStart': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ScheduledCommunicationTimeRm. Returns the specified
// element and whether it was found
func (a ScheduledCommunicationTimeRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ScheduledCommunicationTimeRm
func (a *ScheduledCommunicationTimeRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ScheduledCommunicationTimeRm to handle AdditionalProperties
func (a *ScheduledCommunicationTimeRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["daysOfWeek"]; found {
		err = json.Unmarshal(raw, &a.DaysOfWeek)
		if err != nil {
			return fmt.Errorf("error reading 'daysOfWeek': %w", err)
		}
		delete(object, "daysOfWeek")
	}

	if raw, found := object["timeOfDayEnd"]; found {
		err = json.Unmarshal(raw, &a.TimeOfDayEnd)
		if err != nil {
			return fmt.Errorf("error reading 'timeOfDayEnd': %w", err)
		}
		delete(object, "timeOfDayEnd")
	}

	if raw, found := object["timeOfDayStart"]; found {
		err = json.Unmarshal(raw, &a.TimeOfDayStart)
		if err != nil {
			return fmt.Errorf("error reading 'timeOfDayStart': %w", err)
		}
		delete(object, "timeOfDayStart")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ScheduledCommunicationTimeRm to handle AdditionalProperties
func (a ScheduledCommunicationTimeRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DaysOfWeek) != 0 {
		object["daysOfWeek"], err = json.Marshal(a.DaysOfWeek)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'daysOfWeek': %w", err)
		}
	}

	if a.TimeOfDayEnd != nil {
		object["timeOfDayEnd"], err = json.Marshal(a.TimeOfDayEnd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeOfDayEnd': %w", err)
		}
	}

	if a.TimeOfDayStart != nil {
		object["timeOfDayStart"], err = json.Marshal(a.TimeOfDayStart)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeOfDayStart': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ScpDomainCond. Returns the specified
// element and whether it was found
func (a ScpDomainCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ScpDomainCond
func (a *ScpDomainCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ScpDomainCond to handle AdditionalProperties
func (a *ScpDomainCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["scpDomains"]; found {
		err = json.Unmarshal(raw, &a.ScpDomains)
		if err != nil {
			return fmt.Errorf("error reading 'scpDomains': %w", err)
		}
		delete(object, "scpDomains")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ScpDomainCond to handle AdditionalProperties
func (a ScpDomainCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["scpDomains"], err = json.Marshal(a.ScpDomains)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scpDomains': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ScpDomainInfo. Returns the specified
// element and whether it was found
func (a ScpDomainInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ScpDomainInfo
func (a *ScpDomainInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ScpDomainInfo to handle AdditionalProperties
func (a *ScpDomainInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["scpFqdn"]; found {
		err = json.Unmarshal(raw, &a.ScpFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'scpFqdn': %w", err)
		}
		delete(object, "scpFqdn")
	}

	if raw, found := object["scpIpEndPoints"]; found {
		err = json.Unmarshal(raw, &a.ScpIpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'scpIpEndPoints': %w", err)
		}
		delete(object, "scpIpEndPoints")
	}

	if raw, found := object["scpPorts"]; found {
		err = json.Unmarshal(raw, &a.ScpPorts)
		if err != nil {
			return fmt.Errorf("error reading 'scpPorts': %w", err)
		}
		delete(object, "scpPorts")
	}

	if raw, found := object["scpPrefix"]; found {
		err = json.Unmarshal(raw, &a.ScpPrefix)
		if err != nil {
			return fmt.Errorf("error reading 'scpPrefix': %w", err)
		}
		delete(object, "scpPrefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ScpDomainInfo to handle AdditionalProperties
func (a ScpDomainInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ScpFqdn != nil {
		object["scpFqdn"], err = json.Marshal(a.ScpFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpFqdn': %w", err)
		}
	}

	if len(a.ScpIpEndPoints) != 0 {
		object["scpIpEndPoints"], err = json.Marshal(a.ScpIpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpIpEndPoints': %w", err)
		}
	}

	if a.ScpPorts != nil {
		object["scpPorts"], err = json.Marshal(a.ScpPorts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpPorts': %w", err)
		}
	}

	if a.ScpPrefix != nil {
		object["scpPrefix"], err = json.Marshal(a.ScpPrefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpPrefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ScpInfo. Returns the specified
// element and whether it was found
func (a ScpInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ScpInfo
func (a *ScpInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ScpInfo to handle AdditionalProperties
func (a *ScpInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addressDomains"]; found {
		err = json.Unmarshal(raw, &a.AddressDomains)
		if err != nil {
			return fmt.Errorf("error reading 'addressDomains': %w", err)
		}
		delete(object, "addressDomains")
	}

	if raw, found := object["ipReachability"]; found {
		err = json.Unmarshal(raw, &a.IpReachability)
		if err != nil {
			return fmt.Errorf("error reading 'ipReachability': %w", err)
		}
		delete(object, "ipReachability")
	}

	if raw, found := object["ipv4AddrRanges"]; found {
		err = json.Unmarshal(raw, &a.Ipv4AddrRanges)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4AddrRanges': %w", err)
		}
		delete(object, "ipv4AddrRanges")
	}

	if raw, found := object["ipv4Addresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addresses': %w", err)
		}
		delete(object, "ipv4Addresses")
	}

	if raw, found := object["ipv6PrefixRanges"]; found {
		err = json.Unmarshal(raw, &a.Ipv6PrefixRanges)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6PrefixRanges': %w", err)
		}
		delete(object, "ipv6PrefixRanges")
	}

	if raw, found := object["ipv6Prefixes"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefixes)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefixes': %w", err)
		}
		delete(object, "ipv6Prefixes")
	}

	if raw, found := object["remotePlmnList"]; found {
		err = json.Unmarshal(raw, &a.RemotePlmnList)
		if err != nil {
			return fmt.Errorf("error reading 'remotePlmnList': %w", err)
		}
		delete(object, "remotePlmnList")
	}

	if raw, found := object["scpDomainInfoList"]; found {
		err = json.Unmarshal(raw, &a.ScpDomainInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'scpDomainInfoList': %w", err)
		}
		delete(object, "scpDomainInfoList")
	}

	if raw, found := object["scpPorts"]; found {
		err = json.Unmarshal(raw, &a.ScpPorts)
		if err != nil {
			return fmt.Errorf("error reading 'scpPorts': %w", err)
		}
		delete(object, "scpPorts")
	}

	if raw, found := object["scpPrefix"]; found {
		err = json.Unmarshal(raw, &a.ScpPrefix)
		if err != nil {
			return fmt.Errorf("error reading 'scpPrefix': %w", err)
		}
		delete(object, "scpPrefix")
	}

	if raw, found := object["servedNfSetIdList"]; found {
		err = json.Unmarshal(raw, &a.ServedNfSetIdList)
		if err != nil {
			return fmt.Errorf("error reading 'servedNfSetIdList': %w", err)
		}
		delete(object, "servedNfSetIdList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ScpInfo to handle AdditionalProperties
func (a ScpInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddressDomains) != 0 {
		object["addressDomains"], err = json.Marshal(a.AddressDomains)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addressDomains': %w", err)
		}
	}

	if a.IpReachability != nil {
		object["ipReachability"], err = json.Marshal(a.IpReachability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipReachability': %w", err)
		}
	}

	if len(a.Ipv4AddrRanges) != 0 {
		object["ipv4AddrRanges"], err = json.Marshal(a.Ipv4AddrRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4AddrRanges': %w", err)
		}
	}

	if len(a.Ipv4Addresses) != 0 {
		object["ipv4Addresses"], err = json.Marshal(a.Ipv4Addresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addresses': %w", err)
		}
	}

	if len(a.Ipv6PrefixRanges) != 0 {
		object["ipv6PrefixRanges"], err = json.Marshal(a.Ipv6PrefixRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6PrefixRanges': %w", err)
		}
	}

	if len(a.Ipv6Prefixes) != 0 {
		object["ipv6Prefixes"], err = json.Marshal(a.Ipv6Prefixes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefixes': %w", err)
		}
	}

	if len(a.RemotePlmnList) != 0 {
		object["remotePlmnList"], err = json.Marshal(a.RemotePlmnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remotePlmnList': %w", err)
		}
	}

	if a.ScpDomainInfoList != nil {
		object["scpDomainInfoList"], err = json.Marshal(a.ScpDomainInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpDomainInfoList': %w", err)
		}
	}

	if a.ScpPorts != nil {
		object["scpPorts"], err = json.Marshal(a.ScpPorts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpPorts': %w", err)
		}
	}

	if a.ScpPrefix != nil {
		object["scpPrefix"], err = json.Marshal(a.ScpPrefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scpPrefix': %w", err)
		}
	}

	if len(a.ServedNfSetIdList) != 0 {
		object["servedNfSetIdList"], err = json.Marshal(a.ServedNfSetIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servedNfSetIdList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SdRange. Returns the specified
// element and whether it was found
func (a SdRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdRange
func (a *SdRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdRange to handle AdditionalProperties
func (a *SdRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdRange to handle AdditionalProperties
func (a SdRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SdmSubsModification. Returns the specified
// element and whether it was found
func (a SdmSubsModification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdmSubsModification
func (a *SdmSubsModification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdmSubsModification to handle AdditionalProperties
func (a *SdmSubsModification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expires"]; found {
		err = json.Unmarshal(raw, &a.Expires)
		if err != nil {
			return fmt.Errorf("error reading 'expires': %w", err)
		}
		delete(object, "expires")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdmSubsModification to handle AdditionalProperties
func (a SdmSubsModification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expires != nil {
		object["expires"], err = json.Marshal(a.Expires)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expires': %w", err)
		}
	}

	if len(a.MonitoredResourceUris) != 0 {
		object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SdmSubscription. Returns the specified
// element and whether it was found
func (a SdmSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdmSubscription
func (a *SdmSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdmSubscription to handle AdditionalProperties
func (a *SdmSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfServiceName"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceName': %w", err)
		}
		delete(object, "amfServiceName")
	}

	if raw, found := object["callbackReference"]; found {
		err = json.Unmarshal(raw, &a.CallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'callbackReference': %w", err)
		}
		delete(object, "callbackReference")
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["expires"]; found {
		err = json.Unmarshal(raw, &a.Expires)
		if err != nil {
			return fmt.Errorf("error reading 'expires': %w", err)
		}
		delete(object, "expires")
	}

	if raw, found := object["immediateReport"]; found {
		err = json.Unmarshal(raw, &a.ImmediateReport)
		if err != nil {
			return fmt.Errorf("error reading 'immediateReport': %w", err)
		}
		delete(object, "immediateReport")
	}

	if raw, found := object["implicitUnsubscribe"]; found {
		err = json.Unmarshal(raw, &a.ImplicitUnsubscribe)
		if err != nil {
			return fmt.Errorf("error reading 'implicitUnsubscribe': %w", err)
		}
		delete(object, "implicitUnsubscribe")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["report"]; found {
		err = json.Unmarshal(raw, &a.Report)
		if err != nil {
			return fmt.Errorf("error reading 'report': %w", err)
		}
		delete(object, "report")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["uniqueSubscription"]; found {
		err = json.Unmarshal(raw, &a.UniqueSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'uniqueSubscription': %w", err)
		}
		delete(object, "uniqueSubscription")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdmSubscription to handle AdditionalProperties
func (a SdmSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfServiceName != nil {
		object["amfServiceName"], err = json.Marshal(a.AmfServiceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceName': %w", err)
		}
	}

	object["callbackReference"], err = json.Marshal(a.CallbackReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'callbackReference': %w", err)
	}

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.Expires != nil {
		object["expires"], err = json.Marshal(a.Expires)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expires': %w", err)
		}
	}

	if a.ImmediateReport != nil {
		object["immediateReport"], err = json.Marshal(a.ImmediateReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immediateReport': %w", err)
		}
	}

	if a.ImplicitUnsubscribe != nil {
		object["implicitUnsubscribe"], err = json.Marshal(a.ImplicitUnsubscribe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'implicitUnsubscribe': %w", err)
		}
	}

	object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.Report != nil {
		object["report"], err = json.Marshal(a.Report)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'report': %w", err)
		}
	}

	if a.SingleNssai != nil {
		object["singleNssai"], err = json.Marshal(a.SingleNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
		}
	}

	if a.SubscriptionId != nil {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UniqueSubscription != nil {
		object["uniqueSubscription"], err = json.Marshal(a.UniqueSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uniqueSubscription': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SeafData. Returns the specified
// element and whether it was found
func (a SeafData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SeafData
func (a *SeafData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SeafData to handle AdditionalProperties
func (a *SeafData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["keyAmf"]; found {
		err = json.Unmarshal(raw, &a.KeyAmf)
		if err != nil {
			return fmt.Errorf("error reading 'keyAmf': %w", err)
		}
		delete(object, "keyAmf")
	}

	if raw, found := object["keyAmfChangeInd"]; found {
		err = json.Unmarshal(raw, &a.KeyAmfChangeInd)
		if err != nil {
			return fmt.Errorf("error reading 'keyAmfChangeInd': %w", err)
		}
		delete(object, "keyAmfChangeInd")
	}

	if raw, found := object["keyAmfHDerivationInd"]; found {
		err = json.Unmarshal(raw, &a.KeyAmfHDerivationInd)
		if err != nil {
			return fmt.Errorf("error reading 'keyAmfHDerivationInd': %w", err)
		}
		delete(object, "keyAmfHDerivationInd")
	}

	if raw, found := object["ncc"]; found {
		err = json.Unmarshal(raw, &a.Ncc)
		if err != nil {
			return fmt.Errorf("error reading 'ncc': %w", err)
		}
		delete(object, "ncc")
	}

	if raw, found := object["ngKsi"]; found {
		err = json.Unmarshal(raw, &a.NgKsi)
		if err != nil {
			return fmt.Errorf("error reading 'ngKsi': %w", err)
		}
		delete(object, "ngKsi")
	}

	if raw, found := object["nh"]; found {
		err = json.Unmarshal(raw, &a.Nh)
		if err != nil {
			return fmt.Errorf("error reading 'nh': %w", err)
		}
		delete(object, "nh")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SeafData to handle AdditionalProperties
func (a SeafData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["keyAmf"], err = json.Marshal(a.KeyAmf)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'keyAmf': %w", err)
	}

	if a.KeyAmfChangeInd != nil {
		object["keyAmfChangeInd"], err = json.Marshal(a.KeyAmfChangeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'keyAmfChangeInd': %w", err)
		}
	}

	if a.KeyAmfHDerivationInd != nil {
		object["keyAmfHDerivationInd"], err = json.Marshal(a.KeyAmfHDerivationInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'keyAmfHDerivationInd': %w", err)
		}
	}

	if a.Ncc != nil {
		object["ncc"], err = json.Marshal(a.Ncc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncc': %w", err)
		}
	}

	object["ngKsi"], err = json.Marshal(a.NgKsi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ngKsi': %w", err)
	}

	if len(a.Nh) != 0 {
		object["nh"], err = json.Marshal(a.Nh)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nh': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SearchResult. Returns the specified
// element and whether it was found
func (a SearchResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SearchResult
func (a *SearchResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SearchResult to handle AdditionalProperties
func (a *SearchResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfInstances"]; found {
		err = json.Unmarshal(raw, &a.NfInstances)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstances': %w", err)
		}
		delete(object, "nfInstances")
	}

	if raw, found := object["nrfSupportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.NrfSupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'nrfSupportedFeatures': %w", err)
		}
		delete(object, "nrfSupportedFeatures")
	}

	if raw, found := object["numNfInstComplete"]; found {
		err = json.Unmarshal(raw, &a.NumNfInstComplete)
		if err != nil {
			return fmt.Errorf("error reading 'numNfInstComplete': %w", err)
		}
		delete(object, "numNfInstComplete")
	}

	if raw, found := object["preferredSearch"]; found {
		err = json.Unmarshal(raw, &a.PreferredSearch)
		if err != nil {
			return fmt.Errorf("error reading 'preferredSearch': %w", err)
		}
		delete(object, "preferredSearch")
	}

	if raw, found := object["searchId"]; found {
		err = json.Unmarshal(raw, &a.SearchId)
		if err != nil {
			return fmt.Errorf("error reading 'searchId': %w", err)
		}
		delete(object, "searchId")
	}

	if raw, found := object["validityPeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidityPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validityPeriod': %w", err)
		}
		delete(object, "validityPeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SearchResult to handle AdditionalProperties
func (a SearchResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfInstances"], err = json.Marshal(a.NfInstances)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstances': %w", err)
	}

	if a.NrfSupportedFeatures != nil {
		object["nrfSupportedFeatures"], err = json.Marshal(a.NrfSupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfSupportedFeatures': %w", err)
		}
	}

	if a.NumNfInstComplete != nil {
		object["numNfInstComplete"], err = json.Marshal(a.NumNfInstComplete)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numNfInstComplete': %w", err)
		}
	}

	if a.PreferredSearch != nil {
		object["preferredSearch"], err = json.Marshal(a.PreferredSearch)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preferredSearch': %w", err)
		}
	}

	if a.SearchId != nil {
		object["searchId"], err = json.Marshal(a.SearchId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'searchId': %w", err)
		}
	}

	if a.ValidityPeriod != nil {
		object["validityPeriod"], err = json.Marshal(a.ValidityPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityPeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecondaryRatUsageInfo. Returns the specified
// element and whether it was found
func (a SecondaryRatUsageInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecondaryRatUsageInfo
func (a *SecondaryRatUsageInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecondaryRatUsageInfo to handle AdditionalProperties
func (a *SecondaryRatUsageInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pduSessionUsageData"]; found {
		err = json.Unmarshal(raw, &a.PduSessionUsageData)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionUsageData': %w", err)
		}
		delete(object, "pduSessionUsageData")
	}

	if raw, found := object["qosFlowsUsageData"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsUsageData)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsUsageData': %w", err)
		}
		delete(object, "qosFlowsUsageData")
	}

	if raw, found := object["secondaryRatType"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatType)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatType': %w", err)
		}
		delete(object, "secondaryRatType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecondaryRatUsageInfo to handle AdditionalProperties
func (a SecondaryRatUsageInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.PduSessionUsageData) != 0 {
		object["pduSessionUsageData"], err = json.Marshal(a.PduSessionUsageData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionUsageData': %w", err)
		}
	}

	if len(a.QosFlowsUsageData) != 0 {
		object["qosFlowsUsageData"], err = json.Marshal(a.QosFlowsUsageData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsUsageData': %w", err)
		}
	}

	object["secondaryRatType"], err = json.Marshal(a.SecondaryRatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'secondaryRatType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecondaryRatUsageReport. Returns the specified
// element and whether it was found
func (a SecondaryRatUsageReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecondaryRatUsageReport
func (a *SecondaryRatUsageReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecondaryRatUsageReport to handle AdditionalProperties
func (a *SecondaryRatUsageReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qosFlowsUsageData"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsUsageData)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsUsageData': %w", err)
		}
		delete(object, "qosFlowsUsageData")
	}

	if raw, found := object["secondaryRatType"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatType)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatType': %w", err)
		}
		delete(object, "secondaryRatType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecondaryRatUsageReport to handle AdditionalProperties
func (a SecondaryRatUsageReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["qosFlowsUsageData"], err = json.Marshal(a.QosFlowsUsageData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosFlowsUsageData': %w", err)
	}

	object["secondaryRatType"], err = json.Marshal(a.SecondaryRatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'secondaryRatType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecurityResult. Returns the specified
// element and whether it was found
func (a SecurityResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecurityResult
func (a *SecurityResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecurityResult to handle AdditionalProperties
func (a *SecurityResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["confidentialityProtectionResult"]; found {
		err = json.Unmarshal(raw, &a.ConfidentialityProtectionResult)
		if err != nil {
			return fmt.Errorf("error reading 'confidentialityProtectionResult': %w", err)
		}
		delete(object, "confidentialityProtectionResult")
	}

	if raw, found := object["integrityProtectionResult"]; found {
		err = json.Unmarshal(raw, &a.IntegrityProtectionResult)
		if err != nil {
			return fmt.Errorf("error reading 'integrityProtectionResult': %w", err)
		}
		delete(object, "integrityProtectionResult")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecurityResult to handle AdditionalProperties
func (a SecurityResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConfidentialityProtectionResult != nil {
		object["confidentialityProtectionResult"], err = json.Marshal(a.ConfidentialityProtectionResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'confidentialityProtectionResult': %w", err)
		}
	}

	if a.IntegrityProtectionResult != nil {
		object["integrityProtectionResult"], err = json.Marshal(a.IntegrityProtectionResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'integrityProtectionResult': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SendMoDataReqData. Returns the specified
// element and whether it was found
func (a SendMoDataReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SendMoDataReqData
func (a *SendMoDataReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SendMoDataReqData to handle AdditionalProperties
func (a *SendMoDataReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["moData"]; found {
		err = json.Unmarshal(raw, &a.MoData)
		if err != nil {
			return fmt.Errorf("error reading 'moData': %w", err)
		}
		delete(object, "moData")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SendMoDataReqData to handle AdditionalProperties
func (a SendMoDataReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["moData"], err = json.Marshal(a.MoData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'moData': %w", err)
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SequenceNumber. Returns the specified
// element and whether it was found
func (a SequenceNumber) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SequenceNumber
func (a *SequenceNumber) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SequenceNumber to handle AdditionalProperties
func (a *SequenceNumber) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["difSign"]; found {
		err = json.Unmarshal(raw, &a.DifSign)
		if err != nil {
			return fmt.Errorf("error reading 'difSign': %w", err)
		}
		delete(object, "difSign")
	}

	if raw, found := object["indLength"]; found {
		err = json.Unmarshal(raw, &a.IndLength)
		if err != nil {
			return fmt.Errorf("error reading 'indLength': %w", err)
		}
		delete(object, "indLength")
	}

	if raw, found := object["lastIndexes"]; found {
		err = json.Unmarshal(raw, &a.LastIndexes)
		if err != nil {
			return fmt.Errorf("error reading 'lastIndexes': %w", err)
		}
		delete(object, "lastIndexes")
	}

	if raw, found := object["sqn"]; found {
		err = json.Unmarshal(raw, &a.Sqn)
		if err != nil {
			return fmt.Errorf("error reading 'sqn': %w", err)
		}
		delete(object, "sqn")
	}

	if raw, found := object["sqnScheme"]; found {
		err = json.Unmarshal(raw, &a.SqnScheme)
		if err != nil {
			return fmt.Errorf("error reading 'sqnScheme': %w", err)
		}
		delete(object, "sqnScheme")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SequenceNumber to handle AdditionalProperties
func (a SequenceNumber) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DifSign) != 0 {
		object["difSign"], err = json.Marshal(a.DifSign)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'difSign': %w", err)
		}
	}

	if a.IndLength != nil {
		object["indLength"], err = json.Marshal(a.IndLength)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'indLength': %w", err)
		}
	}

	if a.LastIndexes != nil {
		object["lastIndexes"], err = json.Marshal(a.LastIndexes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lastIndexes': %w", err)
		}
	}

	if len(a.Sqn) != 0 {
		object["sqn"], err = json.Marshal(a.Sqn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sqn': %w", err)
		}
	}

	if a.SqnScheme != nil {
		object["sqnScheme"], err = json.Marshal(a.SqnScheme)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sqnScheme': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceAreaId. Returns the specified
// element and whether it was found
func (a ServiceAreaId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceAreaId
func (a *ServiceAreaId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceAreaId to handle AdditionalProperties
func (a *ServiceAreaId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lac"]; found {
		err = json.Unmarshal(raw, &a.Lac)
		if err != nil {
			return fmt.Errorf("error reading 'lac': %w", err)
		}
		delete(object, "lac")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["sac"]; found {
		err = json.Unmarshal(raw, &a.Sac)
		if err != nil {
			return fmt.Errorf("error reading 'sac': %w", err)
		}
		delete(object, "sac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceAreaId to handle AdditionalProperties
func (a ServiceAreaId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lac"], err = json.Marshal(a.Lac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lac': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["sac"], err = json.Marshal(a.Sac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sac': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceAreaRestriction. Returns the specified
// element and whether it was found
func (a ServiceAreaRestriction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceAreaRestriction
func (a *ServiceAreaRestriction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceAreaRestriction to handle AdditionalProperties
func (a *ServiceAreaRestriction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areas"]; found {
		err = json.Unmarshal(raw, &a.Areas)
		if err != nil {
			return fmt.Errorf("error reading 'areas': %w", err)
		}
		delete(object, "areas")
	}

	if raw, found := object["maxNumOfTAs"]; found {
		err = json.Unmarshal(raw, &a.MaxNumOfTAs)
		if err != nil {
			return fmt.Errorf("error reading 'maxNumOfTAs': %w", err)
		}
		delete(object, "maxNumOfTAs")
	}

	if raw, found := object["maxNumOfTAsForNotAllowedAreas"]; found {
		err = json.Unmarshal(raw, &a.MaxNumOfTAsForNotAllowedAreas)
		if err != nil {
			return fmt.Errorf("error reading 'maxNumOfTAsForNotAllowedAreas': %w", err)
		}
		delete(object, "maxNumOfTAsForNotAllowedAreas")
	}

	if raw, found := object["restrictionType"]; found {
		err = json.Unmarshal(raw, &a.RestrictionType)
		if err != nil {
			return fmt.Errorf("error reading 'restrictionType': %w", err)
		}
		delete(object, "restrictionType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceAreaRestriction to handle AdditionalProperties
func (a ServiceAreaRestriction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Areas != nil {
		object["areas"], err = json.Marshal(a.Areas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areas': %w", err)
		}
	}

	if a.MaxNumOfTAs != nil {
		object["maxNumOfTAs"], err = json.Marshal(a.MaxNumOfTAs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxNumOfTAs': %w", err)
		}
	}

	if a.MaxNumOfTAsForNotAllowedAreas != nil {
		object["maxNumOfTAsForNotAllowedAreas"], err = json.Marshal(a.MaxNumOfTAsForNotAllowedAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxNumOfTAsForNotAllowedAreas': %w", err)
		}
	}

	if a.RestrictionType != nil {
		object["restrictionType"], err = json.Marshal(a.RestrictionType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictionType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceIdentification. Returns the specified
// element and whether it was found
func (a ServiceIdentification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceIdentification
func (a *ServiceIdentification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceIdentification to handle AdditionalProperties
func (a *ServiceIdentification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["servEthFlows"]; found {
		err = json.Unmarshal(raw, &a.ServEthFlows)
		if err != nil {
			return fmt.Errorf("error reading 'servEthFlows': %w", err)
		}
		delete(object, "servEthFlows")
	}

	if raw, found := object["servIpFlows"]; found {
		err = json.Unmarshal(raw, &a.ServIpFlows)
		if err != nil {
			return fmt.Errorf("error reading 'servIpFlows': %w", err)
		}
		delete(object, "servIpFlows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceIdentification to handle AdditionalProperties
func (a ServiceIdentification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if len(a.ServEthFlows) != 0 {
		object["servEthFlows"], err = json.Marshal(a.ServEthFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servEthFlows': %w", err)
		}
	}

	if len(a.ServIpFlows) != 0 {
		object["servIpFlows"], err = json.Marshal(a.ServIpFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servIpFlows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceNameCond. Returns the specified
// element and whether it was found
func (a ServiceNameCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceNameCond
func (a *ServiceNameCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceNameCond to handle AdditionalProperties
func (a *ServiceNameCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["serviceName"]; found {
		err = json.Unmarshal(raw, &a.ServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'serviceName': %w", err)
		}
		delete(object, "serviceName")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceNameCond to handle AdditionalProperties
func (a ServiceNameCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["serviceName"], err = json.Marshal(a.ServiceName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceName': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceParameterData. Returns the specified
// element and whether it was found
func (a ServiceParameterData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceParameterData
func (a *ServiceParameterData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceParameterData to handle AdditionalProperties
func (a *ServiceParameterData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anyUeInd"]; found {
		err = json.Unmarshal(raw, &a.AnyUeInd)
		if err != nil {
			return fmt.Errorf("error reading 'anyUeInd': %w", err)
		}
		delete(object, "anyUeInd")
	}

	if raw, found := object["appId"]; found {
		err = json.Unmarshal(raw, &a.AppId)
		if err != nil {
			return fmt.Errorf("error reading 'appId': %w", err)
		}
		delete(object, "appId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["paramOverPc5"]; found {
		err = json.Unmarshal(raw, &a.ParamOverPc5)
		if err != nil {
			return fmt.Errorf("error reading 'paramOverPc5': %w", err)
		}
		delete(object, "paramOverPc5")
	}

	if raw, found := object["paramOverUu"]; found {
		err = json.Unmarshal(raw, &a.ParamOverUu)
		if err != nil {
			return fmt.Errorf("error reading 'paramOverUu': %w", err)
		}
		delete(object, "paramOverUu")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceParameterData to handle AdditionalProperties
func (a ServiceParameterData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnyUeInd != nil {
		object["anyUeInd"], err = json.Marshal(a.AnyUeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUeInd': %w", err)
		}
	}

	if a.AppId != nil {
		object["appId"], err = json.Marshal(a.AppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appId': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.ParamOverPc5 != nil {
		object["paramOverPc5"], err = json.Marshal(a.ParamOverPc5)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paramOverPc5': %w", err)
		}
	}

	if a.ParamOverUu != nil {
		object["paramOverUu"], err = json.Marshal(a.ParamOverUu)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paramOverUu': %w", err)
		}
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UeIpv4 != nil {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceTypeUnrelatedClass. Returns the specified
// element and whether it was found
func (a ServiceTypeUnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceTypeUnrelatedClass
func (a *ServiceTypeUnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceTypeUnrelatedClass to handle AdditionalProperties
func (a *ServiceTypeUnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["codeWordInd"]; found {
		err = json.Unmarshal(raw, &a.CodeWordInd)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordInd': %w", err)
		}
		delete(object, "codeWordInd")
	}

	if raw, found := object["codeWordList"]; found {
		err = json.Unmarshal(raw, &a.CodeWordList)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordList': %w", err)
		}
		delete(object, "codeWordList")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["serviceType"]; found {
		err = json.Unmarshal(raw, &a.ServiceType)
		if err != nil {
			return fmt.Errorf("error reading 'serviceType': %w", err)
		}
		delete(object, "serviceType")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceTypeUnrelatedClass to handle AdditionalProperties
func (a ServiceTypeUnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.CodeWordInd != nil {
		object["codeWordInd"], err = json.Marshal(a.CodeWordInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordInd': %w", err)
		}
	}

	if len(a.CodeWordList) != 0 {
		object["codeWordList"], err = json.Marshal(a.CodeWordList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordList': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	object["serviceType"], err = json.Marshal(a.ServiceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceType': %w", err)
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServingNfIdentity. Returns the specified
// element and whether it was found
func (a ServingNfIdentity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServingNfIdentity
func (a *ServingNfIdentity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServingNfIdentity to handle AdditionalProperties
func (a *ServingNfIdentity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anGwAddr"]; found {
		err = json.Unmarshal(raw, &a.AnGwAddr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwAddr': %w", err)
		}
		delete(object, "anGwAddr")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["servNfInstId"]; found {
		err = json.Unmarshal(raw, &a.ServNfInstId)
		if err != nil {
			return fmt.Errorf("error reading 'servNfInstId': %w", err)
		}
		delete(object, "servNfInstId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServingNfIdentity to handle AdditionalProperties
func (a ServingNfIdentity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnGwAddr != nil {
		object["anGwAddr"], err = json.Marshal(a.AnGwAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwAddr': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.ServNfInstId != nil {
		object["servNfInstId"], err = json.Marshal(a.ServNfInstId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servNfInstId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SessionManagementSubscriptionData. Returns the specified
// element and whether it was found
func (a SessionManagementSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SessionManagementSubscriptionData
func (a *SessionManagementSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SessionManagementSubscriptionData to handle AdditionalProperties
func (a *SessionManagementSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["3gppChargingCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.N3gppChargingCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading '3gppChargingCharacteristics': %w", err)
		}
		delete(object, "3gppChargingCharacteristics")
	}

	if raw, found := object["dnnConfigurations"]; found {
		err = json.Unmarshal(raw, &a.DnnConfigurations)
		if err != nil {
			return fmt.Errorf("error reading 'dnnConfigurations': %w", err)
		}
		delete(object, "dnnConfigurations")
	}

	if raw, found := object["expectedUeBehavioursList"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUeBehavioursList)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUeBehavioursList': %w", err)
		}
		delete(object, "expectedUeBehavioursList")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["odbPacketServices"]; found {
		err = json.Unmarshal(raw, &a.OdbPacketServices)
		if err != nil {
			return fmt.Errorf("error reading 'odbPacketServices': %w", err)
		}
		delete(object, "odbPacketServices")
	}

	if raw, found := object["sharedDnnConfigurationsId"]; found {
		err = json.Unmarshal(raw, &a.SharedDnnConfigurationsId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedDnnConfigurationsId': %w", err)
		}
		delete(object, "sharedDnnConfigurationsId")
	}

	if raw, found := object["sharedTraceDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedTraceDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedTraceDataId': %w", err)
		}
		delete(object, "sharedTraceDataId")
	}

	if raw, found := object["sharedVnGroupDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedVnGroupDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedVnGroupDataIds': %w", err)
		}
		delete(object, "sharedVnGroupDataIds")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["suggestedPacketNumDlList"]; found {
		err = json.Unmarshal(raw, &a.SuggestedPacketNumDlList)
		if err != nil {
			return fmt.Errorf("error reading 'suggestedPacketNumDlList': %w", err)
		}
		delete(object, "suggestedPacketNumDlList")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SessionManagementSubscriptionData to handle AdditionalProperties
func (a SessionManagementSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N3gppChargingCharacteristics != nil {
		object["3gppChargingCharacteristics"], err = json.Marshal(a.N3gppChargingCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '3gppChargingCharacteristics': %w", err)
		}
	}

	if a.DnnConfigurations != nil {
		object["dnnConfigurations"], err = json.Marshal(a.DnnConfigurations)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnConfigurations': %w", err)
		}
	}

	if a.ExpectedUeBehavioursList != nil {
		object["expectedUeBehavioursList"], err = json.Marshal(a.ExpectedUeBehavioursList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUeBehavioursList': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	if a.OdbPacketServices != nil {
		object["odbPacketServices"], err = json.Marshal(a.OdbPacketServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'odbPacketServices': %w", err)
		}
	}

	if len(a.SharedDnnConfigurationsId) != 0 {
		object["sharedDnnConfigurationsId"], err = json.Marshal(a.SharedDnnConfigurationsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedDnnConfigurationsId': %w", err)
		}
	}

	if len(a.SharedTraceDataId) != 0 {
		object["sharedTraceDataId"], err = json.Marshal(a.SharedTraceDataId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedTraceDataId': %w", err)
		}
	}

	if a.SharedVnGroupDataIds != nil {
		object["sharedVnGroupDataIds"], err = json.Marshal(a.SharedVnGroupDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedVnGroupDataIds': %w", err)
		}
	}

	object["singleNssai"], err = json.Marshal(a.SingleNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
	}

	if a.SuggestedPacketNumDlList != nil {
		object["suggestedPacketNumDlList"], err = json.Marshal(a.SuggestedPacketNumDlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suggestedPacketNumDlList': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SessionRule. Returns the specified
// element and whether it was found
func (a SessionRule) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SessionRule
func (a *SessionRule) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SessionRule to handle AdditionalProperties
func (a *SessionRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authDefQos"]; found {
		err = json.Unmarshal(raw, &a.AuthDefQos)
		if err != nil {
			return fmt.Errorf("error reading 'authDefQos': %w", err)
		}
		delete(object, "authDefQos")
	}

	if raw, found := object["authSessAmbr"]; found {
		err = json.Unmarshal(raw, &a.AuthSessAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'authSessAmbr': %w", err)
		}
		delete(object, "authSessAmbr")
	}

	if raw, found := object["refCondData"]; found {
		err = json.Unmarshal(raw, &a.RefCondData)
		if err != nil {
			return fmt.Errorf("error reading 'refCondData': %w", err)
		}
		delete(object, "refCondData")
	}

	if raw, found := object["refUmData"]; found {
		err = json.Unmarshal(raw, &a.RefUmData)
		if err != nil {
			return fmt.Errorf("error reading 'refUmData': %w", err)
		}
		delete(object, "refUmData")
	}

	if raw, found := object["refUmN3gData"]; found {
		err = json.Unmarshal(raw, &a.RefUmN3gData)
		if err != nil {
			return fmt.Errorf("error reading 'refUmN3gData': %w", err)
		}
		delete(object, "refUmN3gData")
	}

	if raw, found := object["sessRuleId"]; found {
		err = json.Unmarshal(raw, &a.SessRuleId)
		if err != nil {
			return fmt.Errorf("error reading 'sessRuleId': %w", err)
		}
		delete(object, "sessRuleId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SessionRule to handle AdditionalProperties
func (a SessionRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AuthDefQos != nil {
		object["authDefQos"], err = json.Marshal(a.AuthDefQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authDefQos': %w", err)
		}
	}

	if a.AuthSessAmbr != nil {
		object["authSessAmbr"], err = json.Marshal(a.AuthSessAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authSessAmbr': %w", err)
		}
	}

	object["refCondData"], err = json.Marshal(a.RefCondData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refCondData': %w", err)
	}

	object["refUmData"], err = json.Marshal(a.RefUmData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refUmData': %w", err)
	}

	object["refUmN3gData"], err = json.Marshal(a.RefUmN3gData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'refUmN3gData': %w", err)
	}

	object["sessRuleId"], err = json.Marshal(a.SessRuleId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sessRuleId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SessionRuleReport. Returns the specified
// element and whether it was found
func (a SessionRuleReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SessionRuleReport
func (a *SessionRuleReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SessionRuleReport to handle AdditionalProperties
func (a *SessionRuleReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["policyDecFailureReports"]; found {
		err = json.Unmarshal(raw, &a.PolicyDecFailureReports)
		if err != nil {
			return fmt.Errorf("error reading 'policyDecFailureReports': %w", err)
		}
		delete(object, "policyDecFailureReports")
	}

	if raw, found := object["ruleIds"]; found {
		err = json.Unmarshal(raw, &a.RuleIds)
		if err != nil {
			return fmt.Errorf("error reading 'ruleIds': %w", err)
		}
		delete(object, "ruleIds")
	}

	if raw, found := object["ruleStatus"]; found {
		err = json.Unmarshal(raw, &a.RuleStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ruleStatus': %w", err)
		}
		delete(object, "ruleStatus")
	}

	if raw, found := object["sessRuleFailureCode"]; found {
		err = json.Unmarshal(raw, &a.SessRuleFailureCode)
		if err != nil {
			return fmt.Errorf("error reading 'sessRuleFailureCode': %w", err)
		}
		delete(object, "sessRuleFailureCode")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SessionRuleReport to handle AdditionalProperties
func (a SessionRuleReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.PolicyDecFailureReports) != 0 {
		object["policyDecFailureReports"], err = json.Marshal(a.PolicyDecFailureReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'policyDecFailureReports': %w", err)
		}
	}

	object["ruleIds"], err = json.Marshal(a.RuleIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ruleIds': %w", err)
	}

	object["ruleStatus"], err = json.Marshal(a.RuleStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ruleStatus': %w", err)
	}

	if a.SessRuleFailureCode != nil {
		object["sessRuleFailureCode"], err = json.Marshal(a.SessRuleFailureCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessRuleFailureCode': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SharedData. Returns the specified
// element and whether it was found
func (a SharedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SharedData
func (a *SharedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SharedData to handle AdditionalProperties
func (a *SharedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedAmData"]; found {
		err = json.Unmarshal(raw, &a.SharedAmData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedAmData': %w", err)
		}
		delete(object, "sharedAmData")
	}

	if raw, found := object["sharedDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedDataId': %w", err)
		}
		delete(object, "sharedDataId")
	}

	if raw, found := object["sharedDnnConfigurations"]; found {
		err = json.Unmarshal(raw, &a.SharedDnnConfigurations)
		if err != nil {
			return fmt.Errorf("error reading 'sharedDnnConfigurations': %w", err)
		}
		delete(object, "sharedDnnConfigurations")
	}

	if raw, found := object["sharedSmsMngSubsData"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsMngSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsMngSubsData': %w", err)
		}
		delete(object, "sharedSmsMngSubsData")
	}

	if raw, found := object["sharedSmsSubsData"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsSubsData': %w", err)
		}
		delete(object, "sharedSmsSubsData")
	}

	if raw, found := object["sharedSnssaiInfos"]; found {
		err = json.Unmarshal(raw, &a.SharedSnssaiInfos)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSnssaiInfos': %w", err)
		}
		delete(object, "sharedSnssaiInfos")
	}

	if raw, found := object["sharedTraceData"]; found {
		err = json.Unmarshal(raw, &a.SharedTraceData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedTraceData': %w", err)
		}
		delete(object, "sharedTraceData")
	}

	if raw, found := object["sharedVnGroupDatas"]; found {
		err = json.Unmarshal(raw, &a.SharedVnGroupDatas)
		if err != nil {
			return fmt.Errorf("error reading 'sharedVnGroupDatas': %w", err)
		}
		delete(object, "sharedVnGroupDatas")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SharedData to handle AdditionalProperties
func (a SharedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SharedAmData != nil {
		object["sharedAmData"], err = json.Marshal(a.SharedAmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedAmData': %w", err)
		}
	}

	object["sharedDataId"], err = json.Marshal(a.SharedDataId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharedDataId': %w", err)
	}

	if a.SharedDnnConfigurations != nil {
		object["sharedDnnConfigurations"], err = json.Marshal(a.SharedDnnConfigurations)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedDnnConfigurations': %w", err)
		}
	}

	if a.SharedSmsMngSubsData != nil {
		object["sharedSmsMngSubsData"], err = json.Marshal(a.SharedSmsMngSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsMngSubsData': %w", err)
		}
	}

	if a.SharedSmsSubsData != nil {
		object["sharedSmsSubsData"], err = json.Marshal(a.SharedSmsSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsSubsData': %w", err)
		}
	}

	if a.SharedSnssaiInfos != nil {
		object["sharedSnssaiInfos"], err = json.Marshal(a.SharedSnssaiInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSnssaiInfos': %w", err)
		}
	}

	object["sharedTraceData"], err = json.Marshal(a.SharedTraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharedTraceData': %w", err)
	}

	if a.SharedVnGroupDatas != nil {
		object["sharedVnGroupDatas"], err = json.Marshal(a.SharedVnGroupDatas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedVnGroupDatas': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SliceInfoForPDUSession. Returns the specified
// element and whether it was found
func (a SliceInfoForPDUSession) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SliceInfoForPDUSession
func (a *SliceInfoForPDUSession) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SliceInfoForPDUSession to handle AdditionalProperties
func (a *SliceInfoForPDUSession) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["homeSnssai"]; found {
		err = json.Unmarshal(raw, &a.HomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'homeSnssai': %w", err)
		}
		delete(object, "homeSnssai")
	}

	if raw, found := object["roamingIndication"]; found {
		err = json.Unmarshal(raw, &a.RoamingIndication)
		if err != nil {
			return fmt.Errorf("error reading 'roamingIndication': %w", err)
		}
		delete(object, "roamingIndication")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SliceInfoForPDUSession to handle AdditionalProperties
func (a SliceInfoForPDUSession) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.HomeSnssai != nil {
		object["homeSnssai"], err = json.Marshal(a.HomeSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'homeSnssai': %w", err)
		}
	}

	object["roamingIndication"], err = json.Marshal(a.RoamingIndication)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'roamingIndication': %w", err)
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SliceInfoForRegistration. Returns the specified
// element and whether it was found
func (a SliceInfoForRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SliceInfoForRegistration
func (a *SliceInfoForRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SliceInfoForRegistration to handle AdditionalProperties
func (a *SliceInfoForRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNssaiCurrentAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiCurrentAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiCurrentAccess': %w", err)
		}
		delete(object, "allowedNssaiCurrentAccess")
	}

	if raw, found := object["allowedNssaiOtherAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiOtherAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiOtherAccess': %w", err)
		}
		delete(object, "allowedNssaiOtherAccess")
	}

	if raw, found := object["defaultConfiguredSnssaiInd"]; found {
		err = json.Unmarshal(raw, &a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return fmt.Errorf("error reading 'defaultConfiguredSnssaiInd': %w", err)
		}
		delete(object, "defaultConfiguredSnssaiInd")
	}

	if raw, found := object["mappingOfNssai"]; found {
		err = json.Unmarshal(raw, &a.MappingOfNssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappingOfNssai': %w", err)
		}
		delete(object, "mappingOfNssai")
	}

	if raw, found := object["requestMapping"]; found {
		err = json.Unmarshal(raw, &a.RequestMapping)
		if err != nil {
			return fmt.Errorf("error reading 'requestMapping': %w", err)
		}
		delete(object, "requestMapping")
	}

	if raw, found := object["requestedNssai"]; found {
		err = json.Unmarshal(raw, &a.RequestedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'requestedNssai': %w", err)
		}
		delete(object, "requestedNssai")
	}

	if raw, found := object["sNssaiForMapping"]; found {
		err = json.Unmarshal(raw, &a.SNssaiForMapping)
		if err != nil {
			return fmt.Errorf("error reading 'sNssaiForMapping': %w", err)
		}
		delete(object, "sNssaiForMapping")
	}

	if raw, found := object["subscribedNssai"]; found {
		err = json.Unmarshal(raw, &a.SubscribedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedNssai': %w", err)
		}
		delete(object, "subscribedNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SliceInfoForRegistration to handle AdditionalProperties
func (a SliceInfoForRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedNssaiCurrentAccess != nil {
		object["allowedNssaiCurrentAccess"], err = json.Marshal(a.AllowedNssaiCurrentAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiCurrentAccess': %w", err)
		}
	}

	if a.AllowedNssaiOtherAccess != nil {
		object["allowedNssaiOtherAccess"], err = json.Marshal(a.AllowedNssaiOtherAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiOtherAccess': %w", err)
		}
	}

	if a.DefaultConfiguredSnssaiInd != nil {
		object["defaultConfiguredSnssaiInd"], err = json.Marshal(a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultConfiguredSnssaiInd': %w", err)
		}
	}

	if len(a.MappingOfNssai) != 0 {
		object["mappingOfNssai"], err = json.Marshal(a.MappingOfNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingOfNssai': %w", err)
		}
	}

	if a.RequestMapping != nil {
		object["requestMapping"], err = json.Marshal(a.RequestMapping)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestMapping': %w", err)
		}
	}

	if len(a.RequestedNssai) != 0 {
		object["requestedNssai"], err = json.Marshal(a.RequestedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestedNssai': %w", err)
		}
	}

	if len(a.SNssaiForMapping) != 0 {
		object["sNssaiForMapping"], err = json.Marshal(a.SNssaiForMapping)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssaiForMapping': %w", err)
		}
	}

	if len(a.SubscribedNssai) != 0 {
		object["subscribedNssai"], err = json.Marshal(a.SubscribedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SliceInfoForUEConfigurationUpdate. Returns the specified
// element and whether it was found
func (a SliceInfoForUEConfigurationUpdate) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SliceInfoForUEConfigurationUpdate
func (a *SliceInfoForUEConfigurationUpdate) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SliceInfoForUEConfigurationUpdate to handle AdditionalProperties
func (a *SliceInfoForUEConfigurationUpdate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNssaiCurrentAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiCurrentAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiCurrentAccess': %w", err)
		}
		delete(object, "allowedNssaiCurrentAccess")
	}

	if raw, found := object["allowedNssaiOtherAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiOtherAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiOtherAccess': %w", err)
		}
		delete(object, "allowedNssaiOtherAccess")
	}

	if raw, found := object["defaultConfiguredSnssaiInd"]; found {
		err = json.Unmarshal(raw, &a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return fmt.Errorf("error reading 'defaultConfiguredSnssaiInd': %w", err)
		}
		delete(object, "defaultConfiguredSnssaiInd")
	}

	if raw, found := object["mappingOfNssai"]; found {
		err = json.Unmarshal(raw, &a.MappingOfNssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappingOfNssai': %w", err)
		}
		delete(object, "mappingOfNssai")
	}

	if raw, found := object["requestedNssai"]; found {
		err = json.Unmarshal(raw, &a.RequestedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'requestedNssai': %w", err)
		}
		delete(object, "requestedNssai")
	}

	if raw, found := object["subscribedNssai"]; found {
		err = json.Unmarshal(raw, &a.SubscribedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedNssai': %w", err)
		}
		delete(object, "subscribedNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SliceInfoForUEConfigurationUpdate to handle AdditionalProperties
func (a SliceInfoForUEConfigurationUpdate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedNssaiCurrentAccess != nil {
		object["allowedNssaiCurrentAccess"], err = json.Marshal(a.AllowedNssaiCurrentAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiCurrentAccess': %w", err)
		}
	}

	if a.AllowedNssaiOtherAccess != nil {
		object["allowedNssaiOtherAccess"], err = json.Marshal(a.AllowedNssaiOtherAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiOtherAccess': %w", err)
		}
	}

	if a.DefaultConfiguredSnssaiInd != nil {
		object["defaultConfiguredSnssaiInd"], err = json.Marshal(a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultConfiguredSnssaiInd': %w", err)
		}
	}

	if len(a.MappingOfNssai) != 0 {
		object["mappingOfNssai"], err = json.Marshal(a.MappingOfNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingOfNssai': %w", err)
		}
	}

	if len(a.RequestedNssai) != 0 {
		object["requestedNssai"], err = json.Marshal(a.RequestedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestedNssai': %w", err)
		}
	}

	if len(a.SubscribedNssai) != 0 {
		object["subscribedNssai"], err = json.Marshal(a.SubscribedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContext. Returns the specified
// element and whether it was found
func (a SmContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContext
func (a *SmContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContext to handle AdditionalProperties
func (a *SmContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addRanTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AddRanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addRanTunnelInfo': %w", err)
		}
		delete(object, "addRanTunnelInfo")
	}

	if raw, found := object["addRedRanTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AddRedRanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addRedRanTunnelInfo': %w", err)
		}
		delete(object, "addRedRanTunnelInfo")
	}

	if raw, found := object["alwaysOnGranted"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnGranted)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnGranted': %w", err)
		}
		delete(object, "alwaysOnGranted")
	}

	if raw, found := object["chargingId"]; found {
		err = json.Unmarshal(raw, &a.ChargingId)
		if err != nil {
			return fmt.Errorf("error reading 'chargingId': %w", err)
		}
		delete(object, "chargingId")
	}

	if raw, found := object["chargingInfo"]; found {
		err = json.Unmarshal(raw, &a.ChargingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chargingInfo': %w", err)
		}
		delete(object, "chargingInfo")
	}

	if raw, found := object["dlsetSupportInd"]; found {
		err = json.Unmarshal(raw, &a.DlsetSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'dlsetSupportInd': %w", err)
		}
		delete(object, "dlsetSupportInd")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["enablePauseCharging"]; found {
		err = json.Unmarshal(raw, &a.EnablePauseCharging)
		if err != nil {
			return fmt.Errorf("error reading 'enablePauseCharging': %w", err)
		}
		delete(object, "enablePauseCharging")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["forwardingInd"]; found {
		err = json.Unmarshal(raw, &a.ForwardingInd)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingInd': %w", err)
		}
		delete(object, "forwardingInd")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hSmfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfInstanceId': %w", err)
		}
		delete(object, "hSmfInstanceId")
	}

	if raw, found := object["hSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfServiceInstanceId': %w", err)
		}
		delete(object, "hSmfServiceInstanceId")
	}

	if raw, found := object["hSmfUri"]; found {
		err = json.Unmarshal(raw, &a.HSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfUri': %w", err)
		}
		delete(object, "hSmfUri")
	}

	if raw, found := object["hplmnSnssai"]; found {
		err = json.Unmarshal(raw, &a.HplmnSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'hplmnSnssai': %w", err)
		}
		delete(object, "hplmnSnssai")
	}

	if raw, found := object["ipv6Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Index': %w", err)
		}
		delete(object, "ipv6Index")
	}

	if raw, found := object["maxIntegrityProtectedDataRate"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRate': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRate")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["nefExtBufSupportInd"]; found {
		err = json.Unmarshal(raw, &a.NefExtBufSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'nefExtBufSupportInd': %w", err)
		}
		delete(object, "nefExtBufSupportInd")
	}

	if raw, found := object["pcfGroupId"]; found {
		err = json.Unmarshal(raw, &a.PcfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfGroupId': %w", err)
		}
		delete(object, "pcfGroupId")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionRef"]; found {
		err = json.Unmarshal(raw, &a.PduSessionRef)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionRef': %w", err)
		}
		delete(object, "pduSessionRef")
	}

	if raw, found := object["pduSessionSmfBinding"]; found {
		err = json.Unmarshal(raw, &a.PduSessionSmfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionSmfBinding': %w", err)
		}
		delete(object, "pduSessionSmfBinding")
	}

	if raw, found := object["pduSessionSmfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionSmfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionSmfServiceSetId': %w", err)
		}
		delete(object, "pduSessionSmfServiceSetId")
	}

	if raw, found := object["pduSessionSmfSetId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionSmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionSmfSetId': %w", err)
		}
		delete(object, "pduSessionSmfSetId")
	}

	if raw, found := object["pduSessionType"]; found {
		err = json.Unmarshal(raw, &a.PduSessionType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionType': %w", err)
		}
		delete(object, "pduSessionType")
	}

	if raw, found := object["psaTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.PsaTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'psaTunnelInfo': %w", err)
		}
		delete(object, "psaTunnelInfo")
	}

	if raw, found := object["qosFlowsList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsList': %w", err)
		}
		delete(object, "qosFlowsList")
	}

	if raw, found := object["ranTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.RanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ranTunnelInfo': %w", err)
		}
		delete(object, "ranTunnelInfo")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["redRanTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.RedRanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'redRanTunnelInfo': %w", err)
		}
		delete(object, "redRanTunnelInfo")
	}

	if raw, found := object["redundantPduSessionInfo"]; found {
		err = json.Unmarshal(raw, &a.RedundantPduSessionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'redundantPduSessionInfo': %w", err)
		}
		delete(object, "redundantPduSessionInfo")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["selMode"]; found {
		err = json.Unmarshal(raw, &a.SelMode)
		if err != nil {
			return fmt.Errorf("error reading 'selMode': %w", err)
		}
		delete(object, "selMode")
	}

	if raw, found := object["selectedDnn"]; found {
		err = json.Unmarshal(raw, &a.SelectedDnn)
		if err != nil {
			return fmt.Errorf("error reading 'selectedDnn': %w", err)
		}
		delete(object, "selectedDnn")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["smfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfServiceInstanceId': %w", err)
		}
		delete(object, "smfServiceInstanceId")
	}

	if raw, found := object["smfUri"]; found {
		err = json.Unmarshal(raw, &a.SmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'smfUri': %w", err)
		}
		delete(object, "smfUri")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if raw, found := object["ueIpv4Address"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4Address': %w", err)
		}
		delete(object, "ueIpv4Address")
	}

	if raw, found := object["ueIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Prefix': %w", err)
		}
		delete(object, "ueIpv6Prefix")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContext to handle AdditionalProperties
func (a SmContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddRanTunnelInfo) != 0 {
		object["addRanTunnelInfo"], err = json.Marshal(a.AddRanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addRanTunnelInfo': %w", err)
		}
	}

	if len(a.AddRedRanTunnelInfo) != 0 {
		object["addRedRanTunnelInfo"], err = json.Marshal(a.AddRedRanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addRedRanTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnGranted != nil {
		object["alwaysOnGranted"], err = json.Marshal(a.AlwaysOnGranted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnGranted': %w", err)
		}
	}

	if len(a.ChargingId) != 0 {
		object["chargingId"], err = json.Marshal(a.ChargingId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingId': %w", err)
		}
	}

	if a.ChargingInfo != nil {
		object["chargingInfo"], err = json.Marshal(a.ChargingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingInfo': %w", err)
		}
	}

	if a.DlsetSupportInd != nil {
		object["dlsetSupportInd"], err = json.Marshal(a.DlsetSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlsetSupportInd': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.EnablePauseCharging != nil {
		object["enablePauseCharging"], err = json.Marshal(a.EnablePauseCharging)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enablePauseCharging': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.ForwardingInd != nil {
		object["forwardingInd"], err = json.Marshal(a.ForwardingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingInd': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HSmfInstanceId != nil {
		object["hSmfInstanceId"], err = json.Marshal(a.HSmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfInstanceId': %w", err)
		}
	}

	if a.HSmfServiceInstanceId != nil {
		object["hSmfServiceInstanceId"], err = json.Marshal(a.HSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfServiceInstanceId': %w", err)
		}
	}

	if a.HSmfUri != nil {
		object["hSmfUri"], err = json.Marshal(a.HSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfUri': %w", err)
		}
	}

	if a.HplmnSnssai != nil {
		object["hplmnSnssai"], err = json.Marshal(a.HplmnSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hplmnSnssai': %w", err)
		}
	}

	if a.Ipv6Index != nil {
		object["ipv6Index"], err = json.Marshal(a.Ipv6Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Index': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRate != nil {
		object["maxIntegrityProtectedDataRate"], err = json.Marshal(a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRate': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.NefExtBufSupportInd != nil {
		object["nefExtBufSupportInd"], err = json.Marshal(a.NefExtBufSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefExtBufSupportInd': %w", err)
		}
	}

	if a.PcfGroupId != nil {
		object["pcfGroupId"], err = json.Marshal(a.PcfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfGroupId': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	if a.PduSessionRef != nil {
		object["pduSessionRef"], err = json.Marshal(a.PduSessionRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionRef': %w", err)
		}
	}

	if a.PduSessionSmfBinding != nil {
		object["pduSessionSmfBinding"], err = json.Marshal(a.PduSessionSmfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionSmfBinding': %w", err)
		}
	}

	if a.PduSessionSmfServiceSetId != nil {
		object["pduSessionSmfServiceSetId"], err = json.Marshal(a.PduSessionSmfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionSmfServiceSetId': %w", err)
		}
	}

	if a.PduSessionSmfSetId != nil {
		object["pduSessionSmfSetId"], err = json.Marshal(a.PduSessionSmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionSmfSetId': %w", err)
		}
	}

	object["pduSessionType"], err = json.Marshal(a.PduSessionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionType': %w", err)
	}

	if a.PsaTunnelInfo != nil {
		object["psaTunnelInfo"], err = json.Marshal(a.PsaTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaTunnelInfo': %w", err)
		}
	}

	object["qosFlowsList"], err = json.Marshal(a.QosFlowsList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosFlowsList': %w", err)
	}

	if a.RanTunnelInfo != nil {
		object["ranTunnelInfo"], err = json.Marshal(a.RanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranTunnelInfo': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.RedRanTunnelInfo != nil {
		object["redRanTunnelInfo"], err = json.Marshal(a.RedRanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redRanTunnelInfo': %w", err)
		}
	}

	if a.RedundantPduSessionInfo != nil {
		object["redundantPduSessionInfo"], err = json.Marshal(a.RedundantPduSessionInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantPduSessionInfo': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.RoutingIndicator != nil {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	if a.SelMode != nil {
		object["selMode"], err = json.Marshal(a.SelMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selMode': %w", err)
		}
	}

	if a.SelectedDnn != nil {
		object["selectedDnn"], err = json.Marshal(a.SelectedDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedDnn': %w", err)
		}
	}

	object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
	}

	if a.SmfInstanceId != nil {
		object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
		}
	}

	if a.SmfServiceInstanceId != nil {
		object["smfServiceInstanceId"], err = json.Marshal(a.SmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServiceInstanceId': %w", err)
		}
	}

	if a.SmfUri != nil {
		object["smfUri"], err = json.Marshal(a.SmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfUri': %w", err)
		}
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	if len(a.UeIpv4Address) != 0 {
		object["ueIpv4Address"], err = json.Marshal(a.UeIpv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4Address': %w", err)
		}
	}

	if a.UeIpv6Prefix != nil {
		object["ueIpv6Prefix"], err = json.Marshal(a.UeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Prefix': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextCreateData. Returns the specified
// element and whether it was found
func (a SmContextCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextCreateData
func (a *SmContextCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextCreateData to handle AdditionalProperties
func (a *SmContextCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["additionalHsmfId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalHsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalHsmfId': %w", err)
		}
		delete(object, "additionalHsmfId")
	}

	if raw, found := object["additionalHsmfUri"]; found {
		err = json.Unmarshal(raw, &a.AdditionalHsmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'additionalHsmfUri': %w", err)
		}
		delete(object, "additionalHsmfUri")
	}

	if raw, found := object["additionalSmfId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSmfId': %w", err)
		}
		delete(object, "additionalSmfId")
	}

	if raw, found := object["additionalSmfUri"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSmfUri': %w", err)
		}
		delete(object, "additionalSmfUri")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["cpCiotEnabled"]; found {
		err = json.Unmarshal(raw, &a.CpCiotEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'cpCiotEnabled': %w", err)
		}
		delete(object, "cpCiotEnabled")
	}

	if raw, found := object["cpOnlyInd"]; found {
		err = json.Unmarshal(raw, &a.CpOnlyInd)
		if err != nil {
			return fmt.Errorf("error reading 'cpOnlyInd': %w", err)
		}
		delete(object, "cpOnlyInd")
	}

	if raw, found := object["ddnFailureSubs"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubs)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubs': %w", err)
		}
		delete(object, "ddnFailureSubs")
	}

	if raw, found := object["directForwardingFlag"]; found {
		err = json.Unmarshal(raw, &a.DirectForwardingFlag)
		if err != nil {
			return fmt.Errorf("error reading 'directForwardingFlag': %w", err)
		}
		delete(object, "directForwardingFlag")
	}

	if raw, found := object["dlDataWaitingInd"]; found {
		err = json.Unmarshal(raw, &a.DlDataWaitingInd)
		if err != nil {
			return fmt.Errorf("error reading 'dlDataWaitingInd': %w", err)
		}
		delete(object, "dlDataWaitingInd")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["epsBearerCtxStatus"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerCtxStatus)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerCtxStatus': %w", err)
		}
		delete(object, "epsBearerCtxStatus")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["extendedNasSmTimerInd"]; found {
		err = json.Unmarshal(raw, &a.ExtendedNasSmTimerInd)
		if err != nil {
			return fmt.Errorf("error reading 'extendedNasSmTimerInd': %w", err)
		}
		delete(object, "extendedNasSmTimerInd")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hSmfId"]; found {
		err = json.Unmarshal(raw, &a.HSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfId': %w", err)
		}
		delete(object, "hSmfId")
	}

	if raw, found := object["hSmfUri"]; found {
		err = json.Unmarshal(raw, &a.HSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfUri': %w", err)
		}
		delete(object, "hSmfUri")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["hplmnSnssai"]; found {
		err = json.Unmarshal(raw, &a.HplmnSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'hplmnSnssai': %w", err)
		}
		delete(object, "hplmnSnssai")
	}

	if raw, found := object["indirectForwardingFlag"]; found {
		err = json.Unmarshal(raw, &a.IndirectForwardingFlag)
		if err != nil {
			return fmt.Errorf("error reading 'indirectForwardingFlag': %w", err)
		}
		delete(object, "indirectForwardingFlag")
	}

	if raw, found := object["invokeNef"]; found {
		err = json.Unmarshal(raw, &a.InvokeNef)
		if err != nil {
			return fmt.Errorf("error reading 'invokeNef': %w", err)
		}
		delete(object, "invokeNef")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoExt1': %w", err)
		}
		delete(object, "n2SmInfoExt1")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["n2SmInfoTypeExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoTypeExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoTypeExt1': %w", err)
		}
		delete(object, "n2SmInfoTypeExt1")
	}

	if raw, found := object["nrfUri"]; found {
		err = json.Unmarshal(raw, &a.NrfUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfUri': %w", err)
		}
		delete(object, "nrfUri")
	}

	if raw, found := object["oldPduSessionId"]; found {
		err = json.Unmarshal(raw, &a.OldPduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'oldPduSessionId': %w", err)
		}
		delete(object, "oldPduSessionId")
	}

	if raw, found := object["oldSmContextRef"]; found {
		err = json.Unmarshal(raw, &a.OldSmContextRef)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmContextRef': %w", err)
		}
		delete(object, "oldSmContextRef")
	}

	if raw, found := object["oldSmfId"]; found {
		err = json.Unmarshal(raw, &a.OldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmfId': %w", err)
		}
		delete(object, "oldSmfId")
	}

	if raw, found := object["pcfGroupId"]; found {
		err = json.Unmarshal(raw, &a.PcfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfGroupId': %w", err)
		}
		delete(object, "pcfGroupId")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionsActivateList"]; found {
		err = json.Unmarshal(raw, &a.PduSessionsActivateList)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionsActivateList': %w", err)
		}
		delete(object, "pduSessionsActivateList")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["ranUnchangedInd"]; found {
		err = json.Unmarshal(raw, &a.RanUnchangedInd)
		if err != nil {
			return fmt.Errorf("error reading 'ranUnchangedInd': %w", err)
		}
		delete(object, "ranUnchangedInd")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["requestType"]; found {
		err = json.Unmarshal(raw, &a.RequestType)
		if err != nil {
			return fmt.Errorf("error reading 'requestType': %w", err)
		}
		delete(object, "requestType")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["selMode"]; found {
		err = json.Unmarshal(raw, &a.SelMode)
		if err != nil {
			return fmt.Errorf("error reading 'selMode': %w", err)
		}
		delete(object, "selMode")
	}

	if raw, found := object["selectedDnn"]; found {
		err = json.Unmarshal(raw, &a.SelectedDnn)
		if err != nil {
			return fmt.Errorf("error reading 'selectedDnn': %w", err)
		}
		delete(object, "selectedDnn")
	}

	if raw, found := object["serviceName"]; found {
		err = json.Unmarshal(raw, &a.ServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'serviceName': %w", err)
		}
		delete(object, "serviceName")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["servingNfId"]; found {
		err = json.Unmarshal(raw, &a.ServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNfId': %w", err)
		}
		delete(object, "servingNfId")
	}

	if raw, found := object["smContextRef"]; found {
		err = json.Unmarshal(raw, &a.SmContextRef)
		if err != nil {
			return fmt.Errorf("error reading 'smContextRef': %w", err)
		}
		delete(object, "smContextRef")
	}

	if raw, found := object["smContextSmfBinding"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfBinding': %w", err)
		}
		delete(object, "smContextSmfBinding")
	}

	if raw, found := object["smContextSmfId"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfId': %w", err)
		}
		delete(object, "smContextSmfId")
	}

	if raw, found := object["smContextSmfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfServiceSetId': %w", err)
		}
		delete(object, "smContextSmfServiceSetId")
	}

	if raw, found := object["smContextSmfSetId"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfSetId': %w", err)
		}
		delete(object, "smContextSmfSetId")
	}

	if raw, found := object["smContextStatusUri"]; found {
		err = json.Unmarshal(raw, &a.SmContextStatusUri)
		if err != nil {
			return fmt.Errorf("error reading 'smContextStatusUri': %w", err)
		}
		delete(object, "smContextStatusUri")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["smfId"]; found {
		err = json.Unmarshal(raw, &a.SmfId)
		if err != nil {
			return fmt.Errorf("error reading 'smfId': %w", err)
		}
		delete(object, "smfId")
	}

	if raw, found := object["smfTransferInd"]; found {
		err = json.Unmarshal(raw, &a.SmfTransferInd)
		if err != nil {
			return fmt.Errorf("error reading 'smfTransferInd': %w", err)
		}
		delete(object, "smfTransferInd")
	}

	if raw, found := object["smfUri"]; found {
		err = json.Unmarshal(raw, &a.SmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'smfUri': %w", err)
		}
		delete(object, "smfUri")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetId"]; found {
		err = json.Unmarshal(raw, &a.TargetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetId': %w", err)
		}
		delete(object, "targetId")
	}

	if raw, found := object["tngfInfo"]; found {
		err = json.Unmarshal(raw, &a.TngfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tngfInfo': %w", err)
		}
		delete(object, "tngfInfo")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["twifInfo"]; found {
		err = json.Unmarshal(raw, &a.TwifInfo)
		if err != nil {
			return fmt.Errorf("error reading 'twifInfo': %w", err)
		}
		delete(object, "twifInfo")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if raw, found := object["ueEpsPdnConnection"]; found {
		err = json.Unmarshal(raw, &a.UeEpsPdnConnection)
		if err != nil {
			return fmt.Errorf("error reading 'ueEpsPdnConnection': %w", err)
		}
		delete(object, "ueEpsPdnConnection")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["unauthenticatedSupi"]; found {
		err = json.Unmarshal(raw, &a.UnauthenticatedSupi)
		if err != nil {
			return fmt.Errorf("error reading 'unauthenticatedSupi': %w", err)
		}
		delete(object, "unauthenticatedSupi")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if raw, found := object["wAgfInfo"]; found {
		err = json.Unmarshal(raw, &a.WAgfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'wAgfInfo': %w", err)
		}
		delete(object, "wAgfInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextCreateData to handle AdditionalProperties
func (a SmContextCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if len(a.AdditionalHsmfId) != 0 {
		object["additionalHsmfId"], err = json.Marshal(a.AdditionalHsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalHsmfId': %w", err)
		}
	}

	if len(a.AdditionalHsmfUri) != 0 {
		object["additionalHsmfUri"], err = json.Marshal(a.AdditionalHsmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalHsmfUri': %w", err)
		}
	}

	if len(a.AdditionalSmfId) != 0 {
		object["additionalSmfId"], err = json.Marshal(a.AdditionalSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSmfId': %w", err)
		}
	}

	if len(a.AdditionalSmfUri) != 0 {
		object["additionalSmfUri"], err = json.Marshal(a.AdditionalSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSmfUri': %w", err)
		}
	}

	object["anType"], err = json.Marshal(a.AnType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'anType': %w", err)
	}

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if len(a.BackupAmfInfo) != 0 {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.CpCiotEnabled != nil {
		object["cpCiotEnabled"], err = json.Marshal(a.CpCiotEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpCiotEnabled': %w", err)
		}
	}

	if a.CpOnlyInd != nil {
		object["cpOnlyInd"], err = json.Marshal(a.CpOnlyInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpOnlyInd': %w", err)
		}
	}

	if a.DdnFailureSubs != nil {
		object["ddnFailureSubs"], err = json.Marshal(a.DdnFailureSubs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubs': %w", err)
		}
	}

	if a.DirectForwardingFlag != nil {
		object["directForwardingFlag"], err = json.Marshal(a.DirectForwardingFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'directForwardingFlag': %w", err)
		}
	}

	if a.DlDataWaitingInd != nil {
		object["dlDataWaitingInd"], err = json.Marshal(a.DlDataWaitingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDataWaitingInd': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EpsBearerCtxStatus) != 0 {
		object["epsBearerCtxStatus"], err = json.Marshal(a.EpsBearerCtxStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerCtxStatus': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if a.ExtendedNasSmTimerInd != nil {
		object["extendedNasSmTimerInd"], err = json.Marshal(a.ExtendedNasSmTimerInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extendedNasSmTimerInd': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HSmfId != nil {
		object["hSmfId"], err = json.Marshal(a.HSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfId': %w", err)
		}
	}

	if a.HSmfUri != nil {
		object["hSmfUri"], err = json.Marshal(a.HSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfUri': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.HplmnSnssai != nil {
		object["hplmnSnssai"], err = json.Marshal(a.HplmnSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hplmnSnssai': %w", err)
		}
	}

	if a.IndirectForwardingFlag != nil {
		object["indirectForwardingFlag"], err = json.Marshal(a.IndirectForwardingFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'indirectForwardingFlag': %w", err)
		}
	}

	if a.InvokeNef != nil {
		object["invokeNef"], err = json.Marshal(a.InvokeNef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invokeNef': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoExt1 != nil {
		object["n2SmInfoExt1"], err = json.Marshal(a.N2SmInfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoExt1': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.N2SmInfoTypeExt1 != nil {
		object["n2SmInfoTypeExt1"], err = json.Marshal(a.N2SmInfoTypeExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoTypeExt1': %w", err)
		}
	}

	if a.NrfUri != nil {
		object["nrfUri"], err = json.Marshal(a.NrfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfUri': %w", err)
		}
	}

	if a.OldPduSessionId != nil {
		object["oldPduSessionId"], err = json.Marshal(a.OldPduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldPduSessionId': %w", err)
		}
	}

	if a.OldSmContextRef != nil {
		object["oldSmContextRef"], err = json.Marshal(a.OldSmContextRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmContextRef': %w", err)
		}
	}

	if a.OldSmfId != nil {
		object["oldSmfId"], err = json.Marshal(a.OldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmfId': %w", err)
		}
	}

	if a.PcfGroupId != nil {
		object["pcfGroupId"], err = json.Marshal(a.PcfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfGroupId': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if len(a.PduSessionsActivateList) != 0 {
		object["pduSessionsActivateList"], err = json.Marshal(a.PduSessionsActivateList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionsActivateList': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if a.RanUnchangedInd != nil {
		object["ranUnchangedInd"], err = json.Marshal(a.RanUnchangedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranUnchangedInd': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RequestType != nil {
		object["requestType"], err = json.Marshal(a.RequestType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestType': %w", err)
		}
	}

	if a.RoutingIndicator != nil {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.SelMode != nil {
		object["selMode"], err = json.Marshal(a.SelMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selMode': %w", err)
		}
	}

	if a.SelectedDnn != nil {
		object["selectedDnn"], err = json.Marshal(a.SelectedDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedDnn': %w", err)
		}
	}

	if a.ServiceName != nil {
		object["serviceName"], err = json.Marshal(a.ServiceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceName': %w", err)
		}
	}

	object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
	}

	object["servingNfId"], err = json.Marshal(a.ServingNfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNfId': %w", err)
	}

	if a.SmContextRef != nil {
		object["smContextRef"], err = json.Marshal(a.SmContextRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextRef': %w", err)
		}
	}

	if a.SmContextSmfBinding != nil {
		object["smContextSmfBinding"], err = json.Marshal(a.SmContextSmfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfBinding': %w", err)
		}
	}

	if a.SmContextSmfId != nil {
		object["smContextSmfId"], err = json.Marshal(a.SmContextSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfId': %w", err)
		}
	}

	if a.SmContextSmfServiceSetId != nil {
		object["smContextSmfServiceSetId"], err = json.Marshal(a.SmContextSmfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfServiceSetId': %w", err)
		}
	}

	if a.SmContextSmfSetId != nil {
		object["smContextSmfSetId"], err = json.Marshal(a.SmContextSmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfSetId': %w", err)
		}
	}

	object["smContextStatusUri"], err = json.Marshal(a.SmContextStatusUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smContextStatusUri': %w", err)
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	if a.SmfId != nil {
		object["smfId"], err = json.Marshal(a.SmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfId': %w", err)
		}
	}

	if a.SmfTransferInd != nil {
		object["smfTransferInd"], err = json.Marshal(a.SmfTransferInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfTransferInd': %w", err)
		}
	}

	if a.SmfUri != nil {
		object["smfUri"], err = json.Marshal(a.SmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfUri': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.TargetId != nil {
		object["targetId"], err = json.Marshal(a.TargetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetId': %w", err)
		}
	}

	if a.TngfInfo != nil {
		object["tngfInfo"], err = json.Marshal(a.TngfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tngfInfo': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.TwifInfo != nil {
		object["twifInfo"], err = json.Marshal(a.TwifInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'twifInfo': %w", err)
		}
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	if a.UeEpsPdnConnection != nil {
		object["ueEpsPdnConnection"], err = json.Marshal(a.UeEpsPdnConnection)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueEpsPdnConnection': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UnauthenticatedSupi != nil {
		object["unauthenticatedSupi"], err = json.Marshal(a.UnauthenticatedSupi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unauthenticatedSupi': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	if a.WAgfInfo != nil {
		object["wAgfInfo"], err = json.Marshal(a.WAgfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wAgfInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextCreateError. Returns the specified
// element and whether it was found
func (a SmContextCreateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextCreateError
func (a *SmContextCreateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextCreateError to handle AdditionalProperties
func (a *SmContextCreateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextCreateError to handle AdditionalProperties
func (a SmContextCreateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextCreatedData. Returns the specified
// element and whether it was found
func (a SmContextCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextCreatedData
func (a *SmContextCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextCreatedData to handle AdditionalProperties
func (a *SmContextCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allocatedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AllocatedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'allocatedEbiList': %w", err)
		}
		delete(object, "allocatedEbiList")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hSmfUri"]; found {
		err = json.Unmarshal(raw, &a.HSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfUri': %w", err)
		}
		delete(object, "hSmfUri")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["selectedOldSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedOldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedOldSmfId': %w", err)
		}
		delete(object, "selectedOldSmfId")
	}

	if raw, found := object["selectedSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedSmfId': %w", err)
		}
		delete(object, "selectedSmfId")
	}

	if raw, found := object["smfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfServiceInstanceId': %w", err)
		}
		delete(object, "smfServiceInstanceId")
	}

	if raw, found := object["smfUri"]; found {
		err = json.Unmarshal(raw, &a.SmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'smfUri': %w", err)
		}
		delete(object, "smfUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextCreatedData to handle AdditionalProperties
func (a SmContextCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllocatedEbiList) != 0 {
		object["allocatedEbiList"], err = json.Marshal(a.AllocatedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allocatedEbiList': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HSmfUri != nil {
		object["hSmfUri"], err = json.Marshal(a.HSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfUri': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.SelectedOldSmfId != nil {
		object["selectedOldSmfId"], err = json.Marshal(a.SelectedOldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedOldSmfId': %w", err)
		}
	}

	if a.SelectedSmfId != nil {
		object["selectedSmfId"], err = json.Marshal(a.SelectedSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedSmfId': %w", err)
		}
	}

	if a.SmfServiceInstanceId != nil {
		object["smfServiceInstanceId"], err = json.Marshal(a.SmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServiceInstanceId': %w", err)
		}
	}

	if a.SmfUri != nil {
		object["smfUri"], err = json.Marshal(a.SmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfUri': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextReleaseData. Returns the specified
// element and whether it was found
func (a SmContextReleaseData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextReleaseData
func (a *SmContextReleaseData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextReleaseData to handle AdditionalProperties
func (a *SmContextReleaseData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["ismfReleaseOnly"]; found {
		err = json.Unmarshal(raw, &a.IsmfReleaseOnly)
		if err != nil {
			return fmt.Errorf("error reading 'ismfReleaseOnly': %w", err)
		}
		delete(object, "ismfReleaseOnly")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["vsmfReleaseOnly"]; found {
		err = json.Unmarshal(raw, &a.VsmfReleaseOnly)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfReleaseOnly': %w", err)
		}
		delete(object, "vsmfReleaseOnly")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextReleaseData to handle AdditionalProperties
func (a SmContextReleaseData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.IsmfReleaseOnly != nil {
		object["ismfReleaseOnly"], err = json.Marshal(a.IsmfReleaseOnly)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfReleaseOnly': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.VsmfReleaseOnly != nil {
		object["vsmfReleaseOnly"], err = json.Marshal(a.VsmfReleaseOnly)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfReleaseOnly': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextReleasedData. Returns the specified
// element and whether it was found
func (a SmContextReleasedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextReleasedData
func (a *SmContextReleasedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextReleasedData to handle AdditionalProperties
func (a *SmContextReleasedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextReleasedData to handle AdditionalProperties
func (a SmContextReleasedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextRetrieveData. Returns the specified
// element and whether it was found
func (a SmContextRetrieveData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextRetrieveData
func (a *SmContextRetrieveData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextRetrieveData to handle AdditionalProperties
func (a *SmContextRetrieveData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notToTransferEbiList"]; found {
		err = json.Unmarshal(raw, &a.NotToTransferEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'notToTransferEbiList': %w", err)
		}
		delete(object, "notToTransferEbiList")
	}

	if raw, found := object["ranUnchangedInd"]; found {
		err = json.Unmarshal(raw, &a.RanUnchangedInd)
		if err != nil {
			return fmt.Errorf("error reading 'ranUnchangedInd': %w", err)
		}
		delete(object, "ranUnchangedInd")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["smContextType"]; found {
		err = json.Unmarshal(raw, &a.SmContextType)
		if err != nil {
			return fmt.Errorf("error reading 'smContextType': %w", err)
		}
		delete(object, "smContextType")
	}

	if raw, found := object["targetMmeCap"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeCap)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeCap': %w", err)
		}
		delete(object, "targetMmeCap")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextRetrieveData to handle AdditionalProperties
func (a SmContextRetrieveData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.NotToTransferEbiList) != 0 {
		object["notToTransferEbiList"], err = json.Marshal(a.NotToTransferEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notToTransferEbiList': %w", err)
		}
	}

	if a.RanUnchangedInd != nil {
		object["ranUnchangedInd"], err = json.Marshal(a.RanUnchangedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranUnchangedInd': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.SmContextType != nil {
		object["smContextType"], err = json.Marshal(a.SmContextType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextType': %w", err)
		}
	}

	if a.TargetMmeCap != nil {
		object["targetMmeCap"], err = json.Marshal(a.TargetMmeCap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeCap': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextRetrievedData. Returns the specified
// element and whether it was found
func (a SmContextRetrievedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextRetrievedData
func (a *SmContextRetrievedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextRetrievedData to handle AdditionalProperties
func (a *SmContextRetrievedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["dlDataWaitingInd"]; found {
		err = json.Unmarshal(raw, &a.DlDataWaitingInd)
		if err != nil {
			return fmt.Errorf("error reading 'dlDataWaitingInd': %w", err)
		}
		delete(object, "dlDataWaitingInd")
	}

	if raw, found := object["smContext"]; found {
		err = json.Unmarshal(raw, &a.SmContext)
		if err != nil {
			return fmt.Errorf("error reading 'smContext': %w", err)
		}
		delete(object, "smContext")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["ueEpsPdnConnection"]; found {
		err = json.Unmarshal(raw, &a.UeEpsPdnConnection)
		if err != nil {
			return fmt.Errorf("error reading 'ueEpsPdnConnection': %w", err)
		}
		delete(object, "ueEpsPdnConnection")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextRetrievedData to handle AdditionalProperties
func (a SmContextRetrievedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.DlDataWaitingInd != nil {
		object["dlDataWaitingInd"], err = json.Marshal(a.DlDataWaitingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDataWaitingInd': %w", err)
		}
	}

	if a.SmContext != nil {
		object["smContext"], err = json.Marshal(a.SmContext)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContext': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	object["ueEpsPdnConnection"], err = json.Marshal(a.UeEpsPdnConnection)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueEpsPdnConnection': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextStatusNotification. Returns the specified
// element and whether it was found
func (a SmContextStatusNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextStatusNotification
func (a *SmContextStatusNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextStatusNotification to handle AdditionalProperties
func (a *SmContextStatusNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altAnchorSmfId"]; found {
		err = json.Unmarshal(raw, &a.AltAnchorSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'altAnchorSmfId': %w", err)
		}
		delete(object, "altAnchorSmfId")
	}

	if raw, found := object["altAnchorSmfUri"]; found {
		err = json.Unmarshal(raw, &a.AltAnchorSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'altAnchorSmfUri': %w", err)
		}
		delete(object, "altAnchorSmfUri")
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["ddnFailureStatus"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureStatus': %w", err)
		}
		delete(object, "ddnFailureStatus")
	}

	if raw, found := object["newIntermediateSmfId"]; found {
		err = json.Unmarshal(raw, &a.NewIntermediateSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'newIntermediateSmfId': %w", err)
		}
		delete(object, "newIntermediateSmfId")
	}

	if raw, found := object["newSmfId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfId': %w", err)
		}
		delete(object, "newSmfId")
	}

	if raw, found := object["newSmfSetId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfSetId': %w", err)
		}
		delete(object, "newSmfSetId")
	}

	if raw, found := object["notifyCorrelationIdsForddnFailure"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationIdsForddnFailure)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationIdsForddnFailure': %w", err)
		}
		delete(object, "notifyCorrelationIdsForddnFailure")
	}

	if raw, found := object["oldSmContextRef"]; found {
		err = json.Unmarshal(raw, &a.OldSmContextRef)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmContextRef': %w", err)
		}
		delete(object, "oldSmContextRef")
	}

	if raw, found := object["oldSmfId"]; found {
		err = json.Unmarshal(raw, &a.OldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmfId': %w", err)
		}
		delete(object, "oldSmfId")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["statusInfo"]; found {
		err = json.Unmarshal(raw, &a.StatusInfo)
		if err != nil {
			return fmt.Errorf("error reading 'statusInfo': %w", err)
		}
		delete(object, "statusInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextStatusNotification to handle AdditionalProperties
func (a SmContextStatusNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltAnchorSmfId != nil {
		object["altAnchorSmfId"], err = json.Marshal(a.AltAnchorSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altAnchorSmfId': %w", err)
		}
	}

	if a.AltAnchorSmfUri != nil {
		object["altAnchorSmfUri"], err = json.Marshal(a.AltAnchorSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altAnchorSmfUri': %w", err)
		}
	}

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.DdnFailureStatus != nil {
		object["ddnFailureStatus"], err = json.Marshal(a.DdnFailureStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureStatus': %w", err)
		}
	}

	if a.NewIntermediateSmfId != nil {
		object["newIntermediateSmfId"], err = json.Marshal(a.NewIntermediateSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newIntermediateSmfId': %w", err)
		}
	}

	if a.NewSmfId != nil {
		object["newSmfId"], err = json.Marshal(a.NewSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfId': %w", err)
		}
	}

	if a.NewSmfSetId != nil {
		object["newSmfSetId"], err = json.Marshal(a.NewSmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfSetId': %w", err)
		}
	}

	if len(a.NotifyCorrelationIdsForddnFailure) != 0 {
		object["notifyCorrelationIdsForddnFailure"], err = json.Marshal(a.NotifyCorrelationIdsForddnFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorrelationIdsForddnFailure': %w", err)
		}
	}

	if a.OldSmContextRef != nil {
		object["oldSmContextRef"], err = json.Marshal(a.OldSmContextRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmContextRef': %w", err)
		}
	}

	if a.OldSmfId != nil {
		object["oldSmfId"], err = json.Marshal(a.OldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmfId': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	object["statusInfo"], err = json.Marshal(a.StatusInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'statusInfo': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextUpdateData. Returns the specified
// element and whether it was found
func (a SmContextUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextUpdateData
func (a *SmContextUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextUpdateData to handle AdditionalProperties
func (a *SmContextUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["anTypeCanBeChanged"]; found {
		err = json.Unmarshal(raw, &a.AnTypeCanBeChanged)
		if err != nil {
			return fmt.Errorf("error reading 'anTypeCanBeChanged': %w", err)
		}
		delete(object, "anTypeCanBeChanged")
	}

	if raw, found := object["anTypeToReactivate"]; found {
		err = json.Unmarshal(raw, &a.AnTypeToReactivate)
		if err != nil {
			return fmt.Errorf("error reading 'anTypeToReactivate': %w", err)
		}
		delete(object, "anTypeToReactivate")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dataForwarding"]; found {
		err = json.Unmarshal(raw, &a.DataForwarding)
		if err != nil {
			return fmt.Errorf("error reading 'dataForwarding': %w", err)
		}
		delete(object, "dataForwarding")
	}

	if raw, found := object["ddnFailureSubs"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubs)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubs': %w", err)
		}
		delete(object, "ddnFailureSubs")
	}

	if raw, found := object["epsBearerSetup"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerSetup)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerSetup': %w", err)
		}
		delete(object, "epsBearerSetup")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["exemptionInd"]; found {
		err = json.Unmarshal(raw, &a.ExemptionInd)
		if err != nil {
			return fmt.Errorf("error reading 'exemptionInd': %w", err)
		}
		delete(object, "exemptionInd")
	}

	if raw, found := object["extendedNasSmTimerInd"]; found {
		err = json.Unmarshal(raw, &a.ExtendedNasSmTimerInd)
		if err != nil {
			return fmt.Errorf("error reading 'extendedNasSmTimerInd': %w", err)
		}
		delete(object, "extendedNasSmTimerInd")
	}

	if raw, found := object["failedToBeSwitched"]; found {
		err = json.Unmarshal(raw, &a.FailedToBeSwitched)
		if err != nil {
			return fmt.Errorf("error reading 'failedToBeSwitched': %w", err)
		}
		delete(object, "failedToBeSwitched")
	}

	if raw, found := object["forwardingBearerContexts"]; found {
		err = json.Unmarshal(raw, &a.ForwardingBearerContexts)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingBearerContexts': %w", err)
		}
		delete(object, "forwardingBearerContexts")
	}

	if raw, found := object["forwardingFTeid"]; found {
		err = json.Unmarshal(raw, &a.ForwardingFTeid)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingFTeid': %w", err)
		}
		delete(object, "forwardingFTeid")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maReleaseInd"]; found {
		err = json.Unmarshal(raw, &a.MaReleaseInd)
		if err != nil {
			return fmt.Errorf("error reading 'maReleaseInd': %w", err)
		}
		delete(object, "maReleaseInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoExt1': %w", err)
		}
		delete(object, "n2SmInfoExt1")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["n2SmInfoTypeExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoTypeExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoTypeExt1': %w", err)
		}
		delete(object, "n2SmInfoTypeExt1")
	}

	if raw, found := object["n9DlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N9DlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n9DlForwardingTnlList': %w", err)
		}
		delete(object, "n9DlForwardingTnlList")
	}

	if raw, found := object["n9ForwardingTunnel"]; found {
		err = json.Unmarshal(raw, &a.N9ForwardingTunnel)
		if err != nil {
			return fmt.Errorf("error reading 'n9ForwardingTunnel': %w", err)
		}
		delete(object, "n9ForwardingTunnel")
	}

	if raw, found := object["n9UlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N9UlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n9UlForwardingTnlList': %w", err)
		}
		delete(object, "n9UlForwardingTnlList")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["release"]; found {
		err = json.Unmarshal(raw, &a.Release)
		if err != nil {
			return fmt.Errorf("error reading 'release': %w", err)
		}
		delete(object, "release")
	}

	if raw, found := object["revokeEbiList"]; found {
		err = json.Unmarshal(raw, &a.RevokeEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'revokeEbiList': %w", err)
		}
		delete(object, "revokeEbiList")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["servingNfId"]; found {
		err = json.Unmarshal(raw, &a.ServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNfId': %w", err)
		}
		delete(object, "servingNfId")
	}

	if raw, found := object["skipN2PduSessionResRelInd"]; found {
		err = json.Unmarshal(raw, &a.SkipN2PduSessionResRelInd)
		if err != nil {
			return fmt.Errorf("error reading 'skipN2PduSessionResRelInd': %w", err)
		}
		delete(object, "skipN2PduSessionResRelInd")
	}

	if raw, found := object["smContextStatusUri"]; found {
		err = json.Unmarshal(raw, &a.SmContextStatusUri)
		if err != nil {
			return fmt.Errorf("error reading 'smContextStatusUri': %w", err)
		}
		delete(object, "smContextStatusUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetId"]; found {
		err = json.Unmarshal(raw, &a.TargetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetId': %w", err)
		}
		delete(object, "targetId")
	}

	if raw, found := object["targetServingNfId"]; found {
		err = json.Unmarshal(raw, &a.TargetServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'targetServingNfId': %w", err)
		}
		delete(object, "targetServingNfId")
	}

	if raw, found := object["toBeSwitched"]; found {
		err = json.Unmarshal(raw, &a.ToBeSwitched)
		if err != nil {
			return fmt.Errorf("error reading 'toBeSwitched': %w", err)
		}
		delete(object, "toBeSwitched")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextUpdateData to handle AdditionalProperties
func (a SmContextUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	if a.AnTypeCanBeChanged != nil {
		object["anTypeCanBeChanged"], err = json.Marshal(a.AnTypeCanBeChanged)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anTypeCanBeChanged': %w", err)
		}
	}

	if len(a.AnTypeToReactivate) != 0 {
		object["anTypeToReactivate"], err = json.Marshal(a.AnTypeToReactivate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anTypeToReactivate': %w", err)
		}
	}

	object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.DataForwarding != nil {
		object["dataForwarding"], err = json.Marshal(a.DataForwarding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataForwarding': %w", err)
		}
	}

	if a.DdnFailureSubs != nil {
		object["ddnFailureSubs"], err = json.Marshal(a.DdnFailureSubs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubs': %w", err)
		}
	}

	if a.EpsBearerSetup != nil {
		object["epsBearerSetup"], err = json.Marshal(a.EpsBearerSetup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerSetup': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if a.ExemptionInd != nil {
		object["exemptionInd"], err = json.Marshal(a.ExemptionInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'exemptionInd': %w", err)
		}
	}

	if a.ExtendedNasSmTimerInd != nil {
		object["extendedNasSmTimerInd"], err = json.Marshal(a.ExtendedNasSmTimerInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extendedNasSmTimerInd': %w", err)
		}
	}

	if a.FailedToBeSwitched != nil {
		object["failedToBeSwitched"], err = json.Marshal(a.FailedToBeSwitched)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedToBeSwitched': %w", err)
		}
	}

	if len(a.ForwardingBearerContexts) != 0 {
		object["forwardingBearerContexts"], err = json.Marshal(a.ForwardingBearerContexts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingBearerContexts': %w", err)
		}
	}

	if a.ForwardingFTeid != nil {
		object["forwardingFTeid"], err = json.Marshal(a.ForwardingFTeid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingFTeid': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaReleaseInd != nil {
		object["maReleaseInd"], err = json.Marshal(a.MaReleaseInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maReleaseInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoExt1 != nil {
		object["n2SmInfoExt1"], err = json.Marshal(a.N2SmInfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoExt1': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.N2SmInfoTypeExt1 != nil {
		object["n2SmInfoTypeExt1"], err = json.Marshal(a.N2SmInfoTypeExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoTypeExt1': %w", err)
		}
	}

	if len(a.N9DlForwardingTnlList) != 0 {
		object["n9DlForwardingTnlList"], err = json.Marshal(a.N9DlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9DlForwardingTnlList': %w", err)
		}
	}

	if a.N9ForwardingTunnel != nil {
		object["n9ForwardingTunnel"], err = json.Marshal(a.N9ForwardingTunnel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9ForwardingTunnel': %w", err)
		}
	}

	if len(a.N9UlForwardingTnlList) != 0 {
		object["n9UlForwardingTnlList"], err = json.Marshal(a.N9UlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9UlForwardingTnlList': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.Release != nil {
		object["release"], err = json.Marshal(a.Release)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'release': %w", err)
		}
	}

	if len(a.RevokeEbiList) != 0 {
		object["revokeEbiList"], err = json.Marshal(a.RevokeEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'revokeEbiList': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.ServingNfId != nil {
		object["servingNfId"], err = json.Marshal(a.ServingNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNfId': %w", err)
		}
	}

	if a.SkipN2PduSessionResRelInd != nil {
		object["skipN2PduSessionResRelInd"], err = json.Marshal(a.SkipN2PduSessionResRelInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'skipN2PduSessionResRelInd': %w", err)
		}
	}

	if a.SmContextStatusUri != nil {
		object["smContextStatusUri"], err = json.Marshal(a.SmContextStatusUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextStatusUri': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.TargetId != nil {
		object["targetId"], err = json.Marshal(a.TargetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetId': %w", err)
		}
	}

	if a.TargetServingNfId != nil {
		object["targetServingNfId"], err = json.Marshal(a.TargetServingNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetServingNfId': %w", err)
		}
	}

	if a.ToBeSwitched != nil {
		object["toBeSwitched"], err = json.Marshal(a.ToBeSwitched)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'toBeSwitched': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextUpdateError. Returns the specified
// element and whether it was found
func (a SmContextUpdateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextUpdateError
func (a *SmContextUpdateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextUpdateError to handle AdditionalProperties
func (a *SmContextUpdateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextUpdateError to handle AdditionalProperties
func (a SmContextUpdateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextUpdatedData. Returns the specified
// element and whether it was found
func (a SmContextUpdatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextUpdatedData
func (a *SmContextUpdatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextUpdatedData to handle AdditionalProperties
func (a *SmContextUpdatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allocatedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AllocatedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'allocatedEbiList': %w", err)
		}
		delete(object, "allocatedEbiList")
	}

	if raw, found := object["anchorSmfFeatures"]; found {
		err = json.Unmarshal(raw, &a.AnchorSmfFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'anchorSmfFeatures': %w", err)
		}
		delete(object, "anchorSmfFeatures")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dataForwarding"]; found {
		err = json.Unmarshal(raw, &a.DataForwarding)
		if err != nil {
			return fmt.Errorf("error reading 'dataForwarding': %w", err)
		}
		delete(object, "dataForwarding")
	}

	if raw, found := object["epsBearerSetup"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerSetup)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerSetup': %w", err)
		}
		delete(object, "epsBearerSetup")
	}

	if raw, found := object["forwardingBearerContexts"]; found {
		err = json.Unmarshal(raw, &a.ForwardingBearerContexts)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingBearerContexts': %w", err)
		}
		delete(object, "forwardingBearerContexts")
	}

	if raw, found := object["forwardingFTeid"]; found {
		err = json.Unmarshal(raw, &a.ForwardingFTeid)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingFTeid': %w", err)
		}
		delete(object, "forwardingFTeid")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["maAcceptedInd"]; found {
		err = json.Unmarshal(raw, &a.MaAcceptedInd)
		if err != nil {
			return fmt.Errorf("error reading 'maAcceptedInd': %w", err)
		}
		delete(object, "maAcceptedInd")
	}

	if raw, found := object["modifiedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ModifiedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'modifiedEbiList': %w", err)
		}
		delete(object, "modifiedEbiList")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["n3DlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N3DlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n3DlForwardingTnlList': %w", err)
		}
		delete(object, "n3DlForwardingTnlList")
	}

	if raw, found := object["n3UlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N3UlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n3UlForwardingTnlList': %w", err)
		}
		delete(object, "n3UlForwardingTnlList")
	}

	if raw, found := object["releaseEbiList"]; found {
		err = json.Unmarshal(raw, &a.ReleaseEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'releaseEbiList': %w", err)
		}
		delete(object, "releaseEbiList")
	}

	if raw, found := object["selectedOldSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedOldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedOldSmfId': %w", err)
		}
		delete(object, "selectedOldSmfId")
	}

	if raw, found := object["selectedSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedSmfId': %w", err)
		}
		delete(object, "selectedSmfId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextUpdatedData to handle AdditionalProperties
func (a SmContextUpdatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllocatedEbiList) != 0 {
		object["allocatedEbiList"], err = json.Marshal(a.AllocatedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allocatedEbiList': %w", err)
		}
	}

	if a.AnchorSmfFeatures != nil {
		object["anchorSmfFeatures"], err = json.Marshal(a.AnchorSmfFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anchorSmfFeatures': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.DataForwarding != nil {
		object["dataForwarding"], err = json.Marshal(a.DataForwarding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataForwarding': %w", err)
		}
	}

	if len(a.EpsBearerSetup) != 0 {
		object["epsBearerSetup"], err = json.Marshal(a.EpsBearerSetup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerSetup': %w", err)
		}
	}

	if len(a.ForwardingBearerContexts) != 0 {
		object["forwardingBearerContexts"], err = json.Marshal(a.ForwardingBearerContexts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingBearerContexts': %w", err)
		}
	}

	if a.ForwardingFTeid != nil {
		object["forwardingFTeid"], err = json.Marshal(a.ForwardingFTeid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingFTeid': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.MaAcceptedInd != nil {
		object["maAcceptedInd"], err = json.Marshal(a.MaAcceptedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maAcceptedInd': %w", err)
		}
	}

	if len(a.ModifiedEbiList) != 0 {
		object["modifiedEbiList"], err = json.Marshal(a.ModifiedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'modifiedEbiList': %w", err)
		}
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if len(a.N3DlForwardingTnlList) != 0 {
		object["n3DlForwardingTnlList"], err = json.Marshal(a.N3DlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3DlForwardingTnlList': %w", err)
		}
	}

	if len(a.N3UlForwardingTnlList) != 0 {
		object["n3UlForwardingTnlList"], err = json.Marshal(a.N3UlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3UlForwardingTnlList': %w", err)
		}
	}

	if len(a.ReleaseEbiList) != 0 {
		object["releaseEbiList"], err = json.Marshal(a.ReleaseEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'releaseEbiList': %w", err)
		}
	}

	if a.SelectedOldSmfId != nil {
		object["selectedOldSmfId"], err = json.Marshal(a.SelectedOldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedOldSmfId': %w", err)
		}
	}

	if a.SelectedSmfId != nil {
		object["selectedSmfId"], err = json.Marshal(a.SelectedSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedSmfId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyContextData. Returns the specified
// element and whether it was found
func (a SmPolicyContextData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyContextData
func (a *SmPolicyContextData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyContextData to handle AdditionalProperties
func (a *SmPolicyContextData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["3gppPsDataOffStatus"]; found {
		err = json.Unmarshal(raw, &a.N3gppPsDataOffStatus)
		if err != nil {
			return fmt.Errorf("error reading '3gppPsDataOffStatus': %w", err)
		}
		delete(object, "3gppPsDataOffStatus")
	}

	if raw, found := object["accNetChId"]; found {
		err = json.Unmarshal(raw, &a.AccNetChId)
		if err != nil {
			return fmt.Errorf("error reading 'accNetChId': %w", err)
		}
		delete(object, "accNetChId")
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["addAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.AddAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addAccessInfo': %w", err)
		}
		delete(object, "addAccessInfo")
	}

	if raw, found := object["atsssCapab"]; found {
		err = json.Unmarshal(raw, &a.AtsssCapab)
		if err != nil {
			return fmt.Errorf("error reading 'atsssCapab': %w", err)
		}
		delete(object, "atsssCapab")
	}

	if raw, found := object["authProfIndex"]; found {
		err = json.Unmarshal(raw, &a.AuthProfIndex)
		if err != nil {
			return fmt.Errorf("error reading 'authProfIndex': %w", err)
		}
		delete(object, "authProfIndex")
	}

	if raw, found := object["chargEntityAddr"]; found {
		err = json.Unmarshal(raw, &a.ChargEntityAddr)
		if err != nil {
			return fmt.Errorf("error reading 'chargEntityAddr': %w", err)
		}
		delete(object, "chargEntityAddr")
	}

	if raw, found := object["chargingcharacteristics"]; found {
		err = json.Unmarshal(raw, &a.Chargingcharacteristics)
		if err != nil {
			return fmt.Errorf("error reading 'chargingcharacteristics': %w", err)
		}
		delete(object, "chargingcharacteristics")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["dnnSelMode"]; found {
		err = json.Unmarshal(raw, &a.DnnSelMode)
		if err != nil {
			return fmt.Errorf("error reading 'dnnSelMode': %w", err)
		}
		delete(object, "dnnSelMode")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["interGrpIds"]; found {
		err = json.Unmarshal(raw, &a.InterGrpIds)
		if err != nil {
			return fmt.Errorf("error reading 'interGrpIds': %w", err)
		}
		delete(object, "interGrpIds")
	}

	if raw, found := object["invalidSupi"]; found {
		err = json.Unmarshal(raw, &a.InvalidSupi)
		if err != nil {
			return fmt.Errorf("error reading 'invalidSupi': %w", err)
		}
		delete(object, "invalidSupi")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["ipv4Address"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Address': %w", err)
		}
		delete(object, "ipv4Address")
	}

	if raw, found := object["ipv4FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv4FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4FrameRouteList': %w", err)
		}
		delete(object, "ipv4FrameRouteList")
	}

	if raw, found := object["ipv6AddressPrefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6AddressPrefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6AddressPrefix': %w", err)
		}
		delete(object, "ipv6AddressPrefix")
	}

	if raw, found := object["ipv6FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv6FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6FrameRouteList': %w", err)
		}
		delete(object, "ipv6FrameRouteList")
	}

	if raw, found := object["maPduInd"]; found {
		err = json.Unmarshal(raw, &a.MaPduInd)
		if err != nil {
			return fmt.Errorf("error reading 'maPduInd': %w", err)
		}
		delete(object, "maPduInd")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["numOfPackFilter"]; found {
		err = json.Unmarshal(raw, &a.NumOfPackFilter)
		if err != nil {
			return fmt.Errorf("error reading 'numOfPackFilter': %w", err)
		}
		delete(object, "numOfPackFilter")
	}

	if raw, found := object["offline"]; found {
		err = json.Unmarshal(raw, &a.Offline)
		if err != nil {
			return fmt.Errorf("error reading 'offline': %w", err)
		}
		delete(object, "offline")
	}

	if raw, found := object["online"]; found {
		err = json.Unmarshal(raw, &a.Online)
		if err != nil {
			return fmt.Errorf("error reading 'online': %w", err)
		}
		delete(object, "online")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionType"]; found {
		err = json.Unmarshal(raw, &a.PduSessionType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionType': %w", err)
		}
		delete(object, "pduSessionType")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["qosFlowUsage"]; found {
		err = json.Unmarshal(raw, &a.QosFlowUsage)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowUsage': %w", err)
		}
		delete(object, "qosFlowUsage")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["refQosIndication"]; found {
		err = json.Unmarshal(raw, &a.RefQosIndication)
		if err != nil {
			return fmt.Errorf("error reading 'refQosIndication': %w", err)
		}
		delete(object, "refQosIndication")
	}

	if raw, found := object["servNfId"]; found {
		err = json.Unmarshal(raw, &a.ServNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servNfId': %w", err)
		}
		delete(object, "servNfId")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["sliceInfo"]; found {
		err = json.Unmarshal(raw, &a.SliceInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sliceInfo': %w", err)
		}
		delete(object, "sliceInfo")
	}

	if raw, found := object["smfId"]; found {
		err = json.Unmarshal(raw, &a.SmfId)
		if err != nil {
			return fmt.Errorf("error reading 'smfId': %w", err)
		}
		delete(object, "smfId")
	}

	if raw, found := object["subsDefQos"]; found {
		err = json.Unmarshal(raw, &a.SubsDefQos)
		if err != nil {
			return fmt.Errorf("error reading 'subsDefQos': %w", err)
		}
		delete(object, "subsDefQos")
	}

	if raw, found := object["subsSessAmbr"]; found {
		err = json.Unmarshal(raw, &a.SubsSessAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'subsSessAmbr': %w", err)
		}
		delete(object, "subsSessAmbr")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["traceReq"]; found {
		err = json.Unmarshal(raw, &a.TraceReq)
		if err != nil {
			return fmt.Errorf("error reading 'traceReq': %w", err)
		}
		delete(object, "traceReq")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["userLocationInfo"]; found {
		err = json.Unmarshal(raw, &a.UserLocationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'userLocationInfo': %w", err)
		}
		delete(object, "userLocationInfo")
	}

	if raw, found := object["vplmnQos"]; found {
		err = json.Unmarshal(raw, &a.VplmnQos)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnQos': %w", err)
		}
		delete(object, "vplmnQos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyContextData to handle AdditionalProperties
func (a SmPolicyContextData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N3gppPsDataOffStatus != nil {
		object["3gppPsDataOffStatus"], err = json.Marshal(a.N3gppPsDataOffStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '3gppPsDataOffStatus': %w", err)
		}
	}

	if a.AccNetChId != nil {
		object["accNetChId"], err = json.Marshal(a.AccNetChId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accNetChId': %w", err)
		}
	}

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.AddAccessInfo != nil {
		object["addAccessInfo"], err = json.Marshal(a.AddAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addAccessInfo': %w", err)
		}
	}

	if a.AtsssCapab != nil {
		object["atsssCapab"], err = json.Marshal(a.AtsssCapab)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssCapab': %w", err)
		}
	}

	if a.AuthProfIndex != nil {
		object["authProfIndex"], err = json.Marshal(a.AuthProfIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authProfIndex': %w", err)
		}
	}

	if a.ChargEntityAddr != nil {
		object["chargEntityAddr"], err = json.Marshal(a.ChargEntityAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargEntityAddr': %w", err)
		}
	}

	if a.Chargingcharacteristics != nil {
		object["chargingcharacteristics"], err = json.Marshal(a.Chargingcharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingcharacteristics': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.DnnSelMode != nil {
		object["dnnSelMode"], err = json.Marshal(a.DnnSelMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnSelMode': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.InterGrpIds) != 0 {
		object["interGrpIds"], err = json.Marshal(a.InterGrpIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGrpIds': %w", err)
		}
	}

	if a.InvalidSupi != nil {
		object["invalidSupi"], err = json.Marshal(a.InvalidSupi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidSupi': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if len(a.Ipv4Address) != 0 {
		object["ipv4Address"], err = json.Marshal(a.Ipv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Address': %w", err)
		}
	}

	if len(a.Ipv4FrameRouteList) != 0 {
		object["ipv4FrameRouteList"], err = json.Marshal(a.Ipv4FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4FrameRouteList': %w", err)
		}
	}

	if a.Ipv6AddressPrefix != nil {
		object["ipv6AddressPrefix"], err = json.Marshal(a.Ipv6AddressPrefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6AddressPrefix': %w", err)
		}
	}

	if len(a.Ipv6FrameRouteList) != 0 {
		object["ipv6FrameRouteList"], err = json.Marshal(a.Ipv6FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6FrameRouteList': %w", err)
		}
	}

	if a.MaPduInd != nil {
		object["maPduInd"], err = json.Marshal(a.MaPduInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maPduInd': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if a.NumOfPackFilter != nil {
		object["numOfPackFilter"], err = json.Marshal(a.NumOfPackFilter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numOfPackFilter': %w", err)
		}
	}

	if a.Offline != nil {
		object["offline"], err = json.Marshal(a.Offline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'offline': %w", err)
		}
	}

	if a.Online != nil {
		object["online"], err = json.Marshal(a.Online)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'online': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	object["pduSessionType"], err = json.Marshal(a.PduSessionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionType': %w", err)
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.QosFlowUsage != nil {
		object["qosFlowUsage"], err = json.Marshal(a.QosFlowUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowUsage': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.RefQosIndication != nil {
		object["refQosIndication"], err = json.Marshal(a.RefQosIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refQosIndication': %w", err)
		}
	}

	if a.ServNfId != nil {
		object["servNfId"], err = json.Marshal(a.ServNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servNfId': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	object["sliceInfo"], err = json.Marshal(a.SliceInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sliceInfo': %w", err)
	}

	if a.SmfId != nil {
		object["smfId"], err = json.Marshal(a.SmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfId': %w", err)
		}
	}

	if a.SubsDefQos != nil {
		object["subsDefQos"], err = json.Marshal(a.SubsDefQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsDefQos': %w", err)
		}
	}

	if a.SubsSessAmbr != nil {
		object["subsSessAmbr"], err = json.Marshal(a.SubsSessAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsSessAmbr': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	object["traceReq"], err = json.Marshal(a.TraceReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceReq': %w", err)
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UserLocationInfo != nil {
		object["userLocationInfo"], err = json.Marshal(a.UserLocationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLocationInfo': %w", err)
		}
	}

	if a.VplmnQos != nil {
		object["vplmnQos"], err = json.Marshal(a.VplmnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vplmnQos': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyControl. Returns the specified
// element and whether it was found
func (a SmPolicyControl) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyControl
func (a *SmPolicyControl) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyControl to handle AdditionalProperties
func (a *SmPolicyControl) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["context"]; found {
		err = json.Unmarshal(raw, &a.Context)
		if err != nil {
			return fmt.Errorf("error reading 'context': %w", err)
		}
		delete(object, "context")
	}

	if raw, found := object["policy"]; found {
		err = json.Unmarshal(raw, &a.Policy)
		if err != nil {
			return fmt.Errorf("error reading 'policy': %w", err)
		}
		delete(object, "policy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyControl to handle AdditionalProperties
func (a SmPolicyControl) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["context"], err = json.Marshal(a.Context)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'context': %w", err)
	}

	object["policy"], err = json.Marshal(a.Policy)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'policy': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyData. Returns the specified
// element and whether it was found
func (a SmPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyData
func (a *SmPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyData to handle AdditionalProperties
func (a *SmPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicySnssaiData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicySnssaiData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicySnssaiData': %w", err)
		}
		delete(object, "smPolicySnssaiData")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["umData"]; found {
		err = json.Unmarshal(raw, &a.UmData)
		if err != nil {
			return fmt.Errorf("error reading 'umData': %w", err)
		}
		delete(object, "umData")
	}

	if raw, found := object["umDataLimits"]; found {
		err = json.Unmarshal(raw, &a.UmDataLimits)
		if err != nil {
			return fmt.Errorf("error reading 'umDataLimits': %w", err)
		}
		delete(object, "umDataLimits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyData to handle AdditionalProperties
func (a SmPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smPolicySnssaiData"], err = json.Marshal(a.SmPolicySnssaiData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smPolicySnssaiData': %w", err)
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UmData != nil {
		object["umData"], err = json.Marshal(a.UmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umData': %w", err)
		}
	}

	if a.UmDataLimits != nil {
		object["umDataLimits"], err = json.Marshal(a.UmDataLimits)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umDataLimits': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDataPatch. Returns the specified
// element and whether it was found
func (a SmPolicyDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDataPatch
func (a *SmPolicyDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDataPatch to handle AdditionalProperties
func (a *SmPolicyDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicySnssaiData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicySnssaiData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicySnssaiData': %w", err)
		}
		delete(object, "smPolicySnssaiData")
	}

	if raw, found := object["umData"]; found {
		err = json.Unmarshal(raw, &a.UmData)
		if err != nil {
			return fmt.Errorf("error reading 'umData': %w", err)
		}
		delete(object, "umData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDataPatch to handle AdditionalProperties
func (a SmPolicyDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmPolicySnssaiData != nil {
		object["smPolicySnssaiData"], err = json.Marshal(a.SmPolicySnssaiData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicySnssaiData': %w", err)
		}
	}

	object["umData"], err = json.Marshal(a.UmData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'umData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDecision. Returns the specified
// element and whether it was found
func (a SmPolicyDecision) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDecision
func (a *SmPolicyDecision) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDecision to handle AdditionalProperties
func (a *SmPolicyDecision) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["chargingInfo"]; found {
		err = json.Unmarshal(raw, &a.ChargingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chargingInfo': %w", err)
		}
		delete(object, "chargingInfo")
	}

	if raw, found := object["chgDecs"]; found {
		err = json.Unmarshal(raw, &a.ChgDecs)
		if err != nil {
			return fmt.Errorf("error reading 'chgDecs': %w", err)
		}
		delete(object, "chgDecs")
	}

	if raw, found := object["conds"]; found {
		err = json.Unmarshal(raw, &a.Conds)
		if err != nil {
			return fmt.Errorf("error reading 'conds': %w", err)
		}
		delete(object, "conds")
	}

	if raw, found := object["ipv4Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Index': %w", err)
		}
		delete(object, "ipv4Index")
	}

	if raw, found := object["ipv6Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Index': %w", err)
		}
		delete(object, "ipv6Index")
	}

	if raw, found := object["lastReqRuleData"]; found {
		err = json.Unmarshal(raw, &a.LastReqRuleData)
		if err != nil {
			return fmt.Errorf("error reading 'lastReqRuleData': %w", err)
		}
		delete(object, "lastReqRuleData")
	}

	if raw, found := object["lastReqUsageData"]; found {
		err = json.Unmarshal(raw, &a.LastReqUsageData)
		if err != nil {
			return fmt.Errorf("error reading 'lastReqUsageData': %w", err)
		}
		delete(object, "lastReqUsageData")
	}

	if raw, found := object["offline"]; found {
		err = json.Unmarshal(raw, &a.Offline)
		if err != nil {
			return fmt.Errorf("error reading 'offline': %w", err)
		}
		delete(object, "offline")
	}

	if raw, found := object["online"]; found {
		err = json.Unmarshal(raw, &a.Online)
		if err != nil {
			return fmt.Errorf("error reading 'online': %w", err)
		}
		delete(object, "online")
	}

	if raw, found := object["pccRules"]; found {
		err = json.Unmarshal(raw, &a.PccRules)
		if err != nil {
			return fmt.Errorf("error reading 'pccRules': %w", err)
		}
		delete(object, "pccRules")
	}

	if raw, found := object["pcscfRestIndication"]; found {
		err = json.Unmarshal(raw, &a.PcscfRestIndication)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfRestIndication': %w", err)
		}
		delete(object, "pcscfRestIndication")
	}

	if raw, found := object["policyCtrlReqTriggers"]; found {
		err = json.Unmarshal(raw, &a.PolicyCtrlReqTriggers)
		if err != nil {
			return fmt.Errorf("error reading 'policyCtrlReqTriggers': %w", err)
		}
		delete(object, "policyCtrlReqTriggers")
	}

	if raw, found := object["praInfos"]; found {
		err = json.Unmarshal(raw, &a.PraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'praInfos': %w", err)
		}
		delete(object, "praInfos")
	}

	if raw, found := object["qosChars"]; found {
		err = json.Unmarshal(raw, &a.QosChars)
		if err != nil {
			return fmt.Errorf("error reading 'qosChars': %w", err)
		}
		delete(object, "qosChars")
	}

	if raw, found := object["qosDecs"]; found {
		err = json.Unmarshal(raw, &a.QosDecs)
		if err != nil {
			return fmt.Errorf("error reading 'qosDecs': %w", err)
		}
		delete(object, "qosDecs")
	}

	if raw, found := object["qosFlowUsage"]; found {
		err = json.Unmarshal(raw, &a.QosFlowUsage)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowUsage': %w", err)
		}
		delete(object, "qosFlowUsage")
	}

	if raw, found := object["qosMonDecs"]; found {
		err = json.Unmarshal(raw, &a.QosMonDecs)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonDecs': %w", err)
		}
		delete(object, "qosMonDecs")
	}

	if raw, found := object["redSessIndication"]; found {
		err = json.Unmarshal(raw, &a.RedSessIndication)
		if err != nil {
			return fmt.Errorf("error reading 'redSessIndication': %w", err)
		}
		delete(object, "redSessIndication")
	}

	if raw, found := object["reflectiveQoSTimer"]; found {
		err = json.Unmarshal(raw, &a.ReflectiveQoSTimer)
		if err != nil {
			return fmt.Errorf("error reading 'reflectiveQoSTimer': %w", err)
		}
		delete(object, "reflectiveQoSTimer")
	}

	if raw, found := object["relCause"]; found {
		err = json.Unmarshal(raw, &a.RelCause)
		if err != nil {
			return fmt.Errorf("error reading 'relCause': %w", err)
		}
		delete(object, "relCause")
	}

	if raw, found := object["revalidationTime"]; found {
		err = json.Unmarshal(raw, &a.RevalidationTime)
		if err != nil {
			return fmt.Errorf("error reading 'revalidationTime': %w", err)
		}
		delete(object, "revalidationTime")
	}

	if raw, found := object["sessRules"]; found {
		err = json.Unmarshal(raw, &a.SessRules)
		if err != nil {
			return fmt.Errorf("error reading 'sessRules': %w", err)
		}
		delete(object, "sessRules")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["traffContDecs"]; found {
		err = json.Unmarshal(raw, &a.TraffContDecs)
		if err != nil {
			return fmt.Errorf("error reading 'traffContDecs': %w", err)
		}
		delete(object, "traffContDecs")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if raw, found := object["umDecs"]; found {
		err = json.Unmarshal(raw, &a.UmDecs)
		if err != nil {
			return fmt.Errorf("error reading 'umDecs': %w", err)
		}
		delete(object, "umDecs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDecision to handle AdditionalProperties
func (a SmPolicyDecision) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ChargingInfo != nil {
		object["chargingInfo"], err = json.Marshal(a.ChargingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingInfo': %w", err)
		}
	}

	object["chgDecs"], err = json.Marshal(a.ChgDecs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'chgDecs': %w", err)
	}

	object["conds"], err = json.Marshal(a.Conds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'conds': %w", err)
	}

	if a.Ipv4Index != nil {
		object["ipv4Index"], err = json.Marshal(a.Ipv4Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Index': %w", err)
		}
	}

	if a.Ipv6Index != nil {
		object["ipv6Index"], err = json.Marshal(a.Ipv6Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Index': %w", err)
		}
	}

	if len(a.LastReqRuleData) != 0 {
		object["lastReqRuleData"], err = json.Marshal(a.LastReqRuleData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lastReqRuleData': %w", err)
		}
	}

	if a.LastReqUsageData != nil {
		object["lastReqUsageData"], err = json.Marshal(a.LastReqUsageData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lastReqUsageData': %w", err)
		}
	}

	if a.Offline != nil {
		object["offline"], err = json.Marshal(a.Offline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'offline': %w", err)
		}
	}

	if a.Online != nil {
		object["online"], err = json.Marshal(a.Online)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'online': %w", err)
		}
	}

	object["pccRules"], err = json.Marshal(a.PccRules)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pccRules': %w", err)
	}

	if a.PcscfRestIndication != nil {
		object["pcscfRestIndication"], err = json.Marshal(a.PcscfRestIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfRestIndication': %w", err)
		}
	}

	object["policyCtrlReqTriggers"], err = json.Marshal(a.PolicyCtrlReqTriggers)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'policyCtrlReqTriggers': %w", err)
	}

	object["praInfos"], err = json.Marshal(a.PraInfos)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'praInfos': %w", err)
	}

	if a.QosChars != nil {
		object["qosChars"], err = json.Marshal(a.QosChars)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosChars': %w", err)
		}
	}

	if a.QosDecs != nil {
		object["qosDecs"], err = json.Marshal(a.QosDecs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosDecs': %w", err)
		}
	}

	if a.QosFlowUsage != nil {
		object["qosFlowUsage"], err = json.Marshal(a.QosFlowUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowUsage': %w", err)
		}
	}

	object["qosMonDecs"], err = json.Marshal(a.QosMonDecs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosMonDecs': %w", err)
	}

	if a.RedSessIndication != nil {
		object["redSessIndication"], err = json.Marshal(a.RedSessIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redSessIndication': %w", err)
		}
	}

	if a.ReflectiveQoSTimer != nil {
		object["reflectiveQoSTimer"], err = json.Marshal(a.ReflectiveQoSTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reflectiveQoSTimer': %w", err)
		}
	}

	if a.RelCause != nil {
		object["relCause"], err = json.Marshal(a.RelCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relCause': %w", err)
		}
	}

	if a.RevalidationTime != nil {
		object["revalidationTime"], err = json.Marshal(a.RevalidationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'revalidationTime': %w", err)
		}
	}

	if a.SessRules != nil {
		object["sessRules"], err = json.Marshal(a.SessRules)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessRules': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TraffContDecs != nil {
		object["traffContDecs"], err = json.Marshal(a.TraffContDecs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traffContDecs': %w", err)
		}
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	object["umDecs"], err = json.Marshal(a.UmDecs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'umDecs': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDeleteData. Returns the specified
// element and whether it was found
func (a SmPolicyDeleteData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDeleteData
func (a *SmPolicyDeleteData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDeleteData to handle AdditionalProperties
func (a *SmPolicyDeleteData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accuUsageReports"]; found {
		err = json.Unmarshal(raw, &a.AccuUsageReports)
		if err != nil {
			return fmt.Errorf("error reading 'accuUsageReports': %w", err)
		}
		delete(object, "accuUsageReports")
	}

	if raw, found := object["pduSessRelCause"]; found {
		err = json.Unmarshal(raw, &a.PduSessRelCause)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessRelCause': %w", err)
		}
		delete(object, "pduSessRelCause")
	}

	if raw, found := object["ranNasRelCauses"]; found {
		err = json.Unmarshal(raw, &a.RanNasRelCauses)
		if err != nil {
			return fmt.Errorf("error reading 'ranNasRelCauses': %w", err)
		}
		delete(object, "ranNasRelCauses")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["userLocationInfo"]; found {
		err = json.Unmarshal(raw, &a.UserLocationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'userLocationInfo': %w", err)
		}
		delete(object, "userLocationInfo")
	}

	if raw, found := object["userLocationInfoTime"]; found {
		err = json.Unmarshal(raw, &a.UserLocationInfoTime)
		if err != nil {
			return fmt.Errorf("error reading 'userLocationInfoTime': %w", err)
		}
		delete(object, "userLocationInfoTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDeleteData to handle AdditionalProperties
func (a SmPolicyDeleteData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccuUsageReports) != 0 {
		object["accuUsageReports"], err = json.Marshal(a.AccuUsageReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accuUsageReports': %w", err)
		}
	}

	if a.PduSessRelCause != nil {
		object["pduSessRelCause"], err = json.Marshal(a.PduSessRelCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessRelCause': %w", err)
		}
	}

	if len(a.RanNasRelCauses) != 0 {
		object["ranNasRelCauses"], err = json.Marshal(a.RanNasRelCauses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranNasRelCauses': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UserLocationInfo != nil {
		object["userLocationInfo"], err = json.Marshal(a.UserLocationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLocationInfo': %w", err)
		}
	}

	if a.UserLocationInfoTime != nil {
		object["userLocationInfoTime"], err = json.Marshal(a.UserLocationInfoTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLocationInfoTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDnnData. Returns the specified
// element and whether it was found
func (a SmPolicyDnnData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDnnData
func (a *SmPolicyDnnData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDnnData to handle AdditionalProperties
func (a *SmPolicyDnnData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["adcSupport"]; found {
		err = json.Unmarshal(raw, &a.AdcSupport)
		if err != nil {
			return fmt.Errorf("error reading 'adcSupport': %w", err)
		}
		delete(object, "adcSupport")
	}

	if raw, found := object["allowedServices"]; found {
		err = json.Unmarshal(raw, &a.AllowedServices)
		if err != nil {
			return fmt.Errorf("error reading 'allowedServices': %w", err)
		}
		delete(object, "allowedServices")
	}

	if raw, found := object["bdtRefIds"]; found {
		err = json.Unmarshal(raw, &a.BdtRefIds)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefIds': %w", err)
		}
		delete(object, "bdtRefIds")
	}

	if raw, found := object["chfInfo"]; found {
		err = json.Unmarshal(raw, &a.ChfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chfInfo': %w", err)
		}
		delete(object, "chfInfo")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["gbrDl"]; found {
		err = json.Unmarshal(raw, &a.GbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrDl': %w", err)
		}
		delete(object, "gbrDl")
	}

	if raw, found := object["gbrUl"]; found {
		err = json.Unmarshal(raw, &a.GbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'gbrUl': %w", err)
		}
		delete(object, "gbrUl")
	}

	if raw, found := object["imsSignallingPrio"]; found {
		err = json.Unmarshal(raw, &a.ImsSignallingPrio)
		if err != nil {
			return fmt.Errorf("error reading 'imsSignallingPrio': %w", err)
		}
		delete(object, "imsSignallingPrio")
	}

	if raw, found := object["ipv4Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Index': %w", err)
		}
		delete(object, "ipv4Index")
	}

	if raw, found := object["ipv6Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Index': %w", err)
		}
		delete(object, "ipv6Index")
	}

	if raw, found := object["locRoutNotAllowed"]; found {
		err = json.Unmarshal(raw, &a.LocRoutNotAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'locRoutNotAllowed': %w", err)
		}
		delete(object, "locRoutNotAllowed")
	}

	if raw, found := object["mcsPriority"]; found {
		err = json.Unmarshal(raw, &a.McsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mcsPriority': %w", err)
		}
		delete(object, "mcsPriority")
	}

	if raw, found := object["mcsPriorityLevel"]; found {
		err = json.Unmarshal(raw, &a.McsPriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'mcsPriorityLevel': %w", err)
		}
		delete(object, "mcsPriorityLevel")
	}

	if raw, found := object["mpsPriority"]; found {
		err = json.Unmarshal(raw, &a.MpsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mpsPriority': %w", err)
		}
		delete(object, "mpsPriority")
	}

	if raw, found := object["mpsPriorityLevel"]; found {
		err = json.Unmarshal(raw, &a.MpsPriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'mpsPriorityLevel': %w", err)
		}
		delete(object, "mpsPriorityLevel")
	}

	if raw, found := object["offline"]; found {
		err = json.Unmarshal(raw, &a.Offline)
		if err != nil {
			return fmt.Errorf("error reading 'offline': %w", err)
		}
		delete(object, "offline")
	}

	if raw, found := object["online"]; found {
		err = json.Unmarshal(raw, &a.Online)
		if err != nil {
			return fmt.Errorf("error reading 'online': %w", err)
		}
		delete(object, "online")
	}

	if raw, found := object["praInfos"]; found {
		err = json.Unmarshal(raw, &a.PraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'praInfos': %w", err)
		}
		delete(object, "praInfos")
	}

	if raw, found := object["refUmDataLimitIds"]; found {
		err = json.Unmarshal(raw, &a.RefUmDataLimitIds)
		if err != nil {
			return fmt.Errorf("error reading 'refUmDataLimitIds': %w", err)
		}
		delete(object, "refUmDataLimitIds")
	}

	if raw, found := object["subscCats"]; found {
		err = json.Unmarshal(raw, &a.SubscCats)
		if err != nil {
			return fmt.Errorf("error reading 'subscCats': %w", err)
		}
		delete(object, "subscCats")
	}

	if raw, found := object["subscSpendingLimits"]; found {
		err = json.Unmarshal(raw, &a.SubscSpendingLimits)
		if err != nil {
			return fmt.Errorf("error reading 'subscSpendingLimits': %w", err)
		}
		delete(object, "subscSpendingLimits")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDnnData to handle AdditionalProperties
func (a SmPolicyDnnData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdcSupport != nil {
		object["adcSupport"], err = json.Marshal(a.AdcSupport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'adcSupport': %w", err)
		}
	}

	if len(a.AllowedServices) != 0 {
		object["allowedServices"], err = json.Marshal(a.AllowedServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedServices': %w", err)
		}
	}

	object["bdtRefIds"], err = json.Marshal(a.BdtRefIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefIds': %w", err)
	}

	if a.ChfInfo != nil {
		object["chfInfo"], err = json.Marshal(a.ChfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chfInfo': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.GbrDl) != 0 {
		object["gbrDl"], err = json.Marshal(a.GbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrDl': %w", err)
		}
	}

	if len(a.GbrUl) != 0 {
		object["gbrUl"], err = json.Marshal(a.GbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrUl': %w", err)
		}
	}

	if a.ImsSignallingPrio != nil {
		object["imsSignallingPrio"], err = json.Marshal(a.ImsSignallingPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsSignallingPrio': %w", err)
		}
	}

	if a.Ipv4Index != nil {
		object["ipv4Index"], err = json.Marshal(a.Ipv4Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Index': %w", err)
		}
	}

	if a.Ipv6Index != nil {
		object["ipv6Index"], err = json.Marshal(a.Ipv6Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Index': %w", err)
		}
	}

	if a.LocRoutNotAllowed != nil {
		object["locRoutNotAllowed"], err = json.Marshal(a.LocRoutNotAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locRoutNotAllowed': %w", err)
		}
	}

	if a.McsPriority != nil {
		object["mcsPriority"], err = json.Marshal(a.McsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsPriority': %w", err)
		}
	}

	if a.McsPriorityLevel != nil {
		object["mcsPriorityLevel"], err = json.Marshal(a.McsPriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsPriorityLevel': %w", err)
		}
	}

	if a.MpsPriority != nil {
		object["mpsPriority"], err = json.Marshal(a.MpsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsPriority': %w", err)
		}
	}

	if a.MpsPriorityLevel != nil {
		object["mpsPriorityLevel"], err = json.Marshal(a.MpsPriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsPriorityLevel': %w", err)
		}
	}

	if a.Offline != nil {
		object["offline"], err = json.Marshal(a.Offline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'offline': %w", err)
		}
	}

	if a.Online != nil {
		object["online"], err = json.Marshal(a.Online)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'online': %w", err)
		}
	}

	if a.PraInfos != nil {
		object["praInfos"], err = json.Marshal(a.PraInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInfos': %w", err)
		}
	}

	if a.RefUmDataLimitIds != nil {
		object["refUmDataLimitIds"], err = json.Marshal(a.RefUmDataLimitIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refUmDataLimitIds': %w", err)
		}
	}

	if len(a.SubscCats) != 0 {
		object["subscCats"], err = json.Marshal(a.SubscCats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscCats': %w", err)
		}
	}

	if a.SubscSpendingLimits != nil {
		object["subscSpendingLimits"], err = json.Marshal(a.SubscSpendingLimits)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscSpendingLimits': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyDnnDataPatch. Returns the specified
// element and whether it was found
func (a SmPolicyDnnDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyDnnDataPatch
func (a *SmPolicyDnnDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyDnnDataPatch to handle AdditionalProperties
func (a *SmPolicyDnnDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefIds"]; found {
		err = json.Unmarshal(raw, &a.BdtRefIds)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefIds': %w", err)
		}
		delete(object, "bdtRefIds")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyDnnDataPatch to handle AdditionalProperties
func (a SmPolicyDnnDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefIds"], err = json.Marshal(a.BdtRefIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefIds': %w", err)
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyNotification. Returns the specified
// element and whether it was found
func (a SmPolicyNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyNotification
func (a *SmPolicyNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyNotification to handle AdditionalProperties
func (a *SmPolicyNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["resourceUri"]; found {
		err = json.Unmarshal(raw, &a.ResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'resourceUri': %w", err)
		}
		delete(object, "resourceUri")
	}

	if raw, found := object["smPolicyDecision"]; found {
		err = json.Unmarshal(raw, &a.SmPolicyDecision)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicyDecision': %w", err)
		}
		delete(object, "smPolicyDecision")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyNotification to handle AdditionalProperties
func (a SmPolicyNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ResourceUri != nil {
		object["resourceUri"], err = json.Marshal(a.ResourceUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resourceUri': %w", err)
		}
	}

	if a.SmPolicyDecision != nil {
		object["smPolicyDecision"], err = json.Marshal(a.SmPolicyDecision)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicyDecision': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicySnssaiData. Returns the specified
// element and whether it was found
func (a SmPolicySnssaiData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicySnssaiData
func (a *SmPolicySnssaiData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicySnssaiData to handle AdditionalProperties
func (a *SmPolicySnssaiData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicyDnnData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicyDnnData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicyDnnData': %w", err)
		}
		delete(object, "smPolicyDnnData")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicySnssaiData to handle AdditionalProperties
func (a SmPolicySnssaiData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmPolicyDnnData != nil {
		object["smPolicyDnnData"], err = json.Marshal(a.SmPolicyDnnData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicyDnnData': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicySnssaiDataPatch. Returns the specified
// element and whether it was found
func (a SmPolicySnssaiDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicySnssaiDataPatch
func (a *SmPolicySnssaiDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicySnssaiDataPatch to handle AdditionalProperties
func (a *SmPolicySnssaiDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smPolicyDnnData"]; found {
		err = json.Unmarshal(raw, &a.SmPolicyDnnData)
		if err != nil {
			return fmt.Errorf("error reading 'smPolicyDnnData': %w", err)
		}
		delete(object, "smPolicyDnnData")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicySnssaiDataPatch to handle AdditionalProperties
func (a SmPolicySnssaiDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmPolicyDnnData != nil {
		object["smPolicyDnnData"], err = json.Marshal(a.SmPolicyDnnData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smPolicyDnnData': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmPolicyUpdateContextData. Returns the specified
// element and whether it was found
func (a SmPolicyUpdateContextData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmPolicyUpdateContextData
func (a *SmPolicyUpdateContextData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmPolicyUpdateContextData to handle AdditionalProperties
func (a *SmPolicyUpdateContextData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["3gppPsDataOffStatus"]; found {
		err = json.Unmarshal(raw, &a.N3gppPsDataOffStatus)
		if err != nil {
			return fmt.Errorf("error reading '3gppPsDataOffStatus': %w", err)
		}
		delete(object, "3gppPsDataOffStatus")
	}

	if raw, found := object["accNetChIds"]; found {
		err = json.Unmarshal(raw, &a.AccNetChIds)
		if err != nil {
			return fmt.Errorf("error reading 'accNetChIds': %w", err)
		}
		delete(object, "accNetChIds")
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["accuUsageReports"]; found {
		err = json.Unmarshal(raw, &a.AccuUsageReports)
		if err != nil {
			return fmt.Errorf("error reading 'accuUsageReports': %w", err)
		}
		delete(object, "accuUsageReports")
	}

	if raw, found := object["addAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.AddAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addAccessInfo': %w", err)
		}
		delete(object, "addAccessInfo")
	}

	if raw, found := object["addIpv6AddrPrefixes"]; found {
		err = json.Unmarshal(raw, &a.AddIpv6AddrPrefixes)
		if err != nil {
			return fmt.Errorf("error reading 'addIpv6AddrPrefixes': %w", err)
		}
		delete(object, "addIpv6AddrPrefixes")
	}

	if raw, found := object["addRelIpv6AddrPrefixes"]; found {
		err = json.Unmarshal(raw, &a.AddRelIpv6AddrPrefixes)
		if err != nil {
			return fmt.Errorf("error reading 'addRelIpv6AddrPrefixes': %w", err)
		}
		delete(object, "addRelIpv6AddrPrefixes")
	}

	if raw, found := object["appDetectionInfos"]; found {
		err = json.Unmarshal(raw, &a.AppDetectionInfos)
		if err != nil {
			return fmt.Errorf("error reading 'appDetectionInfos': %w", err)
		}
		delete(object, "appDetectionInfos")
	}

	if raw, found := object["atsssCapab"]; found {
		err = json.Unmarshal(raw, &a.AtsssCapab)
		if err != nil {
			return fmt.Errorf("error reading 'atsssCapab': %w", err)
		}
		delete(object, "atsssCapab")
	}

	if raw, found := object["authProfIndex"]; found {
		err = json.Unmarshal(raw, &a.AuthProfIndex)
		if err != nil {
			return fmt.Errorf("error reading 'authProfIndex': %w", err)
		}
		delete(object, "authProfIndex")
	}

	if raw, found := object["creditManageStatus"]; found {
		err = json.Unmarshal(raw, &a.CreditManageStatus)
		if err != nil {
			return fmt.Errorf("error reading 'creditManageStatus': %w", err)
		}
		delete(object, "creditManageStatus")
	}

	if raw, found := object["interGrpIds"]; found {
		err = json.Unmarshal(raw, &a.InterGrpIds)
		if err != nil {
			return fmt.Errorf("error reading 'interGrpIds': %w", err)
		}
		delete(object, "interGrpIds")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["ipv4Address"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Address': %w", err)
		}
		delete(object, "ipv4Address")
	}

	if raw, found := object["ipv6AddressPrefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6AddressPrefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6AddressPrefix': %w", err)
		}
		delete(object, "ipv6AddressPrefix")
	}

	if raw, found := object["maPduInd"]; found {
		err = json.Unmarshal(raw, &a.MaPduInd)
		if err != nil {
			return fmt.Errorf("error reading 'maPduInd': %w", err)
		}
		delete(object, "maPduInd")
	}

	if raw, found := object["mulAddrInfos"]; found {
		err = json.Unmarshal(raw, &a.MulAddrInfos)
		if err != nil {
			return fmt.Errorf("error reading 'mulAddrInfos': %w", err)
		}
		delete(object, "mulAddrInfos")
	}

	if raw, found := object["numOfPackFilter"]; found {
		err = json.Unmarshal(raw, &a.NumOfPackFilter)
		if err != nil {
			return fmt.Errorf("error reading 'numOfPackFilter': %w", err)
		}
		delete(object, "numOfPackFilter")
	}

	if raw, found := object["pccRuleId"]; found {
		err = json.Unmarshal(raw, &a.PccRuleId)
		if err != nil {
			return fmt.Errorf("error reading 'pccRuleId': %w", err)
		}
		delete(object, "pccRuleId")
	}

	if raw, found := object["policyDecFailureReports"]; found {
		err = json.Unmarshal(raw, &a.PolicyDecFailureReports)
		if err != nil {
			return fmt.Errorf("error reading 'policyDecFailureReports': %w", err)
		}
		delete(object, "policyDecFailureReports")
	}

	if raw, found := object["qncReports"]; found {
		err = json.Unmarshal(raw, &a.QncReports)
		if err != nil {
			return fmt.Errorf("error reading 'qncReports': %w", err)
		}
		delete(object, "qncReports")
	}

	if raw, found := object["qosFlowUsage"]; found {
		err = json.Unmarshal(raw, &a.QosFlowUsage)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowUsage': %w", err)
		}
		delete(object, "qosFlowUsage")
	}

	if raw, found := object["qosMonReports"]; found {
		err = json.Unmarshal(raw, &a.QosMonReports)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonReports': %w", err)
		}
		delete(object, "qosMonReports")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["refQosIndication"]; found {
		err = json.Unmarshal(raw, &a.RefQosIndication)
		if err != nil {
			return fmt.Errorf("error reading 'refQosIndication': %w", err)
		}
		delete(object, "refQosIndication")
	}

	if raw, found := object["relAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.RelAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'relAccessInfo': %w", err)
		}
		delete(object, "relAccessInfo")
	}

	if raw, found := object["relIpv4Address"]; found {
		err = json.Unmarshal(raw, &a.RelIpv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'relIpv4Address': %w", err)
		}
		delete(object, "relIpv4Address")
	}

	if raw, found := object["relIpv6AddressPrefix"]; found {
		err = json.Unmarshal(raw, &a.RelIpv6AddressPrefix)
		if err != nil {
			return fmt.Errorf("error reading 'relIpv6AddressPrefix': %w", err)
		}
		delete(object, "relIpv6AddressPrefix")
	}

	if raw, found := object["relUeMac"]; found {
		err = json.Unmarshal(raw, &a.RelUeMac)
		if err != nil {
			return fmt.Errorf("error reading 'relUeMac': %w", err)
		}
		delete(object, "relUeMac")
	}

	if raw, found := object["repPolicyCtrlReqTriggers"]; found {
		err = json.Unmarshal(raw, &a.RepPolicyCtrlReqTriggers)
		if err != nil {
			return fmt.Errorf("error reading 'repPolicyCtrlReqTriggers': %w", err)
		}
		delete(object, "repPolicyCtrlReqTriggers")
	}

	if raw, found := object["repPraInfos"]; found {
		err = json.Unmarshal(raw, &a.RepPraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'repPraInfos': %w", err)
		}
		delete(object, "repPraInfos")
	}

	if raw, found := object["ruleReports"]; found {
		err = json.Unmarshal(raw, &a.RuleReports)
		if err != nil {
			return fmt.Errorf("error reading 'ruleReports': %w", err)
		}
		delete(object, "ruleReports")
	}

	if raw, found := object["servNfId"]; found {
		err = json.Unmarshal(raw, &a.ServNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servNfId': %w", err)
		}
		delete(object, "servNfId")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["sessRuleReports"]; found {
		err = json.Unmarshal(raw, &a.SessRuleReports)
		if err != nil {
			return fmt.Errorf("error reading 'sessRuleReports': %w", err)
		}
		delete(object, "sessRuleReports")
	}

	if raw, found := object["subsDefQos"]; found {
		err = json.Unmarshal(raw, &a.SubsDefQos)
		if err != nil {
			return fmt.Errorf("error reading 'subsDefQos': %w", err)
		}
		delete(object, "subsDefQos")
	}

	if raw, found := object["subsSessAmbr"]; found {
		err = json.Unmarshal(raw, &a.SubsSessAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'subsSessAmbr': %w", err)
		}
		delete(object, "subsSessAmbr")
	}

	if raw, found := object["traceReq"]; found {
		err = json.Unmarshal(raw, &a.TraceReq)
		if err != nil {
			return fmt.Errorf("error reading 'traceReq': %w", err)
		}
		delete(object, "traceReq")
	}

	if raw, found := object["trafficDescriptors"]; found {
		err = json.Unmarshal(raw, &a.TrafficDescriptors)
		if err != nil {
			return fmt.Errorf("error reading 'trafficDescriptors': %w", err)
		}
		delete(object, "trafficDescriptors")
	}

	if raw, found := object["tsnBridgeInfo"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeInfo': %w", err)
		}
		delete(object, "tsnBridgeInfo")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if raw, found := object["typesOfNotif"]; found {
		err = json.Unmarshal(raw, &a.TypesOfNotif)
		if err != nil {
			return fmt.Errorf("error reading 'typesOfNotif': %w", err)
		}
		delete(object, "typesOfNotif")
	}

	if raw, found := object["ueInitResReq"]; found {
		err = json.Unmarshal(raw, &a.UeInitResReq)
		if err != nil {
			return fmt.Errorf("error reading 'ueInitResReq': %w", err)
		}
		delete(object, "ueInitResReq")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["userLocationInfo"]; found {
		err = json.Unmarshal(raw, &a.UserLocationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'userLocationInfo': %w", err)
		}
		delete(object, "userLocationInfo")
	}

	if raw, found := object["userLocationInfoTime"]; found {
		err = json.Unmarshal(raw, &a.UserLocationInfoTime)
		if err != nil {
			return fmt.Errorf("error reading 'userLocationInfoTime': %w", err)
		}
		delete(object, "userLocationInfoTime")
	}

	if raw, found := object["vplmnQos"]; found {
		err = json.Unmarshal(raw, &a.VplmnQos)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnQos': %w", err)
		}
		delete(object, "vplmnQos")
	}

	if raw, found := object["vplmnQosNotApp"]; found {
		err = json.Unmarshal(raw, &a.VplmnQosNotApp)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnQosNotApp': %w", err)
		}
		delete(object, "vplmnQosNotApp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmPolicyUpdateContextData to handle AdditionalProperties
func (a SmPolicyUpdateContextData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N3gppPsDataOffStatus != nil {
		object["3gppPsDataOffStatus"], err = json.Marshal(a.N3gppPsDataOffStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '3gppPsDataOffStatus': %w", err)
		}
	}

	if len(a.AccNetChIds) != 0 {
		object["accNetChIds"], err = json.Marshal(a.AccNetChIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accNetChIds': %w", err)
		}
	}

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if len(a.AccuUsageReports) != 0 {
		object["accuUsageReports"], err = json.Marshal(a.AccuUsageReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accuUsageReports': %w", err)
		}
	}

	if a.AddAccessInfo != nil {
		object["addAccessInfo"], err = json.Marshal(a.AddAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addAccessInfo': %w", err)
		}
	}

	if a.AddIpv6AddrPrefixes != nil {
		object["addIpv6AddrPrefixes"], err = json.Marshal(a.AddIpv6AddrPrefixes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addIpv6AddrPrefixes': %w", err)
		}
	}

	if a.AddRelIpv6AddrPrefixes != nil {
		object["addRelIpv6AddrPrefixes"], err = json.Marshal(a.AddRelIpv6AddrPrefixes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addRelIpv6AddrPrefixes': %w", err)
		}
	}

	if len(a.AppDetectionInfos) != 0 {
		object["appDetectionInfos"], err = json.Marshal(a.AppDetectionInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appDetectionInfos': %w", err)
		}
	}

	if a.AtsssCapab != nil {
		object["atsssCapab"], err = json.Marshal(a.AtsssCapab)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssCapab': %w", err)
		}
	}

	if a.AuthProfIndex != nil {
		object["authProfIndex"], err = json.Marshal(a.AuthProfIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authProfIndex': %w", err)
		}
	}

	if a.CreditManageStatus != nil {
		object["creditManageStatus"], err = json.Marshal(a.CreditManageStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'creditManageStatus': %w", err)
		}
	}

	if len(a.InterGrpIds) != 0 {
		object["interGrpIds"], err = json.Marshal(a.InterGrpIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGrpIds': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if len(a.Ipv4Address) != 0 {
		object["ipv4Address"], err = json.Marshal(a.Ipv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Address': %w", err)
		}
	}

	if a.Ipv6AddressPrefix != nil {
		object["ipv6AddressPrefix"], err = json.Marshal(a.Ipv6AddressPrefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6AddressPrefix': %w", err)
		}
	}

	if a.MaPduInd != nil {
		object["maPduInd"], err = json.Marshal(a.MaPduInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maPduInd': %w", err)
		}
	}

	if len(a.MulAddrInfos) != 0 {
		object["mulAddrInfos"], err = json.Marshal(a.MulAddrInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mulAddrInfos': %w", err)
		}
	}

	if a.NumOfPackFilter != nil {
		object["numOfPackFilter"], err = json.Marshal(a.NumOfPackFilter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'numOfPackFilter': %w", err)
		}
	}

	if a.PccRuleId != nil {
		object["pccRuleId"], err = json.Marshal(a.PccRuleId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pccRuleId': %w", err)
		}
	}

	if len(a.PolicyDecFailureReports) != 0 {
		object["policyDecFailureReports"], err = json.Marshal(a.PolicyDecFailureReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'policyDecFailureReports': %w", err)
		}
	}

	if len(a.QncReports) != 0 {
		object["qncReports"], err = json.Marshal(a.QncReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qncReports': %w", err)
		}
	}

	if a.QosFlowUsage != nil {
		object["qosFlowUsage"], err = json.Marshal(a.QosFlowUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowUsage': %w", err)
		}
	}

	if len(a.QosMonReports) != 0 {
		object["qosMonReports"], err = json.Marshal(a.QosMonReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonReports': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RefQosIndication != nil {
		object["refQosIndication"], err = json.Marshal(a.RefQosIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refQosIndication': %w", err)
		}
	}

	if a.RelAccessInfo != nil {
		object["relAccessInfo"], err = json.Marshal(a.RelAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relAccessInfo': %w", err)
		}
	}

	if len(a.RelIpv4Address) != 0 {
		object["relIpv4Address"], err = json.Marshal(a.RelIpv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relIpv4Address': %w", err)
		}
	}

	if a.RelIpv6AddressPrefix != nil {
		object["relIpv6AddressPrefix"], err = json.Marshal(a.RelIpv6AddressPrefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relIpv6AddressPrefix': %w", err)
		}
	}

	if len(a.RelUeMac) != 0 {
		object["relUeMac"], err = json.Marshal(a.RelUeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relUeMac': %w", err)
		}
	}

	if len(a.RepPolicyCtrlReqTriggers) != 0 {
		object["repPolicyCtrlReqTriggers"], err = json.Marshal(a.RepPolicyCtrlReqTriggers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPolicyCtrlReqTriggers': %w", err)
		}
	}

	if a.RepPraInfos != nil {
		object["repPraInfos"], err = json.Marshal(a.RepPraInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPraInfos': %w", err)
		}
	}

	if len(a.RuleReports) != 0 {
		object["ruleReports"], err = json.Marshal(a.RuleReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ruleReports': %w", err)
		}
	}

	if a.ServNfId != nil {
		object["servNfId"], err = json.Marshal(a.ServNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servNfId': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if len(a.SessRuleReports) != 0 {
		object["sessRuleReports"], err = json.Marshal(a.SessRuleReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessRuleReports': %w", err)
		}
	}

	if a.SubsDefQos != nil {
		object["subsDefQos"], err = json.Marshal(a.SubsDefQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsDefQos': %w", err)
		}
	}

	if a.SubsSessAmbr != nil {
		object["subsSessAmbr"], err = json.Marshal(a.SubsSessAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsSessAmbr': %w", err)
		}
	}

	object["traceReq"], err = json.Marshal(a.TraceReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceReq': %w", err)
	}

	if len(a.TrafficDescriptors) != 0 {
		object["trafficDescriptors"], err = json.Marshal(a.TrafficDescriptors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficDescriptors': %w", err)
		}
	}

	if a.TsnBridgeInfo != nil {
		object["tsnBridgeInfo"], err = json.Marshal(a.TsnBridgeInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeInfo': %w", err)
		}
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	if len(a.TypesOfNotif) != 0 {
		object["typesOfNotif"], err = json.Marshal(a.TypesOfNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'typesOfNotif': %w", err)
		}
	}

	if a.UeInitResReq != nil {
		object["ueInitResReq"], err = json.Marshal(a.UeInitResReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueInitResReq': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UserLocationInfo != nil {
		object["userLocationInfo"], err = json.Marshal(a.UserLocationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLocationInfo': %w", err)
		}
	}

	if a.UserLocationInfoTime != nil {
		object["userLocationInfoTime"], err = json.Marshal(a.UserLocationInfoTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLocationInfoTime': %w", err)
		}
	}

	if a.VplmnQos != nil {
		object["vplmnQos"], err = json.Marshal(a.VplmnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vplmnQos': %w", err)
		}
	}

	if a.VplmnQosNotApp != nil {
		object["vplmnQosNotApp"], err = json.Marshal(a.VplmnQosNotApp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vplmnQosNotApp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmallDataRateStatus. Returns the specified
// element and whether it was found
func (a SmallDataRateStatus) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmallDataRateStatus
func (a *SmallDataRateStatus) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmallDataRateStatus to handle AdditionalProperties
func (a *SmallDataRateStatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["remainExReportsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsDl': %w", err)
		}
		delete(object, "remainExReportsDl")
	}

	if raw, found := object["remainExReportsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainExReportsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainExReportsUl': %w", err)
		}
		delete(object, "remainExReportsUl")
	}

	if raw, found := object["remainPacketsDl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsDl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsDl': %w", err)
		}
		delete(object, "remainPacketsDl")
	}

	if raw, found := object["remainPacketsUl"]; found {
		err = json.Unmarshal(raw, &a.RemainPacketsUl)
		if err != nil {
			return fmt.Errorf("error reading 'remainPacketsUl': %w", err)
		}
		delete(object, "remainPacketsUl")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmallDataRateStatus to handle AdditionalProperties
func (a SmallDataRateStatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RemainExReportsDl != nil {
		object["remainExReportsDl"], err = json.Marshal(a.RemainExReportsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsDl': %w", err)
		}
	}

	if a.RemainExReportsUl != nil {
		object["remainExReportsUl"], err = json.Marshal(a.RemainExReportsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainExReportsUl': %w", err)
		}
	}

	if a.RemainPacketsDl != nil {
		object["remainPacketsDl"], err = json.Marshal(a.RemainPacketsDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsDl': %w", err)
		}
	}

	if a.RemainPacketsUl != nil {
		object["remainPacketsUl"], err = json.Marshal(a.RemainPacketsUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remainPacketsUl': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmallDataRateStatusInfo. Returns the specified
// element and whether it was found
func (a SmallDataRateStatusInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmallDataRateStatusInfo
func (a *SmallDataRateStatusInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmallDataRateStatusInfo to handle AdditionalProperties
func (a *SmallDataRateStatusInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["Dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'Dnn': %w", err)
		}
		delete(object, "Dnn")
	}

	if raw, found := object["SmallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'SmallDataRateStatus': %w", err)
		}
		delete(object, "SmallDataRateStatus")
	}

	if raw, found := object["Snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'Snssai': %w", err)
		}
		delete(object, "Snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmallDataRateStatusInfo to handle AdditionalProperties
func (a SmallDataRateStatusInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["Dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'Dnn': %w", err)
	}

	object["SmallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'SmallDataRateStatus': %w", err)
	}

	object["Snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'Snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfChangeInfo. Returns the specified
// element and whether it was found
func (a SmfChangeInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfChangeInfo
func (a *SmfChangeInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfChangeInfo to handle AdditionalProperties
func (a *SmfChangeInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pduSessionIdList"]; found {
		err = json.Unmarshal(raw, &a.PduSessionIdList)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionIdList': %w", err)
		}
		delete(object, "pduSessionIdList")
	}

	if raw, found := object["smfChangeInd"]; found {
		err = json.Unmarshal(raw, &a.SmfChangeInd)
		if err != nil {
			return fmt.Errorf("error reading 'smfChangeInd': %w", err)
		}
		delete(object, "smfChangeInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfChangeInfo to handle AdditionalProperties
func (a SmfChangeInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["pduSessionIdList"], err = json.Marshal(a.PduSessionIdList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionIdList': %w", err)
	}

	object["smfChangeInd"], err = json.Marshal(a.SmfChangeInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfChangeInd': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfInfo. Returns the specified
// element and whether it was found
func (a SmfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfInfo
func (a *SmfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfInfo to handle AdditionalProperties
func (a *SmfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["sNssaiSmfInfoList"]; found {
		err = json.Unmarshal(raw, &a.SNssaiSmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'sNssaiSmfInfoList': %w", err)
		}
		delete(object, "sNssaiSmfInfoList")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["taiRangeList"]; found {
		err = json.Unmarshal(raw, &a.TaiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'taiRangeList': %w", err)
		}
		delete(object, "taiRangeList")
	}

	if raw, found := object["vsmfSupportInd"]; found {
		err = json.Unmarshal(raw, &a.VsmfSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfSupportInd': %w", err)
		}
		delete(object, "vsmfSupportInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfInfo to handle AdditionalProperties
func (a SmfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.PgwFqdn != nil {
		object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	object["sNssaiSmfInfoList"], err = json.Marshal(a.SNssaiSmfInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssaiSmfInfoList': %w", err)
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	if len(a.TaiRangeList) != 0 {
		object["taiRangeList"], err = json.Marshal(a.TaiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiRangeList': %w", err)
		}
	}

	if a.VsmfSupportInd != nil {
		object["vsmfSupportInd"], err = json.Marshal(a.VsmfSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfSupportInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfRegistration. Returns the specified
// element and whether it was found
func (a SmfRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfRegistration
func (a *SmfRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfRegistration to handle AdditionalProperties
func (a *SmfRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["deregCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.DeregCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'deregCallbackUri': %w", err)
		}
		delete(object, "deregCallbackUri")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["emergencyServices"]; found {
		err = json.Unmarshal(raw, &a.EmergencyServices)
		if err != nil {
			return fmt.Errorf("error reading 'emergencyServices': %w", err)
		}
		delete(object, "emergencyServices")
	}

	if raw, found := object["epdgInd"]; found {
		err = json.Unmarshal(raw, &a.EpdgInd)
		if err != nil {
			return fmt.Errorf("error reading 'epdgInd': %w", err)
		}
		delete(object, "epdgInd")
	}

	if raw, found := object["pcscfRestorationCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.PcscfRestorationCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfRestorationCallbackUri': %w", err)
		}
		delete(object, "pcscfRestorationCallbackUri")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["registrationReason"]; found {
		err = json.Unmarshal(raw, &a.RegistrationReason)
		if err != nil {
			return fmt.Errorf("error reading 'registrationReason': %w", err)
		}
		delete(object, "registrationReason")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["smfSetId"]; found {
		err = json.Unmarshal(raw, &a.SmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smfSetId': %w", err)
		}
		delete(object, "smfSetId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfRegistration to handle AdditionalProperties
func (a SmfRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	if a.DeregCallbackUri != nil {
		object["deregCallbackUri"], err = json.Marshal(a.DeregCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deregCallbackUri': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.EmergencyServices != nil {
		object["emergencyServices"], err = json.Marshal(a.EmergencyServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'emergencyServices': %w", err)
		}
	}

	if a.EpdgInd != nil {
		object["epdgInd"], err = json.Marshal(a.EpdgInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epdgInd': %w", err)
		}
	}

	if a.PcscfRestorationCallbackUri != nil {
		object["pcscfRestorationCallbackUri"], err = json.Marshal(a.PcscfRestorationCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfRestorationCallbackUri': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	if a.PgwFqdn != nil {
		object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if a.RegistrationReason != nil {
		object["registrationReason"], err = json.Marshal(a.RegistrationReason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationReason': %w", err)
		}
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	object["singleNssai"], err = json.Marshal(a.SingleNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
	}

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	if a.SmfSetId != nil {
		object["smfSetId"], err = json.Marshal(a.SmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfSetId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfRegistrationInfo. Returns the specified
// element and whether it was found
func (a SmfRegistrationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfRegistrationInfo
func (a *SmfRegistrationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfRegistrationInfo to handle AdditionalProperties
func (a *SmfRegistrationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smfRegistrationList"]; found {
		err = json.Unmarshal(raw, &a.SmfRegistrationList)
		if err != nil {
			return fmt.Errorf("error reading 'smfRegistrationList': %w", err)
		}
		delete(object, "smfRegistrationList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfRegistrationInfo to handle AdditionalProperties
func (a SmfRegistrationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smfRegistrationList"], err = json.Marshal(a.SmfRegistrationList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfRegistrationList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfSelectionData. Returns the specified
// element and whether it was found
func (a SmfSelectionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfSelectionData
func (a *SmfSelectionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfSelectionData to handle AdditionalProperties
func (a *SmfSelectionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["candidates"]; found {
		err = json.Unmarshal(raw, &a.Candidates)
		if err != nil {
			return fmt.Errorf("error reading 'candidates': %w", err)
		}
		delete(object, "candidates")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["mappingSnssai"]; found {
		err = json.Unmarshal(raw, &a.MappingSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappingSnssai': %w", err)
		}
		delete(object, "mappingSnssai")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["unsuppDnn"]; found {
		err = json.Unmarshal(raw, &a.UnsuppDnn)
		if err != nil {
			return fmt.Errorf("error reading 'unsuppDnn': %w", err)
		}
		delete(object, "unsuppDnn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfSelectionData to handle AdditionalProperties
func (a SmfSelectionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["candidates"], err = json.Marshal(a.Candidates)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'candidates': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.MappingSnssai != nil {
		object["mappingSnssai"], err = json.Marshal(a.MappingSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingSnssai': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if a.UnsuppDnn != nil {
		object["unsuppDnn"], err = json.Marshal(a.UnsuppDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unsuppDnn': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfSelectionSubscriptionData. Returns the specified
// element and whether it was found
func (a SmfSelectionSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfSelectionSubscriptionData
func (a *SmfSelectionSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfSelectionSubscriptionData to handle AdditionalProperties
func (a *SmfSelectionSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedSnssaiInfosId"]; found {
		err = json.Unmarshal(raw, &a.SharedSnssaiInfosId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSnssaiInfosId': %w", err)
		}
		delete(object, "sharedSnssaiInfosId")
	}

	if raw, found := object["subscribedSnssaiInfos"]; found {
		err = json.Unmarshal(raw, &a.SubscribedSnssaiInfos)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedSnssaiInfos': %w", err)
		}
		delete(object, "subscribedSnssaiInfos")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfSelectionSubscriptionData to handle AdditionalProperties
func (a SmfSelectionSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SharedSnssaiInfosId) != 0 {
		object["sharedSnssaiInfosId"], err = json.Marshal(a.SharedSnssaiInfosId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSnssaiInfosId': %w", err)
		}
	}

	if a.SubscribedSnssaiInfos != nil {
		object["subscribedSnssaiInfos"], err = json.Marshal(a.SubscribedSnssaiInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedSnssaiInfos': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfSubscriptionInfo. Returns the specified
// element and whether it was found
func (a SmfSubscriptionInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfSubscriptionInfo
func (a *SmfSubscriptionInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfSubscriptionInfo to handle AdditionalProperties
func (a *SmfSubscriptionInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smfSubscriptionList"]; found {
		err = json.Unmarshal(raw, &a.SmfSubscriptionList)
		if err != nil {
			return fmt.Errorf("error reading 'smfSubscriptionList': %w", err)
		}
		delete(object, "smfSubscriptionList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfSubscriptionInfo to handle AdditionalProperties
func (a SmfSubscriptionInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smfSubscriptionList"], err = json.Marshal(a.SmfSubscriptionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfSubscriptionList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfSubscriptionItem. Returns the specified
// element and whether it was found
func (a SmfSubscriptionItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfSubscriptionItem
func (a *SmfSubscriptionItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfSubscriptionItem to handle AdditionalProperties
func (a *SmfSubscriptionItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfSubscriptionItem to handle AdditionalProperties
func (a SmfSubscriptionItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsManagementSubscriptionData. Returns the specified
// element and whether it was found
func (a SmsManagementSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsManagementSubscriptionData
func (a *SmsManagementSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsManagementSubscriptionData to handle AdditionalProperties
func (a *SmsManagementSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["moSmsBarringAll"]; found {
		err = json.Unmarshal(raw, &a.MoSmsBarringAll)
		if err != nil {
			return fmt.Errorf("error reading 'moSmsBarringAll': %w", err)
		}
		delete(object, "moSmsBarringAll")
	}

	if raw, found := object["moSmsBarringRoaming"]; found {
		err = json.Unmarshal(raw, &a.MoSmsBarringRoaming)
		if err != nil {
			return fmt.Errorf("error reading 'moSmsBarringRoaming': %w", err)
		}
		delete(object, "moSmsBarringRoaming")
	}

	if raw, found := object["moSmsSubscribed"]; found {
		err = json.Unmarshal(raw, &a.MoSmsSubscribed)
		if err != nil {
			return fmt.Errorf("error reading 'moSmsSubscribed': %w", err)
		}
		delete(object, "moSmsSubscribed")
	}

	if raw, found := object["mtSmsBarringAll"]; found {
		err = json.Unmarshal(raw, &a.MtSmsBarringAll)
		if err != nil {
			return fmt.Errorf("error reading 'mtSmsBarringAll': %w", err)
		}
		delete(object, "mtSmsBarringAll")
	}

	if raw, found := object["mtSmsBarringRoaming"]; found {
		err = json.Unmarshal(raw, &a.MtSmsBarringRoaming)
		if err != nil {
			return fmt.Errorf("error reading 'mtSmsBarringRoaming': %w", err)
		}
		delete(object, "mtSmsBarringRoaming")
	}

	if raw, found := object["mtSmsSubscribed"]; found {
		err = json.Unmarshal(raw, &a.MtSmsSubscribed)
		if err != nil {
			return fmt.Errorf("error reading 'mtSmsSubscribed': %w", err)
		}
		delete(object, "mtSmsSubscribed")
	}

	if raw, found := object["sharedSmsMngDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsMngDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsMngDataIds': %w", err)
		}
		delete(object, "sharedSmsMngDataIds")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsManagementSubscriptionData to handle AdditionalProperties
func (a SmsManagementSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MoSmsBarringAll != nil {
		object["moSmsBarringAll"], err = json.Marshal(a.MoSmsBarringAll)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moSmsBarringAll': %w", err)
		}
	}

	if a.MoSmsBarringRoaming != nil {
		object["moSmsBarringRoaming"], err = json.Marshal(a.MoSmsBarringRoaming)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moSmsBarringRoaming': %w", err)
		}
	}

	if a.MoSmsSubscribed != nil {
		object["moSmsSubscribed"], err = json.Marshal(a.MoSmsSubscribed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moSmsSubscribed': %w", err)
		}
	}

	if a.MtSmsBarringAll != nil {
		object["mtSmsBarringAll"], err = json.Marshal(a.MtSmsBarringAll)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtSmsBarringAll': %w", err)
		}
	}

	if a.MtSmsBarringRoaming != nil {
		object["mtSmsBarringRoaming"], err = json.Marshal(a.MtSmsBarringRoaming)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtSmsBarringRoaming': %w", err)
		}
	}

	if a.MtSmsSubscribed != nil {
		object["mtSmsSubscribed"], err = json.Marshal(a.MtSmsSubscribed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtSmsSubscribed': %w", err)
		}
	}

	if len(a.SharedSmsMngDataIds) != 0 {
		object["sharedSmsMngDataIds"], err = json.Marshal(a.SharedSmsMngDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsMngDataIds': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsSubscriptionData. Returns the specified
// element and whether it was found
func (a SmsSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsSubscriptionData
func (a *SmsSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsSubscriptionData to handle AdditionalProperties
func (a *SmsSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedSmsSubsDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsSubsDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsSubsDataId': %w", err)
		}
		delete(object, "sharedSmsSubsDataId")
	}

	if raw, found := object["smsSubscribed"]; found {
		err = json.Unmarshal(raw, &a.SmsSubscribed)
		if err != nil {
			return fmt.Errorf("error reading 'smsSubscribed': %w", err)
		}
		delete(object, "smsSubscribed")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsSubscriptionData to handle AdditionalProperties
func (a SmsSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SharedSmsSubsDataId) != 0 {
		object["sharedSmsSubsDataId"], err = json.Marshal(a.SharedSmsSubsDataId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsSubsDataId': %w", err)
		}
	}

	if a.SmsSubscribed != nil {
		object["smsSubscribed"], err = json.Marshal(a.SmsSubscribed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsSubscribed': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmscData. Returns the specified
// element and whether it was found
func (a SmscData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmscData
func (a *SmscData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmscData to handle AdditionalProperties
func (a *SmscData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smscDiameterAddress"]; found {
		err = json.Unmarshal(raw, &a.SmscDiameterAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smscDiameterAddress': %w", err)
		}
		delete(object, "smscDiameterAddress")
	}

	if raw, found := object["smscMapAddress"]; found {
		err = json.Unmarshal(raw, &a.SmscMapAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smscMapAddress': %w", err)
		}
		delete(object, "smscMapAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmscData to handle AdditionalProperties
func (a SmscData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmscDiameterAddress != nil {
		object["smscDiameterAddress"], err = json.Marshal(a.SmscDiameterAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smscDiameterAddress': %w", err)
		}
	}

	if len(a.SmscMapAddress) != 0 {
		object["smscMapAddress"], err = json.Marshal(a.SmscMapAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smscMapAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsfInfo. Returns the specified
// element and whether it was found
func (a SmsfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsfInfo
func (a *SmsfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsfInfo to handle AdditionalProperties
func (a *SmsfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["smsfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmsfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInstanceId': %w", err)
		}
		delete(object, "smsfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsfInfo to handle AdditionalProperties
func (a SmsfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["smsfInstanceId"], err = json.Marshal(a.SmsfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smsfInstanceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsfRegistration. Returns the specified
// element and whether it was found
func (a SmsfRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsfRegistration
func (a *SmsfRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsfRegistration to handle AdditionalProperties
func (a *SmsfRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["smsfDiameterAddress"]; found {
		err = json.Unmarshal(raw, &a.SmsfDiameterAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smsfDiameterAddress': %w", err)
		}
		delete(object, "smsfDiameterAddress")
	}

	if raw, found := object["smsfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmsfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInstanceId': %w", err)
		}
		delete(object, "smsfInstanceId")
	}

	if raw, found := object["smsfMAPAddress"]; found {
		err = json.Unmarshal(raw, &a.SmsfMAPAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smsfMAPAddress': %w", err)
		}
		delete(object, "smsfMAPAddress")
	}

	if raw, found := object["smsfSetId"]; found {
		err = json.Unmarshal(raw, &a.SmsfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfSetId': %w", err)
		}
		delete(object, "smsfSetId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsfRegistration to handle AdditionalProperties
func (a SmsfRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	if a.SmsfDiameterAddress != nil {
		object["smsfDiameterAddress"], err = json.Marshal(a.SmsfDiameterAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfDiameterAddress': %w", err)
		}
	}

	object["smsfInstanceId"], err = json.Marshal(a.SmsfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smsfInstanceId': %w", err)
	}

	if len(a.SmsfMAPAddress) != 0 {
		object["smsfMAPAddress"], err = json.Marshal(a.SmsfMAPAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfMAPAddress': %w", err)
		}
	}

	if a.SmsfSetId != nil {
		object["smsfSetId"], err = json.Marshal(a.SmsfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfSetId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiExtension. Returns the specified
// element and whether it was found
func (a SnssaiExtension) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiExtension
func (a *SnssaiExtension) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiExtension to handle AdditionalProperties
func (a *SnssaiExtension) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sdRanges"]; found {
		err = json.Unmarshal(raw, &a.SdRanges)
		if err != nil {
			return fmt.Errorf("error reading 'sdRanges': %w", err)
		}
		delete(object, "sdRanges")
	}

	if raw, found := object["wildcardSd"]; found {
		err = json.Unmarshal(raw, &a.WildcardSd)
		if err != nil {
			return fmt.Errorf("error reading 'wildcardSd': %w", err)
		}
		delete(object, "wildcardSd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiExtension to handle AdditionalProperties
func (a SnssaiExtension) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SdRanges) != 0 {
		object["sdRanges"], err = json.Marshal(a.SdRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdRanges': %w", err)
		}
	}

	if a.WildcardSd != nil {
		object["wildcardSd"], err = json.Marshal(a.WildcardSd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wildcardSd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiInfo. Returns the specified
// element and whether it was found
func (a SnssaiInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiInfo
func (a *SnssaiInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiInfo to handle AdditionalProperties
func (a *SnssaiInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnInfos"]; found {
		err = json.Unmarshal(raw, &a.DnnInfos)
		if err != nil {
			return fmt.Errorf("error reading 'dnnInfos': %w", err)
		}
		delete(object, "dnnInfos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiInfo to handle AdditionalProperties
func (a SnssaiInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnnInfos"], err = json.Marshal(a.DnnInfos)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnnInfos': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiRouteSelectionDescriptor. Returns the specified
// element and whether it was found
func (a SnssaiRouteSelectionDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiRouteSelectionDescriptor
func (a *SnssaiRouteSelectionDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiRouteSelectionDescriptor to handle AdditionalProperties
func (a *SnssaiRouteSelectionDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnRouteSelDescs"]; found {
		err = json.Unmarshal(raw, &a.DnnRouteSelDescs)
		if err != nil {
			return fmt.Errorf("error reading 'dnnRouteSelDescs': %w", err)
		}
		delete(object, "dnnRouteSelDescs")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiRouteSelectionDescriptor to handle AdditionalProperties
func (a SnssaiRouteSelectionDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnnRouteSelDescs) != 0 {
		object["dnnRouteSelDescs"], err = json.Marshal(a.DnnRouteSelDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnRouteSelDescs': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiSmfInfoItem. Returns the specified
// element and whether it was found
func (a SnssaiSmfInfoItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiSmfInfoItem
func (a *SnssaiSmfInfoItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiSmfInfoItem to handle AdditionalProperties
func (a *SnssaiSmfInfoItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnSmfInfoList"]; found {
		err = json.Unmarshal(raw, &a.DnnSmfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'dnnSmfInfoList': %w", err)
		}
		delete(object, "dnnSmfInfoList")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiSmfInfoItem to handle AdditionalProperties
func (a SnssaiSmfInfoItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnnSmfInfoList"], err = json.Marshal(a.DnnSmfInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnnSmfInfoList': %w", err)
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiUpfInfoItem. Returns the specified
// element and whether it was found
func (a SnssaiUpfInfoItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiUpfInfoItem
func (a *SnssaiUpfInfoItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiUpfInfoItem to handle AdditionalProperties
func (a *SnssaiUpfInfoItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnUpfInfoList"]; found {
		err = json.Unmarshal(raw, &a.DnnUpfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'dnnUpfInfoList': %w", err)
		}
		delete(object, "dnnUpfInfoList")
	}

	if raw, found := object["redundantTransport"]; found {
		err = json.Unmarshal(raw, &a.RedundantTransport)
		if err != nil {
			return fmt.Errorf("error reading 'redundantTransport': %w", err)
		}
		delete(object, "redundantTransport")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiUpfInfoItem to handle AdditionalProperties
func (a SnssaiUpfInfoItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnnUpfInfoList"], err = json.Marshal(a.DnnUpfInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnnUpfInfoList': %w", err)
	}

	if a.RedundantTransport != nil {
		object["redundantTransport"], err = json.Marshal(a.RedundantTransport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantTransport': %w", err)
		}
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SorData. Returns the specified
// element and whether it was found
func (a SorData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SorData
func (a *SorData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SorData to handle AdditionalProperties
func (a *SorData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["sorMacIue"]; found {
		err = json.Unmarshal(raw, &a.SorMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'sorMacIue': %w", err)
		}
		delete(object, "sorMacIue")
	}

	if raw, found := object["sorXmacIue"]; found {
		err = json.Unmarshal(raw, &a.SorXmacIue)
		if err != nil {
			return fmt.Errorf("error reading 'sorXmacIue': %w", err)
		}
		delete(object, "sorXmacIue")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SorData to handle AdditionalProperties
func (a SorData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	if len(a.SorMacIue) != 0 {
		object["sorMacIue"], err = json.Marshal(a.SorMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorMacIue': %w", err)
		}
	}

	if len(a.SorXmacIue) != 0 {
		object["sorXmacIue"], err = json.Marshal(a.SorXmacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorXmacIue': %w", err)
		}
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SorInfo. Returns the specified
// element and whether it was found
func (a SorInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SorInfo
func (a *SorInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SorInfo to handle AdditionalProperties
func (a *SorInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ackInd"]; found {
		err = json.Unmarshal(raw, &a.AckInd)
		if err != nil {
			return fmt.Errorf("error reading 'ackInd': %w", err)
		}
		delete(object, "ackInd")
	}

	if raw, found := object["countersor"]; found {
		err = json.Unmarshal(raw, &a.Countersor)
		if err != nil {
			return fmt.Errorf("error reading 'countersor': %w", err)
		}
		delete(object, "countersor")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["sorMacIausf"]; found {
		err = json.Unmarshal(raw, &a.SorMacIausf)
		if err != nil {
			return fmt.Errorf("error reading 'sorMacIausf': %w", err)
		}
		delete(object, "sorMacIausf")
	}

	if raw, found := object["steeringContainer"]; found {
		err = json.Unmarshal(raw, &a.SteeringContainer)
		if err != nil {
			return fmt.Errorf("error reading 'steeringContainer': %w", err)
		}
		delete(object, "steeringContainer")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SorInfo to handle AdditionalProperties
func (a SorInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ackInd"], err = json.Marshal(a.AckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ackInd': %w", err)
	}

	if len(a.Countersor) != 0 {
		object["countersor"], err = json.Marshal(a.Countersor)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'countersor': %w", err)
		}
	}

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	if len(a.SorMacIausf) != 0 {
		object["sorMacIausf"], err = json.Marshal(a.SorMacIausf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorMacIausf': %w", err)
		}
	}

	if a.SteeringContainer != nil {
		object["steeringContainer"], err = json.Marshal(a.SteeringContainer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'steeringContainer': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SorSecurityInfo. Returns the specified
// element and whether it was found
func (a SorSecurityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SorSecurityInfo
func (a *SorSecurityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SorSecurityInfo to handle AdditionalProperties
func (a *SorSecurityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["counterSor"]; found {
		err = json.Unmarshal(raw, &a.CounterSor)
		if err != nil {
			return fmt.Errorf("error reading 'counterSor': %w", err)
		}
		delete(object, "counterSor")
	}

	if raw, found := object["sorMacIausf"]; found {
		err = json.Unmarshal(raw, &a.SorMacIausf)
		if err != nil {
			return fmt.Errorf("error reading 'sorMacIausf': %w", err)
		}
		delete(object, "sorMacIausf")
	}

	if raw, found := object["sorXmacIue"]; found {
		err = json.Unmarshal(raw, &a.SorXmacIue)
		if err != nil {
			return fmt.Errorf("error reading 'sorXmacIue': %w", err)
		}
		delete(object, "sorXmacIue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SorSecurityInfo to handle AdditionalProperties
func (a SorSecurityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["counterSor"], err = json.Marshal(a.CounterSor)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'counterSor': %w", err)
	}

	object["sorMacIausf"], err = json.Marshal(a.SorMacIausf)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sorMacIausf': %w", err)
	}

	if len(a.SorXmacIue) != 0 {
		object["sorXmacIue"], err = json.Marshal(a.SorXmacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorXmacIue': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SorUpdateInfo. Returns the specified
// element and whether it was found
func (a SorUpdateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SorUpdateInfo
func (a *SorUpdateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SorUpdateInfo to handle AdditionalProperties
func (a *SorUpdateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["vplmnId"]; found {
		err = json.Unmarshal(raw, &a.VplmnId)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnId': %w", err)
		}
		delete(object, "vplmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SorUpdateInfo to handle AdditionalProperties
func (a SorUpdateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["vplmnId"], err = json.Marshal(a.VplmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'vplmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SpatialValidity. Returns the specified
// element and whether it was found
func (a SpatialValidity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SpatialValidity
func (a *SpatialValidity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SpatialValidity to handle AdditionalProperties
func (a *SpatialValidity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["presenceInfoList"]; found {
		err = json.Unmarshal(raw, &a.PresenceInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInfoList': %w", err)
		}
		delete(object, "presenceInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SpatialValidity to handle AdditionalProperties
func (a SpatialValidity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["presenceInfoList"], err = json.Marshal(a.PresenceInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'presenceInfoList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SpatialValidityRm. Returns the specified
// element and whether it was found
func (a SpatialValidityRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SpatialValidityRm
func (a *SpatialValidityRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SpatialValidityRm to handle AdditionalProperties
func (a *SpatialValidityRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["presenceInfoList"]; found {
		err = json.Unmarshal(raw, &a.PresenceInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInfoList': %w", err)
		}
		delete(object, "presenceInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SpatialValidityRm to handle AdditionalProperties
func (a SpatialValidityRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["presenceInfoList"], err = json.Marshal(a.PresenceInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'presenceInfoList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SponsorConnectivityData. Returns the specified
// element and whether it was found
func (a SponsorConnectivityData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SponsorConnectivityData
func (a *SponsorConnectivityData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SponsorConnectivityData to handle AdditionalProperties
func (a *SponsorConnectivityData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aspIds"]; found {
		err = json.Unmarshal(raw, &a.AspIds)
		if err != nil {
			return fmt.Errorf("error reading 'aspIds': %w", err)
		}
		delete(object, "aspIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SponsorConnectivityData to handle AdditionalProperties
func (a SponsorConnectivityData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["aspIds"], err = json.Marshal(a.AspIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'aspIds': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SscModes. Returns the specified
// element and whether it was found
func (a SscModes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SscModes
func (a *SscModes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SscModes to handle AdditionalProperties
func (a *SscModes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedSscModes"]; found {
		err = json.Unmarshal(raw, &a.AllowedSscModes)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSscModes': %w", err)
		}
		delete(object, "allowedSscModes")
	}

	if raw, found := object["defaultSscMode"]; found {
		err = json.Unmarshal(raw, &a.DefaultSscMode)
		if err != nil {
			return fmt.Errorf("error reading 'defaultSscMode': %w", err)
		}
		delete(object, "defaultSscMode")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SscModes to handle AdditionalProperties
func (a SscModes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedSscModes) != 0 {
		object["allowedSscModes"], err = json.Marshal(a.AllowedSscModes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSscModes': %w", err)
		}
	}

	object["defaultSscMode"], err = json.Marshal(a.DefaultSscMode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultSscMode': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StatusInfo. Returns the specified
// element and whether it was found
func (a StatusInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StatusInfo
func (a *StatusInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StatusInfo to handle AdditionalProperties
func (a *StatusInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["cnAssistedRanPara"]; found {
		err = json.Unmarshal(raw, &a.CnAssistedRanPara)
		if err != nil {
			return fmt.Errorf("error reading 'cnAssistedRanPara': %w", err)
		}
		delete(object, "cnAssistedRanPara")
	}

	if raw, found := object["resourceStatus"]; found {
		err = json.Unmarshal(raw, &a.ResourceStatus)
		if err != nil {
			return fmt.Errorf("error reading 'resourceStatus': %w", err)
		}
		delete(object, "resourceStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StatusInfo to handle AdditionalProperties
func (a StatusInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.CnAssistedRanPara != nil {
		object["cnAssistedRanPara"], err = json.Marshal(a.CnAssistedRanPara)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnAssistedRanPara': %w", err)
		}
	}

	object["resourceStatus"], err = json.Marshal(a.ResourceStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StatusNotification. Returns the specified
// element and whether it was found
func (a StatusNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StatusNotification
func (a *StatusNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StatusNotification to handle AdditionalProperties
func (a *StatusNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["newSmfId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfId': %w", err)
		}
		delete(object, "newSmfId")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["statusInfo"]; found {
		err = json.Unmarshal(raw, &a.StatusInfo)
		if err != nil {
			return fmt.Errorf("error reading 'statusInfo': %w", err)
		}
		delete(object, "statusInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StatusNotification to handle AdditionalProperties
func (a StatusNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.NewSmfId != nil {
		object["newSmfId"], err = json.Marshal(a.NewSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfId': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	object["statusInfo"], err = json.Marshal(a.StatusInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'statusInfo': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SteeringInfo. Returns the specified
// element and whether it was found
func (a SteeringInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SteeringInfo
func (a *SteeringInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SteeringInfo to handle AdditionalProperties
func (a *SteeringInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTechList"]; found {
		err = json.Unmarshal(raw, &a.AccessTechList)
		if err != nil {
			return fmt.Errorf("error reading 'accessTechList': %w", err)
		}
		delete(object, "accessTechList")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SteeringInfo to handle AdditionalProperties
func (a SteeringInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessTechList) != 0 {
		object["accessTechList"], err = json.Marshal(a.AccessTechList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTechList': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SteeringMode. Returns the specified
// element and whether it was found
func (a SteeringMode) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SteeringMode
func (a *SteeringMode) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SteeringMode to handle AdditionalProperties
func (a *SteeringMode) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["3gLoad"]; found {
		err = json.Unmarshal(raw, &a.N3gLoad)
		if err != nil {
			return fmt.Errorf("error reading '3gLoad': %w", err)
		}
		delete(object, "3gLoad")
	}

	if raw, found := object["active"]; found {
		err = json.Unmarshal(raw, &a.Active)
		if err != nil {
			return fmt.Errorf("error reading 'active': %w", err)
		}
		delete(object, "active")
	}

	if raw, found := object["prioAcc"]; found {
		err = json.Unmarshal(raw, &a.PrioAcc)
		if err != nil {
			return fmt.Errorf("error reading 'prioAcc': %w", err)
		}
		delete(object, "prioAcc")
	}

	if raw, found := object["standby"]; found {
		err = json.Unmarshal(raw, &a.Standby)
		if err != nil {
			return fmt.Errorf("error reading 'standby': %w", err)
		}
		delete(object, "standby")
	}

	if raw, found := object["steerModeValue"]; found {
		err = json.Unmarshal(raw, &a.SteerModeValue)
		if err != nil {
			return fmt.Errorf("error reading 'steerModeValue': %w", err)
		}
		delete(object, "steerModeValue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SteeringMode to handle AdditionalProperties
func (a SteeringMode) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N3gLoad != nil {
		object["3gLoad"], err = json.Marshal(a.N3gLoad)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '3gLoad': %w", err)
		}
	}

	if len(a.Active) != 0 {
		object["active"], err = json.Marshal(a.Active)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'active': %w", err)
		}
	}

	if len(a.PrioAcc) != 0 {
		object["prioAcc"], err = json.Marshal(a.PrioAcc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'prioAcc': %w", err)
		}
	}

	if len(a.Standby) != 0 {
		object["standby"], err = json.Marshal(a.Standby)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'standby': %w", err)
		}
	}

	object["steerModeValue"], err = json.Marshal(a.SteerModeValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'steerModeValue': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StoredSearchResult. Returns the specified
// element and whether it was found
func (a StoredSearchResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StoredSearchResult
func (a *StoredSearchResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StoredSearchResult to handle AdditionalProperties
func (a *StoredSearchResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfInstances"]; found {
		err = json.Unmarshal(raw, &a.NfInstances)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstances': %w", err)
		}
		delete(object, "nfInstances")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StoredSearchResult to handle AdditionalProperties
func (a StoredSearchResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfInstances"], err = json.Marshal(a.NfInstances)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstances': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscribedDefaultQos. Returns the specified
// element and whether it was found
func (a SubscribedDefaultQos) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscribedDefaultQos
func (a *SubscribedDefaultQos) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscribedDefaultQos to handle AdditionalProperties
func (a *SubscribedDefaultQos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["priorityLevel"]; found {
		err = json.Unmarshal(raw, &a.PriorityLevel)
		if err != nil {
			return fmt.Errorf("error reading 'priorityLevel': %w", err)
		}
		delete(object, "priorityLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscribedDefaultQos to handle AdditionalProperties
func (a SubscribedDefaultQos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5qi"], err = json.Marshal(a.N5qi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5qi': %w", err)
	}

	object["arp"], err = json.Marshal(a.Arp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'arp': %w", err)
	}

	if a.PriorityLevel != 0 {
		object["priorityLevel"], err = json.Marshal(a.PriorityLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priorityLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscribedSnssai. Returns the specified
// element and whether it was found
func (a SubscribedSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscribedSnssai
func (a *SubscribedSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscribedSnssai to handle AdditionalProperties
func (a *SubscribedSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["defaultIndication"]; found {
		err = json.Unmarshal(raw, &a.DefaultIndication)
		if err != nil {
			return fmt.Errorf("error reading 'defaultIndication': %w", err)
		}
		delete(object, "defaultIndication")
	}

	if raw, found := object["subscribedSnssai"]; found {
		err = json.Unmarshal(raw, &a.SubscribedSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedSnssai': %w", err)
		}
		delete(object, "subscribedSnssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscribedSnssai to handle AdditionalProperties
func (a SubscribedSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DefaultIndication != nil {
		object["defaultIndication"], err = json.Marshal(a.DefaultIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultIndication': %w", err)
		}
	}

	object["subscribedSnssai"], err = json.Marshal(a.SubscribedSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscribedSnssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriptionData. Returns the specified
// element and whether it was found
func (a SubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriptionData
func (a *SubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriptionData to handle AdditionalProperties
func (a *SubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfStatusUri"]; found {
		err = json.Unmarshal(raw, &a.AmfStatusUri)
		if err != nil {
			return fmt.Errorf("error reading 'amfStatusUri': %w", err)
		}
		delete(object, "amfStatusUri")
	}

	if raw, found := object["guamiList"]; found {
		err = json.Unmarshal(raw, &a.GuamiList)
		if err != nil {
			return fmt.Errorf("error reading 'guamiList': %w", err)
		}
		delete(object, "guamiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriptionData to handle AdditionalProperties
func (a SubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["amfStatusUri"], err = json.Marshal(a.AmfStatusUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfStatusUri': %w", err)
	}

	if len(a.GuamiList) != 0 {
		object["guamiList"], err = json.Marshal(a.GuamiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guamiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriptionDataSets. Returns the specified
// element and whether it was found
func (a SubscriptionDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriptionDataSets
func (a *SubscriptionDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriptionDataSets to handle AdditionalProperties
func (a *SubscriptionDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amData"]; found {
		err = json.Unmarshal(raw, &a.AmData)
		if err != nil {
			return fmt.Errorf("error reading 'amData': %w", err)
		}
		delete(object, "amData")
	}

	if raw, found := object["lcsBroadcastAssistanceTypesData"]; found {
		err = json.Unmarshal(raw, &a.LcsBroadcastAssistanceTypesData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsBroadcastAssistanceTypesData': %w", err)
		}
		delete(object, "lcsBroadcastAssistanceTypesData")
	}

	if raw, found := object["lcsMoData"]; found {
		err = json.Unmarshal(raw, &a.LcsMoData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsMoData': %w", err)
		}
		delete(object, "lcsMoData")
	}

	if raw, found := object["lcsPrivacyData"]; found {
		err = json.Unmarshal(raw, &a.LcsPrivacyData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsPrivacyData': %w", err)
		}
		delete(object, "lcsPrivacyData")
	}

	if raw, found := object["smData"]; found {
		err = json.Unmarshal(raw, &a.SmData)
		if err != nil {
			return fmt.Errorf("error reading 'smData': %w", err)
		}
		delete(object, "smData")
	}

	if raw, found := object["smfSelData"]; found {
		err = json.Unmarshal(raw, &a.SmfSelData)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelData': %w", err)
		}
		delete(object, "smfSelData")
	}

	if raw, found := object["smsMngData"]; found {
		err = json.Unmarshal(raw, &a.SmsMngData)
		if err != nil {
			return fmt.Errorf("error reading 'smsMngData': %w", err)
		}
		delete(object, "smsMngData")
	}

	if raw, found := object["smsSubsData"]; found {
		err = json.Unmarshal(raw, &a.SmsSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'smsSubsData': %w", err)
		}
		delete(object, "smsSubsData")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["uecAmfData"]; found {
		err = json.Unmarshal(raw, &a.UecAmfData)
		if err != nil {
			return fmt.Errorf("error reading 'uecAmfData': %w", err)
		}
		delete(object, "uecAmfData")
	}

	if raw, found := object["uecSmfData"]; found {
		err = json.Unmarshal(raw, &a.UecSmfData)
		if err != nil {
			return fmt.Errorf("error reading 'uecSmfData': %w", err)
		}
		delete(object, "uecSmfData")
	}

	if raw, found := object["uecSmsfData"]; found {
		err = json.Unmarshal(raw, &a.UecSmsfData)
		if err != nil {
			return fmt.Errorf("error reading 'uecSmsfData': %w", err)
		}
		delete(object, "uecSmsfData")
	}

	if raw, found := object["v2xData"]; found {
		err = json.Unmarshal(raw, &a.V2xData)
		if err != nil {
			return fmt.Errorf("error reading 'v2xData': %w", err)
		}
		delete(object, "v2xData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriptionDataSets to handle AdditionalProperties
func (a SubscriptionDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmData != nil {
		object["amData"], err = json.Marshal(a.AmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amData': %w", err)
		}
	}

	if a.LcsBroadcastAssistanceTypesData != nil {
		object["lcsBroadcastAssistanceTypesData"], err = json.Marshal(a.LcsBroadcastAssistanceTypesData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsBroadcastAssistanceTypesData': %w", err)
		}
	}

	if a.LcsMoData != nil {
		object["lcsMoData"], err = json.Marshal(a.LcsMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsMoData': %w", err)
		}
	}

	if a.LcsPrivacyData != nil {
		object["lcsPrivacyData"], err = json.Marshal(a.LcsPrivacyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsPrivacyData': %w", err)
		}
	}

	if len(a.SmData) != 0 {
		object["smData"], err = json.Marshal(a.SmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smData': %w", err)
		}
	}

	if a.SmfSelData != nil {
		object["smfSelData"], err = json.Marshal(a.SmfSelData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfSelData': %w", err)
		}
	}

	if a.SmsMngData != nil {
		object["smsMngData"], err = json.Marshal(a.SmsMngData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsMngData': %w", err)
		}
	}

	if a.SmsSubsData != nil {
		object["smsSubsData"], err = json.Marshal(a.SmsSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsSubsData': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UecAmfData != nil {
		object["uecAmfData"], err = json.Marshal(a.UecAmfData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uecAmfData': %w", err)
		}
	}

	if a.UecSmfData != nil {
		object["uecSmfData"], err = json.Marshal(a.UecSmfData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uecSmfData': %w", err)
		}
	}

	if a.UecSmsfData != nil {
		object["uecSmsfData"], err = json.Marshal(a.UecSmsfData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uecSmsfData': %w", err)
		}
	}

	if a.V2xData != nil {
		object["v2xData"], err = json.Marshal(a.V2xData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'v2xData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriptionDataSubscriptions. Returns the specified
// element and whether it was found
func (a SubscriptionDataSubscriptions) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriptionDataSubscriptions
func (a *SubscriptionDataSubscriptions) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriptionDataSubscriptions to handle AdditionalProperties
func (a *SubscriptionDataSubscriptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["callbackReference"]; found {
		err = json.Unmarshal(raw, &a.CallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'callbackReference': %w", err)
		}
		delete(object, "callbackReference")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if raw, found := object["originalCallbackReference"]; found {
		err = json.Unmarshal(raw, &a.OriginalCallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'originalCallbackReference': %w", err)
		}
		delete(object, "originalCallbackReference")
	}

	if raw, found := object["sdmSubscription"]; found {
		err = json.Unmarshal(raw, &a.SdmSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'sdmSubscription': %w", err)
		}
		delete(object, "sdmSubscription")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueId"]; found {
		err = json.Unmarshal(raw, &a.UeId)
		if err != nil {
			return fmt.Errorf("error reading 'ueId': %w", err)
		}
		delete(object, "ueId")
	}

	if raw, found := object["uniqueSubscription"]; found {
		err = json.Unmarshal(raw, &a.UniqueSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'uniqueSubscription': %w", err)
		}
		delete(object, "uniqueSubscription")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriptionDataSubscriptions to handle AdditionalProperties
func (a SubscriptionDataSubscriptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["callbackReference"], err = json.Marshal(a.CallbackReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'callbackReference': %w", err)
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
	}

	if a.OriginalCallbackReference != nil {
		object["originalCallbackReference"], err = json.Marshal(a.OriginalCallbackReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'originalCallbackReference': %w", err)
		}
	}

	if a.SdmSubscription != nil {
		object["sdmSubscription"], err = json.Marshal(a.SdmSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sdmSubscription': %w", err)
		}
	}

	if a.SubscriptionId != nil {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.UeId) != 0 {
		object["ueId"], err = json.Marshal(a.UeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueId': %w", err)
		}
	}

	if a.UniqueSubscription != nil {
		object["uniqueSubscription"], err = json.Marshal(a.UniqueSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uniqueSubscription': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SuggestedPacketNumDl. Returns the specified
// element and whether it was found
func (a SuggestedPacketNumDl) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SuggestedPacketNumDl
func (a *SuggestedPacketNumDl) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SuggestedPacketNumDl to handle AdditionalProperties
func (a *SuggestedPacketNumDl) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["suggestedPacketNumDl"]; found {
		err = json.Unmarshal(raw, &a.SuggestedPacketNumDl)
		if err != nil {
			return fmt.Errorf("error reading 'suggestedPacketNumDl': %w", err)
		}
		delete(object, "suggestedPacketNumDl")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SuggestedPacketNumDl to handle AdditionalProperties
func (a SuggestedPacketNumDl) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["suggestedPacketNumDl"], err = json.Marshal(a.SuggestedPacketNumDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suggestedPacketNumDl': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SupiRange. Returns the specified
// element and whether it was found
func (a SupiRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SupiRange
func (a *SupiRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SupiRange to handle AdditionalProperties
func (a *SupiRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SupiRange to handle AdditionalProperties
func (a SupiRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if a.Pattern != nil {
		object["pattern"], err = json.Marshal(a.Pattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SupportedNssaiAvailabilityData. Returns the specified
// element and whether it was found
func (a SupportedNssaiAvailabilityData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SupportedNssaiAvailabilityData
func (a *SupportedNssaiAvailabilityData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SupportedNssaiAvailabilityData to handle AdditionalProperties
func (a *SupportedNssaiAvailabilityData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supportedSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.SupportedSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'supportedSnssaiList': %w", err)
		}
		delete(object, "supportedSnssaiList")
	}

	if raw, found := object["tai"]; found {
		err = json.Unmarshal(raw, &a.Tai)
		if err != nil {
			return fmt.Errorf("error reading 'tai': %w", err)
		}
		delete(object, "tai")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["taiRangeList"]; found {
		err = json.Unmarshal(raw, &a.TaiRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'taiRangeList': %w", err)
		}
		delete(object, "taiRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SupportedNssaiAvailabilityData to handle AdditionalProperties
func (a SupportedNssaiAvailabilityData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["supportedSnssaiList"], err = json.Marshal(a.SupportedSnssaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supportedSnssaiList': %w", err)
	}

	object["tai"], err = json.Marshal(a.Tai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tai': %w", err)
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	if len(a.TaiRangeList) != 0 {
		object["taiRangeList"], err = json.Marshal(a.TaiRangeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiRangeList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TS29122InvalidParam. Returns the specified
// element and whether it was found
func (a TS29122InvalidParam) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TS29122InvalidParam
func (a *TS29122InvalidParam) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TS29122InvalidParam to handle AdditionalProperties
func (a *TS29122InvalidParam) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["param"]; found {
		err = json.Unmarshal(raw, &a.Param)
		if err != nil {
			return fmt.Errorf("error reading 'param': %w", err)
		}
		delete(object, "param")
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &a.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
		delete(object, "reason")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TS29122InvalidParam to handle AdditionalProperties
func (a TS29122InvalidParam) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["param"], err = json.Marshal(a.Param)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'param': %w", err)
	}

	if a.Reason != nil {
		object["reason"], err = json.Marshal(a.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TS29122ProblemDetails. Returns the specified
// element and whether it was found
func (a TS29122ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TS29122ProblemDetails
func (a *TS29122ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TS29122ProblemDetails to handle AdditionalProperties
func (a *TS29122ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TS29122ProblemDetails to handle AdditionalProperties
func (a TS29122ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TS29522EventNotification. Returns the specified
// element and whether it was found
func (a TS29522EventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TS29522EventNotification
func (a *TS29522EventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TS29522EventNotification to handle AdditionalProperties
func (a *TS29522EventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAckUri"]; found {
		err = json.Unmarshal(raw, &a.AfAckUri)
		if err != nil {
			return fmt.Errorf("error reading 'afAckUri': %w", err)
		}
		delete(object, "afAckUri")
	}

	if raw, found := object["afTransId"]; found {
		err = json.Unmarshal(raw, &a.AfTransId)
		if err != nil {
			return fmt.Errorf("error reading 'afTransId': %w", err)
		}
		delete(object, "afTransId")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["sourceDnai"]; found {
		err = json.Unmarshal(raw, &a.SourceDnai)
		if err != nil {
			return fmt.Errorf("error reading 'sourceDnai': %w", err)
		}
		delete(object, "sourceDnai")
	}

	if raw, found := object["sourceTrafficRoute"]; found {
		err = json.Unmarshal(raw, &a.SourceTrafficRoute)
		if err != nil {
			return fmt.Errorf("error reading 'sourceTrafficRoute': %w", err)
		}
		delete(object, "sourceTrafficRoute")
	}

	if raw, found := object["srcUeIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.SrcUeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'srcUeIpv4Addr': %w", err)
		}
		delete(object, "srcUeIpv4Addr")
	}

	if raw, found := object["srcUeIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.SrcUeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'srcUeIpv6Prefix': %w", err)
		}
		delete(object, "srcUeIpv6Prefix")
	}

	if raw, found := object["subscribedEvent"]; found {
		err = json.Unmarshal(raw, &a.SubscribedEvent)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedEvent': %w", err)
		}
		delete(object, "subscribedEvent")
	}

	if raw, found := object["targetDnai"]; found {
		err = json.Unmarshal(raw, &a.TargetDnai)
		if err != nil {
			return fmt.Errorf("error reading 'targetDnai': %w", err)
		}
		delete(object, "targetDnai")
	}

	if raw, found := object["targetTrafficRoute"]; found {
		err = json.Unmarshal(raw, &a.TargetTrafficRoute)
		if err != nil {
			return fmt.Errorf("error reading 'targetTrafficRoute': %w", err)
		}
		delete(object, "targetTrafficRoute")
	}

	if raw, found := object["tgtUeIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.TgtUeIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'tgtUeIpv4Addr': %w", err)
		}
		delete(object, "tgtUeIpv4Addr")
	}

	if raw, found := object["tgtUeIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.TgtUeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'tgtUeIpv6Prefix': %w", err)
		}
		delete(object, "tgtUeIpv6Prefix")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TS29522EventNotification to handle AdditionalProperties
func (a TS29522EventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAckUri != nil {
		object["afAckUri"], err = json.Marshal(a.AfAckUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckUri': %w", err)
		}
	}

	if a.AfTransId != nil {
		object["afTransId"], err = json.Marshal(a.AfTransId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afTransId': %w", err)
		}
	}

	object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.SourceDnai != nil {
		object["sourceDnai"], err = json.Marshal(a.SourceDnai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceDnai': %w", err)
		}
	}

	object["sourceTrafficRoute"], err = json.Marshal(a.SourceTrafficRoute)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sourceTrafficRoute': %w", err)
	}

	if a.SrcUeIpv4Addr != nil {
		object["srcUeIpv4Addr"], err = json.Marshal(a.SrcUeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcUeIpv4Addr': %w", err)
		}
	}

	if a.SrcUeIpv6Prefix != nil {
		object["srcUeIpv6Prefix"], err = json.Marshal(a.SrcUeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcUeIpv6Prefix': %w", err)
		}
	}

	object["subscribedEvent"], err = json.Marshal(a.SubscribedEvent)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscribedEvent': %w", err)
	}

	if a.TargetDnai != nil {
		object["targetDnai"], err = json.Marshal(a.TargetDnai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetDnai': %w", err)
		}
	}

	object["targetTrafficRoute"], err = json.Marshal(a.TargetTrafficRoute)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'targetTrafficRoute': %w", err)
	}

	if a.TgtUeIpv4Addr != nil {
		object["tgtUeIpv4Addr"], err = json.Marshal(a.TgtUeIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tgtUeIpv4Addr': %w", err)
		}
	}

	if a.TgtUeIpv6Prefix != nil {
		object["tgtUeIpv6Prefix"], err = json.Marshal(a.TgtUeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tgtUeIpv6Prefix': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TS29522TrafficInfluSub. Returns the specified
// element and whether it was found
func (a TS29522TrafficInfluSub) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TS29522TrafficInfluSub
func (a *TS29522TrafficInfluSub) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TS29522TrafficInfluSub to handle AdditionalProperties
func (a *TS29522TrafficInfluSub) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afServiceId"]; found {
		err = json.Unmarshal(raw, &a.AfServiceId)
		if err != nil {
			return fmt.Errorf("error reading 'afServiceId': %w", err)
		}
		delete(object, "afServiceId")
	}

	if raw, found := object["afTransId"]; found {
		err = json.Unmarshal(raw, &a.AfTransId)
		if err != nil {
			return fmt.Errorf("error reading 'afTransId': %w", err)
		}
		delete(object, "afTransId")
	}

	if raw, found := object["anyUeInd"]; found {
		err = json.Unmarshal(raw, &a.AnyUeInd)
		if err != nil {
			return fmt.Errorf("error reading 'anyUeInd': %w", err)
		}
		delete(object, "anyUeInd")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["externalGroupId"]; found {
		err = json.Unmarshal(raw, &a.ExternalGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'externalGroupId': %w", err)
		}
		delete(object, "externalGroupId")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["macAddr"]; found {
		err = json.Unmarshal(raw, &a.MacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'macAddr': %w", err)
		}
		delete(object, "macAddr")
	}

	if raw, found := object["notificationDestination"]; found {
		err = json.Unmarshal(raw, &a.NotificationDestination)
		if err != nil {
			return fmt.Errorf("error reading 'notificationDestination': %w", err)
		}
		delete(object, "notificationDestination")
	}

	if raw, found := object["requestTestNotification"]; found {
		err = json.Unmarshal(raw, &a.RequestTestNotification)
		if err != nil {
			return fmt.Errorf("error reading 'requestTestNotification': %w", err)
		}
		delete(object, "requestTestNotification")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["subscribedEvents"]; found {
		err = json.Unmarshal(raw, &a.SubscribedEvents)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedEvents': %w", err)
		}
		delete(object, "subscribedEvents")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["tfcCorrInd"]; found {
		err = json.Unmarshal(raw, &a.TfcCorrInd)
		if err != nil {
			return fmt.Errorf("error reading 'tfcCorrInd': %w", err)
		}
		delete(object, "tfcCorrInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["validGeoZoneIds"]; found {
		err = json.Unmarshal(raw, &a.ValidGeoZoneIds)
		if err != nil {
			return fmt.Errorf("error reading 'validGeoZoneIds': %w", err)
		}
		delete(object, "validGeoZoneIds")
	}

	if raw, found := object["websockNotifConfig"]; found {
		err = json.Unmarshal(raw, &a.WebsockNotifConfig)
		if err != nil {
			return fmt.Errorf("error reading 'websockNotifConfig': %w", err)
		}
		delete(object, "websockNotifConfig")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TS29522TrafficInfluSub to handle AdditionalProperties
func (a TS29522TrafficInfluSub) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AfAckInd != nil {
		object["afAckInd"], err = json.Marshal(a.AfAckInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
		}
	}

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AfServiceId != nil {
		object["afServiceId"], err = json.Marshal(a.AfServiceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afServiceId': %w", err)
		}
	}

	if a.AfTransId != nil {
		object["afTransId"], err = json.Marshal(a.AfTransId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afTransId': %w", err)
		}
	}

	if a.AnyUeInd != nil {
		object["anyUeInd"], err = json.Marshal(a.AnyUeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUeInd': %w", err)
		}
	}

	if a.AppReloInd != nil {
		object["appReloInd"], err = json.Marshal(a.AppReloInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
		}
	}

	if a.DnaiChgType != nil {
		object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	if a.ExternalGroupId != nil {
		object["externalGroupId"], err = json.Marshal(a.ExternalGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalGroupId': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if a.Ipv4Addr != nil {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if len(a.MacAddr) != 0 {
		object["macAddr"], err = json.Marshal(a.MacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'macAddr': %w", err)
		}
	}

	if a.NotificationDestination != nil {
		object["notificationDestination"], err = json.Marshal(a.NotificationDestination)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notificationDestination': %w", err)
		}
	}

	if a.RequestTestNotification != nil {
		object["requestTestNotification"], err = json.Marshal(a.RequestTestNotification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestTestNotification': %w", err)
		}
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.SubscribedEvents) != 0 {
		object["subscribedEvents"], err = json.Marshal(a.SubscribedEvents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedEvents': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TempValidities != nil {
		object["tempValidities"], err = json.Marshal(a.TempValidities)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
		}
	}

	if a.TfcCorrInd != nil {
		object["tfcCorrInd"], err = json.Marshal(a.TfcCorrInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tfcCorrInd': %w", err)
		}
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	if len(a.ValidGeoZoneIds) != 0 {
		object["validGeoZoneIds"], err = json.Marshal(a.ValidGeoZoneIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validGeoZoneIds': %w", err)
		}
	}

	if a.WebsockNotifConfig != nil {
		object["websockNotifConfig"], err = json.Marshal(a.WebsockNotifConfig)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'websockNotifConfig': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TacInfo. Returns the specified
// element and whether it was found
func (a TacInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TacInfo
func (a *TacInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TacInfo to handle AdditionalProperties
func (a *TacInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["tacList"]; found {
		err = json.Unmarshal(raw, &a.TacList)
		if err != nil {
			return fmt.Errorf("error reading 'tacList': %w", err)
		}
		delete(object, "tacList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TacInfo to handle AdditionalProperties
func (a TacInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["tacList"], err = json.Marshal(a.TacList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tacList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TacRange. Returns the specified
// element and whether it was found
func (a TacRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TacRange
func (a *TacRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TacRange to handle AdditionalProperties
func (a *TacRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["end"]; found {
		err = json.Unmarshal(raw, &a.End)
		if err != nil {
			return fmt.Errorf("error reading 'end': %w", err)
		}
		delete(object, "end")
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["start"]; found {
		err = json.Unmarshal(raw, &a.Start)
		if err != nil {
			return fmt.Errorf("error reading 'start': %w", err)
		}
		delete(object, "start")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TacRange to handle AdditionalProperties
func (a TacRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.End) != 0 {
		object["end"], err = json.Marshal(a.End)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'end': %w", err)
		}
	}

	if a.Pattern != nil {
		object["pattern"], err = json.Marshal(a.Pattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
		}
	}

	if len(a.Start) != 0 {
		object["start"], err = json.Marshal(a.Start)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'start': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Tai. Returns the specified
// element and whether it was found
func (a Tai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Tai
func (a *Tai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Tai to handle AdditionalProperties
func (a *Tai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["tac"]; found {
		err = json.Unmarshal(raw, &a.Tac)
		if err != nil {
			return fmt.Errorf("error reading 'tac': %w", err)
		}
		delete(object, "tac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Tai to handle AdditionalProperties
func (a Tai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["tac"], err = json.Marshal(a.Tac)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tac': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TaiRange. Returns the specified
// element and whether it was found
func (a TaiRange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TaiRange
func (a *TaiRange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TaiRange to handle AdditionalProperties
func (a *TaiRange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["tacRangeList"]; found {
		err = json.Unmarshal(raw, &a.TacRangeList)
		if err != nil {
			return fmt.Errorf("error reading 'tacRangeList': %w", err)
		}
		delete(object, "tacRangeList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TaiRange to handle AdditionalProperties
func (a TaiRange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["tacRangeList"], err = json.Marshal(a.TacRangeList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tacRangeList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TemporalValidity. Returns the specified
// element and whether it was found
func (a TemporalValidity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TemporalValidity
func (a *TemporalValidity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TemporalValidity to handle AdditionalProperties
func (a *TemporalValidity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["startTime"]; found {
		err = json.Unmarshal(raw, &a.StartTime)
		if err != nil {
			return fmt.Errorf("error reading 'startTime': %w", err)
		}
		delete(object, "startTime")
	}

	if raw, found := object["stopTime"]; found {
		err = json.Unmarshal(raw, &a.StopTime)
		if err != nil {
			return fmt.Errorf("error reading 'stopTime': %w", err)
		}
		delete(object, "stopTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TemporalValidity to handle AdditionalProperties
func (a TemporalValidity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.StartTime != nil {
		object["startTime"], err = json.Marshal(a.StartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'startTime': %w", err)
		}
	}

	if a.StopTime != nil {
		object["stopTime"], err = json.Marshal(a.StopTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stopTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TerminationInfo. Returns the specified
// element and whether it was found
func (a TerminationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TerminationInfo
func (a *TerminationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TerminationInfo to handle AdditionalProperties
func (a *TerminationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["termCause"]; found {
		err = json.Unmarshal(raw, &a.TermCause)
		if err != nil {
			return fmt.Errorf("error reading 'termCause': %w", err)
		}
		delete(object, "termCause")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TerminationInfo to handle AdditionalProperties
func (a TerminationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["resUri"], err = json.Marshal(a.ResUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
	}

	object["termCause"], err = json.Marshal(a.TermCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'termCause': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TerminationNotification. Returns the specified
// element and whether it was found
func (a TerminationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TerminationNotification
func (a *TerminationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TerminationNotification to handle AdditionalProperties
func (a *TerminationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["resourceUri"]; found {
		err = json.Unmarshal(raw, &a.ResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'resourceUri': %w", err)
		}
		delete(object, "resourceUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TerminationNotification to handle AdditionalProperties
func (a TerminationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cause"], err = json.Marshal(a.Cause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cause': %w", err)
	}

	object["resourceUri"], err = json.Marshal(a.ResourceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceUri': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TimePeriod. Returns the specified
// element and whether it was found
func (a TimePeriod) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimePeriod
func (a *TimePeriod) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimePeriod to handle AdditionalProperties
func (a *TimePeriod) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxNumPeriod"]; found {
		err = json.Unmarshal(raw, &a.MaxNumPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'maxNumPeriod': %w", err)
		}
		delete(object, "maxNumPeriod")
	}

	if raw, found := object["period"]; found {
		err = json.Unmarshal(raw, &a.Period)
		if err != nil {
			return fmt.Errorf("error reading 'period': %w", err)
		}
		delete(object, "period")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimePeriod to handle AdditionalProperties
func (a TimePeriod) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxNumPeriod != nil {
		object["maxNumPeriod"], err = json.Marshal(a.MaxNumPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxNumPeriod': %w", err)
		}
	}

	object["period"], err = json.Marshal(a.Period)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'period': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TimeWindow. Returns the specified
// element and whether it was found
func (a TimeWindow) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimeWindow
func (a *TimeWindow) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimeWindow to handle AdditionalProperties
func (a *TimeWindow) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["startTime"]; found {
		err = json.Unmarshal(raw, &a.StartTime)
		if err != nil {
			return fmt.Errorf("error reading 'startTime': %w", err)
		}
		delete(object, "startTime")
	}

	if raw, found := object["stopTime"]; found {
		err = json.Unmarshal(raw, &a.StopTime)
		if err != nil {
			return fmt.Errorf("error reading 'stopTime': %w", err)
		}
		delete(object, "stopTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimeWindow to handle AdditionalProperties
func (a TimeWindow) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["startTime"], err = json.Marshal(a.StartTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'startTime': %w", err)
	}

	object["stopTime"], err = json.Marshal(a.StopTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'stopTime': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TnapId. Returns the specified
// element and whether it was found
func (a TnapId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TnapId
func (a *TnapId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TnapId to handle AdditionalProperties
func (a *TnapId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bssId"]; found {
		err = json.Unmarshal(raw, &a.BssId)
		if err != nil {
			return fmt.Errorf("error reading 'bssId': %w", err)
		}
		delete(object, "bssId")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ssId"]; found {
		err = json.Unmarshal(raw, &a.SsId)
		if err != nil {
			return fmt.Errorf("error reading 'ssId': %w", err)
		}
		delete(object, "ssId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TnapId to handle AdditionalProperties
func (a TnapId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BssId != nil {
		object["bssId"], err = json.Marshal(a.BssId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bssId': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	if a.SsId != nil {
		object["ssId"], err = json.Marshal(a.SsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ssId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TngfInfo. Returns the specified
// element and whether it was found
func (a TngfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TngfInfo
func (a *TngfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TngfInfo to handle AdditionalProperties
func (a *TngfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endpointFqdn"]; found {
		err = json.Unmarshal(raw, &a.EndpointFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'endpointFqdn': %w", err)
		}
		delete(object, "endpointFqdn")
	}

	if raw, found := object["ipv4EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4EndpointAddresses': %w", err)
		}
		delete(object, "ipv4EndpointAddresses")
	}

	if raw, found := object["ipv6EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv6EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6EndpointAddresses': %w", err)
		}
		delete(object, "ipv6EndpointAddresses")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TngfInfo to handle AdditionalProperties
func (a TngfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndpointFqdn != nil {
		object["endpointFqdn"], err = json.Marshal(a.EndpointFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endpointFqdn': %w", err)
		}
	}

	if len(a.Ipv4EndpointAddresses) != 0 {
		object["ipv4EndpointAddresses"], err = json.Marshal(a.Ipv4EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4EndpointAddresses': %w", err)
		}
	}

	if len(a.Ipv6EndpointAddresses) != 0 {
		object["ipv6EndpointAddresses"], err = json.Marshal(a.Ipv6EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6EndpointAddresses': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TraceData. Returns the specified
// element and whether it was found
func (a TraceData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TraceData
func (a *TraceData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TraceData to handle AdditionalProperties
func (a *TraceData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["collectionEntityIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.CollectionEntityIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'collectionEntityIpv4Addr': %w", err)
		}
		delete(object, "collectionEntityIpv4Addr")
	}

	if raw, found := object["collectionEntityIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.CollectionEntityIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'collectionEntityIpv6Addr': %w", err)
		}
		delete(object, "collectionEntityIpv6Addr")
	}

	if raw, found := object["eventList"]; found {
		err = json.Unmarshal(raw, &a.EventList)
		if err != nil {
			return fmt.Errorf("error reading 'eventList': %w", err)
		}
		delete(object, "eventList")
	}

	if raw, found := object["interfaceList"]; found {
		err = json.Unmarshal(raw, &a.InterfaceList)
		if err != nil {
			return fmt.Errorf("error reading 'interfaceList': %w", err)
		}
		delete(object, "interfaceList")
	}

	if raw, found := object["neTypeList"]; found {
		err = json.Unmarshal(raw, &a.NeTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'neTypeList': %w", err)
		}
		delete(object, "neTypeList")
	}

	if raw, found := object["traceDepth"]; found {
		err = json.Unmarshal(raw, &a.TraceDepth)
		if err != nil {
			return fmt.Errorf("error reading 'traceDepth': %w", err)
		}
		delete(object, "traceDepth")
	}

	if raw, found := object["traceRef"]; found {
		err = json.Unmarshal(raw, &a.TraceRef)
		if err != nil {
			return fmt.Errorf("error reading 'traceRef': %w", err)
		}
		delete(object, "traceRef")
	}

	if raw, found := object["traceReportingConsumerUri"]; found {
		err = json.Unmarshal(raw, &a.TraceReportingConsumerUri)
		if err != nil {
			return fmt.Errorf("error reading 'traceReportingConsumerUri': %w", err)
		}
		delete(object, "traceReportingConsumerUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TraceData to handle AdditionalProperties
func (a TraceData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CollectionEntityIpv4Addr) != 0 {
		object["collectionEntityIpv4Addr"], err = json.Marshal(a.CollectionEntityIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionEntityIpv4Addr': %w", err)
		}
	}

	if a.CollectionEntityIpv6Addr != nil {
		object["collectionEntityIpv6Addr"], err = json.Marshal(a.CollectionEntityIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'collectionEntityIpv6Addr': %w", err)
		}
	}

	object["eventList"], err = json.Marshal(a.EventList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventList': %w", err)
	}

	if len(a.InterfaceList) != 0 {
		object["interfaceList"], err = json.Marshal(a.InterfaceList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interfaceList': %w", err)
		}
	}

	object["neTypeList"], err = json.Marshal(a.NeTypeList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'neTypeList': %w", err)
	}

	object["traceDepth"], err = json.Marshal(a.TraceDepth)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceDepth': %w", err)
	}

	object["traceRef"], err = json.Marshal(a.TraceRef)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceRef': %w", err)
	}

	if a.TraceReportingConsumerUri != nil {
		object["traceReportingConsumerUri"], err = json.Marshal(a.TraceReportingConsumerUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traceReportingConsumerUri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TraceDataResponse. Returns the specified
// element and whether it was found
func (a TraceDataResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TraceDataResponse
func (a *TraceDataResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TraceDataResponse to handle AdditionalProperties
func (a *TraceDataResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedTraceDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedTraceDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedTraceDataId': %w", err)
		}
		delete(object, "sharedTraceDataId")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TraceDataResponse to handle AdditionalProperties
func (a TraceDataResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SharedTraceDataId) != 0 {
		object["sharedTraceDataId"], err = json.Marshal(a.SharedTraceDataId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedTraceDataId': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficControlData. Returns the specified
// element and whether it was found
func (a TrafficControlData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficControlData
func (a *TrafficControlData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficControlData to handle AdditionalProperties
func (a *TrafficControlData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addRedirectInfo"]; found {
		err = json.Unmarshal(raw, &a.AddRedirectInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addRedirectInfo': %w", err)
		}
		delete(object, "addRedirectInfo")
	}

	if raw, found := object["flowStatus"]; found {
		err = json.Unmarshal(raw, &a.FlowStatus)
		if err != nil {
			return fmt.Errorf("error reading 'flowStatus': %w", err)
		}
		delete(object, "flowStatus")
	}

	if raw, found := object["mulAccCtrl"]; found {
		err = json.Unmarshal(raw, &a.MulAccCtrl)
		if err != nil {
			return fmt.Errorf("error reading 'mulAccCtrl': %w", err)
		}
		delete(object, "mulAccCtrl")
	}

	if raw, found := object["muteNotif"]; found {
		err = json.Unmarshal(raw, &a.MuteNotif)
		if err != nil {
			return fmt.Errorf("error reading 'muteNotif': %w", err)
		}
		delete(object, "muteNotif")
	}

	if raw, found := object["redirectInfo"]; found {
		err = json.Unmarshal(raw, &a.RedirectInfo)
		if err != nil {
			return fmt.Errorf("error reading 'redirectInfo': %w", err)
		}
		delete(object, "redirectInfo")
	}

	if raw, found := object["routeToLocs"]; found {
		err = json.Unmarshal(raw, &a.RouteToLocs)
		if err != nil {
			return fmt.Errorf("error reading 'routeToLocs': %w", err)
		}
		delete(object, "routeToLocs")
	}

	if raw, found := object["steerFun"]; found {
		err = json.Unmarshal(raw, &a.SteerFun)
		if err != nil {
			return fmt.Errorf("error reading 'steerFun': %w", err)
		}
		delete(object, "steerFun")
	}

	if raw, found := object["steerModeDl"]; found {
		err = json.Unmarshal(raw, &a.SteerModeDl)
		if err != nil {
			return fmt.Errorf("error reading 'steerModeDl': %w", err)
		}
		delete(object, "steerModeDl")
	}

	if raw, found := object["steerModeUl"]; found {
		err = json.Unmarshal(raw, &a.SteerModeUl)
		if err != nil {
			return fmt.Errorf("error reading 'steerModeUl': %w", err)
		}
		delete(object, "steerModeUl")
	}

	if raw, found := object["tcId"]; found {
		err = json.Unmarshal(raw, &a.TcId)
		if err != nil {
			return fmt.Errorf("error reading 'tcId': %w", err)
		}
		delete(object, "tcId")
	}

	if raw, found := object["traffCorreInd"]; found {
		err = json.Unmarshal(raw, &a.TraffCorreInd)
		if err != nil {
			return fmt.Errorf("error reading 'traffCorreInd': %w", err)
		}
		delete(object, "traffCorreInd")
	}

	if raw, found := object["trafficSteeringPolIdDl"]; found {
		err = json.Unmarshal(raw, &a.TrafficSteeringPolIdDl)
		if err != nil {
			return fmt.Errorf("error reading 'trafficSteeringPolIdDl': %w", err)
		}
		delete(object, "trafficSteeringPolIdDl")
	}

	if raw, found := object["trafficSteeringPolIdUl"]; found {
		err = json.Unmarshal(raw, &a.TrafficSteeringPolIdUl)
		if err != nil {
			return fmt.Errorf("error reading 'trafficSteeringPolIdUl': %w", err)
		}
		delete(object, "trafficSteeringPolIdUl")
	}

	if raw, found := object["upPathChgEvent"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgEvent)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgEvent': %w", err)
		}
		delete(object, "upPathChgEvent")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficControlData to handle AdditionalProperties
func (a TrafficControlData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddRedirectInfo) != 0 {
		object["addRedirectInfo"], err = json.Marshal(a.AddRedirectInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addRedirectInfo': %w", err)
		}
	}

	if a.FlowStatus != nil {
		object["flowStatus"], err = json.Marshal(a.FlowStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowStatus': %w", err)
		}
	}

	if a.MulAccCtrl != nil {
		object["mulAccCtrl"], err = json.Marshal(a.MulAccCtrl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mulAccCtrl': %w", err)
		}
	}

	if a.MuteNotif != nil {
		object["muteNotif"], err = json.Marshal(a.MuteNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'muteNotif': %w", err)
		}
	}

	if a.RedirectInfo != nil {
		object["redirectInfo"], err = json.Marshal(a.RedirectInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redirectInfo': %w", err)
		}
	}

	if len(a.RouteToLocs) != 0 {
		object["routeToLocs"], err = json.Marshal(a.RouteToLocs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routeToLocs': %w", err)
		}
	}

	if a.SteerFun != nil {
		object["steerFun"], err = json.Marshal(a.SteerFun)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'steerFun': %w", err)
		}
	}

	if a.SteerModeDl != nil {
		object["steerModeDl"], err = json.Marshal(a.SteerModeDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'steerModeDl': %w", err)
		}
	}

	if a.SteerModeUl != nil {
		object["steerModeUl"], err = json.Marshal(a.SteerModeUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'steerModeUl': %w", err)
		}
	}

	object["tcId"], err = json.Marshal(a.TcId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tcId': %w", err)
	}

	if a.TraffCorreInd != nil {
		object["traffCorreInd"], err = json.Marshal(a.TraffCorreInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traffCorreInd': %w", err)
		}
	}

	object["trafficSteeringPolIdDl"], err = json.Marshal(a.TrafficSteeringPolIdDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trafficSteeringPolIdDl': %w", err)
	}

	object["trafficSteeringPolIdUl"], err = json.Marshal(a.TrafficSteeringPolIdUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'trafficSteeringPolIdUl': %w", err)
	}

	object["upPathChgEvent"], err = json.Marshal(a.UpPathChgEvent)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upPathChgEvent': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficDescriptor. Returns the specified
// element and whether it was found
func (a TrafficDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficDescriptor
func (a *TrafficDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficDescriptor to handle AdditionalProperties
func (a *TrafficDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dddTrafficDescriptorList"]; found {
		err = json.Unmarshal(raw, &a.DddTrafficDescriptorList)
		if err != nil {
			return fmt.Errorf("error reading 'dddTrafficDescriptorList': %w", err)
		}
		delete(object, "dddTrafficDescriptorList")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficDescriptor to handle AdditionalProperties
func (a TrafficDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DddTrafficDescriptorList) != 0 {
		object["dddTrafficDescriptorList"], err = json.Marshal(a.DddTrafficDescriptorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddTrafficDescriptorList': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluData. Returns the specified
// element and whether it was found
func (a TrafficInfluData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluData
func (a *TrafficInfluData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluData to handle AdditionalProperties
func (a *TrafficInfluData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["headers"]; found {
		err = json.Unmarshal(raw, &a.Headers)
		if err != nil {
			return fmt.Errorf("error reading 'headers': %w", err)
		}
		delete(object, "headers")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["subscribedEvents"]; found {
		err = json.Unmarshal(raw, &a.SubscribedEvents)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedEvents': %w", err)
		}
		delete(object, "subscribedEvents")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["traffCorreInd"]; found {
		err = json.Unmarshal(raw, &a.TraffCorreInd)
		if err != nil {
			return fmt.Errorf("error reading 'traffCorreInd': %w", err)
		}
		delete(object, "traffCorreInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["upPathChgNotifCorreId"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifCorreId': %w", err)
		}
		delete(object, "upPathChgNotifCorreId")
	}

	if raw, found := object["upPathChgNotifUri"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifUri': %w", err)
		}
		delete(object, "upPathChgNotifUri")
	}

	if raw, found := object["validEndTime"]; found {
		err = json.Unmarshal(raw, &a.ValidEndTime)
		if err != nil {
			return fmt.Errorf("error reading 'validEndTime': %w", err)
		}
		delete(object, "validEndTime")
	}

	if raw, found := object["validStartTime"]; found {
		err = json.Unmarshal(raw, &a.ValidStartTime)
		if err != nil {
			return fmt.Errorf("error reading 'validStartTime': %w", err)
		}
		delete(object, "validStartTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluData to handle AdditionalProperties
func (a TrafficInfluData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AfAckInd != nil {
		object["afAckInd"], err = json.Marshal(a.AfAckInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
		}
	}

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AppReloInd != nil {
		object["appReloInd"], err = json.Marshal(a.AppReloInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
		}
	}

	if a.DnaiChgType != nil {
		object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	if len(a.Headers) != 0 {
		object["headers"], err = json.Marshal(a.Headers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'headers': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.SubscribedEvents) != 0 {
		object["subscribedEvents"], err = json.Marshal(a.SubscribedEvents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedEvents': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.TempValidities) != 0 {
		object["tempValidities"], err = json.Marshal(a.TempValidities)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
		}
	}

	if a.TraffCorreInd != nil {
		object["traffCorreInd"], err = json.Marshal(a.TraffCorreInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traffCorreInd': %w", err)
		}
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	if a.UpPathChgNotifCorreId != nil {
		object["upPathChgNotifCorreId"], err = json.Marshal(a.UpPathChgNotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifCorreId': %w", err)
		}
	}

	if a.UpPathChgNotifUri != nil {
		object["upPathChgNotifUri"], err = json.Marshal(a.UpPathChgNotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifUri': %w", err)
		}
	}

	if a.ValidEndTime != nil {
		object["validEndTime"], err = json.Marshal(a.ValidEndTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validEndTime': %w", err)
		}
	}

	if a.ValidStartTime != nil {
		object["validStartTime"], err = json.Marshal(a.ValidStartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validStartTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluDataNotif. Returns the specified
// element and whether it was found
func (a TrafficInfluDataNotif) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluDataNotif
func (a *TrafficInfluDataNotif) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluDataNotif to handle AdditionalProperties
func (a *TrafficInfluDataNotif) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["trafficInfluData"]; found {
		err = json.Unmarshal(raw, &a.TrafficInfluData)
		if err != nil {
			return fmt.Errorf("error reading 'trafficInfluData': %w", err)
		}
		delete(object, "trafficInfluData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluDataNotif to handle AdditionalProperties
func (a TrafficInfluDataNotif) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["resUri"], err = json.Marshal(a.ResUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
	}

	if a.TrafficInfluData != nil {
		object["trafficInfluData"], err = json.Marshal(a.TrafficInfluData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficInfluData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluDataPatch. Returns the specified
// element and whether it was found
func (a TrafficInfluDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluDataPatch
func (a *TrafficInfluDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluDataPatch to handle AdditionalProperties
func (a *TrafficInfluDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["headers"]; found {
		err = json.Unmarshal(raw, &a.Headers)
		if err != nil {
			return fmt.Errorf("error reading 'headers': %w", err)
		}
		delete(object, "headers")
	}

	if raw, found := object["internalGroupId"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupId': %w", err)
		}
		delete(object, "internalGroupId")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["traffCorreInd"]; found {
		err = json.Unmarshal(raw, &a.TraffCorreInd)
		if err != nil {
			return fmt.Errorf("error reading 'traffCorreInd': %w", err)
		}
		delete(object, "traffCorreInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["upPathChgNotifCorreId"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifCorreId': %w", err)
		}
		delete(object, "upPathChgNotifCorreId")
	}

	if raw, found := object["upPathChgNotifUri"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifUri': %w", err)
		}
		delete(object, "upPathChgNotifUri")
	}

	if raw, found := object["validEndTime"]; found {
		err = json.Unmarshal(raw, &a.ValidEndTime)
		if err != nil {
			return fmt.Errorf("error reading 'validEndTime': %w", err)
		}
		delete(object, "validEndTime")
	}

	if raw, found := object["validStartTime"]; found {
		err = json.Unmarshal(raw, &a.ValidStartTime)
		if err != nil {
			return fmt.Errorf("error reading 'validStartTime': %w", err)
		}
		delete(object, "validStartTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluDataPatch to handle AdditionalProperties
func (a TrafficInfluDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AfAckInd != nil {
		object["afAckInd"], err = json.Marshal(a.AfAckInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
		}
	}

	if a.AppReloInd != nil {
		object["appReloInd"], err = json.Marshal(a.AppReloInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	if len(a.Headers) != 0 {
		object["headers"], err = json.Marshal(a.Headers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'headers': %w", err)
		}
	}

	if len(a.InternalGroupId) != 0 {
		object["internalGroupId"], err = json.Marshal(a.InternalGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupId': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["tempValidities"], err = json.Marshal(a.TempValidities)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
	}

	if a.TraffCorreInd != nil {
		object["traffCorreInd"], err = json.Marshal(a.TraffCorreInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traffCorreInd': %w", err)
		}
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	if a.UpPathChgNotifCorreId != nil {
		object["upPathChgNotifCorreId"], err = json.Marshal(a.UpPathChgNotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifCorreId': %w", err)
		}
	}

	if a.UpPathChgNotifUri != nil {
		object["upPathChgNotifUri"], err = json.Marshal(a.UpPathChgNotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifUri': %w", err)
		}
	}

	if a.ValidEndTime != nil {
		object["validEndTime"], err = json.Marshal(a.ValidEndTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validEndTime': %w", err)
		}
	}

	if a.ValidStartTime != nil {
		object["validStartTime"], err = json.Marshal(a.ValidStartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validStartTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluSub. Returns the specified
// element and whether it was found
func (a TrafficInfluSub) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluSub
func (a *TrafficInfluSub) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluSub to handle AdditionalProperties
func (a *TrafficInfluSub) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnns"]; found {
		err = json.Unmarshal(raw, &a.Dnns)
		if err != nil {
			return fmt.Errorf("error reading 'dnns': %w", err)
		}
		delete(object, "dnns")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["snssais"]; found {
		err = json.Unmarshal(raw, &a.Snssais)
		if err != nil {
			return fmt.Errorf("error reading 'snssais': %w", err)
		}
		delete(object, "snssais")
	}

	if raw, found := object["supis"]; found {
		err = json.Unmarshal(raw, &a.Supis)
		if err != nil {
			return fmt.Errorf("error reading 'supis': %w", err)
		}
		delete(object, "supis")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluSub to handle AdditionalProperties
func (a TrafficInfluSub) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Dnns) != 0 {
		object["dnns"], err = json.Marshal(a.Dnns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnns': %w", err)
		}
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if len(a.Snssais) != 0 {
		object["snssais"], err = json.Marshal(a.Snssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssais': %w", err)
		}
	}

	if len(a.Supis) != 0 {
		object["supis"], err = json.Marshal(a.Supis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supis': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluSubPatch. Returns the specified
// element and whether it was found
func (a TrafficInfluSubPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluSubPatch
func (a *TrafficInfluSubPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluSubPatch to handle AdditionalProperties
func (a *TrafficInfluSubPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["tfcCorrInd"]; found {
		err = json.Unmarshal(raw, &a.TfcCorrInd)
		if err != nil {
			return fmt.Errorf("error reading 'tfcCorrInd': %w", err)
		}
		delete(object, "tfcCorrInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["validGeoZoneIds"]; found {
		err = json.Unmarshal(raw, &a.ValidGeoZoneIds)
		if err != nil {
			return fmt.Errorf("error reading 'validGeoZoneIds': %w", err)
		}
		delete(object, "validGeoZoneIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluSubPatch to handle AdditionalProperties
func (a TrafficInfluSubPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
	}

	object["afAckInd"], err = json.Marshal(a.AfAckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
	}

	object["appReloInd"], err = json.Marshal(a.AppReloInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	object["tempValidities"], err = json.Marshal(a.TempValidities)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
	}

	object["tfcCorrInd"], err = json.Marshal(a.TfcCorrInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tfcCorrInd': %w", err)
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	object["validGeoZoneIds"], err = json.Marshal(a.ValidGeoZoneIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'validGeoZoneIds': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMoDataReqData. Returns the specified
// element and whether it was found
func (a TransferMoDataReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMoDataReqData
func (a *TransferMoDataReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMoDataReqData to handle AdditionalProperties
func (a *TransferMoDataReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["moData"]; found {
		err = json.Unmarshal(raw, &a.MoData)
		if err != nil {
			return fmt.Errorf("error reading 'moData': %w", err)
		}
		delete(object, "moData")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMoDataReqData to handle AdditionalProperties
func (a TransferMoDataReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["moData"], err = json.Marshal(a.MoData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'moData': %w", err)
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMtDataAddInfo. Returns the specified
// element and whether it was found
func (a TransferMtDataAddInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMtDataAddInfo
func (a *TransferMtDataAddInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMtDataAddInfo to handle AdditionalProperties
func (a *TransferMtDataAddInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMtDataAddInfo to handle AdditionalProperties
func (a TransferMtDataAddInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMtDataError. Returns the specified
// element and whether it was found
func (a TransferMtDataError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMtDataError
func (a *TransferMtDataError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMtDataError to handle AdditionalProperties
func (a *TransferMtDataError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMtDataError to handle AdditionalProperties
func (a TransferMtDataError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMtDataReqData. Returns the specified
// element and whether it was found
func (a TransferMtDataReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMtDataReqData
func (a *TransferMtDataReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMtDataReqData to handle AdditionalProperties
func (a *TransferMtDataReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mtData"]; found {
		err = json.Unmarshal(raw, &a.MtData)
		if err != nil {
			return fmt.Errorf("error reading 'mtData': %w", err)
		}
		delete(object, "mtData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMtDataReqData to handle AdditionalProperties
func (a TransferMtDataReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["mtData"], err = json.Marshal(a.MtData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mtData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferPolicy. Returns the specified
// element and whether it was found
func (a TransferPolicy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferPolicy
func (a *TransferPolicy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferPolicy to handle AdditionalProperties
func (a *TransferPolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxBitRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxBitRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxBitRateDl': %w", err)
		}
		delete(object, "maxBitRateDl")
	}

	if raw, found := object["maxBitRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxBitRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxBitRateUl': %w", err)
		}
		delete(object, "maxBitRateUl")
	}

	if raw, found := object["ratingGroup"]; found {
		err = json.Unmarshal(raw, &a.RatingGroup)
		if err != nil {
			return fmt.Errorf("error reading 'ratingGroup': %w", err)
		}
		delete(object, "ratingGroup")
	}

	if raw, found := object["recTimeInt"]; found {
		err = json.Unmarshal(raw, &a.RecTimeInt)
		if err != nil {
			return fmt.Errorf("error reading 'recTimeInt': %w", err)
		}
		delete(object, "recTimeInt")
	}

	if raw, found := object["transPolicyId"]; found {
		err = json.Unmarshal(raw, &a.TransPolicyId)
		if err != nil {
			return fmt.Errorf("error reading 'transPolicyId': %w", err)
		}
		delete(object, "transPolicyId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferPolicy to handle AdditionalProperties
func (a TransferPolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.MaxBitRateDl) != 0 {
		object["maxBitRateDl"], err = json.Marshal(a.MaxBitRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxBitRateDl': %w", err)
		}
	}

	if len(a.MaxBitRateUl) != 0 {
		object["maxBitRateUl"], err = json.Marshal(a.MaxBitRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxBitRateUl': %w", err)
		}
	}

	object["ratingGroup"], err = json.Marshal(a.RatingGroup)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratingGroup': %w", err)
	}

	object["recTimeInt"], err = json.Marshal(a.RecTimeInt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'recTimeInt': %w", err)
	}

	object["transPolicyId"], err = json.Marshal(a.TransPolicyId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'transPolicyId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TriggerRequest. Returns the specified
// element and whether it was found
func (a TriggerRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TriggerRequest
func (a *TriggerRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TriggerRequest to handle AdditionalProperties
func (a *TriggerRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TriggerRequest to handle AdditionalProperties
func (a TriggerRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TscaiInputContainer. Returns the specified
// element and whether it was found
func (a TscaiInputContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TscaiInputContainer
func (a *TscaiInputContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TscaiInputContainer to handle AdditionalProperties
func (a *TscaiInputContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["burstArrivalTime"]; found {
		err = json.Unmarshal(raw, &a.BurstArrivalTime)
		if err != nil {
			return fmt.Errorf("error reading 'burstArrivalTime': %w", err)
		}
		delete(object, "burstArrivalTime")
	}

	if raw, found := object["periodicity"]; found {
		err = json.Unmarshal(raw, &a.Periodicity)
		if err != nil {
			return fmt.Errorf("error reading 'periodicity': %w", err)
		}
		delete(object, "periodicity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TscaiInputContainer to handle AdditionalProperties
func (a TscaiInputContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BurstArrivalTime != nil {
		object["burstArrivalTime"], err = json.Marshal(a.BurstArrivalTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'burstArrivalTime': %w", err)
		}
	}

	if a.Periodicity != nil {
		object["periodicity"], err = json.Marshal(a.Periodicity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TsnBridgeInfo. Returns the specified
// element and whether it was found
func (a TsnBridgeInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TsnBridgeInfo
func (a *TsnBridgeInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TsnBridgeInfo to handle AdditionalProperties
func (a *TsnBridgeInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bridgeId"]; found {
		err = json.Unmarshal(raw, &a.BridgeId)
		if err != nil {
			return fmt.Errorf("error reading 'bridgeId': %w", err)
		}
		delete(object, "bridgeId")
	}

	if raw, found := object["dsttAddr"]; found {
		err = json.Unmarshal(raw, &a.DsttAddr)
		if err != nil {
			return fmt.Errorf("error reading 'dsttAddr': %w", err)
		}
		delete(object, "dsttAddr")
	}

	if raw, found := object["dsttPortNum"]; found {
		err = json.Unmarshal(raw, &a.DsttPortNum)
		if err != nil {
			return fmt.Errorf("error reading 'dsttPortNum': %w", err)
		}
		delete(object, "dsttPortNum")
	}

	if raw, found := object["dsttResidTime"]; found {
		err = json.Unmarshal(raw, &a.DsttResidTime)
		if err != nil {
			return fmt.Errorf("error reading 'dsttResidTime': %w", err)
		}
		delete(object, "dsttResidTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TsnBridgeInfo to handle AdditionalProperties
func (a TsnBridgeInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BridgeId != nil {
		object["bridgeId"], err = json.Marshal(a.BridgeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bridgeId': %w", err)
		}
	}

	if len(a.DsttAddr) != 0 {
		object["dsttAddr"], err = json.Marshal(a.DsttAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dsttAddr': %w", err)
		}
	}

	if a.DsttPortNum != nil {
		object["dsttPortNum"], err = json.Marshal(a.DsttPortNum)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dsttPortNum': %w", err)
		}
	}

	if a.DsttResidTime != nil {
		object["dsttResidTime"], err = json.Marshal(a.DsttResidTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dsttResidTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TsnQosContainer. Returns the specified
// element and whether it was found
func (a TsnQosContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TsnQosContainer
func (a *TsnQosContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TsnQosContainer to handle AdditionalProperties
func (a *TsnQosContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxTscBurstSize"]; found {
		err = json.Unmarshal(raw, &a.MaxTscBurstSize)
		if err != nil {
			return fmt.Errorf("error reading 'maxTscBurstSize': %w", err)
		}
		delete(object, "maxTscBurstSize")
	}

	if raw, found := object["tscPackDelay"]; found {
		err = json.Unmarshal(raw, &a.TscPackDelay)
		if err != nil {
			return fmt.Errorf("error reading 'tscPackDelay': %w", err)
		}
		delete(object, "tscPackDelay")
	}

	if raw, found := object["tscPrioLevel"]; found {
		err = json.Unmarshal(raw, &a.TscPrioLevel)
		if err != nil {
			return fmt.Errorf("error reading 'tscPrioLevel': %w", err)
		}
		delete(object, "tscPrioLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TsnQosContainer to handle AdditionalProperties
func (a TsnQosContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxTscBurstSize != 0 {
		object["maxTscBurstSize"], err = json.Marshal(a.MaxTscBurstSize)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxTscBurstSize': %w", err)
		}
	}

	if a.TscPackDelay != 0 {
		object["tscPackDelay"], err = json.Marshal(a.TscPackDelay)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tscPackDelay': %w", err)
		}
	}

	if a.TscPrioLevel != 0 {
		object["tscPrioLevel"], err = json.Marshal(a.TscPrioLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tscPrioLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TsnQosContainerRm. Returns the specified
// element and whether it was found
func (a TsnQosContainerRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TsnQosContainerRm
func (a *TsnQosContainerRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TsnQosContainerRm to handle AdditionalProperties
func (a *TsnQosContainerRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxTscBurstSize"]; found {
		err = json.Unmarshal(raw, &a.MaxTscBurstSize)
		if err != nil {
			return fmt.Errorf("error reading 'maxTscBurstSize': %w", err)
		}
		delete(object, "maxTscBurstSize")
	}

	if raw, found := object["tscPackDelay"]; found {
		err = json.Unmarshal(raw, &a.TscPackDelay)
		if err != nil {
			return fmt.Errorf("error reading 'tscPackDelay': %w", err)
		}
		delete(object, "tscPackDelay")
	}

	if raw, found := object["tscPrioLevel"]; found {
		err = json.Unmarshal(raw, &a.TscPrioLevel)
		if err != nil {
			return fmt.Errorf("error reading 'tscPrioLevel': %w", err)
		}
		delete(object, "tscPrioLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TsnQosContainerRm to handle AdditionalProperties
func (a TsnQosContainerRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["maxTscBurstSize"], err = json.Marshal(a.MaxTscBurstSize)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxTscBurstSize': %w", err)
	}

	object["tscPackDelay"], err = json.Marshal(a.TscPackDelay)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscPackDelay': %w", err)
	}

	object["tscPrioLevel"], err = json.Marshal(a.TscPrioLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscPrioLevel': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TunnelInfo. Returns the specified
// element and whether it was found
func (a TunnelInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TunnelInfo
func (a *TunnelInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TunnelInfo to handle AdditionalProperties
func (a *TunnelInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["gtpTeid"]; found {
		err = json.Unmarshal(raw, &a.GtpTeid)
		if err != nil {
			return fmt.Errorf("error reading 'gtpTeid': %w", err)
		}
		delete(object, "gtpTeid")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TunnelInfo to handle AdditionalProperties
func (a TunnelInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	object["gtpTeid"], err = json.Marshal(a.GtpTeid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gtpTeid': %w", err)
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TwapId. Returns the specified
// element and whether it was found
func (a TwapId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TwapId
func (a *TwapId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TwapId to handle AdditionalProperties
func (a *TwapId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bssId"]; found {
		err = json.Unmarshal(raw, &a.BssId)
		if err != nil {
			return fmt.Errorf("error reading 'bssId': %w", err)
		}
		delete(object, "bssId")
	}

	if raw, found := object["civicAddress"]; found {
		err = json.Unmarshal(raw, &a.CivicAddress)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddress': %w", err)
		}
		delete(object, "civicAddress")
	}

	if raw, found := object["ssId"]; found {
		err = json.Unmarshal(raw, &a.SsId)
		if err != nil {
			return fmt.Errorf("error reading 'ssId': %w", err)
		}
		delete(object, "ssId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TwapId to handle AdditionalProperties
func (a TwapId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BssId != nil {
		object["bssId"], err = json.Marshal(a.BssId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bssId': %w", err)
		}
	}

	if a.CivicAddress != nil {
		object["civicAddress"], err = json.Marshal(a.CivicAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddress': %w", err)
		}
	}

	object["ssId"], err = json.Marshal(a.SsId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ssId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TwifInfo. Returns the specified
// element and whether it was found
func (a TwifInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TwifInfo
func (a *TwifInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TwifInfo to handle AdditionalProperties
func (a *TwifInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endpointFqdn"]; found {
		err = json.Unmarshal(raw, &a.EndpointFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'endpointFqdn': %w", err)
		}
		delete(object, "endpointFqdn")
	}

	if raw, found := object["ipv4EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4EndpointAddresses': %w", err)
		}
		delete(object, "ipv4EndpointAddresses")
	}

	if raw, found := object["ipv6EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv6EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6EndpointAddresses': %w", err)
		}
		delete(object, "ipv6EndpointAddresses")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TwifInfo to handle AdditionalProperties
func (a TwifInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndpointFqdn != nil {
		object["endpointFqdn"], err = json.Marshal(a.EndpointFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endpointFqdn': %w", err)
		}
	}

	if len(a.Ipv4EndpointAddresses) != 0 {
		object["ipv4EndpointAddresses"], err = json.Marshal(a.Ipv4EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4EndpointAddresses': %w", err)
		}
	}

	if len(a.Ipv6EndpointAddresses) != 0 {
		object["ipv6EndpointAddresses"], err = json.Marshal(a.Ipv6EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6EndpointAddresses': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEAuthenticationCtx. Returns the specified
// element and whether it was found
func (a UEAuthenticationCtx) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEAuthenticationCtx
func (a *UEAuthenticationCtx) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEAuthenticationCtx to handle AdditionalProperties
func (a *UEAuthenticationCtx) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gAuthData"]; found {
		err = json.Unmarshal(raw, &a.N5gAuthData)
		if err != nil {
			return fmt.Errorf("error reading '5gAuthData': %w", err)
		}
		delete(object, "5gAuthData")
	}

	if raw, found := object["_links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading '_links': %w", err)
		}
		delete(object, "_links")
	}

	if raw, found := object["authType"]; found {
		err = json.Unmarshal(raw, &a.AuthType)
		if err != nil {
			return fmt.Errorf("error reading 'authType': %w", err)
		}
		delete(object, "authType")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEAuthenticationCtx to handle AdditionalProperties
func (a UEAuthenticationCtx) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5gAuthData"], err = json.Marshal(a.N5gAuthData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5gAuthData': %w", err)
	}

	object["_links"], err = json.Marshal(a.Links)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '_links': %w", err)
	}

	object["authType"], err = json.Marshal(a.AuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authType': %w", err)
	}

	if len(a.ServingNetworkName) != 0 {
		object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEContextRelease. Returns the specified
// element and whether it was found
func (a UEContextRelease) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEContextRelease
func (a *UEContextRelease) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEContextRelease to handle AdditionalProperties
func (a *UEContextRelease) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ngapCause"]; found {
		err = json.Unmarshal(raw, &a.NgapCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngapCause': %w", err)
		}
		delete(object, "ngapCause")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["unauthenticatedSupi"]; found {
		err = json.Unmarshal(raw, &a.UnauthenticatedSupi)
		if err != nil {
			return fmt.Errorf("error reading 'unauthenticatedSupi': %w", err)
		}
		delete(object, "unauthenticatedSupi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEContextRelease to handle AdditionalProperties
func (a UEContextRelease) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ngapCause"], err = json.Marshal(a.NgapCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ngapCause': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.UnauthenticatedSupi != nil {
		object["unauthenticatedSupi"], err = json.Marshal(a.UnauthenticatedSupi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unauthenticatedSupi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEIdExt. Returns the specified
// element and whether it was found
func (a UEIdExt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEIdExt
func (a *UEIdExt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEIdExt to handle AdditionalProperties
func (a *UEIdExt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEIdExt to handle AdditionalProperties
func (a UEIdExt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEPolicyPolicyAssociation. Returns the specified
// element and whether it was found
func (a UEPolicyPolicyAssociation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEPolicyPolicyAssociation
func (a *UEPolicyPolicyAssociation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEPolicyPolicyAssociation to handle AdditionalProperties
func (a *UEPolicyPolicyAssociation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n2Pc5Pol"]; found {
		err = json.Unmarshal(raw, &a.N2Pc5Pol)
		if err != nil {
			return fmt.Errorf("error reading 'n2Pc5Pol': %w", err)
		}
		delete(object, "n2Pc5Pol")
	}

	if raw, found := object["pras"]; found {
		err = json.Unmarshal(raw, &a.Pras)
		if err != nil {
			return fmt.Errorf("error reading 'pras': %w", err)
		}
		delete(object, "pras")
	}

	if raw, found := object["request"]; found {
		err = json.Unmarshal(raw, &a.Request)
		if err != nil {
			return fmt.Errorf("error reading 'request': %w", err)
		}
		delete(object, "request")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["triggers"]; found {
		err = json.Unmarshal(raw, &a.Triggers)
		if err != nil {
			return fmt.Errorf("error reading 'triggers': %w", err)
		}
		delete(object, "triggers")
	}

	if raw, found := object["uePolicy"]; found {
		err = json.Unmarshal(raw, &a.UePolicy)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicy': %w", err)
		}
		delete(object, "uePolicy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEPolicyPolicyAssociation to handle AdditionalProperties
func (a UEPolicyPolicyAssociation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N2Pc5Pol != nil {
		object["n2Pc5Pol"], err = json.Marshal(a.N2Pc5Pol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2Pc5Pol': %w", err)
		}
	}

	if a.Pras != nil {
		object["pras"], err = json.Marshal(a.Pras)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pras': %w", err)
		}
	}

	if a.Request != nil {
		object["request"], err = json.Marshal(a.Request)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'request': %w", err)
		}
	}

	object["suppFeat"], err = json.Marshal(a.SuppFeat)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
	}

	if len(a.Triggers) != 0 {
		object["triggers"], err = json.Marshal(a.Triggers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'triggers': %w", err)
		}
	}

	if a.UePolicy != nil {
		object["uePolicy"], err = json.Marshal(a.UePolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicy': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEPolicyPolicyAssociationRequest. Returns the specified
// element and whether it was found
func (a UEPolicyPolicyAssociationRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEPolicyPolicyAssociationRequest
func (a *UEPolicyPolicyAssociationRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEPolicyPolicyAssociationRequest to handle AdditionalProperties
func (a *UEPolicyPolicyAssociationRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["altNotifFqdns"]; found {
		err = json.Unmarshal(raw, &a.AltNotifFqdns)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifFqdns': %w", err)
		}
		delete(object, "altNotifFqdns")
	}

	if raw, found := object["altNotifIpv4Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv4Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv4Addrs': %w", err)
		}
		delete(object, "altNotifIpv4Addrs")
	}

	if raw, found := object["altNotifIpv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv6Addrs': %w", err)
		}
		delete(object, "altNotifIpv6Addrs")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["groupIds"]; found {
		err = json.Unmarshal(raw, &a.GroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'groupIds': %w", err)
		}
		delete(object, "groupIds")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hPcfId"]; found {
		err = json.Unmarshal(raw, &a.HPcfId)
		if err != nil {
			return fmt.Errorf("error reading 'hPcfId': %w", err)
		}
		delete(object, "hPcfId")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["pc5Capab"]; found {
		err = json.Unmarshal(raw, &a.Pc5Capab)
		if err != nil {
			return fmt.Errorf("error reading 'pc5Capab': %w", err)
		}
		delete(object, "pc5Capab")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["serviceName"]; found {
		err = json.Unmarshal(raw, &a.ServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'serviceName': %w", err)
		}
		delete(object, "serviceName")
	}

	if raw, found := object["servingNfId"]; found {
		err = json.Unmarshal(raw, &a.ServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNfId': %w", err)
		}
		delete(object, "servingNfId")
	}

	if raw, found := object["servingPlmn"]; found {
		err = json.Unmarshal(raw, &a.ServingPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'servingPlmn': %w", err)
		}
		delete(object, "servingPlmn")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["timeZone"]; found {
		err = json.Unmarshal(raw, &a.TimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'timeZone': %w", err)
		}
		delete(object, "timeZone")
	}

	if raw, found := object["uePolReq"]; found {
		err = json.Unmarshal(raw, &a.UePolReq)
		if err != nil {
			return fmt.Errorf("error reading 'uePolReq': %w", err)
		}
		delete(object, "uePolReq")
	}

	if raw, found := object["userLoc"]; found {
		err = json.Unmarshal(raw, &a.UserLoc)
		if err != nil {
			return fmt.Errorf("error reading 'userLoc': %w", err)
		}
		delete(object, "userLoc")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEPolicyPolicyAssociationRequest to handle AdditionalProperties
func (a UEPolicyPolicyAssociationRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if len(a.AltNotifFqdns) != 0 {
		object["altNotifFqdns"], err = json.Marshal(a.AltNotifFqdns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifFqdns': %w", err)
		}
	}

	if len(a.AltNotifIpv4Addrs) != 0 {
		object["altNotifIpv4Addrs"], err = json.Marshal(a.AltNotifIpv4Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv4Addrs': %w", err)
		}
	}

	if len(a.AltNotifIpv6Addrs) != 0 {
		object["altNotifIpv6Addrs"], err = json.Marshal(a.AltNotifIpv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv6Addrs': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.GroupIds) != 0 {
		object["groupIds"], err = json.Marshal(a.GroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupIds': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HPcfId != nil {
		object["hPcfId"], err = json.Marshal(a.HPcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hPcfId': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if a.Pc5Capab != nil {
		object["pc5Capab"], err = json.Marshal(a.Pc5Capab)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pc5Capab': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.ServiceName != nil {
		object["serviceName"], err = json.Marshal(a.ServiceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceName': %w", err)
		}
	}

	if a.ServingNfId != nil {
		object["servingNfId"], err = json.Marshal(a.ServingNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNfId': %w", err)
		}
	}

	if a.ServingPlmn != nil {
		object["servingPlmn"], err = json.Marshal(a.ServingPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingPlmn': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	object["suppFeat"], err = json.Marshal(a.SuppFeat)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
	}

	if a.TimeZone != nil {
		object["timeZone"], err = json.Marshal(a.TimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeZone': %w", err)
		}
	}

	if a.UePolReq != nil {
		object["uePolReq"], err = json.Marshal(a.UePolReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolReq': %w", err)
		}
	}

	if a.UserLoc != nil {
		object["userLoc"], err = json.Marshal(a.UserLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLoc': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEPolicyPolicyAssociationUpdateRequest. Returns the specified
// element and whether it was found
func (a UEPolicyPolicyAssociationUpdateRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEPolicyPolicyAssociationUpdateRequest
func (a *UEPolicyPolicyAssociationUpdateRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEPolicyPolicyAssociationUpdateRequest to handle AdditionalProperties
func (a *UEPolicyPolicyAssociationUpdateRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altNotifFqdns"]; found {
		err = json.Unmarshal(raw, &a.AltNotifFqdns)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifFqdns': %w", err)
		}
		delete(object, "altNotifFqdns")
	}

	if raw, found := object["altNotifIpv4Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv4Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv4Addrs': %w", err)
		}
		delete(object, "altNotifIpv4Addrs")
	}

	if raw, found := object["altNotifIpv6Addrs"]; found {
		err = json.Unmarshal(raw, &a.AltNotifIpv6Addrs)
		if err != nil {
			return fmt.Errorf("error reading 'altNotifIpv6Addrs': %w", err)
		}
		delete(object, "altNotifIpv6Addrs")
	}

	if raw, found := object["connectState"]; found {
		err = json.Unmarshal(raw, &a.ConnectState)
		if err != nil {
			return fmt.Errorf("error reading 'connectState': %w", err)
		}
		delete(object, "connectState")
	}

	if raw, found := object["groupIds"]; found {
		err = json.Unmarshal(raw, &a.GroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'groupIds': %w", err)
		}
		delete(object, "groupIds")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["praStatuses"]; found {
		err = json.Unmarshal(raw, &a.PraStatuses)
		if err != nil {
			return fmt.Errorf("error reading 'praStatuses': %w", err)
		}
		delete(object, "praStatuses")
	}

	if raw, found := object["servingNfId"]; found {
		err = json.Unmarshal(raw, &a.ServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNfId': %w", err)
		}
		delete(object, "servingNfId")
	}

	if raw, found := object["triggers"]; found {
		err = json.Unmarshal(raw, &a.Triggers)
		if err != nil {
			return fmt.Errorf("error reading 'triggers': %w", err)
		}
		delete(object, "triggers")
	}

	if raw, found := object["uePolDelResult"]; found {
		err = json.Unmarshal(raw, &a.UePolDelResult)
		if err != nil {
			return fmt.Errorf("error reading 'uePolDelResult': %w", err)
		}
		delete(object, "uePolDelResult")
	}

	if raw, found := object["uePolReq"]; found {
		err = json.Unmarshal(raw, &a.UePolReq)
		if err != nil {
			return fmt.Errorf("error reading 'uePolReq': %w", err)
		}
		delete(object, "uePolReq")
	}

	if raw, found := object["uePolTransFailNotif"]; found {
		err = json.Unmarshal(raw, &a.UePolTransFailNotif)
		if err != nil {
			return fmt.Errorf("error reading 'uePolTransFailNotif': %w", err)
		}
		delete(object, "uePolTransFailNotif")
	}

	if raw, found := object["userLoc"]; found {
		err = json.Unmarshal(raw, &a.UserLoc)
		if err != nil {
			return fmt.Errorf("error reading 'userLoc': %w", err)
		}
		delete(object, "userLoc")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEPolicyPolicyAssociationUpdateRequest to handle AdditionalProperties
func (a UEPolicyPolicyAssociationUpdateRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AltNotifFqdns) != 0 {
		object["altNotifFqdns"], err = json.Marshal(a.AltNotifFqdns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifFqdns': %w", err)
		}
	}

	if len(a.AltNotifIpv4Addrs) != 0 {
		object["altNotifIpv4Addrs"], err = json.Marshal(a.AltNotifIpv4Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv4Addrs': %w", err)
		}
	}

	if len(a.AltNotifIpv6Addrs) != 0 {
		object["altNotifIpv6Addrs"], err = json.Marshal(a.AltNotifIpv6Addrs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altNotifIpv6Addrs': %w", err)
		}
	}

	if a.ConnectState != nil {
		object["connectState"], err = json.Marshal(a.ConnectState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'connectState': %w", err)
		}
	}

	if len(a.GroupIds) != 0 {
		object["groupIds"], err = json.Marshal(a.GroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupIds': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.NotificationUri != nil {
		object["notificationUri"], err = json.Marshal(a.NotificationUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.PraStatuses != nil {
		object["praStatuses"], err = json.Marshal(a.PraStatuses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praStatuses': %w", err)
		}
	}

	if a.ServingNfId != nil {
		object["servingNfId"], err = json.Marshal(a.ServingNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNfId': %w", err)
		}
	}

	if len(a.Triggers) != 0 {
		object["triggers"], err = json.Marshal(a.Triggers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'triggers': %w", err)
		}
	}

	if a.UePolDelResult != nil {
		object["uePolDelResult"], err = json.Marshal(a.UePolDelResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolDelResult': %w", err)
		}
	}

	if a.UePolReq != nil {
		object["uePolReq"], err = json.Marshal(a.UePolReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolReq': %w", err)
		}
	}

	if a.UePolTransFailNotif != nil {
		object["uePolTransFailNotif"], err = json.Marshal(a.UePolTransFailNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolTransFailNotif': %w", err)
		}
	}

	if a.UserLoc != nil {
		object["userLoc"], err = json.Marshal(a.UserLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLoc': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEPolicyPolicyUpdate. Returns the specified
// element and whether it was found
func (a UEPolicyPolicyUpdate) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEPolicyPolicyUpdate
func (a *UEPolicyPolicyUpdate) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEPolicyPolicyUpdate to handle AdditionalProperties
func (a *UEPolicyPolicyUpdate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n2Pc5Pol"]; found {
		err = json.Unmarshal(raw, &a.N2Pc5Pol)
		if err != nil {
			return fmt.Errorf("error reading 'n2Pc5Pol': %w", err)
		}
		delete(object, "n2Pc5Pol")
	}

	if raw, found := object["pras"]; found {
		err = json.Unmarshal(raw, &a.Pras)
		if err != nil {
			return fmt.Errorf("error reading 'pras': %w", err)
		}
		delete(object, "pras")
	}

	if raw, found := object["resourceUri"]; found {
		err = json.Unmarshal(raw, &a.ResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'resourceUri': %w", err)
		}
		delete(object, "resourceUri")
	}

	if raw, found := object["triggers"]; found {
		err = json.Unmarshal(raw, &a.Triggers)
		if err != nil {
			return fmt.Errorf("error reading 'triggers': %w", err)
		}
		delete(object, "triggers")
	}

	if raw, found := object["uePolicy"]; found {
		err = json.Unmarshal(raw, &a.UePolicy)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicy': %w", err)
		}
		delete(object, "uePolicy")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEPolicyPolicyUpdate to handle AdditionalProperties
func (a UEPolicyPolicyUpdate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N2Pc5Pol != nil {
		object["n2Pc5Pol"], err = json.Marshal(a.N2Pc5Pol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2Pc5Pol': %w", err)
		}
	}

	object["pras"], err = json.Marshal(a.Pras)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pras': %w", err)
	}

	object["resourceUri"], err = json.Marshal(a.ResourceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceUri': %w", err)
	}

	object["triggers"], err = json.Marshal(a.Triggers)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'triggers': %w", err)
	}

	if a.UePolicy != nil {
		object["uePolicy"], err = json.Marshal(a.UePolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicy': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UEPolicyTerminationNotification. Returns the specified
// element and whether it was found
func (a UEPolicyTerminationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UEPolicyTerminationNotification
func (a *UEPolicyTerminationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UEPolicyTerminationNotification to handle AdditionalProperties
func (a *UEPolicyTerminationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["resourceUri"]; found {
		err = json.Unmarshal(raw, &a.ResourceUri)
		if err != nil {
			return fmt.Errorf("error reading 'resourceUri': %w", err)
		}
		delete(object, "resourceUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UEPolicyTerminationNotification to handle AdditionalProperties
func (a UEPolicyTerminationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cause"], err = json.Marshal(a.Cause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cause': %w", err)
	}

	object["resourceUri"], err = json.Marshal(a.ResourceUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceUri': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UdmInfo. Returns the specified
// element and whether it was found
func (a UdmInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UdmInfo
func (a *UdmInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UdmInfo to handle AdditionalProperties
func (a *UdmInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["externalGroupIdentifiersRanges"]; found {
		err = json.Unmarshal(raw, &a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return fmt.Errorf("error reading 'externalGroupIdentifiersRanges': %w", err)
		}
		delete(object, "externalGroupIdentifiersRanges")
	}

	if raw, found := object["gpsiRanges"]; found {
		err = json.Unmarshal(raw, &a.GpsiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiRanges': %w", err)
		}
		delete(object, "gpsiRanges")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["internalGroupIdentifiersRanges"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIdentifiersRanges)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIdentifiersRanges': %w", err)
		}
		delete(object, "internalGroupIdentifiersRanges")
	}

	if raw, found := object["routingIndicators"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicators)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicators': %w", err)
		}
		delete(object, "routingIndicators")
	}

	if raw, found := object["supiRanges"]; found {
		err = json.Unmarshal(raw, &a.SupiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'supiRanges': %w", err)
		}
		delete(object, "supiRanges")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UdmInfo to handle AdditionalProperties
func (a UdmInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ExternalGroupIdentifiersRanges) != 0 {
		object["externalGroupIdentifiersRanges"], err = json.Marshal(a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalGroupIdentifiersRanges': %w", err)
		}
	}

	if len(a.GpsiRanges) != 0 {
		object["gpsiRanges"], err = json.Marshal(a.GpsiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiRanges': %w", err)
		}
	}

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if len(a.InternalGroupIdentifiersRanges) != 0 {
		object["internalGroupIdentifiersRanges"], err = json.Marshal(a.InternalGroupIdentifiersRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIdentifiersRanges': %w", err)
		}
	}

	if len(a.RoutingIndicators) != 0 {
		object["routingIndicators"], err = json.Marshal(a.RoutingIndicators)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicators': %w", err)
		}
	}

	if len(a.SupiRanges) != 0 {
		object["supiRanges"], err = json.Marshal(a.SupiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiRanges': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UdrInfo. Returns the specified
// element and whether it was found
func (a UdrInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UdrInfo
func (a *UdrInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UdrInfo to handle AdditionalProperties
func (a *UdrInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["externalGroupIdentifiersRanges"]; found {
		err = json.Unmarshal(raw, &a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return fmt.Errorf("error reading 'externalGroupIdentifiersRanges': %w", err)
		}
		delete(object, "externalGroupIdentifiersRanges")
	}

	if raw, found := object["gpsiRanges"]; found {
		err = json.Unmarshal(raw, &a.GpsiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiRanges': %w", err)
		}
		delete(object, "gpsiRanges")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["supiRanges"]; found {
		err = json.Unmarshal(raw, &a.SupiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'supiRanges': %w", err)
		}
		delete(object, "supiRanges")
	}

	if raw, found := object["supportedDataSets"]; found {
		err = json.Unmarshal(raw, &a.SupportedDataSets)
		if err != nil {
			return fmt.Errorf("error reading 'supportedDataSets': %w", err)
		}
		delete(object, "supportedDataSets")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UdrInfo to handle AdditionalProperties
func (a UdrInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ExternalGroupIdentifiersRanges) != 0 {
		object["externalGroupIdentifiersRanges"], err = json.Marshal(a.ExternalGroupIdentifiersRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalGroupIdentifiersRanges': %w", err)
		}
	}

	if len(a.GpsiRanges) != 0 {
		object["gpsiRanges"], err = json.Marshal(a.GpsiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiRanges': %w", err)
		}
	}

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if len(a.SupiRanges) != 0 {
		object["supiRanges"], err = json.Marshal(a.SupiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiRanges': %w", err)
		}
	}

	if len(a.SupportedDataSets) != 0 {
		object["supportedDataSets"], err = json.Marshal(a.SupportedDataSets)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedDataSets': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UdsfInfo. Returns the specified
// element and whether it was found
func (a UdsfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UdsfInfo
func (a *UdsfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UdsfInfo to handle AdditionalProperties
func (a *UdsfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["storageIdRanges"]; found {
		err = json.Unmarshal(raw, &a.StorageIdRanges)
		if err != nil {
			return fmt.Errorf("error reading 'storageIdRanges': %w", err)
		}
		delete(object, "storageIdRanges")
	}

	if raw, found := object["supiRanges"]; found {
		err = json.Unmarshal(raw, &a.SupiRanges)
		if err != nil {
			return fmt.Errorf("error reading 'supiRanges': %w", err)
		}
		delete(object, "supiRanges")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UdsfInfo to handle AdditionalProperties
func (a UdsfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.GroupId != nil {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	if a.StorageIdRanges != nil {
		object["storageIdRanges"], err = json.Marshal(a.StorageIdRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'storageIdRanges': %w", err)
		}
	}

	if len(a.SupiRanges) != 0 {
		object["supiRanges"], err = json.Marshal(a.SupiRanges)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiRanges': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeCampingRep. Returns the specified
// element and whether it was found
func (a UeCampingRep) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeCampingRep
func (a *UeCampingRep) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeCampingRep to handle AdditionalProperties
func (a *UeCampingRep) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["netLocAccSupp"]; found {
		err = json.Unmarshal(raw, &a.NetLocAccSupp)
		if err != nil {
			return fmt.Errorf("error reading 'netLocAccSupp': %w", err)
		}
		delete(object, "netLocAccSupp")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["servNfId"]; found {
		err = json.Unmarshal(raw, &a.ServNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servNfId': %w", err)
		}
		delete(object, "servNfId")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["userLocationInfo"]; found {
		err = json.Unmarshal(raw, &a.UserLocationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'userLocationInfo': %w", err)
		}
		delete(object, "userLocationInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeCampingRep to handle AdditionalProperties
func (a UeCampingRep) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.NetLocAccSupp != nil {
		object["netLocAccSupp"], err = json.Marshal(a.NetLocAccSupp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'netLocAccSupp': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.ServNfId != nil {
		object["servNfId"], err = json.Marshal(a.ServNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servNfId': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UserLocationInfo != nil {
		object["userLocationInfo"], err = json.Marshal(a.UserLocationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userLocationInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContext. Returns the specified
// element and whether it was found
func (a UeContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContext
func (a *UeContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContext to handle AdditionalProperties
func (a *UeContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCapability"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCapability)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCapability': %w", err)
		}
		delete(object, "5gMmCapability")
	}

	if raw, found := object["amPolicyReqTriggerList"]; found {
		err = json.Unmarshal(raw, &a.AmPolicyReqTriggerList)
		if err != nil {
			return fmt.Errorf("error reading 'amPolicyReqTriggerList': %w", err)
		}
		delete(object, "amPolicyReqTriggerList")
	}

	if raw, found := object["ausfGroupId"]; found {
		err = json.Unmarshal(raw, &a.AusfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'ausfGroupId': %w", err)
		}
		delete(object, "ausfGroupId")
	}

	if raw, found := object["cMsisdn"]; found {
		err = json.Unmarshal(raw, &a.CMsisdn)
		if err != nil {
			return fmt.Errorf("error reading 'cMsisdn': %w", err)
		}
		delete(object, "cMsisdn")
	}

	if raw, found := object["cagData"]; found {
		err = json.Unmarshal(raw, &a.CagData)
		if err != nil {
			return fmt.Errorf("error reading 'cagData': %w", err)
		}
		delete(object, "cagData")
	}

	if raw, found := object["drxParameter"]; found {
		err = json.Unmarshal(raw, &a.DrxParameter)
		if err != nil {
			return fmt.Errorf("error reading 'drxParameter': %w", err)
		}
		delete(object, "drxParameter")
	}

	if raw, found := object["ecRestrictionDataNb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataNb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataNb': %w", err)
		}
		delete(object, "ecRestrictionDataNb")
	}

	if raw, found := object["ecRestrictionDataWb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataWb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataWb': %w", err)
		}
		delete(object, "ecRestrictionDataWb")
	}

	if raw, found := object["eventSubscriptionList"]; found {
		err = json.Unmarshal(raw, &a.EventSubscriptionList)
		if err != nil {
			return fmt.Errorf("error reading 'eventSubscriptionList': %w", err)
		}
		delete(object, "eventSubscriptionList")
	}

	if raw, found := object["forbiddenAreaList"]; found {
		err = json.Unmarshal(raw, &a.ForbiddenAreaList)
		if err != nil {
			return fmt.Errorf("error reading 'forbiddenAreaList': %w", err)
		}
		delete(object, "forbiddenAreaList")
	}

	if raw, found := object["gpsiList"]; found {
		err = json.Unmarshal(raw, &a.GpsiList)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiList': %w", err)
		}
		delete(object, "gpsiList")
	}

	if raw, found := object["groupList"]; found {
		err = json.Unmarshal(raw, &a.GroupList)
		if err != nil {
			return fmt.Errorf("error reading 'groupList': %w", err)
		}
		delete(object, "groupList")
	}

	if raw, found := object["hpcfId"]; found {
		err = json.Unmarshal(raw, &a.HpcfId)
		if err != nil {
			return fmt.Errorf("error reading 'hpcfId': %w", err)
		}
		delete(object, "hpcfId")
	}

	if raw, found := object["hpcfSetId"]; found {
		err = json.Unmarshal(raw, &a.HpcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'hpcfSetId': %w", err)
		}
		delete(object, "hpcfSetId")
	}

	if raw, found := object["iabOperationAllowed"]; found {
		err = json.Unmarshal(raw, &a.IabOperationAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'iabOperationAllowed': %w", err)
		}
		delete(object, "iabOperationAllowed")
	}

	if raw, found := object["immediateMdtConf"]; found {
		err = json.Unmarshal(raw, &a.ImmediateMdtConf)
		if err != nil {
			return fmt.Errorf("error reading 'immediateMdtConf': %w", err)
		}
		delete(object, "immediateMdtConf")
	}

	if raw, found := object["lteCatMInd"]; found {
		err = json.Unmarshal(raw, &a.LteCatMInd)
		if err != nil {
			return fmt.Errorf("error reading 'lteCatMInd': %w", err)
		}
		delete(object, "lteCatMInd")
	}

	if raw, found := object["managementMdtInd"]; found {
		err = json.Unmarshal(raw, &a.ManagementMdtInd)
		if err != nil {
			return fmt.Errorf("error reading 'managementMdtInd': %w", err)
		}
		delete(object, "managementMdtInd")
	}

	if raw, found := object["mmContextList"]; found {
		err = json.Unmarshal(raw, &a.MmContextList)
		if err != nil {
			return fmt.Errorf("error reading 'mmContextList': %w", err)
		}
		delete(object, "mmContextList")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["msClassmark2"]; found {
		err = json.Unmarshal(raw, &a.MsClassmark2)
		if err != nil {
			return fmt.Errorf("error reading 'msClassmark2': %w", err)
		}
		delete(object, "msClassmark2")
	}

	if raw, found := object["pcfAmPolicyUri"]; found {
		err = json.Unmarshal(raw, &a.PcfAmPolicyUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcfAmPolicyUri': %w", err)
		}
		delete(object, "pcfAmPolicyUri")
	}

	if raw, found := object["pcfAmpBindingInfo"]; found {
		err = json.Unmarshal(raw, &a.PcfAmpBindingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pcfAmpBindingInfo': %w", err)
		}
		delete(object, "pcfAmpBindingInfo")
	}

	if raw, found := object["pcfAmpServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfAmpServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfAmpServiceSetId': %w", err)
		}
		delete(object, "pcfAmpServiceSetId")
	}

	if raw, found := object["pcfBinding"]; found {
		err = json.Unmarshal(raw, &a.PcfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'pcfBinding': %w", err)
		}
		delete(object, "pcfBinding")
	}

	if raw, found := object["pcfGroupId"]; found {
		err = json.Unmarshal(raw, &a.PcfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfGroupId': %w", err)
		}
		delete(object, "pcfGroupId")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfRfsp"]; found {
		err = json.Unmarshal(raw, &a.PcfRfsp)
		if err != nil {
			return fmt.Errorf("error reading 'pcfRfsp': %w", err)
		}
		delete(object, "pcfRfsp")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pcfUeAmbr"]; found {
		err = json.Unmarshal(raw, &a.PcfUeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'pcfUeAmbr': %w", err)
		}
		delete(object, "pcfUeAmbr")
	}

	if raw, found := object["pcfUePolicyUri"]; found {
		err = json.Unmarshal(raw, &a.PcfUePolicyUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcfUePolicyUri': %w", err)
		}
		delete(object, "pcfUePolicyUri")
	}

	if raw, found := object["pcfUepBindingInfo"]; found {
		err = json.Unmarshal(raw, &a.PcfUepBindingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pcfUepBindingInfo': %w", err)
		}
		delete(object, "pcfUepBindingInfo")
	}

	if raw, found := object["pcfUepServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfUepServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfUepServiceSetId': %w", err)
		}
		delete(object, "pcfUepServiceSetId")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["praInAmPolicy"]; found {
		err = json.Unmarshal(raw, &a.PraInAmPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'praInAmPolicy': %w", err)
		}
		delete(object, "praInAmPolicy")
	}

	if raw, found := object["praInUePolicy"]; found {
		err = json.Unmarshal(raw, &a.PraInUePolicy)
		if err != nil {
			return fmt.Errorf("error reading 'praInUePolicy': %w", err)
		}
		delete(object, "praInUePolicy")
	}

	if raw, found := object["restrictedCoreNwTypeList"]; found {
		err = json.Unmarshal(raw, &a.RestrictedCoreNwTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedCoreNwTypeList': %w", err)
		}
		delete(object, "restrictedCoreNwTypeList")
	}

	if raw, found := object["restrictedPrimaryRatList"]; found {
		err = json.Unmarshal(raw, &a.RestrictedPrimaryRatList)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedPrimaryRatList': %w", err)
		}
		delete(object, "restrictedPrimaryRatList")
	}

	if raw, found := object["restrictedRatList"]; found {
		err = json.Unmarshal(raw, &a.RestrictedRatList)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedRatList': %w", err)
		}
		delete(object, "restrictedRatList")
	}

	if raw, found := object["restrictedSecondaryRatList"]; found {
		err = json.Unmarshal(raw, &a.RestrictedSecondaryRatList)
		if err != nil {
			return fmt.Errorf("error reading 'restrictedSecondaryRatList': %w", err)
		}
		delete(object, "restrictedSecondaryRatList")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["seafData"]; found {
		err = json.Unmarshal(raw, &a.SeafData)
		if err != nil {
			return fmt.Errorf("error reading 'seafData': %w", err)
		}
		delete(object, "seafData")
	}

	if raw, found := object["serviceAreaRestriction"]; found {
		err = json.Unmarshal(raw, &a.ServiceAreaRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'serviceAreaRestriction': %w", err)
		}
		delete(object, "serviceAreaRestriction")
	}

	if raw, found := object["serviceGapExpiryTime"]; found {
		err = json.Unmarshal(raw, &a.ServiceGapExpiryTime)
		if err != nil {
			return fmt.Errorf("error reading 'serviceGapExpiryTime': %w", err)
		}
		delete(object, "serviceGapExpiryTime")
	}

	if raw, found := object["sessionContextList"]; found {
		err = json.Unmarshal(raw, &a.SessionContextList)
		if err != nil {
			return fmt.Errorf("error reading 'sessionContextList': %w", err)
		}
		delete(object, "sessionContextList")
	}

	if raw, found := object["smallDataRateStatusInfos"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatusInfos)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatusInfos': %w", err)
		}
		delete(object, "smallDataRateStatusInfos")
	}

	if raw, found := object["smfSelInfo"]; found {
		err = json.Unmarshal(raw, &a.SmfSelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelInfo': %w", err)
		}
		delete(object, "smfSelInfo")
	}

	if raw, found := object["smsfBindingInfo"]; found {
		err = json.Unmarshal(raw, &a.SmsfBindingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'smsfBindingInfo': %w", err)
		}
		delete(object, "smsfBindingInfo")
	}

	if raw, found := object["smsfId"]; found {
		err = json.Unmarshal(raw, &a.SmsfId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfId': %w", err)
		}
		delete(object, "smsfId")
	}

	if raw, found := object["smsfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.SmsfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfServiceSetId': %w", err)
		}
		delete(object, "smsfServiceSetId")
	}

	if raw, found := object["smsfSetId"]; found {
		err = json.Unmarshal(raw, &a.SmsfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfSetId': %w", err)
		}
		delete(object, "smsfSetId")
	}

	if raw, found := object["stnSr"]; found {
		err = json.Unmarshal(raw, &a.StnSr)
		if err != nil {
			return fmt.Errorf("error reading 'stnSr': %w", err)
		}
		delete(object, "stnSr")
	}

	if raw, found := object["subRfsp"]; found {
		err = json.Unmarshal(raw, &a.SubRfsp)
		if err != nil {
			return fmt.Errorf("error reading 'subRfsp': %w", err)
		}
		delete(object, "subRfsp")
	}

	if raw, found := object["subUeAmbr"]; found {
		err = json.Unmarshal(raw, &a.SubUeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'subUeAmbr': %w", err)
		}
		delete(object, "subUeAmbr")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supiUnauthInd"]; found {
		err = json.Unmarshal(raw, &a.SupiUnauthInd)
		if err != nil {
			return fmt.Errorf("error reading 'supiUnauthInd': %w", err)
		}
		delete(object, "supiUnauthInd")
	}

	if raw, found := object["supportedCodecList"]; found {
		err = json.Unmarshal(raw, &a.SupportedCodecList)
		if err != nil {
			return fmt.Errorf("error reading 'supportedCodecList': %w", err)
		}
		delete(object, "supportedCodecList")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if raw, found := object["uePolicyReqTriggerList"]; found {
		err = json.Unmarshal(raw, &a.UePolicyReqTriggerList)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicyReqTriggerList': %w", err)
		}
		delete(object, "uePolicyReqTriggerList")
	}

	if raw, found := object["updpSubscriptionData"]; found {
		err = json.Unmarshal(raw, &a.UpdpSubscriptionData)
		if err != nil {
			return fmt.Errorf("error reading 'updpSubscriptionData': %w", err)
		}
		delete(object, "updpSubscriptionData")
	}

	if raw, found := object["usedRfsp"]; found {
		err = json.Unmarshal(raw, &a.UsedRfsp)
		if err != nil {
			return fmt.Errorf("error reading 'usedRfsp': %w", err)
		}
		delete(object, "usedRfsp")
	}

	if raw, found := object["usedServiceAreaRestriction"]; found {
		err = json.Unmarshal(raw, &a.UsedServiceAreaRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'usedServiceAreaRestriction': %w", err)
		}
		delete(object, "usedServiceAreaRestriction")
	}

	if raw, found := object["v2xContext"]; found {
		err = json.Unmarshal(raw, &a.V2xContext)
		if err != nil {
			return fmt.Errorf("error reading 'v2xContext': %w", err)
		}
		delete(object, "v2xContext")
	}

	if raw, found := object["wlServAreaRes"]; found {
		err = json.Unmarshal(raw, &a.WlServAreaRes)
		if err != nil {
			return fmt.Errorf("error reading 'wlServAreaRes': %w", err)
		}
		delete(object, "wlServAreaRes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContext to handle AdditionalProperties
func (a UeContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCapability != nil {
		object["5gMmCapability"], err = json.Marshal(a.N5gMmCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCapability': %w", err)
		}
	}

	if len(a.AmPolicyReqTriggerList) != 0 {
		object["amPolicyReqTriggerList"], err = json.Marshal(a.AmPolicyReqTriggerList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amPolicyReqTriggerList': %w", err)
		}
	}

	if a.AusfGroupId != nil {
		object["ausfGroupId"], err = json.Marshal(a.AusfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ausfGroupId': %w", err)
		}
	}

	if len(a.CMsisdn) != 0 {
		object["cMsisdn"], err = json.Marshal(a.CMsisdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cMsisdn': %w", err)
		}
	}

	if a.CagData != nil {
		object["cagData"], err = json.Marshal(a.CagData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cagData': %w", err)
		}
	}

	if a.DrxParameter != nil {
		object["drxParameter"], err = json.Marshal(a.DrxParameter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'drxParameter': %w", err)
		}
	}

	if a.EcRestrictionDataNb != nil {
		object["ecRestrictionDataNb"], err = json.Marshal(a.EcRestrictionDataNb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataNb': %w", err)
		}
	}

	if a.EcRestrictionDataWb != nil {
		object["ecRestrictionDataWb"], err = json.Marshal(a.EcRestrictionDataWb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataWb': %w", err)
		}
	}

	if len(a.EventSubscriptionList) != 0 {
		object["eventSubscriptionList"], err = json.Marshal(a.EventSubscriptionList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventSubscriptionList': %w", err)
		}
	}

	if len(a.ForbiddenAreaList) != 0 {
		object["forbiddenAreaList"], err = json.Marshal(a.ForbiddenAreaList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forbiddenAreaList': %w", err)
		}
	}

	if len(a.GpsiList) != 0 {
		object["gpsiList"], err = json.Marshal(a.GpsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiList': %w", err)
		}
	}

	if len(a.GroupList) != 0 {
		object["groupList"], err = json.Marshal(a.GroupList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupList': %w", err)
		}
	}

	if a.HpcfId != nil {
		object["hpcfId"], err = json.Marshal(a.HpcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hpcfId': %w", err)
		}
	}

	if a.HpcfSetId != nil {
		object["hpcfSetId"], err = json.Marshal(a.HpcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hpcfSetId': %w", err)
		}
	}

	if a.IabOperationAllowed != nil {
		object["iabOperationAllowed"], err = json.Marshal(a.IabOperationAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iabOperationAllowed': %w", err)
		}
	}

	if a.ImmediateMdtConf != nil {
		object["immediateMdtConf"], err = json.Marshal(a.ImmediateMdtConf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immediateMdtConf': %w", err)
		}
	}

	if a.LteCatMInd != nil {
		object["lteCatMInd"], err = json.Marshal(a.LteCatMInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lteCatMInd': %w", err)
		}
	}

	if a.ManagementMdtInd != nil {
		object["managementMdtInd"], err = json.Marshal(a.ManagementMdtInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'managementMdtInd': %w", err)
		}
	}

	if len(a.MmContextList) != 0 {
		object["mmContextList"], err = json.Marshal(a.MmContextList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mmContextList': %w", err)
		}
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.MsClassmark2 != nil {
		object["msClassmark2"], err = json.Marshal(a.MsClassmark2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'msClassmark2': %w", err)
		}
	}

	if a.PcfAmPolicyUri != nil {
		object["pcfAmPolicyUri"], err = json.Marshal(a.PcfAmPolicyUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfAmPolicyUri': %w", err)
		}
	}

	if a.PcfAmpBindingInfo != nil {
		object["pcfAmpBindingInfo"], err = json.Marshal(a.PcfAmpBindingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfAmpBindingInfo': %w", err)
		}
	}

	if a.PcfAmpServiceSetId != nil {
		object["pcfAmpServiceSetId"], err = json.Marshal(a.PcfAmpServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfAmpServiceSetId': %w", err)
		}
	}

	if a.PcfBinding != nil {
		object["pcfBinding"], err = json.Marshal(a.PcfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfBinding': %w", err)
		}
	}

	if a.PcfGroupId != nil {
		object["pcfGroupId"], err = json.Marshal(a.PcfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfGroupId': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if a.PcfRfsp != 0 {
		object["pcfRfsp"], err = json.Marshal(a.PcfRfsp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfRfsp': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	if a.PcfUeAmbr != nil {
		object["pcfUeAmbr"], err = json.Marshal(a.PcfUeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfUeAmbr': %w", err)
		}
	}

	if a.PcfUePolicyUri != nil {
		object["pcfUePolicyUri"], err = json.Marshal(a.PcfUePolicyUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfUePolicyUri': %w", err)
		}
	}

	if a.PcfUepBindingInfo != nil {
		object["pcfUepBindingInfo"], err = json.Marshal(a.PcfUepBindingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfUepBindingInfo': %w", err)
		}
	}

	if a.PcfUepServiceSetId != nil {
		object["pcfUepServiceSetId"], err = json.Marshal(a.PcfUepServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfUepServiceSetId': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PraInAmPolicy != nil {
		object["praInAmPolicy"], err = json.Marshal(a.PraInAmPolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInAmPolicy': %w", err)
		}
	}

	if a.PraInUePolicy != nil {
		object["praInUePolicy"], err = json.Marshal(a.PraInUePolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInUePolicy': %w", err)
		}
	}

	if len(a.RestrictedCoreNwTypeList) != 0 {
		object["restrictedCoreNwTypeList"], err = json.Marshal(a.RestrictedCoreNwTypeList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedCoreNwTypeList': %w", err)
		}
	}

	if len(a.RestrictedPrimaryRatList) != 0 {
		object["restrictedPrimaryRatList"], err = json.Marshal(a.RestrictedPrimaryRatList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedPrimaryRatList': %w", err)
		}
	}

	if len(a.RestrictedRatList) != 0 {
		object["restrictedRatList"], err = json.Marshal(a.RestrictedRatList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedRatList': %w", err)
		}
	}

	if len(a.RestrictedSecondaryRatList) != 0 {
		object["restrictedSecondaryRatList"], err = json.Marshal(a.RestrictedSecondaryRatList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictedSecondaryRatList': %w", err)
		}
	}

	if a.RoutingIndicator != nil {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	if a.SeafData != nil {
		object["seafData"], err = json.Marshal(a.SeafData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'seafData': %w", err)
		}
	}

	if a.ServiceAreaRestriction != nil {
		object["serviceAreaRestriction"], err = json.Marshal(a.ServiceAreaRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceAreaRestriction': %w", err)
		}
	}

	if a.ServiceGapExpiryTime != nil {
		object["serviceGapExpiryTime"], err = json.Marshal(a.ServiceGapExpiryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceGapExpiryTime': %w", err)
		}
	}

	if len(a.SessionContextList) != 0 {
		object["sessionContextList"], err = json.Marshal(a.SessionContextList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionContextList': %w", err)
		}
	}

	if len(a.SmallDataRateStatusInfos) != 0 {
		object["smallDataRateStatusInfos"], err = json.Marshal(a.SmallDataRateStatusInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatusInfos': %w", err)
		}
	}

	object["smfSelInfo"], err = json.Marshal(a.SmfSelInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfSelInfo': %w", err)
	}

	if a.SmsfBindingInfo != nil {
		object["smsfBindingInfo"], err = json.Marshal(a.SmsfBindingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfBindingInfo': %w", err)
		}
	}

	if a.SmsfId != nil {
		object["smsfId"], err = json.Marshal(a.SmsfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfId': %w", err)
		}
	}

	if a.SmsfServiceSetId != nil {
		object["smsfServiceSetId"], err = json.Marshal(a.SmsfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfServiceSetId': %w", err)
		}
	}

	if a.SmsfSetId != nil {
		object["smsfSetId"], err = json.Marshal(a.SmsfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfSetId': %w", err)
		}
	}

	if a.StnSr != nil {
		object["stnSr"], err = json.Marshal(a.StnSr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stnSr': %w", err)
		}
	}

	if a.SubRfsp != 0 {
		object["subRfsp"], err = json.Marshal(a.SubRfsp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subRfsp': %w", err)
		}
	}

	if a.SubUeAmbr != nil {
		object["subUeAmbr"], err = json.Marshal(a.SubUeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subUeAmbr': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupiUnauthInd != nil {
		object["supiUnauthInd"], err = json.Marshal(a.SupiUnauthInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supiUnauthInd': %w", err)
		}
	}

	if len(a.SupportedCodecList) != 0 {
		object["supportedCodecList"], err = json.Marshal(a.SupportedCodecList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedCodecList': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	if len(a.UePolicyReqTriggerList) != 0 {
		object["uePolicyReqTriggerList"], err = json.Marshal(a.UePolicyReqTriggerList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicyReqTriggerList': %w", err)
		}
	}

	if a.UpdpSubscriptionData != nil {
		object["updpSubscriptionData"], err = json.Marshal(a.UpdpSubscriptionData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updpSubscriptionData': %w", err)
		}
	}

	if a.UsedRfsp != 0 {
		object["usedRfsp"], err = json.Marshal(a.UsedRfsp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usedRfsp': %w", err)
		}
	}

	if a.UsedServiceAreaRestriction != nil {
		object["usedServiceAreaRestriction"], err = json.Marshal(a.UsedServiceAreaRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usedServiceAreaRestriction': %w", err)
		}
	}

	if a.V2xContext != nil {
		object["v2xContext"], err = json.Marshal(a.V2xContext)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'v2xContext': %w", err)
		}
	}

	if a.WlServAreaRes != nil {
		object["wlServAreaRes"], err = json.Marshal(a.WlServAreaRes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wlServAreaRes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextCancelRelocateData. Returns the specified
// element and whether it was found
func (a UeContextCancelRelocateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextCancelRelocateData
func (a *UeContextCancelRelocateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextCancelRelocateData to handle AdditionalProperties
func (a *UeContextCancelRelocateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["relocationCancelRequest"]; found {
		err = json.Unmarshal(raw, &a.RelocationCancelRequest)
		if err != nil {
			return fmt.Errorf("error reading 'relocationCancelRequest': %w", err)
		}
		delete(object, "relocationCancelRequest")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextCancelRelocateData to handle AdditionalProperties
func (a UeContextCancelRelocateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["relocationCancelRequest"], err = json.Marshal(a.RelocationCancelRequest)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'relocationCancelRequest': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextCreateData. Returns the specified
// element and whether it was found
func (a UeContextCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextCreateData
func (a *UeContextCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextCreateData to handle AdditionalProperties
func (a *UeContextCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n2NotifyUri"]; found {
		err = json.Unmarshal(raw, &a.N2NotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'n2NotifyUri': %w", err)
		}
		delete(object, "n2NotifyUri")
	}

	if raw, found := object["ngapCause"]; found {
		err = json.Unmarshal(raw, &a.NgapCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngapCause': %w", err)
		}
		delete(object, "ngapCause")
	}

	if raw, found := object["pduSessionList"]; found {
		err = json.Unmarshal(raw, &a.PduSessionList)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionList': %w", err)
		}
		delete(object, "pduSessionList")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["sourceToTargetData"]; found {
		err = json.Unmarshal(raw, &a.SourceToTargetData)
		if err != nil {
			return fmt.Errorf("error reading 'sourceToTargetData': %w", err)
		}
		delete(object, "sourceToTargetData")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetId"]; found {
		err = json.Unmarshal(raw, &a.TargetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetId': %w", err)
		}
		delete(object, "targetId")
	}

	if raw, found := object["ueContext"]; found {
		err = json.Unmarshal(raw, &a.UeContext)
		if err != nil {
			return fmt.Errorf("error reading 'ueContext': %w", err)
		}
		delete(object, "ueContext")
	}

	if raw, found := object["ueRadioCapability"]; found {
		err = json.Unmarshal(raw, &a.UeRadioCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueRadioCapability': %w", err)
		}
		delete(object, "ueRadioCapability")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextCreateData to handle AdditionalProperties
func (a UeContextCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N2NotifyUri != nil {
		object["n2NotifyUri"], err = json.Marshal(a.N2NotifyUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2NotifyUri': %w", err)
		}
	}

	if a.NgapCause != nil {
		object["ngapCause"], err = json.Marshal(a.NgapCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngapCause': %w", err)
		}
	}

	object["pduSessionList"], err = json.Marshal(a.PduSessionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionList': %w", err)
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	object["sourceToTargetData"], err = json.Marshal(a.SourceToTargetData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sourceToTargetData': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["targetId"], err = json.Marshal(a.TargetId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'targetId': %w", err)
	}

	object["ueContext"], err = json.Marshal(a.UeContext)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueContext': %w", err)
	}

	if a.UeRadioCapability != nil {
		object["ueRadioCapability"], err = json.Marshal(a.UeRadioCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueRadioCapability': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextCreateError. Returns the specified
// element and whether it was found
func (a UeContextCreateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextCreateError
func (a *UeContextCreateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextCreateError to handle AdditionalProperties
func (a *UeContextCreateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["ngapCause"]; found {
		err = json.Unmarshal(raw, &a.NgapCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngapCause': %w", err)
		}
		delete(object, "ngapCause")
	}

	if raw, found := object["targetToSourceFailureData"]; found {
		err = json.Unmarshal(raw, &a.TargetToSourceFailureData)
		if err != nil {
			return fmt.Errorf("error reading 'targetToSourceFailureData': %w", err)
		}
		delete(object, "targetToSourceFailureData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextCreateError to handle AdditionalProperties
func (a UeContextCreateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.NgapCause != nil {
		object["ngapCause"], err = json.Marshal(a.NgapCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngapCause': %w", err)
		}
	}

	if a.TargetToSourceFailureData != nil {
		object["targetToSourceFailureData"], err = json.Marshal(a.TargetToSourceFailureData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetToSourceFailureData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextCreatedData. Returns the specified
// element and whether it was found
func (a UeContextCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextCreatedData
func (a *UeContextCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextCreatedData to handle AdditionalProperties
func (a *UeContextCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["failedSessionList"]; found {
		err = json.Unmarshal(raw, &a.FailedSessionList)
		if err != nil {
			return fmt.Errorf("error reading 'failedSessionList': %w", err)
		}
		delete(object, "failedSessionList")
	}

	if raw, found := object["pcfReselectedInd"]; found {
		err = json.Unmarshal(raw, &a.PcfReselectedInd)
		if err != nil {
			return fmt.Errorf("error reading 'pcfReselectedInd': %w", err)
		}
		delete(object, "pcfReselectedInd")
	}

	if raw, found := object["pduSessionList"]; found {
		err = json.Unmarshal(raw, &a.PduSessionList)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionList': %w", err)
		}
		delete(object, "pduSessionList")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetToSourceData"]; found {
		err = json.Unmarshal(raw, &a.TargetToSourceData)
		if err != nil {
			return fmt.Errorf("error reading 'targetToSourceData': %w", err)
		}
		delete(object, "targetToSourceData")
	}

	if raw, found := object["ueContext"]; found {
		err = json.Unmarshal(raw, &a.UeContext)
		if err != nil {
			return fmt.Errorf("error reading 'ueContext': %w", err)
		}
		delete(object, "ueContext")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextCreatedData to handle AdditionalProperties
func (a UeContextCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.FailedSessionList) != 0 {
		object["failedSessionList"], err = json.Marshal(a.FailedSessionList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedSessionList': %w", err)
		}
	}

	if a.PcfReselectedInd != nil {
		object["pcfReselectedInd"], err = json.Marshal(a.PcfReselectedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfReselectedInd': %w", err)
		}
	}

	object["pduSessionList"], err = json.Marshal(a.PduSessionList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionList': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["targetToSourceData"], err = json.Marshal(a.TargetToSourceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'targetToSourceData': %w", err)
	}

	object["ueContext"], err = json.Marshal(a.UeContext)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueContext': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInAmfData. Returns the specified
// element and whether it was found
func (a UeContextInAmfData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInAmfData
func (a *UeContextInAmfData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInAmfData to handle AdditionalProperties
func (a *UeContextInAmfData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["epsInterworkingInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInfo': %w", err)
		}
		delete(object, "epsInterworkingInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInAmfData to handle AdditionalProperties
func (a UeContextInAmfData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EpsInterworkingInfo != nil {
		object["epsInterworkingInfo"], err = json.Marshal(a.EpsInterworkingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInSmfData. Returns the specified
// element and whether it was found
func (a UeContextInSmfData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInSmfData
func (a *UeContextInSmfData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInSmfData to handle AdditionalProperties
func (a *UeContextInSmfData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["emergencyInfo"]; found {
		err = json.Unmarshal(raw, &a.EmergencyInfo)
		if err != nil {
			return fmt.Errorf("error reading 'emergencyInfo': %w", err)
		}
		delete(object, "emergencyInfo")
	}

	if raw, found := object["pduSessions"]; found {
		err = json.Unmarshal(raw, &a.PduSessions)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessions': %w", err)
		}
		delete(object, "pduSessions")
	}

	if raw, found := object["pgwInfo"]; found {
		err = json.Unmarshal(raw, &a.PgwInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pgwInfo': %w", err)
		}
		delete(object, "pgwInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInSmfData to handle AdditionalProperties
func (a UeContextInSmfData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EmergencyInfo != nil {
		object["emergencyInfo"], err = json.Marshal(a.EmergencyInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'emergencyInfo': %w", err)
		}
	}

	if a.PduSessions != nil {
		object["pduSessions"], err = json.Marshal(a.PduSessions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessions': %w", err)
		}
	}

	if len(a.PgwInfo) != 0 {
		object["pgwInfo"], err = json.Marshal(a.PgwInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInSmsfData. Returns the specified
// element and whether it was found
func (a UeContextInSmsfData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInSmsfData
func (a *UeContextInSmsfData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInSmsfData to handle AdditionalProperties
func (a *UeContextInSmsfData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smsfInfo3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.SmsfInfo3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInfo3GppAccess': %w", err)
		}
		delete(object, "smsfInfo3GppAccess")
	}

	if raw, found := object["smsfInfoNon3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.SmsfInfoNon3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInfoNon3GppAccess': %w", err)
		}
		delete(object, "smsfInfoNon3GppAccess")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInSmsfData to handle AdditionalProperties
func (a UeContextInSmsfData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmsfInfo3GppAccess != nil {
		object["smsfInfo3GppAccess"], err = json.Marshal(a.SmsfInfo3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfInfo3GppAccess': %w", err)
		}
	}

	if a.SmsfInfoNon3GppAccess != nil {
		object["smsfInfoNon3GppAccess"], err = json.Marshal(a.SmsfInfoNon3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfInfoNon3GppAccess': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInfo. Returns the specified
// element and whether it was found
func (a UeContextInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInfo
func (a *UeContextInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInfo to handle AdditionalProperties
func (a *UeContextInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["lastActTime"]; found {
		err = json.Unmarshal(raw, &a.LastActTime)
		if err != nil {
			return fmt.Errorf("error reading 'lastActTime': %w", err)
		}
		delete(object, "lastActTime")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["supportVoPS"]; found {
		err = json.Unmarshal(raw, &a.SupportVoPS)
		if err != nil {
			return fmt.Errorf("error reading 'supportVoPS': %w", err)
		}
		delete(object, "supportVoPS")
	}

	if raw, found := object["supportVoPSn3gpp"]; found {
		err = json.Unmarshal(raw, &a.SupportVoPSn3gpp)
		if err != nil {
			return fmt.Errorf("error reading 'supportVoPSn3gpp': %w", err)
		}
		delete(object, "supportVoPSn3gpp")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInfo to handle AdditionalProperties
func (a UeContextInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.LastActTime != nil {
		object["lastActTime"], err = json.Marshal(a.LastActTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lastActTime': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.SupportVoPS != nil {
		object["supportVoPS"], err = json.Marshal(a.SupportVoPS)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportVoPS': %w", err)
		}
	}

	if a.SupportVoPSn3gpp != nil {
		object["supportVoPSn3gpp"], err = json.Marshal(a.SupportVoPSn3gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportVoPSn3gpp': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextRelocateData. Returns the specified
// element and whether it was found
func (a UeContextRelocateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextRelocateData
func (a *UeContextRelocateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextRelocateData to handle AdditionalProperties
func (a *UeContextRelocateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["forwardRelocationRequest"]; found {
		err = json.Unmarshal(raw, &a.ForwardRelocationRequest)
		if err != nil {
			return fmt.Errorf("error reading 'forwardRelocationRequest': %w", err)
		}
		delete(object, "forwardRelocationRequest")
	}

	if raw, found := object["ngapCause"]; found {
		err = json.Unmarshal(raw, &a.NgapCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngapCause': %w", err)
		}
		delete(object, "ngapCause")
	}

	if raw, found := object["pduSessionList"]; found {
		err = json.Unmarshal(raw, &a.PduSessionList)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionList': %w", err)
		}
		delete(object, "pduSessionList")
	}

	if raw, found := object["sourceToTargetData"]; found {
		err = json.Unmarshal(raw, &a.SourceToTargetData)
		if err != nil {
			return fmt.Errorf("error reading 'sourceToTargetData': %w", err)
		}
		delete(object, "sourceToTargetData")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetId"]; found {
		err = json.Unmarshal(raw, &a.TargetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetId': %w", err)
		}
		delete(object, "targetId")
	}

	if raw, found := object["ueContext"]; found {
		err = json.Unmarshal(raw, &a.UeContext)
		if err != nil {
			return fmt.Errorf("error reading 'ueContext': %w", err)
		}
		delete(object, "ueContext")
	}

	if raw, found := object["ueRadioCapability"]; found {
		err = json.Unmarshal(raw, &a.UeRadioCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueRadioCapability': %w", err)
		}
		delete(object, "ueRadioCapability")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextRelocateData to handle AdditionalProperties
func (a UeContextRelocateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["forwardRelocationRequest"], err = json.Marshal(a.ForwardRelocationRequest)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'forwardRelocationRequest': %w", err)
	}

	if a.NgapCause != nil {
		object["ngapCause"], err = json.Marshal(a.NgapCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngapCause': %w", err)
		}
	}

	if len(a.PduSessionList) != 0 {
		object["pduSessionList"], err = json.Marshal(a.PduSessionList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionList': %w", err)
		}
	}

	object["sourceToTargetData"], err = json.Marshal(a.SourceToTargetData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sourceToTargetData': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["targetId"], err = json.Marshal(a.TargetId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'targetId': %w", err)
	}

	object["ueContext"], err = json.Marshal(a.UeContext)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueContext': %w", err)
	}

	if a.UeRadioCapability != nil {
		object["ueRadioCapability"], err = json.Marshal(a.UeRadioCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueRadioCapability': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextRelocatedData. Returns the specified
// element and whether it was found
func (a UeContextRelocatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextRelocatedData
func (a *UeContextRelocatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextRelocatedData to handle AdditionalProperties
func (a *UeContextRelocatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ueContext"]; found {
		err = json.Unmarshal(raw, &a.UeContext)
		if err != nil {
			return fmt.Errorf("error reading 'ueContext': %w", err)
		}
		delete(object, "ueContext")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextRelocatedData to handle AdditionalProperties
func (a UeContextRelocatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ueContext"], err = json.Marshal(a.UeContext)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueContext': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextTransferReqData. Returns the specified
// element and whether it was found
func (a UeContextTransferReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextTransferReqData
func (a *UeContextTransferReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextTransferReqData to handle AdditionalProperties
func (a *UeContextTransferReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &a.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
		delete(object, "reason")
	}

	if raw, found := object["regRequest"]; found {
		err = json.Unmarshal(raw, &a.RegRequest)
		if err != nil {
			return fmt.Errorf("error reading 'regRequest': %w", err)
		}
		delete(object, "regRequest")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextTransferReqData to handle AdditionalProperties
func (a UeContextTransferReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	object["reason"], err = json.Marshal(a.Reason)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'reason': %w", err)
	}

	if a.RegRequest != nil {
		object["regRequest"], err = json.Marshal(a.RegRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'regRequest': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextTransferRspData. Returns the specified
// element and whether it was found
func (a UeContextTransferRspData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextTransferRspData
func (a *UeContextTransferRspData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextTransferRspData to handle AdditionalProperties
func (a *UeContextTransferRspData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueContext"]; found {
		err = json.Unmarshal(raw, &a.UeContext)
		if err != nil {
			return fmt.Errorf("error reading 'ueContext': %w", err)
		}
		delete(object, "ueContext")
	}

	if raw, found := object["ueNbiotRadioCapability"]; found {
		err = json.Unmarshal(raw, &a.UeNbiotRadioCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueNbiotRadioCapability': %w", err)
		}
		delete(object, "ueNbiotRadioCapability")
	}

	if raw, found := object["ueRadioCapability"]; found {
		err = json.Unmarshal(raw, &a.UeRadioCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueRadioCapability': %w", err)
		}
		delete(object, "ueRadioCapability")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextTransferRspData to handle AdditionalProperties
func (a UeContextTransferRspData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["ueContext"], err = json.Marshal(a.UeContext)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueContext': %w", err)
	}

	if a.UeNbiotRadioCapability != nil {
		object["ueNbiotRadioCapability"], err = json.Marshal(a.UeNbiotRadioCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueNbiotRadioCapability': %w", err)
		}
	}

	if a.UeRadioCapability != nil {
		object["ueRadioCapability"], err = json.Marshal(a.UeRadioCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueRadioCapability': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeDifferentiationInfo. Returns the specified
// element and whether it was found
func (a UeDifferentiationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeDifferentiationInfo
func (a *UeDifferentiationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeDifferentiationInfo to handle AdditionalProperties
func (a *UeDifferentiationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryInd"]; found {
		err = json.Unmarshal(raw, &a.BatteryInd)
		if err != nil {
			return fmt.Errorf("error reading 'batteryInd': %w", err)
		}
		delete(object, "batteryInd")
	}

	if raw, found := object["periodicComInd"]; found {
		err = json.Unmarshal(raw, &a.PeriodicComInd)
		if err != nil {
			return fmt.Errorf("error reading 'periodicComInd': %w", err)
		}
		delete(object, "periodicComInd")
	}

	if raw, found := object["periodicTime"]; found {
		err = json.Unmarshal(raw, &a.PeriodicTime)
		if err != nil {
			return fmt.Errorf("error reading 'periodicTime': %w", err)
		}
		delete(object, "periodicTime")
	}

	if raw, found := object["scheduledComTime"]; found {
		err = json.Unmarshal(raw, &a.ScheduledComTime)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledComTime': %w", err)
		}
		delete(object, "scheduledComTime")
	}

	if raw, found := object["stationaryInd"]; found {
		err = json.Unmarshal(raw, &a.StationaryInd)
		if err != nil {
			return fmt.Errorf("error reading 'stationaryInd': %w", err)
		}
		delete(object, "stationaryInd")
	}

	if raw, found := object["trafficProfile"]; found {
		err = json.Unmarshal(raw, &a.TrafficProfile)
		if err != nil {
			return fmt.Errorf("error reading 'trafficProfile': %w", err)
		}
		delete(object, "trafficProfile")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeDifferentiationInfo to handle AdditionalProperties
func (a UeDifferentiationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryInd != nil {
		object["batteryInd"], err = json.Marshal(a.BatteryInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryInd': %w", err)
		}
	}

	if a.PeriodicComInd != nil {
		object["periodicComInd"], err = json.Marshal(a.PeriodicComInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicComInd': %w", err)
		}
	}

	if a.PeriodicTime != nil {
		object["periodicTime"], err = json.Marshal(a.PeriodicTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicTime': %w", err)
		}
	}

	if a.ScheduledComTime != nil {
		object["scheduledComTime"], err = json.Marshal(a.ScheduledComTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledComTime': %w", err)
		}
	}

	if a.StationaryInd != nil {
		object["stationaryInd"], err = json.Marshal(a.StationaryInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stationaryInd': %w", err)
		}
	}

	if a.TrafficProfile != nil {
		object["trafficProfile"], err = json.Marshal(a.TrafficProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficProfile': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeId. Returns the specified
// element and whether it was found
func (a UeId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeId
func (a *UeId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeId to handle AdditionalProperties
func (a *UeId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsiList"]; found {
		err = json.Unmarshal(raw, &a.GpsiList)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiList': %w", err)
		}
		delete(object, "gpsiList")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeId to handle AdditionalProperties
func (a UeId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GpsiList) != 0 {
		object["gpsiList"], err = json.Marshal(a.GpsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiList': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeIdentityInfo. Returns the specified
// element and whether it was found
func (a UeIdentityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeIdentityInfo
func (a *UeIdentityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeIdentityInfo to handle AdditionalProperties
func (a *UeIdentityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeIdentityInfo to handle AdditionalProperties
func (a UeIdentityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeInfo. Returns the specified
// element and whether it was found
func (a UeInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeInfo
func (a *UeInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeInfo to handle AdditionalProperties
func (a *UeInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gSrvccInfo"]; found {
		err = json.Unmarshal(raw, &a.N5gSrvccInfo)
		if err != nil {
			return fmt.Errorf("error reading '5gSrvccInfo': %w", err)
		}
		delete(object, "5gSrvccInfo")
	}

	if raw, found := object["tadsInfo"]; found {
		err = json.Unmarshal(raw, &a.TadsInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tadsInfo': %w", err)
		}
		delete(object, "tadsInfo")
	}

	if raw, found := object["userState"]; found {
		err = json.Unmarshal(raw, &a.UserState)
		if err != nil {
			return fmt.Errorf("error reading 'userState': %w", err)
		}
		delete(object, "userState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeInfo to handle AdditionalProperties
func (a UeInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gSrvccInfo != nil {
		object["5gSrvccInfo"], err = json.Marshal(a.N5gSrvccInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gSrvccInfo': %w", err)
		}
	}

	if a.TadsInfo != nil {
		object["tadsInfo"], err = json.Marshal(a.TadsInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tadsInfo': %w", err)
		}
	}

	if a.UserState != nil {
		object["userState"], err = json.Marshal(a.UserState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeInitiatedResourceRequest. Returns the specified
// element and whether it was found
func (a UeInitiatedResourceRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeInitiatedResourceRequest
func (a *UeInitiatedResourceRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeInitiatedResourceRequest to handle AdditionalProperties
func (a *UeInitiatedResourceRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["packFiltInfo"]; found {
		err = json.Unmarshal(raw, &a.PackFiltInfo)
		if err != nil {
			return fmt.Errorf("error reading 'packFiltInfo': %w", err)
		}
		delete(object, "packFiltInfo")
	}

	if raw, found := object["pccRuleId"]; found {
		err = json.Unmarshal(raw, &a.PccRuleId)
		if err != nil {
			return fmt.Errorf("error reading 'pccRuleId': %w", err)
		}
		delete(object, "pccRuleId")
	}

	if raw, found := object["precedence"]; found {
		err = json.Unmarshal(raw, &a.Precedence)
		if err != nil {
			return fmt.Errorf("error reading 'precedence': %w", err)
		}
		delete(object, "precedence")
	}

	if raw, found := object["reqQos"]; found {
		err = json.Unmarshal(raw, &a.ReqQos)
		if err != nil {
			return fmt.Errorf("error reading 'reqQos': %w", err)
		}
		delete(object, "reqQos")
	}

	if raw, found := object["ruleOp"]; found {
		err = json.Unmarshal(raw, &a.RuleOp)
		if err != nil {
			return fmt.Errorf("error reading 'ruleOp': %w", err)
		}
		delete(object, "ruleOp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeInitiatedResourceRequest to handle AdditionalProperties
func (a UeInitiatedResourceRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["packFiltInfo"], err = json.Marshal(a.PackFiltInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packFiltInfo': %w", err)
	}

	if a.PccRuleId != nil {
		object["pccRuleId"], err = json.Marshal(a.PccRuleId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pccRuleId': %w", err)
		}
	}

	if a.Precedence != nil {
		object["precedence"], err = json.Marshal(a.Precedence)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'precedence': %w", err)
		}
	}

	if a.ReqQos != nil {
		object["reqQos"], err = json.Marshal(a.ReqQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqQos': %w", err)
		}
	}

	object["ruleOp"], err = json.Marshal(a.RuleOp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ruleOp': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeN1N2InfoSubscriptionCreateData. Returns the specified
// element and whether it was found
func (a UeN1N2InfoSubscriptionCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeN1N2InfoSubscriptionCreateData
func (a *UeN1N2InfoSubscriptionCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeN1N2InfoSubscriptionCreateData to handle AdditionalProperties
func (a *UeN1N2InfoSubscriptionCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n1MessageClass"]; found {
		err = json.Unmarshal(raw, &a.N1MessageClass)
		if err != nil {
			return fmt.Errorf("error reading 'n1MessageClass': %w", err)
		}
		delete(object, "n1MessageClass")
	}

	if raw, found := object["n1NotifyCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.N1NotifyCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'n1NotifyCallbackUri': %w", err)
		}
		delete(object, "n1NotifyCallbackUri")
	}

	if raw, found := object["n2InformationClass"]; found {
		err = json.Unmarshal(raw, &a.N2InformationClass)
		if err != nil {
			return fmt.Errorf("error reading 'n2InformationClass': %w", err)
		}
		delete(object, "n2InformationClass")
	}

	if raw, found := object["n2NotifyCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.N2NotifyCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'n2NotifyCallbackUri': %w", err)
		}
		delete(object, "n2NotifyCallbackUri")
	}

	if raw, found := object["nfId"]; found {
		err = json.Unmarshal(raw, &a.NfId)
		if err != nil {
			return fmt.Errorf("error reading 'nfId': %w", err)
		}
		delete(object, "nfId")
	}

	if raw, found := object["oldGuami"]; found {
		err = json.Unmarshal(raw, &a.OldGuami)
		if err != nil {
			return fmt.Errorf("error reading 'oldGuami': %w", err)
		}
		delete(object, "oldGuami")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeN1N2InfoSubscriptionCreateData to handle AdditionalProperties
func (a UeN1N2InfoSubscriptionCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N1MessageClass != nil {
		object["n1MessageClass"], err = json.Marshal(a.N1MessageClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1MessageClass': %w", err)
		}
	}

	if a.N1NotifyCallbackUri != nil {
		object["n1NotifyCallbackUri"], err = json.Marshal(a.N1NotifyCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1NotifyCallbackUri': %w", err)
		}
	}

	if a.N2InformationClass != nil {
		object["n2InformationClass"], err = json.Marshal(a.N2InformationClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2InformationClass': %w", err)
		}
	}

	if a.N2NotifyCallbackUri != nil {
		object["n2NotifyCallbackUri"], err = json.Marshal(a.N2NotifyCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2NotifyCallbackUri': %w", err)
		}
	}

	if a.NfId != nil {
		object["nfId"], err = json.Marshal(a.NfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfId': %w", err)
		}
	}

	if a.OldGuami != nil {
		object["oldGuami"], err = json.Marshal(a.OldGuami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldGuami': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeN1N2InfoSubscriptionCreatedData. Returns the specified
// element and whether it was found
func (a UeN1N2InfoSubscriptionCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeN1N2InfoSubscriptionCreatedData
func (a *UeN1N2InfoSubscriptionCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeN1N2InfoSubscriptionCreatedData to handle AdditionalProperties
func (a *UeN1N2InfoSubscriptionCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n1n2NotifySubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.N1n2NotifySubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'n1n2NotifySubscriptionId': %w", err)
		}
		delete(object, "n1n2NotifySubscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeN1N2InfoSubscriptionCreatedData to handle AdditionalProperties
func (a UeN1N2InfoSubscriptionCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["n1n2NotifySubscriptionId"], err = json.Marshal(a.N1n2NotifySubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n1n2NotifySubscriptionId': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySection. Returns the specified
// element and whether it was found
func (a UePolicySection) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySection
func (a *UePolicySection) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySection to handle AdditionalProperties
func (a *UePolicySection) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["uePolicySectionInfo"]; found {
		err = json.Unmarshal(raw, &a.UePolicySectionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySectionInfo': %w", err)
		}
		delete(object, "uePolicySectionInfo")
	}

	if raw, found := object["upsi"]; found {
		err = json.Unmarshal(raw, &a.Upsi)
		if err != nil {
			return fmt.Errorf("error reading 'upsi': %w", err)
		}
		delete(object, "upsi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySection to handle AdditionalProperties
func (a UePolicySection) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["uePolicySectionInfo"], err = json.Marshal(a.UePolicySectionInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uePolicySectionInfo': %w", err)
	}

	object["upsi"], err = json.Marshal(a.Upsi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upsi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySet. Returns the specified
// element and whether it was found
func (a UePolicySet) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySet
func (a *UePolicySet) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySet to handle AdditionalProperties
func (a *UePolicySet) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedRouteSelDescs"]; found {
		err = json.Unmarshal(raw, &a.AllowedRouteSelDescs)
		if err != nil {
			return fmt.Errorf("error reading 'allowedRouteSelDescs': %w", err)
		}
		delete(object, "allowedRouteSelDescs")
	}

	if raw, found := object["andspInd"]; found {
		err = json.Unmarshal(raw, &a.AndspInd)
		if err != nil {
			return fmt.Errorf("error reading 'andspInd': %w", err)
		}
		delete(object, "andspInd")
	}

	if raw, found := object["osIds"]; found {
		err = json.Unmarshal(raw, &a.OsIds)
		if err != nil {
			return fmt.Errorf("error reading 'osIds': %w", err)
		}
		delete(object, "osIds")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["praInfos"]; found {
		err = json.Unmarshal(raw, &a.PraInfos)
		if err != nil {
			return fmt.Errorf("error reading 'praInfos': %w", err)
		}
		delete(object, "praInfos")
	}

	if raw, found := object["subscCats"]; found {
		err = json.Unmarshal(raw, &a.SubscCats)
		if err != nil {
			return fmt.Errorf("error reading 'subscCats': %w", err)
		}
		delete(object, "subscCats")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["uePolicySections"]; found {
		err = json.Unmarshal(raw, &a.UePolicySections)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySections': %w", err)
		}
		delete(object, "uePolicySections")
	}

	if raw, found := object["upsis"]; found {
		err = json.Unmarshal(raw, &a.Upsis)
		if err != nil {
			return fmt.Errorf("error reading 'upsis': %w", err)
		}
		delete(object, "upsis")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySet to handle AdditionalProperties
func (a UePolicySet) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedRouteSelDescs != nil {
		object["allowedRouteSelDescs"], err = json.Marshal(a.AllowedRouteSelDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedRouteSelDescs': %w", err)
		}
	}

	if a.AndspInd != nil {
		object["andspInd"], err = json.Marshal(a.AndspInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'andspInd': %w", err)
		}
	}

	if len(a.OsIds) != 0 {
		object["osIds"], err = json.Marshal(a.OsIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'osIds': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PraInfos != nil {
		object["praInfos"], err = json.Marshal(a.PraInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'praInfos': %w", err)
		}
	}

	if len(a.SubscCats) != 0 {
		object["subscCats"], err = json.Marshal(a.SubscCats)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscCats': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UePolicySections != nil {
		object["uePolicySections"], err = json.Marshal(a.UePolicySections)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicySections': %w", err)
		}
	}

	if len(a.Upsis) != 0 {
		object["upsis"], err = json.Marshal(a.Upsis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upsis': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicySetPatch. Returns the specified
// element and whether it was found
func (a UePolicySetPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicySetPatch
func (a *UePolicySetPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicySetPatch to handle AdditionalProperties
func (a *UePolicySetPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["andspInd"]; found {
		err = json.Unmarshal(raw, &a.AndspInd)
		if err != nil {
			return fmt.Errorf("error reading 'andspInd': %w", err)
		}
		delete(object, "andspInd")
	}

	if raw, found := object["osIds"]; found {
		err = json.Unmarshal(raw, &a.OsIds)
		if err != nil {
			return fmt.Errorf("error reading 'osIds': %w", err)
		}
		delete(object, "osIds")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["uePolicySections"]; found {
		err = json.Unmarshal(raw, &a.UePolicySections)
		if err != nil {
			return fmt.Errorf("error reading 'uePolicySections': %w", err)
		}
		delete(object, "uePolicySections")
	}

	if raw, found := object["upsis"]; found {
		err = json.Unmarshal(raw, &a.Upsis)
		if err != nil {
			return fmt.Errorf("error reading 'upsis': %w", err)
		}
		delete(object, "upsis")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicySetPatch to handle AdditionalProperties
func (a UePolicySetPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AndspInd != nil {
		object["andspInd"], err = json.Marshal(a.AndspInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'andspInd': %w", err)
		}
	}

	if len(a.OsIds) != 0 {
		object["osIds"], err = json.Marshal(a.OsIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'osIds': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.UePolicySections != nil {
		object["uePolicySections"], err = json.Marshal(a.UePolicySections)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uePolicySections': %w", err)
		}
	}

	if len(a.Upsis) != 0 {
		object["upsis"], err = json.Marshal(a.Upsis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upsis': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UePolicyTransferFailureNotification. Returns the specified
// element and whether it was found
func (a UePolicyTransferFailureNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UePolicyTransferFailureNotification
func (a *UePolicyTransferFailureNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UePolicyTransferFailureNotification to handle AdditionalProperties
func (a *UePolicyTransferFailureNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["ptis"]; found {
		err = json.Unmarshal(raw, &a.Ptis)
		if err != nil {
			return fmt.Errorf("error reading 'ptis': %w", err)
		}
		delete(object, "ptis")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UePolicyTransferFailureNotification to handle AdditionalProperties
func (a UePolicyTransferFailureNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cause"], err = json.Marshal(a.Cause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cause': %w", err)
	}

	object["ptis"], err = json.Marshal(a.Ptis)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ptis': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeRegStatusUpdateReqData. Returns the specified
// element and whether it was found
func (a UeRegStatusUpdateReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeRegStatusUpdateReqData
func (a *UeRegStatusUpdateReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeRegStatusUpdateReqData to handle AdditionalProperties
func (a *UeRegStatusUpdateReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pcfReselectedInd"]; found {
		err = json.Unmarshal(raw, &a.PcfReselectedInd)
		if err != nil {
			return fmt.Errorf("error reading 'pcfReselectedInd': %w", err)
		}
		delete(object, "pcfReselectedInd")
	}

	if raw, found := object["smfChangeInfoList"]; found {
		err = json.Unmarshal(raw, &a.SmfChangeInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'smfChangeInfoList': %w", err)
		}
		delete(object, "smfChangeInfoList")
	}

	if raw, found := object["toReleaseSessionList"]; found {
		err = json.Unmarshal(raw, &a.ToReleaseSessionList)
		if err != nil {
			return fmt.Errorf("error reading 'toReleaseSessionList': %w", err)
		}
		delete(object, "toReleaseSessionList")
	}

	if raw, found := object["transferStatus"]; found {
		err = json.Unmarshal(raw, &a.TransferStatus)
		if err != nil {
			return fmt.Errorf("error reading 'transferStatus': %w", err)
		}
		delete(object, "transferStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeRegStatusUpdateReqData to handle AdditionalProperties
func (a UeRegStatusUpdateReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PcfReselectedInd != nil {
		object["pcfReselectedInd"], err = json.Marshal(a.PcfReselectedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfReselectedInd': %w", err)
		}
	}

	if len(a.SmfChangeInfoList) != 0 {
		object["smfChangeInfoList"], err = json.Marshal(a.SmfChangeInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfChangeInfoList': %w", err)
		}
	}

	if len(a.ToReleaseSessionList) != 0 {
		object["toReleaseSessionList"], err = json.Marshal(a.ToReleaseSessionList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'toReleaseSessionList': %w", err)
		}
	}

	object["transferStatus"], err = json.Marshal(a.TransferStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'transferStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeRegStatusUpdateRspData. Returns the specified
// element and whether it was found
func (a UeRegStatusUpdateRspData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeRegStatusUpdateRspData
func (a *UeRegStatusUpdateRspData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeRegStatusUpdateRspData to handle AdditionalProperties
func (a *UeRegStatusUpdateRspData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["regStatusTransferComplete"]; found {
		err = json.Unmarshal(raw, &a.RegStatusTransferComplete)
		if err != nil {
			return fmt.Errorf("error reading 'regStatusTransferComplete': %w", err)
		}
		delete(object, "regStatusTransferComplete")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeRegStatusUpdateRspData to handle AdditionalProperties
func (a UeRegStatusUpdateRspData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["regStatusTransferComplete"], err = json.Marshal(a.RegStatusTransferComplete)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'regStatusTransferComplete': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UlclBpInformation. Returns the specified
// element and whether it was found
func (a UlclBpInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UlclBpInformation
func (a *UlclBpInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UlclBpInformation to handle AdditionalProperties
func (a *UlclBpInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ulclBpUpfId"]; found {
		err = json.Unmarshal(raw, &a.UlclBpUpfId)
		if err != nil {
			return fmt.Errorf("error reading 'ulclBpUpfId': %w", err)
		}
		delete(object, "ulclBpUpfId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UlclBpInformation to handle AdditionalProperties
func (a UlclBpInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.UlclBpUpfId != nil {
		object["ulclBpUpfId"], err = json.Marshal(a.UlclBpUpfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulclBpUpfId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UnrelatedClass. Returns the specified
// element and whether it was found
func (a UnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UnrelatedClass
func (a *UnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UnrelatedClass to handle AdditionalProperties
func (a *UnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["defaultUnrelatedClass"]; found {
		err = json.Unmarshal(raw, &a.DefaultUnrelatedClass)
		if err != nil {
			return fmt.Errorf("error reading 'defaultUnrelatedClass': %w", err)
		}
		delete(object, "defaultUnrelatedClass")
	}

	if raw, found := object["externalUnrelatedClass"]; found {
		err = json.Unmarshal(raw, &a.ExternalUnrelatedClass)
		if err != nil {
			return fmt.Errorf("error reading 'externalUnrelatedClass': %w", err)
		}
		delete(object, "externalUnrelatedClass")
	}

	if raw, found := object["serviceTypeUnrelatedClasses"]; found {
		err = json.Unmarshal(raw, &a.ServiceTypeUnrelatedClasses)
		if err != nil {
			return fmt.Errorf("error reading 'serviceTypeUnrelatedClasses': %w", err)
		}
		delete(object, "serviceTypeUnrelatedClasses")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UnrelatedClass to handle AdditionalProperties
func (a UnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["defaultUnrelatedClass"], err = json.Marshal(a.DefaultUnrelatedClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultUnrelatedClass': %w", err)
	}

	if a.ExternalUnrelatedClass != nil {
		object["externalUnrelatedClass"], err = json.Marshal(a.ExternalUnrelatedClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalUnrelatedClass': %w", err)
		}
	}

	if len(a.ServiceTypeUnrelatedClasses) != 0 {
		object["serviceTypeUnrelatedClasses"], err = json.Marshal(a.ServiceTypeUnrelatedClasses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceTypeUnrelatedClasses': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpPathChgEvent. Returns the specified
// element and whether it was found
func (a UpPathChgEvent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpPathChgEvent
func (a *UpPathChgEvent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpPathChgEvent to handle AdditionalProperties
func (a *UpPathChgEvent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["notifCorreId"]; found {
		err = json.Unmarshal(raw, &a.NotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'notifCorreId': %w", err)
		}
		delete(object, "notifCorreId")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpPathChgEvent to handle AdditionalProperties
func (a UpPathChgEvent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAckInd != nil {
		object["afAckInd"], err = json.Marshal(a.AfAckInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
		}
	}

	object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
	}

	object["notifCorreId"], err = json.Marshal(a.NotifCorreId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifCorreId': %w", err)
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpSecurity. Returns the specified
// element and whether it was found
func (a UpSecurity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpSecurity
func (a *UpSecurity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpSecurity to handle AdditionalProperties
func (a *UpSecurity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["upConfid"]; found {
		err = json.Unmarshal(raw, &a.UpConfid)
		if err != nil {
			return fmt.Errorf("error reading 'upConfid': %w", err)
		}
		delete(object, "upConfid")
	}

	if raw, found := object["upIntegr"]; found {
		err = json.Unmarshal(raw, &a.UpIntegr)
		if err != nil {
			return fmt.Errorf("error reading 'upIntegr': %w", err)
		}
		delete(object, "upIntegr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpSecurity to handle AdditionalProperties
func (a UpSecurity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["upConfid"], err = json.Marshal(a.UpConfid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upConfid': %w", err)
	}

	object["upIntegr"], err = json.Marshal(a.UpIntegr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upIntegr': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpSecurityInfo. Returns the specified
// element and whether it was found
func (a UpSecurityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpSecurityInfo
func (a *UpSecurityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpSecurityInfo to handle AdditionalProperties
func (a *UpSecurityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["securityResult"]; found {
		err = json.Unmarshal(raw, &a.SecurityResult)
		if err != nil {
			return fmt.Errorf("error reading 'securityResult': %w", err)
		}
		delete(object, "securityResult")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpSecurityInfo to handle AdditionalProperties
func (a UpSecurityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.SecurityResult != nil {
		object["securityResult"], err = json.Marshal(a.SecurityResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'securityResult': %w", err)
		}
	}

	object["upSecurity"], err = json.Marshal(a.UpSecurity)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdatedItem. Returns the specified
// element and whether it was found
func (a UpdatedItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdatedItem
func (a *UpdatedItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdatedItem to handle AdditionalProperties
func (a *UpdatedItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["item"]; found {
		err = json.Unmarshal(raw, &a.Item)
		if err != nil {
			return fmt.Errorf("error reading 'item': %w", err)
		}
		delete(object, "item")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdatedItem to handle AdditionalProperties
func (a UpdatedItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["item"], err = json.Marshal(a.Item)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'item': %w", err)
	}

	object["value"], err = json.Marshal(a.Value)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdpSubscriptionData. Returns the specified
// element and whether it was found
func (a UpdpSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdpSubscriptionData
func (a *UpdpSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdpSubscriptionData to handle AdditionalProperties
func (a *UpdpSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["updpCallbackBinding"]; found {
		err = json.Unmarshal(raw, &a.UpdpCallbackBinding)
		if err != nil {
			return fmt.Errorf("error reading 'updpCallbackBinding': %w", err)
		}
		delete(object, "updpCallbackBinding")
	}

	if raw, found := object["updpNotifyCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.UpdpNotifyCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'updpNotifyCallbackUri': %w", err)
		}
		delete(object, "updpNotifyCallbackUri")
	}

	if raw, found := object["updpNotifySubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.UpdpNotifySubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'updpNotifySubscriptionId': %w", err)
		}
		delete(object, "updpNotifySubscriptionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdpSubscriptionData to handle AdditionalProperties
func (a UpdpSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UpdpCallbackBinding != nil {
		object["updpCallbackBinding"], err = json.Marshal(a.UpdpCallbackBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updpCallbackBinding': %w", err)
		}
	}

	object["updpNotifyCallbackUri"], err = json.Marshal(a.UpdpNotifyCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'updpNotifyCallbackUri': %w", err)
	}

	object["updpNotifySubscriptionId"], err = json.Marshal(a.UpdpNotifySubscriptionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'updpNotifySubscriptionId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpfCond. Returns the specified
// element and whether it was found
func (a UpfCond) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpfCond
func (a *UpfCond) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpfCond to handle AdditionalProperties
func (a *UpfCond) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["conditionType"]; found {
		err = json.Unmarshal(raw, &a.ConditionType)
		if err != nil {
			return fmt.Errorf("error reading 'conditionType': %w", err)
		}
		delete(object, "conditionType")
	}

	if raw, found := object["smfServingArea"]; found {
		err = json.Unmarshal(raw, &a.SmfServingArea)
		if err != nil {
			return fmt.Errorf("error reading 'smfServingArea': %w", err)
		}
		delete(object, "smfServingArea")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpfCond to handle AdditionalProperties
func (a UpfCond) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["conditionType"], err = json.Marshal(a.ConditionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'conditionType': %w", err)
	}

	if len(a.SmfServingArea) != 0 {
		object["smfServingArea"], err = json.Marshal(a.SmfServingArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServingArea': %w", err)
		}
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpfInfo. Returns the specified
// element and whether it was found
func (a UpfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpfInfo
func (a *UpfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpfInfo to handle AdditionalProperties
func (a *UpfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["atsssCapability"]; found {
		err = json.Unmarshal(raw, &a.AtsssCapability)
		if err != nil {
			return fmt.Errorf("error reading 'atsssCapability': %w", err)
		}
		delete(object, "atsssCapability")
	}

	if raw, found := object["dataForwarding"]; found {
		err = json.Unmarshal(raw, &a.DataForwarding)
		if err != nil {
			return fmt.Errorf("error reading 'dataForwarding': %w", err)
		}
		delete(object, "dataForwarding")
	}

	if raw, found := object["interfaceUpfInfoList"]; found {
		err = json.Unmarshal(raw, &a.InterfaceUpfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'interfaceUpfInfoList': %w", err)
		}
		delete(object, "interfaceUpfInfoList")
	}

	if raw, found := object["ipups"]; found {
		err = json.Unmarshal(raw, &a.Ipups)
		if err != nil {
			return fmt.Errorf("error reading 'ipups': %w", err)
		}
		delete(object, "ipups")
	}

	if raw, found := object["iwkEpsInd"]; found {
		err = json.Unmarshal(raw, &a.IwkEpsInd)
		if err != nil {
			return fmt.Errorf("error reading 'iwkEpsInd': %w", err)
		}
		delete(object, "iwkEpsInd")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["redundantGtpu"]; found {
		err = json.Unmarshal(raw, &a.RedundantGtpu)
		if err != nil {
			return fmt.Errorf("error reading 'redundantGtpu': %w", err)
		}
		delete(object, "redundantGtpu")
	}

	if raw, found := object["sNssaiUpfInfoList"]; found {
		err = json.Unmarshal(raw, &a.SNssaiUpfInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'sNssaiUpfInfoList': %w", err)
		}
		delete(object, "sNssaiUpfInfoList")
	}

	if raw, found := object["smfServingArea"]; found {
		err = json.Unmarshal(raw, &a.SmfServingArea)
		if err != nil {
			return fmt.Errorf("error reading 'smfServingArea': %w", err)
		}
		delete(object, "smfServingArea")
	}

	if raw, found := object["taiList"]; found {
		err = json.Unmarshal(raw, &a.TaiList)
		if err != nil {
			return fmt.Errorf("error reading 'taiList': %w", err)
		}
		delete(object, "taiList")
	}

	if raw, found := object["tngfInfo"]; found {
		err = json.Unmarshal(raw, &a.TngfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tngfInfo': %w", err)
		}
		delete(object, "tngfInfo")
	}

	if raw, found := object["twifInfo"]; found {
		err = json.Unmarshal(raw, &a.TwifInfo)
		if err != nil {
			return fmt.Errorf("error reading 'twifInfo': %w", err)
		}
		delete(object, "twifInfo")
	}

	if raw, found := object["ueIpAddrInd"]; found {
		err = json.Unmarshal(raw, &a.UeIpAddrInd)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpAddrInd': %w", err)
		}
		delete(object, "ueIpAddrInd")
	}

	if raw, found := object["wAgfInfo"]; found {
		err = json.Unmarshal(raw, &a.WAgfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'wAgfInfo': %w", err)
		}
		delete(object, "wAgfInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpfInfo to handle AdditionalProperties
func (a UpfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AtsssCapability != nil {
		object["atsssCapability"], err = json.Marshal(a.AtsssCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssCapability': %w", err)
		}
	}

	if a.DataForwarding != nil {
		object["dataForwarding"], err = json.Marshal(a.DataForwarding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataForwarding': %w", err)
		}
	}

	if len(a.InterfaceUpfInfoList) != 0 {
		object["interfaceUpfInfoList"], err = json.Marshal(a.InterfaceUpfInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interfaceUpfInfoList': %w", err)
		}
	}

	if a.Ipups != nil {
		object["ipups"], err = json.Marshal(a.Ipups)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipups': %w", err)
		}
	}

	if a.IwkEpsInd != nil {
		object["iwkEpsInd"], err = json.Marshal(a.IwkEpsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iwkEpsInd': %w", err)
		}
	}

	if len(a.PduSessionTypes) != 0 {
		object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.RedundantGtpu != nil {
		object["redundantGtpu"], err = json.Marshal(a.RedundantGtpu)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantGtpu': %w", err)
		}
	}

	object["sNssaiUpfInfoList"], err = json.Marshal(a.SNssaiUpfInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssaiUpfInfoList': %w", err)
	}

	if len(a.SmfServingArea) != 0 {
		object["smfServingArea"], err = json.Marshal(a.SmfServingArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServingArea': %w", err)
		}
	}

	if len(a.TaiList) != 0 {
		object["taiList"], err = json.Marshal(a.TaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'taiList': %w", err)
		}
	}

	if a.TngfInfo != nil {
		object["tngfInfo"], err = json.Marshal(a.TngfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tngfInfo': %w", err)
		}
	}

	if a.TwifInfo != nil {
		object["twifInfo"], err = json.Marshal(a.TwifInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'twifInfo': %w", err)
		}
	}

	if a.UeIpAddrInd != nil {
		object["ueIpAddrInd"], err = json.Marshal(a.UeIpAddrInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpAddrInd': %w", err)
		}
	}

	if a.WAgfInfo != nil {
		object["wAgfInfo"], err = json.Marshal(a.WAgfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wAgfInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpuData. Returns the specified
// element and whether it was found
func (a UpuData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpuData
func (a *UpuData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpuData to handle AdditionalProperties
func (a *UpuData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["ueUpdateStatus"]; found {
		err = json.Unmarshal(raw, &a.UeUpdateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ueUpdateStatus': %w", err)
		}
		delete(object, "ueUpdateStatus")
	}

	if raw, found := object["upuMacIue"]; found {
		err = json.Unmarshal(raw, &a.UpuMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'upuMacIue': %w", err)
		}
		delete(object, "upuMacIue")
	}

	if raw, found := object["upuXmacIue"]; found {
		err = json.Unmarshal(raw, &a.UpuXmacIue)
		if err != nil {
			return fmt.Errorf("error reading 'upuXmacIue': %w", err)
		}
		delete(object, "upuXmacIue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpuData to handle AdditionalProperties
func (a UpuData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["ueUpdateStatus"], err = json.Marshal(a.UeUpdateStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueUpdateStatus': %w", err)
	}

	if len(a.UpuMacIue) != 0 {
		object["upuMacIue"], err = json.Marshal(a.UpuMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuMacIue': %w", err)
		}
	}

	if len(a.UpuXmacIue) != 0 {
		object["upuXmacIue"], err = json.Marshal(a.UpuXmacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuXmacIue': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpuInfo. Returns the specified
// element and whether it was found
func (a UpuInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpuInfo
func (a *UpuInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpuInfo to handle AdditionalProperties
func (a *UpuInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["counterUpu"]; found {
		err = json.Unmarshal(raw, &a.CounterUpu)
		if err != nil {
			return fmt.Errorf("error reading 'counterUpu': %w", err)
		}
		delete(object, "counterUpu")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["upuAckInd"]; found {
		err = json.Unmarshal(raw, &a.UpuAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'upuAckInd': %w", err)
		}
		delete(object, "upuAckInd")
	}

	if raw, found := object["upuDataList"]; found {
		err = json.Unmarshal(raw, &a.UpuDataList)
		if err != nil {
			return fmt.Errorf("error reading 'upuDataList': %w", err)
		}
		delete(object, "upuDataList")
	}

	if raw, found := object["upuMacIausf"]; found {
		err = json.Unmarshal(raw, &a.UpuMacIausf)
		if err != nil {
			return fmt.Errorf("error reading 'upuMacIausf': %w", err)
		}
		delete(object, "upuMacIausf")
	}

	if raw, found := object["upuRegInd"]; found {
		err = json.Unmarshal(raw, &a.UpuRegInd)
		if err != nil {
			return fmt.Errorf("error reading 'upuRegInd': %w", err)
		}
		delete(object, "upuRegInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpuInfo to handle AdditionalProperties
func (a UpuInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CounterUpu) != 0 {
		object["counterUpu"], err = json.Marshal(a.CounterUpu)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'counterUpu': %w", err)
		}
	}

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["upuAckInd"], err = json.Marshal(a.UpuAckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuAckInd': %w", err)
	}

	object["upuDataList"], err = json.Marshal(a.UpuDataList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuDataList': %w", err)
	}

	if len(a.UpuMacIausf) != 0 {
		object["upuMacIausf"], err = json.Marshal(a.UpuMacIausf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuMacIausf': %w", err)
		}
	}

	object["upuRegInd"], err = json.Marshal(a.UpuRegInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuRegInd': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpuSecurityInfo. Returns the specified
// element and whether it was found
func (a UpuSecurityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpuSecurityInfo
func (a *UpuSecurityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpuSecurityInfo to handle AdditionalProperties
func (a *UpuSecurityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["counterUpu"]; found {
		err = json.Unmarshal(raw, &a.CounterUpu)
		if err != nil {
			return fmt.Errorf("error reading 'counterUpu': %w", err)
		}
		delete(object, "counterUpu")
	}

	if raw, found := object["upuMacIausf"]; found {
		err = json.Unmarshal(raw, &a.UpuMacIausf)
		if err != nil {
			return fmt.Errorf("error reading 'upuMacIausf': %w", err)
		}
		delete(object, "upuMacIausf")
	}

	if raw, found := object["upuXmacIue"]; found {
		err = json.Unmarshal(raw, &a.UpuXmacIue)
		if err != nil {
			return fmt.Errorf("error reading 'upuXmacIue': %w", err)
		}
		delete(object, "upuXmacIue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpuSecurityInfo to handle AdditionalProperties
func (a UpuSecurityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["counterUpu"], err = json.Marshal(a.CounterUpu)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'counterUpu': %w", err)
	}

	object["upuMacIausf"], err = json.Marshal(a.UpuMacIausf)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuMacIausf': %w", err)
	}

	if len(a.UpuXmacIue) != 0 {
		object["upuXmacIue"], err = json.Marshal(a.UpuXmacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuXmacIue': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonData. Returns the specified
// element and whether it was found
func (a UsageMonData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonData
func (a *UsageMonData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonData to handle AdditionalProperties
func (a *UsageMonData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedUsage"]; found {
		err = json.Unmarshal(raw, &a.AllowedUsage)
		if err != nil {
			return fmt.Errorf("error reading 'allowedUsage': %w", err)
		}
		delete(object, "allowedUsage")
	}

	if raw, found := object["limitId"]; found {
		err = json.Unmarshal(raw, &a.LimitId)
		if err != nil {
			return fmt.Errorf("error reading 'limitId': %w", err)
		}
		delete(object, "limitId")
	}

	if raw, found := object["resetTime"]; found {
		err = json.Unmarshal(raw, &a.ResetTime)
		if err != nil {
			return fmt.Errorf("error reading 'resetTime': %w", err)
		}
		delete(object, "resetTime")
	}

	if raw, found := object["scopes"]; found {
		err = json.Unmarshal(raw, &a.Scopes)
		if err != nil {
			return fmt.Errorf("error reading 'scopes': %w", err)
		}
		delete(object, "scopes")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["umLevel"]; found {
		err = json.Unmarshal(raw, &a.UmLevel)
		if err != nil {
			return fmt.Errorf("error reading 'umLevel': %w", err)
		}
		delete(object, "umLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonData to handle AdditionalProperties
func (a UsageMonData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedUsage != nil {
		object["allowedUsage"], err = json.Marshal(a.AllowedUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedUsage': %w", err)
		}
	}

	object["limitId"], err = json.Marshal(a.LimitId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'limitId': %w", err)
	}

	if a.ResetTime != nil {
		object["resetTime"], err = json.Marshal(a.ResetTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resetTime': %w", err)
		}
	}

	if a.Scopes != nil {
		object["scopes"], err = json.Marshal(a.Scopes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scopes': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UmLevel != nil {
		object["umLevel"], err = json.Marshal(a.UmLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonDataLimit. Returns the specified
// element and whether it was found
func (a UsageMonDataLimit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonDataLimit
func (a *UsageMonDataLimit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonDataLimit to handle AdditionalProperties
func (a *UsageMonDataLimit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endDate"]; found {
		err = json.Unmarshal(raw, &a.EndDate)
		if err != nil {
			return fmt.Errorf("error reading 'endDate': %w", err)
		}
		delete(object, "endDate")
	}

	if raw, found := object["limitId"]; found {
		err = json.Unmarshal(raw, &a.LimitId)
		if err != nil {
			return fmt.Errorf("error reading 'limitId': %w", err)
		}
		delete(object, "limitId")
	}

	if raw, found := object["resetPeriod"]; found {
		err = json.Unmarshal(raw, &a.ResetPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'resetPeriod': %w", err)
		}
		delete(object, "resetPeriod")
	}

	if raw, found := object["scopes"]; found {
		err = json.Unmarshal(raw, &a.Scopes)
		if err != nil {
			return fmt.Errorf("error reading 'scopes': %w", err)
		}
		delete(object, "scopes")
	}

	if raw, found := object["startDate"]; found {
		err = json.Unmarshal(raw, &a.StartDate)
		if err != nil {
			return fmt.Errorf("error reading 'startDate': %w", err)
		}
		delete(object, "startDate")
	}

	if raw, found := object["umLevel"]; found {
		err = json.Unmarshal(raw, &a.UmLevel)
		if err != nil {
			return fmt.Errorf("error reading 'umLevel': %w", err)
		}
		delete(object, "umLevel")
	}

	if raw, found := object["usageLimit"]; found {
		err = json.Unmarshal(raw, &a.UsageLimit)
		if err != nil {
			return fmt.Errorf("error reading 'usageLimit': %w", err)
		}
		delete(object, "usageLimit")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonDataLimit to handle AdditionalProperties
func (a UsageMonDataLimit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndDate != nil {
		object["endDate"], err = json.Marshal(a.EndDate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endDate': %w", err)
		}
	}

	object["limitId"], err = json.Marshal(a.LimitId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'limitId': %w", err)
	}

	if a.ResetPeriod != nil {
		object["resetPeriod"], err = json.Marshal(a.ResetPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resetPeriod': %w", err)
		}
	}

	if a.Scopes != nil {
		object["scopes"], err = json.Marshal(a.Scopes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scopes': %w", err)
		}
	}

	if a.StartDate != nil {
		object["startDate"], err = json.Marshal(a.StartDate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'startDate': %w", err)
		}
	}

	if a.UmLevel != nil {
		object["umLevel"], err = json.Marshal(a.UmLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'umLevel': %w", err)
		}
	}

	if a.UsageLimit != nil {
		object["usageLimit"], err = json.Marshal(a.UsageLimit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usageLimit': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonDataScope. Returns the specified
// element and whether it was found
func (a UsageMonDataScope) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonDataScope
func (a *UsageMonDataScope) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonDataScope to handle AdditionalProperties
func (a *UsageMonDataScope) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonDataScope to handle AdditionalProperties
func (a UsageMonDataScope) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Dnn) != 0 {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageMonitoringData. Returns the specified
// element and whether it was found
func (a UsageMonitoringData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageMonitoringData
func (a *UsageMonitoringData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageMonitoringData to handle AdditionalProperties
func (a *UsageMonitoringData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["exUsagePccRuleIds"]; found {
		err = json.Unmarshal(raw, &a.ExUsagePccRuleIds)
		if err != nil {
			return fmt.Errorf("error reading 'exUsagePccRuleIds': %w", err)
		}
		delete(object, "exUsagePccRuleIds")
	}

	if raw, found := object["inactivityTime"]; found {
		err = json.Unmarshal(raw, &a.InactivityTime)
		if err != nil {
			return fmt.Errorf("error reading 'inactivityTime': %w", err)
		}
		delete(object, "inactivityTime")
	}

	if raw, found := object["monitoringTime"]; found {
		err = json.Unmarshal(raw, &a.MonitoringTime)
		if err != nil {
			return fmt.Errorf("error reading 'monitoringTime': %w", err)
		}
		delete(object, "monitoringTime")
	}

	if raw, found := object["nextTimeThreshold"]; found {
		err = json.Unmarshal(raw, &a.NextTimeThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'nextTimeThreshold': %w", err)
		}
		delete(object, "nextTimeThreshold")
	}

	if raw, found := object["nextVolThreshold"]; found {
		err = json.Unmarshal(raw, &a.NextVolThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'nextVolThreshold': %w", err)
		}
		delete(object, "nextVolThreshold")
	}

	if raw, found := object["nextVolThresholdDownlink"]; found {
		err = json.Unmarshal(raw, &a.NextVolThresholdDownlink)
		if err != nil {
			return fmt.Errorf("error reading 'nextVolThresholdDownlink': %w", err)
		}
		delete(object, "nextVolThresholdDownlink")
	}

	if raw, found := object["nextVolThresholdUplink"]; found {
		err = json.Unmarshal(raw, &a.NextVolThresholdUplink)
		if err != nil {
			return fmt.Errorf("error reading 'nextVolThresholdUplink': %w", err)
		}
		delete(object, "nextVolThresholdUplink")
	}

	if raw, found := object["timeThreshold"]; found {
		err = json.Unmarshal(raw, &a.TimeThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'timeThreshold': %w", err)
		}
		delete(object, "timeThreshold")
	}

	if raw, found := object["umId"]; found {
		err = json.Unmarshal(raw, &a.UmId)
		if err != nil {
			return fmt.Errorf("error reading 'umId': %w", err)
		}
		delete(object, "umId")
	}

	if raw, found := object["volumeThreshold"]; found {
		err = json.Unmarshal(raw, &a.VolumeThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'volumeThreshold': %w", err)
		}
		delete(object, "volumeThreshold")
	}

	if raw, found := object["volumeThresholdDownlink"]; found {
		err = json.Unmarshal(raw, &a.VolumeThresholdDownlink)
		if err != nil {
			return fmt.Errorf("error reading 'volumeThresholdDownlink': %w", err)
		}
		delete(object, "volumeThresholdDownlink")
	}

	if raw, found := object["volumeThresholdUplink"]; found {
		err = json.Unmarshal(raw, &a.VolumeThresholdUplink)
		if err != nil {
			return fmt.Errorf("error reading 'volumeThresholdUplink': %w", err)
		}
		delete(object, "volumeThresholdUplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageMonitoringData to handle AdditionalProperties
func (a UsageMonitoringData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["exUsagePccRuleIds"], err = json.Marshal(a.ExUsagePccRuleIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'exUsagePccRuleIds': %w", err)
	}

	object["inactivityTime"], err = json.Marshal(a.InactivityTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'inactivityTime': %w", err)
	}

	object["monitoringTime"], err = json.Marshal(a.MonitoringTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoringTime': %w", err)
	}

	object["nextTimeThreshold"], err = json.Marshal(a.NextTimeThreshold)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nextTimeThreshold': %w", err)
	}

	object["nextVolThreshold"], err = json.Marshal(a.NextVolThreshold)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nextVolThreshold': %w", err)
	}

	object["nextVolThresholdDownlink"], err = json.Marshal(a.NextVolThresholdDownlink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nextVolThresholdDownlink': %w", err)
	}

	object["nextVolThresholdUplink"], err = json.Marshal(a.NextVolThresholdUplink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nextVolThresholdUplink': %w", err)
	}

	object["timeThreshold"], err = json.Marshal(a.TimeThreshold)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeThreshold': %w", err)
	}

	object["umId"], err = json.Marshal(a.UmId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'umId': %w", err)
	}

	object["volumeThreshold"], err = json.Marshal(a.VolumeThreshold)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'volumeThreshold': %w", err)
	}

	object["volumeThresholdDownlink"], err = json.Marshal(a.VolumeThresholdDownlink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'volumeThresholdDownlink': %w", err)
	}

	object["volumeThresholdUplink"], err = json.Marshal(a.VolumeThresholdUplink)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'volumeThresholdUplink': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageThreshold. Returns the specified
// element and whether it was found
func (a UsageThreshold) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageThreshold
func (a *UsageThreshold) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageThreshold to handle AdditionalProperties
func (a *UsageThreshold) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlinkVolume"]; found {
		err = json.Unmarshal(raw, &a.DownlinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'downlinkVolume': %w", err)
		}
		delete(object, "downlinkVolume")
	}

	if raw, found := object["duration"]; found {
		err = json.Unmarshal(raw, &a.Duration)
		if err != nil {
			return fmt.Errorf("error reading 'duration': %w", err)
		}
		delete(object, "duration")
	}

	if raw, found := object["totalVolume"]; found {
		err = json.Unmarshal(raw, &a.TotalVolume)
		if err != nil {
			return fmt.Errorf("error reading 'totalVolume': %w", err)
		}
		delete(object, "totalVolume")
	}

	if raw, found := object["uplinkVolume"]; found {
		err = json.Unmarshal(raw, &a.UplinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'uplinkVolume': %w", err)
		}
		delete(object, "uplinkVolume")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageThreshold to handle AdditionalProperties
func (a UsageThreshold) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DownlinkVolume != nil {
		object["downlinkVolume"], err = json.Marshal(a.DownlinkVolume)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'downlinkVolume': %w", err)
		}
	}

	if a.Duration != nil {
		object["duration"], err = json.Marshal(a.Duration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'duration': %w", err)
		}
	}

	if a.TotalVolume != nil {
		object["totalVolume"], err = json.Marshal(a.TotalVolume)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'totalVolume': %w", err)
		}
	}

	if a.UplinkVolume != nil {
		object["uplinkVolume"], err = json.Marshal(a.UplinkVolume)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uplinkVolume': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UsageThresholdRm. Returns the specified
// element and whether it was found
func (a UsageThresholdRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UsageThresholdRm
func (a *UsageThresholdRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UsageThresholdRm to handle AdditionalProperties
func (a *UsageThresholdRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlinkVolume"]; found {
		err = json.Unmarshal(raw, &a.DownlinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'downlinkVolume': %w", err)
		}
		delete(object, "downlinkVolume")
	}

	if raw, found := object["duration"]; found {
		err = json.Unmarshal(raw, &a.Duration)
		if err != nil {
			return fmt.Errorf("error reading 'duration': %w", err)
		}
		delete(object, "duration")
	}

	if raw, found := object["totalVolume"]; found {
		err = json.Unmarshal(raw, &a.TotalVolume)
		if err != nil {
			return fmt.Errorf("error reading 'totalVolume': %w", err)
		}
		delete(object, "totalVolume")
	}

	if raw, found := object["uplinkVolume"]; found {
		err = json.Unmarshal(raw, &a.UplinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'uplinkVolume': %w", err)
		}
		delete(object, "uplinkVolume")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UsageThresholdRm to handle AdditionalProperties
func (a UsageThresholdRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlinkVolume"], err = json.Marshal(a.DownlinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlinkVolume': %w", err)
	}

	object["duration"], err = json.Marshal(a.Duration)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'duration': %w", err)
	}

	object["totalVolume"], err = json.Marshal(a.TotalVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'totalVolume': %w", err)
	}

	object["uplinkVolume"], err = json.Marshal(a.UplinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplinkVolume': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserIdentifier. Returns the specified
// element and whether it was found
func (a UserIdentifier) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserIdentifier
func (a *UserIdentifier) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserIdentifier to handle AdditionalProperties
func (a *UserIdentifier) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserIdentifier to handle AdditionalProperties
func (a UserIdentifier) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserLocation. Returns the specified
// element and whether it was found
func (a UserLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserLocation
func (a *UserLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserLocation to handle AdditionalProperties
func (a *UserLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eutraLocation"]; found {
		err = json.Unmarshal(raw, &a.EutraLocation)
		if err != nil {
			return fmt.Errorf("error reading 'eutraLocation': %w", err)
		}
		delete(object, "eutraLocation")
	}

	if raw, found := object["geraLocation"]; found {
		err = json.Unmarshal(raw, &a.GeraLocation)
		if err != nil {
			return fmt.Errorf("error reading 'geraLocation': %w", err)
		}
		delete(object, "geraLocation")
	}

	if raw, found := object["n3gaLocation"]; found {
		err = json.Unmarshal(raw, &a.N3gaLocation)
		if err != nil {
			return fmt.Errorf("error reading 'n3gaLocation': %w", err)
		}
		delete(object, "n3gaLocation")
	}

	if raw, found := object["nrLocation"]; found {
		err = json.Unmarshal(raw, &a.NrLocation)
		if err != nil {
			return fmt.Errorf("error reading 'nrLocation': %w", err)
		}
		delete(object, "nrLocation")
	}

	if raw, found := object["utraLocation"]; found {
		err = json.Unmarshal(raw, &a.UtraLocation)
		if err != nil {
			return fmt.Errorf("error reading 'utraLocation': %w", err)
		}
		delete(object, "utraLocation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserLocation to handle AdditionalProperties
func (a UserLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EutraLocation != nil {
		object["eutraLocation"], err = json.Marshal(a.EutraLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eutraLocation': %w", err)
		}
	}

	if a.GeraLocation != nil {
		object["geraLocation"], err = json.Marshal(a.GeraLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geraLocation': %w", err)
		}
	}

	if a.N3gaLocation != nil {
		object["n3gaLocation"], err = json.Marshal(a.N3gaLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3gaLocation': %w", err)
		}
	}

	if a.NrLocation != nil {
		object["nrLocation"], err = json.Marshal(a.NrLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrLocation': %w", err)
		}
	}

	if a.UtraLocation != nil {
		object["utraLocation"], err = json.Marshal(a.UtraLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'utraLocation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserPlaneLocationArea. Returns the specified
// element and whether it was found
func (a UserPlaneLocationArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserPlaneLocationArea
func (a *UserPlaneLocationArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserPlaneLocationArea to handle AdditionalProperties
func (a *UserPlaneLocationArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnais"]; found {
		err = json.Unmarshal(raw, &a.Dnais)
		if err != nil {
			return fmt.Errorf("error reading 'dnais': %w", err)
		}
		delete(object, "dnais")
	}

	if raw, found := object["locationArea"]; found {
		err = json.Unmarshal(raw, &a.LocationArea)
		if err != nil {
			return fmt.Errorf("error reading 'locationArea': %w", err)
		}
		delete(object, "locationArea")
	}

	if raw, found := object["locationArea5G"]; found {
		err = json.Unmarshal(raw, &a.LocationArea5G)
		if err != nil {
			return fmt.Errorf("error reading 'locationArea5G': %w", err)
		}
		delete(object, "locationArea5G")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserPlaneLocationArea to handle AdditionalProperties
func (a UserPlaneLocationArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnais != nil {
		object["dnais"], err = json.Marshal(a.Dnais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnais': %w", err)
		}
	}

	if a.LocationArea != nil {
		object["locationArea"], err = json.Marshal(a.LocationArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationArea': %w", err)
		}
	}

	if a.LocationArea5G != nil {
		object["locationArea5G"], err = json.Marshal(a.LocationArea5G)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationArea5G': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UtraLocation. Returns the specified
// element and whether it was found
func (a UtraLocation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UtraLocation
func (a *UtraLocation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UtraLocation to handle AdditionalProperties
func (a *UtraLocation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ageOfLocationInformation"]; found {
		err = json.Unmarshal(raw, &a.AgeOfLocationInformation)
		if err != nil {
			return fmt.Errorf("error reading 'ageOfLocationInformation': %w", err)
		}
		delete(object, "ageOfLocationInformation")
	}

	if raw, found := object["cgi"]; found {
		err = json.Unmarshal(raw, &a.Cgi)
		if err != nil {
			return fmt.Errorf("error reading 'cgi': %w", err)
		}
		delete(object, "cgi")
	}

	if raw, found := object["geodeticInformation"]; found {
		err = json.Unmarshal(raw, &a.GeodeticInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geodeticInformation': %w", err)
		}
		delete(object, "geodeticInformation")
	}

	if raw, found := object["geographicalInformation"]; found {
		err = json.Unmarshal(raw, &a.GeographicalInformation)
		if err != nil {
			return fmt.Errorf("error reading 'geographicalInformation': %w", err)
		}
		delete(object, "geographicalInformation")
	}

	if raw, found := object["lai"]; found {
		err = json.Unmarshal(raw, &a.Lai)
		if err != nil {
			return fmt.Errorf("error reading 'lai': %w", err)
		}
		delete(object, "lai")
	}

	if raw, found := object["rai"]; found {
		err = json.Unmarshal(raw, &a.Rai)
		if err != nil {
			return fmt.Errorf("error reading 'rai': %w", err)
		}
		delete(object, "rai")
	}

	if raw, found := object["sai"]; found {
		err = json.Unmarshal(raw, &a.Sai)
		if err != nil {
			return fmt.Errorf("error reading 'sai': %w", err)
		}
		delete(object, "sai")
	}

	if raw, found := object["ueLocationTimestamp"]; found {
		err = json.Unmarshal(raw, &a.UeLocationTimestamp)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocationTimestamp': %w", err)
		}
		delete(object, "ueLocationTimestamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UtraLocation to handle AdditionalProperties
func (a UtraLocation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AgeOfLocationInformation != nil {
		object["ageOfLocationInformation"], err = json.Marshal(a.AgeOfLocationInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ageOfLocationInformation': %w", err)
		}
	}

	if a.Cgi != nil {
		object["cgi"], err = json.Marshal(a.Cgi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cgi': %w", err)
		}
	}

	if len(a.GeodeticInformation) != 0 {
		object["geodeticInformation"], err = json.Marshal(a.GeodeticInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geodeticInformation': %w", err)
		}
	}

	if len(a.GeographicalInformation) != 0 {
		object["geographicalInformation"], err = json.Marshal(a.GeographicalInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicalInformation': %w", err)
		}
	}

	if a.Lai != nil {
		object["lai"], err = json.Marshal(a.Lai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lai': %w", err)
		}
	}

	if a.Rai != nil {
		object["rai"], err = json.Marshal(a.Rai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rai': %w", err)
		}
	}

	if a.Sai != nil {
		object["sai"], err = json.Marshal(a.Sai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sai': %w", err)
		}
	}

	if a.UeLocationTimestamp != nil {
		object["ueLocationTimestamp"], err = json.Marshal(a.UeLocationTimestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocationTimestamp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for V2xContext. Returns the specified
// element and whether it was found
func (a V2xContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for V2xContext
func (a *V2xContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for V2xContext to handle AdditionalProperties
func (a *V2xContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lteUeSidelinkAmbr"]; found {
		err = json.Unmarshal(raw, &a.LteUeSidelinkAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'lteUeSidelinkAmbr': %w", err)
		}
		delete(object, "lteUeSidelinkAmbr")
	}

	if raw, found := object["lteV2xServicesAuth"]; found {
		err = json.Unmarshal(raw, &a.LteV2xServicesAuth)
		if err != nil {
			return fmt.Errorf("error reading 'lteV2xServicesAuth': %w", err)
		}
		delete(object, "lteV2xServicesAuth")
	}

	if raw, found := object["nrUeSidelinkAmbr"]; found {
		err = json.Unmarshal(raw, &a.NrUeSidelinkAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'nrUeSidelinkAmbr': %w", err)
		}
		delete(object, "nrUeSidelinkAmbr")
	}

	if raw, found := object["nrV2xServicesAuth"]; found {
		err = json.Unmarshal(raw, &a.NrV2xServicesAuth)
		if err != nil {
			return fmt.Errorf("error reading 'nrV2xServicesAuth': %w", err)
		}
		delete(object, "nrV2xServicesAuth")
	}

	if raw, found := object["pc5QoSPara"]; found {
		err = json.Unmarshal(raw, &a.Pc5QoSPara)
		if err != nil {
			return fmt.Errorf("error reading 'pc5QoSPara': %w", err)
		}
		delete(object, "pc5QoSPara")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for V2xContext to handle AdditionalProperties
func (a V2xContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.LteUeSidelinkAmbr) != 0 {
		object["lteUeSidelinkAmbr"], err = json.Marshal(a.LteUeSidelinkAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lteUeSidelinkAmbr': %w", err)
		}
	}

	if a.LteV2xServicesAuth != nil {
		object["lteV2xServicesAuth"], err = json.Marshal(a.LteV2xServicesAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lteV2xServicesAuth': %w", err)
		}
	}

	if len(a.NrUeSidelinkAmbr) != 0 {
		object["nrUeSidelinkAmbr"], err = json.Marshal(a.NrUeSidelinkAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrUeSidelinkAmbr': %w", err)
		}
	}

	if a.NrV2xServicesAuth != nil {
		object["nrV2xServicesAuth"], err = json.Marshal(a.NrV2xServicesAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrV2xServicesAuth': %w", err)
		}
	}

	if a.Pc5QoSPara != nil {
		object["pc5QoSPara"], err = json.Marshal(a.Pc5QoSPara)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pc5QoSPara': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for V2xInformation. Returns the specified
// element and whether it was found
func (a V2xInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for V2xInformation
func (a *V2xInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for V2xInformation to handle AdditionalProperties
func (a *V2xInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n2Pc5Pol"]; found {
		err = json.Unmarshal(raw, &a.N2Pc5Pol)
		if err != nil {
			return fmt.Errorf("error reading 'n2Pc5Pol': %w", err)
		}
		delete(object, "n2Pc5Pol")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for V2xInformation to handle AdditionalProperties
func (a V2xInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N2Pc5Pol != nil {
		object["n2Pc5Pol"], err = json.Marshal(a.N2Pc5Pol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2Pc5Pol': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for V2xSubscriptionData. Returns the specified
// element and whether it was found
func (a V2xSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for V2xSubscriptionData
func (a *V2xSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for V2xSubscriptionData to handle AdditionalProperties
func (a *V2xSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ltePc5Ambr"]; found {
		err = json.Unmarshal(raw, &a.LtePc5Ambr)
		if err != nil {
			return fmt.Errorf("error reading 'ltePc5Ambr': %w", err)
		}
		delete(object, "ltePc5Ambr")
	}

	if raw, found := object["lteV2xServicesAuth"]; found {
		err = json.Unmarshal(raw, &a.LteV2xServicesAuth)
		if err != nil {
			return fmt.Errorf("error reading 'lteV2xServicesAuth': %w", err)
		}
		delete(object, "lteV2xServicesAuth")
	}

	if raw, found := object["nrUePc5Ambr"]; found {
		err = json.Unmarshal(raw, &a.NrUePc5Ambr)
		if err != nil {
			return fmt.Errorf("error reading 'nrUePc5Ambr': %w", err)
		}
		delete(object, "nrUePc5Ambr")
	}

	if raw, found := object["nrV2xServicesAuth"]; found {
		err = json.Unmarshal(raw, &a.NrV2xServicesAuth)
		if err != nil {
			return fmt.Errorf("error reading 'nrV2xServicesAuth': %w", err)
		}
		delete(object, "nrV2xServicesAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for V2xSubscriptionData to handle AdditionalProperties
func (a V2xSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.LtePc5Ambr) != 0 {
		object["ltePc5Ambr"], err = json.Marshal(a.LtePc5Ambr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ltePc5Ambr': %w", err)
		}
	}

	if a.LteV2xServicesAuth != nil {
		object["lteV2xServicesAuth"], err = json.Marshal(a.LteV2xServicesAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lteV2xServicesAuth': %w", err)
		}
	}

	if len(a.NrUePc5Ambr) != 0 {
		object["nrUePc5Ambr"], err = json.Marshal(a.NrUePc5Ambr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrUePc5Ambr': %w", err)
		}
	}

	if a.NrV2xServicesAuth != nil {
		object["nrV2xServicesAuth"], err = json.Marshal(a.NrV2xServicesAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrV2xServicesAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ValidTimePeriod. Returns the specified
// element and whether it was found
func (a ValidTimePeriod) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ValidTimePeriod
func (a *ValidTimePeriod) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ValidTimePeriod to handle AdditionalProperties
func (a *ValidTimePeriod) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endTime"]; found {
		err = json.Unmarshal(raw, &a.EndTime)
		if err != nil {
			return fmt.Errorf("error reading 'endTime': %w", err)
		}
		delete(object, "endTime")
	}

	if raw, found := object["startTime"]; found {
		err = json.Unmarshal(raw, &a.StartTime)
		if err != nil {
			return fmt.Errorf("error reading 'startTime': %w", err)
		}
		delete(object, "startTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ValidTimePeriod to handle AdditionalProperties
func (a ValidTimePeriod) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndTime != nil {
		object["endTime"], err = json.Marshal(a.EndTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endTime': %w", err)
		}
	}

	if a.StartTime != nil {
		object["startTime"], err = json.Marshal(a.StartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'startTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VendorSpecificFeature. Returns the specified
// element and whether it was found
func (a VendorSpecificFeature) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VendorSpecificFeature
func (a *VendorSpecificFeature) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VendorSpecificFeature to handle AdditionalProperties
func (a *VendorSpecificFeature) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["featureName"]; found {
		err = json.Unmarshal(raw, &a.FeatureName)
		if err != nil {
			return fmt.Errorf("error reading 'featureName': %w", err)
		}
		delete(object, "featureName")
	}

	if raw, found := object["featureVersion"]; found {
		err = json.Unmarshal(raw, &a.FeatureVersion)
		if err != nil {
			return fmt.Errorf("error reading 'featureVersion': %w", err)
		}
		delete(object, "featureVersion")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VendorSpecificFeature to handle AdditionalProperties
func (a VendorSpecificFeature) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["featureName"], err = json.Marshal(a.FeatureName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'featureName': %w", err)
	}

	object["featureVersion"], err = json.Marshal(a.FeatureVersion)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'featureVersion': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VgmlcAddress. Returns the specified
// element and whether it was found
func (a VgmlcAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VgmlcAddress
func (a *VgmlcAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VgmlcAddress to handle AdditionalProperties
func (a *VgmlcAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["vgmlcAddressIpv4"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddressIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddressIpv4': %w", err)
		}
		delete(object, "vgmlcAddressIpv4")
	}

	if raw, found := object["vgmlcAddressIpv6"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddressIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddressIpv6': %w", err)
		}
		delete(object, "vgmlcAddressIpv6")
	}

	if raw, found := object["vgmlcFqdn"]; found {
		err = json.Unmarshal(raw, &a.VgmlcFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcFqdn': %w", err)
		}
		delete(object, "vgmlcFqdn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VgmlcAddress to handle AdditionalProperties
func (a VgmlcAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.VgmlcAddressIpv4) != 0 {
		object["vgmlcAddressIpv4"], err = json.Marshal(a.VgmlcAddressIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddressIpv4': %w", err)
		}
	}

	if a.VgmlcAddressIpv6 != nil {
		object["vgmlcAddressIpv6"], err = json.Marshal(a.VgmlcAddressIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddressIpv6': %w", err)
		}
	}

	if a.VgmlcFqdn != nil {
		object["vgmlcFqdn"], err = json.Marshal(a.VgmlcFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcFqdn': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VnGroupData. Returns the specified
// element and whether it was found
func (a VnGroupData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VnGroupData
func (a *VnGroupData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VnGroupData to handle AdditionalProperties
func (a *VnGroupData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appDescriptors"]; found {
		err = json.Unmarshal(raw, &a.AppDescriptors)
		if err != nil {
			return fmt.Errorf("error reading 'appDescriptors': %w", err)
		}
		delete(object, "appDescriptors")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VnGroupData to handle AdditionalProperties
func (a VnGroupData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AppDescriptors) != 0 {
		object["appDescriptors"], err = json.Marshal(a.AppDescriptors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appDescriptors': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.PduSessionTypes != nil {
		object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
		}
	}

	if a.SingleNssai != nil {
		object["singleNssai"], err = json.Marshal(a.SingleNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VolumeTimedReport. Returns the specified
// element and whether it was found
func (a VolumeTimedReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VolumeTimedReport
func (a *VolumeTimedReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VolumeTimedReport to handle AdditionalProperties
func (a *VolumeTimedReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlinkVolume"]; found {
		err = json.Unmarshal(raw, &a.DownlinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'downlinkVolume': %w", err)
		}
		delete(object, "downlinkVolume")
	}

	if raw, found := object["endTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.EndTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'endTimeStamp': %w", err)
		}
		delete(object, "endTimeStamp")
	}

	if raw, found := object["startTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.StartTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'startTimeStamp': %w", err)
		}
		delete(object, "startTimeStamp")
	}

	if raw, found := object["uplinkVolume"]; found {
		err = json.Unmarshal(raw, &a.UplinkVolume)
		if err != nil {
			return fmt.Errorf("error reading 'uplinkVolume': %w", err)
		}
		delete(object, "uplinkVolume")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VolumeTimedReport to handle AdditionalProperties
func (a VolumeTimedReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlinkVolume"], err = json.Marshal(a.DownlinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'downlinkVolume': %w", err)
	}

	object["endTimeStamp"], err = json.Marshal(a.EndTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'endTimeStamp': %w", err)
	}

	object["startTimeStamp"], err = json.Marshal(a.StartTimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'startTimeStamp': %w", err)
	}

	object["uplinkVolume"], err = json.Marshal(a.UplinkVolume)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'uplinkVolume': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VplmnQos. Returns the specified
// element and whether it was found
func (a VplmnQos) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VplmnQos
func (a *VplmnQos) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VplmnQos to handle AdditionalProperties
func (a *VplmnQos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["guaFbrDl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrDl': %w", err)
		}
		delete(object, "guaFbrDl")
	}

	if raw, found := object["guaFbrUl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrUl': %w", err)
		}
		delete(object, "guaFbrUl")
	}

	if raw, found := object["maxFbrDl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrDl': %w", err)
		}
		delete(object, "maxFbrDl")
	}

	if raw, found := object["maxFbrUl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrUl': %w", err)
		}
		delete(object, "maxFbrUl")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VplmnQos to handle AdditionalProperties
func (a VplmnQos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5qi != nil {
		object["5qi"], err = json.Marshal(a.N5qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5qi': %w", err)
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arp': %w", err)
		}
	}

	if len(a.GuaFbrDl) != 0 {
		object["guaFbrDl"], err = json.Marshal(a.GuaFbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrDl': %w", err)
		}
	}

	if len(a.GuaFbrUl) != 0 {
		object["guaFbrUl"], err = json.Marshal(a.GuaFbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrUl': %w", err)
		}
	}

	if len(a.MaxFbrDl) != 0 {
		object["maxFbrDl"], err = json.Marshal(a.MaxFbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxFbrDl': %w", err)
		}
	}

	if len(a.MaxFbrUl) != 0 {
		object["maxFbrUl"], err = json.Marshal(a.MaxFbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxFbrUl': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VsmfUpdateData. Returns the specified
// element and whether it was found
func (a VsmfUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VsmfUpdateData
func (a *VsmfUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VsmfUpdateData to handle AdditionalProperties
func (a *VsmfUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnGranted"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnGranted)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnGranted': %w", err)
		}
		delete(object, "alwaysOnGranted")
	}

	if raw, found := object["assignEbiList"]; found {
		err = json.Unmarshal(raw, &a.AssignEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'assignEbiList': %w", err)
		}
		delete(object, "assignEbiList")
	}

	if raw, found := object["backOffTimer"]; found {
		err = json.Unmarshal(raw, &a.BackOffTimer)
		if err != nil {
			return fmt.Errorf("error reading 'backOffTimer': %w", err)
		}
		delete(object, "backOffTimer")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["hsmfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.HsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'hsmfPduSessionUri': %w", err)
		}
		delete(object, "hsmfPduSessionUri")
	}

	if raw, found := object["maAcceptedInd"]; found {
		err = json.Unmarshal(raw, &a.MaAcceptedInd)
		if err != nil {
			return fmt.Errorf("error reading 'maAcceptedInd': %w", err)
		}
		delete(object, "maAcceptedInd")
	}

	if raw, found := object["maReleaseInd"]; found {
		err = json.Unmarshal(raw, &a.MaReleaseInd)
		if err != nil {
			return fmt.Errorf("error reading 'maReleaseInd': %w", err)
		}
		delete(object, "maReleaseInd")
	}

	if raw, found := object["modifiedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ModifiedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'modifiedEbiList': %w", err)
		}
		delete(object, "modifiedEbiList")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["qosFlowsAddModRequestList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsAddModRequestList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsAddModRequestList': %w", err)
		}
		delete(object, "qosFlowsAddModRequestList")
	}

	if raw, found := object["qosFlowsRelRequestList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsRelRequestList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsRelRequestList': %w", err)
		}
		delete(object, "qosFlowsRelRequestList")
	}

	if raw, found := object["qosMonitoringInfo"]; found {
		err = json.Unmarshal(raw, &a.QosMonitoringInfo)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonitoringInfo': %w", err)
		}
		delete(object, "qosMonitoringInfo")
	}

	if raw, found := object["requestIndication"]; found {
		err = json.Unmarshal(raw, &a.RequestIndication)
		if err != nil {
			return fmt.Errorf("error reading 'requestIndication': %w", err)
		}
		delete(object, "requestIndication")
	}

	if raw, found := object["revokeEbiList"]; found {
		err = json.Unmarshal(raw, &a.RevokeEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'revokeEbiList': %w", err)
		}
		delete(object, "revokeEbiList")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["smallDataRateControlEnabled"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateControlEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateControlEnabled': %w", err)
		}
		delete(object, "smallDataRateControlEnabled")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VsmfUpdateData to handle AdditionalProperties
func (a VsmfUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnGranted != nil {
		object["alwaysOnGranted"], err = json.Marshal(a.AlwaysOnGranted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnGranted': %w", err)
		}
	}

	if len(a.AssignEbiList) != 0 {
		object["assignEbiList"], err = json.Marshal(a.AssignEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'assignEbiList': %w", err)
		}
	}

	if a.BackOffTimer != nil {
		object["backOffTimer"], err = json.Marshal(a.BackOffTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backOffTimer': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.DnaiList != nil {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.HsmfPduSessionUri != nil {
		object["hsmfPduSessionUri"], err = json.Marshal(a.HsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hsmfPduSessionUri': %w", err)
		}
	}

	if a.MaAcceptedInd != nil {
		object["maAcceptedInd"], err = json.Marshal(a.MaAcceptedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maAcceptedInd': %w", err)
		}
	}

	if a.MaReleaseInd != nil {
		object["maReleaseInd"], err = json.Marshal(a.MaReleaseInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maReleaseInd': %w", err)
		}
	}

	if len(a.ModifiedEbiList) != 0 {
		object["modifiedEbiList"], err = json.Marshal(a.ModifiedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'modifiedEbiList': %w", err)
		}
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if a.N1smCause != nil {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if len(a.QosFlowsAddModRequestList) != 0 {
		object["qosFlowsAddModRequestList"], err = json.Marshal(a.QosFlowsAddModRequestList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsAddModRequestList': %w", err)
		}
	}

	if len(a.QosFlowsRelRequestList) != 0 {
		object["qosFlowsRelRequestList"], err = json.Marshal(a.QosFlowsRelRequestList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsRelRequestList': %w", err)
		}
	}

	if a.QosMonitoringInfo != nil {
		object["qosMonitoringInfo"], err = json.Marshal(a.QosMonitoringInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonitoringInfo': %w", err)
		}
	}

	object["requestIndication"], err = json.Marshal(a.RequestIndication)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'requestIndication': %w", err)
	}

	if len(a.RevokeEbiList) != 0 {
		object["revokeEbiList"], err = json.Marshal(a.RevokeEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'revokeEbiList': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	if a.SmallDataRateControlEnabled != nil {
		object["smallDataRateControlEnabled"], err = json.Marshal(a.SmallDataRateControlEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateControlEnabled': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VsmfUpdateError. Returns the specified
// element and whether it was found
func (a VsmfUpdateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VsmfUpdateError
func (a *VsmfUpdateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VsmfUpdateError to handle AdditionalProperties
func (a *VsmfUpdateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["failedToAssignEbiList"]; found {
		err = json.Unmarshal(raw, &a.FailedToAssignEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'failedToAssignEbiList': %w", err)
		}
		delete(object, "failedToAssignEbiList")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VsmfUpdateError to handle AdditionalProperties
func (a VsmfUpdateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if len(a.FailedToAssignEbiList) != 0 {
		object["failedToAssignEbiList"], err = json.Marshal(a.FailedToAssignEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedToAssignEbiList': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if len(a.N1smCause) != 0 {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VsmfUpdatedData. Returns the specified
// element and whether it was found
func (a VsmfUpdatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VsmfUpdatedData
func (a *VsmfUpdatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VsmfUpdatedData to handle AdditionalProperties
func (a *VsmfUpdatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["assignedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AssignedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'assignedEbiList': %w", err)
		}
		delete(object, "assignedEbiList")
	}

	if raw, found := object["failedToAssignEbiList"]; found {
		err = json.Unmarshal(raw, &a.FailedToAssignEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'failedToAssignEbiList': %w", err)
		}
		delete(object, "failedToAssignEbiList")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["qosFlowsAddModList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsAddModList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsAddModList': %w", err)
		}
		delete(object, "qosFlowsAddModList")
	}

	if raw, found := object["qosFlowsFailedtoAddModList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsFailedtoAddModList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsFailedtoAddModList': %w", err)
		}
		delete(object, "qosFlowsFailedtoAddModList")
	}

	if raw, found := object["qosFlowsFailedtoRelList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsFailedtoRelList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsFailedtoRelList': %w", err)
		}
		delete(object, "qosFlowsFailedtoRelList")
	}

	if raw, found := object["qosFlowsRelList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsRelList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsRelList': %w", err)
		}
		delete(object, "qosFlowsRelList")
	}

	if raw, found := object["releasedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ReleasedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'releasedEbiList': %w", err)
		}
		delete(object, "releasedEbiList")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["secondaryRatUsageReport"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageReport)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageReport': %w", err)
		}
		delete(object, "secondaryRatUsageReport")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VsmfUpdatedData to handle AdditionalProperties
func (a VsmfUpdatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AssignedEbiList) != 0 {
		object["assignedEbiList"], err = json.Marshal(a.AssignedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'assignedEbiList': %w", err)
		}
	}

	if len(a.FailedToAssignEbiList) != 0 {
		object["failedToAssignEbiList"], err = json.Marshal(a.FailedToAssignEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedToAssignEbiList': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if len(a.QosFlowsAddModList) != 0 {
		object["qosFlowsAddModList"], err = json.Marshal(a.QosFlowsAddModList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsAddModList': %w", err)
		}
	}

	if len(a.QosFlowsFailedtoAddModList) != 0 {
		object["qosFlowsFailedtoAddModList"], err = json.Marshal(a.QosFlowsFailedtoAddModList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsFailedtoAddModList': %w", err)
		}
	}

	if len(a.QosFlowsFailedtoRelList) != 0 {
		object["qosFlowsFailedtoRelList"], err = json.Marshal(a.QosFlowsFailedtoRelList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsFailedtoRelList': %w", err)
		}
	}

	if len(a.QosFlowsRelList) != 0 {
		object["qosFlowsRelList"], err = json.Marshal(a.QosFlowsRelList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsRelList': %w", err)
		}
	}

	if len(a.ReleasedEbiList) != 0 {
		object["releasedEbiList"], err = json.Marshal(a.ReleasedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'releasedEbiList': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if len(a.SecondaryRatUsageReport) != 0 {
		object["secondaryRatUsageReport"], err = json.Marshal(a.SecondaryRatUsageReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageReport': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WAgfInfo. Returns the specified
// element and whether it was found
func (a WAgfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WAgfInfo
func (a *WAgfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WAgfInfo to handle AdditionalProperties
func (a *WAgfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endpointFqdn"]; found {
		err = json.Unmarshal(raw, &a.EndpointFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'endpointFqdn': %w", err)
		}
		delete(object, "endpointFqdn")
	}

	if raw, found := object["ipv4EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv4EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4EndpointAddresses': %w", err)
		}
		delete(object, "ipv4EndpointAddresses")
	}

	if raw, found := object["ipv6EndpointAddresses"]; found {
		err = json.Unmarshal(raw, &a.Ipv6EndpointAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6EndpointAddresses': %w", err)
		}
		delete(object, "ipv6EndpointAddresses")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WAgfInfo to handle AdditionalProperties
func (a WAgfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndpointFqdn != nil {
		object["endpointFqdn"], err = json.Marshal(a.EndpointFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endpointFqdn': %w", err)
		}
	}

	if len(a.Ipv4EndpointAddresses) != 0 {
		object["ipv4EndpointAddresses"], err = json.Marshal(a.Ipv4EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4EndpointAddresses': %w", err)
		}
	}

	if len(a.Ipv6EndpointAddresses) != 0 {
		object["ipv6EndpointAddresses"], err = json.Marshal(a.Ipv6EndpointAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6EndpointAddresses': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WebsockNotifConfig. Returns the specified
// element and whether it was found
func (a WebsockNotifConfig) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WebsockNotifConfig
func (a *WebsockNotifConfig) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WebsockNotifConfig to handle AdditionalProperties
func (a *WebsockNotifConfig) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["requestWebsocketUri"]; found {
		err = json.Unmarshal(raw, &a.RequestWebsocketUri)
		if err != nil {
			return fmt.Errorf("error reading 'requestWebsocketUri': %w", err)
		}
		delete(object, "requestWebsocketUri")
	}

	if raw, found := object["websocketUri"]; found {
		err = json.Unmarshal(raw, &a.WebsocketUri)
		if err != nil {
			return fmt.Errorf("error reading 'websocketUri': %w", err)
		}
		delete(object, "websocketUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WebsockNotifConfig to handle AdditionalProperties
func (a WebsockNotifConfig) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RequestWebsocketUri != nil {
		object["requestWebsocketUri"], err = json.Marshal(a.RequestWebsocketUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestWebsocketUri': %w", err)
		}
	}

	if a.WebsocketUri != nil {
		object["websocketUri"], err = json.Marshal(a.WebsocketUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'websocketUri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WirelineArea. Returns the specified
// element and whether it was found
func (a WirelineArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WirelineArea
func (a *WirelineArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WirelineArea to handle AdditionalProperties
func (a *WirelineArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areaCodeB"]; found {
		err = json.Unmarshal(raw, &a.AreaCodeB)
		if err != nil {
			return fmt.Errorf("error reading 'areaCodeB': %w", err)
		}
		delete(object, "areaCodeB")
	}

	if raw, found := object["areaCodeC"]; found {
		err = json.Unmarshal(raw, &a.AreaCodeC)
		if err != nil {
			return fmt.Errorf("error reading 'areaCodeC': %w", err)
		}
		delete(object, "areaCodeC")
	}

	if raw, found := object["globalLineIds"]; found {
		err = json.Unmarshal(raw, &a.GlobalLineIds)
		if err != nil {
			return fmt.Errorf("error reading 'globalLineIds': %w", err)
		}
		delete(object, "globalLineIds")
	}

	if raw, found := object["hfcNIds"]; found {
		err = json.Unmarshal(raw, &a.HfcNIds)
		if err != nil {
			return fmt.Errorf("error reading 'hfcNIds': %w", err)
		}
		delete(object, "hfcNIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WirelineArea to handle AdditionalProperties
func (a WirelineArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AreaCodeB != nil {
		object["areaCodeB"], err = json.Marshal(a.AreaCodeB)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaCodeB': %w", err)
		}
	}

	if a.AreaCodeC != nil {
		object["areaCodeC"], err = json.Marshal(a.AreaCodeC)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areaCodeC': %w", err)
		}
	}

	if len(a.GlobalLineIds) != 0 {
		object["globalLineIds"], err = json.Marshal(a.GlobalLineIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'globalLineIds': %w", err)
		}
	}

	if len(a.HfcNIds) != 0 {
		object["hfcNIds"], err = json.Marshal(a.HfcNIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hfcNIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WirelineServiceAreaRestriction. Returns the specified
// element and whether it was found
func (a WirelineServiceAreaRestriction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WirelineServiceAreaRestriction
func (a *WirelineServiceAreaRestriction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WirelineServiceAreaRestriction to handle AdditionalProperties
func (a *WirelineServiceAreaRestriction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["areas"]; found {
		err = json.Unmarshal(raw, &a.Areas)
		if err != nil {
			return fmt.Errorf("error reading 'areas': %w", err)
		}
		delete(object, "areas")
	}

	if raw, found := object["restrictionType"]; found {
		err = json.Unmarshal(raw, &a.RestrictionType)
		if err != nil {
			return fmt.Errorf("error reading 'restrictionType': %w", err)
		}
		delete(object, "restrictionType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WirelineServiceAreaRestriction to handle AdditionalProperties
func (a WirelineServiceAreaRestriction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Areas != nil {
		object["areas"], err = json.Marshal(a.Areas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'areas': %w", err)
		}
	}

	if a.RestrictionType != nil {
		object["restrictionType"], err = json.Marshal(a.RestrictionType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restrictionType': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AusfRgAuthCtx. Returns the specified
// element and whether it was found
func (a AusfRgAuthCtx) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AusfRgAuthCtx
func (a *AusfRgAuthCtx) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AusfRgAuthCtx to handle AdditionalProperties
func (a *AusfRgAuthCtx) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authInd"]; found {
		err = json.Unmarshal(raw, &a.AuthInd)
		if err != nil {
			return fmt.Errorf("error reading 'authInd': %w", err)
		}
		delete(object, "authInd")
	}

	if raw, found := object["authResult"]; found {
		err = json.Unmarshal(raw, &a.AuthResult)
		if err != nil {
			return fmt.Errorf("error reading 'authResult': %w", err)
		}
		delete(object, "authResult")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AusfRgAuthCtx to handle AdditionalProperties
func (a AusfRgAuthCtx) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AuthInd != nil {
		object["authInd"], err = json.Marshal(a.AuthInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authInd': %w", err)
		}
	}

	object["authResult"], err = json.Marshal(a.AuthResult)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authResult': %w", err)
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AusfSorInfo. Returns the specified
// element and whether it was found
func (a AusfSorInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AusfSorInfo
func (a *AusfSorInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AusfSorInfo to handle AdditionalProperties
func (a *AusfSorInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ackInd"]; found {
		err = json.Unmarshal(raw, &a.AckInd)
		if err != nil {
			return fmt.Errorf("error reading 'ackInd': %w", err)
		}
		delete(object, "ackInd")
	}

	if raw, found := object["steeringContainer"]; found {
		err = json.Unmarshal(raw, &a.SteeringContainer)
		if err != nil {
			return fmt.Errorf("error reading 'steeringContainer': %w", err)
		}
		delete(object, "steeringContainer")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AusfSorInfo to handle AdditionalProperties
func (a AusfSorInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ackInd"], err = json.Marshal(a.AckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ackInd': %w", err)
	}

	if a.SteeringContainer != nil {
		object["steeringContainer"], err = json.Marshal(a.SteeringContainer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'steeringContainer': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AusfUpuData. Returns the specified
// element and whether it was found
func (a AusfUpuData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AusfUpuData
func (a *AusfUpuData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AusfUpuData to handle AdditionalProperties
func (a *AusfUpuData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["defaultConfNssai"]; found {
		err = json.Unmarshal(raw, &a.DefaultConfNssai)
		if err != nil {
			return fmt.Errorf("error reading 'defaultConfNssai': %w", err)
		}
		delete(object, "defaultConfNssai")
	}

	if raw, found := object["routingId"]; found {
		err = json.Unmarshal(raw, &a.RoutingId)
		if err != nil {
			return fmt.Errorf("error reading 'routingId': %w", err)
		}
		delete(object, "routingId")
	}

	if raw, found := object["secPacket"]; found {
		err = json.Unmarshal(raw, &a.SecPacket)
		if err != nil {
			return fmt.Errorf("error reading 'secPacket': %w", err)
		}
		delete(object, "secPacket")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AusfUpuData to handle AdditionalProperties
func (a AusfUpuData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DefaultConfNssai) != 0 {
		object["defaultConfNssai"], err = json.Marshal(a.DefaultConfNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultConfNssai': %w", err)
		}
	}

	if a.RoutingId != nil {
		object["routingId"], err = json.Marshal(a.RoutingId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingId': %w", err)
		}
	}

	if a.SecPacket != nil {
		object["secPacket"], err = json.Marshal(a.SecPacket)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secPacket': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AusfUpuInfo. Returns the specified
// element and whether it was found
func (a AusfUpuInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AusfUpuInfo
func (a *AusfUpuInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AusfUpuInfo to handle AdditionalProperties
func (a *AusfUpuInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["upuAckInd"]; found {
		err = json.Unmarshal(raw, &a.UpuAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'upuAckInd': %w", err)
		}
		delete(object, "upuAckInd")
	}

	if raw, found := object["upuDataList"]; found {
		err = json.Unmarshal(raw, &a.UpuDataList)
		if err != nil {
			return fmt.Errorf("error reading 'upuDataList': %w", err)
		}
		delete(object, "upuDataList")
	}

	if raw, found := object["upuHeader"]; found {
		err = json.Unmarshal(raw, &a.UpuHeader)
		if err != nil {
			return fmt.Errorf("error reading 'upuHeader': %w", err)
		}
		delete(object, "upuHeader")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AusfUpuInfo to handle AdditionalProperties
func (a AusfUpuInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["upuAckInd"], err = json.Marshal(a.UpuAckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuAckInd': %w", err)
	}

	object["upuDataList"], err = json.Marshal(a.UpuDataList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuDataList': %w", err)
	}

	if len(a.UpuHeader) != 0 {
		object["upuHeader"], err = json.Marshal(a.UpuHeader)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuHeader': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BsfExtProblemDetails. Returns the specified
// element and whether it was found
func (a BsfExtProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BsfExtProblemDetails
func (a *BsfExtProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BsfExtProblemDetails to handle AdditionalProperties
func (a *BsfExtProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["pcfSmFqdn"]; found {
		err = json.Unmarshal(raw, &a.PcfSmFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSmFqdn': %w", err)
		}
		delete(object, "pcfSmFqdn")
	}

	if raw, found := object["pcfSmIpEndPoints"]; found {
		err = json.Unmarshal(raw, &a.PcfSmIpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSmIpEndPoints': %w", err)
		}
		delete(object, "pcfSmIpEndPoints")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BsfExtProblemDetails to handle AdditionalProperties
func (a BsfExtProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.PcfSmFqdn != nil {
		object["pcfSmFqdn"], err = json.Marshal(a.PcfSmFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSmFqdn': %w", err)
		}
	}

	if len(a.PcfSmIpEndPoints) != 0 {
		object["pcfSmIpEndPoints"], err = json.Marshal(a.PcfSmIpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSmIpEndPoints': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfNFService. Returns the specified
// element and whether it was found
func (a NrfNFService) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfNFService
func (a *NrfNFService) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfNFService to handle AdditionalProperties
func (a *NrfNFService) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNfDomains"]; found {
		err = json.Unmarshal(raw, &a.AllowedNfDomains)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNfDomains': %w", err)
		}
		delete(object, "allowedNfDomains")
	}

	if raw, found := object["allowedNfTypes"]; found {
		err = json.Unmarshal(raw, &a.AllowedNfTypes)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNfTypes': %w", err)
		}
		delete(object, "allowedNfTypes")
	}

	if raw, found := object["allowedNssais"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssais)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssais': %w", err)
		}
		delete(object, "allowedNssais")
	}

	if raw, found := object["allowedOperationsPerNfInstance"]; found {
		err = json.Unmarshal(raw, &a.AllowedOperationsPerNfInstance)
		if err != nil {
			return fmt.Errorf("error reading 'allowedOperationsPerNfInstance': %w", err)
		}
		delete(object, "allowedOperationsPerNfInstance")
	}

	if raw, found := object["allowedOperationsPerNfType"]; found {
		err = json.Unmarshal(raw, &a.AllowedOperationsPerNfType)
		if err != nil {
			return fmt.Errorf("error reading 'allowedOperationsPerNfType': %w", err)
		}
		delete(object, "allowedOperationsPerNfType")
	}

	if raw, found := object["allowedPlmns"]; found {
		err = json.Unmarshal(raw, &a.AllowedPlmns)
		if err != nil {
			return fmt.Errorf("error reading 'allowedPlmns': %w", err)
		}
		delete(object, "allowedPlmns")
	}

	if raw, found := object["allowedSnpns"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnpns)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnpns': %w", err)
		}
		delete(object, "allowedSnpns")
	}

	if raw, found := object["apiPrefix"]; found {
		err = json.Unmarshal(raw, &a.ApiPrefix)
		if err != nil {
			return fmt.Errorf("error reading 'apiPrefix': %w", err)
		}
		delete(object, "apiPrefix")
	}

	if raw, found := object["capacity"]; found {
		err = json.Unmarshal(raw, &a.Capacity)
		if err != nil {
			return fmt.Errorf("error reading 'capacity': %w", err)
		}
		delete(object, "capacity")
	}

	if raw, found := object["defaultNotificationSubscriptions"]; found {
		err = json.Unmarshal(raw, &a.DefaultNotificationSubscriptions)
		if err != nil {
			return fmt.Errorf("error reading 'defaultNotificationSubscriptions': %w", err)
		}
		delete(object, "defaultNotificationSubscriptions")
	}

	if raw, found := object["fqdn"]; found {
		err = json.Unmarshal(raw, &a.Fqdn)
		if err != nil {
			return fmt.Errorf("error reading 'fqdn': %w", err)
		}
		delete(object, "fqdn")
	}

	if raw, found := object["interPlmnFqdn"]; found {
		err = json.Unmarshal(raw, &a.InterPlmnFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'interPlmnFqdn': %w", err)
		}
		delete(object, "interPlmnFqdn")
	}

	if raw, found := object["ipEndPoints"]; found {
		err = json.Unmarshal(raw, &a.IpEndPoints)
		if err != nil {
			return fmt.Errorf("error reading 'ipEndPoints': %w", err)
		}
		delete(object, "ipEndPoints")
	}

	if raw, found := object["load"]; found {
		err = json.Unmarshal(raw, &a.Load)
		if err != nil {
			return fmt.Errorf("error reading 'load': %w", err)
		}
		delete(object, "load")
	}

	if raw, found := object["loadTimeStamp"]; found {
		err = json.Unmarshal(raw, &a.LoadTimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'loadTimeStamp': %w", err)
		}
		delete(object, "loadTimeStamp")
	}

	if raw, found := object["nfServiceSetIdList"]; found {
		err = json.Unmarshal(raw, &a.NfServiceSetIdList)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceSetIdList': %w", err)
		}
		delete(object, "nfServiceSetIdList")
	}

	if raw, found := object["nfServiceStatus"]; found {
		err = json.Unmarshal(raw, &a.NfServiceStatus)
		if err != nil {
			return fmt.Errorf("error reading 'nfServiceStatus': %w", err)
		}
		delete(object, "nfServiceStatus")
	}

	if raw, found := object["oauth2Required"]; found {
		err = json.Unmarshal(raw, &a.Oauth2Required)
		if err != nil {
			return fmt.Errorf("error reading 'oauth2Required': %w", err)
		}
		delete(object, "oauth2Required")
	}

	if raw, found := object["perPlmnSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.PerPlmnSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'perPlmnSnssaiList': %w", err)
		}
		delete(object, "perPlmnSnssaiList")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["sNssais"]; found {
		err = json.Unmarshal(raw, &a.SNssais)
		if err != nil {
			return fmt.Errorf("error reading 'sNssais': %w", err)
		}
		delete(object, "sNssais")
	}

	if raw, found := object["scheme"]; found {
		err = json.Unmarshal(raw, &a.Scheme)
		if err != nil {
			return fmt.Errorf("error reading 'scheme': %w", err)
		}
		delete(object, "scheme")
	}

	if raw, found := object["serviceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'serviceInstanceId': %w", err)
		}
		delete(object, "serviceInstanceId")
	}

	if raw, found := object["serviceName"]; found {
		err = json.Unmarshal(raw, &a.ServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'serviceName': %w", err)
		}
		delete(object, "serviceName")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["supportedVendorSpecificFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedVendorSpecificFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedVendorSpecificFeatures': %w", err)
		}
		delete(object, "supportedVendorSpecificFeatures")
	}

	if raw, found := object["vendorId"]; found {
		err = json.Unmarshal(raw, &a.VendorId)
		if err != nil {
			return fmt.Errorf("error reading 'vendorId': %w", err)
		}
		delete(object, "vendorId")
	}

	if raw, found := object["versions"]; found {
		err = json.Unmarshal(raw, &a.Versions)
		if err != nil {
			return fmt.Errorf("error reading 'versions': %w", err)
		}
		delete(object, "versions")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfNFService to handle AdditionalProperties
func (a NrfNFService) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedNfDomains) != 0 {
		object["allowedNfDomains"], err = json.Marshal(a.AllowedNfDomains)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNfDomains': %w", err)
		}
	}

	if len(a.AllowedNfTypes) != 0 {
		object["allowedNfTypes"], err = json.Marshal(a.AllowedNfTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNfTypes': %w", err)
		}
	}

	if len(a.AllowedNssais) != 0 {
		object["allowedNssais"], err = json.Marshal(a.AllowedNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssais': %w", err)
		}
	}

	if a.AllowedOperationsPerNfInstance != nil {
		object["allowedOperationsPerNfInstance"], err = json.Marshal(a.AllowedOperationsPerNfInstance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedOperationsPerNfInstance': %w", err)
		}
	}

	if a.AllowedOperationsPerNfType != nil {
		object["allowedOperationsPerNfType"], err = json.Marshal(a.AllowedOperationsPerNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedOperationsPerNfType': %w", err)
		}
	}

	if len(a.AllowedPlmns) != 0 {
		object["allowedPlmns"], err = json.Marshal(a.AllowedPlmns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedPlmns': %w", err)
		}
	}

	if len(a.AllowedSnpns) != 0 {
		object["allowedSnpns"], err = json.Marshal(a.AllowedSnpns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSnpns': %w", err)
		}
	}

	if a.ApiPrefix != nil {
		object["apiPrefix"], err = json.Marshal(a.ApiPrefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apiPrefix': %w", err)
		}
	}

	if a.Capacity != nil {
		object["capacity"], err = json.Marshal(a.Capacity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'capacity': %w", err)
		}
	}

	if len(a.DefaultNotificationSubscriptions) != 0 {
		object["defaultNotificationSubscriptions"], err = json.Marshal(a.DefaultNotificationSubscriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultNotificationSubscriptions': %w", err)
		}
	}

	if a.Fqdn != nil {
		object["fqdn"], err = json.Marshal(a.Fqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fqdn': %w", err)
		}
	}

	if a.InterPlmnFqdn != nil {
		object["interPlmnFqdn"], err = json.Marshal(a.InterPlmnFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interPlmnFqdn': %w", err)
		}
	}

	if len(a.IpEndPoints) != 0 {
		object["ipEndPoints"], err = json.Marshal(a.IpEndPoints)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipEndPoints': %w", err)
		}
	}

	if a.Load != nil {
		object["load"], err = json.Marshal(a.Load)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'load': %w", err)
		}
	}

	if a.LoadTimeStamp != nil {
		object["loadTimeStamp"], err = json.Marshal(a.LoadTimeStamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'loadTimeStamp': %w", err)
		}
	}

	if len(a.NfServiceSetIdList) != 0 {
		object["nfServiceSetIdList"], err = json.Marshal(a.NfServiceSetIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfServiceSetIdList': %w", err)
		}
	}

	object["nfServiceStatus"], err = json.Marshal(a.NfServiceStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfServiceStatus': %w", err)
	}

	if a.Oauth2Required != nil {
		object["oauth2Required"], err = json.Marshal(a.Oauth2Required)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oauth2Required': %w", err)
		}
	}

	if len(a.PerPlmnSnssaiList) != 0 {
		object["perPlmnSnssaiList"], err = json.Marshal(a.PerPlmnSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'perPlmnSnssaiList': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if len(a.SNssais) != 0 {
		object["sNssais"], err = json.Marshal(a.SNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssais': %w", err)
		}
	}

	object["scheme"], err = json.Marshal(a.Scheme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scheme': %w", err)
	}

	object["serviceInstanceId"], err = json.Marshal(a.ServiceInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceInstanceId': %w", err)
	}

	object["serviceName"], err = json.Marshal(a.ServiceName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceName': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.SupportedVendorSpecificFeatures != nil {
		object["supportedVendorSpecificFeatures"], err = json.Marshal(a.SupportedVendorSpecificFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedVendorSpecificFeatures': %w", err)
		}
	}

	if len(a.VendorId) != 0 {
		object["vendorId"], err = json.Marshal(a.VendorId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vendorId': %w", err)
		}
	}

	object["versions"], err = json.Marshal(a.Versions)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'versions': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfPfdData. Returns the specified
// element and whether it was found
func (a NrfPfdData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfPfdData
func (a *NrfPfdData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfPfdData to handle AdditionalProperties
func (a *NrfPfdData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afIds"]; found {
		err = json.Unmarshal(raw, &a.AfIds)
		if err != nil {
			return fmt.Errorf("error reading 'afIds': %w", err)
		}
		delete(object, "afIds")
	}

	if raw, found := object["appIds"]; found {
		err = json.Unmarshal(raw, &a.AppIds)
		if err != nil {
			return fmt.Errorf("error reading 'appIds': %w", err)
		}
		delete(object, "appIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfPfdData to handle AdditionalProperties
func (a NrfPfdData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AfIds) != 0 {
		object["afIds"], err = json.Marshal(a.AfIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afIds': %w", err)
		}
	}

	if len(a.AppIds) != 0 {
		object["appIds"], err = json.Marshal(a.AppIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NrfSubscriptionData. Returns the specified
// element and whether it was found
func (a NrfSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NrfSubscriptionData
func (a *NrfSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NrfSubscriptionData to handle AdditionalProperties
func (a *NrfSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nfStatusNotificationUri"]; found {
		err = json.Unmarshal(raw, &a.NfStatusNotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'nfStatusNotificationUri': %w", err)
		}
		delete(object, "nfStatusNotificationUri")
	}

	if raw, found := object["nid"]; found {
		err = json.Unmarshal(raw, &a.Nid)
		if err != nil {
			return fmt.Errorf("error reading 'nid': %w", err)
		}
		delete(object, "nid")
	}

	if raw, found := object["notifCondition"]; found {
		err = json.Unmarshal(raw, &a.NotifCondition)
		if err != nil {
			return fmt.Errorf("error reading 'notifCondition': %w", err)
		}
		delete(object, "notifCondition")
	}

	if raw, found := object["nrfSupportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.NrfSupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'nrfSupportedFeatures': %w", err)
		}
		delete(object, "nrfSupportedFeatures")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["reqNfFqdn"]; found {
		err = json.Unmarshal(raw, &a.ReqNfFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'reqNfFqdn': %w", err)
		}
		delete(object, "reqNfFqdn")
	}

	if raw, found := object["reqNfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ReqNfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'reqNfInstanceId': %w", err)
		}
		delete(object, "reqNfInstanceId")
	}

	if raw, found := object["reqNfType"]; found {
		err = json.Unmarshal(raw, &a.ReqNfType)
		if err != nil {
			return fmt.Errorf("error reading 'reqNfType': %w", err)
		}
		delete(object, "reqNfType")
	}

	if raw, found := object["reqNotifEvents"]; found {
		err = json.Unmarshal(raw, &a.ReqNotifEvents)
		if err != nil {
			return fmt.Errorf("error reading 'reqNotifEvents': %w", err)
		}
		delete(object, "reqNotifEvents")
	}

	if raw, found := object["reqPerPlmnSnssais"]; found {
		err = json.Unmarshal(raw, &a.ReqPerPlmnSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'reqPerPlmnSnssais': %w", err)
		}
		delete(object, "reqPerPlmnSnssais")
	}

	if raw, found := object["reqPlmnList"]; found {
		err = json.Unmarshal(raw, &a.ReqPlmnList)
		if err != nil {
			return fmt.Errorf("error reading 'reqPlmnList': %w", err)
		}
		delete(object, "reqPlmnList")
	}

	if raw, found := object["reqSnpnList"]; found {
		err = json.Unmarshal(raw, &a.ReqSnpnList)
		if err != nil {
			return fmt.Errorf("error reading 'reqSnpnList': %w", err)
		}
		delete(object, "reqSnpnList")
	}

	if raw, found := object["reqSnssais"]; found {
		err = json.Unmarshal(raw, &a.ReqSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'reqSnssais': %w", err)
		}
		delete(object, "reqSnssais")
	}

	if raw, found := object["requesterFeatures"]; found {
		err = json.Unmarshal(raw, &a.RequesterFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'requesterFeatures': %w", err)
		}
		delete(object, "requesterFeatures")
	}

	if raw, found := object["servingScope"]; found {
		err = json.Unmarshal(raw, &a.ServingScope)
		if err != nil {
			return fmt.Errorf("error reading 'servingScope': %w", err)
		}
		delete(object, "servingScope")
	}

	if raw, found := object["subscrCond"]; found {
		err = json.Unmarshal(raw, &a.SubscrCond)
		if err != nil {
			return fmt.Errorf("error reading 'subscrCond': %w", err)
		}
		delete(object, "subscrCond")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NrfSubscriptionData to handle AdditionalProperties
func (a NrfSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["nfStatusNotificationUri"], err = json.Marshal(a.NfStatusNotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfStatusNotificationUri': %w", err)
	}

	if len(a.Nid) != 0 {
		object["nid"], err = json.Marshal(a.Nid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nid': %w", err)
		}
	}

	if a.NotifCondition != nil {
		object["notifCondition"], err = json.Marshal(a.NotifCondition)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifCondition': %w", err)
		}
	}

	if a.NrfSupportedFeatures != nil {
		object["nrfSupportedFeatures"], err = json.Marshal(a.NrfSupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfSupportedFeatures': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.ReqNfFqdn != nil {
		object["reqNfFqdn"], err = json.Marshal(a.ReqNfFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqNfFqdn': %w", err)
		}
	}

	if a.ReqNfInstanceId != nil {
		object["reqNfInstanceId"], err = json.Marshal(a.ReqNfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqNfInstanceId': %w", err)
		}
	}

	if a.ReqNfType != nil {
		object["reqNfType"], err = json.Marshal(a.ReqNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqNfType': %w", err)
		}
	}

	if len(a.ReqNotifEvents) != 0 {
		object["reqNotifEvents"], err = json.Marshal(a.ReqNotifEvents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqNotifEvents': %w", err)
		}
	}

	if len(a.ReqPerPlmnSnssais) != 0 {
		object["reqPerPlmnSnssais"], err = json.Marshal(a.ReqPerPlmnSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqPerPlmnSnssais': %w", err)
		}
	}

	if len(a.ReqPlmnList) != 0 {
		object["reqPlmnList"], err = json.Marshal(a.ReqPlmnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqPlmnList': %w", err)
		}
	}

	if len(a.ReqSnpnList) != 0 {
		object["reqSnpnList"], err = json.Marshal(a.ReqSnpnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqSnpnList': %w", err)
		}
	}

	if len(a.ReqSnssais) != 0 {
		object["reqSnssais"], err = json.Marshal(a.ReqSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqSnssais': %w", err)
		}
	}

	if a.RequesterFeatures != nil {
		object["requesterFeatures"], err = json.Marshal(a.RequesterFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterFeatures': %w", err)
		}
	}

	if len(a.ServingScope) != 0 {
		object["servingScope"], err = json.Marshal(a.ServingScope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingScope': %w", err)
		}
	}

	if a.SubscrCond != nil {
		object["subscrCond"], err = json.Marshal(a.SubscrCond)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscrCond': %w", err)
		}
	}

	if len(a.SubscriptionId) != 0 {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcfBdtPolicyData. Returns the specified
// element and whether it was found
func (a PcfBdtPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcfBdtPolicyData
func (a *PcfBdtPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcfBdtPolicyData to handle AdditionalProperties
func (a *PcfBdtPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["selTransPolicyId"]; found {
		err = json.Unmarshal(raw, &a.SelTransPolicyId)
		if err != nil {
			return fmt.Errorf("error reading 'selTransPolicyId': %w", err)
		}
		delete(object, "selTransPolicyId")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["transfPolicies"]; found {
		err = json.Unmarshal(raw, &a.TransfPolicies)
		if err != nil {
			return fmt.Errorf("error reading 'transfPolicies': %w", err)
		}
		delete(object, "transfPolicies")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcfBdtPolicyData to handle AdditionalProperties
func (a PcfBdtPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	if a.SelTransPolicyId != nil {
		object["selTransPolicyId"], err = json.Marshal(a.SelTransPolicyId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selTransPolicyId': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	object["transfPolicies"], err = json.Marshal(a.TransfPolicies)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'transfPolicies': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcfBdtPolicyDataPatch. Returns the specified
// element and whether it was found
func (a PcfBdtPolicyDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcfBdtPolicyDataPatch
func (a *PcfBdtPolicyDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcfBdtPolicyDataPatch to handle AdditionalProperties
func (a *PcfBdtPolicyDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["selTransPolicyId"]; found {
		err = json.Unmarshal(raw, &a.SelTransPolicyId)
		if err != nil {
			return fmt.Errorf("error reading 'selTransPolicyId': %w", err)
		}
		delete(object, "selTransPolicyId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcfBdtPolicyDataPatch to handle AdditionalProperties
func (a PcfBdtPolicyDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["selTransPolicyId"], err = json.Marshal(a.SelTransPolicyId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'selTransPolicyId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcfNetworkAreaInfo. Returns the specified
// element and whether it was found
func (a PcfNetworkAreaInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcfNetworkAreaInfo
func (a *PcfNetworkAreaInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcfNetworkAreaInfo to handle AdditionalProperties
func (a *PcfNetworkAreaInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecgis"]; found {
		err = json.Unmarshal(raw, &a.Ecgis)
		if err != nil {
			return fmt.Errorf("error reading 'ecgis': %w", err)
		}
		delete(object, "ecgis")
	}

	if raw, found := object["gRanNodeIds"]; found {
		err = json.Unmarshal(raw, &a.GRanNodeIds)
		if err != nil {
			return fmt.Errorf("error reading 'gRanNodeIds': %w", err)
		}
		delete(object, "gRanNodeIds")
	}

	if raw, found := object["ncgis"]; found {
		err = json.Unmarshal(raw, &a.Ncgis)
		if err != nil {
			return fmt.Errorf("error reading 'ncgis': %w", err)
		}
		delete(object, "ncgis")
	}

	if raw, found := object["tais"]; found {
		err = json.Unmarshal(raw, &a.Tais)
		if err != nil {
			return fmt.Errorf("error reading 'tais': %w", err)
		}
		delete(object, "tais")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcfNetworkAreaInfo to handle AdditionalProperties
func (a PcfNetworkAreaInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ecgis) != 0 {
		object["ecgis"], err = json.Marshal(a.Ecgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgis': %w", err)
		}
	}

	if len(a.GRanNodeIds) != 0 {
		object["gRanNodeIds"], err = json.Marshal(a.GRanNodeIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gRanNodeIds': %w", err)
		}
	}

	if len(a.Ncgis) != 0 {
		object["ncgis"], err = json.Marshal(a.Ncgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgis': %w", err)
		}
	}

	if len(a.Tais) != 0 {
		object["tais"], err = json.Marshal(a.Tais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tais': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfIpAddress. Returns the specified
// element and whether it was found
func (a SmfIpAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfIpAddress
func (a *SmfIpAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfIpAddress to handle AdditionalProperties
func (a *SmfIpAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfIpAddress to handle AdditionalProperties
func (a SmfIpAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if a.Ipv6Prefix != nil {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UdmEcRestrictionDataWb. Returns the specified
// element and whether it was found
func (a UdmEcRestrictionDataWb) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UdmEcRestrictionDataWb
func (a *UdmEcRestrictionDataWb) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UdmEcRestrictionDataWb to handle AdditionalProperties
func (a *UdmEcRestrictionDataWb) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecModeARestricted"]; found {
		err = json.Unmarshal(raw, &a.EcModeARestricted)
		if err != nil {
			return fmt.Errorf("error reading 'ecModeARestricted': %w", err)
		}
		delete(object, "ecModeARestricted")
	}

	if raw, found := object["ecModeBRestricted"]; found {
		err = json.Unmarshal(raw, &a.EcModeBRestricted)
		if err != nil {
			return fmt.Errorf("error reading 'ecModeBRestricted': %w", err)
		}
		delete(object, "ecModeBRestricted")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UdmEcRestrictionDataWb to handle AdditionalProperties
func (a UdmEcRestrictionDataWb) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EcModeARestricted != nil {
		object["ecModeARestricted"], err = json.Marshal(a.EcModeARestricted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecModeARestricted': %w", err)
		}
	}

	if a.EcModeBRestricted != nil {
		object["ecModeBRestricted"], err = json.Marshal(a.EcModeBRestricted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecModeBRestricted': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UdmLocationArea. Returns the specified
// element and whether it was found
func (a UdmLocationArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UdmLocationArea
func (a *UdmLocationArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UdmLocationArea to handle AdditionalProperties
func (a *UdmLocationArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["civicAddresses"]; found {
		err = json.Unmarshal(raw, &a.CivicAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddresses': %w", err)
		}
		delete(object, "civicAddresses")
	}

	if raw, found := object["geographicAreas"]; found {
		err = json.Unmarshal(raw, &a.GeographicAreas)
		if err != nil {
			return fmt.Errorf("error reading 'geographicAreas': %w", err)
		}
		delete(object, "geographicAreas")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UdmLocationArea to handle AdditionalProperties
func (a UdmLocationArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CivicAddresses != nil {
		object["civicAddresses"], err = json.Marshal(a.CivicAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddresses': %w", err)
		}
	}

	if a.GeographicAreas != nil {
		object["geographicAreas"], err = json.Marshal(a.GeographicAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicAreas': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsAfSigProtocol0 returns the union data inside the AfSigProtocol as a AfSigProtocol0
func (t AfSigProtocol) AsAfSigProtocol0() (AfSigProtocol0, error) {
	var body AfSigProtocol0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAfSigProtocol0 overwrites any union data inside the AfSigProtocol as the provided AfSigProtocol0
func (t *AfSigProtocol) FromAfSigProtocol0(v AfSigProtocol0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAfSigProtocol0 performs a merge with any union data inside the AfSigProtocol, using the provided AfSigProtocol0
func (t *AfSigProtocol) MergeAfSigProtocol0(v AfSigProtocol0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the AfSigProtocol as a NullValue
func (t AfSigProtocol) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the AfSigProtocol as the provided NullValue
func (t *AfSigProtocol) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the AfSigProtocol, using the provided NullValue
func (t *AfSigProtocol) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAfSigProtocol2 returns the union data inside the AfSigProtocol as a AfSigProtocol2
func (t AfSigProtocol) AsAfSigProtocol2() (AfSigProtocol2, error) {
	var body AfSigProtocol2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAfSigProtocol2 overwrites any union data inside the AfSigProtocol as the provided AfSigProtocol2
func (t *AfSigProtocol) FromAfSigProtocol2(v AfSigProtocol2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAfSigProtocol2 performs a merge with any union data inside the AfSigProtocol, using the provided AfSigProtocol2
func (t *AfSigProtocol) MergeAfSigProtocol2(v AfSigProtocol2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AfSigProtocol) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AfSigProtocol) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAvEapAkaPrime returns the union data inside the AuthenticationVector as a AvEapAkaPrime
func (t AuthenticationVector) AsAvEapAkaPrime() (AvEapAkaPrime, error) {
	var body AvEapAkaPrime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAvEapAkaPrime overwrites any union data inside the AuthenticationVector as the provided AvEapAkaPrime
func (t *AuthenticationVector) FromAvEapAkaPrime(v AvEapAkaPrime) error {
	v.AvType = "EAP_AKA_PRIME"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAvEapAkaPrime performs a merge with any union data inside the AuthenticationVector, using the provided AvEapAkaPrime
func (t *AuthenticationVector) MergeAvEapAkaPrime(v AvEapAkaPrime) error {
	v.AvType = "EAP_AKA_PRIME"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAv5GHeAka returns the union data inside the AuthenticationVector as a Av5GHeAka
func (t AuthenticationVector) AsAv5GHeAka() (Av5GHeAka, error) {
	var body Av5GHeAka
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAv5GHeAka overwrites any union data inside the AuthenticationVector as the provided Av5GHeAka
func (t *AuthenticationVector) FromAv5GHeAka(v Av5GHeAka) error {
	v.AvType = "5G_HE_AKA"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAv5GHeAka performs a merge with any union data inside the AuthenticationVector, using the provided Av5GHeAka
func (t *AuthenticationVector) MergeAv5GHeAka(v Av5GHeAka) error {
	v.AvType = "5G_HE_AKA"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AuthenticationVector) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"avType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AuthenticationVector) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "5G_HE_AKA":
		return t.AsAv5GHeAka()
	case "EAP_AKA_PRIME":
		return t.AsAvEapAkaPrime()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AuthenticationVector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AuthenticationVector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCnf returns the union data inside the ComplexQuery as a Cnf
func (t ComplexQuery) AsCnf() (Cnf, error) {
	var body Cnf
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCnf overwrites any union data inside the ComplexQuery as the provided Cnf
func (t *ComplexQuery) FromCnf(v Cnf) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCnf performs a merge with any union data inside the ComplexQuery, using the provided Cnf
func (t *ComplexQuery) MergeCnf(v Cnf) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDnf returns the union data inside the ComplexQuery as a Dnf
func (t ComplexQuery) AsDnf() (Dnf, error) {
	var body Dnf
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnf overwrites any union data inside the ComplexQuery as the provided Dnf
func (t *ComplexQuery) FromDnf(v Dnf) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnf performs a merge with any union data inside the ComplexQuery, using the provided Dnf
func (t *ComplexQuery) MergeDnf(v Dnf) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ComplexQuery) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ComplexQuery) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEventsSubscReqData returns the union data inside the EventsSubscPutData as a EventsSubscReqData
func (t EventsSubscPutData) AsEventsSubscReqData() (EventsSubscReqData, error) {
	var body EventsSubscReqData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventsSubscReqData overwrites any union data inside the EventsSubscPutData as the provided EventsSubscReqData
func (t *EventsSubscPutData) FromEventsSubscReqData(v EventsSubscReqData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventsSubscReqData performs a merge with any union data inside the EventsSubscPutData, using the provided EventsSubscReqData
func (t *EventsSubscPutData) MergeEventsSubscReqData(v EventsSubscReqData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventsNotification returns the union data inside the EventsSubscPutData as a EventsNotification
func (t EventsSubscPutData) AsEventsNotification() (EventsNotification, error) {
	var body EventsNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventsNotification overwrites any union data inside the EventsSubscPutData as the provided EventsNotification
func (t *EventsSubscPutData) FromEventsNotification(v EventsNotification) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventsNotification performs a merge with any union data inside the EventsSubscPutData, using the provided EventsNotification
func (t *EventsSubscPutData) MergeEventsNotification(v EventsNotification) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EventsSubscPutData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EventsSubscPutData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHssAuthenticationVectors0 returns the union data inside the HssAuthenticationVectors as a HssAuthenticationVectors0
func (t HssAuthenticationVectors) AsHssAuthenticationVectors0() (HssAuthenticationVectors0, error) {
	var body HssAuthenticationVectors0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHssAuthenticationVectors0 overwrites any union data inside the HssAuthenticationVectors as the provided HssAuthenticationVectors0
func (t *HssAuthenticationVectors) FromHssAuthenticationVectors0(v HssAuthenticationVectors0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHssAuthenticationVectors0 performs a merge with any union data inside the HssAuthenticationVectors, using the provided HssAuthenticationVectors0
func (t *HssAuthenticationVectors) MergeHssAuthenticationVectors0(v HssAuthenticationVectors0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHssAuthenticationVectors1 returns the union data inside the HssAuthenticationVectors as a HssAuthenticationVectors1
func (t HssAuthenticationVectors) AsHssAuthenticationVectors1() (HssAuthenticationVectors1, error) {
	var body HssAuthenticationVectors1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHssAuthenticationVectors1 overwrites any union data inside the HssAuthenticationVectors as the provided HssAuthenticationVectors1
func (t *HssAuthenticationVectors) FromHssAuthenticationVectors1(v HssAuthenticationVectors1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHssAuthenticationVectors1 performs a merge with any union data inside the HssAuthenticationVectors, using the provided HssAuthenticationVectors1
func (t *HssAuthenticationVectors) MergeHssAuthenticationVectors1(v HssAuthenticationVectors1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHssAuthenticationVectors2 returns the union data inside the HssAuthenticationVectors as a HssAuthenticationVectors2
func (t HssAuthenticationVectors) AsHssAuthenticationVectors2() (HssAuthenticationVectors2, error) {
	var body HssAuthenticationVectors2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHssAuthenticationVectors2 overwrites any union data inside the HssAuthenticationVectors as the provided HssAuthenticationVectors2
func (t *HssAuthenticationVectors) FromHssAuthenticationVectors2(v HssAuthenticationVectors2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHssAuthenticationVectors2 performs a merge with any union data inside the HssAuthenticationVectors, using the provided HssAuthenticationVectors2
func (t *HssAuthenticationVectors) MergeHssAuthenticationVectors2(v HssAuthenticationVectors2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HssAuthenticationVectors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HssAuthenticationVectors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLinksValueSchema0 returns the union data inside the LinksValueSchema as a LinksValueSchema0
func (t LinksValueSchema) AsLinksValueSchema0() (LinksValueSchema0, error) {
	var body LinksValueSchema0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinksValueSchema0 overwrites any union data inside the LinksValueSchema as the provided LinksValueSchema0
func (t *LinksValueSchema) FromLinksValueSchema0(v LinksValueSchema0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinksValueSchema0 performs a merge with any union data inside the LinksValueSchema, using the provided LinksValueSchema0
func (t *LinksValueSchema) MergeLinksValueSchema0(v LinksValueSchema0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLink returns the union data inside the LinksValueSchema as a Link
func (t LinksValueSchema) AsLink() (Link, error) {
	var body Link
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLink overwrites any union data inside the LinksValueSchema as the provided Link
func (t *LinksValueSchema) FromLink(v Link) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLink performs a merge with any union data inside the LinksValueSchema, using the provided Link
func (t *LinksValueSchema) MergeLink(v Link) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinksValueSchema) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinksValueSchema) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMeteringMethod0 returns the union data inside the MeteringMethod as a MeteringMethod0
func (t MeteringMethod) AsMeteringMethod0() (MeteringMethod0, error) {
	var body MeteringMethod0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeteringMethod0 overwrites any union data inside the MeteringMethod as the provided MeteringMethod0
func (t *MeteringMethod) FromMeteringMethod0(v MeteringMethod0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeteringMethod0 performs a merge with any union data inside the MeteringMethod, using the provided MeteringMethod0
func (t *MeteringMethod) MergeMeteringMethod0(v MeteringMethod0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the MeteringMethod as a NullValue
func (t MeteringMethod) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the MeteringMethod as the provided NullValue
func (t *MeteringMethod) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the MeteringMethod, using the provided NullValue
func (t *MeteringMethod) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMeteringMethod2 returns the union data inside the MeteringMethod as a MeteringMethod2
func (t MeteringMethod) AsMeteringMethod2() (MeteringMethod2, error) {
	var body MeteringMethod2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeteringMethod2 overwrites any union data inside the MeteringMethod as the provided MeteringMethod2
func (t *MeteringMethod) FromMeteringMethod2(v MeteringMethod2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeteringMethod2 performs a merge with any union data inside the MeteringMethod, using the provided MeteringMethod2
func (t *MeteringMethod) MergeMeteringMethod2(v MeteringMethod2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MeteringMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MeteringMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOperatorSpecificDataContainerValue0 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue0
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue0() (OperatorSpecificDataContainerValue0, error) {
	var body OperatorSpecificDataContainerValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue0 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue0
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue0(v OperatorSpecificDataContainerValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue0 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue0
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue0(v OperatorSpecificDataContainerValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue1 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue1
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue1() (OperatorSpecificDataContainerValue1, error) {
	var body OperatorSpecificDataContainerValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue1 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue1
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue1(v OperatorSpecificDataContainerValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue1 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue1
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue1(v OperatorSpecificDataContainerValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue2 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue2
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue2() (OperatorSpecificDataContainerValue2, error) {
	var body OperatorSpecificDataContainerValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue2 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue2
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue2(v OperatorSpecificDataContainerValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue2 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue2
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue2(v OperatorSpecificDataContainerValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue3 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue3
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue3() (OperatorSpecificDataContainerValue3, error) {
	var body OperatorSpecificDataContainerValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue3 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue3
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue3(v OperatorSpecificDataContainerValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue3 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue3
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue3(v OperatorSpecificDataContainerValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOperatorSpecificDataContainerValue4 returns the union data inside the OperatorSpecificDataContainer_Value as a OperatorSpecificDataContainerValue4
func (t OperatorSpecificDataContainer_Value) AsOperatorSpecificDataContainerValue4() (OperatorSpecificDataContainerValue4, error) {
	var body OperatorSpecificDataContainerValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperatorSpecificDataContainerValue4 overwrites any union data inside the OperatorSpecificDataContainer_Value as the provided OperatorSpecificDataContainerValue4
func (t *OperatorSpecificDataContainer_Value) FromOperatorSpecificDataContainerValue4(v OperatorSpecificDataContainerValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperatorSpecificDataContainerValue4 performs a merge with any union data inside the OperatorSpecificDataContainer_Value, using the provided OperatorSpecificDataContainerValue4
func (t *OperatorSpecificDataContainer_Value) MergeOperatorSpecificDataContainerValue4(v OperatorSpecificDataContainerValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OperatorSpecificDataContainer_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OperatorSpecificDataContainer_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChangeOfSupiPeiAssociationReport returns the union data inside the Report as a ChangeOfSupiPeiAssociationReport
func (t Report) AsChangeOfSupiPeiAssociationReport() (ChangeOfSupiPeiAssociationReport, error) {
	var body ChangeOfSupiPeiAssociationReport
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChangeOfSupiPeiAssociationReport overwrites any union data inside the Report as the provided ChangeOfSupiPeiAssociationReport
func (t *Report) FromChangeOfSupiPeiAssociationReport(v ChangeOfSupiPeiAssociationReport) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChangeOfSupiPeiAssociationReport performs a merge with any union data inside the Report, using the provided ChangeOfSupiPeiAssociationReport
func (t *Report) MergeChangeOfSupiPeiAssociationReport(v ChangeOfSupiPeiAssociationReport) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoamingStatusReport returns the union data inside the Report as a RoamingStatusReport
func (t Report) AsRoamingStatusReport() (RoamingStatusReport, error) {
	var body RoamingStatusReport
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoamingStatusReport overwrites any union data inside the Report as the provided RoamingStatusReport
func (t *Report) FromRoamingStatusReport(v RoamingStatusReport) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoamingStatusReport performs a merge with any union data inside the Report, using the provided RoamingStatusReport
func (t *Report) MergeRoamingStatusReport(v RoamingStatusReport) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCnTypeChangeReport returns the union data inside the Report as a CnTypeChangeReport
func (t Report) AsCnTypeChangeReport() (CnTypeChangeReport, error) {
	var body CnTypeChangeReport
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCnTypeChangeReport overwrites any union data inside the Report as the provided CnTypeChangeReport
func (t *Report) FromCnTypeChangeReport(v CnTypeChangeReport) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCnTypeChangeReport performs a merge with any union data inside the Report, using the provided CnTypeChangeReport
func (t *Report) MergeCnTypeChangeReport(v CnTypeChangeReport) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCmInfoReport returns the union data inside the Report as a CmInfoReport
func (t Report) AsCmInfoReport() (CmInfoReport, error) {
	var body CmInfoReport
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCmInfoReport overwrites any union data inside the Report as the provided CmInfoReport
func (t *Report) FromCmInfoReport(v CmInfoReport) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCmInfoReport performs a merge with any union data inside the Report, using the provided CmInfoReport
func (t *Report) MergeCmInfoReport(v CmInfoReport) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLossConnectivityReport returns the union data inside the Report as a LossConnectivityReport
func (t Report) AsLossConnectivityReport() (LossConnectivityReport, error) {
	var body LossConnectivityReport
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLossConnectivityReport overwrites any union data inside the Report as the provided LossConnectivityReport
func (t *Report) FromLossConnectivityReport(v LossConnectivityReport) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLossConnectivityReport performs a merge with any union data inside the Report, using the provided LossConnectivityReport
func (t *Report) MergeLossConnectivityReport(v LossConnectivityReport) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLocationReport returns the union data inside the Report as a LocationReport
func (t Report) AsLocationReport() (LocationReport, error) {
	var body LocationReport
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLocationReport overwrites any union data inside the Report as the provided LocationReport
func (t *Report) FromLocationReport(v LocationReport) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLocationReport performs a merge with any union data inside the Report, using the provided LocationReport
func (t *Report) MergeLocationReport(v LocationReport) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPdnConnectivityStatReport returns the union data inside the Report as a PdnConnectivityStatReport
func (t Report) AsPdnConnectivityStatReport() (PdnConnectivityStatReport, error) {
	var body PdnConnectivityStatReport
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPdnConnectivityStatReport overwrites any union data inside the Report as the provided PdnConnectivityStatReport
func (t *Report) FromPdnConnectivityStatReport(v PdnConnectivityStatReport) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePdnConnectivityStatReport performs a merge with any union data inside the Report, using the provided PdnConnectivityStatReport
func (t *Report) MergePdnConnectivityStatReport(v PdnConnectivityStatReport) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Report) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Report) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReportingLevel0 returns the union data inside the ReportingLevel as a ReportingLevel0
func (t ReportingLevel) AsReportingLevel0() (ReportingLevel0, error) {
	var body ReportingLevel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReportingLevel0 overwrites any union data inside the ReportingLevel as the provided ReportingLevel0
func (t *ReportingLevel) FromReportingLevel0(v ReportingLevel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReportingLevel0 performs a merge with any union data inside the ReportingLevel, using the provided ReportingLevel0
func (t *ReportingLevel) MergeReportingLevel0(v ReportingLevel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNullValue returns the union data inside the ReportingLevel as a NullValue
func (t ReportingLevel) AsNullValue() (NullValue, error) {
	var body NullValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNullValue overwrites any union data inside the ReportingLevel as the provided NullValue
func (t *ReportingLevel) FromNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNullValue performs a merge with any union data inside the ReportingLevel, using the provided NullValue
func (t *ReportingLevel) MergeNullValue(v NullValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReportingLevel2 returns the union data inside the ReportingLevel as a ReportingLevel2
func (t ReportingLevel) AsReportingLevel2() (ReportingLevel2, error) {
	var body ReportingLevel2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReportingLevel2 overwrites any union data inside the ReportingLevel as the provided ReportingLevel2
func (t *ReportingLevel) FromReportingLevel2(v ReportingLevel2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReportingLevel2 performs a merge with any union data inside the ReportingLevel, using the provided ReportingLevel2
func (t *ReportingLevel) MergeReportingLevel2(v ReportingLevel2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReportingLevel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReportingLevel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSteeringContainer0 returns the union data inside the SteeringContainer as a SteeringContainer0
func (t SteeringContainer) AsSteeringContainer0() (SteeringContainer0, error) {
	var body SteeringContainer0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSteeringContainer0 overwrites any union data inside the SteeringContainer as the provided SteeringContainer0
func (t *SteeringContainer) FromSteeringContainer0(v SteeringContainer0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSteeringContainer0 performs a merge with any union data inside the SteeringContainer, using the provided SteeringContainer0
func (t *SteeringContainer) MergeSteeringContainer0(v SteeringContainer0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSecuredPacket returns the union data inside the SteeringContainer as a SecuredPacket
func (t SteeringContainer) AsSecuredPacket() (SecuredPacket, error) {
	var body SecuredPacket
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecuredPacket overwrites any union data inside the SteeringContainer as the provided SecuredPacket
func (t *SteeringContainer) FromSecuredPacket(v SecuredPacket) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecuredPacket performs a merge with any union data inside the SteeringContainer, using the provided SecuredPacket
func (t *SteeringContainer) MergeSecuredPacket(v SecuredPacket) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SteeringContainer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SteeringContainer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAv5gAka returns the union data inside the UEAuthenticationCtx_5gAuthData as a Av5gAka
func (t UEAuthenticationCtx_5gAuthData) AsAv5gAka() (Av5gAka, error) {
	var body Av5gAka
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAv5gAka overwrites any union data inside the UEAuthenticationCtx_5gAuthData as the provided Av5gAka
func (t *UEAuthenticationCtx_5gAuthData) FromAv5gAka(v Av5gAka) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAv5gAka performs a merge with any union data inside the UEAuthenticationCtx_5gAuthData, using the provided Av5gAka
func (t *UEAuthenticationCtx_5gAuthData) MergeAv5gAka(v Av5gAka) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEapPayload returns the union data inside the UEAuthenticationCtx_5gAuthData as a EapPayload
func (t UEAuthenticationCtx_5gAuthData) AsEapPayload() (EapPayload, error) {
	var body EapPayload
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEapPayload overwrites any union data inside the UEAuthenticationCtx_5gAuthData as the provided EapPayload
func (t *UEAuthenticationCtx_5gAuthData) FromEapPayload(v EapPayload) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEapPayload performs a merge with any union data inside the UEAuthenticationCtx_5gAuthData, using the provided EapPayload
func (t *UEAuthenticationCtx_5gAuthData) MergeEapPayload(v EapPayload) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UEAuthenticationCtx_5gAuthData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UEAuthenticationCtx_5gAuthData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAusfSteeringContainer0 returns the union data inside the AusfSteeringContainer as a AusfSteeringContainer0
func (t AusfSteeringContainer) AsAusfSteeringContainer0() (AusfSteeringContainer0, error) {
	var body AusfSteeringContainer0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAusfSteeringContainer0 overwrites any union data inside the AusfSteeringContainer as the provided AusfSteeringContainer0
func (t *AusfSteeringContainer) FromAusfSteeringContainer0(v AusfSteeringContainer0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAusfSteeringContainer0 performs a merge with any union data inside the AusfSteeringContainer, using the provided AusfSteeringContainer0
func (t *AusfSteeringContainer) MergeAusfSteeringContainer0(v AusfSteeringContainer0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAusfSecuredPacket returns the union data inside the AusfSteeringContainer as a AusfSecuredPacket
func (t AusfSteeringContainer) AsAusfSecuredPacket() (AusfSecuredPacket, error) {
	var body AusfSecuredPacket
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAusfSecuredPacket overwrites any union data inside the AusfSteeringContainer as the provided AusfSecuredPacket
func (t *AusfSteeringContainer) FromAusfSecuredPacket(v AusfSecuredPacket) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAusfSecuredPacket performs a merge with any union data inside the AusfSteeringContainer, using the provided AusfSecuredPacket
func (t *AusfSteeringContainer) MergeAusfSecuredPacket(v AusfSecuredPacket) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AusfSteeringContainer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AusfSteeringContainer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNfInstanceIdCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NfInstanceIdCond
func (t NrfSubscriptionData_SubscrCond) AsNfInstanceIdCond() (NfInstanceIdCond, error) {
	var body NfInstanceIdCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfInstanceIdCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NfInstanceIdCond
func (t *NrfSubscriptionData_SubscrCond) FromNfInstanceIdCond(v NfInstanceIdCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfInstanceIdCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NfInstanceIdCond
func (t *NrfSubscriptionData_SubscrCond) MergeNfInstanceIdCond(v NfInstanceIdCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNfInstanceIdListCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NfInstanceIdListCond
func (t NrfSubscriptionData_SubscrCond) AsNfInstanceIdListCond() (NfInstanceIdListCond, error) {
	var body NfInstanceIdListCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfInstanceIdListCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NfInstanceIdListCond
func (t *NrfSubscriptionData_SubscrCond) FromNfInstanceIdListCond(v NfInstanceIdListCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfInstanceIdListCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NfInstanceIdListCond
func (t *NrfSubscriptionData_SubscrCond) MergeNfInstanceIdListCond(v NfInstanceIdListCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNfTypeCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NfTypeCond
func (t NrfSubscriptionData_SubscrCond) AsNfTypeCond() (NfTypeCond, error) {
	var body NfTypeCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfTypeCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NfTypeCond
func (t *NrfSubscriptionData_SubscrCond) FromNfTypeCond(v NfTypeCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfTypeCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NfTypeCond
func (t *NrfSubscriptionData_SubscrCond) MergeNfTypeCond(v NfTypeCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsServiceNameCond returns the union data inside the NrfSubscriptionData_SubscrCond as a ServiceNameCond
func (t NrfSubscriptionData_SubscrCond) AsServiceNameCond() (ServiceNameCond, error) {
	var body ServiceNameCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromServiceNameCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided ServiceNameCond
func (t *NrfSubscriptionData_SubscrCond) FromServiceNameCond(v ServiceNameCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeServiceNameCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided ServiceNameCond
func (t *NrfSubscriptionData_SubscrCond) MergeServiceNameCond(v ServiceNameCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmfCond returns the union data inside the NrfSubscriptionData_SubscrCond as a AmfCond
func (t NrfSubscriptionData_SubscrCond) AsAmfCond() (AmfCond, error) {
	var body AmfCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmfCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided AmfCond
func (t *NrfSubscriptionData_SubscrCond) FromAmfCond(v AmfCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmfCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided AmfCond
func (t *NrfSubscriptionData_SubscrCond) MergeAmfCond(v AmfCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGuamiListCond returns the union data inside the NrfSubscriptionData_SubscrCond as a GuamiListCond
func (t NrfSubscriptionData_SubscrCond) AsGuamiListCond() (GuamiListCond, error) {
	var body GuamiListCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGuamiListCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided GuamiListCond
func (t *NrfSubscriptionData_SubscrCond) FromGuamiListCond(v GuamiListCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGuamiListCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided GuamiListCond
func (t *NrfSubscriptionData_SubscrCond) MergeGuamiListCond(v GuamiListCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNetworkSliceCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NetworkSliceCond
func (t NrfSubscriptionData_SubscrCond) AsNetworkSliceCond() (NetworkSliceCond, error) {
	var body NetworkSliceCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNetworkSliceCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NetworkSliceCond
func (t *NrfSubscriptionData_SubscrCond) FromNetworkSliceCond(v NetworkSliceCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNetworkSliceCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NetworkSliceCond
func (t *NrfSubscriptionData_SubscrCond) MergeNetworkSliceCond(v NetworkSliceCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNfGroupCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NfGroupCond
func (t NrfSubscriptionData_SubscrCond) AsNfGroupCond() (NfGroupCond, error) {
	var body NfGroupCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfGroupCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NfGroupCond
func (t *NrfSubscriptionData_SubscrCond) FromNfGroupCond(v NfGroupCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfGroupCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NfGroupCond
func (t *NrfSubscriptionData_SubscrCond) MergeNfGroupCond(v NfGroupCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNfSetCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NfSetCond
func (t NrfSubscriptionData_SubscrCond) AsNfSetCond() (NfSetCond, error) {
	var body NfSetCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfSetCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NfSetCond
func (t *NrfSubscriptionData_SubscrCond) FromNfSetCond(v NfSetCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfSetCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NfSetCond
func (t *NrfSubscriptionData_SubscrCond) MergeNfSetCond(v NfSetCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNfServiceSetCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NfServiceSetCond
func (t NrfSubscriptionData_SubscrCond) AsNfServiceSetCond() (NfServiceSetCond, error) {
	var body NfServiceSetCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfServiceSetCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NfServiceSetCond
func (t *NrfSubscriptionData_SubscrCond) FromNfServiceSetCond(v NfServiceSetCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfServiceSetCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NfServiceSetCond
func (t *NrfSubscriptionData_SubscrCond) MergeNfServiceSetCond(v NfServiceSetCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpfCond returns the union data inside the NrfSubscriptionData_SubscrCond as a UpfCond
func (t NrfSubscriptionData_SubscrCond) AsUpfCond() (UpfCond, error) {
	var body UpfCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpfCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided UpfCond
func (t *NrfSubscriptionData_SubscrCond) FromUpfCond(v UpfCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpfCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided UpfCond
func (t *NrfSubscriptionData_SubscrCond) MergeUpfCond(v UpfCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScpDomainCond returns the union data inside the NrfSubscriptionData_SubscrCond as a ScpDomainCond
func (t NrfSubscriptionData_SubscrCond) AsScpDomainCond() (ScpDomainCond, error) {
	var body ScpDomainCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScpDomainCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided ScpDomainCond
func (t *NrfSubscriptionData_SubscrCond) FromScpDomainCond(v ScpDomainCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScpDomainCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided ScpDomainCond
func (t *NrfSubscriptionData_SubscrCond) MergeScpDomainCond(v ScpDomainCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNwdafCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NwdafCond
func (t NrfSubscriptionData_SubscrCond) AsNwdafCond() (NwdafCond, error) {
	var body NwdafCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNwdafCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NwdafCond
func (t *NrfSubscriptionData_SubscrCond) FromNwdafCond(v NwdafCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNwdafCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NwdafCond
func (t *NrfSubscriptionData_SubscrCond) MergeNwdafCond(v NwdafCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNefCond returns the union data inside the NrfSubscriptionData_SubscrCond as a NefCond
func (t NrfSubscriptionData_SubscrCond) AsNefCond() (NefCond, error) {
	var body NefCond
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNefCond overwrites any union data inside the NrfSubscriptionData_SubscrCond as the provided NefCond
func (t *NrfSubscriptionData_SubscrCond) FromNefCond(v NefCond) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNefCond performs a merge with any union data inside the NrfSubscriptionData_SubscrCond, using the provided NefCond
func (t *NrfSubscriptionData_SubscrCond) MergeNefCond(v NefCond) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NrfSubscriptionData_SubscrCond) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NrfSubscriptionData_SubscrCond) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

type N307ResponseHeaders struct {
	N3gppSbiTargetNfId *string
	Location           string
}
type N307JSONResponse struct {
	Body RedirectResponse

	Headers N307ResponseHeaders
}

type N308ResponseHeaders struct {
	N3gppSbiTargetNfId *string
	Location           string
}
type N308JSONResponse struct {
	Body RedirectResponse

	Headers N308ResponseHeaders
}

type N400ApplicationProblemPlusJSONResponse ProblemDetails

type N401ApplicationProblemPlusJSONResponse ProblemDetails

type N403ApplicationProblemPlusJSONResponse ProblemDetails

type N404ApplicationProblemPlusJSONResponse ProblemDetails

type N405Response struct {
}

type N406Response struct {
}

type N408ApplicationProblemPlusJSONResponse ProblemDetails

type N409ApplicationProblemPlusJSONResponse ProblemDetails

type N410ApplicationProblemPlusJSONResponse ProblemDetails

type N411ApplicationProblemPlusJSONResponse ProblemDetails

type N412ApplicationProblemPlusJSONResponse ProblemDetails

type N413ApplicationProblemPlusJSONResponse ProblemDetails

type N414ApplicationProblemPlusJSONResponse ProblemDetails

type N415ApplicationProblemPlusJSONResponse ProblemDetails

type N429ApplicationProblemPlusJSONResponse ProblemDetails

type N500ApplicationProblemPlusJSONResponse ProblemDetails

type N501ApplicationProblemPlusJSONResponse ProblemDetails

type N503ApplicationProblemPlusJSONResponse ProblemDetails

type N504ApplicationProblemPlusJSONResponse ProblemDetails

type DefaultApplicationProblemPlusJSONResponse ProblemDetails
