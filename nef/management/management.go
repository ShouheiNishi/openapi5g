// Package management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package management

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/pfd/management"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// PfdChangeNotification defines model for PfdChangeNotification.
type PfdChangeNotification struct {
	ApplicationId        externalRef0.ApplicationId `json:"applicationId"`
	PartialFlag          *bool                      `json:"partialFlag,omitempty"`
	Pfds                 []PfdContent               `json:"pfds,omitempty"`
	RemovalFlag          *bool                      `json:"removalFlag,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// PfdChangeReport defines model for PfdChangeReport.
type PfdChangeReport struct {
	ApplicationId        []externalRef0.ApplicationId `json:"applicationId"`
	PfdError             externalRef0.ProblemDetails  `json:"pfdError"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// PfdContent defines model for PfdContent.
type PfdContent struct {
	// DnProtocol Possible values are - DNS_QNAME: Identifies the DNS protocol and the question name in DNS query. - TLS_SNI: Identifies the Server Name Indication in TLS ClientHello message. - TLS_SAN: Identifies the Subject Alternative Name in TLS ServerCertificate message. - TSL_SCN: Identifies the Subject Common Name in TLS ServerCertificate message.
	DnProtocol *externalRef1.DomainNameProtocol `json:"dnProtocol,omitempty"`

	// DomainNames Indicates an FQDN or a regular expression as a domain name matching criteria.
	DomainNames []string `json:"domainNames,omitempty"`

	// FlowDescriptions Represents a 3-tuple with protocol, server ip and server port for UL/DL application traffic.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`

	// PfdId Identifies a PDF of an application identifier.
	PfdId *string `json:"pfdId,omitempty"`

	// Urls Indicates a URL or a regular expression which is used to match the significant parts of the URL.
	Urls                 []string               `json:"urls,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdDataForApp defines model for PfdDataForApp.
type PfdDataForApp struct {
	ApplicationId        externalRef0.ApplicationId      `json:"applicationId"`
	CachingTime          *externalRef0.DateTime          `json:"cachingTime,omitempty"`
	Pfds                 []PfdContent                    `json:"pfds"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// PfdSubscription defines model for PfdSubscription.
type PfdSubscription struct {
	ApplicationIds       []externalRef0.ApplicationId   `json:"applicationIds,omitempty"`
	NotifyUri            externalRef0.Uri               `json:"notifyUri"`
	SupportedFeatures    externalRef0.SupportedFeatures `json:"supportedFeatures"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// NnefPFDmanagementAllFetchParams defines parameters for NnefPFDmanagementAllFetch.
type NnefPFDmanagementAllFetchParams struct {
	// ApplicationIds The required application identifier(s) for the returned PFDs.
	ApplicationIds []externalRef0.ApplicationId `form:"application-ids" json:"application-ids"`

	// SupportedFeatures To filter irrelevant responses related to unsupported features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// NnefPFDmanagementIndAppFetchParams defines parameters for NnefPFDmanagementIndAppFetch.
type NnefPFDmanagementIndAppFetchParams struct {
	// SupportedFeatures To filter irrelevant responses related to unsupported features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// NnefPFDmanagementCreateSubscrJSONRequestBody defines body for NnefPFDmanagementCreateSubscr for application/json ContentType.
type NnefPFDmanagementCreateSubscrJSONRequestBody = PfdSubscription

// NnefPFDmanagementModifySubscrJSONRequestBody defines body for NnefPFDmanagementModifySubscr for application/json ContentType.
type NnefPFDmanagementModifySubscrJSONRequestBody = PfdSubscription

// Getter for additional properties for PfdChangeNotification. Returns the specified
// element and whether it was found
func (a PfdChangeNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdChangeNotification
func (a *PfdChangeNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdChangeNotification to handle AdditionalProperties
func (a *PfdChangeNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["partialFlag"]; found {
		err = json.Unmarshal(raw, &a.PartialFlag)
		if err != nil {
			return fmt.Errorf("error reading 'partialFlag': %w", err)
		}
		delete(object, "partialFlag")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["removalFlag"]; found {
		err = json.Unmarshal(raw, &a.RemovalFlag)
		if err != nil {
			return fmt.Errorf("error reading 'removalFlag': %w", err)
		}
		delete(object, "removalFlag")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdChangeNotification to handle AdditionalProperties
func (a PfdChangeNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	if a.PartialFlag != nil {
		object["partialFlag"], err = json.Marshal(a.PartialFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'partialFlag': %w", err)
		}
	}

	if len(a.Pfds) != 0 {
		object["pfds"], err = json.Marshal(a.Pfds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
		}
	}

	if a.RemovalFlag != nil {
		object["removalFlag"], err = json.Marshal(a.RemovalFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'removalFlag': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdChangeReport. Returns the specified
// element and whether it was found
func (a PfdChangeReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdChangeReport
func (a *PfdChangeReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdChangeReport to handle AdditionalProperties
func (a *PfdChangeReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["pfdError"]; found {
		err = json.Unmarshal(raw, &a.PfdError)
		if err != nil {
			return fmt.Errorf("error reading 'pfdError': %w", err)
		}
		delete(object, "pfdError")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdChangeReport to handle AdditionalProperties
func (a PfdChangeReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	object["pfdError"], err = json.Marshal(a.PfdError)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfdError': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdContent. Returns the specified
// element and whether it was found
func (a PfdContent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdContent
func (a *PfdContent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdContent to handle AdditionalProperties
func (a *PfdContent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnProtocol"]; found {
		err = json.Unmarshal(raw, &a.DnProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'dnProtocol': %w", err)
		}
		delete(object, "dnProtocol")
	}

	if raw, found := object["domainNames"]; found {
		err = json.Unmarshal(raw, &a.DomainNames)
		if err != nil {
			return fmt.Errorf("error reading 'domainNames': %w", err)
		}
		delete(object, "domainNames")
	}

	if raw, found := object["flowDescriptions"]; found {
		err = json.Unmarshal(raw, &a.FlowDescriptions)
		if err != nil {
			return fmt.Errorf("error reading 'flowDescriptions': %w", err)
		}
		delete(object, "flowDescriptions")
	}

	if raw, found := object["pfdId"]; found {
		err = json.Unmarshal(raw, &a.PfdId)
		if err != nil {
			return fmt.Errorf("error reading 'pfdId': %w", err)
		}
		delete(object, "pfdId")
	}

	if raw, found := object["urls"]; found {
		err = json.Unmarshal(raw, &a.Urls)
		if err != nil {
			return fmt.Errorf("error reading 'urls': %w", err)
		}
		delete(object, "urls")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdContent to handle AdditionalProperties
func (a PfdContent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DnProtocol != nil {
		object["dnProtocol"], err = json.Marshal(a.DnProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnProtocol': %w", err)
		}
	}

	if len(a.DomainNames) != 0 {
		object["domainNames"], err = json.Marshal(a.DomainNames)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'domainNames': %w", err)
		}
	}

	if len(a.FlowDescriptions) != 0 {
		object["flowDescriptions"], err = json.Marshal(a.FlowDescriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDescriptions': %w", err)
		}
	}

	if a.PfdId != nil {
		object["pfdId"], err = json.Marshal(a.PfdId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdId': %w", err)
		}
	}

	if len(a.Urls) != 0 {
		object["urls"], err = json.Marshal(a.Urls)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urls': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdDataForApp. Returns the specified
// element and whether it was found
func (a PfdDataForApp) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdDataForApp
func (a *PfdDataForApp) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdDataForApp to handle AdditionalProperties
func (a *PfdDataForApp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdDataForApp to handle AdditionalProperties
func (a PfdDataForApp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["pfds"], err = json.Marshal(a.Pfds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdSubscription. Returns the specified
// element and whether it was found
func (a PfdSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdSubscription
func (a *PfdSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdSubscription to handle AdditionalProperties
func (a *PfdSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationIds"]; found {
		err = json.Unmarshal(raw, &a.ApplicationIds)
		if err != nil {
			return fmt.Errorf("error reading 'applicationIds': %w", err)
		}
		delete(object, "applicationIds")
	}

	if raw, found := object["notifyUri"]; found {
		err = json.Unmarshal(raw, &a.NotifyUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifyUri': %w", err)
		}
		delete(object, "notifyUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdSubscription to handle AdditionalProperties
func (a PfdSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ApplicationIds) != 0 {
		object["applicationIds"], err = json.Marshal(a.ApplicationIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'applicationIds': %w", err)
		}
	}

	object["notifyUri"], err = json.Marshal(a.NotifyUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyUri': %w", err)
	}

	object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NnefPFDmanagementAllFetch request
	NnefPFDmanagementAllFetch(ctx context.Context, params *NnefPFDmanagementAllFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NnefPFDmanagementIndAppFetch request
	NnefPFDmanagementIndAppFetch(ctx context.Context, appId string, params *NnefPFDmanagementIndAppFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NnefPFDmanagementCreateSubscrWithBody request with any body
	NnefPFDmanagementCreateSubscrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NnefPFDmanagementCreateSubscr(ctx context.Context, body NnefPFDmanagementCreateSubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NnefPFDmanagementUnsubscribe request
	NnefPFDmanagementUnsubscribe(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NnefPFDmanagementModifySubscrWithBody request with any body
	NnefPFDmanagementModifySubscrWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NnefPFDmanagementModifySubscr(ctx context.Context, subscriptionId string, body NnefPFDmanagementModifySubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NnefPFDmanagementAllFetch(ctx context.Context, params *NnefPFDmanagementAllFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNnefPFDmanagementAllFetchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NnefPFDmanagementIndAppFetch(ctx context.Context, appId string, params *NnefPFDmanagementIndAppFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNnefPFDmanagementIndAppFetchRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NnefPFDmanagementCreateSubscrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNnefPFDmanagementCreateSubscrRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NnefPFDmanagementCreateSubscr(ctx context.Context, body NnefPFDmanagementCreateSubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNnefPFDmanagementCreateSubscrRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NnefPFDmanagementUnsubscribe(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNnefPFDmanagementUnsubscribeRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NnefPFDmanagementModifySubscrWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNnefPFDmanagementModifySubscrRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NnefPFDmanagementModifySubscr(ctx context.Context, subscriptionId string, body NnefPFDmanagementModifySubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNnefPFDmanagementModifySubscrRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNnefPFDmanagementAllFetchRequest generates requests for NnefPFDmanagementAllFetch
func NewNnefPFDmanagementAllFetchRequest(server string, params *NnefPFDmanagementAllFetchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application-ids", runtime.ParamLocationQuery, params.ApplicationIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNnefPFDmanagementIndAppFetchRequest generates requests for NnefPFDmanagementIndAppFetch
func NewNnefPFDmanagementIndAppFetchRequest(server string, appId string, params *NnefPFDmanagementIndAppFetchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNnefPFDmanagementCreateSubscrRequest calls the generic NnefPFDmanagementCreateSubscr builder with application/json body
func NewNnefPFDmanagementCreateSubscrRequest(server string, body NnefPFDmanagementCreateSubscrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNnefPFDmanagementCreateSubscrRequestWithBody(server, "application/json", bodyReader)
}

// NewNnefPFDmanagementCreateSubscrRequestWithBody generates requests for NnefPFDmanagementCreateSubscr with any type of body
func NewNnefPFDmanagementCreateSubscrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNnefPFDmanagementUnsubscribeRequest generates requests for NnefPFDmanagementUnsubscribe
func NewNnefPFDmanagementUnsubscribeRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNnefPFDmanagementModifySubscrRequest calls the generic NnefPFDmanagementModifySubscr builder with application/json body
func NewNnefPFDmanagementModifySubscrRequest(server string, subscriptionId string, body NnefPFDmanagementModifySubscrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNnefPFDmanagementModifySubscrRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewNnefPFDmanagementModifySubscrRequestWithBody generates requests for NnefPFDmanagementModifySubscr with any type of body
func NewNnefPFDmanagementModifySubscrRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NnefPFDmanagementAllFetchWithResponse request
	NnefPFDmanagementAllFetchWithResponse(ctx context.Context, params *NnefPFDmanagementAllFetchParams, reqEditors ...RequestEditorFn) (*NnefPFDmanagementAllFetchResponse, error)

	// NnefPFDmanagementIndAppFetchWithResponse request
	NnefPFDmanagementIndAppFetchWithResponse(ctx context.Context, appId string, params *NnefPFDmanagementIndAppFetchParams, reqEditors ...RequestEditorFn) (*NnefPFDmanagementIndAppFetchResponse, error)

	// NnefPFDmanagementCreateSubscrWithBodyWithResponse request with any body
	NnefPFDmanagementCreateSubscrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NnefPFDmanagementCreateSubscrResponse, error)

	NnefPFDmanagementCreateSubscrWithResponse(ctx context.Context, body NnefPFDmanagementCreateSubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*NnefPFDmanagementCreateSubscrResponse, error)

	// NnefPFDmanagementUnsubscribeWithResponse request
	NnefPFDmanagementUnsubscribeWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*NnefPFDmanagementUnsubscribeResponse, error)

	// NnefPFDmanagementModifySubscrWithBodyWithResponse request with any body
	NnefPFDmanagementModifySubscrWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NnefPFDmanagementModifySubscrResponse, error)

	NnefPFDmanagementModifySubscrWithResponse(ctx context.Context, subscriptionId string, body NnefPFDmanagementModifySubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*NnefPFDmanagementModifySubscrResponse, error)
}

type NnefPFDmanagementAllFetchResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]PfdDataForApp
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NnefPFDmanagementAllFetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NnefPFDmanagementAllFetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NnefPFDmanagementIndAppFetchResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdDataForApp
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NnefPFDmanagementIndAppFetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NnefPFDmanagementIndAppFetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NnefPFDmanagementCreateSubscrResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *PfdSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NnefPFDmanagementCreateSubscrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NnefPFDmanagementCreateSubscrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NnefPFDmanagementUnsubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NnefPFDmanagementUnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NnefPFDmanagementUnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NnefPFDmanagementModifySubscrResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdSubscription
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r NnefPFDmanagementModifySubscrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NnefPFDmanagementModifySubscrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NnefPFDmanagementAllFetchWithResponse request returning *NnefPFDmanagementAllFetchResponse
func (c *ClientWithResponses) NnefPFDmanagementAllFetchWithResponse(ctx context.Context, params *NnefPFDmanagementAllFetchParams, reqEditors ...RequestEditorFn) (*NnefPFDmanagementAllFetchResponse, error) {
	rsp, err := c.NnefPFDmanagementAllFetch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNnefPFDmanagementAllFetchResponse(rsp)
}

// NnefPFDmanagementIndAppFetchWithResponse request returning *NnefPFDmanagementIndAppFetchResponse
func (c *ClientWithResponses) NnefPFDmanagementIndAppFetchWithResponse(ctx context.Context, appId string, params *NnefPFDmanagementIndAppFetchParams, reqEditors ...RequestEditorFn) (*NnefPFDmanagementIndAppFetchResponse, error) {
	rsp, err := c.NnefPFDmanagementIndAppFetch(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNnefPFDmanagementIndAppFetchResponse(rsp)
}

// NnefPFDmanagementCreateSubscrWithBodyWithResponse request with arbitrary body returning *NnefPFDmanagementCreateSubscrResponse
func (c *ClientWithResponses) NnefPFDmanagementCreateSubscrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NnefPFDmanagementCreateSubscrResponse, error) {
	rsp, err := c.NnefPFDmanagementCreateSubscrWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNnefPFDmanagementCreateSubscrResponse(rsp)
}

func (c *ClientWithResponses) NnefPFDmanagementCreateSubscrWithResponse(ctx context.Context, body NnefPFDmanagementCreateSubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*NnefPFDmanagementCreateSubscrResponse, error) {
	rsp, err := c.NnefPFDmanagementCreateSubscr(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNnefPFDmanagementCreateSubscrResponse(rsp)
}

// NnefPFDmanagementUnsubscribeWithResponse request returning *NnefPFDmanagementUnsubscribeResponse
func (c *ClientWithResponses) NnefPFDmanagementUnsubscribeWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*NnefPFDmanagementUnsubscribeResponse, error) {
	rsp, err := c.NnefPFDmanagementUnsubscribe(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNnefPFDmanagementUnsubscribeResponse(rsp)
}

// NnefPFDmanagementModifySubscrWithBodyWithResponse request with arbitrary body returning *NnefPFDmanagementModifySubscrResponse
func (c *ClientWithResponses) NnefPFDmanagementModifySubscrWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NnefPFDmanagementModifySubscrResponse, error) {
	rsp, err := c.NnefPFDmanagementModifySubscrWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNnefPFDmanagementModifySubscrResponse(rsp)
}

func (c *ClientWithResponses) NnefPFDmanagementModifySubscrWithResponse(ctx context.Context, subscriptionId string, body NnefPFDmanagementModifySubscrJSONRequestBody, reqEditors ...RequestEditorFn) (*NnefPFDmanagementModifySubscrResponse, error) {
	rsp, err := c.NnefPFDmanagementModifySubscr(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNnefPFDmanagementModifySubscrResponse(rsp)
}

// ParseNnefPFDmanagementAllFetchResponse parses an HTTP response from a NnefPFDmanagementAllFetchWithResponse call
func ParseNnefPFDmanagementAllFetchResponse(rsp *http.Response) (*NnefPFDmanagementAllFetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NnefPFDmanagementAllFetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PfdDataForApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNnefPFDmanagementIndAppFetchResponse parses an HTTP response from a NnefPFDmanagementIndAppFetchWithResponse call
func ParseNnefPFDmanagementIndAppFetchResponse(rsp *http.Response) (*NnefPFDmanagementIndAppFetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NnefPFDmanagementIndAppFetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdDataForApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNnefPFDmanagementCreateSubscrResponse parses an HTTP response from a NnefPFDmanagementCreateSubscrWithResponse call
func ParseNnefPFDmanagementCreateSubscrResponse(rsp *http.Response) (*NnefPFDmanagementCreateSubscrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NnefPFDmanagementCreateSubscrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PfdSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNnefPFDmanagementUnsubscribeResponse parses an HTTP response from a NnefPFDmanagementUnsubscribeWithResponse call
func ParseNnefPFDmanagementUnsubscribeResponse(rsp *http.Response) (*NnefPFDmanagementUnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NnefPFDmanagementUnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNnefPFDmanagementModifySubscrResponse parses an HTTP response from a NnefPFDmanagementModifySubscrWithResponse call
func ParseNnefPFDmanagementModifySubscrResponse(rsp *http.Response) (*NnefPFDmanagementModifySubscrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NnefPFDmanagementModifySubscrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve PFDs for all applications or for one or multiple applications with query parameter.
	// (GET /applications)
	NnefPFDmanagementAllFetch(c *gin.Context, params NnefPFDmanagementAllFetchParams)
	// Retrieve the PFD for an application.
	// (GET /applications/{appId})
	NnefPFDmanagementIndAppFetch(c *gin.Context, appId string, params NnefPFDmanagementIndAppFetchParams)
	// Subscribe the notification of PFD changes.
	// (POST /subscriptions)
	NnefPFDmanagementCreateSubscr(c *gin.Context)
	// Delete a subscription of PFD change notification.
	// (DELETE /subscriptions/{subscriptionId})
	NnefPFDmanagementUnsubscribe(c *gin.Context, subscriptionId string)
	// Updates/replaces an existing subscription resource
	// (PUT /subscriptions/{subscriptionId})
	NnefPFDmanagementModifySubscr(c *gin.Context, subscriptionId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// NnefPFDmanagementAllFetch operation middleware
func (siw *ServerInterfaceWrapper) NnefPFDmanagementAllFetch(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnef-pfdmanagement"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NnefPFDmanagementAllFetchParams

	// ------------- Required query parameter "application-ids" -------------

	if paramValue := c.Query("application-ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument application-ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "application-ids", c.Request.URL.Query(), &params.ApplicationIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter application-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NnefPFDmanagementAllFetch(c, params)
}

// NnefPFDmanagementIndAppFetch operation middleware
func (siw *ServerInterfaceWrapper) NnefPFDmanagementIndAppFetch(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnef-pfdmanagement"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NnefPFDmanagementIndAppFetchParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NnefPFDmanagementIndAppFetch(c, appId, params)
}

// NnefPFDmanagementCreateSubscr operation middleware
func (siw *ServerInterfaceWrapper) NnefPFDmanagementCreateSubscr(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnef-pfdmanagement"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NnefPFDmanagementCreateSubscr(c)
}

// NnefPFDmanagementUnsubscribe operation middleware
func (siw *ServerInterfaceWrapper) NnefPFDmanagementUnsubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnef-pfdmanagement"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NnefPFDmanagementUnsubscribe(c, subscriptionId)
}

// NnefPFDmanagementModifySubscr operation middleware
func (siw *ServerInterfaceWrapper) NnefPFDmanagementModifySubscr(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnef-pfdmanagement"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NnefPFDmanagementModifySubscr(c, subscriptionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/applications", wrapper.NnefPFDmanagementAllFetch)
	router.GET(options.BaseURL+"/applications/:appId", wrapper.NnefPFDmanagementIndAppFetch)
	router.POST(options.BaseURL+"/subscriptions", wrapper.NnefPFDmanagementCreateSubscr)
	router.DELETE(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.NnefPFDmanagementUnsubscribe)
	router.PUT(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.NnefPFDmanagementModifySubscr)
}

type NnefPFDmanagementAllFetchRequestObject struct {
	Params NnefPFDmanagementAllFetchParams
}

type NnefPFDmanagementAllFetchResponseObject interface {
	VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error
}

type NnefPFDmanagementAllFetch200JSONResponse []PfdDataForApp

func (response NnefPFDmanagementAllFetch200JSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch400ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch401ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch403ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch404ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch406Response externalRef0.N406Response

func (response NnefPFDmanagementAllFetch406Response) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type NnefPFDmanagementAllFetch414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch414ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch429ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch500ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetch503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementAllFetch503ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementAllFetchdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NnefPFDmanagementAllFetchdefaultApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementAllFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementIndAppFetchRequestObject struct {
	AppId  string `json:"appId"`
	Params NnefPFDmanagementIndAppFetchParams
}

type NnefPFDmanagementIndAppFetchResponseObject interface {
	VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error
}

type NnefPFDmanagementIndAppFetch200JSONResponse PfdDataForApp

func (response NnefPFDmanagementIndAppFetch200JSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NnefPFDmanagementIndAppFetch307JSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementIndAppFetch308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NnefPFDmanagementIndAppFetch308JSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementIndAppFetch400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch400ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch401ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch403ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch404ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch406Response externalRef0.N406Response

func (response NnefPFDmanagementIndAppFetch406Response) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type NnefPFDmanagementIndAppFetch414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch414ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch429ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch500ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetch503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementIndAppFetch503ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementIndAppFetchdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NnefPFDmanagementIndAppFetchdefaultApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementIndAppFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementCreateSubscrRequestObject struct {
	Body *NnefPFDmanagementCreateSubscrJSONRequestBody
}

type NnefPFDmanagementCreateSubscrResponseObject interface {
	VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error
}

type NnefPFDmanagementCreateSubscr201ResponseHeaders struct {
	Location string
}

type NnefPFDmanagementCreateSubscr201JSONResponse struct {
	Body    PfdSubscription
	Headers NnefPFDmanagementCreateSubscr201ResponseHeaders
}

func (response NnefPFDmanagementCreateSubscr201JSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementCreateSubscr400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr400ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr401ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr403ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr404ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr411ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr413ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr415ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr429ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr500ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscr503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementCreateSubscr503ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementCreateSubscrdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NnefPFDmanagementCreateSubscrdefaultApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementCreateSubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementUnsubscribeRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type NnefPFDmanagementUnsubscribeResponseObject interface {
	VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error
}

type NnefPFDmanagementUnsubscribe204Response struct {
}

func (response NnefPFDmanagementUnsubscribe204Response) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type NnefPFDmanagementUnsubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NnefPFDmanagementUnsubscribe307JSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementUnsubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NnefPFDmanagementUnsubscribe308JSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementUnsubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementUnsubscribe400ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementUnsubscribe401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementUnsubscribe401ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementUnsubscribe403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementUnsubscribe403ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementUnsubscribe404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementUnsubscribe404ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementUnsubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementUnsubscribe429ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementUnsubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementUnsubscribe500ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementUnsubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementUnsubscribe503ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementUnsubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NnefPFDmanagementUnsubscribedefaultApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementModifySubscrRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Body           *NnefPFDmanagementModifySubscrJSONRequestBody
}

type NnefPFDmanagementModifySubscrResponseObject interface {
	VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error
}

type NnefPFDmanagementModifySubscr200JSONResponse PfdSubscription

func (response NnefPFDmanagementModifySubscr200JSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NnefPFDmanagementModifySubscr307JSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementModifySubscr308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NnefPFDmanagementModifySubscr308JSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NnefPFDmanagementModifySubscr400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr400ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr401ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr403ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr404ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr411ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr413ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr415ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr429ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr500ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscr503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NnefPFDmanagementModifySubscr503ApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type NnefPFDmanagementModifySubscrdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NnefPFDmanagementModifySubscrdefaultApplicationProblemPlusJSONResponse) VisitNnefPFDmanagementModifySubscrResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve PFDs for all applications or for one or multiple applications with query parameter.
	// (GET /applications)
	NnefPFDmanagementAllFetch(ctx context.Context, request NnefPFDmanagementAllFetchRequestObject) (NnefPFDmanagementAllFetchResponseObject, error)
	// Retrieve the PFD for an application.
	// (GET /applications/{appId})
	NnefPFDmanagementIndAppFetch(ctx context.Context, request NnefPFDmanagementIndAppFetchRequestObject) (NnefPFDmanagementIndAppFetchResponseObject, error)
	// Subscribe the notification of PFD changes.
	// (POST /subscriptions)
	NnefPFDmanagementCreateSubscr(ctx context.Context, request NnefPFDmanagementCreateSubscrRequestObject) (NnefPFDmanagementCreateSubscrResponseObject, error)
	// Delete a subscription of PFD change notification.
	// (DELETE /subscriptions/{subscriptionId})
	NnefPFDmanagementUnsubscribe(ctx context.Context, request NnefPFDmanagementUnsubscribeRequestObject) (NnefPFDmanagementUnsubscribeResponseObject, error)
	// Updates/replaces an existing subscription resource
	// (PUT /subscriptions/{subscriptionId})
	NnefPFDmanagementModifySubscr(ctx context.Context, request NnefPFDmanagementModifySubscrRequestObject) (NnefPFDmanagementModifySubscrResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// NnefPFDmanagementAllFetch operation middleware
func (sh *strictHandler) NnefPFDmanagementAllFetch(ctx *gin.Context, params NnefPFDmanagementAllFetchParams) {
	var request NnefPFDmanagementAllFetchRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NnefPFDmanagementAllFetch(ctx, request.(NnefPFDmanagementAllFetchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NnefPFDmanagementAllFetch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NnefPFDmanagementAllFetchResponseObject); ok {
		if err := validResponse.VisitNnefPFDmanagementAllFetchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NnefPFDmanagementIndAppFetch operation middleware
func (sh *strictHandler) NnefPFDmanagementIndAppFetch(ctx *gin.Context, appId string, params NnefPFDmanagementIndAppFetchParams) {
	var request NnefPFDmanagementIndAppFetchRequestObject

	request.AppId = appId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NnefPFDmanagementIndAppFetch(ctx, request.(NnefPFDmanagementIndAppFetchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NnefPFDmanagementIndAppFetch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NnefPFDmanagementIndAppFetchResponseObject); ok {
		if err := validResponse.VisitNnefPFDmanagementIndAppFetchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NnefPFDmanagementCreateSubscr operation middleware
func (sh *strictHandler) NnefPFDmanagementCreateSubscr(ctx *gin.Context) {
	var request NnefPFDmanagementCreateSubscrRequestObject

	var body NnefPFDmanagementCreateSubscrJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NnefPFDmanagementCreateSubscr(ctx, request.(NnefPFDmanagementCreateSubscrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NnefPFDmanagementCreateSubscr")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NnefPFDmanagementCreateSubscrResponseObject); ok {
		if err := validResponse.VisitNnefPFDmanagementCreateSubscrResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NnefPFDmanagementUnsubscribe operation middleware
func (sh *strictHandler) NnefPFDmanagementUnsubscribe(ctx *gin.Context, subscriptionId string) {
	var request NnefPFDmanagementUnsubscribeRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NnefPFDmanagementUnsubscribe(ctx, request.(NnefPFDmanagementUnsubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NnefPFDmanagementUnsubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NnefPFDmanagementUnsubscribeResponseObject); ok {
		if err := validResponse.VisitNnefPFDmanagementUnsubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NnefPFDmanagementModifySubscr operation middleware
func (sh *strictHandler) NnefPFDmanagementModifySubscr(ctx *gin.Context, subscriptionId string) {
	var request NnefPFDmanagementModifySubscrRequestObject

	request.SubscriptionId = subscriptionId

	var body NnefPFDmanagementModifySubscrJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NnefPFDmanagementModifySubscr(ctx, request.(NnefPFDmanagementModifySubscrRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NnefPFDmanagementModifySubscr")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NnefPFDmanagementModifySubscrResponseObject); ok {
		if err := validResponse.VisitNnefPFDmanagementModifySubscrResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
