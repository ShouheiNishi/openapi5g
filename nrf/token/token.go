// Package token provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package token

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/nrf/management"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for AccessTokenErrError.
const (
	InvalidClient        AccessTokenErrError = "invalid_client"
	InvalidGrant         AccessTokenErrError = "invalid_grant"
	InvalidRequest       AccessTokenErrError = "invalid_request"
	InvalidScope         AccessTokenErrError = "invalid_scope"
	UnauthorizedClient   AccessTokenErrError = "unauthorized_client"
	UnsupportedGrantType AccessTokenErrError = "unsupported_grant_type"
)

// Defines values for AccessTokenReqGrantType.
const (
	ClientCredentials AccessTokenReqGrantType = "client_credentials"
)

// Defines values for AccessTokenRspTokenType.
const (
	Bearer AccessTokenRspTokenType = "Bearer"
)

// AccessTokenClaims The claims data structure for the access token
type AccessTokenClaims struct {
	Aud                  AccessTokenClaims_Aud     `json:"aud"`
	ConsumerPlmnId       *externalRef0.PlmnId      `json:"consumerPlmnId,omitempty"`
	Exp                  int                       `json:"exp"`
	Iss                  externalRef0.NfInstanceId `json:"iss"`
	ProducerNfSetId      *externalRef0.NfSetId     `json:"producerNfSetId,omitempty"`
	ProducerNsiList      *[]string                 `json:"producerNsiList,omitempty"`
	ProducerPlmnId       *externalRef0.PlmnId      `json:"producerPlmnId,omitempty"`
	ProducerSnssaiList   *[]externalRef0.Snssai    `json:"producerSnssaiList,omitempty"`
	Scope                string                    `json:"scope"`
	Sub                  externalRef0.NfInstanceId `json:"sub"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// AccessTokenClaimsAud1 defines model for .
type AccessTokenClaimsAud1 = []externalRef0.NfInstanceId

// AccessTokenClaims_Aud defines model for AccessTokenClaims.Aud.
type AccessTokenClaims_Aud struct {
	union json.RawMessage
}

// AccessTokenErr Error returned in the access token response message
type AccessTokenErr struct {
	Error                AccessTokenErrError    `json:"error"`
	ErrorDescription     *string                `json:"error_description,omitempty"`
	ErrorUri             *string                `json:"error_uri,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccessTokenErrError defines model for AccessTokenErr.Error.
type AccessTokenErrError string

// AccessTokenReq Contains information related to the access token request
type AccessTokenReq struct {
	GrantType    AccessTokenReqGrantType   `json:"grant_type"`
	NfInstanceId externalRef0.NfInstanceId `json:"nfInstanceId"`

	// NfType NF types known to NRF
	NfType *externalRef1.NFType `json:"nfType,omitempty"`

	// RequesterFqdn Fully Qualified Domain Name
	RequesterFqdn        *externalRef1.Fqdn           `json:"requesterFqdn,omitempty"`
	RequesterPlmn        *externalRef0.PlmnId         `json:"requesterPlmn,omitempty"`
	RequesterPlmnList    *[]externalRef0.PlmnId       `json:"requesterPlmnList,omitempty"`
	RequesterSnpnList    *[]externalRef0.PlmnIdNid    `json:"requesterSnpnList,omitempty"`
	RequesterSnssaiList  *[]externalRef0.Snssai       `json:"requesterSnssaiList,omitempty"`
	Scope                string                       `json:"scope"`
	TargetNfInstanceId   *externalRef0.NfInstanceId   `json:"targetNfInstanceId,omitempty"`
	TargetNfServiceSetId *externalRef0.NfServiceSetId `json:"targetNfServiceSetId,omitempty"`
	TargetNfSetId        *externalRef0.NfSetId        `json:"targetNfSetId,omitempty"`

	// TargetNfType NF types known to NRF
	TargetNfType         *externalRef1.NFType   `json:"targetNfType,omitempty"`
	TargetNsiList        *[]string              `json:"targetNsiList,omitempty"`
	TargetPlmn           *externalRef0.PlmnId   `json:"targetPlmn,omitempty"`
	TargetSnssaiList     *[]externalRef0.Snssai `json:"targetSnssaiList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccessTokenReqGrantType defines model for AccessTokenReq.GrantType.
type AccessTokenReqGrantType string

// AccessTokenRsp Contains information related to the access token response
type AccessTokenRsp struct {
	// AccessToken JWS Compact Serialized representation of JWS signed JSON object (AccessTokenClaims)
	AccessToken          string                  `json:"access_token"`
	ExpiresIn            *int                    `json:"expires_in,omitempty"`
	Scope                *string                 `json:"scope,omitempty"`
	TokenType            AccessTokenRspTokenType `json:"token_type"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// AccessTokenRspTokenType defines model for AccessTokenRsp.TokenType.
type AccessTokenRspTokenType string

// AccessTokenRequestParams defines parameters for AccessTokenRequest.
type AccessTokenRequestParams struct {
	// ContentEncoding Content-Encoding, described in IETF RFC 7231
	ContentEncoding *string `json:"Content-Encoding,omitempty"`

	// AcceptEncoding Accept-Encoding, described in IETF RFC 7231
	AcceptEncoding *string `json:"Accept-Encoding,omitempty"`
}

// AccessTokenRequestFormdataRequestBody defines body for AccessTokenRequest for application/x-www-form-urlencoded ContentType.
type AccessTokenRequestFormdataRequestBody = AccessTokenReq

// Getter for additional properties for AccessTokenClaims. Returns the specified
// element and whether it was found
func (a AccessTokenClaims) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessTokenClaims
func (a *AccessTokenClaims) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessTokenClaims to handle AdditionalProperties
func (a *AccessTokenClaims) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aud"]; found {
		err = json.Unmarshal(raw, &a.Aud)
		if err != nil {
			return fmt.Errorf("error reading 'aud': %w", err)
		}
		delete(object, "aud")
	}

	if raw, found := object["consumerPlmnId"]; found {
		err = json.Unmarshal(raw, &a.ConsumerPlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'consumerPlmnId': %w", err)
		}
		delete(object, "consumerPlmnId")
	}

	if raw, found := object["exp"]; found {
		err = json.Unmarshal(raw, &a.Exp)
		if err != nil {
			return fmt.Errorf("error reading 'exp': %w", err)
		}
		delete(object, "exp")
	}

	if raw, found := object["iss"]; found {
		err = json.Unmarshal(raw, &a.Iss)
		if err != nil {
			return fmt.Errorf("error reading 'iss': %w", err)
		}
		delete(object, "iss")
	}

	if raw, found := object["producerNfSetId"]; found {
		err = json.Unmarshal(raw, &a.ProducerNfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'producerNfSetId': %w", err)
		}
		delete(object, "producerNfSetId")
	}

	if raw, found := object["producerNsiList"]; found {
		err = json.Unmarshal(raw, &a.ProducerNsiList)
		if err != nil {
			return fmt.Errorf("error reading 'producerNsiList': %w", err)
		}
		delete(object, "producerNsiList")
	}

	if raw, found := object["producerPlmnId"]; found {
		err = json.Unmarshal(raw, &a.ProducerPlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'producerPlmnId': %w", err)
		}
		delete(object, "producerPlmnId")
	}

	if raw, found := object["producerSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.ProducerSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'producerSnssaiList': %w", err)
		}
		delete(object, "producerSnssaiList")
	}

	if raw, found := object["scope"]; found {
		err = json.Unmarshal(raw, &a.Scope)
		if err != nil {
			return fmt.Errorf("error reading 'scope': %w", err)
		}
		delete(object, "scope")
	}

	if raw, found := object["sub"]; found {
		err = json.Unmarshal(raw, &a.Sub)
		if err != nil {
			return fmt.Errorf("error reading 'sub': %w", err)
		}
		delete(object, "sub")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessTokenClaims to handle AdditionalProperties
func (a AccessTokenClaims) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["aud"], err = json.Marshal(a.Aud)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'aud': %w", err)
	}

	if a.ConsumerPlmnId != nil {
		object["consumerPlmnId"], err = json.Marshal(a.ConsumerPlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'consumerPlmnId': %w", err)
		}
	}

	object["exp"], err = json.Marshal(a.Exp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'exp': %w", err)
	}

	object["iss"], err = json.Marshal(a.Iss)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'iss': %w", err)
	}

	if a.ProducerNfSetId != nil {
		object["producerNfSetId"], err = json.Marshal(a.ProducerNfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'producerNfSetId': %w", err)
		}
	}

	if a.ProducerNsiList != nil {
		object["producerNsiList"], err = json.Marshal(a.ProducerNsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'producerNsiList': %w", err)
		}
	}

	if a.ProducerPlmnId != nil {
		object["producerPlmnId"], err = json.Marshal(a.ProducerPlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'producerPlmnId': %w", err)
		}
	}

	if a.ProducerSnssaiList != nil {
		object["producerSnssaiList"], err = json.Marshal(a.ProducerSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'producerSnssaiList': %w", err)
		}
	}

	object["scope"], err = json.Marshal(a.Scope)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scope': %w", err)
	}

	object["sub"], err = json.Marshal(a.Sub)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sub': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessTokenErr. Returns the specified
// element and whether it was found
func (a AccessTokenErr) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessTokenErr
func (a *AccessTokenErr) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessTokenErr to handle AdditionalProperties
func (a *AccessTokenErr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["error_description"]; found {
		err = json.Unmarshal(raw, &a.ErrorDescription)
		if err != nil {
			return fmt.Errorf("error reading 'error_description': %w", err)
		}
		delete(object, "error_description")
	}

	if raw, found := object["error_uri"]; found {
		err = json.Unmarshal(raw, &a.ErrorUri)
		if err != nil {
			return fmt.Errorf("error reading 'error_uri': %w", err)
		}
		delete(object, "error_uri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessTokenErr to handle AdditionalProperties
func (a AccessTokenErr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.ErrorDescription != nil {
		object["error_description"], err = json.Marshal(a.ErrorDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error_description': %w", err)
		}
	}

	if a.ErrorUri != nil {
		object["error_uri"], err = json.Marshal(a.ErrorUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error_uri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessTokenReq. Returns the specified
// element and whether it was found
func (a AccessTokenReq) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessTokenReq
func (a *AccessTokenReq) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessTokenReq to handle AdditionalProperties
func (a *AccessTokenReq) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["grant_type"]; found {
		err = json.Unmarshal(raw, &a.GrantType)
		if err != nil {
			return fmt.Errorf("error reading 'grant_type': %w", err)
		}
		delete(object, "grant_type")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["nfType"]; found {
		err = json.Unmarshal(raw, &a.NfType)
		if err != nil {
			return fmt.Errorf("error reading 'nfType': %w", err)
		}
		delete(object, "nfType")
	}

	if raw, found := object["requesterFqdn"]; found {
		err = json.Unmarshal(raw, &a.RequesterFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'requesterFqdn': %w", err)
		}
		delete(object, "requesterFqdn")
	}

	if raw, found := object["requesterPlmn"]; found {
		err = json.Unmarshal(raw, &a.RequesterPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'requesterPlmn': %w", err)
		}
		delete(object, "requesterPlmn")
	}

	if raw, found := object["requesterPlmnList"]; found {
		err = json.Unmarshal(raw, &a.RequesterPlmnList)
		if err != nil {
			return fmt.Errorf("error reading 'requesterPlmnList': %w", err)
		}
		delete(object, "requesterPlmnList")
	}

	if raw, found := object["requesterSnpnList"]; found {
		err = json.Unmarshal(raw, &a.RequesterSnpnList)
		if err != nil {
			return fmt.Errorf("error reading 'requesterSnpnList': %w", err)
		}
		delete(object, "requesterSnpnList")
	}

	if raw, found := object["requesterSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.RequesterSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'requesterSnssaiList': %w", err)
		}
		delete(object, "requesterSnssaiList")
	}

	if raw, found := object["scope"]; found {
		err = json.Unmarshal(raw, &a.Scope)
		if err != nil {
			return fmt.Errorf("error reading 'scope': %w", err)
		}
		delete(object, "scope")
	}

	if raw, found := object["targetNfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.TargetNfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfInstanceId': %w", err)
		}
		delete(object, "targetNfInstanceId")
	}

	if raw, found := object["targetNfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.TargetNfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfServiceSetId': %w", err)
		}
		delete(object, "targetNfServiceSetId")
	}

	if raw, found := object["targetNfSetId"]; found {
		err = json.Unmarshal(raw, &a.TargetNfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfSetId': %w", err)
		}
		delete(object, "targetNfSetId")
	}

	if raw, found := object["targetNfType"]; found {
		err = json.Unmarshal(raw, &a.TargetNfType)
		if err != nil {
			return fmt.Errorf("error reading 'targetNfType': %w", err)
		}
		delete(object, "targetNfType")
	}

	if raw, found := object["targetNsiList"]; found {
		err = json.Unmarshal(raw, &a.TargetNsiList)
		if err != nil {
			return fmt.Errorf("error reading 'targetNsiList': %w", err)
		}
		delete(object, "targetNsiList")
	}

	if raw, found := object["targetPlmn"]; found {
		err = json.Unmarshal(raw, &a.TargetPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'targetPlmn': %w", err)
		}
		delete(object, "targetPlmn")
	}

	if raw, found := object["targetSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.TargetSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'targetSnssaiList': %w", err)
		}
		delete(object, "targetSnssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessTokenReq to handle AdditionalProperties
func (a AccessTokenReq) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["grant_type"], err = json.Marshal(a.GrantType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'grant_type': %w", err)
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.NfType != nil {
		object["nfType"], err = json.Marshal(a.NfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfType': %w", err)
		}
	}

	if a.RequesterFqdn != nil {
		object["requesterFqdn"], err = json.Marshal(a.RequesterFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterFqdn': %w", err)
		}
	}

	if a.RequesterPlmn != nil {
		object["requesterPlmn"], err = json.Marshal(a.RequesterPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterPlmn': %w", err)
		}
	}

	if a.RequesterPlmnList != nil {
		object["requesterPlmnList"], err = json.Marshal(a.RequesterPlmnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterPlmnList': %w", err)
		}
	}

	if a.RequesterSnpnList != nil {
		object["requesterSnpnList"], err = json.Marshal(a.RequesterSnpnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterSnpnList': %w", err)
		}
	}

	if a.RequesterSnssaiList != nil {
		object["requesterSnssaiList"], err = json.Marshal(a.RequesterSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requesterSnssaiList': %w", err)
		}
	}

	object["scope"], err = json.Marshal(a.Scope)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scope': %w", err)
	}

	if a.TargetNfInstanceId != nil {
		object["targetNfInstanceId"], err = json.Marshal(a.TargetNfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfInstanceId': %w", err)
		}
	}

	if a.TargetNfServiceSetId != nil {
		object["targetNfServiceSetId"], err = json.Marshal(a.TargetNfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfServiceSetId': %w", err)
		}
	}

	if a.TargetNfSetId != nil {
		object["targetNfSetId"], err = json.Marshal(a.TargetNfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfSetId': %w", err)
		}
	}

	if a.TargetNfType != nil {
		object["targetNfType"], err = json.Marshal(a.TargetNfType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNfType': %w", err)
		}
	}

	if a.TargetNsiList != nil {
		object["targetNsiList"], err = json.Marshal(a.TargetNsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetNsiList': %w", err)
		}
	}

	if a.TargetPlmn != nil {
		object["targetPlmn"], err = json.Marshal(a.TargetPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetPlmn': %w", err)
		}
	}

	if a.TargetSnssaiList != nil {
		object["targetSnssaiList"], err = json.Marshal(a.TargetSnssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetSnssaiList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessTokenRsp. Returns the specified
// element and whether it was found
func (a AccessTokenRsp) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessTokenRsp
func (a *AccessTokenRsp) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessTokenRsp to handle AdditionalProperties
func (a *AccessTokenRsp) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["access_token"]; found {
		err = json.Unmarshal(raw, &a.AccessToken)
		if err != nil {
			return fmt.Errorf("error reading 'access_token': %w", err)
		}
		delete(object, "access_token")
	}

	if raw, found := object["expires_in"]; found {
		err = json.Unmarshal(raw, &a.ExpiresIn)
		if err != nil {
			return fmt.Errorf("error reading 'expires_in': %w", err)
		}
		delete(object, "expires_in")
	}

	if raw, found := object["scope"]; found {
		err = json.Unmarshal(raw, &a.Scope)
		if err != nil {
			return fmt.Errorf("error reading 'scope': %w", err)
		}
		delete(object, "scope")
	}

	if raw, found := object["token_type"]; found {
		err = json.Unmarshal(raw, &a.TokenType)
		if err != nil {
			return fmt.Errorf("error reading 'token_type': %w", err)
		}
		delete(object, "token_type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessTokenRsp to handle AdditionalProperties
func (a AccessTokenRsp) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["access_token"], err = json.Marshal(a.AccessToken)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'access_token': %w", err)
	}

	if a.ExpiresIn != nil {
		object["expires_in"], err = json.Marshal(a.ExpiresIn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expires_in': %w", err)
		}
	}

	if a.Scope != nil {
		object["scope"], err = json.Marshal(a.Scope)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scope': %w", err)
		}
	}

	object["token_type"], err = json.Marshal(a.TokenType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'token_type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsExternalRef1NFType returns the union data inside the AccessTokenClaims_Aud as a externalRef1.NFType
func (t AccessTokenClaims_Aud) AsExternalRef1NFType() (externalRef1.NFType, error) {
	var body externalRef1.NFType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalRef1NFType overwrites any union data inside the AccessTokenClaims_Aud as the provided externalRef1.NFType
func (t *AccessTokenClaims_Aud) FromExternalRef1NFType(v externalRef1.NFType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalRef1NFType performs a merge with any union data inside the AccessTokenClaims_Aud, using the provided externalRef1.NFType
func (t *AccessTokenClaims_Aud) MergeExternalRef1NFType(v externalRef1.NFType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccessTokenClaimsAud1 returns the union data inside the AccessTokenClaims_Aud as a AccessTokenClaimsAud1
func (t AccessTokenClaims_Aud) AsAccessTokenClaimsAud1() (AccessTokenClaimsAud1, error) {
	var body AccessTokenClaimsAud1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessTokenClaimsAud1 overwrites any union data inside the AccessTokenClaims_Aud as the provided AccessTokenClaimsAud1
func (t *AccessTokenClaims_Aud) FromAccessTokenClaimsAud1(v AccessTokenClaimsAud1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessTokenClaimsAud1 performs a merge with any union data inside the AccessTokenClaims_Aud, using the provided AccessTokenClaimsAud1
func (t *AccessTokenClaims_Aud) MergeAccessTokenClaimsAud1(v AccessTokenClaimsAud1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccessTokenClaims_Aud) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccessTokenClaims_Aud) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccessTokenRequestWithBody request with any body
	AccessTokenRequestWithBody(ctx context.Context, params *AccessTokenRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessTokenRequestWithFormdataBody(ctx context.Context, params *AccessTokenRequestParams, body AccessTokenRequestFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccessTokenRequestWithBody(ctx context.Context, params *AccessTokenRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessTokenRequestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessTokenRequestWithFormdataBody(ctx context.Context, params *AccessTokenRequestParams, body AccessTokenRequestFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessTokenRequestRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccessTokenRequestRequestWithFormdataBody calls the generic AccessTokenRequest builder with application/x-www-form-urlencoded body
func NewAccessTokenRequestRequestWithFormdataBody(server string, params *AccessTokenRequestParams, body AccessTokenRequestFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewAccessTokenRequestRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewAccessTokenRequestRequestWithBody generates requests for AccessTokenRequest with any type of body
func NewAccessTokenRequestRequestWithBody(server string, params *AccessTokenRequestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentEncoding != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam0)
		}

		if params.AcceptEncoding != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept-Encoding", runtime.ParamLocationHeader, *params.AcceptEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Encoding", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccessTokenRequestWithBodyWithResponse request with any body
	AccessTokenRequestWithBodyWithResponse(ctx context.Context, params *AccessTokenRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessTokenRequestResponse, error)

	AccessTokenRequestWithFormdataBodyWithResponse(ctx context.Context, params *AccessTokenRequestParams, body AccessTokenRequestFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessTokenRequestResponse, error)
}

type AccessTokenRequestResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AccessTokenRsp
	JSON307                   *externalRef0.RedirectResponse
	JSON308                   *externalRef0.RedirectResponse
	JSON400                   *AccessTokenErr
	ApplicationproblemJSON400 *externalRef0.ProblemDetails
	ApplicationproblemJSON401 *externalRef0.N401
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON411 *externalRef0.N411
	ApplicationproblemJSON413 *externalRef0.N413
	ApplicationproblemJSON415 *externalRef0.N415
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON501 *externalRef0.N501
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r AccessTokenRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessTokenRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccessTokenRequestWithBodyWithResponse request with arbitrary body returning *AccessTokenRequestResponse
func (c *ClientWithResponses) AccessTokenRequestWithBodyWithResponse(ctx context.Context, params *AccessTokenRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessTokenRequestResponse, error) {
	rsp, err := c.AccessTokenRequestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessTokenRequestResponse(rsp)
}

func (c *ClientWithResponses) AccessTokenRequestWithFormdataBodyWithResponse(ctx context.Context, params *AccessTokenRequestParams, body AccessTokenRequestFormdataRequestBody, reqEditors ...RequestEditorFn) (*AccessTokenRequestResponse, error) {
	rsp, err := c.AccessTokenRequestWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessTokenRequestResponse(rsp)
}

// ParseAccessTokenRequestResponse parses an HTTP response from a AccessTokenRequestWithResponse call
func ParseAccessTokenRequestResponse(rsp *http.Response) (*AccessTokenRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessTokenRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest AccessTokenErr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.RedirectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.RedirectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Access Token Request
	// (POST /oauth2/token)
	AccessTokenRequest(c *gin.Context, params AccessTokenRequestParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AccessTokenRequest operation middleware
func (siw *ServerInterfaceWrapper) AccessTokenRequest(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AccessTokenRequestParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Content-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, valueList[0], &ContentEncoding)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Content-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	// ------------- Optional header parameter "Accept-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Encoding")]; found {
		var AcceptEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Encoding", runtime.ParamLocationHeader, valueList[0], &AcceptEncoding)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptEncoding = &AcceptEncoding

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AccessTokenRequest(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/oauth2/token", wrapper.AccessTokenRequest)
}

type AccessTokenRequestRequestObject struct {
	Params AccessTokenRequestParams
	Body   *AccessTokenRequestFormdataRequestBody
}

type AccessTokenRequestResponseObject interface {
	VisitAccessTokenRequestResponse(w http.ResponseWriter) error
}

type AccessTokenRequest200ResponseHeaders struct {
	AcceptEncoding  string
	CacheControl    string
	ContentEncoding string
	Pragma          string
}

type AccessTokenRequest200JSONResponse struct {
	Body    AccessTokenRsp
	Headers AccessTokenRequest200ResponseHeaders
}

func (response AccessTokenRequest200JSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Accept-Encoding", fmt.Sprint(response.Headers.AcceptEncoding))
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Content-Encoding", fmt.Sprint(response.Headers.ContentEncoding))
	w.Header().Set("Pragma", fmt.Sprint(response.Headers.Pragma))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessTokenRequest307ResponseHeaders struct {
	Location string
}

type AccessTokenRequest307JSONResponse struct {
	Body    externalRef0.RedirectResponse
	Headers AccessTokenRequest307ResponseHeaders
}

func (response AccessTokenRequest307JSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessTokenRequest308ResponseHeaders struct {
	Location string
}

type AccessTokenRequest308JSONResponse struct {
	Body    externalRef0.RedirectResponse
	Headers AccessTokenRequest308ResponseHeaders
}

func (response AccessTokenRequest308JSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessTokenRequest400ResponseHeaders struct {
	CacheControl string
	Pragma       string
}

type AccessTokenRequest400JSONResponse struct {
	Body    AccessTokenErr
	Headers AccessTokenRequest400ResponseHeaders
}

func (response AccessTokenRequest400JSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Pragma", fmt.Sprint(response.Headers.Pragma))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessTokenRequest400ApplicationProblemPlusJSONResponse struct {
	Body    externalRef0.ProblemDetails
	Headers AccessTokenRequest400ResponseHeaders
}

func (response AccessTokenRequest400ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Pragma", fmt.Sprint(response.Headers.Pragma))
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.Body)
}

type AccessTokenRequest401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest401ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest403ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest404ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest411ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest413ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest415ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest429ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest500ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest501ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequest503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response AccessTokenRequest503ApplicationProblemPlusJSONResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type AccessTokenRequestdefaultResponse struct {
	StatusCode int
}

func (response AccessTokenRequestdefaultResponse) VisitAccessTokenRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Access Token Request
	// (POST /oauth2/token)
	AccessTokenRequest(ctx context.Context, request AccessTokenRequestRequestObject) (AccessTokenRequestResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AccessTokenRequest operation middleware
func (sh *strictHandler) AccessTokenRequest(ctx *gin.Context, params AccessTokenRequestParams) {
	var request AccessTokenRequestRequestObject

	request.Params = params

	if err := ctx.Request.ParseForm(); err != nil {
		ctx.Error(err)
		return
	}
	var body AccessTokenRequestFormdataRequestBody
	if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccessTokenRequest(ctx, request.(AccessTokenRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccessTokenRequest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AccessTokenRequestResponseObject); ok {
		if err := validResponse.VisitAccessTokenRequestResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
