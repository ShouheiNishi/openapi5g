// Package availability provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package availability

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// NSSAIAvailabilityPostParams defines parameters for NSSAIAvailabilityPost.
type NSSAIAvailabilityPostParams struct {
	// ContentEncoding Content-Encoding, described in IETF RFC 7231
	ContentEncoding *string `json:"Content-Encoding,omitempty"`
}

// NSSAIAvailabilitySubModifyPatchParams defines parameters for NSSAIAvailabilitySubModifyPatch.
type NSSAIAvailabilitySubModifyPatchParams struct {
	// ContentEncoding Content-Encoding, described in IETF RFC 7231
	ContentEncoding *string `json:"Content-Encoding,omitempty"`
}

// NSSAIAvailabilityPatchParams defines parameters for NSSAIAvailabilityPatch.
type NSSAIAvailabilityPatchParams struct {
	// ContentEncoding Content-Encoding, described in IETF RFC 7231
	ContentEncoding *string `json:"Content-Encoding,omitempty"`

	// AcceptEncoding Accept-Encoding, described in IETF RFC 7231
	AcceptEncoding *string `json:"Accept-Encoding,omitempty"`
}

// NSSAIAvailabilityPutParams defines parameters for NSSAIAvailabilityPut.
type NSSAIAvailabilityPutParams struct {
	// ContentEncoding Content-Encoding, described in IETF RFC 7231
	ContentEncoding *string `json:"Content-Encoding,omitempty"`

	// AcceptEncoding Accept-Encoding, described in IETF RFC 7231
	AcceptEncoding *string `json:"Accept-Encoding,omitempty"`
}

// NSSAIAvailabilityPostJSONRequestBody defines body for NSSAIAvailabilityPost for application/json ContentType.
type NSSAIAvailabilityPostJSONRequestBody = externalRef0.NssfEventSubscriptionCreateData

// NSSAIAvailabilityPutJSONRequestBody defines body for NSSAIAvailabilityPut for application/json ContentType.
type NSSAIAvailabilityPutJSONRequestBody = externalRef0.NssaiAvailabilityInfo

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NSSAIAvailabilityOptions request
	NSSAIAvailabilityOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NSSAIAvailabilityPostWithBody request with any body
	NSSAIAvailabilityPostWithBody(ctx context.Context, params *NSSAIAvailabilityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NSSAIAvailabilityPost(ctx context.Context, params *NSSAIAvailabilityPostParams, body NSSAIAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NSSAIAvailabilityUnsubscribe request
	NSSAIAvailabilityUnsubscribe(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NSSAIAvailabilitySubModifyPatchWithBody request with any body
	NSSAIAvailabilitySubModifyPatchWithBody(ctx context.Context, subscriptionId string, params *NSSAIAvailabilitySubModifyPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NSSAIAvailabilityDelete request
	NSSAIAvailabilityDelete(ctx context.Context, nfId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NSSAIAvailabilityPatchWithBody request with any body
	NSSAIAvailabilityPatchWithBody(ctx context.Context, nfId string, params *NSSAIAvailabilityPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NSSAIAvailabilityPutWithBody request with any body
	NSSAIAvailabilityPutWithBody(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NSSAIAvailabilityPut(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, body NSSAIAvailabilityPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NSSAIAvailabilityOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilityPostWithBody(ctx context.Context, params *NSSAIAvailabilityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityPostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilityPost(ctx context.Context, params *NSSAIAvailabilityPostParams, body NSSAIAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityPostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilityUnsubscribe(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityUnsubscribeRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilitySubModifyPatchWithBody(ctx context.Context, subscriptionId string, params *NSSAIAvailabilitySubModifyPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilitySubModifyPatchRequestWithBody(c.Server, subscriptionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilityDelete(ctx context.Context, nfId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityDeleteRequest(c.Server, nfId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilityPatchWithBody(ctx context.Context, nfId string, params *NSSAIAvailabilityPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityPatchRequestWithBody(c.Server, nfId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilityPutWithBody(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityPutRequestWithBody(c.Server, nfId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NSSAIAvailabilityPut(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, body NSSAIAvailabilityPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSAIAvailabilityPutRequest(c.Server, nfId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNSSAIAvailabilityOptionsRequest generates requests for NSSAIAvailabilityOptions
func NewNSSAIAvailabilityOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nssai-availability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNSSAIAvailabilityPostRequest calls the generic NSSAIAvailabilityPost builder with application/json body
func NewNSSAIAvailabilityPostRequest(server string, params *NSSAIAvailabilityPostParams, body NSSAIAvailabilityPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNSSAIAvailabilityPostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewNSSAIAvailabilityPostRequestWithBody generates requests for NSSAIAvailabilityPost with any type of body
func NewNSSAIAvailabilityPostRequestWithBody(server string, params *NSSAIAvailabilityPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nssai-availability/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentEncoding != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam0)
		}

	}

	return req, nil
}

// NewNSSAIAvailabilityUnsubscribeRequest generates requests for NSSAIAvailabilityUnsubscribe
func NewNSSAIAvailabilityUnsubscribeRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nssai-availability/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNSSAIAvailabilitySubModifyPatchRequestWithBody generates requests for NSSAIAvailabilitySubModifyPatch with any type of body
func NewNSSAIAvailabilitySubModifyPatchRequestWithBody(server string, subscriptionId string, params *NSSAIAvailabilitySubModifyPatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nssai-availability/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentEncoding != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam0)
		}

	}

	return req, nil
}

// NewNSSAIAvailabilityDeleteRequest generates requests for NSSAIAvailabilityDelete
func NewNSSAIAvailabilityDeleteRequest(server string, nfId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nfId", runtime.ParamLocationPath, nfId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nssai-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNSSAIAvailabilityPatchRequestWithBody generates requests for NSSAIAvailabilityPatch with any type of body
func NewNSSAIAvailabilityPatchRequestWithBody(server string, nfId string, params *NSSAIAvailabilityPatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nfId", runtime.ParamLocationPath, nfId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nssai-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentEncoding != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam0)
		}

		if params.AcceptEncoding != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept-Encoding", runtime.ParamLocationHeader, *params.AcceptEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Encoding", headerParam1)
		}

	}

	return req, nil
}

// NewNSSAIAvailabilityPutRequest calls the generic NSSAIAvailabilityPut builder with application/json body
func NewNSSAIAvailabilityPutRequest(server string, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, body NSSAIAvailabilityPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNSSAIAvailabilityPutRequestWithBody(server, nfId, params, "application/json", bodyReader)
}

// NewNSSAIAvailabilityPutRequestWithBody generates requests for NSSAIAvailabilityPut with any type of body
func NewNSSAIAvailabilityPutRequestWithBody(server string, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nfId", runtime.ParamLocationPath, nfId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nssai-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentEncoding != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Encoding", runtime.ParamLocationHeader, *params.ContentEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Encoding", headerParam0)
		}

		if params.AcceptEncoding != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept-Encoding", runtime.ParamLocationHeader, *params.AcceptEncoding)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept-Encoding", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NSSAIAvailabilityOptionsWithResponse request
	NSSAIAvailabilityOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityOptionsResponse, error)

	// NSSAIAvailabilityPostWithBodyWithResponse request with any body
	NSSAIAvailabilityPostWithBodyWithResponse(ctx context.Context, params *NSSAIAvailabilityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPostResponse, error)

	NSSAIAvailabilityPostWithResponse(ctx context.Context, params *NSSAIAvailabilityPostParams, body NSSAIAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPostResponse, error)

	// NSSAIAvailabilityUnsubscribeWithResponse request
	NSSAIAvailabilityUnsubscribeWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityUnsubscribeResponse, error)

	// NSSAIAvailabilitySubModifyPatchWithBodyWithResponse request with any body
	NSSAIAvailabilitySubModifyPatchWithBodyWithResponse(ctx context.Context, subscriptionId string, params *NSSAIAvailabilitySubModifyPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilitySubModifyPatchResponse, error)

	// NSSAIAvailabilityDeleteWithResponse request
	NSSAIAvailabilityDeleteWithResponse(ctx context.Context, nfId string, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityDeleteResponse, error)

	// NSSAIAvailabilityPatchWithBodyWithResponse request with any body
	NSSAIAvailabilityPatchWithBodyWithResponse(ctx context.Context, nfId string, params *NSSAIAvailabilityPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPatchResponse, error)

	// NSSAIAvailabilityPutWithBodyWithResponse request with any body
	NSSAIAvailabilityPutWithBodyWithResponse(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPutResponse, error)

	NSSAIAvailabilityPutWithResponse(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, body NSSAIAvailabilityPutJSONRequestBody, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPutResponse, error)
}

type NSSAIAvailabilityOptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON501     *externalRef0.N501
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r NSSAIAvailabilityOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSAIAvailabilityOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NSSAIAvailabilityPostResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.NssfEventSubscriptionCreatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NSSAIAvailabilityPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSAIAvailabilityPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NSSAIAvailabilityUnsubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NSSAIAvailabilityUnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSAIAvailabilityUnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NSSAIAvailabilitySubModifyPatchResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.NssfEventSubscriptionCreatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NSSAIAvailabilitySubModifyPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSAIAvailabilitySubModifyPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NSSAIAvailabilityDeleteResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NSSAIAvailabilityDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSAIAvailabilityDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NSSAIAvailabilityPatchResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AuthorizedNssaiAvailabilityInfo
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NSSAIAvailabilityPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSAIAvailabilityPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NSSAIAvailabilityPutResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AuthorizedNssaiAvailabilityInfo
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NSSAIAvailabilityPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSAIAvailabilityPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NSSAIAvailabilityOptionsWithResponse request returning *NSSAIAvailabilityOptionsResponse
func (c *ClientWithResponses) NSSAIAvailabilityOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityOptionsResponse, error) {
	rsp, err := c.NSSAIAvailabilityOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityOptionsResponse(rsp)
}

// NSSAIAvailabilityPostWithBodyWithResponse request with arbitrary body returning *NSSAIAvailabilityPostResponse
func (c *ClientWithResponses) NSSAIAvailabilityPostWithBodyWithResponse(ctx context.Context, params *NSSAIAvailabilityPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPostResponse, error) {
	rsp, err := c.NSSAIAvailabilityPostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityPostResponse(rsp)
}

func (c *ClientWithResponses) NSSAIAvailabilityPostWithResponse(ctx context.Context, params *NSSAIAvailabilityPostParams, body NSSAIAvailabilityPostJSONRequestBody, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPostResponse, error) {
	rsp, err := c.NSSAIAvailabilityPost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityPostResponse(rsp)
}

// NSSAIAvailabilityUnsubscribeWithResponse request returning *NSSAIAvailabilityUnsubscribeResponse
func (c *ClientWithResponses) NSSAIAvailabilityUnsubscribeWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityUnsubscribeResponse, error) {
	rsp, err := c.NSSAIAvailabilityUnsubscribe(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityUnsubscribeResponse(rsp)
}

// NSSAIAvailabilitySubModifyPatchWithBodyWithResponse request with arbitrary body returning *NSSAIAvailabilitySubModifyPatchResponse
func (c *ClientWithResponses) NSSAIAvailabilitySubModifyPatchWithBodyWithResponse(ctx context.Context, subscriptionId string, params *NSSAIAvailabilitySubModifyPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilitySubModifyPatchResponse, error) {
	rsp, err := c.NSSAIAvailabilitySubModifyPatchWithBody(ctx, subscriptionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilitySubModifyPatchResponse(rsp)
}

// NSSAIAvailabilityDeleteWithResponse request returning *NSSAIAvailabilityDeleteResponse
func (c *ClientWithResponses) NSSAIAvailabilityDeleteWithResponse(ctx context.Context, nfId string, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityDeleteResponse, error) {
	rsp, err := c.NSSAIAvailabilityDelete(ctx, nfId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityDeleteResponse(rsp)
}

// NSSAIAvailabilityPatchWithBodyWithResponse request with arbitrary body returning *NSSAIAvailabilityPatchResponse
func (c *ClientWithResponses) NSSAIAvailabilityPatchWithBodyWithResponse(ctx context.Context, nfId string, params *NSSAIAvailabilityPatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPatchResponse, error) {
	rsp, err := c.NSSAIAvailabilityPatchWithBody(ctx, nfId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityPatchResponse(rsp)
}

// NSSAIAvailabilityPutWithBodyWithResponse request with arbitrary body returning *NSSAIAvailabilityPutResponse
func (c *ClientWithResponses) NSSAIAvailabilityPutWithBodyWithResponse(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPutResponse, error) {
	rsp, err := c.NSSAIAvailabilityPutWithBody(ctx, nfId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityPutResponse(rsp)
}

func (c *ClientWithResponses) NSSAIAvailabilityPutWithResponse(ctx context.Context, nfId externalRef0.NfInstanceId, params *NSSAIAvailabilityPutParams, body NSSAIAvailabilityPutJSONRequestBody, reqEditors ...RequestEditorFn) (*NSSAIAvailabilityPutResponse, error) {
	rsp, err := c.NSSAIAvailabilityPut(ctx, nfId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSAIAvailabilityPutResponse(rsp)
}

// ParseNSSAIAvailabilityOptionsResponse parses an HTTP response from a NSSAIAvailabilityOptionsWithResponse call
func ParseNSSAIAvailabilityOptionsResponse(rsp *http.Response) (*NSSAIAvailabilityOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSAIAvailabilityOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 200:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 405:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNSSAIAvailabilityPostResponse parses an HTTP response from a NSSAIAvailabilityPostWithResponse call
func ParseNSSAIAvailabilityPostResponse(rsp *http.Response) (*NSSAIAvailabilityPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSAIAvailabilityPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.NssfEventSubscriptionCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNSSAIAvailabilityUnsubscribeResponse parses an HTTP response from a NSSAIAvailabilityUnsubscribeWithResponse call
func ParseNSSAIAvailabilityUnsubscribeResponse(rsp *http.Response) (*NSSAIAvailabilityUnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSAIAvailabilityUnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNSSAIAvailabilitySubModifyPatchResponse parses an HTTP response from a NSSAIAvailabilitySubModifyPatchWithResponse call
func ParseNSSAIAvailabilitySubModifyPatchResponse(rsp *http.Response) (*NSSAIAvailabilitySubModifyPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSAIAvailabilitySubModifyPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.NssfEventSubscriptionCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNSSAIAvailabilityDeleteResponse parses an HTTP response from a NSSAIAvailabilityDeleteWithResponse call
func ParseNSSAIAvailabilityDeleteResponse(rsp *http.Response) (*NSSAIAvailabilityDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSAIAvailabilityDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNSSAIAvailabilityPatchResponse parses an HTTP response from a NSSAIAvailabilityPatchWithResponse call
func ParseNSSAIAvailabilityPatchResponse(rsp *http.Response) (*NSSAIAvailabilityPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSAIAvailabilityPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AuthorizedNssaiAvailabilityInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNSSAIAvailabilityPutResponse parses an HTTP response from a NSSAIAvailabilityPutWithResponse call
func ParseNSSAIAvailabilityPutResponse(rsp *http.Response) (*NSSAIAvailabilityPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSAIAvailabilityPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AuthorizedNssaiAvailabilityInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Discover communication options supported by NSSF for NSSAI Availability
	// (OPTIONS /nssai-availability)
	NSSAIAvailabilityOptions(c *gin.Context)
	// Creates subscriptions for notification about updates to NSSAI availability information
	// (POST /nssai-availability/subscriptions)
	NSSAIAvailabilityPost(c *gin.Context, params NSSAIAvailabilityPostParams)
	// Deletes an already existing NSSAI availability notification subscription
	// (DELETE /nssai-availability/subscriptions/{subscriptionId})
	NSSAIAvailabilityUnsubscribe(c *gin.Context, subscriptionId string)
	// updates an already existing NSSAI availability notification subscription
	// (PATCH /nssai-availability/subscriptions/{subscriptionId})
	NSSAIAvailabilitySubModifyPatch(c *gin.Context, subscriptionId string, params NSSAIAvailabilitySubModifyPatchParams)
	// Deletes an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
	// (DELETE /nssai-availability/{nfId})
	NSSAIAvailabilityDelete(c *gin.Context, nfId string)
	// Updates an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
	// (PATCH /nssai-availability/{nfId})
	NSSAIAvailabilityPatch(c *gin.Context, nfId string, params NSSAIAvailabilityPatchParams)
	// Updates/replaces the NSSF with the S-NSSAIs the NF service consumer (e.g AMF)supports per TA
	// (PUT /nssai-availability/{nfId})
	NSSAIAvailabilityPut(c *gin.Context, nfId externalRef0.NfInstanceId, params NSSAIAvailabilityPutParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// NSSAIAvailabilityOptions operation middleware
func (siw *ServerInterfaceWrapper) NSSAIAvailabilityOptions(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nssaiavailability"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSAIAvailabilityOptions(c)
}

// NSSAIAvailabilityPost operation middleware
func (siw *ServerInterfaceWrapper) NSSAIAvailabilityPost(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nssaiavailability"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NSSAIAvailabilityPostParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Content-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Encoding", valueList[0], &ContentEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Content-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSAIAvailabilityPost(c, params)
}

// NSSAIAvailabilityUnsubscribe operation middleware
func (siw *ServerInterfaceWrapper) NSSAIAvailabilityUnsubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nssaiavailability"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSAIAvailabilityUnsubscribe(c, subscriptionId)
}

// NSSAIAvailabilitySubModifyPatch operation middleware
func (siw *ServerInterfaceWrapper) NSSAIAvailabilitySubModifyPatch(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nssaiavailability"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NSSAIAvailabilitySubModifyPatchParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Content-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Encoding", valueList[0], &ContentEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Content-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSAIAvailabilitySubModifyPatch(c, subscriptionId, params)
}

// NSSAIAvailabilityDelete operation middleware
func (siw *ServerInterfaceWrapper) NSSAIAvailabilityDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "nfId" -------------
	var nfId string

	err = runtime.BindStyledParameterWithOptions("simple", "nfId", c.Param("nfId"), &nfId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nfId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nssaiavailability"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSAIAvailabilityDelete(c, nfId)
}

// NSSAIAvailabilityPatch operation middleware
func (siw *ServerInterfaceWrapper) NSSAIAvailabilityPatch(c *gin.Context) {

	var err error

	// ------------- Path parameter "nfId" -------------
	var nfId string

	err = runtime.BindStyledParameterWithOptions("simple", "nfId", c.Param("nfId"), &nfId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nfId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nssaiavailability"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NSSAIAvailabilityPatchParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Content-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Encoding", valueList[0], &ContentEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Content-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	// ------------- Optional header parameter "Accept-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Encoding")]; found {
		var AcceptEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Encoding", valueList[0], &AcceptEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptEncoding = &AcceptEncoding

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSAIAvailabilityPatch(c, nfId, params)
}

// NSSAIAvailabilityPut operation middleware
func (siw *ServerInterfaceWrapper) NSSAIAvailabilityPut(c *gin.Context) {

	var err error

	// ------------- Path parameter "nfId" -------------
	var nfId externalRef0.NfInstanceId

	err = runtime.BindStyledParameterWithOptions("simple", "nfId", c.Param("nfId"), &nfId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nfId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nssaiavailability"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NSSAIAvailabilityPutParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Content-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Encoding", valueList[0], &ContentEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Content-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	// ------------- Optional header parameter "Accept-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Encoding")]; found {
		var AcceptEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Accept-Encoding, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Accept-Encoding", valueList[0], &AcceptEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Accept-Encoding: %w", err), http.StatusBadRequest)
			return
		}

		params.AcceptEncoding = &AcceptEncoding

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSAIAvailabilityPut(c, nfId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.OPTIONS(options.BaseURL+"/nssai-availability", wrapper.NSSAIAvailabilityOptions)
	router.POST(options.BaseURL+"/nssai-availability/subscriptions", wrapper.NSSAIAvailabilityPost)
	router.DELETE(options.BaseURL+"/nssai-availability/subscriptions/:subscriptionId", wrapper.NSSAIAvailabilityUnsubscribe)
	router.PATCH(options.BaseURL+"/nssai-availability/subscriptions/:subscriptionId", wrapper.NSSAIAvailabilitySubModifyPatch)
	router.DELETE(options.BaseURL+"/nssai-availability/:nfId", wrapper.NSSAIAvailabilityDelete)
	router.PATCH(options.BaseURL+"/nssai-availability/:nfId", wrapper.NSSAIAvailabilityPatch)
	router.PUT(options.BaseURL+"/nssai-availability/:nfId", wrapper.NSSAIAvailabilityPut)
}

type NSSAIAvailabilityOptionsRequestObject struct {
}

type NSSAIAvailabilityOptionsResponseObject interface {
	VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error
}

type NSSAIAvailabilityOptions200ResponseHeaders struct {
	AcceptEncoding *string
}

type NSSAIAvailabilityOptions200Response struct {
	Headers NSSAIAvailabilityOptions200ResponseHeaders
}

func (response NSSAIAvailabilityOptions200Response) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	if response.Headers.AcceptEncoding != nil {
		w.Header().Set("Accept-Encoding", fmt.Sprint(*response.Headers.AcceptEncoding))
	}
	w.WriteHeader(200)
	return nil
}

type NSSAIAvailabilityOptions307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSAIAvailabilityOptions307JSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityOptions308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSAIAvailabilityOptions308JSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityOptions400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions400ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptions401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions401ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptions403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions403ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptions404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions404ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptions405Response externalRef0.N405Response

func (response NSSAIAvailabilityOptions405Response) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(405)
	return nil
}

type NSSAIAvailabilityOptions429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions429ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptions500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions500ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptions501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions501ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N501ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptions503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityOptions503ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityOptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSAIAvailabilityOptionsdefaultApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPostRequestObject struct {
	Params NSSAIAvailabilityPostParams
	Body   *NSSAIAvailabilityPostJSONRequestBody
}

type NSSAIAvailabilityPostResponseObject interface {
	VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error
}

type NSSAIAvailabilityPost201ResponseHeaders struct {
	ContentEncoding *string
	Location        string
}

type NSSAIAvailabilityPost201JSONResponse struct {
	Body    externalRef0.NssfEventSubscriptionCreatedData
	Headers NSSAIAvailabilityPost201ResponseHeaders
}

func (response NSSAIAvailabilityPost201JSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.ContentEncoding != nil {
		w.Header().Set("Content-Encoding", fmt.Sprint(*response.Headers.ContentEncoding))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPost307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSAIAvailabilityPost307JSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPost308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSAIAvailabilityPost308JSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPost400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost400ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost401ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost403ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost404ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost411ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost413ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost415ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost429ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost500ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPost503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPost503ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPostdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSAIAvailabilityPostdefaultApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityUnsubscribeRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type NSSAIAvailabilityUnsubscribeResponseObject interface {
	VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error
}

type NSSAIAvailabilityUnsubscribe204Response struct {
}

func (response NSSAIAvailabilityUnsubscribe204Response) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type NSSAIAvailabilityUnsubscribe307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSAIAvailabilityUnsubscribe307JSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityUnsubscribe308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSAIAvailabilityUnsubscribe308JSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityUnsubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityUnsubscribe400ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityUnsubscribe401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityUnsubscribe401ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityUnsubscribe404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityUnsubscribe404ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityUnsubscribe429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityUnsubscribe429ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityUnsubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityUnsubscribe500ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityUnsubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityUnsubscribe503ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityUnsubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSAIAvailabilityUnsubscribedefaultApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilitySubModifyPatchRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Params         NSSAIAvailabilitySubModifyPatchParams
	Body           io.Reader
}

type NSSAIAvailabilitySubModifyPatchResponseObject interface {
	VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error
}

type NSSAIAvailabilitySubModifyPatch200ResponseHeaders struct {
	ContentEncoding *string
}

type NSSAIAvailabilitySubModifyPatch200JSONResponse struct {
	Body    externalRef0.NssfEventSubscriptionCreatedData
	Headers NSSAIAvailabilitySubModifyPatch200ResponseHeaders
}

func (response NSSAIAvailabilitySubModifyPatch200JSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.ContentEncoding != nil {
		w.Header().Set("Content-Encoding", fmt.Sprint(*response.Headers.ContentEncoding))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilitySubModifyPatch307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSAIAvailabilitySubModifyPatch307JSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilitySubModifyPatch308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSAIAvailabilitySubModifyPatch308JSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilitySubModifyPatch400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch400ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch401ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch403ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch404ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch411ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch413ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch415ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch429ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch500ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatch503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilitySubModifyPatch503ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilitySubModifyPatchdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSAIAvailabilitySubModifyPatchdefaultApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilitySubModifyPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityDeleteRequestObject struct {
	NfId string `json:"nfId"`
}

type NSSAIAvailabilityDeleteResponseObject interface {
	VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error
}

type NSSAIAvailabilityDelete204Response struct {
}

func (response NSSAIAvailabilityDelete204Response) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type NSSAIAvailabilityDelete307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSAIAvailabilityDelete307JSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityDelete308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSAIAvailabilityDelete308JSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityDelete400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityDelete400ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityDelete401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityDelete401ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityDelete404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityDelete404ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityDelete429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityDelete429ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityDelete500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityDelete500ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityDelete503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityDelete503ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityDeletedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSAIAvailabilityDeletedefaultApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPatchRequestObject struct {
	NfId   string `json:"nfId"`
	Params NSSAIAvailabilityPatchParams
	Body   io.Reader
}

type NSSAIAvailabilityPatchResponseObject interface {
	VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error
}

type NSSAIAvailabilityPatch200ResponseHeaders struct {
	AcceptEncoding  *string
	ContentEncoding *string
}

type NSSAIAvailabilityPatch200JSONResponse struct {
	Body    externalRef0.AuthorizedNssaiAvailabilityInfo
	Headers NSSAIAvailabilityPatch200ResponseHeaders
}

func (response NSSAIAvailabilityPatch200JSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.AcceptEncoding != nil {
		w.Header().Set("Accept-Encoding", fmt.Sprint(*response.Headers.AcceptEncoding))
	}
	if response.Headers.ContentEncoding != nil {
		w.Header().Set("Content-Encoding", fmt.Sprint(*response.Headers.ContentEncoding))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPatch204Response struct {
}

func (response NSSAIAvailabilityPatch204Response) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type NSSAIAvailabilityPatch307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSAIAvailabilityPatch307JSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPatch308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSAIAvailabilityPatch308JSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPatch400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch400ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch401ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch403ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch404ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch411ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch413ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch415ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch429ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch500ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatch503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPatch503ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPatchdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSAIAvailabilityPatchdefaultApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPutRequestObject struct {
	NfId   externalRef0.NfInstanceId `json:"nfId"`
	Params NSSAIAvailabilityPutParams
	Body   *NSSAIAvailabilityPutJSONRequestBody
}

type NSSAIAvailabilityPutResponseObject interface {
	VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error
}

type NSSAIAvailabilityPut200ResponseHeaders struct {
	AcceptEncoding  *string
	ContentEncoding *string
}

type NSSAIAvailabilityPut200JSONResponse struct {
	Body    externalRef0.AuthorizedNssaiAvailabilityInfo
	Headers NSSAIAvailabilityPut200ResponseHeaders
}

func (response NSSAIAvailabilityPut200JSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.AcceptEncoding != nil {
		w.Header().Set("Accept-Encoding", fmt.Sprint(*response.Headers.AcceptEncoding))
	}
	if response.Headers.ContentEncoding != nil {
		w.Header().Set("Content-Encoding", fmt.Sprint(*response.Headers.ContentEncoding))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPut204Response struct {
}

func (response NSSAIAvailabilityPut204Response) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type NSSAIAvailabilityPut307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSAIAvailabilityPut307JSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPut308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSAIAvailabilityPut308JSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSAIAvailabilityPut400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut400ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut401ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut403ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut404ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut411ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut413ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut415ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut429ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut500ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPut503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSAIAvailabilityPut503ApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSAIAvailabilityPutdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSAIAvailabilityPutdefaultApplicationProblemPlusJSONResponse) VisitNSSAIAvailabilityPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Discover communication options supported by NSSF for NSSAI Availability
	// (OPTIONS /nssai-availability)
	NSSAIAvailabilityOptions(ctx context.Context, request NSSAIAvailabilityOptionsRequestObject) (NSSAIAvailabilityOptionsResponseObject, error)
	// Creates subscriptions for notification about updates to NSSAI availability information
	// (POST /nssai-availability/subscriptions)
	NSSAIAvailabilityPost(ctx context.Context, request NSSAIAvailabilityPostRequestObject) (NSSAIAvailabilityPostResponseObject, error)
	// Deletes an already existing NSSAI availability notification subscription
	// (DELETE /nssai-availability/subscriptions/{subscriptionId})
	NSSAIAvailabilityUnsubscribe(ctx context.Context, request NSSAIAvailabilityUnsubscribeRequestObject) (NSSAIAvailabilityUnsubscribeResponseObject, error)
	// updates an already existing NSSAI availability notification subscription
	// (PATCH /nssai-availability/subscriptions/{subscriptionId})
	NSSAIAvailabilitySubModifyPatch(ctx context.Context, request NSSAIAvailabilitySubModifyPatchRequestObject) (NSSAIAvailabilitySubModifyPatchResponseObject, error)
	// Deletes an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
	// (DELETE /nssai-availability/{nfId})
	NSSAIAvailabilityDelete(ctx context.Context, request NSSAIAvailabilityDeleteRequestObject) (NSSAIAvailabilityDeleteResponseObject, error)
	// Updates an already existing S-NSSAIs per TA provided by the NF service consumer (e.g AMF)
	// (PATCH /nssai-availability/{nfId})
	NSSAIAvailabilityPatch(ctx context.Context, request NSSAIAvailabilityPatchRequestObject) (NSSAIAvailabilityPatchResponseObject, error)
	// Updates/replaces the NSSF with the S-NSSAIs the NF service consumer (e.g AMF)supports per TA
	// (PUT /nssai-availability/{nfId})
	NSSAIAvailabilityPut(ctx context.Context, request NSSAIAvailabilityPutRequestObject) (NSSAIAvailabilityPutResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// NSSAIAvailabilityOptions operation middleware
func (sh *strictHandler) NSSAIAvailabilityOptions(ctx *gin.Context) {
	var request NSSAIAvailabilityOptionsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSAIAvailabilityOptions(ctx, request.(NSSAIAvailabilityOptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSAIAvailabilityOptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSAIAvailabilityOptionsResponseObject); ok {
		if err := validResponse.VisitNSSAIAvailabilityOptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NSSAIAvailabilityPost operation middleware
func (sh *strictHandler) NSSAIAvailabilityPost(ctx *gin.Context, params NSSAIAvailabilityPostParams) {
	var request NSSAIAvailabilityPostRequestObject

	request.Params = params

	var body NSSAIAvailabilityPostJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSAIAvailabilityPost(ctx, request.(NSSAIAvailabilityPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSAIAvailabilityPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSAIAvailabilityPostResponseObject); ok {
		if err := validResponse.VisitNSSAIAvailabilityPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NSSAIAvailabilityUnsubscribe operation middleware
func (sh *strictHandler) NSSAIAvailabilityUnsubscribe(ctx *gin.Context, subscriptionId string) {
	var request NSSAIAvailabilityUnsubscribeRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSAIAvailabilityUnsubscribe(ctx, request.(NSSAIAvailabilityUnsubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSAIAvailabilityUnsubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSAIAvailabilityUnsubscribeResponseObject); ok {
		if err := validResponse.VisitNSSAIAvailabilityUnsubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NSSAIAvailabilitySubModifyPatch operation middleware
func (sh *strictHandler) NSSAIAvailabilitySubModifyPatch(ctx *gin.Context, subscriptionId string, params NSSAIAvailabilitySubModifyPatchParams) {
	var request NSSAIAvailabilitySubModifyPatchRequestObject

	request.SubscriptionId = subscriptionId
	request.Params = params

	request.Body = ctx.Request.Body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSAIAvailabilitySubModifyPatch(ctx, request.(NSSAIAvailabilitySubModifyPatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSAIAvailabilitySubModifyPatch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSAIAvailabilitySubModifyPatchResponseObject); ok {
		if err := validResponse.VisitNSSAIAvailabilitySubModifyPatchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NSSAIAvailabilityDelete operation middleware
func (sh *strictHandler) NSSAIAvailabilityDelete(ctx *gin.Context, nfId string) {
	var request NSSAIAvailabilityDeleteRequestObject

	request.NfId = nfId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSAIAvailabilityDelete(ctx, request.(NSSAIAvailabilityDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSAIAvailabilityDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSAIAvailabilityDeleteResponseObject); ok {
		if err := validResponse.VisitNSSAIAvailabilityDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NSSAIAvailabilityPatch operation middleware
func (sh *strictHandler) NSSAIAvailabilityPatch(ctx *gin.Context, nfId string, params NSSAIAvailabilityPatchParams) {
	var request NSSAIAvailabilityPatchRequestObject

	request.NfId = nfId
	request.Params = params

	request.Body = ctx.Request.Body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSAIAvailabilityPatch(ctx, request.(NSSAIAvailabilityPatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSAIAvailabilityPatch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSAIAvailabilityPatchResponseObject); ok {
		if err := validResponse.VisitNSSAIAvailabilityPatchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// NSSAIAvailabilityPut operation middleware
func (sh *strictHandler) NSSAIAvailabilityPut(ctx *gin.Context, nfId externalRef0.NfInstanceId, params NSSAIAvailabilityPutParams) {
	var request NSSAIAvailabilityPutRequestObject

	request.NfId = nfId
	request.Params = params

	var body NSSAIAvailabilityPutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSAIAvailabilityPut(ctx, request.(NSSAIAvailabilityPutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSAIAvailabilityPut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSAIAvailabilityPutResponseObject); ok {
		if err := validResponse.VisitNSSAIAvailabilityPutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
