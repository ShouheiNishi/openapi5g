// Package selection provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package selection

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/nrf/management"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for RoamingIndication.
const (
	HOMEROUTEDROAMING RoamingIndication = "HOME_ROUTED_ROAMING"
	LOCALBREAKOUT     RoamingIndication = "LOCAL_BREAKOUT"
	NONROAMING        RoamingIndication = "NON_ROAMING"
)

// AllowedNssai defines model for AllowedNssai.
type AllowedNssai struct {
	AccessType           externalRef0.AccessType `json:"accessType"`
	AllowedSnssaiList    []AllowedSnssai         `json:"allowedSnssaiList"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// AllowedSnssai defines model for AllowedSnssai.
type AllowedSnssai struct {
	AllowedSnssai        externalRef0.Snssai    `json:"allowedSnssai"`
	MappedHomeSnssai     *externalRef0.Snssai   `json:"mappedHomeSnssai,omitempty"`
	NsiInformationList   *[]NsiInformation      `json:"nsiInformationList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizedNetworkSliceInfo defines model for AuthorizedNetworkSliceInfo.
type AuthorizedNetworkSliceInfo struct {
	AllowedNssaiList        *[]AllowedNssai                 `json:"allowedNssaiList,omitempty"`
	CandidateAmfList        *[]externalRef0.NfInstanceId    `json:"candidateAmfList,omitempty"`
	ConfiguredNssai         *[]ConfiguredSnssai             `json:"configuredNssai,omitempty"`
	NrfAmfSet               *externalRef0.Uri               `json:"nrfAmfSet,omitempty"`
	NrfAmfSetAccessTokenUri *externalRef0.Uri               `json:"nrfAmfSetAccessTokenUri,omitempty"`
	NrfAmfSetNfMgtUri       *externalRef0.Uri               `json:"nrfAmfSetNfMgtUri,omitempty"`
	NsiInformation          *NsiInformation                 `json:"nsiInformation,omitempty"`
	RejectedNssaiInPlmn     *[]externalRef0.Snssai          `json:"rejectedNssaiInPlmn,omitempty"`
	RejectedNssaiInTa       *[]externalRef0.Snssai          `json:"rejectedNssaiInTa,omitempty"`
	SupportedFeatures       *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	TargetAmfServiceSet     *externalRef0.NfServiceSetId    `json:"targetAmfServiceSet,omitempty"`
	TargetAmfSet            *string                         `json:"targetAmfSet,omitempty"`
	AdditionalProperties    map[string]interface{}          `json:"-"`
}

// ConfiguredSnssai defines model for ConfiguredSnssai.
type ConfiguredSnssai struct {
	ConfiguredSnssai     externalRef0.Snssai    `json:"configuredSnssai"`
	MappedHomeSnssai     *externalRef0.Snssai   `json:"mappedHomeSnssai,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MappingOfSnssai defines model for MappingOfSnssai.
type MappingOfSnssai struct {
	HomeSnssai           externalRef0.Snssai    `json:"homeSnssai"`
	ServingSnssai        externalRef0.Snssai    `json:"servingSnssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NsiId defines model for NsiId.
type NsiId = string

// NsiInformation defines model for NsiInformation.
type NsiInformation struct {
	NrfAccessTokenUri    *externalRef0.Uri      `json:"nrfAccessTokenUri,omitempty"`
	NrfId                externalRef0.Uri       `json:"nrfId"`
	NrfNfMgtUri          *externalRef0.Uri      `json:"nrfNfMgtUri,omitempty"`
	NsiId                *NsiId                 `json:"nsiId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RoamingIndication defines model for RoamingIndication.
type RoamingIndication string

// SliceInfoForPDUSession defines model for SliceInfoForPDUSession.
type SliceInfoForPDUSession struct {
	HomeSnssai           *externalRef0.Snssai   `json:"homeSnssai,omitempty"`
	RoamingIndication    RoamingIndication      `json:"roamingIndication"`
	SNssai               externalRef0.Snssai    `json:"sNssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SliceInfoForRegistration defines model for SliceInfoForRegistration.
type SliceInfoForRegistration struct {
	AllowedNssaiCurrentAccess  *AllowedNssai          `json:"allowedNssaiCurrentAccess,omitempty"`
	AllowedNssaiOtherAccess    *AllowedNssai          `json:"allowedNssaiOtherAccess,omitempty"`
	DefaultConfiguredSnssaiInd *bool                  `json:"defaultConfiguredSnssaiInd,omitempty"`
	MappingOfNssai             *[]MappingOfSnssai     `json:"mappingOfNssai,omitempty"`
	RequestMapping             *bool                  `json:"requestMapping,omitempty"`
	RequestedNssai             *[]externalRef0.Snssai `json:"requestedNssai,omitempty"`
	SNssaiForMapping           *[]externalRef0.Snssai `json:"sNssaiForMapping,omitempty"`
	SubscribedNssai            *[]SubscribedSnssai    `json:"subscribedNssai,omitempty"`
	AdditionalProperties       map[string]interface{} `json:"-"`
}

// SliceInfoForUEConfigurationUpdate defines model for SliceInfoForUEConfigurationUpdate.
type SliceInfoForUEConfigurationUpdate struct {
	AllowedNssaiCurrentAccess  *AllowedNssai          `json:"allowedNssaiCurrentAccess,omitempty"`
	AllowedNssaiOtherAccess    *AllowedNssai          `json:"allowedNssaiOtherAccess,omitempty"`
	DefaultConfiguredSnssaiInd *bool                  `json:"defaultConfiguredSnssaiInd,omitempty"`
	MappingOfNssai             *[]MappingOfSnssai     `json:"mappingOfNssai,omitempty"`
	RequestedNssai             *[]externalRef0.Snssai `json:"requestedNssai,omitempty"`
	SubscribedNssai            *[]SubscribedSnssai    `json:"subscribedNssai,omitempty"`
	AdditionalProperties       map[string]interface{} `json:"-"`
}

// SubscribedSnssai defines model for SubscribedSnssai.
type SubscribedSnssai struct {
	DefaultIndication    *bool                  `json:"defaultIndication,omitempty"`
	SubscribedSnssai     externalRef0.Snssai    `json:"subscribedSnssai"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NSSelectionGetParams defines parameters for NSSelectionGet.
type NSSelectionGetParams struct {
	// NfType NF type of the NF service consumer
	NfType externalRef1.NFType `form:"nf-type" json:"nf-type"`

	// NfId NF Instance ID of the NF service consumer
	NfId externalRef0.NfInstanceId `form:"nf-id" json:"nf-id"`

	// SliceInfoRequestForRegistration Requested network slice information during Registration procedure
	SliceInfoRequestForRegistration *SliceInfoForRegistration `form:"slice-info-request-for-registration,omitempty" json:"slice-info-request-for-registration,omitempty"`

	// SliceInfoRequestForPduSession Requested network slice information during PDU session establishment procedure
	SliceInfoRequestForPduSession *SliceInfoForPDUSession `form:"slice-info-request-for-pdu-session,omitempty" json:"slice-info-request-for-pdu-session,omitempty"`

	// SliceInfoRequestForUeCu Requested network slice information during UE confuguration update procedure
	SliceInfoRequestForUeCu *SliceInfoForUEConfigurationUpdate `form:"slice-info-request-for-ue-cu,omitempty" json:"slice-info-request-for-ue-cu,omitempty"`

	// HomePlmnId PLMN ID of the HPLMN
	HomePlmnId *externalRef0.PlmnId `form:"home-plmn-id,omitempty" json:"home-plmn-id,omitempty"`

	// Tai TAI of the UE
	Tai *externalRef0.Tai `form:"tai,omitempty" json:"tai,omitempty"`

	// SupportedFeatures Features required to be supported by the NFs in the target slice instance
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// Getter for additional properties for AllowedNssai. Returns the specified
// element and whether it was found
func (a AllowedNssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AllowedNssai
func (a *AllowedNssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AllowedNssai to handle AdditionalProperties
func (a *AllowedNssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["allowedSnssaiList"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnssaiList': %w", err)
		}
		delete(object, "allowedSnssaiList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AllowedNssai to handle AdditionalProperties
func (a AllowedNssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessType"], err = json.Marshal(a.AccessType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
	}

	object["allowedSnssaiList"], err = json.Marshal(a.AllowedSnssaiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedSnssaiList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AllowedSnssai. Returns the specified
// element and whether it was found
func (a AllowedSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AllowedSnssai
func (a *AllowedSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AllowedSnssai to handle AdditionalProperties
func (a *AllowedSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedSnssai"]; found {
		err = json.Unmarshal(raw, &a.AllowedSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSnssai': %w", err)
		}
		delete(object, "allowedSnssai")
	}

	if raw, found := object["mappedHomeSnssai"]; found {
		err = json.Unmarshal(raw, &a.MappedHomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappedHomeSnssai': %w", err)
		}
		delete(object, "mappedHomeSnssai")
	}

	if raw, found := object["nsiInformationList"]; found {
		err = json.Unmarshal(raw, &a.NsiInformationList)
		if err != nil {
			return fmt.Errorf("error reading 'nsiInformationList': %w", err)
		}
		delete(object, "nsiInformationList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AllowedSnssai to handle AdditionalProperties
func (a AllowedSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedSnssai"], err = json.Marshal(a.AllowedSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedSnssai': %w", err)
	}

	if a.MappedHomeSnssai != nil {
		object["mappedHomeSnssai"], err = json.Marshal(a.MappedHomeSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappedHomeSnssai': %w", err)
		}
	}

	if a.NsiInformationList != nil {
		object["nsiInformationList"], err = json.Marshal(a.NsiInformationList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiInformationList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizedNetworkSliceInfo. Returns the specified
// element and whether it was found
func (a AuthorizedNetworkSliceInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizedNetworkSliceInfo
func (a *AuthorizedNetworkSliceInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizedNetworkSliceInfo to handle AdditionalProperties
func (a *AuthorizedNetworkSliceInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNssaiList"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiList)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiList': %w", err)
		}
		delete(object, "allowedNssaiList")
	}

	if raw, found := object["candidateAmfList"]; found {
		err = json.Unmarshal(raw, &a.CandidateAmfList)
		if err != nil {
			return fmt.Errorf("error reading 'candidateAmfList': %w", err)
		}
		delete(object, "candidateAmfList")
	}

	if raw, found := object["configuredNssai"]; found {
		err = json.Unmarshal(raw, &a.ConfiguredNssai)
		if err != nil {
			return fmt.Errorf("error reading 'configuredNssai': %w", err)
		}
		delete(object, "configuredNssai")
	}

	if raw, found := object["nrfAmfSet"]; found {
		err = json.Unmarshal(raw, &a.NrfAmfSet)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAmfSet': %w", err)
		}
		delete(object, "nrfAmfSet")
	}

	if raw, found := object["nrfAmfSetAccessTokenUri"]; found {
		err = json.Unmarshal(raw, &a.NrfAmfSetAccessTokenUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAmfSetAccessTokenUri': %w", err)
		}
		delete(object, "nrfAmfSetAccessTokenUri")
	}

	if raw, found := object["nrfAmfSetNfMgtUri"]; found {
		err = json.Unmarshal(raw, &a.NrfAmfSetNfMgtUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAmfSetNfMgtUri': %w", err)
		}
		delete(object, "nrfAmfSetNfMgtUri")
	}

	if raw, found := object["nsiInformation"]; found {
		err = json.Unmarshal(raw, &a.NsiInformation)
		if err != nil {
			return fmt.Errorf("error reading 'nsiInformation': %w", err)
		}
		delete(object, "nsiInformation")
	}

	if raw, found := object["rejectedNssaiInPlmn"]; found {
		err = json.Unmarshal(raw, &a.RejectedNssaiInPlmn)
		if err != nil {
			return fmt.Errorf("error reading 'rejectedNssaiInPlmn': %w", err)
		}
		delete(object, "rejectedNssaiInPlmn")
	}

	if raw, found := object["rejectedNssaiInTa"]; found {
		err = json.Unmarshal(raw, &a.RejectedNssaiInTa)
		if err != nil {
			return fmt.Errorf("error reading 'rejectedNssaiInTa': %w", err)
		}
		delete(object, "rejectedNssaiInTa")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetAmfServiceSet"]; found {
		err = json.Unmarshal(raw, &a.TargetAmfServiceSet)
		if err != nil {
			return fmt.Errorf("error reading 'targetAmfServiceSet': %w", err)
		}
		delete(object, "targetAmfServiceSet")
	}

	if raw, found := object["targetAmfSet"]; found {
		err = json.Unmarshal(raw, &a.TargetAmfSet)
		if err != nil {
			return fmt.Errorf("error reading 'targetAmfSet': %w", err)
		}
		delete(object, "targetAmfSet")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizedNetworkSliceInfo to handle AdditionalProperties
func (a AuthorizedNetworkSliceInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedNssaiList != nil {
		object["allowedNssaiList"], err = json.Marshal(a.AllowedNssaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiList': %w", err)
		}
	}

	if a.CandidateAmfList != nil {
		object["candidateAmfList"], err = json.Marshal(a.CandidateAmfList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'candidateAmfList': %w", err)
		}
	}

	if a.ConfiguredNssai != nil {
		object["configuredNssai"], err = json.Marshal(a.ConfiguredNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'configuredNssai': %w", err)
		}
	}

	if a.NrfAmfSet != nil {
		object["nrfAmfSet"], err = json.Marshal(a.NrfAmfSet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAmfSet': %w", err)
		}
	}

	if a.NrfAmfSetAccessTokenUri != nil {
		object["nrfAmfSetAccessTokenUri"], err = json.Marshal(a.NrfAmfSetAccessTokenUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAmfSetAccessTokenUri': %w", err)
		}
	}

	if a.NrfAmfSetNfMgtUri != nil {
		object["nrfAmfSetNfMgtUri"], err = json.Marshal(a.NrfAmfSetNfMgtUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAmfSetNfMgtUri': %w", err)
		}
	}

	if a.NsiInformation != nil {
		object["nsiInformation"], err = json.Marshal(a.NsiInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiInformation': %w", err)
		}
	}

	if a.RejectedNssaiInPlmn != nil {
		object["rejectedNssaiInPlmn"], err = json.Marshal(a.RejectedNssaiInPlmn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rejectedNssaiInPlmn': %w", err)
		}
	}

	if a.RejectedNssaiInTa != nil {
		object["rejectedNssaiInTa"], err = json.Marshal(a.RejectedNssaiInTa)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rejectedNssaiInTa': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.TargetAmfServiceSet != nil {
		object["targetAmfServiceSet"], err = json.Marshal(a.TargetAmfServiceSet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetAmfServiceSet': %w", err)
		}
	}

	if a.TargetAmfSet != nil {
		object["targetAmfSet"], err = json.Marshal(a.TargetAmfSet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetAmfSet': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ConfiguredSnssai. Returns the specified
// element and whether it was found
func (a ConfiguredSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConfiguredSnssai
func (a *ConfiguredSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConfiguredSnssai to handle AdditionalProperties
func (a *ConfiguredSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["configuredSnssai"]; found {
		err = json.Unmarshal(raw, &a.ConfiguredSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'configuredSnssai': %w", err)
		}
		delete(object, "configuredSnssai")
	}

	if raw, found := object["mappedHomeSnssai"]; found {
		err = json.Unmarshal(raw, &a.MappedHomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappedHomeSnssai': %w", err)
		}
		delete(object, "mappedHomeSnssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConfiguredSnssai to handle AdditionalProperties
func (a ConfiguredSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["configuredSnssai"], err = json.Marshal(a.ConfiguredSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'configuredSnssai': %w", err)
	}

	if a.MappedHomeSnssai != nil {
		object["mappedHomeSnssai"], err = json.Marshal(a.MappedHomeSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappedHomeSnssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MappingOfSnssai. Returns the specified
// element and whether it was found
func (a MappingOfSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MappingOfSnssai
func (a *MappingOfSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MappingOfSnssai to handle AdditionalProperties
func (a *MappingOfSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["homeSnssai"]; found {
		err = json.Unmarshal(raw, &a.HomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'homeSnssai': %w", err)
		}
		delete(object, "homeSnssai")
	}

	if raw, found := object["servingSnssai"]; found {
		err = json.Unmarshal(raw, &a.ServingSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'servingSnssai': %w", err)
		}
		delete(object, "servingSnssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MappingOfSnssai to handle AdditionalProperties
func (a MappingOfSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["homeSnssai"], err = json.Marshal(a.HomeSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'homeSnssai': %w", err)
	}

	object["servingSnssai"], err = json.Marshal(a.ServingSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingSnssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NsiInformation. Returns the specified
// element and whether it was found
func (a NsiInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NsiInformation
func (a *NsiInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NsiInformation to handle AdditionalProperties
func (a *NsiInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["nrfAccessTokenUri"]; found {
		err = json.Unmarshal(raw, &a.NrfAccessTokenUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfAccessTokenUri': %w", err)
		}
		delete(object, "nrfAccessTokenUri")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["nrfNfMgtUri"]; found {
		err = json.Unmarshal(raw, &a.NrfNfMgtUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfNfMgtUri': %w", err)
		}
		delete(object, "nrfNfMgtUri")
	}

	if raw, found := object["nsiId"]; found {
		err = json.Unmarshal(raw, &a.NsiId)
		if err != nil {
			return fmt.Errorf("error reading 'nsiId': %w", err)
		}
		delete(object, "nsiId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NsiInformation to handle AdditionalProperties
func (a NsiInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NrfAccessTokenUri != nil {
		object["nrfAccessTokenUri"], err = json.Marshal(a.NrfAccessTokenUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfAccessTokenUri': %w", err)
		}
	}

	object["nrfId"], err = json.Marshal(a.NrfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
	}

	if a.NrfNfMgtUri != nil {
		object["nrfNfMgtUri"], err = json.Marshal(a.NrfNfMgtUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfNfMgtUri': %w", err)
		}
	}

	if a.NsiId != nil {
		object["nsiId"], err = json.Marshal(a.NsiId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nsiId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SliceInfoForPDUSession. Returns the specified
// element and whether it was found
func (a SliceInfoForPDUSession) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SliceInfoForPDUSession
func (a *SliceInfoForPDUSession) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SliceInfoForPDUSession to handle AdditionalProperties
func (a *SliceInfoForPDUSession) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["homeSnssai"]; found {
		err = json.Unmarshal(raw, &a.HomeSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'homeSnssai': %w", err)
		}
		delete(object, "homeSnssai")
	}

	if raw, found := object["roamingIndication"]; found {
		err = json.Unmarshal(raw, &a.RoamingIndication)
		if err != nil {
			return fmt.Errorf("error reading 'roamingIndication': %w", err)
		}
		delete(object, "roamingIndication")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SliceInfoForPDUSession to handle AdditionalProperties
func (a SliceInfoForPDUSession) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.HomeSnssai != nil {
		object["homeSnssai"], err = json.Marshal(a.HomeSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'homeSnssai': %w", err)
		}
	}

	object["roamingIndication"], err = json.Marshal(a.RoamingIndication)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'roamingIndication': %w", err)
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SliceInfoForRegistration. Returns the specified
// element and whether it was found
func (a SliceInfoForRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SliceInfoForRegistration
func (a *SliceInfoForRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SliceInfoForRegistration to handle AdditionalProperties
func (a *SliceInfoForRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNssaiCurrentAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiCurrentAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiCurrentAccess': %w", err)
		}
		delete(object, "allowedNssaiCurrentAccess")
	}

	if raw, found := object["allowedNssaiOtherAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiOtherAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiOtherAccess': %w", err)
		}
		delete(object, "allowedNssaiOtherAccess")
	}

	if raw, found := object["defaultConfiguredSnssaiInd"]; found {
		err = json.Unmarshal(raw, &a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return fmt.Errorf("error reading 'defaultConfiguredSnssaiInd': %w", err)
		}
		delete(object, "defaultConfiguredSnssaiInd")
	}

	if raw, found := object["mappingOfNssai"]; found {
		err = json.Unmarshal(raw, &a.MappingOfNssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappingOfNssai': %w", err)
		}
		delete(object, "mappingOfNssai")
	}

	if raw, found := object["requestMapping"]; found {
		err = json.Unmarshal(raw, &a.RequestMapping)
		if err != nil {
			return fmt.Errorf("error reading 'requestMapping': %w", err)
		}
		delete(object, "requestMapping")
	}

	if raw, found := object["requestedNssai"]; found {
		err = json.Unmarshal(raw, &a.RequestedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'requestedNssai': %w", err)
		}
		delete(object, "requestedNssai")
	}

	if raw, found := object["sNssaiForMapping"]; found {
		err = json.Unmarshal(raw, &a.SNssaiForMapping)
		if err != nil {
			return fmt.Errorf("error reading 'sNssaiForMapping': %w", err)
		}
		delete(object, "sNssaiForMapping")
	}

	if raw, found := object["subscribedNssai"]; found {
		err = json.Unmarshal(raw, &a.SubscribedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedNssai': %w", err)
		}
		delete(object, "subscribedNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SliceInfoForRegistration to handle AdditionalProperties
func (a SliceInfoForRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedNssaiCurrentAccess != nil {
		object["allowedNssaiCurrentAccess"], err = json.Marshal(a.AllowedNssaiCurrentAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiCurrentAccess': %w", err)
		}
	}

	if a.AllowedNssaiOtherAccess != nil {
		object["allowedNssaiOtherAccess"], err = json.Marshal(a.AllowedNssaiOtherAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiOtherAccess': %w", err)
		}
	}

	if a.DefaultConfiguredSnssaiInd != nil {
		object["defaultConfiguredSnssaiInd"], err = json.Marshal(a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultConfiguredSnssaiInd': %w", err)
		}
	}

	if a.MappingOfNssai != nil {
		object["mappingOfNssai"], err = json.Marshal(a.MappingOfNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingOfNssai': %w", err)
		}
	}

	if a.RequestMapping != nil {
		object["requestMapping"], err = json.Marshal(a.RequestMapping)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestMapping': %w", err)
		}
	}

	if a.RequestedNssai != nil {
		object["requestedNssai"], err = json.Marshal(a.RequestedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestedNssai': %w", err)
		}
	}

	if a.SNssaiForMapping != nil {
		object["sNssaiForMapping"], err = json.Marshal(a.SNssaiForMapping)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssaiForMapping': %w", err)
		}
	}

	if a.SubscribedNssai != nil {
		object["subscribedNssai"], err = json.Marshal(a.SubscribedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SliceInfoForUEConfigurationUpdate. Returns the specified
// element and whether it was found
func (a SliceInfoForUEConfigurationUpdate) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SliceInfoForUEConfigurationUpdate
func (a *SliceInfoForUEConfigurationUpdate) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SliceInfoForUEConfigurationUpdate to handle AdditionalProperties
func (a *SliceInfoForUEConfigurationUpdate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedNssaiCurrentAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiCurrentAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiCurrentAccess': %w", err)
		}
		delete(object, "allowedNssaiCurrentAccess")
	}

	if raw, found := object["allowedNssaiOtherAccess"]; found {
		err = json.Unmarshal(raw, &a.AllowedNssaiOtherAccess)
		if err != nil {
			return fmt.Errorf("error reading 'allowedNssaiOtherAccess': %w", err)
		}
		delete(object, "allowedNssaiOtherAccess")
	}

	if raw, found := object["defaultConfiguredSnssaiInd"]; found {
		err = json.Unmarshal(raw, &a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return fmt.Errorf("error reading 'defaultConfiguredSnssaiInd': %w", err)
		}
		delete(object, "defaultConfiguredSnssaiInd")
	}

	if raw, found := object["mappingOfNssai"]; found {
		err = json.Unmarshal(raw, &a.MappingOfNssai)
		if err != nil {
			return fmt.Errorf("error reading 'mappingOfNssai': %w", err)
		}
		delete(object, "mappingOfNssai")
	}

	if raw, found := object["requestedNssai"]; found {
		err = json.Unmarshal(raw, &a.RequestedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'requestedNssai': %w", err)
		}
		delete(object, "requestedNssai")
	}

	if raw, found := object["subscribedNssai"]; found {
		err = json.Unmarshal(raw, &a.SubscribedNssai)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedNssai': %w", err)
		}
		delete(object, "subscribedNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SliceInfoForUEConfigurationUpdate to handle AdditionalProperties
func (a SliceInfoForUEConfigurationUpdate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AllowedNssaiCurrentAccess != nil {
		object["allowedNssaiCurrentAccess"], err = json.Marshal(a.AllowedNssaiCurrentAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiCurrentAccess': %w", err)
		}
	}

	if a.AllowedNssaiOtherAccess != nil {
		object["allowedNssaiOtherAccess"], err = json.Marshal(a.AllowedNssaiOtherAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedNssaiOtherAccess': %w", err)
		}
	}

	if a.DefaultConfiguredSnssaiInd != nil {
		object["defaultConfiguredSnssaiInd"], err = json.Marshal(a.DefaultConfiguredSnssaiInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultConfiguredSnssaiInd': %w", err)
		}
	}

	if a.MappingOfNssai != nil {
		object["mappingOfNssai"], err = json.Marshal(a.MappingOfNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mappingOfNssai': %w", err)
		}
	}

	if a.RequestedNssai != nil {
		object["requestedNssai"], err = json.Marshal(a.RequestedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestedNssai': %w", err)
		}
	}

	if a.SubscribedNssai != nil {
		object["subscribedNssai"], err = json.Marshal(a.SubscribedNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscribedSnssai. Returns the specified
// element and whether it was found
func (a SubscribedSnssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscribedSnssai
func (a *SubscribedSnssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscribedSnssai to handle AdditionalProperties
func (a *SubscribedSnssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["defaultIndication"]; found {
		err = json.Unmarshal(raw, &a.DefaultIndication)
		if err != nil {
			return fmt.Errorf("error reading 'defaultIndication': %w", err)
		}
		delete(object, "defaultIndication")
	}

	if raw, found := object["subscribedSnssai"]; found {
		err = json.Unmarshal(raw, &a.SubscribedSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedSnssai': %w", err)
		}
		delete(object, "subscribedSnssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscribedSnssai to handle AdditionalProperties
func (a SubscribedSnssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DefaultIndication != nil {
		object["defaultIndication"], err = json.Marshal(a.DefaultIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultIndication': %w", err)
		}
	}

	object["subscribedSnssai"], err = json.Marshal(a.SubscribedSnssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subscribedSnssai': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NSSelectionGet request
	NSSelectionGet(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NSSelectionGet(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSelectionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNSSelectionGetRequest generates requests for NSSelectionGet
func NewNSSelectionGetRequest(server string, params *NSSelectionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network-slice-information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nf-type", runtime.ParamLocationQuery, params.NfType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nf-id", runtime.ParamLocationQuery, params.NfId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SliceInfoRequestForRegistration != nil {

			if queryParamBuf, err := json.Marshal(*params.SliceInfoRequestForRegistration); err != nil {
				return nil, err
			} else {
				queryValues.Add("slice-info-request-for-registration", string(queryParamBuf))
			}

		}

		if params.SliceInfoRequestForPduSession != nil {

			if queryParamBuf, err := json.Marshal(*params.SliceInfoRequestForPduSession); err != nil {
				return nil, err
			} else {
				queryValues.Add("slice-info-request-for-pdu-session", string(queryParamBuf))
			}

		}

		if params.SliceInfoRequestForUeCu != nil {

			if queryParamBuf, err := json.Marshal(*params.SliceInfoRequestForUeCu); err != nil {
				return nil, err
			} else {
				queryValues.Add("slice-info-request-for-ue-cu", string(queryParamBuf))
			}

		}

		if params.HomePlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.HomePlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("home-plmn-id", string(queryParamBuf))
			}

		}

		if params.Tai != nil {

			if queryParamBuf, err := json.Marshal(*params.Tai); err != nil {
				return nil, err
			} else {
				queryValues.Add("tai", string(queryParamBuf))
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NSSelectionGetWithResponse request
	NSSelectionGetWithResponse(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*NSSelectionGetResponse, error)
}

type NSSelectionGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AuthorizedNetworkSliceInfo
	JSON307                   *externalRef0.N307
	JSON308                   *externalRef0.N308
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON401 *externalRef0.N401
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON414 *externalRef0.N414
	ApplicationproblemJSON429 *externalRef0.N429
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r NSSelectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSelectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NSSelectionGetWithResponse request returning *NSSelectionGetResponse
func (c *ClientWithResponses) NSSelectionGetWithResponse(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*NSSelectionGetResponse, error) {
	rsp, err := c.NSSelectionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSelectionGetResponse(rsp)
}

// ParseNSSelectionGetResponse parses an HTTP response from a NSSelectionGetWithResponse call
func ParseNSSelectionGetResponse(rsp *http.Response) (*NSSelectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSelectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizedNetworkSliceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve the Network Slice Selection Information
	// (GET /network-slice-information)
	NSSelectionGet(c *gin.Context, params NSSelectionGetParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// NSSelectionGet operation middleware
func (siw *ServerInterfaceWrapper) NSSelectionGet(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nsselection"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NSSelectionGetParams

	// ------------- Required query parameter "nf-type" -------------

	if paramValue := c.Query("nf-type"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument nf-type is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "nf-type", c.Request.URL.Query(), &params.NfType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nf-type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "nf-id" -------------

	if paramValue := c.Query("nf-id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument nf-id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "nf-id", c.Request.URL.Query(), &params.NfId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nf-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "slice-info-request-for-registration" -------------

	if paramValue := c.Query("slice-info-request-for-registration"); paramValue != "" {

		var value SliceInfoForRegistration
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'slice-info-request-for-registration' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SliceInfoRequestForRegistration = &value

	}

	// ------------- Optional query parameter "slice-info-request-for-pdu-session" -------------

	if paramValue := c.Query("slice-info-request-for-pdu-session"); paramValue != "" {

		var value SliceInfoForPDUSession
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'slice-info-request-for-pdu-session' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SliceInfoRequestForPduSession = &value

	}

	// ------------- Optional query parameter "slice-info-request-for-ue-cu" -------------

	if paramValue := c.Query("slice-info-request-for-ue-cu"); paramValue != "" {

		var value SliceInfoForUEConfigurationUpdate
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'slice-info-request-for-ue-cu' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SliceInfoRequestForUeCu = &value

	}

	// ------------- Optional query parameter "home-plmn-id" -------------

	if paramValue := c.Query("home-plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'home-plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.HomePlmnId = &value

	}

	// ------------- Optional query parameter "tai" -------------

	if paramValue := c.Query("tai"); paramValue != "" {

		var value externalRef0.Tai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'tai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Tai = &value

	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSelectionGet(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/network-slice-information", wrapper.NSSelectionGet)
}

type NSSelectionGetRequestObject struct {
	Params NSSelectionGetParams
}

type NSSelectionGetResponseObject interface {
	VisitNSSelectionGetResponse(w http.ResponseWriter) error
}

type NSSelectionGet200JSONResponse AuthorizedNetworkSliceInfo

func (response NSSelectionGet200JSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSelectionGet307JSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSelectionGet308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSelectionGet308JSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSelectionGet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet400ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet401ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet403ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet404ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet406Response externalRef0.N406Response

func (response NSSelectionGet406Response) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type NSSelectionGet414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet414ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet429ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet500ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet503ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type NSSelectionGetdefaultResponse struct {
	StatusCode int
}

func (response NSSelectionGetdefaultResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve the Network Slice Selection Information
	// (GET /network-slice-information)
	NSSelectionGet(ctx context.Context, request NSSelectionGetRequestObject) (NSSelectionGetResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// NSSelectionGet operation middleware
func (sh *strictHandler) NSSelectionGet(ctx *gin.Context, params NSSelectionGetParams) {
	var request NSSelectionGetRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSelectionGet(ctx, request.(NSSelectionGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSelectionGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSelectionGetResponseObject); ok {
		if err := validResponse.VisitNSSelectionGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
