// Package selection provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package selection

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// NSSelectionGetParams defines parameters for NSSelectionGet.
type NSSelectionGetParams struct {
	// NfType NF type of the NF service consumer
	NfType externalRef0.NFType `form:"nf-type" json:"nf-type"`

	// NfId NF Instance ID of the NF service consumer
	NfId externalRef0.NfInstanceId `form:"nf-id" json:"nf-id"`

	// SliceInfoRequestForRegistration Requested network slice information during Registration procedure
	SliceInfoRequestForRegistration *externalRef0.SliceInfoForRegistration `form:"slice-info-request-for-registration,omitempty" json:"slice-info-request-for-registration,omitempty"`

	// SliceInfoRequestForPduSession Requested network slice information during PDU session establishment procedure
	SliceInfoRequestForPduSession *externalRef0.SliceInfoForPDUSession `form:"slice-info-request-for-pdu-session,omitempty" json:"slice-info-request-for-pdu-session,omitempty"`

	// SliceInfoRequestForUeCu Requested network slice information during UE confuguration update procedure
	SliceInfoRequestForUeCu *externalRef0.SliceInfoForUEConfigurationUpdate `form:"slice-info-request-for-ue-cu,omitempty" json:"slice-info-request-for-ue-cu,omitempty"`

	// SliceInfoRequestForPdnConnection Requested network slice information during PDN Connection establishment procedure
	SliceInfoRequestForPdnConnection *[]externalRef0.Snssai `form:"slice-info-request-for-pdn-connection,omitempty" json:"slice-info-request-for-pdn-connection,omitempty"`

	// HomePlmnId PLMN ID of the HPLMN
	HomePlmnId *externalRef0.PlmnId `form:"home-plmn-id,omitempty" json:"home-plmn-id,omitempty"`

	// Tai TAI of the UE
	Tai *externalRef0.Tai `form:"tai,omitempty" json:"tai,omitempty"`

	// SupportedFeatures Features required to be supported by the NFs in the target slice instance
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NSSelectionGet request
	NSSelectionGet(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NSSelectionGet(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNSSelectionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNSSelectionGetRequest generates requests for NSSelectionGet
func NewNSSelectionGetRequest(server string, params *NSSelectionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/network-slice-information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nf-type", runtime.ParamLocationQuery, params.NfType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nf-id", runtime.ParamLocationQuery, params.NfId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SliceInfoRequestForRegistration != nil {

			if queryParamBuf, err := json.Marshal(*params.SliceInfoRequestForRegistration); err != nil {
				return nil, err
			} else {
				queryValues.Add("slice-info-request-for-registration", string(queryParamBuf))
			}

		}

		if params.SliceInfoRequestForPduSession != nil {

			if queryParamBuf, err := json.Marshal(*params.SliceInfoRequestForPduSession); err != nil {
				return nil, err
			} else {
				queryValues.Add("slice-info-request-for-pdu-session", string(queryParamBuf))
			}

		}

		if params.SliceInfoRequestForUeCu != nil {

			if queryParamBuf, err := json.Marshal(*params.SliceInfoRequestForUeCu); err != nil {
				return nil, err
			} else {
				queryValues.Add("slice-info-request-for-ue-cu", string(queryParamBuf))
			}

		}

		if params.SliceInfoRequestForPdnConnection != nil {

			if queryParamBuf, err := json.Marshal(*params.SliceInfoRequestForPdnConnection); err != nil {
				return nil, err
			} else {
				queryValues.Add("slice-info-request-for-pdn-connection", string(queryParamBuf))
			}

		}

		if params.HomePlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.HomePlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("home-plmn-id", string(queryParamBuf))
			}

		}

		if params.Tai != nil {

			if queryParamBuf, err := json.Marshal(*params.Tai); err != nil {
				return nil, err
			} else {
				queryValues.Add("tai", string(queryParamBuf))
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NSSelectionGetWithResponse request
	NSSelectionGetWithResponse(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*NSSelectionGetResponse, error)
}

type NSSelectionGetResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AuthorizedNetworkSliceInfo
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NSSelectionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NSSelectionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NSSelectionGetWithResponse request returning *NSSelectionGetResponse
func (c *ClientWithResponses) NSSelectionGetWithResponse(ctx context.Context, params *NSSelectionGetParams, reqEditors ...RequestEditorFn) (*NSSelectionGetResponse, error) {
	rsp, err := c.NSSelectionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNSSelectionGetResponse(rsp)
}

// ParseNSSelectionGetResponse parses an HTTP response from a NSSelectionGetWithResponse call
func ParseNSSelectionGetResponse(rsp *http.Response) (*NSSelectionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NSSelectionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AuthorizedNetworkSliceInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve the Network Slice Selection Information
	// (GET /network-slice-information)
	NSSelectionGet(c *gin.Context, params NSSelectionGetParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// NSSelectionGet operation middleware
func (siw *ServerInterfaceWrapper) NSSelectionGet(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nnssf-nsselection"})

	// Parameter object where we will unmarshal all parameters from the context
	var params NSSelectionGetParams

	// ------------- Required query parameter "nf-type" -------------

	if paramValue := c.Query("nf-type"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument nf-type is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "nf-type", c.Request.URL.Query(), &params.NfType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nf-type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "nf-id" -------------

	if paramValue := c.Query("nf-id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument nf-id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "nf-id", c.Request.URL.Query(), &params.NfId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nf-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "slice-info-request-for-registration" -------------

	if paramValue := c.Query("slice-info-request-for-registration"); paramValue != "" {

		var value externalRef0.SliceInfoForRegistration
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'slice-info-request-for-registration' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SliceInfoRequestForRegistration = &value

	}

	// ------------- Optional query parameter "slice-info-request-for-pdu-session" -------------

	if paramValue := c.Query("slice-info-request-for-pdu-session"); paramValue != "" {

		var value externalRef0.SliceInfoForPDUSession
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'slice-info-request-for-pdu-session' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SliceInfoRequestForPduSession = &value

	}

	// ------------- Optional query parameter "slice-info-request-for-ue-cu" -------------

	if paramValue := c.Query("slice-info-request-for-ue-cu"); paramValue != "" {

		var value externalRef0.SliceInfoForUEConfigurationUpdate
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'slice-info-request-for-ue-cu' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SliceInfoRequestForUeCu = &value

	}

	// ------------- Optional query parameter "slice-info-request-for-pdn-connection" -------------

	if paramValue := c.Query("slice-info-request-for-pdn-connection"); paramValue != "" {

		var value []externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'slice-info-request-for-pdn-connection' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SliceInfoRequestForPdnConnection = &value

	}

	// ------------- Optional query parameter "home-plmn-id" -------------

	if paramValue := c.Query("home-plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'home-plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.HomePlmnId = &value

	}

	// ------------- Optional query parameter "tai" -------------

	if paramValue := c.Query("tai"); paramValue != "" {

		var value externalRef0.Tai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'tai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Tai = &value

	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.NSSelectionGet(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/network-slice-information", wrapper.NSSelectionGet)
}

type NSSelectionGetRequestObject struct {
	Params NSSelectionGetParams
}

type NSSelectionGetResponseObject interface {
	VisitNSSelectionGetResponse(w http.ResponseWriter) error
}

type NSSelectionGet200JSONResponse externalRef0.AuthorizedNetworkSliceInfo

func (response NSSelectionGet200JSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AuthorizedNetworkSliceInfo(response))
}

type NSSelectionGet307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response NSSelectionGet307JSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSelectionGet308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response NSSelectionGet308JSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type NSSelectionGet400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet400ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type NSSelectionGet401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet401ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type NSSelectionGet403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet403ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type NSSelectionGet404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet404ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type NSSelectionGet406Response externalRef0.N406Response

func (response NSSelectionGet406Response) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type NSSelectionGet414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet414ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N414ApplicationProblemPlusJSONResponse))
}

type NSSelectionGet429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet429ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type NSSelectionGet500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet500ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type NSSelectionGet503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response NSSelectionGet503ApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type NSSelectionGetdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response NSSelectionGetdefaultApplicationProblemPlusJSONResponse) VisitNSSelectionGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve the Network Slice Selection Information
	// (GET /network-slice-information)
	NSSelectionGet(ctx context.Context, request NSSelectionGetRequestObject) (NSSelectionGetResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// NSSelectionGet operation middleware
func (sh *strictHandler) NSSelectionGet(ctx *gin.Context, params NSSelectionGetParams) {
	var request NSSelectionGetRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.NSSelectionGet(ctx, request.(NSSelectionGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "NSSelectionGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(NSSelectionGetResponseObject); ok {
		if err := validResponse.VisitNSSelectionGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
