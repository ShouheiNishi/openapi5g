// Package AMpolicy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package AMpolicy

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// CreateIndividualAMPolicyAssociationJSONRequestBody defines body for CreateIndividualAMPolicyAssociation for application/json ContentType.
type CreateIndividualAMPolicyAssociationJSONRequestBody = externalRef0.AMPolicyPolicyAssociationRequest

// ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody defines body for ReportObservedEventTriggersForIndividualAMPolicyAssociation for application/json ContentType.
type ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody = externalRef0.AMPolicyPolicyAssociationUpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateIndividualAMPolicyAssociationWithBody request with any body
	CreateIndividualAMPolicyAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualAMPolicyAssociation(ctx context.Context, body CreateIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualAMPolicyAssociation request
	DeleteIndividualAMPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualAMPolicyAssociation request
	ReadIndividualAMPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBody request with any body
	ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBody(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportObservedEventTriggersForIndividualAMPolicyAssociation(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateIndividualAMPolicyAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAMPolicyAssociationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAMPolicyAssociation(ctx context.Context, body CreateIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAMPolicyAssociationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualAMPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualAMPolicyAssociationRequest(c.Server, polAssoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualAMPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualAMPolicyAssociationRequest(c.Server, polAssoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBody(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportObservedEventTriggersForIndividualAMPolicyAssociationRequestWithBody(c.Server, polAssoId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportObservedEventTriggersForIndividualAMPolicyAssociation(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportObservedEventTriggersForIndividualAMPolicyAssociationRequest(c.Server, polAssoId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateIndividualAMPolicyAssociationRequest calls the generic CreateIndividualAMPolicyAssociation builder with application/json body
func NewCreateIndividualAMPolicyAssociationRequest(server string, body CreateIndividualAMPolicyAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualAMPolicyAssociationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualAMPolicyAssociationRequestWithBody generates requests for CreateIndividualAMPolicyAssociation with any type of body
func NewCreateIndividualAMPolicyAssociationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualAMPolicyAssociationRequest generates requests for DeleteIndividualAMPolicyAssociation
func NewDeleteIndividualAMPolicyAssociationRequest(server string, polAssoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "polAssoId", runtime.ParamLocationPath, polAssoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualAMPolicyAssociationRequest generates requests for ReadIndividualAMPolicyAssociation
func NewReadIndividualAMPolicyAssociationRequest(server string, polAssoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "polAssoId", runtime.ParamLocationPath, polAssoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportObservedEventTriggersForIndividualAMPolicyAssociationRequest calls the generic ReportObservedEventTriggersForIndividualAMPolicyAssociation builder with application/json body
func NewReportObservedEventTriggersForIndividualAMPolicyAssociationRequest(server string, polAssoId string, body ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportObservedEventTriggersForIndividualAMPolicyAssociationRequestWithBody(server, polAssoId, "application/json", bodyReader)
}

// NewReportObservedEventTriggersForIndividualAMPolicyAssociationRequestWithBody generates requests for ReportObservedEventTriggersForIndividualAMPolicyAssociation with any type of body
func NewReportObservedEventTriggersForIndividualAMPolicyAssociationRequestWithBody(server string, polAssoId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "polAssoId", runtime.ParamLocationPath, polAssoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateIndividualAMPolicyAssociationWithBodyWithResponse request with any body
	CreateIndividualAMPolicyAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAMPolicyAssociationResponse, error)

	CreateIndividualAMPolicyAssociationWithResponse(ctx context.Context, body CreateIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAMPolicyAssociationResponse, error)

	// DeleteIndividualAMPolicyAssociationWithResponse request
	DeleteIndividualAMPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*DeleteIndividualAMPolicyAssociationResponse, error)

	// ReadIndividualAMPolicyAssociationWithResponse request
	ReadIndividualAMPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*ReadIndividualAMPolicyAssociationResponse, error)

	// ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBodyWithResponse request with any body
	ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBodyWithResponse(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse, error)

	ReportObservedEventTriggersForIndividualAMPolicyAssociationWithResponse(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse, error)
}

type CreateIndividualAMPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.AMPolicyPolicyAssociation
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualAMPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualAMPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualAMPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualAMPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualAMPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualAMPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AMPolicyPolicyAssociation
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualAMPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualAMPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AMPolicyPolicyUpdate
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateIndividualAMPolicyAssociationWithBodyWithResponse request with arbitrary body returning *CreateIndividualAMPolicyAssociationResponse
func (c *ClientWithResponses) CreateIndividualAMPolicyAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAMPolicyAssociationResponse, error) {
	rsp, err := c.CreateIndividualAMPolicyAssociationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAMPolicyAssociationResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualAMPolicyAssociationWithResponse(ctx context.Context, body CreateIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAMPolicyAssociationResponse, error) {
	rsp, err := c.CreateIndividualAMPolicyAssociation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAMPolicyAssociationResponse(rsp)
}

// DeleteIndividualAMPolicyAssociationWithResponse request returning *DeleteIndividualAMPolicyAssociationResponse
func (c *ClientWithResponses) DeleteIndividualAMPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*DeleteIndividualAMPolicyAssociationResponse, error) {
	rsp, err := c.DeleteIndividualAMPolicyAssociation(ctx, polAssoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualAMPolicyAssociationResponse(rsp)
}

// ReadIndividualAMPolicyAssociationWithResponse request returning *ReadIndividualAMPolicyAssociationResponse
func (c *ClientWithResponses) ReadIndividualAMPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*ReadIndividualAMPolicyAssociationResponse, error) {
	rsp, err := c.ReadIndividualAMPolicyAssociation(ctx, polAssoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualAMPolicyAssociationResponse(rsp)
}

// ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBodyWithResponse request with arbitrary body returning *ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse
func (c *ClientWithResponses) ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBodyWithResponse(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse, error) {
	rsp, err := c.ReportObservedEventTriggersForIndividualAMPolicyAssociationWithBody(ctx, polAssoId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(rsp)
}

func (c *ClientWithResponses) ReportObservedEventTriggersForIndividualAMPolicyAssociationWithResponse(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse, error) {
	rsp, err := c.ReportObservedEventTriggersForIndividualAMPolicyAssociation(ctx, polAssoId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(rsp)
}

// ParseCreateIndividualAMPolicyAssociationResponse parses an HTTP response from a CreateIndividualAMPolicyAssociationWithResponse call
func ParseCreateIndividualAMPolicyAssociationResponse(rsp *http.Response) (*CreateIndividualAMPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualAMPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.AMPolicyPolicyAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualAMPolicyAssociationResponse parses an HTTP response from a DeleteIndividualAMPolicyAssociationWithResponse call
func ParseDeleteIndividualAMPolicyAssociationResponse(rsp *http.Response) (*DeleteIndividualAMPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualAMPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualAMPolicyAssociationResponse parses an HTTP response from a ReadIndividualAMPolicyAssociationWithResponse call
func ParseReadIndividualAMPolicyAssociationResponse(rsp *http.Response) (*ReadIndividualAMPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualAMPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AMPolicyPolicyAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReportObservedEventTriggersForIndividualAMPolicyAssociationResponse parses an HTTP response from a ReportObservedEventTriggersForIndividualAMPolicyAssociationWithResponse call
func ParseReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(rsp *http.Response) (*ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportObservedEventTriggersForIndividualAMPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AMPolicyPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create individual AM policy association.
	// (POST /policies)
	CreateIndividualAMPolicyAssociation(c *gin.Context)
	// Delete individual AM policy association.
	// (DELETE /policies/{polAssoId})
	DeleteIndividualAMPolicyAssociation(c *gin.Context, polAssoId string)
	// Read individual AM policy association.
	// (GET /policies/{polAssoId})
	ReadIndividualAMPolicyAssociation(c *gin.Context, polAssoId string)
	// Report observed event triggers and obtain updated policies for an individual AM policy association.
	// (POST /policies/{polAssoId}/update)
	ReportObservedEventTriggersForIndividualAMPolicyAssociation(c *gin.Context, polAssoId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateIndividualAMPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualAMPolicyAssociation(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-am-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualAMPolicyAssociation(c)
}

// DeleteIndividualAMPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualAMPolicyAssociation(c *gin.Context) {

	var err error

	// ------------- Path parameter "polAssoId" -------------
	var polAssoId string

	err = runtime.BindStyledParameterWithOptions("simple", "polAssoId", c.Param("polAssoId"), &polAssoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter polAssoId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-am-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualAMPolicyAssociation(c, polAssoId)
}

// ReadIndividualAMPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualAMPolicyAssociation(c *gin.Context) {

	var err error

	// ------------- Path parameter "polAssoId" -------------
	var polAssoId string

	err = runtime.BindStyledParameterWithOptions("simple", "polAssoId", c.Param("polAssoId"), &polAssoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter polAssoId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-am-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualAMPolicyAssociation(c, polAssoId)
}

// ReportObservedEventTriggersForIndividualAMPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) ReportObservedEventTriggersForIndividualAMPolicyAssociation(c *gin.Context) {

	var err error

	// ------------- Path parameter "polAssoId" -------------
	var polAssoId string

	err = runtime.BindStyledParameterWithOptions("simple", "polAssoId", c.Param("polAssoId"), &polAssoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter polAssoId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-am-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReportObservedEventTriggersForIndividualAMPolicyAssociation(c, polAssoId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/policies", wrapper.CreateIndividualAMPolicyAssociation)
	router.DELETE(options.BaseURL+"/policies/:polAssoId", wrapper.DeleteIndividualAMPolicyAssociation)
	router.GET(options.BaseURL+"/policies/:polAssoId", wrapper.ReadIndividualAMPolicyAssociation)
	router.POST(options.BaseURL+"/policies/:polAssoId/update", wrapper.ReportObservedEventTriggersForIndividualAMPolicyAssociation)
}

type CreateIndividualAMPolicyAssociationRequestObject struct {
	Body *CreateIndividualAMPolicyAssociationJSONRequestBody
}

type CreateIndividualAMPolicyAssociationResponseObject interface {
	VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error
}

type CreateIndividualAMPolicyAssociation201ResponseHeaders struct {
	Location string
}

type CreateIndividualAMPolicyAssociation201JSONResponse struct {
	Body    externalRef0.AMPolicyPolicyAssociation
	Headers CreateIndividualAMPolicyAssociation201ResponseHeaders
}

func (response CreateIndividualAMPolicyAssociation201JSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation411ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation413ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation415ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualAMPolicyAssociationRequestObject struct {
	PolAssoId string `json:"polAssoId"`
}

type DeleteIndividualAMPolicyAssociationResponseObject interface {
	VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error
}

type DeleteIndividualAMPolicyAssociation204Response struct {
}

func (response DeleteIndividualAMPolicyAssociation204Response) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualAMPolicyAssociation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeleteIndividualAMPolicyAssociation307JSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualAMPolicyAssociation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeleteIndividualAMPolicyAssociation308JSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualAMPolicyAssociationRequestObject struct {
	PolAssoId string `json:"polAssoId"`
}

type ReadIndividualAMPolicyAssociationResponseObject interface {
	VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error
}

type ReadIndividualAMPolicyAssociation200JSONResponse externalRef0.AMPolicyPolicyAssociation

func (response ReadIndividualAMPolicyAssociation200JSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AMPolicyPolicyAssociation(response))
}

type ReadIndividualAMPolicyAssociation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ReadIndividualAMPolicyAssociation307JSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualAMPolicyAssociation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ReadIndividualAMPolicyAssociation308JSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadIndividualAMPolicyAssociation406Response externalRef0.N406Response

func (response ReadIndividualAMPolicyAssociation406Response) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitReadIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociationRequestObject struct {
	PolAssoId string `json:"polAssoId"`
	Body      *ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociationResponseObject interface {
	VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation200JSONResponse externalRef0.AMPolicyPolicyUpdate

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation200JSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AMPolicyPolicyUpdate(response))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation307JSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation308JSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation411ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation413ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation415ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReportObservedEventTriggersForIndividualAMPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create individual AM policy association.
	// (POST /policies)
	CreateIndividualAMPolicyAssociation(ctx context.Context, request CreateIndividualAMPolicyAssociationRequestObject) (CreateIndividualAMPolicyAssociationResponseObject, error)
	// Delete individual AM policy association.
	// (DELETE /policies/{polAssoId})
	DeleteIndividualAMPolicyAssociation(ctx context.Context, request DeleteIndividualAMPolicyAssociationRequestObject) (DeleteIndividualAMPolicyAssociationResponseObject, error)
	// Read individual AM policy association.
	// (GET /policies/{polAssoId})
	ReadIndividualAMPolicyAssociation(ctx context.Context, request ReadIndividualAMPolicyAssociationRequestObject) (ReadIndividualAMPolicyAssociationResponseObject, error)
	// Report observed event triggers and obtain updated policies for an individual AM policy association.
	// (POST /policies/{polAssoId}/update)
	ReportObservedEventTriggersForIndividualAMPolicyAssociation(ctx context.Context, request ReportObservedEventTriggersForIndividualAMPolicyAssociationRequestObject) (ReportObservedEventTriggersForIndividualAMPolicyAssociationResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateIndividualAMPolicyAssociation operation middleware
func (sh *strictHandler) CreateIndividualAMPolicyAssociation(ctx *gin.Context) {
	var request CreateIndividualAMPolicyAssociationRequestObject

	var body CreateIndividualAMPolicyAssociationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualAMPolicyAssociation(ctx, request.(CreateIndividualAMPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualAMPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualAMPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitCreateIndividualAMPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualAMPolicyAssociation operation middleware
func (sh *strictHandler) DeleteIndividualAMPolicyAssociation(ctx *gin.Context, polAssoId string) {
	var request DeleteIndividualAMPolicyAssociationRequestObject

	request.PolAssoId = polAssoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualAMPolicyAssociation(ctx, request.(DeleteIndividualAMPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualAMPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualAMPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualAMPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualAMPolicyAssociation operation middleware
func (sh *strictHandler) ReadIndividualAMPolicyAssociation(ctx *gin.Context, polAssoId string) {
	var request ReadIndividualAMPolicyAssociationRequestObject

	request.PolAssoId = polAssoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualAMPolicyAssociation(ctx, request.(ReadIndividualAMPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualAMPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualAMPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitReadIndividualAMPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportObservedEventTriggersForIndividualAMPolicyAssociation operation middleware
func (sh *strictHandler) ReportObservedEventTriggersForIndividualAMPolicyAssociation(ctx *gin.Context, polAssoId string) {
	var request ReportObservedEventTriggersForIndividualAMPolicyAssociationRequestObject

	request.PolAssoId = polAssoId

	var body ReportObservedEventTriggersForIndividualAMPolicyAssociationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReportObservedEventTriggersForIndividualAMPolicyAssociation(ctx, request.(ReportObservedEventTriggersForIndividualAMPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportObservedEventTriggersForIndividualAMPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReportObservedEventTriggersForIndividualAMPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitReportObservedEventTriggersForIndividualAMPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
