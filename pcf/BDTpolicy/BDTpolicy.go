// Package BDTpolicy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package BDTpolicy

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/northbound/commondata"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// AspId Contains an identity of an application service provider.
type AspId = string

// BdtPolicy Represents an Individual BDT policy resource.
type BdtPolicy struct {
	// BdtPolData Describes the authorization data of an Individual BDT policy resource.
	BdtPolData *BdtPolicyData `json:"bdtPolData,omitempty"`

	// BdtReqData Contains service requirements for creation a new Individual BDT policy resource.
	BdtReqData           *BdtReqData            `json:"bdtReqData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtPolicyData Describes the authorization data of an Individual BDT policy resource.
type BdtPolicyData struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId externalRef1.BdtReferenceId `json:"bdtRefId"`

	// SelTransPolicyId Contains an identity of the selected transfer policy.
	SelTransPolicyId *int                            `json:"selTransPolicyId,omitempty"`
	SuppFeat         *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`

	// TransfPolicies Contains transfer policies.
	TransfPolicies       []TransferPolicy       `json:"transfPolicies"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtPolicyDataPatch A JSON Merge Patch body schema containing modification instruction to be performed on the bdtPolData attribute of the BdtPolicy data structure to select a transfer policy. Adds selTransPolicyId to BdtPolicyData data structure.
type BdtPolicyDataPatch struct {
	// SelTransPolicyId Contains an identity (i.e. transPolicyId value) of the selected transfer policy. If the BdtNotification_5G feature is supported value 0 indicates that no transfer policy is selected.
	SelTransPolicyId     int                    `json:"selTransPolicyId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtReqData Contains service requirements for creation a new Individual BDT policy resource.
type BdtReqData struct {
	// AspId Contains an identity of an application service provider.
	AspId        AspId                   `json:"aspId"`
	DesTimeInt   externalRef1.TimeWindow `json:"desTimeInt"`
	Dnn          *externalRef0.Dnn       `json:"dnn,omitempty"`
	InterGroupId externalRef0.GroupId    `json:"interGroupId,omitempty"`
	NotifUri     *externalRef0.Uri       `json:"notifUri,omitempty"`

	// NumOfUes Indicates a number of UEs.
	NumOfUes int `json:"numOfUes"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo *NetworkAreaInfo                `json:"nwAreaInfo,omitempty"`
	Snssai     *externalRef0.Snssai            `json:"snssai,omitempty"`
	SuppFeat   *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`

	// TrafficDes Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP TS 24.526, octets v+5 to w. (Original reference TS29122_ResourceManagementOfBdt.yaml#/components/schemas/TrafficDescriptor)
	TrafficDes *string                     `json:"trafficDes,omitempty"`
	VolPerUe   externalRef1.UsageThreshold `json:"volPerUe"`

	// WarnNotifReq Indicates whether the BDT warning notification is enabled or disabled.
	WarnNotifReq         *bool                  `json:"warnNotifReq,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BdtReqDataPatch A JSON Merge Patch body schema containing modification instruction to be performed on the bdtReqData attribute of the BdtPolicy data structure to indicate whether the BDT warning notification is enabled or disabled. Modifies warnNotifReq from BdtReqData data structure.
type BdtReqDataPatch struct {
	// WarnNotifReq Indicates whether the BDT warning notification is enabled or disabled.
	WarnNotifReq         *bool                  `json:"warnNotifReq,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NetworkAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
type NetworkAreaInfo struct {
	// Ecgis Contains a list of E-UTRA cell identities.
	Ecgis []externalRef0.Ecgi `json:"ecgis,omitempty"`

	// GRanNodeIds Contains a list of NG RAN nodes.
	GRanNodeIds []externalRef0.GlobalRanNodeId `json:"gRanNodeIds,omitempty"`

	// Ncgis Contains a list of NR cell identities.
	Ncgis []externalRef0.Ncgi `json:"ncgis,omitempty"`

	// Tais Contains a list of tracking area identities.
	Tais                 []externalRef0.Tai     `json:"tais,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Notification Describes a BDT notification.
type Notification struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId externalRef1.BdtReferenceId `json:"bdtRefId"`

	// CandPolicies Contains a list of the candidate transfer policies from which the AF may select a new transfer policy due to a network performance is below the criteria set by the operator.
	CandPolicies []TransferPolicy `json:"candPolicies,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo           *NetworkAreaInfo         `json:"nwAreaInfo,omitempty"`
	TimeWindow           *externalRef1.TimeWindow `json:"timeWindow,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// PatchBdtPolicy Describes the updates in authorization data of an Individual BDT Policy created by the PCF.
type PatchBdtPolicy struct {
	// BdtPolData A JSON Merge Patch body schema containing modification instruction to be performed on the bdtPolData attribute of the BdtPolicy data structure to select a transfer policy. Adds selTransPolicyId to BdtPolicyData data structure.
	BdtPolData *BdtPolicyDataPatch `json:"bdtPolData,omitempty"`

	// BdtReqData A JSON Merge Patch body schema containing modification instruction to be performed on the bdtReqData attribute of the BdtPolicy data structure to indicate whether the BDT warning notification is enabled or disabled. Modifies warnNotifReq from BdtReqData data structure.
	BdtReqData           *BdtReqDataPatch       `json:"bdtReqData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TransferPolicy Describes a transfer policy.
type TransferPolicy struct {
	MaxBitRateDl externalRef0.BitRate `json:"maxBitRateDl,omitempty"`
	MaxBitRateUl externalRef0.BitRate `json:"maxBitRateUl,omitempty"`

	// RatingGroup Indicates a rating group for the recommended time window.
	RatingGroup int                     `json:"ratingGroup"`
	RecTimeInt  externalRef1.TimeWindow `json:"recTimeInt"`

	// TransPolicyId Contains an identity of a transfer policy.
	TransPolicyId        int                    `json:"transPolicyId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CreateBDTPolicyJSONRequestBody defines body for CreateBDTPolicy for application/json ContentType.
type CreateBDTPolicyJSONRequestBody = BdtReqData

// UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody defines body for UpdateBDTPolicy for application/merge-patch+json ContentType.
type UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody = PatchBdtPolicy

// Getter for additional properties for BdtPolicy. Returns the specified
// element and whether it was found
func (a BdtPolicy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicy
func (a *BdtPolicy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicy to handle AdditionalProperties
func (a *BdtPolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtPolData"]; found {
		err = json.Unmarshal(raw, &a.BdtPolData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtPolData': %w", err)
		}
		delete(object, "bdtPolData")
	}

	if raw, found := object["bdtReqData"]; found {
		err = json.Unmarshal(raw, &a.BdtReqData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtReqData': %w", err)
		}
		delete(object, "bdtReqData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicy to handle AdditionalProperties
func (a BdtPolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtPolData != nil {
		object["bdtPolData"], err = json.Marshal(a.BdtPolData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtPolData': %w", err)
		}
	}

	if a.BdtReqData != nil {
		object["bdtReqData"], err = json.Marshal(a.BdtReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtReqData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtPolicyData. Returns the specified
// element and whether it was found
func (a BdtPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicyData
func (a *BdtPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicyData to handle AdditionalProperties
func (a *BdtPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["selTransPolicyId"]; found {
		err = json.Unmarshal(raw, &a.SelTransPolicyId)
		if err != nil {
			return fmt.Errorf("error reading 'selTransPolicyId': %w", err)
		}
		delete(object, "selTransPolicyId")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["transfPolicies"]; found {
		err = json.Unmarshal(raw, &a.TransfPolicies)
		if err != nil {
			return fmt.Errorf("error reading 'transfPolicies': %w", err)
		}
		delete(object, "transfPolicies")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicyData to handle AdditionalProperties
func (a BdtPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	if a.SelTransPolicyId != nil {
		object["selTransPolicyId"], err = json.Marshal(a.SelTransPolicyId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selTransPolicyId': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	object["transfPolicies"], err = json.Marshal(a.TransfPolicies)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'transfPolicies': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtPolicyDataPatch. Returns the specified
// element and whether it was found
func (a BdtPolicyDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicyDataPatch
func (a *BdtPolicyDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicyDataPatch to handle AdditionalProperties
func (a *BdtPolicyDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["selTransPolicyId"]; found {
		err = json.Unmarshal(raw, &a.SelTransPolicyId)
		if err != nil {
			return fmt.Errorf("error reading 'selTransPolicyId': %w", err)
		}
		delete(object, "selTransPolicyId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicyDataPatch to handle AdditionalProperties
func (a BdtPolicyDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["selTransPolicyId"], err = json.Marshal(a.SelTransPolicyId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'selTransPolicyId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtReqData. Returns the specified
// element and whether it was found
func (a BdtReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtReqData
func (a *BdtReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtReqData to handle AdditionalProperties
func (a *BdtReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["desTimeInt"]; found {
		err = json.Unmarshal(raw, &a.DesTimeInt)
		if err != nil {
			return fmt.Errorf("error reading 'desTimeInt': %w", err)
		}
		delete(object, "desTimeInt")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["numOfUes"]; found {
		err = json.Unmarshal(raw, &a.NumOfUes)
		if err != nil {
			return fmt.Errorf("error reading 'numOfUes': %w", err)
		}
		delete(object, "numOfUes")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["trafficDes"]; found {
		err = json.Unmarshal(raw, &a.TrafficDes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficDes': %w", err)
		}
		delete(object, "trafficDes")
	}

	if raw, found := object["volPerUe"]; found {
		err = json.Unmarshal(raw, &a.VolPerUe)
		if err != nil {
			return fmt.Errorf("error reading 'volPerUe': %w", err)
		}
		delete(object, "volPerUe")
	}

	if raw, found := object["warnNotifReq"]; found {
		err = json.Unmarshal(raw, &a.WarnNotifReq)
		if err != nil {
			return fmt.Errorf("error reading 'warnNotifReq': %w", err)
		}
		delete(object, "warnNotifReq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtReqData to handle AdditionalProperties
func (a BdtReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["aspId"], err = json.Marshal(a.AspId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
	}

	object["desTimeInt"], err = json.Marshal(a.DesTimeInt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'desTimeInt': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.NotifUri != nil {
		object["notifUri"], err = json.Marshal(a.NotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
		}
	}

	object["numOfUes"], err = json.Marshal(a.NumOfUes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'numOfUes': %w", err)
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.TrafficDes != nil {
		object["trafficDes"], err = json.Marshal(a.TrafficDes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficDes': %w", err)
		}
	}

	object["volPerUe"], err = json.Marshal(a.VolPerUe)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'volPerUe': %w", err)
	}

	if a.WarnNotifReq != nil {
		object["warnNotifReq"], err = json.Marshal(a.WarnNotifReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'warnNotifReq': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtReqDataPatch. Returns the specified
// element and whether it was found
func (a BdtReqDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtReqDataPatch
func (a *BdtReqDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtReqDataPatch to handle AdditionalProperties
func (a *BdtReqDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["warnNotifReq"]; found {
		err = json.Unmarshal(raw, &a.WarnNotifReq)
		if err != nil {
			return fmt.Errorf("error reading 'warnNotifReq': %w", err)
		}
		delete(object, "warnNotifReq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtReqDataPatch to handle AdditionalProperties
func (a BdtReqDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.WarnNotifReq != nil {
		object["warnNotifReq"], err = json.Marshal(a.WarnNotifReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'warnNotifReq': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkAreaInfo. Returns the specified
// element and whether it was found
func (a NetworkAreaInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkAreaInfo
func (a *NetworkAreaInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkAreaInfo to handle AdditionalProperties
func (a *NetworkAreaInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecgis"]; found {
		err = json.Unmarshal(raw, &a.Ecgis)
		if err != nil {
			return fmt.Errorf("error reading 'ecgis': %w", err)
		}
		delete(object, "ecgis")
	}

	if raw, found := object["gRanNodeIds"]; found {
		err = json.Unmarshal(raw, &a.GRanNodeIds)
		if err != nil {
			return fmt.Errorf("error reading 'gRanNodeIds': %w", err)
		}
		delete(object, "gRanNodeIds")
	}

	if raw, found := object["ncgis"]; found {
		err = json.Unmarshal(raw, &a.Ncgis)
		if err != nil {
			return fmt.Errorf("error reading 'ncgis': %w", err)
		}
		delete(object, "ncgis")
	}

	if raw, found := object["tais"]; found {
		err = json.Unmarshal(raw, &a.Tais)
		if err != nil {
			return fmt.Errorf("error reading 'tais': %w", err)
		}
		delete(object, "tais")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkAreaInfo to handle AdditionalProperties
func (a NetworkAreaInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ecgis) != 0 {
		object["ecgis"], err = json.Marshal(a.Ecgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgis': %w", err)
		}
	}

	if len(a.GRanNodeIds) != 0 {
		object["gRanNodeIds"], err = json.Marshal(a.GRanNodeIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gRanNodeIds': %w", err)
		}
	}

	if len(a.Ncgis) != 0 {
		object["ncgis"], err = json.Marshal(a.Ncgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgis': %w", err)
		}
	}

	if len(a.Tais) != 0 {
		object["tais"], err = json.Marshal(a.Tais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tais': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Notification. Returns the specified
// element and whether it was found
func (a Notification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Notification
func (a *Notification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Notification to handle AdditionalProperties
func (a *Notification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["candPolicies"]; found {
		err = json.Unmarshal(raw, &a.CandPolicies)
		if err != nil {
			return fmt.Errorf("error reading 'candPolicies': %w", err)
		}
		delete(object, "candPolicies")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["timeWindow"]; found {
		err = json.Unmarshal(raw, &a.TimeWindow)
		if err != nil {
			return fmt.Errorf("error reading 'timeWindow': %w", err)
		}
		delete(object, "timeWindow")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Notification to handle AdditionalProperties
func (a Notification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	if len(a.CandPolicies) != 0 {
		object["candPolicies"], err = json.Marshal(a.CandPolicies)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'candPolicies': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.TimeWindow != nil {
		object["timeWindow"], err = json.Marshal(a.TimeWindow)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timeWindow': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PatchBdtPolicy. Returns the specified
// element and whether it was found
func (a PatchBdtPolicy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PatchBdtPolicy
func (a *PatchBdtPolicy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PatchBdtPolicy to handle AdditionalProperties
func (a *PatchBdtPolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtPolData"]; found {
		err = json.Unmarshal(raw, &a.BdtPolData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtPolData': %w", err)
		}
		delete(object, "bdtPolData")
	}

	if raw, found := object["bdtReqData"]; found {
		err = json.Unmarshal(raw, &a.BdtReqData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtReqData': %w", err)
		}
		delete(object, "bdtReqData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PatchBdtPolicy to handle AdditionalProperties
func (a PatchBdtPolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtPolData != nil {
		object["bdtPolData"], err = json.Marshal(a.BdtPolData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtPolData': %w", err)
		}
	}

	if a.BdtReqData != nil {
		object["bdtReqData"], err = json.Marshal(a.BdtReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtReqData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferPolicy. Returns the specified
// element and whether it was found
func (a TransferPolicy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferPolicy
func (a *TransferPolicy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferPolicy to handle AdditionalProperties
func (a *TransferPolicy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxBitRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxBitRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxBitRateDl': %w", err)
		}
		delete(object, "maxBitRateDl")
	}

	if raw, found := object["maxBitRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxBitRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxBitRateUl': %w", err)
		}
		delete(object, "maxBitRateUl")
	}

	if raw, found := object["ratingGroup"]; found {
		err = json.Unmarshal(raw, &a.RatingGroup)
		if err != nil {
			return fmt.Errorf("error reading 'ratingGroup': %w", err)
		}
		delete(object, "ratingGroup")
	}

	if raw, found := object["recTimeInt"]; found {
		err = json.Unmarshal(raw, &a.RecTimeInt)
		if err != nil {
			return fmt.Errorf("error reading 'recTimeInt': %w", err)
		}
		delete(object, "recTimeInt")
	}

	if raw, found := object["transPolicyId"]; found {
		err = json.Unmarshal(raw, &a.TransPolicyId)
		if err != nil {
			return fmt.Errorf("error reading 'transPolicyId': %w", err)
		}
		delete(object, "transPolicyId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferPolicy to handle AdditionalProperties
func (a TransferPolicy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.MaxBitRateDl) != 0 {
		object["maxBitRateDl"], err = json.Marshal(a.MaxBitRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxBitRateDl': %w", err)
		}
	}

	if len(a.MaxBitRateUl) != 0 {
		object["maxBitRateUl"], err = json.Marshal(a.MaxBitRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxBitRateUl': %w", err)
		}
	}

	object["ratingGroup"], err = json.Marshal(a.RatingGroup)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratingGroup': %w", err)
	}

	object["recTimeInt"], err = json.Marshal(a.RecTimeInt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'recTimeInt': %w", err)
	}

	object["transPolicyId"], err = json.Marshal(a.TransPolicyId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'transPolicyId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateBDTPolicyWithBody request with any body
	CreateBDTPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBDTPolicy(ctx context.Context, body CreateBDTPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBDTPolicy request
	GetBDTPolicy(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBDTPolicyWithBody request with any body
	UpdateBDTPolicyWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBDTPolicyWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtPolicyId string, body UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateBDTPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBDTPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBDTPolicy(ctx context.Context, body CreateBDTPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBDTPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBDTPolicy(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBDTPolicyRequest(c.Server, bdtPolicyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBDTPolicyWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBDTPolicyRequestWithBody(c.Server, bdtPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBDTPolicyWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtPolicyId string, body UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBDTPolicyRequestWithApplicationMergePatchPlusJSONBody(c.Server, bdtPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateBDTPolicyRequest calls the generic CreateBDTPolicy builder with application/json body
func NewCreateBDTPolicyRequest(server string, body CreateBDTPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBDTPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBDTPolicyRequestWithBody generates requests for CreateBDTPolicy with any type of body
func NewCreateBDTPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bdtpolicies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBDTPolicyRequest generates requests for GetBDTPolicy
func NewGetBDTPolicyRequest(server string, bdtPolicyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bdtpolicies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBDTPolicyRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateBDTPolicy builder with application/merge-patch+json body
func NewUpdateBDTPolicyRequestWithApplicationMergePatchPlusJSONBody(server string, bdtPolicyId string, body UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBDTPolicyRequestWithBody(server, bdtPolicyId, "application/merge-patch+json", bodyReader)
}

// NewUpdateBDTPolicyRequestWithBody generates requests for UpdateBDTPolicy with any type of body
func NewUpdateBDTPolicyRequestWithBody(server string, bdtPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bdtpolicies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateBDTPolicyWithBodyWithResponse request with any body
	CreateBDTPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBDTPolicyResponse, error)

	CreateBDTPolicyWithResponse(ctx context.Context, body CreateBDTPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBDTPolicyResponse, error)

	// GetBDTPolicyWithResponse request
	GetBDTPolicyWithResponse(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*GetBDTPolicyResponse, error)

	// UpdateBDTPolicyWithBodyWithResponse request with any body
	UpdateBDTPolicyWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBDTPolicyResponse, error)

	UpdateBDTPolicyWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtPolicyId string, body UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBDTPolicyResponse, error)
}

type CreateBDTPolicyResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *BdtPolicy
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateBDTPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBDTPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBDTPolicyResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BdtPolicy
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetBDTPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBDTPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBDTPolicyResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BdtPolicy
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateBDTPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBDTPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateBDTPolicyWithBodyWithResponse request with arbitrary body returning *CreateBDTPolicyResponse
func (c *ClientWithResponses) CreateBDTPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBDTPolicyResponse, error) {
	rsp, err := c.CreateBDTPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBDTPolicyResponse(rsp)
}

func (c *ClientWithResponses) CreateBDTPolicyWithResponse(ctx context.Context, body CreateBDTPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBDTPolicyResponse, error) {
	rsp, err := c.CreateBDTPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBDTPolicyResponse(rsp)
}

// GetBDTPolicyWithResponse request returning *GetBDTPolicyResponse
func (c *ClientWithResponses) GetBDTPolicyWithResponse(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*GetBDTPolicyResponse, error) {
	rsp, err := c.GetBDTPolicy(ctx, bdtPolicyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBDTPolicyResponse(rsp)
}

// UpdateBDTPolicyWithBodyWithResponse request with arbitrary body returning *UpdateBDTPolicyResponse
func (c *ClientWithResponses) UpdateBDTPolicyWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBDTPolicyResponse, error) {
	rsp, err := c.UpdateBDTPolicyWithBody(ctx, bdtPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBDTPolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdateBDTPolicyWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtPolicyId string, body UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBDTPolicyResponse, error) {
	rsp, err := c.UpdateBDTPolicyWithApplicationMergePatchPlusJSONBody(ctx, bdtPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBDTPolicyResponse(rsp)
}

// ParseCreateBDTPolicyResponse parses an HTTP response from a CreateBDTPolicyWithResponse call
func ParseCreateBDTPolicyResponse(rsp *http.Response) (*CreateBDTPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBDTPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BdtPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 303:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetBDTPolicyResponse parses an HTTP response from a GetBDTPolicyWithResponse call
func ParseGetBDTPolicyResponse(rsp *http.Response) (*GetBDTPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBDTPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BdtPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateBDTPolicyResponse parses an HTTP response from a UpdateBDTPolicyWithResponse call
func ParseUpdateBDTPolicyResponse(rsp *http.Response) (*UpdateBDTPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBDTPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BdtPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new Individual BDT policy
	// (POST /bdtpolicies)
	CreateBDTPolicy(c *gin.Context)
	// Read an Individual BDT policy
	// (GET /bdtpolicies/{bdtPolicyId})
	GetBDTPolicy(c *gin.Context, bdtPolicyId string)
	// Update an Individual BDT policy
	// (PATCH /bdtpolicies/{bdtPolicyId})
	UpdateBDTPolicy(c *gin.Context, bdtPolicyId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateBDTPolicy operation middleware
func (siw *ServerInterfaceWrapper) CreateBDTPolicy(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-bdtpolicycontrol"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBDTPolicy(c)
}

// GetBDTPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetBDTPolicy(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameter("simple", false, "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-bdtpolicycontrol"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBDTPolicy(c, bdtPolicyId)
}

// UpdateBDTPolicy operation middleware
func (siw *ServerInterfaceWrapper) UpdateBDTPolicy(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameter("simple", false, "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-bdtpolicycontrol"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateBDTPolicy(c, bdtPolicyId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/bdtpolicies", wrapper.CreateBDTPolicy)
	router.GET(options.BaseURL+"/bdtpolicies/:bdtPolicyId", wrapper.GetBDTPolicy)
	router.PATCH(options.BaseURL+"/bdtpolicies/:bdtPolicyId", wrapper.UpdateBDTPolicy)
}

type CreateBDTPolicyRequestObject struct {
	Body *CreateBDTPolicyJSONRequestBody
}

type CreateBDTPolicyResponseObject interface {
	VisitCreateBDTPolicyResponse(w http.ResponseWriter) error
}

type CreateBDTPolicy201ResponseHeaders struct {
	Location string
}

type CreateBDTPolicy201JSONResponse struct {
	Body    BdtPolicy
	Headers CreateBDTPolicy201ResponseHeaders
}

func (response CreateBDTPolicy201JSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateBDTPolicy303ResponseHeaders struct {
	Location string
}

type CreateBDTPolicy303Response struct {
	Headers CreateBDTPolicy303ResponseHeaders
}

func (response CreateBDTPolicy303Response) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type CreateBDTPolicy400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy400ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy401ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy403ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy404ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy411ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy413ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy415ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy429ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy500ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicy503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateBDTPolicy503ApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateBDTPolicydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateBDTPolicydefaultApplicationProblemPlusJSONResponse) VisitCreateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetBDTPolicyRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
}

type GetBDTPolicyResponseObject interface {
	VisitGetBDTPolicyResponse(w http.ResponseWriter) error
}

type GetBDTPolicy200JSONResponse BdtPolicy

func (response GetBDTPolicy200JSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(BdtPolicy(response))
}

type GetBDTPolicy307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response GetBDTPolicy307JSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetBDTPolicy308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response GetBDTPolicy308JSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetBDTPolicy400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetBDTPolicy400ApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetBDTPolicy401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response GetBDTPolicy401ApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type GetBDTPolicy403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetBDTPolicy403ApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GetBDTPolicy404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetBDTPolicy404ApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetBDTPolicy406Response externalRef0.N406Response

func (response GetBDTPolicy406Response) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type GetBDTPolicy429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response GetBDTPolicy429ApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type GetBDTPolicy500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetBDTPolicy500ApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetBDTPolicy503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetBDTPolicy503ApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetBDTPolicydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetBDTPolicydefaultApplicationProblemPlusJSONResponse) VisitGetBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateBDTPolicyRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
	Body        *UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody
}

type UpdateBDTPolicyResponseObject interface {
	VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error
}

type UpdateBDTPolicy200JSONResponse BdtPolicy

func (response UpdateBDTPolicy200JSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(BdtPolicy(response))
}

type UpdateBDTPolicy204Response struct {
}

func (response UpdateBDTPolicy204Response) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateBDTPolicy307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response UpdateBDTPolicy307JSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateBDTPolicy308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response UpdateBDTPolicy308JSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateBDTPolicy400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy400ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy401ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy403ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy404ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy411ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy413ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy415ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy429ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy500ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicy503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateBDTPolicy503ApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateBDTPolicydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateBDTPolicydefaultApplicationProblemPlusJSONResponse) VisitUpdateBDTPolicyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new Individual BDT policy
	// (POST /bdtpolicies)
	CreateBDTPolicy(ctx context.Context, request CreateBDTPolicyRequestObject) (CreateBDTPolicyResponseObject, error)
	// Read an Individual BDT policy
	// (GET /bdtpolicies/{bdtPolicyId})
	GetBDTPolicy(ctx context.Context, request GetBDTPolicyRequestObject) (GetBDTPolicyResponseObject, error)
	// Update an Individual BDT policy
	// (PATCH /bdtpolicies/{bdtPolicyId})
	UpdateBDTPolicy(ctx context.Context, request UpdateBDTPolicyRequestObject) (UpdateBDTPolicyResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateBDTPolicy operation middleware
func (sh *strictHandler) CreateBDTPolicy(ctx *gin.Context) {
	var request CreateBDTPolicyRequestObject

	var body CreateBDTPolicyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateBDTPolicy(ctx, request.(CreateBDTPolicyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateBDTPolicy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateBDTPolicyResponseObject); ok {
		if err := validResponse.VisitCreateBDTPolicyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBDTPolicy operation middleware
func (sh *strictHandler) GetBDTPolicy(ctx *gin.Context, bdtPolicyId string) {
	var request GetBDTPolicyRequestObject

	request.BdtPolicyId = bdtPolicyId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBDTPolicy(ctx, request.(GetBDTPolicyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBDTPolicy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBDTPolicyResponseObject); ok {
		if err := validResponse.VisitGetBDTPolicyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateBDTPolicy operation middleware
func (sh *strictHandler) UpdateBDTPolicy(ctx *gin.Context, bdtPolicyId string) {
	var request UpdateBDTPolicyRequestObject

	request.BdtPolicyId = bdtPolicyId

	var body UpdateBDTPolicyApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateBDTPolicy(ctx, request.(UpdateBDTPolicyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateBDTPolicy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateBDTPolicyResponseObject); ok {
		if err := validResponse.VisitUpdateBDTPolicyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
