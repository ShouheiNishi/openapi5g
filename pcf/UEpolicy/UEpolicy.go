// Package UEpolicy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package UEpolicy

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// CreateIndividualUEPolicyAssociationJSONRequestBody defines body for CreateIndividualUEPolicyAssociation for application/json ContentType.
type CreateIndividualUEPolicyAssociationJSONRequestBody = externalRef0.UEPolicyPolicyAssociationRequest

// ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody defines body for ReportObservedEventTriggersForIndividualUEPolicyAssociation for application/json ContentType.
type ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody = externalRef0.UEPolicyPolicyAssociationUpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateIndividualUEPolicyAssociationWithBody request with any body
	CreateIndividualUEPolicyAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualUEPolicyAssociation(ctx context.Context, body CreateIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualUEPolicyAssociation request
	DeleteIndividualUEPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualUEPolicyAssociation request
	ReadIndividualUEPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBody request with any body
	ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBody(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportObservedEventTriggersForIndividualUEPolicyAssociation(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateIndividualUEPolicyAssociationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualUEPolicyAssociationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualUEPolicyAssociation(ctx context.Context, body CreateIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualUEPolicyAssociationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualUEPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualUEPolicyAssociationRequest(c.Server, polAssoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualUEPolicyAssociation(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualUEPolicyAssociationRequest(c.Server, polAssoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBody(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportObservedEventTriggersForIndividualUEPolicyAssociationRequestWithBody(c.Server, polAssoId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportObservedEventTriggersForIndividualUEPolicyAssociation(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportObservedEventTriggersForIndividualUEPolicyAssociationRequest(c.Server, polAssoId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateIndividualUEPolicyAssociationRequest calls the generic CreateIndividualUEPolicyAssociation builder with application/json body
func NewCreateIndividualUEPolicyAssociationRequest(server string, body CreateIndividualUEPolicyAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualUEPolicyAssociationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualUEPolicyAssociationRequestWithBody generates requests for CreateIndividualUEPolicyAssociation with any type of body
func NewCreateIndividualUEPolicyAssociationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualUEPolicyAssociationRequest generates requests for DeleteIndividualUEPolicyAssociation
func NewDeleteIndividualUEPolicyAssociationRequest(server string, polAssoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "polAssoId", runtime.ParamLocationPath, polAssoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualUEPolicyAssociationRequest generates requests for ReadIndividualUEPolicyAssociation
func NewReadIndividualUEPolicyAssociationRequest(server string, polAssoId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "polAssoId", runtime.ParamLocationPath, polAssoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportObservedEventTriggersForIndividualUEPolicyAssociationRequest calls the generic ReportObservedEventTriggersForIndividualUEPolicyAssociation builder with application/json body
func NewReportObservedEventTriggersForIndividualUEPolicyAssociationRequest(server string, polAssoId string, body ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportObservedEventTriggersForIndividualUEPolicyAssociationRequestWithBody(server, polAssoId, "application/json", bodyReader)
}

// NewReportObservedEventTriggersForIndividualUEPolicyAssociationRequestWithBody generates requests for ReportObservedEventTriggersForIndividualUEPolicyAssociation with any type of body
func NewReportObservedEventTriggersForIndividualUEPolicyAssociationRequestWithBody(server string, polAssoId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "polAssoId", runtime.ParamLocationPath, polAssoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policies/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateIndividualUEPolicyAssociationWithBodyWithResponse request with any body
	CreateIndividualUEPolicyAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualUEPolicyAssociationResponse, error)

	CreateIndividualUEPolicyAssociationWithResponse(ctx context.Context, body CreateIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualUEPolicyAssociationResponse, error)

	// DeleteIndividualUEPolicyAssociationWithResponse request
	DeleteIndividualUEPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*DeleteIndividualUEPolicyAssociationResponse, error)

	// ReadIndividualUEPolicyAssociationWithResponse request
	ReadIndividualUEPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*ReadIndividualUEPolicyAssociationResponse, error)

	// ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBodyWithResponse request with any body
	ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBodyWithResponse(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse, error)

	ReportObservedEventTriggersForIndividualUEPolicyAssociationWithResponse(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse, error)
}

type CreateIndividualUEPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.UEPolicyPolicyAssociation
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualUEPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualUEPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualUEPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualUEPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualUEPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualUEPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.UEPolicyPolicyAssociation
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualUEPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualUEPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.UEPolicyPolicyUpdate
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateIndividualUEPolicyAssociationWithBodyWithResponse request with arbitrary body returning *CreateIndividualUEPolicyAssociationResponse
func (c *ClientWithResponses) CreateIndividualUEPolicyAssociationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualUEPolicyAssociationResponse, error) {
	rsp, err := c.CreateIndividualUEPolicyAssociationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualUEPolicyAssociationResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualUEPolicyAssociationWithResponse(ctx context.Context, body CreateIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualUEPolicyAssociationResponse, error) {
	rsp, err := c.CreateIndividualUEPolicyAssociation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualUEPolicyAssociationResponse(rsp)
}

// DeleteIndividualUEPolicyAssociationWithResponse request returning *DeleteIndividualUEPolicyAssociationResponse
func (c *ClientWithResponses) DeleteIndividualUEPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*DeleteIndividualUEPolicyAssociationResponse, error) {
	rsp, err := c.DeleteIndividualUEPolicyAssociation(ctx, polAssoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualUEPolicyAssociationResponse(rsp)
}

// ReadIndividualUEPolicyAssociationWithResponse request returning *ReadIndividualUEPolicyAssociationResponse
func (c *ClientWithResponses) ReadIndividualUEPolicyAssociationWithResponse(ctx context.Context, polAssoId string, reqEditors ...RequestEditorFn) (*ReadIndividualUEPolicyAssociationResponse, error) {
	rsp, err := c.ReadIndividualUEPolicyAssociation(ctx, polAssoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualUEPolicyAssociationResponse(rsp)
}

// ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBodyWithResponse request with arbitrary body returning *ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse
func (c *ClientWithResponses) ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBodyWithResponse(ctx context.Context, polAssoId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse, error) {
	rsp, err := c.ReportObservedEventTriggersForIndividualUEPolicyAssociationWithBody(ctx, polAssoId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(rsp)
}

func (c *ClientWithResponses) ReportObservedEventTriggersForIndividualUEPolicyAssociationWithResponse(ctx context.Context, polAssoId string, body ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse, error) {
	rsp, err := c.ReportObservedEventTriggersForIndividualUEPolicyAssociation(ctx, polAssoId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(rsp)
}

// ParseCreateIndividualUEPolicyAssociationResponse parses an HTTP response from a CreateIndividualUEPolicyAssociationWithResponse call
func ParseCreateIndividualUEPolicyAssociationResponse(rsp *http.Response) (*CreateIndividualUEPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualUEPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.UEPolicyPolicyAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualUEPolicyAssociationResponse parses an HTTP response from a DeleteIndividualUEPolicyAssociationWithResponse call
func ParseDeleteIndividualUEPolicyAssociationResponse(rsp *http.Response) (*DeleteIndividualUEPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualUEPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualUEPolicyAssociationResponse parses an HTTP response from a ReadIndividualUEPolicyAssociationWithResponse call
func ParseReadIndividualUEPolicyAssociationResponse(rsp *http.Response) (*ReadIndividualUEPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualUEPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UEPolicyPolicyAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReportObservedEventTriggersForIndividualUEPolicyAssociationResponse parses an HTTP response from a ReportObservedEventTriggersForIndividualUEPolicyAssociationWithResponse call
func ParseReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(rsp *http.Response) (*ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportObservedEventTriggersForIndividualUEPolicyAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UEPolicyPolicyUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create individual UE policy association.
	// (POST /policies)
	CreateIndividualUEPolicyAssociation(c *gin.Context)
	// Delete individual UE policy association.
	// (DELETE /policies/{polAssoId})
	DeleteIndividualUEPolicyAssociation(c *gin.Context, polAssoId string)
	// Read individual UE policy association.
	// (GET /policies/{polAssoId})
	ReadIndividualUEPolicyAssociation(c *gin.Context, polAssoId string)
	// Report observed event triggers and possibly obtain updated policies for an individual UE policy association.
	// (POST /policies/{polAssoId}/update)
	ReportObservedEventTriggersForIndividualUEPolicyAssociation(c *gin.Context, polAssoId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateIndividualUEPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualUEPolicyAssociation(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-ue-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualUEPolicyAssociation(c)
}

// DeleteIndividualUEPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualUEPolicyAssociation(c *gin.Context) {

	var err error

	// ------------- Path parameter "polAssoId" -------------
	var polAssoId string

	err = runtime.BindStyledParameterWithOptions("simple", "polAssoId", c.Param("polAssoId"), &polAssoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter polAssoId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-ue-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualUEPolicyAssociation(c, polAssoId)
}

// ReadIndividualUEPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualUEPolicyAssociation(c *gin.Context) {

	var err error

	// ------------- Path parameter "polAssoId" -------------
	var polAssoId string

	err = runtime.BindStyledParameterWithOptions("simple", "polAssoId", c.Param("polAssoId"), &polAssoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter polAssoId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-ue-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualUEPolicyAssociation(c, polAssoId)
}

// ReportObservedEventTriggersForIndividualUEPolicyAssociation operation middleware
func (siw *ServerInterfaceWrapper) ReportObservedEventTriggersForIndividualUEPolicyAssociation(c *gin.Context) {

	var err error

	// ------------- Path parameter "polAssoId" -------------
	var polAssoId string

	err = runtime.BindStyledParameterWithOptions("simple", "polAssoId", c.Param("polAssoId"), &polAssoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter polAssoId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-ue-policy-control"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReportObservedEventTriggersForIndividualUEPolicyAssociation(c, polAssoId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/policies", wrapper.CreateIndividualUEPolicyAssociation)
	router.DELETE(options.BaseURL+"/policies/:polAssoId", wrapper.DeleteIndividualUEPolicyAssociation)
	router.GET(options.BaseURL+"/policies/:polAssoId", wrapper.ReadIndividualUEPolicyAssociation)
	router.POST(options.BaseURL+"/policies/:polAssoId/update", wrapper.ReportObservedEventTriggersForIndividualUEPolicyAssociation)
}

type CreateIndividualUEPolicyAssociationRequestObject struct {
	Body *CreateIndividualUEPolicyAssociationJSONRequestBody
}

type CreateIndividualUEPolicyAssociationResponseObject interface {
	VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error
}

type CreateIndividualUEPolicyAssociation201ResponseHeaders struct {
	Location string
}

type CreateIndividualUEPolicyAssociation201JSONResponse struct {
	Body    externalRef0.UEPolicyPolicyAssociation
	Headers CreateIndividualUEPolicyAssociation201ResponseHeaders
}

func (response CreateIndividualUEPolicyAssociation201JSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation411ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation413ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation415ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CreateIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualUEPolicyAssociationRequestObject struct {
	PolAssoId string `json:"polAssoId"`
}

type DeleteIndividualUEPolicyAssociationResponseObject interface {
	VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error
}

type DeleteIndividualUEPolicyAssociation204Response struct {
}

func (response DeleteIndividualUEPolicyAssociation204Response) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualUEPolicyAssociation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeleteIndividualUEPolicyAssociation307JSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualUEPolicyAssociation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeleteIndividualUEPolicyAssociation308JSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualUEPolicyAssociationRequestObject struct {
	PolAssoId string `json:"polAssoId"`
}

type ReadIndividualUEPolicyAssociationResponseObject interface {
	VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error
}

type ReadIndividualUEPolicyAssociation200JSONResponse externalRef0.UEPolicyPolicyAssociation

func (response ReadIndividualUEPolicyAssociation200JSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.UEPolicyPolicyAssociation(response))
}

type ReadIndividualUEPolicyAssociation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ReadIndividualUEPolicyAssociation307JSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualUEPolicyAssociation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ReadIndividualUEPolicyAssociation308JSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReadIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReadIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReadIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReadIndividualUEPolicyAssociation406Response externalRef0.N406Response

func (response ReadIndividualUEPolicyAssociation406Response) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReadIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReadIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReadIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitReadIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociationRequestObject struct {
	PolAssoId string `json:"polAssoId"`
	Body      *ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociationResponseObject interface {
	VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation200JSONResponse externalRef0.UEPolicyPolicyUpdate

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation200JSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.UEPolicyPolicyUpdate(response))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation307JSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation308JSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation400ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation401ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation403ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation404ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation411ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation413ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation415ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation429ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation500ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociation503ApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReportObservedEventTriggersForIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReportObservedEventTriggersForIndividualUEPolicyAssociationdefaultApplicationProblemPlusJSONResponse) VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create individual UE policy association.
	// (POST /policies)
	CreateIndividualUEPolicyAssociation(ctx context.Context, request CreateIndividualUEPolicyAssociationRequestObject) (CreateIndividualUEPolicyAssociationResponseObject, error)
	// Delete individual UE policy association.
	// (DELETE /policies/{polAssoId})
	DeleteIndividualUEPolicyAssociation(ctx context.Context, request DeleteIndividualUEPolicyAssociationRequestObject) (DeleteIndividualUEPolicyAssociationResponseObject, error)
	// Read individual UE policy association.
	// (GET /policies/{polAssoId})
	ReadIndividualUEPolicyAssociation(ctx context.Context, request ReadIndividualUEPolicyAssociationRequestObject) (ReadIndividualUEPolicyAssociationResponseObject, error)
	// Report observed event triggers and possibly obtain updated policies for an individual UE policy association.
	// (POST /policies/{polAssoId}/update)
	ReportObservedEventTriggersForIndividualUEPolicyAssociation(ctx context.Context, request ReportObservedEventTriggersForIndividualUEPolicyAssociationRequestObject) (ReportObservedEventTriggersForIndividualUEPolicyAssociationResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateIndividualUEPolicyAssociation operation middleware
func (sh *strictHandler) CreateIndividualUEPolicyAssociation(ctx *gin.Context) {
	var request CreateIndividualUEPolicyAssociationRequestObject

	var body CreateIndividualUEPolicyAssociationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualUEPolicyAssociation(ctx, request.(CreateIndividualUEPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualUEPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualUEPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitCreateIndividualUEPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualUEPolicyAssociation operation middleware
func (sh *strictHandler) DeleteIndividualUEPolicyAssociation(ctx *gin.Context, polAssoId string) {
	var request DeleteIndividualUEPolicyAssociationRequestObject

	request.PolAssoId = polAssoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualUEPolicyAssociation(ctx, request.(DeleteIndividualUEPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualUEPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualUEPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualUEPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualUEPolicyAssociation operation middleware
func (sh *strictHandler) ReadIndividualUEPolicyAssociation(ctx *gin.Context, polAssoId string) {
	var request ReadIndividualUEPolicyAssociationRequestObject

	request.PolAssoId = polAssoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualUEPolicyAssociation(ctx, request.(ReadIndividualUEPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualUEPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualUEPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitReadIndividualUEPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportObservedEventTriggersForIndividualUEPolicyAssociation operation middleware
func (sh *strictHandler) ReportObservedEventTriggersForIndividualUEPolicyAssociation(ctx *gin.Context, polAssoId string) {
	var request ReportObservedEventTriggersForIndividualUEPolicyAssociationRequestObject

	request.PolAssoId = polAssoId

	var body ReportObservedEventTriggersForIndividualUEPolicyAssociationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReportObservedEventTriggersForIndividualUEPolicyAssociation(ctx, request.(ReportObservedEventTriggersForIndividualUEPolicyAssociationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportObservedEventTriggersForIndividualUEPolicyAssociation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReportObservedEventTriggersForIndividualUEPolicyAssociationResponseObject); ok {
		if err := validResponse.VisitReportObservedEventTriggersForIndividualUEPolicyAssociationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
