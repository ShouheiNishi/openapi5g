// Package authorization provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package authorization

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/northbound/commondata"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for AfEvent.
const (
	ACCESSTYPECHANGE              AfEvent = "ACCESS_TYPE_CHANGE"
	ANIREPORT                     AfEvent = "ANI_REPORT"
	CHARGINGCORRELATION           AfEvent = "CHARGING_CORRELATION"
	EPSFALLBACK                   AfEvent = "EPS_FALLBACK"
	FAILEDRESOURCESALLOCATION     AfEvent = "FAILED_RESOURCES_ALLOCATION"
	OUTOFCREDIT                   AfEvent = "OUT_OF_CREDIT"
	PLMNCHG                       AfEvent = "PLMN_CHG"
	QOSMONITORING                 AfEvent = "QOS_MONITORING"
	QOSNOTIF                      AfEvent = "QOS_NOTIF"
	RANNASCAUSE                   AfEvent = "RAN_NAS_CAUSE"
	REALLOCATIONOFCREDIT          AfEvent = "REALLOCATION_OF_CREDIT"
	SUCCESSFULRESOURCESALLOCATION AfEvent = "SUCCESSFUL_RESOURCES_ALLOCATION"
	TSNBRIDGEINFO                 AfEvent = "TSN_BRIDGE_INFO"
	USAGEREPORT                   AfEvent = "USAGE_REPORT"
)

// Defines values for AfNotifMethod.
const (
	EVENTDETECTION AfNotifMethod = "EVENT_DETECTION"
	ONETIME        AfNotifMethod = "ONE_TIME"
	PERIODIC       AfNotifMethod = "PERIODIC"
)

// Defines values for AfRequestedData.
const (
	UEIDENTITY AfRequestedData = "UE_IDENTITY"
)

// Defines values for FlowStatus.
const (
	FlowStatusDISABLED        FlowStatus = "DISABLED"
	FlowStatusENABLED         FlowStatus = "ENABLED"
	FlowStatusENABLEDDOWNLINK FlowStatus = "ENABLED-DOWNLINK"
	FlowStatusENABLEDUPLINK   FlowStatus = "ENABLED-UPLINK"
	FlowStatusREMOVED         FlowStatus = "REMOVED"
)

// Defines values for FlowUsage.
const (
	AFSIGNALLING FlowUsage = "AF_SIGNALLING"
	NOINFO       FlowUsage = "NO_INFO"
	RTCP         FlowUsage = "RTCP"
)

// Defines values for MediaComponentResourcesStatus.
const (
	ACTIVE   MediaComponentResourcesStatus = "ACTIVE"
	INACTIVE MediaComponentResourcesStatus = "INACTIVE"
)

// Defines values for MediaType.
const (
	APPLICATION MediaType = "APPLICATION"
	AUDIO       MediaType = "AUDIO"
	CONTROL     MediaType = "CONTROL"
	DATA        MediaType = "DATA"
	MESSAGE     MediaType = "MESSAGE"
	OTHER       MediaType = "OTHER"
	TEXT        MediaType = "TEXT"
	VIDEO       MediaType = "VIDEO"
)

// Defines values for PreemptionControlInformation.
const (
	PreemptionControlInformationHIGHESTBW   PreemptionControlInformation = "HIGHEST_BW"
	PreemptionControlInformationLEASTRECENT PreemptionControlInformation = "LEAST_RECENT"
	PreemptionControlInformationMOSTRECENT  PreemptionControlInformation = "MOST_RECENT"
)

// Defines values for PreemptionControlInformationRm.
const (
	PreemptionControlInformationRmHIGHESTBW   PreemptionControlInformationRm = "HIGHEST_BW"
	PreemptionControlInformationRmLEASTRECENT PreemptionControlInformationRm = "LEAST_RECENT"
	PreemptionControlInformationRmMOSTRECENT  PreemptionControlInformationRm = "MOST_RECENT"
)

// Defines values for PrioritySharingIndicator.
const (
	PrioritySharingIndicatorDISABLED PrioritySharingIndicator = "DISABLED"
	PrioritySharingIndicatorENABLED  PrioritySharingIndicator = "ENABLED"
)

// Defines values for QosNotifType.
const (
	GUARANTEED    QosNotifType = "GUARANTEED"
	NOTGUARANTEED QosNotifType = "NOT_GUARANTEED"
)

// Defines values for RequiredAccessInfo.
const (
	UETIMEZONE   RequiredAccessInfo = "UE_TIME_ZONE"
	USERLOCATION RequiredAccessInfo = "USER_LOCATION"
)

// Defines values for ReservPriority.
const (
	PRIO1  ReservPriority = "PRIO_1"
	PRIO10 ReservPriority = "PRIO_10"
	PRIO11 ReservPriority = "PRIO_11"
	PRIO12 ReservPriority = "PRIO_12"
	PRIO13 ReservPriority = "PRIO_13"
	PRIO14 ReservPriority = "PRIO_14"
	PRIO15 ReservPriority = "PRIO_15"
	PRIO16 ReservPriority = "PRIO_16"
	PRIO2  ReservPriority = "PRIO_2"
	PRIO3  ReservPriority = "PRIO_3"
	PRIO4  ReservPriority = "PRIO_4"
	PRIO5  ReservPriority = "PRIO_5"
	PRIO6  ReservPriority = "PRIO_6"
	PRIO7  ReservPriority = "PRIO_7"
	PRIO8  ReservPriority = "PRIO_8"
	PRIO9  ReservPriority = "PRIO_9"
)

// Defines values for ServAuthInfo.
const (
	TPEXPIRED       ServAuthInfo = "TP_EXPIRED"
	TPNOTKNOWN      ServAuthInfo = "TP_NOT_KNOWN"
	TPNOTYETOCURRED ServAuthInfo = "TP_NOT_YET_OCURRED"
)

// Defines values for ServiceInfoStatus.
const (
	FINAL       ServiceInfoStatus = "FINAL"
	PRELIMINARY ServiceInfoStatus = "PRELIMINARY"
)

// Defines values for SipForkingIndication.
const (
	SEVERALDIALOGUES SipForkingIndication = "SEVERAL_DIALOGUES"
	SINGLEDIALOGUE   SipForkingIndication = "SINGLE_DIALOGUE"
)

// Defines values for SponsoringStatus.
const (
	SPONSORDISABLED SponsoringStatus = "SPONSOR_DISABLED"
	SPONSORENABLED  SponsoringStatus = "SPONSOR_ENABLED"
)

// Defines values for TerminationCause.
const (
	ALLSDFDEACTIVATION    TerminationCause = "ALL_SDF_DEACTIVATION"
	PDUSESSIONTERMINATION TerminationCause = "PDU_SESSION_TERMINATION"
	PSTOCSHO              TerminationCause = "PS_TO_CS_HO"
)

// AcceptableServiceInfo Indicates the maximum bandwidth that shall be authorized by the PCF.
type AcceptableServiceInfo struct {
	AccBwMedComps        *map[string]MediaComponent `json:"accBwMedComps,omitempty"`
	MarBwDl              externalRef0.BitRate       `json:"marBwDl,omitempty"`
	MarBwUl              externalRef0.BitRate       `json:"marBwUl,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// AccessNetChargingIdentifier Describes the access network charging identifier.
type AccessNetChargingIdentifier struct {
	AccNetChaIdValue     externalRef0.ChargingId `json:"accNetChaIdValue"`
	Flows                []Flows                 `json:"flows,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// AfAppId Contains an AF application identifier.
type AfAppId = string

// AfEvent defines model for AfEvent.
type AfEvent string

// AfEventNotification describes the event information delivered in the notification
type AfEventNotification struct {
	Event                AfEvent                `json:"event"`
	Flows                []Flows                `json:"flows,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfEventSubscription describes the event information delivered in the subscription
type AfEventSubscription struct {
	Event                AfEvent                   `json:"event"`
	NotifMethod          *AfNotifMethod            `json:"notifMethod,omitempty"`
	RepPeriod            *externalRef0.DurationSec `json:"repPeriod,omitempty"`
	WaitTime             *externalRef0.DurationSec `json:"waitTime,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// AfNotifMethod defines model for AfNotifMethod.
type AfNotifMethod string

// AfRequestedData defines model for AfRequestedData.
type AfRequestedData string

// AfRoutingRequirement describes the event information delivered in the subscription
type AfRoutingRequirement struct {
	AddrPreserInd *bool                          `json:"addrPreserInd,omitempty"`
	AppReloc      *bool                          `json:"appReloc,omitempty"`
	RouteToLocs   []externalRef0.RouteToLocation `json:"routeToLocs,omitempty"`

	// SpVal describes explicitly the route to an Application location
	SpVal    *SpatialValidity   `json:"spVal,omitempty"`
	TempVals []TemporalValidity `json:"tempVals,omitempty"`

	// UpPathChgSub Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UpPathChgEvent
	UpPathChgSub         interface{}            `json:"upPathChgSub,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfRoutingRequirementRm this data type is defined in the same way as the AfRoutingRequirement data type, but with the OpenAPI nullable property set to true and the spVal and tempVals attributes defined as removable.
type AfRoutingRequirementRm struct {
	AddrPreserInd *bool                           `json:"addrPreserInd"`
	AppReloc      *bool                           `json:"appReloc,omitempty"`
	RouteToLocs   *[]externalRef0.RouteToLocation `json:"routeToLocs"`

	// SpVal this data type is defined in the same way as the SpatialValidity data type, but with the OpenAPI nullable property set to true
	SpVal    *SpatialValidityRm  `json:"spVal"`
	TempVals *[]TemporalValidity `json:"tempVals"`

	// UpPathChgSub Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/UpPathChgEvent
	UpPathChgSub         interface{}            `json:"upPathChgSub,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AnGwAddress describes the address of the access network gateway control node
type AnGwAddress struct {
	AnGwIpv4Addr         externalRef0.Ipv4Addr  `json:"anGwIpv4Addr,omitempty"`
	AnGwIpv6Addr         *externalRef0.Ipv6Addr `json:"anGwIpv6Addr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppSessionContext Represents an Individual Application Session Context resource.
type AppSessionContext struct {
	// AscReqData Identifies the service requirements of an Individual Application Session Context.
	AscReqData *AppSessionContextReqData `json:"ascReqData,omitempty"`

	// AscRespData Describes the authorization data of an Individual Application Session Context created by the PCF.
	AscRespData *AppSessionContextRespData `json:"ascRespData,omitempty"`

	// EvsNotif describes the notification of a matched event
	EvsNotif             *EventsNotification    `json:"evsNotif,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppSessionContextReqData Identifies the service requirements of an Individual Application Session Context.
type AppSessionContextReqData struct {
	// AfAppId Contains an AF application identifier.
	AfAppId   *AfAppId                            `json:"afAppId,omitempty"`
	AfChargId *externalRef0.ApplicationChargingId `json:"afChargId,omitempty"`
	AfReqData *AfRequestedData                    `json:"afReqData,omitempty"`

	// AfRoutReq describes the event information delivered in the subscription
	AfRoutReq *AfRoutingRequirement `json:"afRoutReq,omitempty"`

	// AspId Contains an identity of an application service provider.
	AspId *AspId `json:"aspId,omitempty"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId *externalRef1.BdtReferenceId `json:"bdtRefId,omitempty"`
	Dnn      *externalRef0.Dnn            `json:"dnn,omitempty"`

	// EvSubsc Identifies the events the application subscribes to.
	EvSubsc  *EventsSubscReqData `json:"evSubsc,omitempty"`
	Gpsi     externalRef0.Gpsi   `json:"gpsi,omitempty"`
	IpDomain *string             `json:"ipDomain,omitempty"`

	// McVideoId indication of MCVideo service request
	McVideoId *string `json:"mcVideoId,omitempty"`

	// McpttId indication of MCPTT service request
	McpttId *string `json:"mcpttId,omitempty"`

	// McsId indication of MCS service request
	McsId         *string                    `json:"mcsId,omitempty"`
	MedComponents *map[string]MediaComponent `json:"medComponents,omitempty"`

	// MpsId indication of MPS service request
	MpsId              *string                       `json:"mpsId,omitempty"`
	NotifUri           externalRef0.Uri              `json:"notifUri"`
	PreemptControlInfo *PreemptionControlInformation `json:"preemptControlInfo,omitempty"`
	ResPrio            *ReservPriority               `json:"resPrio,omitempty"`
	ServInfStatus      *ServiceInfoStatus            `json:"servInfStatus,omitempty"`

	// ServUrn Contains values of the service URN and may include subservices.
	ServUrn   *ServiceUrn          `json:"servUrn,omitempty"`
	SliceInfo *externalRef0.Snssai `json:"sliceInfo,omitempty"`

	// SponId Contains an identity of a sponsor.
	SponId     *SponId                        `json:"sponId,omitempty"`
	SponStatus *SponsoringStatus              `json:"sponStatus,omitempty"`
	Supi       externalRef0.Supi              `json:"supi,omitempty"`
	SuppFeat   externalRef0.SupportedFeatures `json:"suppFeat"`

	// TsnBridgeManCont Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont interface{} `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt   interface{}            `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts  []interface{}          `json:"tsnPortManContNwtts,omitempty"`
	UeIpv4               externalRef0.Ipv4Addr  `json:"ueIpv4,omitempty"`
	UeIpv6               *externalRef0.Ipv6Addr `json:"ueIpv6,omitempty"`
	UeMac                externalRef0.MacAddr48 `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppSessionContextRespData Describes the authorization data of an Individual Application Session Context created by the PCF.
type AppSessionContextRespData struct {
	ServAuthInfo         *ServAuthInfo                   `json:"servAuthInfo,omitempty"`
	SuppFeat             *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`
	UeIds                []UeIdentityInfo                `json:"ueIds,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AppSessionContextUpdateData Identifies the modifications to the "ascReqData" property of an Individual Application Session Context which may include the modifications to the sub-resource Events Subscription.
type AppSessionContextUpdateData struct {
	// AfAppId Contains an AF application identifier.
	AfAppId *AfAppId `json:"afAppId,omitempty"`

	// AfRoutReq this data type is defined in the same way as the AfRoutingRequirement data type, but with the OpenAPI nullable property set to true and the spVal and tempVals attributes defined as removable.
	AfRoutReq *AfRoutingRequirementRm `json:"afRoutReq"`

	// AspId Contains an identity of an application service provider.
	AspId *AspId `json:"aspId,omitempty"`

	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId *externalRef1.BdtReferenceId `json:"bdtRefId,omitempty"`

	// EvSubsc this data type is defined in the same way as the EventsSubscReqData data type, but with the OpenAPI nullable property set to true.
	EvSubsc *EventsSubscReqDataRm `json:"evSubsc"`

	// McVideoId indication of modification of MCVideo service
	McVideoId *string `json:"mcVideoId,omitempty"`

	// McpttId indication of MCPTT service request
	McpttId *string `json:"mcpttId,omitempty"`

	// McsId indication of MCS service request
	McsId         *string                       `json:"mcsId,omitempty"`
	MedComponents *map[string]*MediaComponentRm `json:"medComponents,omitempty"`

	// MpsId indication of MPS service request
	MpsId              *string                         `json:"mpsId,omitempty"`
	PreemptControlInfo *PreemptionControlInformationRm `json:"preemptControlInfo,omitempty"`
	ResPrio            *ReservPriority                 `json:"resPrio,omitempty"`
	ServInfStatus      *ServiceInfoStatus              `json:"servInfStatus,omitempty"`
	SipForkInd         *SipForkingIndication           `json:"sipForkInd,omitempty"`

	// SponId Contains an identity of a sponsor.
	SponId     *SponId           `json:"sponId,omitempty"`
	SponStatus *SponsoringStatus `json:"sponStatus,omitempty"`

	// TsnBridgeManCont Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont interface{} `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt   interface{}            `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts  []interface{}          `json:"tsnPortManContNwtts,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppSessionContextUpdateDataPatch Identifies the modifications to an Individual Application Session Context and/or the modifications to the sub-resource Events Subscription.
type AppSessionContextUpdateDataPatch struct {
	// AscReqData Identifies the modifications to the "ascReqData" property of an Individual Application Session Context which may include the modifications to the sub-resource Events Subscription.
	AscReqData           *AppSessionContextUpdateData `json:"ascReqData,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// AspId Contains an identity of an application service provider.
type AspId = string

// CodecData Contains codec related information.
type CodecData = string

// ContentVersion Represents the content version of some content.
type ContentVersion = int

// EthFlowDescription Identifies an Ethernet flow
type EthFlowDescription struct {
	DestMacAddr    externalRef0.MacAddr48 `json:"destMacAddr,omitempty"`
	DestMacAddrEnd externalRef0.MacAddr48 `json:"destMacAddrEnd,omitempty"`
	EthType        string                 `json:"ethType"`

	// FDesc Defines a packet filter of an IP flow.
	FDesc *FlowDescription `json:"fDesc,omitempty"`

	// FDir Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
	//  (Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/FlowDirection)
	FDir                 *string                `json:"fDir,omitempty"`
	SourceMacAddr        externalRef0.MacAddr48 `json:"sourceMacAddr,omitempty"`
	SrcMacAddrEnd        externalRef0.MacAddr48 `json:"srcMacAddrEnd,omitempty"`
	VlanTags             []string               `json:"vlanTags,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EventsNotification describes the notification of a matched event
type EventsNotification struct {
	AccessType externalRef0.AccessType `json:"accessType,omitempty"`

	// AddAccessInfo Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	AddAccessInfo interface{} `json:"addAccessInfo,omitempty"`

	// AnChargAddr Describes the network entity within the access network performing charging (Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AccNetChargingAddress)
	AnChargAddr interface{}                   `json:"anChargAddr,omitempty"`
	AnChargIds  []AccessNetChargingIdentifier `json:"anChargIds,omitempty"`

	// AnGwAddr describes the address of the access network gateway control node
	AnGwAddr                  *AnGwAddress              `json:"anGwAddr,omitempty"`
	EvNotifs                  []AfEventNotification     `json:"evNotifs"`
	EvSubsUri                 externalRef0.Uri          `json:"evSubsUri"`
	FailedResourcAllocReports []ResourcesAllocationInfo `json:"failedResourcAllocReports,omitempty"`

	// NoNetLocSupp Possible values are - ANR_NOT_SUPPORTED: Indicates that the access network does not support the report of access network information. - TZR_NOT_SUPPORTED: Indicates that the access network does not support the report of UE time zone. - LOC_NOT_SUPPORTED: Indicates that the access network does not support the report of UE Location (or PLMN Id).
	//  (Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/NetLocAccessSupport)
	NoNetLocSupp     *string                      `json:"noNetLocSupp,omitempty"`
	OutOfCredReports []OutOfCreditInformation     `json:"outOfCredReports,omitempty"`
	PlmnId           *externalRef0.PlmnIdNid      `json:"plmnId,omitempty"`
	QncReports       []QosNotificationControlInfo `json:"qncReports,omitempty"`
	QosMonReports    []QosMonitoringReport        `json:"qosMonReports,omitempty"`

	// RanNasRelCauses Contains the RAN and/or NAS release cause.
	RanNasRelCauses []interface{}         `json:"ranNasRelCauses,omitempty"`
	RatType         *externalRef0.RatType `json:"ratType,omitempty"`

	// RelAccessInfo Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AdditionalAccessInfo
	RelAccessInfo           interface{}               `json:"relAccessInfo,omitempty"`
	SuccResourcAllocReports []ResourcesAllocationInfo `json:"succResourcAllocReports,omitempty"`

	// TsnBridgeManCont Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont interface{} `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt   interface{}                    `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts  []interface{}                  `json:"tsnPortManContNwtts,omitempty"`
	UeLoc                *externalRef0.UserLocation     `json:"ueLoc,omitempty"`
	UeLocTime            *externalRef0.DateTime         `json:"ueLocTime,omitempty"`
	UeTimeZone           *externalRef0.TimeZone         `json:"ueTimeZone,omitempty"`
	UsgRep               *externalRef1.AccumulatedUsage `json:"usgRep,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// EventsSubscPutData Identifies the events the application subscribes to within an Events Subscription sub-resource data. It may contain the notification of the already met events
type EventsSubscPutData struct {
	union json.RawMessage
}

// EventsSubscReqData Identifies the events the application subscribes to.
type EventsSubscReqData struct {
	Events       []AfEventSubscription `json:"events"`
	NotifCorreId *string               `json:"notifCorreId,omitempty"`
	NotifUri     *externalRef0.Uri     `json:"notifUri,omitempty"`

	// QosMon Indicates the QoS Monitoring information to report, i.e. UL and/or DL and or round trip delay.
	QosMon               *QosMonitoringInformation    `json:"qosMon,omitempty"`
	ReqAnis              []RequiredAccessInfo         `json:"reqAnis,omitempty"`
	ReqQosMonParams      []string                     `json:"reqQosMonParams,omitempty"`
	UsgThres             *externalRef1.UsageThreshold `json:"usgThres,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// EventsSubscReqDataRm this data type is defined in the same way as the EventsSubscReqData data type, but with the OpenAPI nullable property set to true.
type EventsSubscReqDataRm struct {
	Events       []AfEventSubscription `json:"events"`
	NotifCorreId *string               `json:"notifCorreId,omitempty"`
	NotifUri     *externalRef0.Uri     `json:"notifUri,omitempty"`

	// QosMon this data type is defined in the same way as the QosMonitoringInformation data type, but with the OpenAPI nullable property set to true.
	QosMon               *QosMonitoringInformationRm    `json:"qosMon"`
	ReqAnis              []RequiredAccessInfo           `json:"reqAnis,omitempty"`
	ReqQosMonParams      []string                       `json:"reqQosMonParams,omitempty"`
	UsgThres             *externalRef1.UsageThresholdRm `json:"usgThres"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// ExtendedProblemDetails defines model for ExtendedProblemDetails.
type ExtendedProblemDetails struct {
	// AcceptableServInfo Indicates the maximum bandwidth that shall be authorized by the PCF.
	AcceptableServInfo *AcceptableServiceInfo `json:"acceptableServInfo,omitempty"`

	// AccessTokenError Error returned in the access token response message (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError interface{} `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   interface{}                     `json:"accessTokenRequest,omitempty"`
	Cause                *string                         `json:"cause,omitempty"`
	Detail               *string                         `json:"detail,omitempty"`
	Instance             *externalRef0.Uri               `json:"instance,omitempty"`
	InvalidParams        []externalRef0.InvalidParam     `json:"invalidParams,omitempty"`
	NrfId                *string                         `json:"nrfId,omitempty"`
	Status               int                             `json:"status,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	Title                *string                         `json:"title,omitempty"`
	Type                 *externalRef0.Uri               `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// FlowDescription Defines a packet filter of an IP flow.
type FlowDescription = string

// FlowStatus defines model for FlowStatus.
type FlowStatus string

// FlowUsage defines model for FlowUsage.
type FlowUsage string

// Flows Identifies the flows
type Flows struct {
	ContVers             []ContentVersion       `json:"contVers,omitempty"`
	FNums                []int                  `json:"fNums,omitempty"`
	MedCompN             int                    `json:"medCompN"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaComponent Identifies a media component.
type MediaComponent struct {
	// AfAppId Contains an AF application identifier.
	AfAppId *AfAppId `json:"afAppId,omitempty"`

	// AfRoutReq describes the event information delivered in the subscription
	AfRoutReq  *AfRoutingRequirement `json:"afRoutReq,omitempty"`
	AltSerReqs []string              `json:"altSerReqs,omitempty"`
	Codecs     []CodecData           `json:"codecs,omitempty"`

	// ContVer Represents the content version of some content.
	ContVer             *ContentVersion                       `json:"contVer,omitempty"`
	DesMaxLatency       *externalRef0.Float                   `json:"desMaxLatency,omitempty"`
	DesMaxLoss          *externalRef0.Float                   `json:"desMaxLoss,omitempty"`
	DisUeNotif          *bool                                 `json:"disUeNotif,omitempty"`
	FStatus             *FlowStatus                           `json:"fStatus,omitempty"`
	FlusId              *string                               `json:"flusId,omitempty"`
	MarBwDl             externalRef0.BitRate                  `json:"marBwDl,omitempty"`
	MarBwUl             externalRef0.BitRate                  `json:"marBwUl,omitempty"`
	MaxPacketLossRateDl *externalRef0.PacketLossRateRm        `json:"maxPacketLossRateDl"`
	MaxPacketLossRateUl *externalRef0.PacketLossRateRm        `json:"maxPacketLossRateUl"`
	MaxSuppBwDl         externalRef0.BitRate                  `json:"maxSuppBwDl,omitempty"`
	MaxSuppBwUl         externalRef0.BitRate                  `json:"maxSuppBwUl,omitempty"`
	MedCompN            int                                   `json:"medCompN"`
	MedSubComps         *map[string]MediaSubComponent         `json:"medSubComps,omitempty"`
	MedType             *MediaType                            `json:"medType,omitempty"`
	MinDesBwDl          externalRef0.BitRate                  `json:"minDesBwDl,omitempty"`
	MinDesBwUl          externalRef0.BitRate                  `json:"minDesBwUl,omitempty"`
	MirBwDl             externalRef0.BitRate                  `json:"mirBwDl,omitempty"`
	MirBwUl             externalRef0.BitRate                  `json:"mirBwUl,omitempty"`
	PreemptCap          *externalRef0.PreemptionCapability    `json:"preemptCap,omitempty"`
	PreemptVuln         *externalRef0.PreemptionVulnerability `json:"preemptVuln,omitempty"`
	PrioSharingInd      *PrioritySharingIndicator             `json:"prioSharingInd,omitempty"`
	QosReference        *string                               `json:"qosReference,omitempty"`
	ResPrio             *ReservPriority                       `json:"resPrio,omitempty"`
	RrBw                externalRef0.BitRate                  `json:"rrBw,omitempty"`
	RsBw                externalRef0.BitRate                  `json:"rsBw,omitempty"`
	SharingKeyDl        *externalRef0.Uint32                  `json:"sharingKeyDl,omitempty"`
	SharingKeyUl        *externalRef0.Uint32                  `json:"sharingKeyUl,omitempty"`

	// TscaiInputDl Indicates TSC Traffic pattern.
	TscaiInputDl *TscaiInputContainer `json:"tscaiInputDl"`

	// TscaiInputUl Indicates TSC Traffic pattern.
	TscaiInputUl *TscaiInputContainer `json:"tscaiInputUl"`

	// TsnQos Indicates TSC Traffic QoS.
	TsnQos               *TsnQosContainer       `json:"tsnQos,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaComponentResourcesStatus defines model for MediaComponentResourcesStatus.
type MediaComponentResourcesStatus string

// MediaComponentRm This data type is defined in the same way as the MediaComponent data type, but with the OpenAPI nullable property set to true
type MediaComponentRm struct {
	// AfAppId Contains an AF application identifier.
	AfAppId *AfAppId `json:"afAppId,omitempty"`

	// AfRoutReq this data type is defined in the same way as the AfRoutingRequirement data type, but with the OpenAPI nullable property set to true and the spVal and tempVals attributes defined as removable.
	AfRoutReq  *AfRoutingRequirementRm `json:"afRoutReq"`
	AltSerReqs *[]string               `json:"altSerReqs"`
	Codecs     []CodecData             `json:"codecs,omitempty"`

	// ContVer Represents the content version of some content.
	ContVer             *ContentVersion                         `json:"contVer,omitempty"`
	DesMaxLatency       *externalRef0.FloatRm                   `json:"desMaxLatency"`
	DesMaxLoss          *externalRef0.FloatRm                   `json:"desMaxLoss"`
	DisUeNotif          *bool                                   `json:"disUeNotif,omitempty"`
	FStatus             *FlowStatus                             `json:"fStatus,omitempty"`
	FlusId              *string                                 `json:"flusId"`
	MarBwDl             *externalRef0.BitRateRm                 `json:"marBwDl"`
	MarBwUl             *externalRef0.BitRateRm                 `json:"marBwUl"`
	MaxPacketLossRateDl *externalRef0.PacketLossRateRm          `json:"maxPacketLossRateDl"`
	MaxPacketLossRateUl *externalRef0.PacketLossRateRm          `json:"maxPacketLossRateUl"`
	MaxSuppBwDl         *externalRef0.BitRateRm                 `json:"maxSuppBwDl"`
	MaxSuppBwUl         *externalRef0.BitRateRm                 `json:"maxSuppBwUl"`
	MedCompN            int                                     `json:"medCompN"`
	MedSubComps         *map[string]*MediaSubComponentRm        `json:"medSubComps,omitempty"`
	MedType             *MediaType                              `json:"medType,omitempty"`
	MinDesBwDl          *externalRef0.BitRateRm                 `json:"minDesBwDl"`
	MinDesBwUl          *externalRef0.BitRateRm                 `json:"minDesBwUl"`
	MirBwDl             *externalRef0.BitRateRm                 `json:"mirBwDl"`
	MirBwUl             *externalRef0.BitRateRm                 `json:"mirBwUl"`
	PreemptCap          *externalRef0.PreemptionCapabilityRm    `json:"preemptCap,omitempty"`
	PreemptVuln         *externalRef0.PreemptionVulnerabilityRm `json:"preemptVuln,omitempty"`
	PrioSharingInd      *PrioritySharingIndicator               `json:"prioSharingInd,omitempty"`
	QosReference        *string                                 `json:"qosReference"`
	ResPrio             *ReservPriority                         `json:"resPrio,omitempty"`
	RrBw                *externalRef0.BitRateRm                 `json:"rrBw"`
	RsBw                *externalRef0.BitRateRm                 `json:"rsBw"`
	SharingKeyDl        *externalRef0.Uint32Rm                  `json:"sharingKeyDl"`
	SharingKeyUl        *externalRef0.Uint32Rm                  `json:"sharingKeyUl"`

	// TscaiInputDl Indicates TSC Traffic pattern.
	TscaiInputDl *TscaiInputContainer `json:"tscaiInputDl"`

	// TscaiInputUl Indicates TSC Traffic pattern.
	TscaiInputUl *TscaiInputContainer `json:"tscaiInputUl"`

	// TsnQos Indicates removable TSC Traffic QoS.
	TsnQos               *TsnQosContainerRm     `json:"tsnQos"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaSubComponent Identifies a media subcomponent
type MediaSubComponent struct {
	// AfSigProtocol Possible values are - NO_INFORMATION: Indicate that no information about the AF signalling protocol is being provided.  - SIP: Indicate that the signalling protocol is Session Initiation Protocol.
	//  (Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AfSigProtocol)
	AfSigProtocol interface{}          `json:"afSigProtocol,omitempty"`
	EthfDescs     []EthFlowDescription `json:"ethfDescs,omitempty"`
	FDescs        []FlowDescription    `json:"fDescs,omitempty"`
	FNum          int                  `json:"fNum"`
	FStatus       *FlowStatus          `json:"fStatus,omitempty"`
	FlowUsage     *FlowUsage           `json:"flowUsage,omitempty"`
	MarBwDl       externalRef0.BitRate `json:"marBwDl,omitempty"`
	MarBwUl       externalRef0.BitRate `json:"marBwUl,omitempty"`

	// TosTrCl 2-octet string, where each octet is encoded in hexadecimal representation. The first octet contains the IPv4 Type-of-Service or the IPv6 Traffic-Class field and the second octet contains the ToS/Traffic Class mask field.
	TosTrCl              *TosTrafficClass       `json:"tosTrCl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaSubComponentRm This data type is defined in the same way as the MediaSubComponent data type, but with the OpenAPI nullable property set to true. Removable attributes marBwDl and marBwUl are defined with the corresponding removable data type.
type MediaSubComponentRm struct {
	// AfSigProtocol Possible values are - NO_INFORMATION: Indicate that no information about the AF signalling protocol is being provided.  - SIP: Indicate that the signalling protocol is Session Initiation Protocol.
	//  (Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/AfSigProtocol)
	AfSigProtocol interface{}             `json:"afSigProtocol,omitempty"`
	EthfDescs     *[]EthFlowDescription   `json:"ethfDescs"`
	FDescs        *[]FlowDescription      `json:"fDescs"`
	FNum          int                     `json:"fNum"`
	FStatus       *FlowStatus             `json:"fStatus,omitempty"`
	FlowUsage     *FlowUsage              `json:"flowUsage,omitempty"`
	MarBwDl       *externalRef0.BitRateRm `json:"marBwDl"`
	MarBwUl       *externalRef0.BitRateRm `json:"marBwUl"`

	// TosTrCl this data type is defined in the same way as the TosTrafficClass data type, but with the OpenAPI nullable property set to true
	TosTrCl              *TosTrafficClassRm     `json:"tosTrCl"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// MediaType defines model for MediaType.
type MediaType string

// OutOfCreditInformation Indicates the SDFs without available credit and the corresponding termination action.
type OutOfCreditInformation struct {
	// FinUnitAct Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/FinalUnitAction
	FinUnitAct           string                 `json:"finUnitAct"`
	Flows                []Flows                `json:"flows,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcscfRestorationRequestData Indicates P-CSCF restoration.
type PcscfRestorationRequestData struct {
	Dnn                  *externalRef0.Dnn      `json:"dnn,omitempty"`
	IpDomain             *string                `json:"ipDomain,omitempty"`
	SliceInfo            *externalRef0.Snssai   `json:"sliceInfo,omitempty"`
	Supi                 externalRef0.Supi      `json:"supi,omitempty"`
	UeIpv4               externalRef0.Ipv4Addr  `json:"ueIpv4,omitempty"`
	UeIpv6               *externalRef0.Ipv6Addr `json:"ueIpv6,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PduSessionTsnBridge Contains the new 5GS Bridge information and may contain the DS-TT port and/or NW-TT port management information.
type PduSessionTsnBridge struct {
	// TsnBridgeInfo Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/TsnBridgeInfo
	TsnBridgeInfo interface{} `json:"tsnBridgeInfo"`

	// TsnBridgeManCont Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/BridgeManagementContainer
	TsnBridgeManCont interface{} `json:"tsnBridgeManCont,omitempty"`

	// TsnPortManContDstt Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/PortManagementContainer
	TsnPortManContDstt   interface{}            `json:"tsnPortManContDstt,omitempty"`
	TsnPortManContNwtts  []interface{}          `json:"tsnPortManContNwtts,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PreemptionControlInformation defines model for PreemptionControlInformation.
type PreemptionControlInformation string

// PreemptionControlInformationRm defines model for PreemptionControlInformationRm.
type PreemptionControlInformationRm string

// PrioritySharingIndicator defines model for PrioritySharingIndicator.
type PrioritySharingIndicator string

// QosMonitoringInformation Indicates the QoS Monitoring information to report, i.e. UL and/or DL and or round trip delay.
type QosMonitoringInformation struct {
	RepThreshDl          *int                   `json:"repThreshDl,omitempty"`
	RepThreshRp          *int                   `json:"repThreshRp,omitempty"`
	RepThreshUl          *int                   `json:"repThreshUl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringInformationRm this data type is defined in the same way as the QosMonitoringInformation data type, but with the OpenAPI nullable property set to true.
type QosMonitoringInformationRm struct {
	RepThreshDl          *int                   `json:"repThreshDl,omitempty"`
	RepThreshRp          *int                   `json:"repThreshRp,omitempty"`
	RepThreshUl          *int                   `json:"repThreshUl,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringReport QoS Monitoring reporting information
type QosMonitoringReport struct {
	DlDelays             []int                  `json:"dlDelays,omitempty"`
	Flows                []Flows                `json:"flows,omitempty"`
	RtDelays             []int                  `json:"rtDelays,omitempty"`
	UlDelays             []int                  `json:"ulDelays,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosNotifType defines model for QosNotifType.
type QosNotifType string

// QosNotificationControlInfo Indicates whether the QoS targets for a GRB flow are not guaranteed or guaranteed again
type QosNotificationControlInfo struct {
	AltSerReq            *string                `json:"altSerReq,omitempty"`
	Flows                []Flows                `json:"flows,omitempty"`
	NotifType            QosNotifType           `json:"notifType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RequiredAccessInfo defines model for RequiredAccessInfo.
type RequiredAccessInfo string

// ReservPriority defines model for ReservPriority.
type ReservPriority string

// ResourcesAllocationInfo describes the status of the PCC rule(s) related to certain media components.
type ResourcesAllocationInfo struct {
	AltSerReq            *string                        `json:"altSerReq,omitempty"`
	Flows                []Flows                        `json:"flows,omitempty"`
	McResourcStatus      *MediaComponentResourcesStatus `json:"mcResourcStatus,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// ServAuthInfo defines model for ServAuthInfo.
type ServAuthInfo string

// ServiceInfoStatus defines model for ServiceInfoStatus.
type ServiceInfoStatus string

// ServiceUrn Contains values of the service URN and may include subservices.
type ServiceUrn = string

// SipForkingIndication defines model for SipForkingIndication.
type SipForkingIndication string

// SpatialValidity describes explicitly the route to an Application location
type SpatialValidity struct {
	PresenceInfoList     map[string]externalRef0.PresenceInfo `json:"presenceInfoList"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// SpatialValidityRm this data type is defined in the same way as the SpatialValidity data type, but with the OpenAPI nullable property set to true
type SpatialValidityRm struct {
	PresenceInfoList     map[string]externalRef0.PresenceInfo `json:"presenceInfoList"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// SponId Contains an identity of a sponsor.
type SponId = string

// SponsoringStatus defines model for SponsoringStatus.
type SponsoringStatus string

// TemporalValidity Indicates the time interval(s) during which the AF request is to be applied
type TemporalValidity struct {
	StartTime            *externalRef0.DateTime `json:"startTime,omitempty"`
	StopTime             *externalRef0.DateTime `json:"stopTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TerminationCause defines model for TerminationCause.
type TerminationCause string

// TerminationInfo indicates the cause for requesting the deletion of the Individual Application Session Context resource
type TerminationInfo struct {
	ResUri               externalRef0.Uri       `json:"resUri"`
	TermCause            TerminationCause       `json:"termCause"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TosTrafficClass 2-octet string, where each octet is encoded in hexadecimal representation. The first octet contains the IPv4 Type-of-Service or the IPv6 Traffic-Class field and the second octet contains the ToS/Traffic Class mask field.
type TosTrafficClass = string

// TosTrafficClassRm this data type is defined in the same way as the TosTrafficClass data type, but with the OpenAPI nullable property set to true
type TosTrafficClassRm = string

// TscPriorityLevel defines model for TscPriorityLevel.
type TscPriorityLevel = int

// TscPriorityLevelRm defines model for TscPriorityLevelRm.
type TscPriorityLevelRm = int

// TscaiInputContainer Indicates TSC Traffic pattern.
type TscaiInputContainer struct {
	BurstArrivalTime     *externalRef0.DateTime `json:"burstArrivalTime,omitempty"`
	Periodicity          *externalRef0.Uinteger `json:"periodicity,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TsnQosContainer Indicates TSC Traffic QoS.
type TsnQosContainer struct {
	MaxTscBurstSize      externalRef0.ExtMaxDataBurstVol `json:"maxTscBurstSize,omitempty"`
	TscPackDelay         externalRef0.PacketDelBudget    `json:"tscPackDelay,omitempty"`
	TscPrioLevel         TscPriorityLevel                `json:"tscPrioLevel,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// TsnQosContainerRm Indicates removable TSC Traffic QoS.
type TsnQosContainerRm struct {
	MaxTscBurstSize      *externalRef0.ExtMaxDataBurstVolRm `json:"maxTscBurstSize"`
	TscPackDelay         *externalRef0.PacketDelBudgetRm    `json:"tscPackDelay"`
	TscPrioLevel         *TscPriorityLevelRm                `json:"tscPrioLevel"`
	AdditionalProperties map[string]interface{}             `json:"-"`
}

// UeIdentityInfo Represents 5GS-Level UE identities.
type UeIdentityInfo struct {
	Gpsi                 externalRef0.Gpsi      `json:"gpsi,omitempty"`
	Pei                  externalRef0.Pei       `json:"pei,omitempty"`
	Supi                 externalRef0.Supi      `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostAppSessionsJSONRequestBody defines body for PostAppSessions for application/json ContentType.
type PostAppSessionsJSONRequestBody = AppSessionContext

// PcscfRestorationJSONRequestBody defines body for PcscfRestoration for application/json ContentType.
type PcscfRestorationJSONRequestBody = PcscfRestorationRequestData

// ModAppSessionApplicationMergePatchPlusJSONRequestBody defines body for ModAppSession for application/merge-patch+json ContentType.
type ModAppSessionApplicationMergePatchPlusJSONRequestBody = AppSessionContextUpdateDataPatch

// DeleteAppSessionJSONRequestBody defines body for DeleteAppSession for application/json ContentType.
type DeleteAppSessionJSONRequestBody = EventsSubscReqData

// UpdateEventsSubscJSONRequestBody defines body for UpdateEventsSubsc for application/json ContentType.
type UpdateEventsSubscJSONRequestBody = EventsSubscReqData

// Getter for additional properties for AcceptableServiceInfo. Returns the specified
// element and whether it was found
func (a AcceptableServiceInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcceptableServiceInfo
func (a *AcceptableServiceInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcceptableServiceInfo to handle AdditionalProperties
func (a *AcceptableServiceInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accBwMedComps"]; found {
		err = json.Unmarshal(raw, &a.AccBwMedComps)
		if err != nil {
			return fmt.Errorf("error reading 'accBwMedComps': %w", err)
		}
		delete(object, "accBwMedComps")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcceptableServiceInfo to handle AdditionalProperties
func (a AcceptableServiceInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccBwMedComps != nil {
		object["accBwMedComps"], err = json.Marshal(a.AccBwMedComps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accBwMedComps': %w", err)
		}
	}

	if len(a.MarBwDl) != 0 {
		object["marBwDl"], err = json.Marshal(a.MarBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
		}
	}

	if len(a.MarBwUl) != 0 {
		object["marBwUl"], err = json.Marshal(a.MarBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessNetChargingIdentifier. Returns the specified
// element and whether it was found
func (a AccessNetChargingIdentifier) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessNetChargingIdentifier
func (a *AccessNetChargingIdentifier) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessNetChargingIdentifier to handle AdditionalProperties
func (a *AccessNetChargingIdentifier) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accNetChaIdValue"]; found {
		err = json.Unmarshal(raw, &a.AccNetChaIdValue)
		if err != nil {
			return fmt.Errorf("error reading 'accNetChaIdValue': %w", err)
		}
		delete(object, "accNetChaIdValue")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessNetChargingIdentifier to handle AdditionalProperties
func (a AccessNetChargingIdentifier) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accNetChaIdValue"], err = json.Marshal(a.AccNetChaIdValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accNetChaIdValue': %w", err)
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfEventNotification. Returns the specified
// element and whether it was found
func (a AfEventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfEventNotification
func (a *AfEventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfEventNotification to handle AdditionalProperties
func (a *AfEventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfEventNotification to handle AdditionalProperties
func (a AfEventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfEventSubscription. Returns the specified
// element and whether it was found
func (a AfEventSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfEventSubscription
func (a *AfEventSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfEventSubscription to handle AdditionalProperties
func (a *AfEventSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["notifMethod"]; found {
		err = json.Unmarshal(raw, &a.NotifMethod)
		if err != nil {
			return fmt.Errorf("error reading 'notifMethod': %w", err)
		}
		delete(object, "notifMethod")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["waitTime"]; found {
		err = json.Unmarshal(raw, &a.WaitTime)
		if err != nil {
			return fmt.Errorf("error reading 'waitTime': %w", err)
		}
		delete(object, "waitTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfEventSubscription to handle AdditionalProperties
func (a AfEventSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if a.NotifMethod != nil {
		object["notifMethod"], err = json.Marshal(a.NotifMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifMethod': %w", err)
		}
	}

	if a.RepPeriod != nil {
		object["repPeriod"], err = json.Marshal(a.RepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
		}
	}

	if a.WaitTime != nil {
		object["waitTime"], err = json.Marshal(a.WaitTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'waitTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfRoutingRequirement. Returns the specified
// element and whether it was found
func (a AfRoutingRequirement) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfRoutingRequirement
func (a *AfRoutingRequirement) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfRoutingRequirement to handle AdditionalProperties
func (a *AfRoutingRequirement) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["appReloc"]; found {
		err = json.Unmarshal(raw, &a.AppReloc)
		if err != nil {
			return fmt.Errorf("error reading 'appReloc': %w", err)
		}
		delete(object, "appReloc")
	}

	if raw, found := object["routeToLocs"]; found {
		err = json.Unmarshal(raw, &a.RouteToLocs)
		if err != nil {
			return fmt.Errorf("error reading 'routeToLocs': %w", err)
		}
		delete(object, "routeToLocs")
	}

	if raw, found := object["spVal"]; found {
		err = json.Unmarshal(raw, &a.SpVal)
		if err != nil {
			return fmt.Errorf("error reading 'spVal': %w", err)
		}
		delete(object, "spVal")
	}

	if raw, found := object["tempVals"]; found {
		err = json.Unmarshal(raw, &a.TempVals)
		if err != nil {
			return fmt.Errorf("error reading 'tempVals': %w", err)
		}
		delete(object, "tempVals")
	}

	if raw, found := object["upPathChgSub"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgSub)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgSub': %w", err)
		}
		delete(object, "upPathChgSub")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfRoutingRequirement to handle AdditionalProperties
func (a AfRoutingRequirement) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AppReloc != nil {
		object["appReloc"], err = json.Marshal(a.AppReloc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloc': %w", err)
		}
	}

	if len(a.RouteToLocs) != 0 {
		object["routeToLocs"], err = json.Marshal(a.RouteToLocs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routeToLocs': %w", err)
		}
	}

	if a.SpVal != nil {
		object["spVal"], err = json.Marshal(a.SpVal)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'spVal': %w", err)
		}
	}

	if len(a.TempVals) != 0 {
		object["tempVals"], err = json.Marshal(a.TempVals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tempVals': %w", err)
		}
	}

	if a.UpPathChgSub != nil {
		object["upPathChgSub"], err = json.Marshal(a.UpPathChgSub)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgSub': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfRoutingRequirementRm. Returns the specified
// element and whether it was found
func (a AfRoutingRequirementRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfRoutingRequirementRm
func (a *AfRoutingRequirementRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfRoutingRequirementRm to handle AdditionalProperties
func (a *AfRoutingRequirementRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["appReloc"]; found {
		err = json.Unmarshal(raw, &a.AppReloc)
		if err != nil {
			return fmt.Errorf("error reading 'appReloc': %w", err)
		}
		delete(object, "appReloc")
	}

	if raw, found := object["routeToLocs"]; found {
		err = json.Unmarshal(raw, &a.RouteToLocs)
		if err != nil {
			return fmt.Errorf("error reading 'routeToLocs': %w", err)
		}
		delete(object, "routeToLocs")
	}

	if raw, found := object["spVal"]; found {
		err = json.Unmarshal(raw, &a.SpVal)
		if err != nil {
			return fmt.Errorf("error reading 'spVal': %w", err)
		}
		delete(object, "spVal")
	}

	if raw, found := object["tempVals"]; found {
		err = json.Unmarshal(raw, &a.TempVals)
		if err != nil {
			return fmt.Errorf("error reading 'tempVals': %w", err)
		}
		delete(object, "tempVals")
	}

	if raw, found := object["upPathChgSub"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgSub)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgSub': %w", err)
		}
		delete(object, "upPathChgSub")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfRoutingRequirementRm to handle AdditionalProperties
func (a AfRoutingRequirementRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
	}

	if a.AppReloc != nil {
		object["appReloc"], err = json.Marshal(a.AppReloc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloc': %w", err)
		}
	}

	object["routeToLocs"], err = json.Marshal(a.RouteToLocs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'routeToLocs': %w", err)
	}

	object["spVal"], err = json.Marshal(a.SpVal)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'spVal': %w", err)
	}

	object["tempVals"], err = json.Marshal(a.TempVals)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tempVals': %w", err)
	}

	if a.UpPathChgSub != nil {
		object["upPathChgSub"], err = json.Marshal(a.UpPathChgSub)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgSub': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AnGwAddress. Returns the specified
// element and whether it was found
func (a AnGwAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AnGwAddress
func (a *AnGwAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AnGwAddress to handle AdditionalProperties
func (a *AnGwAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anGwIpv4Addr"]; found {
		err = json.Unmarshal(raw, &a.AnGwIpv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwIpv4Addr': %w", err)
		}
		delete(object, "anGwIpv4Addr")
	}

	if raw, found := object["anGwIpv6Addr"]; found {
		err = json.Unmarshal(raw, &a.AnGwIpv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwIpv6Addr': %w", err)
		}
		delete(object, "anGwIpv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AnGwAddress to handle AdditionalProperties
func (a AnGwAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnGwIpv4Addr) != 0 {
		object["anGwIpv4Addr"], err = json.Marshal(a.AnGwIpv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwIpv4Addr': %w", err)
		}
	}

	if a.AnGwIpv6Addr != nil {
		object["anGwIpv6Addr"], err = json.Marshal(a.AnGwIpv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwIpv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContext. Returns the specified
// element and whether it was found
func (a AppSessionContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContext
func (a *AppSessionContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContext to handle AdditionalProperties
func (a *AppSessionContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ascReqData"]; found {
		err = json.Unmarshal(raw, &a.AscReqData)
		if err != nil {
			return fmt.Errorf("error reading 'ascReqData': %w", err)
		}
		delete(object, "ascReqData")
	}

	if raw, found := object["ascRespData"]; found {
		err = json.Unmarshal(raw, &a.AscRespData)
		if err != nil {
			return fmt.Errorf("error reading 'ascRespData': %w", err)
		}
		delete(object, "ascRespData")
	}

	if raw, found := object["evsNotif"]; found {
		err = json.Unmarshal(raw, &a.EvsNotif)
		if err != nil {
			return fmt.Errorf("error reading 'evsNotif': %w", err)
		}
		delete(object, "evsNotif")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContext to handle AdditionalProperties
func (a AppSessionContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AscReqData != nil {
		object["ascReqData"], err = json.Marshal(a.AscReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ascReqData': %w", err)
		}
	}

	if a.AscRespData != nil {
		object["ascRespData"], err = json.Marshal(a.AscRespData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ascRespData': %w", err)
		}
	}

	if a.EvsNotif != nil {
		object["evsNotif"], err = json.Marshal(a.EvsNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'evsNotif': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextReqData. Returns the specified
// element and whether it was found
func (a AppSessionContextReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextReqData
func (a *AppSessionContextReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextReqData to handle AdditionalProperties
func (a *AppSessionContextReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afChargId"]; found {
		err = json.Unmarshal(raw, &a.AfChargId)
		if err != nil {
			return fmt.Errorf("error reading 'afChargId': %w", err)
		}
		delete(object, "afChargId")
	}

	if raw, found := object["afReqData"]; found {
		err = json.Unmarshal(raw, &a.AfReqData)
		if err != nil {
			return fmt.Errorf("error reading 'afReqData': %w", err)
		}
		delete(object, "afReqData")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["evSubsc"]; found {
		err = json.Unmarshal(raw, &a.EvSubsc)
		if err != nil {
			return fmt.Errorf("error reading 'evSubsc': %w", err)
		}
		delete(object, "evSubsc")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["mcVideoId"]; found {
		err = json.Unmarshal(raw, &a.McVideoId)
		if err != nil {
			return fmt.Errorf("error reading 'mcVideoId': %w", err)
		}
		delete(object, "mcVideoId")
	}

	if raw, found := object["mcpttId"]; found {
		err = json.Unmarshal(raw, &a.McpttId)
		if err != nil {
			return fmt.Errorf("error reading 'mcpttId': %w", err)
		}
		delete(object, "mcpttId")
	}

	if raw, found := object["mcsId"]; found {
		err = json.Unmarshal(raw, &a.McsId)
		if err != nil {
			return fmt.Errorf("error reading 'mcsId': %w", err)
		}
		delete(object, "mcsId")
	}

	if raw, found := object["medComponents"]; found {
		err = json.Unmarshal(raw, &a.MedComponents)
		if err != nil {
			return fmt.Errorf("error reading 'medComponents': %w", err)
		}
		delete(object, "medComponents")
	}

	if raw, found := object["mpsId"]; found {
		err = json.Unmarshal(raw, &a.MpsId)
		if err != nil {
			return fmt.Errorf("error reading 'mpsId': %w", err)
		}
		delete(object, "mpsId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["preemptControlInfo"]; found {
		err = json.Unmarshal(raw, &a.PreemptControlInfo)
		if err != nil {
			return fmt.Errorf("error reading 'preemptControlInfo': %w", err)
		}
		delete(object, "preemptControlInfo")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["servInfStatus"]; found {
		err = json.Unmarshal(raw, &a.ServInfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'servInfStatus': %w", err)
		}
		delete(object, "servInfStatus")
	}

	if raw, found := object["servUrn"]; found {
		err = json.Unmarshal(raw, &a.ServUrn)
		if err != nil {
			return fmt.Errorf("error reading 'servUrn': %w", err)
		}
		delete(object, "servUrn")
	}

	if raw, found := object["sliceInfo"]; found {
		err = json.Unmarshal(raw, &a.SliceInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sliceInfo': %w", err)
		}
		delete(object, "sliceInfo")
	}

	if raw, found := object["sponId"]; found {
		err = json.Unmarshal(raw, &a.SponId)
		if err != nil {
			return fmt.Errorf("error reading 'sponId': %w", err)
		}
		delete(object, "sponId")
	}

	if raw, found := object["sponStatus"]; found {
		err = json.Unmarshal(raw, &a.SponStatus)
		if err != nil {
			return fmt.Errorf("error reading 'sponStatus': %w", err)
		}
		delete(object, "sponStatus")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextReqData to handle AdditionalProperties
func (a AppSessionContextReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AfChargId != nil {
		object["afChargId"], err = json.Marshal(a.AfChargId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afChargId': %w", err)
		}
	}

	if a.AfReqData != nil {
		object["afReqData"], err = json.Marshal(a.AfReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afReqData': %w", err)
		}
	}

	if a.AfRoutReq != nil {
		object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
		}
	}

	if a.AspId != nil {
		object["aspId"], err = json.Marshal(a.AspId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
		}
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.EvSubsc != nil {
		object["evSubsc"], err = json.Marshal(a.EvSubsc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'evSubsc': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if a.McVideoId != nil {
		object["mcVideoId"], err = json.Marshal(a.McVideoId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcVideoId': %w", err)
		}
	}

	if a.McpttId != nil {
		object["mcpttId"], err = json.Marshal(a.McpttId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcpttId': %w", err)
		}
	}

	if a.McsId != nil {
		object["mcsId"], err = json.Marshal(a.McsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsId': %w", err)
		}
	}

	if a.MedComponents != nil {
		object["medComponents"], err = json.Marshal(a.MedComponents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medComponents': %w", err)
		}
	}

	if a.MpsId != nil {
		object["mpsId"], err = json.Marshal(a.MpsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsId': %w", err)
		}
	}

	object["notifUri"], err = json.Marshal(a.NotifUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
	}

	if a.PreemptControlInfo != nil {
		object["preemptControlInfo"], err = json.Marshal(a.PreemptControlInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptControlInfo': %w", err)
		}
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	if a.ServInfStatus != nil {
		object["servInfStatus"], err = json.Marshal(a.ServInfStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servInfStatus': %w", err)
		}
	}

	if a.ServUrn != nil {
		object["servUrn"], err = json.Marshal(a.ServUrn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servUrn': %w", err)
		}
	}

	if a.SliceInfo != nil {
		object["sliceInfo"], err = json.Marshal(a.SliceInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sliceInfo': %w", err)
		}
	}

	if a.SponId != nil {
		object["sponId"], err = json.Marshal(a.SponId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponId': %w", err)
		}
	}

	if a.SponStatus != nil {
		object["sponStatus"], err = json.Marshal(a.SponStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponStatus': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["suppFeat"], err = json.Marshal(a.SuppFeat)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	if len(a.UeIpv4) != 0 {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextRespData. Returns the specified
// element and whether it was found
func (a AppSessionContextRespData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextRespData
func (a *AppSessionContextRespData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextRespData to handle AdditionalProperties
func (a *AppSessionContextRespData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["servAuthInfo"]; found {
		err = json.Unmarshal(raw, &a.ServAuthInfo)
		if err != nil {
			return fmt.Errorf("error reading 'servAuthInfo': %w", err)
		}
		delete(object, "servAuthInfo")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["ueIds"]; found {
		err = json.Unmarshal(raw, &a.UeIds)
		if err != nil {
			return fmt.Errorf("error reading 'ueIds': %w", err)
		}
		delete(object, "ueIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextRespData to handle AdditionalProperties
func (a AppSessionContextRespData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ServAuthInfo != nil {
		object["servAuthInfo"], err = json.Marshal(a.ServAuthInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servAuthInfo': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if len(a.UeIds) != 0 {
		object["ueIds"], err = json.Marshal(a.UeIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIds': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextUpdateData. Returns the specified
// element and whether it was found
func (a AppSessionContextUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextUpdateData
func (a *AppSessionContextUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextUpdateData to handle AdditionalProperties
func (a *AppSessionContextUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["aspId"]; found {
		err = json.Unmarshal(raw, &a.AspId)
		if err != nil {
			return fmt.Errorf("error reading 'aspId': %w", err)
		}
		delete(object, "aspId")
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["evSubsc"]; found {
		err = json.Unmarshal(raw, &a.EvSubsc)
		if err != nil {
			return fmt.Errorf("error reading 'evSubsc': %w", err)
		}
		delete(object, "evSubsc")
	}

	if raw, found := object["mcVideoId"]; found {
		err = json.Unmarshal(raw, &a.McVideoId)
		if err != nil {
			return fmt.Errorf("error reading 'mcVideoId': %w", err)
		}
		delete(object, "mcVideoId")
	}

	if raw, found := object["mcpttId"]; found {
		err = json.Unmarshal(raw, &a.McpttId)
		if err != nil {
			return fmt.Errorf("error reading 'mcpttId': %w", err)
		}
		delete(object, "mcpttId")
	}

	if raw, found := object["mcsId"]; found {
		err = json.Unmarshal(raw, &a.McsId)
		if err != nil {
			return fmt.Errorf("error reading 'mcsId': %w", err)
		}
		delete(object, "mcsId")
	}

	if raw, found := object["medComponents"]; found {
		err = json.Unmarshal(raw, &a.MedComponents)
		if err != nil {
			return fmt.Errorf("error reading 'medComponents': %w", err)
		}
		delete(object, "medComponents")
	}

	if raw, found := object["mpsId"]; found {
		err = json.Unmarshal(raw, &a.MpsId)
		if err != nil {
			return fmt.Errorf("error reading 'mpsId': %w", err)
		}
		delete(object, "mpsId")
	}

	if raw, found := object["preemptControlInfo"]; found {
		err = json.Unmarshal(raw, &a.PreemptControlInfo)
		if err != nil {
			return fmt.Errorf("error reading 'preemptControlInfo': %w", err)
		}
		delete(object, "preemptControlInfo")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["servInfStatus"]; found {
		err = json.Unmarshal(raw, &a.ServInfStatus)
		if err != nil {
			return fmt.Errorf("error reading 'servInfStatus': %w", err)
		}
		delete(object, "servInfStatus")
	}

	if raw, found := object["sipForkInd"]; found {
		err = json.Unmarshal(raw, &a.SipForkInd)
		if err != nil {
			return fmt.Errorf("error reading 'sipForkInd': %w", err)
		}
		delete(object, "sipForkInd")
	}

	if raw, found := object["sponId"]; found {
		err = json.Unmarshal(raw, &a.SponId)
		if err != nil {
			return fmt.Errorf("error reading 'sponId': %w", err)
		}
		delete(object, "sponId")
	}

	if raw, found := object["sponStatus"]; found {
		err = json.Unmarshal(raw, &a.SponStatus)
		if err != nil {
			return fmt.Errorf("error reading 'sponStatus': %w", err)
		}
		delete(object, "sponStatus")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextUpdateData to handle AdditionalProperties
func (a AppSessionContextUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
	}

	if a.AspId != nil {
		object["aspId"], err = json.Marshal(a.AspId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'aspId': %w", err)
		}
	}

	if a.BdtRefId != nil {
		object["bdtRefId"], err = json.Marshal(a.BdtRefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
		}
	}

	object["evSubsc"], err = json.Marshal(a.EvSubsc)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'evSubsc': %w", err)
	}

	if a.McVideoId != nil {
		object["mcVideoId"], err = json.Marshal(a.McVideoId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcVideoId': %w", err)
		}
	}

	if a.McpttId != nil {
		object["mcpttId"], err = json.Marshal(a.McpttId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcpttId': %w", err)
		}
	}

	if a.McsId != nil {
		object["mcsId"], err = json.Marshal(a.McsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsId': %w", err)
		}
	}

	if a.MedComponents != nil {
		object["medComponents"], err = json.Marshal(a.MedComponents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medComponents': %w", err)
		}
	}

	if a.MpsId != nil {
		object["mpsId"], err = json.Marshal(a.MpsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsId': %w", err)
		}
	}

	if a.PreemptControlInfo != nil {
		object["preemptControlInfo"], err = json.Marshal(a.PreemptControlInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptControlInfo': %w", err)
		}
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	if a.ServInfStatus != nil {
		object["servInfStatus"], err = json.Marshal(a.ServInfStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servInfStatus': %w", err)
		}
	}

	if a.SipForkInd != nil {
		object["sipForkInd"], err = json.Marshal(a.SipForkInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sipForkInd': %w", err)
		}
	}

	if a.SponId != nil {
		object["sponId"], err = json.Marshal(a.SponId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponId': %w", err)
		}
	}

	if a.SponStatus != nil {
		object["sponStatus"], err = json.Marshal(a.SponStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sponStatus': %w", err)
		}
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppSessionContextUpdateDataPatch. Returns the specified
// element and whether it was found
func (a AppSessionContextUpdateDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppSessionContextUpdateDataPatch
func (a *AppSessionContextUpdateDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppSessionContextUpdateDataPatch to handle AdditionalProperties
func (a *AppSessionContextUpdateDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ascReqData"]; found {
		err = json.Unmarshal(raw, &a.AscReqData)
		if err != nil {
			return fmt.Errorf("error reading 'ascReqData': %w", err)
		}
		delete(object, "ascReqData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppSessionContextUpdateDataPatch to handle AdditionalProperties
func (a AppSessionContextUpdateDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AscReqData != nil {
		object["ascReqData"], err = json.Marshal(a.AscReqData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ascReqData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EthFlowDescription. Returns the specified
// element and whether it was found
func (a EthFlowDescription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EthFlowDescription
func (a *EthFlowDescription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EthFlowDescription to handle AdditionalProperties
func (a *EthFlowDescription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["destMacAddr"]; found {
		err = json.Unmarshal(raw, &a.DestMacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'destMacAddr': %w", err)
		}
		delete(object, "destMacAddr")
	}

	if raw, found := object["destMacAddrEnd"]; found {
		err = json.Unmarshal(raw, &a.DestMacAddrEnd)
		if err != nil {
			return fmt.Errorf("error reading 'destMacAddrEnd': %w", err)
		}
		delete(object, "destMacAddrEnd")
	}

	if raw, found := object["ethType"]; found {
		err = json.Unmarshal(raw, &a.EthType)
		if err != nil {
			return fmt.Errorf("error reading 'ethType': %w", err)
		}
		delete(object, "ethType")
	}

	if raw, found := object["fDesc"]; found {
		err = json.Unmarshal(raw, &a.FDesc)
		if err != nil {
			return fmt.Errorf("error reading 'fDesc': %w", err)
		}
		delete(object, "fDesc")
	}

	if raw, found := object["fDir"]; found {
		err = json.Unmarshal(raw, &a.FDir)
		if err != nil {
			return fmt.Errorf("error reading 'fDir': %w", err)
		}
		delete(object, "fDir")
	}

	if raw, found := object["sourceMacAddr"]; found {
		err = json.Unmarshal(raw, &a.SourceMacAddr)
		if err != nil {
			return fmt.Errorf("error reading 'sourceMacAddr': %w", err)
		}
		delete(object, "sourceMacAddr")
	}

	if raw, found := object["srcMacAddrEnd"]; found {
		err = json.Unmarshal(raw, &a.SrcMacAddrEnd)
		if err != nil {
			return fmt.Errorf("error reading 'srcMacAddrEnd': %w", err)
		}
		delete(object, "srcMacAddrEnd")
	}

	if raw, found := object["vlanTags"]; found {
		err = json.Unmarshal(raw, &a.VlanTags)
		if err != nil {
			return fmt.Errorf("error reading 'vlanTags': %w", err)
		}
		delete(object, "vlanTags")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EthFlowDescription to handle AdditionalProperties
func (a EthFlowDescription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DestMacAddr) != 0 {
		object["destMacAddr"], err = json.Marshal(a.DestMacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'destMacAddr': %w", err)
		}
	}

	if len(a.DestMacAddrEnd) != 0 {
		object["destMacAddrEnd"], err = json.Marshal(a.DestMacAddrEnd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'destMacAddrEnd': %w", err)
		}
	}

	object["ethType"], err = json.Marshal(a.EthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ethType': %w", err)
	}

	if a.FDesc != nil {
		object["fDesc"], err = json.Marshal(a.FDesc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fDesc': %w", err)
		}
	}

	if a.FDir != nil {
		object["fDir"], err = json.Marshal(a.FDir)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fDir': %w", err)
		}
	}

	if len(a.SourceMacAddr) != 0 {
		object["sourceMacAddr"], err = json.Marshal(a.SourceMacAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sourceMacAddr': %w", err)
		}
	}

	if len(a.SrcMacAddrEnd) != 0 {
		object["srcMacAddrEnd"], err = json.Marshal(a.SrcMacAddrEnd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'srcMacAddrEnd': %w", err)
		}
	}

	if len(a.VlanTags) != 0 {
		object["vlanTags"], err = json.Marshal(a.VlanTags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vlanTags': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventsNotification. Returns the specified
// element and whether it was found
func (a EventsNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventsNotification
func (a *EventsNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventsNotification to handle AdditionalProperties
func (a *EventsNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["addAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.AddAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addAccessInfo': %w", err)
		}
		delete(object, "addAccessInfo")
	}

	if raw, found := object["anChargAddr"]; found {
		err = json.Unmarshal(raw, &a.AnChargAddr)
		if err != nil {
			return fmt.Errorf("error reading 'anChargAddr': %w", err)
		}
		delete(object, "anChargAddr")
	}

	if raw, found := object["anChargIds"]; found {
		err = json.Unmarshal(raw, &a.AnChargIds)
		if err != nil {
			return fmt.Errorf("error reading 'anChargIds': %w", err)
		}
		delete(object, "anChargIds")
	}

	if raw, found := object["anGwAddr"]; found {
		err = json.Unmarshal(raw, &a.AnGwAddr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwAddr': %w", err)
		}
		delete(object, "anGwAddr")
	}

	if raw, found := object["evNotifs"]; found {
		err = json.Unmarshal(raw, &a.EvNotifs)
		if err != nil {
			return fmt.Errorf("error reading 'evNotifs': %w", err)
		}
		delete(object, "evNotifs")
	}

	if raw, found := object["evSubsUri"]; found {
		err = json.Unmarshal(raw, &a.EvSubsUri)
		if err != nil {
			return fmt.Errorf("error reading 'evSubsUri': %w", err)
		}
		delete(object, "evSubsUri")
	}

	if raw, found := object["failedResourcAllocReports"]; found {
		err = json.Unmarshal(raw, &a.FailedResourcAllocReports)
		if err != nil {
			return fmt.Errorf("error reading 'failedResourcAllocReports': %w", err)
		}
		delete(object, "failedResourcAllocReports")
	}

	if raw, found := object["noNetLocSupp"]; found {
		err = json.Unmarshal(raw, &a.NoNetLocSupp)
		if err != nil {
			return fmt.Errorf("error reading 'noNetLocSupp': %w", err)
		}
		delete(object, "noNetLocSupp")
	}

	if raw, found := object["outOfCredReports"]; found {
		err = json.Unmarshal(raw, &a.OutOfCredReports)
		if err != nil {
			return fmt.Errorf("error reading 'outOfCredReports': %w", err)
		}
		delete(object, "outOfCredReports")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["qncReports"]; found {
		err = json.Unmarshal(raw, &a.QncReports)
		if err != nil {
			return fmt.Errorf("error reading 'qncReports': %w", err)
		}
		delete(object, "qncReports")
	}

	if raw, found := object["qosMonReports"]; found {
		err = json.Unmarshal(raw, &a.QosMonReports)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonReports': %w", err)
		}
		delete(object, "qosMonReports")
	}

	if raw, found := object["ranNasRelCauses"]; found {
		err = json.Unmarshal(raw, &a.RanNasRelCauses)
		if err != nil {
			return fmt.Errorf("error reading 'ranNasRelCauses': %w", err)
		}
		delete(object, "ranNasRelCauses")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["relAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.RelAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'relAccessInfo': %w", err)
		}
		delete(object, "relAccessInfo")
	}

	if raw, found := object["succResourcAllocReports"]; found {
		err = json.Unmarshal(raw, &a.SuccResourcAllocReports)
		if err != nil {
			return fmt.Errorf("error reading 'succResourcAllocReports': %w", err)
		}
		delete(object, "succResourcAllocReports")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if raw, found := object["ueLoc"]; found {
		err = json.Unmarshal(raw, &a.UeLoc)
		if err != nil {
			return fmt.Errorf("error reading 'ueLoc': %w", err)
		}
		delete(object, "ueLoc")
	}

	if raw, found := object["ueLocTime"]; found {
		err = json.Unmarshal(raw, &a.UeLocTime)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocTime': %w", err)
		}
		delete(object, "ueLocTime")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["usgRep"]; found {
		err = json.Unmarshal(raw, &a.UsgRep)
		if err != nil {
			return fmt.Errorf("error reading 'usgRep': %w", err)
		}
		delete(object, "usgRep")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventsNotification to handle AdditionalProperties
func (a EventsNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccessType) != 0 {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	if a.AddAccessInfo != nil {
		object["addAccessInfo"], err = json.Marshal(a.AddAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addAccessInfo': %w", err)
		}
	}

	if a.AnChargAddr != nil {
		object["anChargAddr"], err = json.Marshal(a.AnChargAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anChargAddr': %w", err)
		}
	}

	if len(a.AnChargIds) != 0 {
		object["anChargIds"], err = json.Marshal(a.AnChargIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anChargIds': %w", err)
		}
	}

	if a.AnGwAddr != nil {
		object["anGwAddr"], err = json.Marshal(a.AnGwAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwAddr': %w", err)
		}
	}

	object["evNotifs"], err = json.Marshal(a.EvNotifs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'evNotifs': %w", err)
	}

	object["evSubsUri"], err = json.Marshal(a.EvSubsUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'evSubsUri': %w", err)
	}

	if len(a.FailedResourcAllocReports) != 0 {
		object["failedResourcAllocReports"], err = json.Marshal(a.FailedResourcAllocReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedResourcAllocReports': %w", err)
		}
	}

	if a.NoNetLocSupp != nil {
		object["noNetLocSupp"], err = json.Marshal(a.NoNetLocSupp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noNetLocSupp': %w", err)
		}
	}

	if len(a.OutOfCredReports) != 0 {
		object["outOfCredReports"], err = json.Marshal(a.OutOfCredReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'outOfCredReports': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if len(a.QncReports) != 0 {
		object["qncReports"], err = json.Marshal(a.QncReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qncReports': %w", err)
		}
	}

	if len(a.QosMonReports) != 0 {
		object["qosMonReports"], err = json.Marshal(a.QosMonReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonReports': %w", err)
		}
	}

	if len(a.RanNasRelCauses) != 0 {
		object["ranNasRelCauses"], err = json.Marshal(a.RanNasRelCauses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranNasRelCauses': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RelAccessInfo != nil {
		object["relAccessInfo"], err = json.Marshal(a.RelAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relAccessInfo': %w", err)
		}
	}

	if len(a.SuccResourcAllocReports) != 0 {
		object["succResourcAllocReports"], err = json.Marshal(a.SuccResourcAllocReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'succResourcAllocReports': %w", err)
		}
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	if a.UeLoc != nil {
		object["ueLoc"], err = json.Marshal(a.UeLoc)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLoc': %w", err)
		}
	}

	if a.UeLocTime != nil {
		object["ueLocTime"], err = json.Marshal(a.UeLocTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocTime': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UsgRep != nil {
		object["usgRep"], err = json.Marshal(a.UsgRep)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usgRep': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventsSubscReqData. Returns the specified
// element and whether it was found
func (a EventsSubscReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventsSubscReqData
func (a *EventsSubscReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventsSubscReqData to handle AdditionalProperties
func (a *EventsSubscReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["events"]; found {
		err = json.Unmarshal(raw, &a.Events)
		if err != nil {
			return fmt.Errorf("error reading 'events': %w", err)
		}
		delete(object, "events")
	}

	if raw, found := object["notifCorreId"]; found {
		err = json.Unmarshal(raw, &a.NotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'notifCorreId': %w", err)
		}
		delete(object, "notifCorreId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["qosMon"]; found {
		err = json.Unmarshal(raw, &a.QosMon)
		if err != nil {
			return fmt.Errorf("error reading 'qosMon': %w", err)
		}
		delete(object, "qosMon")
	}

	if raw, found := object["reqAnis"]; found {
		err = json.Unmarshal(raw, &a.ReqAnis)
		if err != nil {
			return fmt.Errorf("error reading 'reqAnis': %w", err)
		}
		delete(object, "reqAnis")
	}

	if raw, found := object["reqQosMonParams"]; found {
		err = json.Unmarshal(raw, &a.ReqQosMonParams)
		if err != nil {
			return fmt.Errorf("error reading 'reqQosMonParams': %w", err)
		}
		delete(object, "reqQosMonParams")
	}

	if raw, found := object["usgThres"]; found {
		err = json.Unmarshal(raw, &a.UsgThres)
		if err != nil {
			return fmt.Errorf("error reading 'usgThres': %w", err)
		}
		delete(object, "usgThres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventsSubscReqData to handle AdditionalProperties
func (a EventsSubscReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["events"], err = json.Marshal(a.Events)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'events': %w", err)
	}

	if a.NotifCorreId != nil {
		object["notifCorreId"], err = json.Marshal(a.NotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifCorreId': %w", err)
		}
	}

	if a.NotifUri != nil {
		object["notifUri"], err = json.Marshal(a.NotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
		}
	}

	if a.QosMon != nil {
		object["qosMon"], err = json.Marshal(a.QosMon)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMon': %w", err)
		}
	}

	if len(a.ReqAnis) != 0 {
		object["reqAnis"], err = json.Marshal(a.ReqAnis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqAnis': %w", err)
		}
	}

	if len(a.ReqQosMonParams) != 0 {
		object["reqQosMonParams"], err = json.Marshal(a.ReqQosMonParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqQosMonParams': %w", err)
		}
	}

	if a.UsgThres != nil {
		object["usgThres"], err = json.Marshal(a.UsgThres)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'usgThres': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EventsSubscReqDataRm. Returns the specified
// element and whether it was found
func (a EventsSubscReqDataRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EventsSubscReqDataRm
func (a *EventsSubscReqDataRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EventsSubscReqDataRm to handle AdditionalProperties
func (a *EventsSubscReqDataRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["events"]; found {
		err = json.Unmarshal(raw, &a.Events)
		if err != nil {
			return fmt.Errorf("error reading 'events': %w", err)
		}
		delete(object, "events")
	}

	if raw, found := object["notifCorreId"]; found {
		err = json.Unmarshal(raw, &a.NotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'notifCorreId': %w", err)
		}
		delete(object, "notifCorreId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["qosMon"]; found {
		err = json.Unmarshal(raw, &a.QosMon)
		if err != nil {
			return fmt.Errorf("error reading 'qosMon': %w", err)
		}
		delete(object, "qosMon")
	}

	if raw, found := object["reqAnis"]; found {
		err = json.Unmarshal(raw, &a.ReqAnis)
		if err != nil {
			return fmt.Errorf("error reading 'reqAnis': %w", err)
		}
		delete(object, "reqAnis")
	}

	if raw, found := object["reqQosMonParams"]; found {
		err = json.Unmarshal(raw, &a.ReqQosMonParams)
		if err != nil {
			return fmt.Errorf("error reading 'reqQosMonParams': %w", err)
		}
		delete(object, "reqQosMonParams")
	}

	if raw, found := object["usgThres"]; found {
		err = json.Unmarshal(raw, &a.UsgThres)
		if err != nil {
			return fmt.Errorf("error reading 'usgThres': %w", err)
		}
		delete(object, "usgThres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EventsSubscReqDataRm to handle AdditionalProperties
func (a EventsSubscReqDataRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["events"], err = json.Marshal(a.Events)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'events': %w", err)
	}

	if a.NotifCorreId != nil {
		object["notifCorreId"], err = json.Marshal(a.NotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifCorreId': %w", err)
		}
	}

	if a.NotifUri != nil {
		object["notifUri"], err = json.Marshal(a.NotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
		}
	}

	object["qosMon"], err = json.Marshal(a.QosMon)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosMon': %w", err)
	}

	if len(a.ReqAnis) != 0 {
		object["reqAnis"], err = json.Marshal(a.ReqAnis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqAnis': %w", err)
		}
	}

	if len(a.ReqQosMonParams) != 0 {
		object["reqQosMonParams"], err = json.Marshal(a.ReqQosMonParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reqQosMonParams': %w", err)
		}
	}

	object["usgThres"], err = json.Marshal(a.UsgThres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'usgThres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtendedProblemDetails. Returns the specified
// element and whether it was found
func (a ExtendedProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtendedProblemDetails
func (a *ExtendedProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtendedProblemDetails to handle AdditionalProperties
func (a *ExtendedProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["acceptableServInfo"]; found {
		err = json.Unmarshal(raw, &a.AcceptableServInfo)
		if err != nil {
			return fmt.Errorf("error reading 'acceptableServInfo': %w", err)
		}
		delete(object, "acceptableServInfo")
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtendedProblemDetails to handle AdditionalProperties
func (a ExtendedProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AcceptableServInfo != nil {
		object["acceptableServInfo"], err = json.Marshal(a.AcceptableServInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acceptableServInfo': %w", err)
		}
	}

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Flows. Returns the specified
// element and whether it was found
func (a Flows) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Flows
func (a *Flows) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Flows to handle AdditionalProperties
func (a *Flows) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contVers"]; found {
		err = json.Unmarshal(raw, &a.ContVers)
		if err != nil {
			return fmt.Errorf("error reading 'contVers': %w", err)
		}
		delete(object, "contVers")
	}

	if raw, found := object["fNums"]; found {
		err = json.Unmarshal(raw, &a.FNums)
		if err != nil {
			return fmt.Errorf("error reading 'fNums': %w", err)
		}
		delete(object, "fNums")
	}

	if raw, found := object["medCompN"]; found {
		err = json.Unmarshal(raw, &a.MedCompN)
		if err != nil {
			return fmt.Errorf("error reading 'medCompN': %w", err)
		}
		delete(object, "medCompN")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Flows to handle AdditionalProperties
func (a Flows) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ContVers) != 0 {
		object["contVers"], err = json.Marshal(a.ContVers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVers': %w", err)
		}
	}

	if len(a.FNums) != 0 {
		object["fNums"], err = json.Marshal(a.FNums)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fNums': %w", err)
		}
	}

	object["medCompN"], err = json.Marshal(a.MedCompN)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'medCompN': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaComponent. Returns the specified
// element and whether it was found
func (a MediaComponent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaComponent
func (a *MediaComponent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaComponent to handle AdditionalProperties
func (a *MediaComponent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["altSerReqs"]; found {
		err = json.Unmarshal(raw, &a.AltSerReqs)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReqs': %w", err)
		}
		delete(object, "altSerReqs")
	}

	if raw, found := object["codecs"]; found {
		err = json.Unmarshal(raw, &a.Codecs)
		if err != nil {
			return fmt.Errorf("error reading 'codecs': %w", err)
		}
		delete(object, "codecs")
	}

	if raw, found := object["contVer"]; found {
		err = json.Unmarshal(raw, &a.ContVer)
		if err != nil {
			return fmt.Errorf("error reading 'contVer': %w", err)
		}
		delete(object, "contVer")
	}

	if raw, found := object["desMaxLatency"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLatency)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLatency': %w", err)
		}
		delete(object, "desMaxLatency")
	}

	if raw, found := object["desMaxLoss"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLoss)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLoss': %w", err)
		}
		delete(object, "desMaxLoss")
	}

	if raw, found := object["disUeNotif"]; found {
		err = json.Unmarshal(raw, &a.DisUeNotif)
		if err != nil {
			return fmt.Errorf("error reading 'disUeNotif': %w", err)
		}
		delete(object, "disUeNotif")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flusId"]; found {
		err = json.Unmarshal(raw, &a.FlusId)
		if err != nil {
			return fmt.Errorf("error reading 'flusId': %w", err)
		}
		delete(object, "flusId")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["maxPacketLossRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateDl': %w", err)
		}
		delete(object, "maxPacketLossRateDl")
	}

	if raw, found := object["maxPacketLossRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateUl': %w", err)
		}
		delete(object, "maxPacketLossRateUl")
	}

	if raw, found := object["maxSuppBwDl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwDl': %w", err)
		}
		delete(object, "maxSuppBwDl")
	}

	if raw, found := object["maxSuppBwUl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwUl': %w", err)
		}
		delete(object, "maxSuppBwUl")
	}

	if raw, found := object["medCompN"]; found {
		err = json.Unmarshal(raw, &a.MedCompN)
		if err != nil {
			return fmt.Errorf("error reading 'medCompN': %w", err)
		}
		delete(object, "medCompN")
	}

	if raw, found := object["medSubComps"]; found {
		err = json.Unmarshal(raw, &a.MedSubComps)
		if err != nil {
			return fmt.Errorf("error reading 'medSubComps': %w", err)
		}
		delete(object, "medSubComps")
	}

	if raw, found := object["medType"]; found {
		err = json.Unmarshal(raw, &a.MedType)
		if err != nil {
			return fmt.Errorf("error reading 'medType': %w", err)
		}
		delete(object, "medType")
	}

	if raw, found := object["minDesBwDl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwDl': %w", err)
		}
		delete(object, "minDesBwDl")
	}

	if raw, found := object["minDesBwUl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwUl': %w", err)
		}
		delete(object, "minDesBwUl")
	}

	if raw, found := object["mirBwDl"]; found {
		err = json.Unmarshal(raw, &a.MirBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwDl': %w", err)
		}
		delete(object, "mirBwDl")
	}

	if raw, found := object["mirBwUl"]; found {
		err = json.Unmarshal(raw, &a.MirBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwUl': %w", err)
		}
		delete(object, "mirBwUl")
	}

	if raw, found := object["preemptCap"]; found {
		err = json.Unmarshal(raw, &a.PreemptCap)
		if err != nil {
			return fmt.Errorf("error reading 'preemptCap': %w", err)
		}
		delete(object, "preemptCap")
	}

	if raw, found := object["preemptVuln"]; found {
		err = json.Unmarshal(raw, &a.PreemptVuln)
		if err != nil {
			return fmt.Errorf("error reading 'preemptVuln': %w", err)
		}
		delete(object, "preemptVuln")
	}

	if raw, found := object["prioSharingInd"]; found {
		err = json.Unmarshal(raw, &a.PrioSharingInd)
		if err != nil {
			return fmt.Errorf("error reading 'prioSharingInd': %w", err)
		}
		delete(object, "prioSharingInd")
	}

	if raw, found := object["qosReference"]; found {
		err = json.Unmarshal(raw, &a.QosReference)
		if err != nil {
			return fmt.Errorf("error reading 'qosReference': %w", err)
		}
		delete(object, "qosReference")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["rrBw"]; found {
		err = json.Unmarshal(raw, &a.RrBw)
		if err != nil {
			return fmt.Errorf("error reading 'rrBw': %w", err)
		}
		delete(object, "rrBw")
	}

	if raw, found := object["rsBw"]; found {
		err = json.Unmarshal(raw, &a.RsBw)
		if err != nil {
			return fmt.Errorf("error reading 'rsBw': %w", err)
		}
		delete(object, "rsBw")
	}

	if raw, found := object["sharingKeyDl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyDl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyDl': %w", err)
		}
		delete(object, "sharingKeyDl")
	}

	if raw, found := object["sharingKeyUl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyUl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyUl': %w", err)
		}
		delete(object, "sharingKeyUl")
	}

	if raw, found := object["tscaiInputDl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputDl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputDl': %w", err)
		}
		delete(object, "tscaiInputDl")
	}

	if raw, found := object["tscaiInputUl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputUl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputUl': %w", err)
		}
		delete(object, "tscaiInputUl")
	}

	if raw, found := object["tsnQos"]; found {
		err = json.Unmarshal(raw, &a.TsnQos)
		if err != nil {
			return fmt.Errorf("error reading 'tsnQos': %w", err)
		}
		delete(object, "tsnQos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaComponent to handle AdditionalProperties
func (a MediaComponent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AfRoutReq != nil {
		object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
		}
	}

	if len(a.AltSerReqs) != 0 {
		object["altSerReqs"], err = json.Marshal(a.AltSerReqs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altSerReqs': %w", err)
		}
	}

	if len(a.Codecs) != 0 {
		object["codecs"], err = json.Marshal(a.Codecs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codecs': %w", err)
		}
	}

	if a.ContVer != nil {
		object["contVer"], err = json.Marshal(a.ContVer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVer': %w", err)
		}
	}

	if a.DesMaxLatency != nil {
		object["desMaxLatency"], err = json.Marshal(a.DesMaxLatency)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'desMaxLatency': %w", err)
		}
	}

	if a.DesMaxLoss != nil {
		object["desMaxLoss"], err = json.Marshal(a.DesMaxLoss)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'desMaxLoss': %w", err)
		}
	}

	if a.DisUeNotif != nil {
		object["disUeNotif"], err = json.Marshal(a.DisUeNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'disUeNotif': %w", err)
		}
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	if a.FlusId != nil {
		object["flusId"], err = json.Marshal(a.FlusId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flusId': %w", err)
		}
	}

	if len(a.MarBwDl) != 0 {
		object["marBwDl"], err = json.Marshal(a.MarBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
		}
	}

	if len(a.MarBwUl) != 0 {
		object["marBwUl"], err = json.Marshal(a.MarBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
		}
	}

	object["maxPacketLossRateDl"], err = json.Marshal(a.MaxPacketLossRateDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateDl': %w", err)
	}

	object["maxPacketLossRateUl"], err = json.Marshal(a.MaxPacketLossRateUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateUl': %w", err)
	}

	if len(a.MaxSuppBwDl) != 0 {
		object["maxSuppBwDl"], err = json.Marshal(a.MaxSuppBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxSuppBwDl': %w", err)
		}
	}

	if len(a.MaxSuppBwUl) != 0 {
		object["maxSuppBwUl"], err = json.Marshal(a.MaxSuppBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxSuppBwUl': %w", err)
		}
	}

	object["medCompN"], err = json.Marshal(a.MedCompN)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'medCompN': %w", err)
	}

	if a.MedSubComps != nil {
		object["medSubComps"], err = json.Marshal(a.MedSubComps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medSubComps': %w", err)
		}
	}

	if a.MedType != nil {
		object["medType"], err = json.Marshal(a.MedType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medType': %w", err)
		}
	}

	if len(a.MinDesBwDl) != 0 {
		object["minDesBwDl"], err = json.Marshal(a.MinDesBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'minDesBwDl': %w", err)
		}
	}

	if len(a.MinDesBwUl) != 0 {
		object["minDesBwUl"], err = json.Marshal(a.MinDesBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'minDesBwUl': %w", err)
		}
	}

	if len(a.MirBwDl) != 0 {
		object["mirBwDl"], err = json.Marshal(a.MirBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mirBwDl': %w", err)
		}
	}

	if len(a.MirBwUl) != 0 {
		object["mirBwUl"], err = json.Marshal(a.MirBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mirBwUl': %w", err)
		}
	}

	if a.PreemptCap != nil {
		object["preemptCap"], err = json.Marshal(a.PreemptCap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptCap': %w", err)
		}
	}

	if a.PreemptVuln != nil {
		object["preemptVuln"], err = json.Marshal(a.PreemptVuln)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptVuln': %w", err)
		}
	}

	if a.PrioSharingInd != nil {
		object["prioSharingInd"], err = json.Marshal(a.PrioSharingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'prioSharingInd': %w", err)
		}
	}

	if a.QosReference != nil {
		object["qosReference"], err = json.Marshal(a.QosReference)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosReference': %w", err)
		}
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	if len(a.RrBw) != 0 {
		object["rrBw"], err = json.Marshal(a.RrBw)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rrBw': %w", err)
		}
	}

	if len(a.RsBw) != 0 {
		object["rsBw"], err = json.Marshal(a.RsBw)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rsBw': %w", err)
		}
	}

	if a.SharingKeyDl != nil {
		object["sharingKeyDl"], err = json.Marshal(a.SharingKeyDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharingKeyDl': %w", err)
		}
	}

	if a.SharingKeyUl != nil {
		object["sharingKeyUl"], err = json.Marshal(a.SharingKeyUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharingKeyUl': %w", err)
		}
	}

	object["tscaiInputDl"], err = json.Marshal(a.TscaiInputDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputDl': %w", err)
	}

	object["tscaiInputUl"], err = json.Marshal(a.TscaiInputUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputUl': %w", err)
	}

	if a.TsnQos != nil {
		object["tsnQos"], err = json.Marshal(a.TsnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnQos': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaComponentRm. Returns the specified
// element and whether it was found
func (a MediaComponentRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaComponentRm
func (a *MediaComponentRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaComponentRm to handle AdditionalProperties
func (a *MediaComponentRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["afRoutReq"]; found {
		err = json.Unmarshal(raw, &a.AfRoutReq)
		if err != nil {
			return fmt.Errorf("error reading 'afRoutReq': %w", err)
		}
		delete(object, "afRoutReq")
	}

	if raw, found := object["altSerReqs"]; found {
		err = json.Unmarshal(raw, &a.AltSerReqs)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReqs': %w", err)
		}
		delete(object, "altSerReqs")
	}

	if raw, found := object["codecs"]; found {
		err = json.Unmarshal(raw, &a.Codecs)
		if err != nil {
			return fmt.Errorf("error reading 'codecs': %w", err)
		}
		delete(object, "codecs")
	}

	if raw, found := object["contVer"]; found {
		err = json.Unmarshal(raw, &a.ContVer)
		if err != nil {
			return fmt.Errorf("error reading 'contVer': %w", err)
		}
		delete(object, "contVer")
	}

	if raw, found := object["desMaxLatency"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLatency)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLatency': %w", err)
		}
		delete(object, "desMaxLatency")
	}

	if raw, found := object["desMaxLoss"]; found {
		err = json.Unmarshal(raw, &a.DesMaxLoss)
		if err != nil {
			return fmt.Errorf("error reading 'desMaxLoss': %w", err)
		}
		delete(object, "desMaxLoss")
	}

	if raw, found := object["disUeNotif"]; found {
		err = json.Unmarshal(raw, &a.DisUeNotif)
		if err != nil {
			return fmt.Errorf("error reading 'disUeNotif': %w", err)
		}
		delete(object, "disUeNotif")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flusId"]; found {
		err = json.Unmarshal(raw, &a.FlusId)
		if err != nil {
			return fmt.Errorf("error reading 'flusId': %w", err)
		}
		delete(object, "flusId")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["maxPacketLossRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateDl': %w", err)
		}
		delete(object, "maxPacketLossRateDl")
	}

	if raw, found := object["maxPacketLossRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateUl': %w", err)
		}
		delete(object, "maxPacketLossRateUl")
	}

	if raw, found := object["maxSuppBwDl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwDl': %w", err)
		}
		delete(object, "maxSuppBwDl")
	}

	if raw, found := object["maxSuppBwUl"]; found {
		err = json.Unmarshal(raw, &a.MaxSuppBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxSuppBwUl': %w", err)
		}
		delete(object, "maxSuppBwUl")
	}

	if raw, found := object["medCompN"]; found {
		err = json.Unmarshal(raw, &a.MedCompN)
		if err != nil {
			return fmt.Errorf("error reading 'medCompN': %w", err)
		}
		delete(object, "medCompN")
	}

	if raw, found := object["medSubComps"]; found {
		err = json.Unmarshal(raw, &a.MedSubComps)
		if err != nil {
			return fmt.Errorf("error reading 'medSubComps': %w", err)
		}
		delete(object, "medSubComps")
	}

	if raw, found := object["medType"]; found {
		err = json.Unmarshal(raw, &a.MedType)
		if err != nil {
			return fmt.Errorf("error reading 'medType': %w", err)
		}
		delete(object, "medType")
	}

	if raw, found := object["minDesBwDl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwDl': %w", err)
		}
		delete(object, "minDesBwDl")
	}

	if raw, found := object["minDesBwUl"]; found {
		err = json.Unmarshal(raw, &a.MinDesBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'minDesBwUl': %w", err)
		}
		delete(object, "minDesBwUl")
	}

	if raw, found := object["mirBwDl"]; found {
		err = json.Unmarshal(raw, &a.MirBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwDl': %w", err)
		}
		delete(object, "mirBwDl")
	}

	if raw, found := object["mirBwUl"]; found {
		err = json.Unmarshal(raw, &a.MirBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'mirBwUl': %w", err)
		}
		delete(object, "mirBwUl")
	}

	if raw, found := object["preemptCap"]; found {
		err = json.Unmarshal(raw, &a.PreemptCap)
		if err != nil {
			return fmt.Errorf("error reading 'preemptCap': %w", err)
		}
		delete(object, "preemptCap")
	}

	if raw, found := object["preemptVuln"]; found {
		err = json.Unmarshal(raw, &a.PreemptVuln)
		if err != nil {
			return fmt.Errorf("error reading 'preemptVuln': %w", err)
		}
		delete(object, "preemptVuln")
	}

	if raw, found := object["prioSharingInd"]; found {
		err = json.Unmarshal(raw, &a.PrioSharingInd)
		if err != nil {
			return fmt.Errorf("error reading 'prioSharingInd': %w", err)
		}
		delete(object, "prioSharingInd")
	}

	if raw, found := object["qosReference"]; found {
		err = json.Unmarshal(raw, &a.QosReference)
		if err != nil {
			return fmt.Errorf("error reading 'qosReference': %w", err)
		}
		delete(object, "qosReference")
	}

	if raw, found := object["resPrio"]; found {
		err = json.Unmarshal(raw, &a.ResPrio)
		if err != nil {
			return fmt.Errorf("error reading 'resPrio': %w", err)
		}
		delete(object, "resPrio")
	}

	if raw, found := object["rrBw"]; found {
		err = json.Unmarshal(raw, &a.RrBw)
		if err != nil {
			return fmt.Errorf("error reading 'rrBw': %w", err)
		}
		delete(object, "rrBw")
	}

	if raw, found := object["rsBw"]; found {
		err = json.Unmarshal(raw, &a.RsBw)
		if err != nil {
			return fmt.Errorf("error reading 'rsBw': %w", err)
		}
		delete(object, "rsBw")
	}

	if raw, found := object["sharingKeyDl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyDl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyDl': %w", err)
		}
		delete(object, "sharingKeyDl")
	}

	if raw, found := object["sharingKeyUl"]; found {
		err = json.Unmarshal(raw, &a.SharingKeyUl)
		if err != nil {
			return fmt.Errorf("error reading 'sharingKeyUl': %w", err)
		}
		delete(object, "sharingKeyUl")
	}

	if raw, found := object["tscaiInputDl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputDl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputDl': %w", err)
		}
		delete(object, "tscaiInputDl")
	}

	if raw, found := object["tscaiInputUl"]; found {
		err = json.Unmarshal(raw, &a.TscaiInputUl)
		if err != nil {
			return fmt.Errorf("error reading 'tscaiInputUl': %w", err)
		}
		delete(object, "tscaiInputUl")
	}

	if raw, found := object["tsnQos"]; found {
		err = json.Unmarshal(raw, &a.TsnQos)
		if err != nil {
			return fmt.Errorf("error reading 'tsnQos': %w", err)
		}
		delete(object, "tsnQos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaComponentRm to handle AdditionalProperties
func (a MediaComponentRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	object["afRoutReq"], err = json.Marshal(a.AfRoutReq)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afRoutReq': %w", err)
	}

	object["altSerReqs"], err = json.Marshal(a.AltSerReqs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'altSerReqs': %w", err)
	}

	if len(a.Codecs) != 0 {
		object["codecs"], err = json.Marshal(a.Codecs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codecs': %w", err)
		}
	}

	if a.ContVer != nil {
		object["contVer"], err = json.Marshal(a.ContVer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contVer': %w", err)
		}
	}

	object["desMaxLatency"], err = json.Marshal(a.DesMaxLatency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'desMaxLatency': %w", err)
	}

	object["desMaxLoss"], err = json.Marshal(a.DesMaxLoss)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'desMaxLoss': %w", err)
	}

	if a.DisUeNotif != nil {
		object["disUeNotif"], err = json.Marshal(a.DisUeNotif)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'disUeNotif': %w", err)
		}
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	object["flusId"], err = json.Marshal(a.FlusId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flusId': %w", err)
	}

	object["marBwDl"], err = json.Marshal(a.MarBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
	}

	object["marBwUl"], err = json.Marshal(a.MarBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
	}

	object["maxPacketLossRateDl"], err = json.Marshal(a.MaxPacketLossRateDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateDl': %w", err)
	}

	object["maxPacketLossRateUl"], err = json.Marshal(a.MaxPacketLossRateUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxPacketLossRateUl': %w", err)
	}

	object["maxSuppBwDl"], err = json.Marshal(a.MaxSuppBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxSuppBwDl': %w", err)
	}

	object["maxSuppBwUl"], err = json.Marshal(a.MaxSuppBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxSuppBwUl': %w", err)
	}

	object["medCompN"], err = json.Marshal(a.MedCompN)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'medCompN': %w", err)
	}

	if a.MedSubComps != nil {
		object["medSubComps"], err = json.Marshal(a.MedSubComps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medSubComps': %w", err)
		}
	}

	if a.MedType != nil {
		object["medType"], err = json.Marshal(a.MedType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'medType': %w", err)
		}
	}

	object["minDesBwDl"], err = json.Marshal(a.MinDesBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minDesBwDl': %w", err)
	}

	object["minDesBwUl"], err = json.Marshal(a.MinDesBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'minDesBwUl': %w", err)
	}

	object["mirBwDl"], err = json.Marshal(a.MirBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mirBwDl': %w", err)
	}

	object["mirBwUl"], err = json.Marshal(a.MirBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mirBwUl': %w", err)
	}

	if a.PreemptCap != nil {
		object["preemptCap"], err = json.Marshal(a.PreemptCap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptCap': %w", err)
		}
	}

	if a.PreemptVuln != nil {
		object["preemptVuln"], err = json.Marshal(a.PreemptVuln)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'preemptVuln': %w", err)
		}
	}

	if a.PrioSharingInd != nil {
		object["prioSharingInd"], err = json.Marshal(a.PrioSharingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'prioSharingInd': %w", err)
		}
	}

	object["qosReference"], err = json.Marshal(a.QosReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosReference': %w", err)
	}

	if a.ResPrio != nil {
		object["resPrio"], err = json.Marshal(a.ResPrio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resPrio': %w", err)
		}
	}

	object["rrBw"], err = json.Marshal(a.RrBw)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rrBw': %w", err)
	}

	object["rsBw"], err = json.Marshal(a.RsBw)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rsBw': %w", err)
	}

	object["sharingKeyDl"], err = json.Marshal(a.SharingKeyDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharingKeyDl': %w", err)
	}

	object["sharingKeyUl"], err = json.Marshal(a.SharingKeyUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharingKeyUl': %w", err)
	}

	object["tscaiInputDl"], err = json.Marshal(a.TscaiInputDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputDl': %w", err)
	}

	object["tscaiInputUl"], err = json.Marshal(a.TscaiInputUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscaiInputUl': %w", err)
	}

	object["tsnQos"], err = json.Marshal(a.TsnQos)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tsnQos': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaSubComponent. Returns the specified
// element and whether it was found
func (a MediaSubComponent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaSubComponent
func (a *MediaSubComponent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaSubComponent to handle AdditionalProperties
func (a *MediaSubComponent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afSigProtocol"]; found {
		err = json.Unmarshal(raw, &a.AfSigProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'afSigProtocol': %w", err)
		}
		delete(object, "afSigProtocol")
	}

	if raw, found := object["ethfDescs"]; found {
		err = json.Unmarshal(raw, &a.EthfDescs)
		if err != nil {
			return fmt.Errorf("error reading 'ethfDescs': %w", err)
		}
		delete(object, "ethfDescs")
	}

	if raw, found := object["fDescs"]; found {
		err = json.Unmarshal(raw, &a.FDescs)
		if err != nil {
			return fmt.Errorf("error reading 'fDescs': %w", err)
		}
		delete(object, "fDescs")
	}

	if raw, found := object["fNum"]; found {
		err = json.Unmarshal(raw, &a.FNum)
		if err != nil {
			return fmt.Errorf("error reading 'fNum': %w", err)
		}
		delete(object, "fNum")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flowUsage"]; found {
		err = json.Unmarshal(raw, &a.FlowUsage)
		if err != nil {
			return fmt.Errorf("error reading 'flowUsage': %w", err)
		}
		delete(object, "flowUsage")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["tosTrCl"]; found {
		err = json.Unmarshal(raw, &a.TosTrCl)
		if err != nil {
			return fmt.Errorf("error reading 'tosTrCl': %w", err)
		}
		delete(object, "tosTrCl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaSubComponent to handle AdditionalProperties
func (a MediaSubComponent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfSigProtocol != nil {
		object["afSigProtocol"], err = json.Marshal(a.AfSigProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afSigProtocol': %w", err)
		}
	}

	if len(a.EthfDescs) != 0 {
		object["ethfDescs"], err = json.Marshal(a.EthfDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethfDescs': %w", err)
		}
	}

	if len(a.FDescs) != 0 {
		object["fDescs"], err = json.Marshal(a.FDescs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fDescs': %w", err)
		}
	}

	object["fNum"], err = json.Marshal(a.FNum)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fNum': %w", err)
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	if a.FlowUsage != nil {
		object["flowUsage"], err = json.Marshal(a.FlowUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowUsage': %w", err)
		}
	}

	if len(a.MarBwDl) != 0 {
		object["marBwDl"], err = json.Marshal(a.MarBwDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
		}
	}

	if len(a.MarBwUl) != 0 {
		object["marBwUl"], err = json.Marshal(a.MarBwUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
		}
	}

	if a.TosTrCl != nil {
		object["tosTrCl"], err = json.Marshal(a.TosTrCl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tosTrCl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MediaSubComponentRm. Returns the specified
// element and whether it was found
func (a MediaSubComponentRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MediaSubComponentRm
func (a *MediaSubComponentRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MediaSubComponentRm to handle AdditionalProperties
func (a *MediaSubComponentRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afSigProtocol"]; found {
		err = json.Unmarshal(raw, &a.AfSigProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'afSigProtocol': %w", err)
		}
		delete(object, "afSigProtocol")
	}

	if raw, found := object["ethfDescs"]; found {
		err = json.Unmarshal(raw, &a.EthfDescs)
		if err != nil {
			return fmt.Errorf("error reading 'ethfDescs': %w", err)
		}
		delete(object, "ethfDescs")
	}

	if raw, found := object["fDescs"]; found {
		err = json.Unmarshal(raw, &a.FDescs)
		if err != nil {
			return fmt.Errorf("error reading 'fDescs': %w", err)
		}
		delete(object, "fDescs")
	}

	if raw, found := object["fNum"]; found {
		err = json.Unmarshal(raw, &a.FNum)
		if err != nil {
			return fmt.Errorf("error reading 'fNum': %w", err)
		}
		delete(object, "fNum")
	}

	if raw, found := object["fStatus"]; found {
		err = json.Unmarshal(raw, &a.FStatus)
		if err != nil {
			return fmt.Errorf("error reading 'fStatus': %w", err)
		}
		delete(object, "fStatus")
	}

	if raw, found := object["flowUsage"]; found {
		err = json.Unmarshal(raw, &a.FlowUsage)
		if err != nil {
			return fmt.Errorf("error reading 'flowUsage': %w", err)
		}
		delete(object, "flowUsage")
	}

	if raw, found := object["marBwDl"]; found {
		err = json.Unmarshal(raw, &a.MarBwDl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwDl': %w", err)
		}
		delete(object, "marBwDl")
	}

	if raw, found := object["marBwUl"]; found {
		err = json.Unmarshal(raw, &a.MarBwUl)
		if err != nil {
			return fmt.Errorf("error reading 'marBwUl': %w", err)
		}
		delete(object, "marBwUl")
	}

	if raw, found := object["tosTrCl"]; found {
		err = json.Unmarshal(raw, &a.TosTrCl)
		if err != nil {
			return fmt.Errorf("error reading 'tosTrCl': %w", err)
		}
		delete(object, "tosTrCl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MediaSubComponentRm to handle AdditionalProperties
func (a MediaSubComponentRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfSigProtocol != nil {
		object["afSigProtocol"], err = json.Marshal(a.AfSigProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afSigProtocol': %w", err)
		}
	}

	object["ethfDescs"], err = json.Marshal(a.EthfDescs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ethfDescs': %w", err)
	}

	object["fDescs"], err = json.Marshal(a.FDescs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fDescs': %w", err)
	}

	object["fNum"], err = json.Marshal(a.FNum)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'fNum': %w", err)
	}

	if a.FStatus != nil {
		object["fStatus"], err = json.Marshal(a.FStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fStatus': %w", err)
		}
	}

	if a.FlowUsage != nil {
		object["flowUsage"], err = json.Marshal(a.FlowUsage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowUsage': %w", err)
		}
	}

	object["marBwDl"], err = json.Marshal(a.MarBwDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwDl': %w", err)
	}

	object["marBwUl"], err = json.Marshal(a.MarBwUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'marBwUl': %w", err)
	}

	object["tosTrCl"], err = json.Marshal(a.TosTrCl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tosTrCl': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OutOfCreditInformation. Returns the specified
// element and whether it was found
func (a OutOfCreditInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OutOfCreditInformation
func (a *OutOfCreditInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OutOfCreditInformation to handle AdditionalProperties
func (a *OutOfCreditInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["finUnitAct"]; found {
		err = json.Unmarshal(raw, &a.FinUnitAct)
		if err != nil {
			return fmt.Errorf("error reading 'finUnitAct': %w", err)
		}
		delete(object, "finUnitAct")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OutOfCreditInformation to handle AdditionalProperties
func (a OutOfCreditInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["finUnitAct"], err = json.Marshal(a.FinUnitAct)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'finUnitAct': %w", err)
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcscfRestorationRequestData. Returns the specified
// element and whether it was found
func (a PcscfRestorationRequestData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcscfRestorationRequestData
func (a *PcscfRestorationRequestData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcscfRestorationRequestData to handle AdditionalProperties
func (a *PcscfRestorationRequestData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["sliceInfo"]; found {
		err = json.Unmarshal(raw, &a.SliceInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sliceInfo': %w", err)
		}
		delete(object, "sliceInfo")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcscfRestorationRequestData to handle AdditionalProperties
func (a PcscfRestorationRequestData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	if a.SliceInfo != nil {
		object["sliceInfo"], err = json.Marshal(a.SliceInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sliceInfo': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if len(a.UeIpv4) != 0 {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionTsnBridge. Returns the specified
// element and whether it was found
func (a PduSessionTsnBridge) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionTsnBridge
func (a *PduSessionTsnBridge) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionTsnBridge to handle AdditionalProperties
func (a *PduSessionTsnBridge) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["tsnBridgeInfo"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeInfo': %w", err)
		}
		delete(object, "tsnBridgeInfo")
	}

	if raw, found := object["tsnBridgeManCont"]; found {
		err = json.Unmarshal(raw, &a.TsnBridgeManCont)
		if err != nil {
			return fmt.Errorf("error reading 'tsnBridgeManCont': %w", err)
		}
		delete(object, "tsnBridgeManCont")
	}

	if raw, found := object["tsnPortManContDstt"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContDstt)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContDstt': %w", err)
		}
		delete(object, "tsnPortManContDstt")
	}

	if raw, found := object["tsnPortManContNwtts"]; found {
		err = json.Unmarshal(raw, &a.TsnPortManContNwtts)
		if err != nil {
			return fmt.Errorf("error reading 'tsnPortManContNwtts': %w", err)
		}
		delete(object, "tsnPortManContNwtts")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionTsnBridge to handle AdditionalProperties
func (a PduSessionTsnBridge) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["tsnBridgeInfo"], err = json.Marshal(a.TsnBridgeInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tsnBridgeInfo': %w", err)
	}

	if a.TsnBridgeManCont != nil {
		object["tsnBridgeManCont"], err = json.Marshal(a.TsnBridgeManCont)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnBridgeManCont': %w", err)
		}
	}

	if a.TsnPortManContDstt != nil {
		object["tsnPortManContDstt"], err = json.Marshal(a.TsnPortManContDstt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContDstt': %w", err)
		}
	}

	if len(a.TsnPortManContNwtts) != 0 {
		object["tsnPortManContNwtts"], err = json.Marshal(a.TsnPortManContNwtts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tsnPortManContNwtts': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringInformation. Returns the specified
// element and whether it was found
func (a QosMonitoringInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringInformation
func (a *QosMonitoringInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringInformation to handle AdditionalProperties
func (a *QosMonitoringInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["repThreshDl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshDl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshDl': %w", err)
		}
		delete(object, "repThreshDl")
	}

	if raw, found := object["repThreshRp"]; found {
		err = json.Unmarshal(raw, &a.RepThreshRp)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshRp': %w", err)
		}
		delete(object, "repThreshRp")
	}

	if raw, found := object["repThreshUl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshUl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshUl': %w", err)
		}
		delete(object, "repThreshUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringInformation to handle AdditionalProperties
func (a QosMonitoringInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RepThreshDl != nil {
		object["repThreshDl"], err = json.Marshal(a.RepThreshDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshDl': %w", err)
		}
	}

	if a.RepThreshRp != nil {
		object["repThreshRp"], err = json.Marshal(a.RepThreshRp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshRp': %w", err)
		}
	}

	if a.RepThreshUl != nil {
		object["repThreshUl"], err = json.Marshal(a.RepThreshUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringInformationRm. Returns the specified
// element and whether it was found
func (a QosMonitoringInformationRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringInformationRm
func (a *QosMonitoringInformationRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringInformationRm to handle AdditionalProperties
func (a *QosMonitoringInformationRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["repThreshDl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshDl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshDl': %w", err)
		}
		delete(object, "repThreshDl")
	}

	if raw, found := object["repThreshRp"]; found {
		err = json.Unmarshal(raw, &a.RepThreshRp)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshRp': %w", err)
		}
		delete(object, "repThreshRp")
	}

	if raw, found := object["repThreshUl"]; found {
		err = json.Unmarshal(raw, &a.RepThreshUl)
		if err != nil {
			return fmt.Errorf("error reading 'repThreshUl': %w", err)
		}
		delete(object, "repThreshUl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringInformationRm to handle AdditionalProperties
func (a QosMonitoringInformationRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RepThreshDl != nil {
		object["repThreshDl"], err = json.Marshal(a.RepThreshDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshDl': %w", err)
		}
	}

	if a.RepThreshRp != nil {
		object["repThreshRp"], err = json.Marshal(a.RepThreshRp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshRp': %w", err)
		}
	}

	if a.RepThreshUl != nil {
		object["repThreshUl"], err = json.Marshal(a.RepThreshUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repThreshUl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringReport. Returns the specified
// element and whether it was found
func (a QosMonitoringReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringReport
func (a *QosMonitoringReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringReport to handle AdditionalProperties
func (a *QosMonitoringReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dlDelays"]; found {
		err = json.Unmarshal(raw, &a.DlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'dlDelays': %w", err)
		}
		delete(object, "dlDelays")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if raw, found := object["rtDelays"]; found {
		err = json.Unmarshal(raw, &a.RtDelays)
		if err != nil {
			return fmt.Errorf("error reading 'rtDelays': %w", err)
		}
		delete(object, "rtDelays")
	}

	if raw, found := object["ulDelays"]; found {
		err = json.Unmarshal(raw, &a.UlDelays)
		if err != nil {
			return fmt.Errorf("error reading 'ulDelays': %w", err)
		}
		delete(object, "ulDelays")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringReport to handle AdditionalProperties
func (a QosMonitoringReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DlDelays) != 0 {
		object["dlDelays"], err = json.Marshal(a.DlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDelays': %w", err)
		}
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	if len(a.RtDelays) != 0 {
		object["rtDelays"], err = json.Marshal(a.RtDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rtDelays': %w", err)
		}
	}

	if len(a.UlDelays) != 0 {
		object["ulDelays"], err = json.Marshal(a.UlDelays)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulDelays': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosNotificationControlInfo. Returns the specified
// element and whether it was found
func (a QosNotificationControlInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosNotificationControlInfo
func (a *QosNotificationControlInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosNotificationControlInfo to handle AdditionalProperties
func (a *QosNotificationControlInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altSerReq"]; found {
		err = json.Unmarshal(raw, &a.AltSerReq)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReq': %w", err)
		}
		delete(object, "altSerReq")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if raw, found := object["notifType"]; found {
		err = json.Unmarshal(raw, &a.NotifType)
		if err != nil {
			return fmt.Errorf("error reading 'notifType': %w", err)
		}
		delete(object, "notifType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosNotificationControlInfo to handle AdditionalProperties
func (a QosNotificationControlInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltSerReq != nil {
		object["altSerReq"], err = json.Marshal(a.AltSerReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altSerReq': %w", err)
		}
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	object["notifType"], err = json.Marshal(a.NotifType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResourcesAllocationInfo. Returns the specified
// element and whether it was found
func (a ResourcesAllocationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResourcesAllocationInfo
func (a *ResourcesAllocationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResourcesAllocationInfo to handle AdditionalProperties
func (a *ResourcesAllocationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altSerReq"]; found {
		err = json.Unmarshal(raw, &a.AltSerReq)
		if err != nil {
			return fmt.Errorf("error reading 'altSerReq': %w", err)
		}
		delete(object, "altSerReq")
	}

	if raw, found := object["flows"]; found {
		err = json.Unmarshal(raw, &a.Flows)
		if err != nil {
			return fmt.Errorf("error reading 'flows': %w", err)
		}
		delete(object, "flows")
	}

	if raw, found := object["mcResourcStatus"]; found {
		err = json.Unmarshal(raw, &a.McResourcStatus)
		if err != nil {
			return fmt.Errorf("error reading 'mcResourcStatus': %w", err)
		}
		delete(object, "mcResourcStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResourcesAllocationInfo to handle AdditionalProperties
func (a ResourcesAllocationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltSerReq != nil {
		object["altSerReq"], err = json.Marshal(a.AltSerReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altSerReq': %w", err)
		}
	}

	if len(a.Flows) != 0 {
		object["flows"], err = json.Marshal(a.Flows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flows': %w", err)
		}
	}

	if a.McResourcStatus != nil {
		object["mcResourcStatus"], err = json.Marshal(a.McResourcStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcResourcStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SpatialValidity. Returns the specified
// element and whether it was found
func (a SpatialValidity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SpatialValidity
func (a *SpatialValidity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SpatialValidity to handle AdditionalProperties
func (a *SpatialValidity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["presenceInfoList"]; found {
		err = json.Unmarshal(raw, &a.PresenceInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInfoList': %w", err)
		}
		delete(object, "presenceInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SpatialValidity to handle AdditionalProperties
func (a SpatialValidity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["presenceInfoList"], err = json.Marshal(a.PresenceInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'presenceInfoList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SpatialValidityRm. Returns the specified
// element and whether it was found
func (a SpatialValidityRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SpatialValidityRm
func (a *SpatialValidityRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SpatialValidityRm to handle AdditionalProperties
func (a *SpatialValidityRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["presenceInfoList"]; found {
		err = json.Unmarshal(raw, &a.PresenceInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInfoList': %w", err)
		}
		delete(object, "presenceInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SpatialValidityRm to handle AdditionalProperties
func (a SpatialValidityRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["presenceInfoList"], err = json.Marshal(a.PresenceInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'presenceInfoList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TemporalValidity. Returns the specified
// element and whether it was found
func (a TemporalValidity) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TemporalValidity
func (a *TemporalValidity) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TemporalValidity to handle AdditionalProperties
func (a *TemporalValidity) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["startTime"]; found {
		err = json.Unmarshal(raw, &a.StartTime)
		if err != nil {
			return fmt.Errorf("error reading 'startTime': %w", err)
		}
		delete(object, "startTime")
	}

	if raw, found := object["stopTime"]; found {
		err = json.Unmarshal(raw, &a.StopTime)
		if err != nil {
			return fmt.Errorf("error reading 'stopTime': %w", err)
		}
		delete(object, "stopTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TemporalValidity to handle AdditionalProperties
func (a TemporalValidity) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.StartTime != nil {
		object["startTime"], err = json.Marshal(a.StartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'startTime': %w", err)
		}
	}

	if a.StopTime != nil {
		object["stopTime"], err = json.Marshal(a.StopTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stopTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TerminationInfo. Returns the specified
// element and whether it was found
func (a TerminationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TerminationInfo
func (a *TerminationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TerminationInfo to handle AdditionalProperties
func (a *TerminationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["termCause"]; found {
		err = json.Unmarshal(raw, &a.TermCause)
		if err != nil {
			return fmt.Errorf("error reading 'termCause': %w", err)
		}
		delete(object, "termCause")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TerminationInfo to handle AdditionalProperties
func (a TerminationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["resUri"], err = json.Marshal(a.ResUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
	}

	object["termCause"], err = json.Marshal(a.TermCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'termCause': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TscaiInputContainer. Returns the specified
// element and whether it was found
func (a TscaiInputContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TscaiInputContainer
func (a *TscaiInputContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TscaiInputContainer to handle AdditionalProperties
func (a *TscaiInputContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["burstArrivalTime"]; found {
		err = json.Unmarshal(raw, &a.BurstArrivalTime)
		if err != nil {
			return fmt.Errorf("error reading 'burstArrivalTime': %w", err)
		}
		delete(object, "burstArrivalTime")
	}

	if raw, found := object["periodicity"]; found {
		err = json.Unmarshal(raw, &a.Periodicity)
		if err != nil {
			return fmt.Errorf("error reading 'periodicity': %w", err)
		}
		delete(object, "periodicity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TscaiInputContainer to handle AdditionalProperties
func (a TscaiInputContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BurstArrivalTime != nil {
		object["burstArrivalTime"], err = json.Marshal(a.BurstArrivalTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'burstArrivalTime': %w", err)
		}
	}

	if a.Periodicity != nil {
		object["periodicity"], err = json.Marshal(a.Periodicity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TsnQosContainer. Returns the specified
// element and whether it was found
func (a TsnQosContainer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TsnQosContainer
func (a *TsnQosContainer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TsnQosContainer to handle AdditionalProperties
func (a *TsnQosContainer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxTscBurstSize"]; found {
		err = json.Unmarshal(raw, &a.MaxTscBurstSize)
		if err != nil {
			return fmt.Errorf("error reading 'maxTscBurstSize': %w", err)
		}
		delete(object, "maxTscBurstSize")
	}

	if raw, found := object["tscPackDelay"]; found {
		err = json.Unmarshal(raw, &a.TscPackDelay)
		if err != nil {
			return fmt.Errorf("error reading 'tscPackDelay': %w", err)
		}
		delete(object, "tscPackDelay")
	}

	if raw, found := object["tscPrioLevel"]; found {
		err = json.Unmarshal(raw, &a.TscPrioLevel)
		if err != nil {
			return fmt.Errorf("error reading 'tscPrioLevel': %w", err)
		}
		delete(object, "tscPrioLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TsnQosContainer to handle AdditionalProperties
func (a TsnQosContainer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxTscBurstSize != 0 {
		object["maxTscBurstSize"], err = json.Marshal(a.MaxTscBurstSize)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxTscBurstSize': %w", err)
		}
	}

	if a.TscPackDelay != 0 {
		object["tscPackDelay"], err = json.Marshal(a.TscPackDelay)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tscPackDelay': %w", err)
		}
	}

	if a.TscPrioLevel != 0 {
		object["tscPrioLevel"], err = json.Marshal(a.TscPrioLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tscPrioLevel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TsnQosContainerRm. Returns the specified
// element and whether it was found
func (a TsnQosContainerRm) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TsnQosContainerRm
func (a *TsnQosContainerRm) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TsnQosContainerRm to handle AdditionalProperties
func (a *TsnQosContainerRm) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxTscBurstSize"]; found {
		err = json.Unmarshal(raw, &a.MaxTscBurstSize)
		if err != nil {
			return fmt.Errorf("error reading 'maxTscBurstSize': %w", err)
		}
		delete(object, "maxTscBurstSize")
	}

	if raw, found := object["tscPackDelay"]; found {
		err = json.Unmarshal(raw, &a.TscPackDelay)
		if err != nil {
			return fmt.Errorf("error reading 'tscPackDelay': %w", err)
		}
		delete(object, "tscPackDelay")
	}

	if raw, found := object["tscPrioLevel"]; found {
		err = json.Unmarshal(raw, &a.TscPrioLevel)
		if err != nil {
			return fmt.Errorf("error reading 'tscPrioLevel': %w", err)
		}
		delete(object, "tscPrioLevel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TsnQosContainerRm to handle AdditionalProperties
func (a TsnQosContainerRm) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["maxTscBurstSize"], err = json.Marshal(a.MaxTscBurstSize)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxTscBurstSize': %w", err)
	}

	object["tscPackDelay"], err = json.Marshal(a.TscPackDelay)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscPackDelay': %w", err)
	}

	object["tscPrioLevel"], err = json.Marshal(a.TscPrioLevel)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tscPrioLevel': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeIdentityInfo. Returns the specified
// element and whether it was found
func (a UeIdentityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeIdentityInfo
func (a *UeIdentityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeIdentityInfo to handle AdditionalProperties
func (a *UeIdentityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeIdentityInfo to handle AdditionalProperties
func (a UeIdentityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsEventsSubscReqData returns the union data inside the EventsSubscPutData as a EventsSubscReqData
func (t EventsSubscPutData) AsEventsSubscReqData() (EventsSubscReqData, error) {
	var body EventsSubscReqData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventsSubscReqData overwrites any union data inside the EventsSubscPutData as the provided EventsSubscReqData
func (t *EventsSubscPutData) FromEventsSubscReqData(v EventsSubscReqData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventsSubscReqData performs a merge with any union data inside the EventsSubscPutData, using the provided EventsSubscReqData
func (t *EventsSubscPutData) MergeEventsSubscReqData(v EventsSubscReqData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventsNotification returns the union data inside the EventsSubscPutData as a EventsNotification
func (t EventsSubscPutData) AsEventsNotification() (EventsNotification, error) {
	var body EventsNotification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventsNotification overwrites any union data inside the EventsSubscPutData as the provided EventsNotification
func (t *EventsSubscPutData) FromEventsNotification(v EventsNotification) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventsNotification performs a merge with any union data inside the EventsSubscPutData, using the provided EventsNotification
func (t *EventsSubscPutData) MergeEventsNotification(v EventsNotification) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t EventsSubscPutData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EventsSubscPutData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAppSessionsWithBody request with any body
	PostAppSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAppSessions(ctx context.Context, body PostAppSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PcscfRestorationWithBody request with any body
	PcscfRestorationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PcscfRestoration(ctx context.Context, body PcscfRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppSession request
	GetAppSession(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModAppSessionWithBody request with any body
	ModAppSessionWithBody(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModAppSessionWithApplicationMergePatchPlusJSONBody(ctx context.Context, appSessionId string, body ModAppSessionApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAppSessionWithBody request with any body
	DeleteAppSessionWithBody(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAppSession(ctx context.Context, appSessionId string, body DeleteAppSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEventsSubsc request
	DeleteEventsSubsc(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEventsSubscWithBody request with any body
	UpdateEventsSubscWithBody(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEventsSubsc(ctx context.Context, appSessionId string, body UpdateEventsSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAppSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppSessionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAppSessions(ctx context.Context, body PostAppSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAppSessionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PcscfRestorationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPcscfRestorationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PcscfRestoration(ctx context.Context, body PcscfRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPcscfRestorationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppSession(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppSessionRequest(c.Server, appSessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModAppSessionWithBody(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModAppSessionRequestWithBody(c.Server, appSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModAppSessionWithApplicationMergePatchPlusJSONBody(ctx context.Context, appSessionId string, body ModAppSessionApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModAppSessionRequestWithApplicationMergePatchPlusJSONBody(c.Server, appSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppSessionWithBody(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppSessionRequestWithBody(c.Server, appSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppSession(ctx context.Context, appSessionId string, body DeleteAppSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppSessionRequest(c.Server, appSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEventsSubsc(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEventsSubscRequest(c.Server, appSessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEventsSubscWithBody(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEventsSubscRequestWithBody(c.Server, appSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEventsSubsc(ctx context.Context, appSessionId string, body UpdateEventsSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEventsSubscRequest(c.Server, appSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAppSessionsRequest calls the generic PostAppSessions builder with application/json body
func NewPostAppSessionsRequest(server string, body PostAppSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAppSessionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAppSessionsRequestWithBody generates requests for PostAppSessions with any type of body
func NewPostAppSessionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPcscfRestorationRequest calls the generic PcscfRestoration builder with application/json body
func NewPcscfRestorationRequest(server string, body PcscfRestorationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPcscfRestorationRequestWithBody(server, "application/json", bodyReader)
}

// NewPcscfRestorationRequestWithBody generates requests for PcscfRestoration with any type of body
func NewPcscfRestorationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-sessions/pcscf-restoration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAppSessionRequest generates requests for GetAppSession
func NewGetAppSessionRequest(server string, appSessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appSessionId", runtime.ParamLocationPath, appSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModAppSessionRequestWithApplicationMergePatchPlusJSONBody calls the generic ModAppSession builder with application/merge-patch+json body
func NewModAppSessionRequestWithApplicationMergePatchPlusJSONBody(server string, appSessionId string, body ModAppSessionApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModAppSessionRequestWithBody(server, appSessionId, "application/merge-patch+json", bodyReader)
}

// NewModAppSessionRequestWithBody generates requests for ModAppSession with any type of body
func NewModAppSessionRequestWithBody(server string, appSessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appSessionId", runtime.ParamLocationPath, appSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-sessions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAppSessionRequest calls the generic DeleteAppSession builder with application/json body
func NewDeleteAppSessionRequest(server string, appSessionId string, body DeleteAppSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAppSessionRequestWithBody(server, appSessionId, "application/json", bodyReader)
}

// NewDeleteAppSessionRequestWithBody generates requests for DeleteAppSession with any type of body
func NewDeleteAppSessionRequestWithBody(server string, appSessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appSessionId", runtime.ParamLocationPath, appSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-sessions/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEventsSubscRequest generates requests for DeleteEventsSubsc
func NewDeleteEventsSubscRequest(server string, appSessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appSessionId", runtime.ParamLocationPath, appSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-sessions/%s/events-subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEventsSubscRequest calls the generic UpdateEventsSubsc builder with application/json body
func NewUpdateEventsSubscRequest(server string, appSessionId string, body UpdateEventsSubscJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEventsSubscRequestWithBody(server, appSessionId, "application/json", bodyReader)
}

// NewUpdateEventsSubscRequestWithBody generates requests for UpdateEventsSubsc with any type of body
func NewUpdateEventsSubscRequestWithBody(server string, appSessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appSessionId", runtime.ParamLocationPath, appSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-sessions/%s/events-subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAppSessionsWithBodyWithResponse request with any body
	PostAppSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppSessionsResponse, error)

	PostAppSessionsWithResponse(ctx context.Context, body PostAppSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppSessionsResponse, error)

	// PcscfRestorationWithBodyWithResponse request with any body
	PcscfRestorationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PcscfRestorationResponse, error)

	PcscfRestorationWithResponse(ctx context.Context, body PcscfRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*PcscfRestorationResponse, error)

	// GetAppSessionWithResponse request
	GetAppSessionWithResponse(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*GetAppSessionResponse, error)

	// ModAppSessionWithBodyWithResponse request with any body
	ModAppSessionWithBodyWithResponse(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModAppSessionResponse, error)

	ModAppSessionWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, appSessionId string, body ModAppSessionApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModAppSessionResponse, error)

	// DeleteAppSessionWithBodyWithResponse request with any body
	DeleteAppSessionWithBodyWithResponse(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAppSessionResponse, error)

	DeleteAppSessionWithResponse(ctx context.Context, appSessionId string, body DeleteAppSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAppSessionResponse, error)

	// DeleteEventsSubscWithResponse request
	DeleteEventsSubscWithResponse(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*DeleteEventsSubscResponse, error)

	// UpdateEventsSubscWithBodyWithResponse request with any body
	UpdateEventsSubscWithBodyWithResponse(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEventsSubscResponse, error)

	UpdateEventsSubscWithResponse(ctx context.Context, appSessionId string, body UpdateEventsSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEventsSubscResponse, error)
}

type PostAppSessionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *AppSessionContext
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *ExtendedProblemDetails
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PostAppSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAppSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PcscfRestorationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PcscfRestorationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PcscfRestorationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AppSessionContext
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetAppSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModAppSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AppSessionContext
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *ExtendedProblemDetails
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ModAppSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModAppSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AppSessionContext
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteAppSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEventsSubscResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteEventsSubscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEventsSubscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEventsSubscResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *EventsSubscPutData
	JSON201                       *EventsSubscPutData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateEventsSubscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEventsSubscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAppSessionsWithBodyWithResponse request with arbitrary body returning *PostAppSessionsResponse
func (c *ClientWithResponses) PostAppSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAppSessionsResponse, error) {
	rsp, err := c.PostAppSessionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostAppSessionsWithResponse(ctx context.Context, body PostAppSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAppSessionsResponse, error) {
	rsp, err := c.PostAppSessions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAppSessionsResponse(rsp)
}

// PcscfRestorationWithBodyWithResponse request with arbitrary body returning *PcscfRestorationResponse
func (c *ClientWithResponses) PcscfRestorationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PcscfRestorationResponse, error) {
	rsp, err := c.PcscfRestorationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePcscfRestorationResponse(rsp)
}

func (c *ClientWithResponses) PcscfRestorationWithResponse(ctx context.Context, body PcscfRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*PcscfRestorationResponse, error) {
	rsp, err := c.PcscfRestoration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePcscfRestorationResponse(rsp)
}

// GetAppSessionWithResponse request returning *GetAppSessionResponse
func (c *ClientWithResponses) GetAppSessionWithResponse(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*GetAppSessionResponse, error) {
	rsp, err := c.GetAppSession(ctx, appSessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppSessionResponse(rsp)
}

// ModAppSessionWithBodyWithResponse request with arbitrary body returning *ModAppSessionResponse
func (c *ClientWithResponses) ModAppSessionWithBodyWithResponse(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModAppSessionResponse, error) {
	rsp, err := c.ModAppSessionWithBody(ctx, appSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModAppSessionResponse(rsp)
}

func (c *ClientWithResponses) ModAppSessionWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, appSessionId string, body ModAppSessionApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModAppSessionResponse, error) {
	rsp, err := c.ModAppSessionWithApplicationMergePatchPlusJSONBody(ctx, appSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModAppSessionResponse(rsp)
}

// DeleteAppSessionWithBodyWithResponse request with arbitrary body returning *DeleteAppSessionResponse
func (c *ClientWithResponses) DeleteAppSessionWithBodyWithResponse(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAppSessionResponse, error) {
	rsp, err := c.DeleteAppSessionWithBody(ctx, appSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppSessionResponse(rsp)
}

func (c *ClientWithResponses) DeleteAppSessionWithResponse(ctx context.Context, appSessionId string, body DeleteAppSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAppSessionResponse, error) {
	rsp, err := c.DeleteAppSession(ctx, appSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppSessionResponse(rsp)
}

// DeleteEventsSubscWithResponse request returning *DeleteEventsSubscResponse
func (c *ClientWithResponses) DeleteEventsSubscWithResponse(ctx context.Context, appSessionId string, reqEditors ...RequestEditorFn) (*DeleteEventsSubscResponse, error) {
	rsp, err := c.DeleteEventsSubsc(ctx, appSessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEventsSubscResponse(rsp)
}

// UpdateEventsSubscWithBodyWithResponse request with arbitrary body returning *UpdateEventsSubscResponse
func (c *ClientWithResponses) UpdateEventsSubscWithBodyWithResponse(ctx context.Context, appSessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEventsSubscResponse, error) {
	rsp, err := c.UpdateEventsSubscWithBody(ctx, appSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEventsSubscResponse(rsp)
}

func (c *ClientWithResponses) UpdateEventsSubscWithResponse(ctx context.Context, appSessionId string, body UpdateEventsSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEventsSubscResponse, error) {
	rsp, err := c.UpdateEventsSubsc(ctx, appSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEventsSubscResponse(rsp)
}

// ParsePostAppSessionsResponse parses an HTTP response from a PostAppSessionsWithResponse call
func ParsePostAppSessionsResponse(rsp *http.Response) (*PostAppSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAppSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppSessionContext
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 303:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ExtendedProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePcscfRestorationResponse parses an HTTP response from a PcscfRestorationWithResponse call
func ParsePcscfRestorationResponse(rsp *http.Response) (*PcscfRestorationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PcscfRestorationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAppSessionResponse parses an HTTP response from a GetAppSessionWithResponse call
func ParseGetAppSessionResponse(rsp *http.Response) (*GetAppSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppSessionContext
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModAppSessionResponse parses an HTTP response from a ModAppSessionWithResponse call
func ParseModAppSessionResponse(rsp *http.Response) (*ModAppSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModAppSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppSessionContext
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ExtendedProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAppSessionResponse parses an HTTP response from a DeleteAppSessionWithResponse call
func ParseDeleteAppSessionResponse(rsp *http.Response) (*DeleteAppSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppSessionContext
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteEventsSubscResponse parses an HTTP response from a DeleteEventsSubscWithResponse call
func ParseDeleteEventsSubscResponse(rsp *http.Response) (*DeleteEventsSubscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEventsSubscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateEventsSubscResponse parses an HTTP response from a UpdateEventsSubscWithResponse call
func ParseUpdateEventsSubscResponse(rsp *http.Response) (*UpdateEventsSubscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEventsSubscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsSubscPutData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EventsSubscPutData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new Individual Application Session Context resource
	// (POST /app-sessions)
	PostAppSessions(c *gin.Context)
	// Indicates P-CSCF restoration and does not create an Individual Application Session Context
	// (POST /app-sessions/pcscf-restoration)
	PcscfRestoration(c *gin.Context)
	// Reads an existing Individual Application Session Context
	// (GET /app-sessions/{appSessionId})
	GetAppSession(c *gin.Context, appSessionId string)
	// Modifies an existing Individual Application Session Context
	// (PATCH /app-sessions/{appSessionId})
	ModAppSession(c *gin.Context, appSessionId string)
	// Deletes an existing Individual Application Session Context
	// (POST /app-sessions/{appSessionId}/delete)
	DeleteAppSession(c *gin.Context, appSessionId string)
	// deletes the Events Subscription subresource
	// (DELETE /app-sessions/{appSessionId}/events-subscription)
	DeleteEventsSubsc(c *gin.Context, appSessionId string)
	// creates or modifies an Events Subscription subresource
	// (PUT /app-sessions/{appSessionId}/events-subscription)
	UpdateEventsSubsc(c *gin.Context, appSessionId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAppSessions operation middleware
func (siw *ServerInterfaceWrapper) PostAppSessions(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-policyauthorization"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAppSessions(c)
}

// PcscfRestoration operation middleware
func (siw *ServerInterfaceWrapper) PcscfRestoration(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-policyauthorization"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PcscfRestoration(c)
}

// GetAppSession operation middleware
func (siw *ServerInterfaceWrapper) GetAppSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "appSessionId" -------------
	var appSessionId string

	err = runtime.BindStyledParameter("simple", false, "appSessionId", c.Param("appSessionId"), &appSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-policyauthorization"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAppSession(c, appSessionId)
}

// ModAppSession operation middleware
func (siw *ServerInterfaceWrapper) ModAppSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "appSessionId" -------------
	var appSessionId string

	err = runtime.BindStyledParameter("simple", false, "appSessionId", c.Param("appSessionId"), &appSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-policyauthorization"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModAppSession(c, appSessionId)
}

// DeleteAppSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteAppSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "appSessionId" -------------
	var appSessionId string

	err = runtime.BindStyledParameter("simple", false, "appSessionId", c.Param("appSessionId"), &appSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-policyauthorization"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAppSession(c, appSessionId)
}

// DeleteEventsSubsc operation middleware
func (siw *ServerInterfaceWrapper) DeleteEventsSubsc(c *gin.Context) {

	var err error

	// ------------- Path parameter "appSessionId" -------------
	var appSessionId string

	err = runtime.BindStyledParameter("simple", false, "appSessionId", c.Param("appSessionId"), &appSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-policyauthorization"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEventsSubsc(c, appSessionId)
}

// UpdateEventsSubsc operation middleware
func (siw *ServerInterfaceWrapper) UpdateEventsSubsc(c *gin.Context) {

	var err error

	// ------------- Path parameter "appSessionId" -------------
	var appSessionId string

	err = runtime.BindStyledParameter("simple", false, "appSessionId", c.Param("appSessionId"), &appSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-policyauthorization"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEventsSubsc(c, appSessionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/app-sessions", wrapper.PostAppSessions)
	router.POST(options.BaseURL+"/app-sessions/pcscf-restoration", wrapper.PcscfRestoration)
	router.GET(options.BaseURL+"/app-sessions/:appSessionId", wrapper.GetAppSession)
	router.PATCH(options.BaseURL+"/app-sessions/:appSessionId", wrapper.ModAppSession)
	router.POST(options.BaseURL+"/app-sessions/:appSessionId/delete", wrapper.DeleteAppSession)
	router.DELETE(options.BaseURL+"/app-sessions/:appSessionId/events-subscription", wrapper.DeleteEventsSubsc)
	router.PUT(options.BaseURL+"/app-sessions/:appSessionId/events-subscription", wrapper.UpdateEventsSubsc)
}

type PostAppSessionsRequestObject struct {
	Body *PostAppSessionsJSONRequestBody
}

type PostAppSessionsResponseObject interface {
	VisitPostAppSessionsResponse(w http.ResponseWriter) error
}

type PostAppSessions201ResponseHeaders struct {
	Location string
}

type PostAppSessions201JSONResponse struct {
	Body    AppSessionContext
	Headers PostAppSessions201ResponseHeaders
}

func (response PostAppSessions201JSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAppSessions303ResponseHeaders struct {
	Location string
}

type PostAppSessions303Response struct {
	Headers PostAppSessions303ResponseHeaders
}

func (response PostAppSessions303Response) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type PostAppSessions400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions400ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PostAppSessions401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions401ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PostAppSessions403ResponseHeaders struct {
	RetryAfter struct {
		union json.RawMessage
	}
}

type PostAppSessions403ApplicationProblemPlusJSONResponse struct {
	Body    ExtendedProblemDetails
	Headers PostAppSessions403ResponseHeaders
}

func (response PostAppSessions403ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAppSessions404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions404ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PostAppSessions411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions411ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PostAppSessions413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions413ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PostAppSessions415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions415ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PostAppSessions429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions429ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PostAppSessions500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions500ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PostAppSessions503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response PostAppSessions503ApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PostAppSessionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PostAppSessionsdefaultApplicationProblemPlusJSONResponse) VisitPostAppSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PcscfRestorationRequestObject struct {
	Body *PcscfRestorationJSONRequestBody
}

type PcscfRestorationResponseObject interface {
	VisitPcscfRestorationResponse(w http.ResponseWriter) error
}

type PcscfRestoration204Response struct {
}

func (response PcscfRestoration204Response) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PcscfRestoration307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PcscfRestoration307JSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PcscfRestoration308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PcscfRestoration308JSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PcscfRestoration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration400ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration401ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration403ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration404ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration411ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration413ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration415ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration429ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration500ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PcscfRestoration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response PcscfRestoration503ApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PcscfRestorationdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PcscfRestorationdefaultApplicationProblemPlusJSONResponse) VisitPcscfRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAppSessionRequestObject struct {
	AppSessionId string `json:"appSessionId"`
}

type GetAppSessionResponseObject interface {
	VisitGetAppSessionResponse(w http.ResponseWriter) error
}

type GetAppSession200JSONResponse AppSessionContext

func (response GetAppSession200JSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(AppSessionContext(response))
}

type GetAppSession307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response GetAppSession307JSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAppSession308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response GetAppSession308JSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAppSession400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetAppSession400ApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetAppSession401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response GetAppSession401ApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type GetAppSession403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetAppSession403ApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GetAppSession404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetAppSession404ApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetAppSession406Response externalRef0.N406Response

func (response GetAppSession406Response) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type GetAppSession429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response GetAppSession429ApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type GetAppSession500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetAppSession500ApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetAppSession503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetAppSession503ApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetAppSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetAppSessiondefaultApplicationProblemPlusJSONResponse) VisitGetAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModAppSessionRequestObject struct {
	AppSessionId string `json:"appSessionId"`
	Body         *ModAppSessionApplicationMergePatchPlusJSONRequestBody
}

type ModAppSessionResponseObject interface {
	VisitModAppSessionResponse(w http.ResponseWriter) error
}

type ModAppSession200JSONResponse AppSessionContext

func (response ModAppSession200JSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(AppSessionContext(response))
}

type ModAppSession204Response struct {
}

func (response ModAppSession204Response) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ModAppSession307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ModAppSession307JSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModAppSession308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ModAppSession308JSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModAppSession400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ModAppSession400ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ModAppSession401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ModAppSession401ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type ModAppSession403ResponseHeaders struct {
	RetryAfter struct {
		union json.RawMessage
	}
}

type ModAppSession403ApplicationProblemPlusJSONResponse struct {
	Body    ExtendedProblemDetails
	Headers ModAppSession403ResponseHeaders
}

func (response ModAppSession403ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModAppSession404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModAppSession404ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModAppSession411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ModAppSession411ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ModAppSession413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ModAppSession413ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ModAppSession415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ModAppSession415ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ModAppSession429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ModAppSession429ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ModAppSession500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ModAppSession500ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ModAppSession503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ModAppSession503ApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ModAppSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModAppSessiondefaultApplicationProblemPlusJSONResponse) VisitModAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAppSessionRequestObject struct {
	AppSessionId string `json:"appSessionId"`
	Body         *DeleteAppSessionJSONRequestBody
}

type DeleteAppSessionResponseObject interface {
	VisitDeleteAppSessionResponse(w http.ResponseWriter) error
}

type DeleteAppSession200JSONResponse AppSessionContext

func (response DeleteAppSession200JSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(AppSessionContext(response))
}

type DeleteAppSession204Response struct {
}

func (response DeleteAppSession204Response) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAppSession307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeleteAppSession307JSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAppSession308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeleteAppSession308JSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAppSession400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession400ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession401ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession403ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession404ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession411ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession413ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession415ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession429ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession500ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteAppSession503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteAppSession503ApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteAppSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteAppSessiondefaultApplicationProblemPlusJSONResponse) VisitDeleteAppSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEventsSubscRequestObject struct {
	AppSessionId string `json:"appSessionId"`
}

type DeleteEventsSubscResponseObject interface {
	VisitDeleteEventsSubscResponse(w http.ResponseWriter) error
}

type DeleteEventsSubsc204Response struct {
}

func (response DeleteEventsSubsc204Response) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEventsSubsc307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeleteEventsSubsc307JSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEventsSubsc308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeleteEventsSubsc308JSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteEventsSubsc400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteEventsSubsc400ApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteEventsSubsc401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteEventsSubsc401ApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeleteEventsSubsc403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteEventsSubsc403ApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeleteEventsSubsc404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteEventsSubsc404ApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteEventsSubsc429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteEventsSubsc429ApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeleteEventsSubsc500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteEventsSubsc500ApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteEventsSubsc503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteEventsSubsc503ApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteEventsSubscdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteEventsSubscdefaultApplicationProblemPlusJSONResponse) VisitDeleteEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEventsSubscRequestObject struct {
	AppSessionId string `json:"appSessionId"`
	Body         *UpdateEventsSubscJSONRequestBody
}

type UpdateEventsSubscResponseObject interface {
	VisitUpdateEventsSubscResponse(w http.ResponseWriter) error
}

type UpdateEventsSubsc200JSONResponse EventsSubscPutData

func (response UpdateEventsSubsc200JSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(EventsSubscPutData(response))
}

type UpdateEventsSubsc201ResponseHeaders struct {
	Location string
}

type UpdateEventsSubsc201JSONResponse struct {
	Body    EventsSubscPutData
	Headers UpdateEventsSubsc201ResponseHeaders
}

func (response UpdateEventsSubsc201JSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEventsSubsc204Response struct {
}

func (response UpdateEventsSubsc204Response) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateEventsSubsc307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response UpdateEventsSubsc307JSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEventsSubsc308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response UpdateEventsSubsc308JSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateEventsSubsc400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc400ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc401ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc403ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc404ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc411ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc413ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc415ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc429ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc500ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubsc503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateEventsSubsc503ApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateEventsSubscdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateEventsSubscdefaultApplicationProblemPlusJSONResponse) VisitUpdateEventsSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Creates a new Individual Application Session Context resource
	// (POST /app-sessions)
	PostAppSessions(ctx context.Context, request PostAppSessionsRequestObject) (PostAppSessionsResponseObject, error)
	// Indicates P-CSCF restoration and does not create an Individual Application Session Context
	// (POST /app-sessions/pcscf-restoration)
	PcscfRestoration(ctx context.Context, request PcscfRestorationRequestObject) (PcscfRestorationResponseObject, error)
	// Reads an existing Individual Application Session Context
	// (GET /app-sessions/{appSessionId})
	GetAppSession(ctx context.Context, request GetAppSessionRequestObject) (GetAppSessionResponseObject, error)
	// Modifies an existing Individual Application Session Context
	// (PATCH /app-sessions/{appSessionId})
	ModAppSession(ctx context.Context, request ModAppSessionRequestObject) (ModAppSessionResponseObject, error)
	// Deletes an existing Individual Application Session Context
	// (POST /app-sessions/{appSessionId}/delete)
	DeleteAppSession(ctx context.Context, request DeleteAppSessionRequestObject) (DeleteAppSessionResponseObject, error)
	// deletes the Events Subscription subresource
	// (DELETE /app-sessions/{appSessionId}/events-subscription)
	DeleteEventsSubsc(ctx context.Context, request DeleteEventsSubscRequestObject) (DeleteEventsSubscResponseObject, error)
	// creates or modifies an Events Subscription subresource
	// (PUT /app-sessions/{appSessionId}/events-subscription)
	UpdateEventsSubsc(ctx context.Context, request UpdateEventsSubscRequestObject) (UpdateEventsSubscResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAppSessions operation middleware
func (sh *strictHandler) PostAppSessions(ctx *gin.Context) {
	var request PostAppSessionsRequestObject

	var body PostAppSessionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAppSessions(ctx, request.(PostAppSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAppSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAppSessionsResponseObject); ok {
		if err := validResponse.VisitPostAppSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PcscfRestoration operation middleware
func (sh *strictHandler) PcscfRestoration(ctx *gin.Context) {
	var request PcscfRestorationRequestObject

	var body PcscfRestorationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PcscfRestoration(ctx, request.(PcscfRestorationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PcscfRestoration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PcscfRestorationResponseObject); ok {
		if err := validResponse.VisitPcscfRestorationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAppSession operation middleware
func (sh *strictHandler) GetAppSession(ctx *gin.Context, appSessionId string) {
	var request GetAppSessionRequestObject

	request.AppSessionId = appSessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAppSession(ctx, request.(GetAppSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAppSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAppSessionResponseObject); ok {
		if err := validResponse.VisitGetAppSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModAppSession operation middleware
func (sh *strictHandler) ModAppSession(ctx *gin.Context, appSessionId string) {
	var request ModAppSessionRequestObject

	request.AppSessionId = appSessionId

	var body ModAppSessionApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModAppSession(ctx, request.(ModAppSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModAppSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModAppSessionResponseObject); ok {
		if err := validResponse.VisitModAppSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAppSession operation middleware
func (sh *strictHandler) DeleteAppSession(ctx *gin.Context, appSessionId string) {
	var request DeleteAppSessionRequestObject

	request.AppSessionId = appSessionId

	var body DeleteAppSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAppSession(ctx, request.(DeleteAppSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAppSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAppSessionResponseObject); ok {
		if err := validResponse.VisitDeleteAppSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEventsSubsc operation middleware
func (sh *strictHandler) DeleteEventsSubsc(ctx *gin.Context, appSessionId string) {
	var request DeleteEventsSubscRequestObject

	request.AppSessionId = appSessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEventsSubsc(ctx, request.(DeleteEventsSubscRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEventsSubsc")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteEventsSubscResponseObject); ok {
		if err := validResponse.VisitDeleteEventsSubscResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateEventsSubsc operation middleware
func (sh *strictHandler) UpdateEventsSubsc(ctx *gin.Context, appSessionId string) {
	var request UpdateEventsSubscRequestObject

	request.AppSessionId = appSessionId

	var body UpdateEventsSubscJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEventsSubsc(ctx, request.(UpdateEventsSubscRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEventsSubsc")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateEventsSubscResponseObject); ok {
		if err := validResponse.VisitUpdateEventsSubscResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
