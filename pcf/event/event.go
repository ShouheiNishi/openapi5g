// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package event

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/pcf/SMpolicy"
	externalRef2 "github.com/ShouheiNishi/openapi5g/pcf/authorization"
	externalRef3 "github.com/ShouheiNishi/openapi5g/smf/event"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for PcEvent.
const (
	ACTYCH PcEvent = "AC_TY_CH"
	PLMNCH PcEvent = "PLMN_CH"
)

// EthernetFlowInfo defines model for EthernetFlowInfo.
type EthernetFlowInfo struct {
	EthFlows             []externalRef2.EthFlowDescription `json:"ethFlows,omitempty"`
	FlowNumber           int                               `json:"flowNumber"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// IpFlowInfo defines model for IpFlowInfo.
type IpFlowInfo struct {
	FlowNumber           int                            `json:"flowNumber"`
	IpFlows              []externalRef2.FlowDescription `json:"ipFlows,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// PcEvent defines model for PcEvent.
type PcEvent string

// PcEventExposureNotif defines model for PcEventExposureNotif.
type PcEventExposureNotif struct {
	EventNotifs          []PcEventNotification  `json:"eventNotifs"`
	NotifId              string                 `json:"notifId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PcEventExposureSubsc defines model for PcEventExposureSubsc.
type PcEventExposureSubsc struct {
	EventSubs            []PcEvent                       `json:"eventSubs"`
	EventsRepInfo        *ReportingInformation           `json:"eventsRepInfo,omitempty"`
	FilterDnns           []externalRef0.Dnn              `json:"filterDnns,omitempty"`
	FilterServices       []ServiceIdentification         `json:"filterServices,omitempty"`
	FilterSnssais        []externalRef0.Snssai           `json:"filterSnssais,omitempty"`
	GroupId              externalRef0.GroupId            `json:"groupId,omitempty"`
	NotifId              string                          `json:"notifId"`
	NotifUri             externalRef0.Uri                `json:"notifUri"`
	SuppFeat             *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// PcEventNotification defines model for PcEventNotification.
type PcEventNotification struct {
	AccType       externalRef0.AccessType            `json:"accType,omitempty"`
	AddAccessInfo *externalRef1.AdditionalAccessInfo `json:"addAccessInfo,omitempty"`

	// AnGwAddr describes the address of the access network gateway control node
	AnGwAddr             *externalRef2.AnGwAddress          `json:"anGwAddr,omitempty"`
	Event                PcEvent                            `json:"event"`
	Gpsi                 externalRef0.Gpsi                  `json:"gpsi,omitempty"`
	PduSessionInfo       *PduSessionInformation             `json:"pduSessionInfo,omitempty"`
	PlmnId               *externalRef0.PlmnIdNid            `json:"plmnId,omitempty"`
	RatType              *externalRef0.RatType              `json:"ratType,omitempty"`
	RelAccessInfo        *externalRef1.AdditionalAccessInfo `json:"relAccessInfo,omitempty"`
	RepServices          *ServiceIdentification             `json:"repServices,omitempty"`
	Supi                 externalRef0.Supi                  `json:"supi,omitempty"`
	TimeStamp            externalRef0.DateTime              `json:"timeStamp"`
	AdditionalProperties map[string]interface{}             `json:"-"`
}

// PduSessionInformation defines model for PduSessionInformation.
type PduSessionInformation struct {
	Dnn                  externalRef0.Dnn         `json:"dnn"`
	IpDomain             *string                  `json:"ipDomain,omitempty"`
	Snssai               externalRef0.Snssai      `json:"snssai"`
	UeIpv4               externalRef0.Ipv4Addr    `json:"ueIpv4,omitempty"`
	UeIpv6               *externalRef0.Ipv6Prefix `json:"ueIpv6,omitempty"`
	UeMac                externalRef0.MacAddr48   `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// ReportingInformation defines model for ReportingInformation.
type ReportingInformation struct {
	GrpRepTime   *externalRef0.DurationSec `json:"grpRepTime,omitempty"`
	ImmRep       *bool                     `json:"immRep,omitempty"`
	MaxReportNbr *externalRef0.Uinteger    `json:"maxReportNbr,omitempty"`
	MonDur       *externalRef0.DateTime    `json:"monDur,omitempty"`

	// NotifMethod Possible values are - PERIODIC - ONE_TIME - ON_EVENT_DETECTION
	NotifMethod          *externalRef3.NotificationMethod `json:"notifMethod,omitempty"`
	RepPeriod            *externalRef0.DurationSec        `json:"repPeriod,omitempty"`
	SampRatio            externalRef0.SamplingRatio       `json:"sampRatio,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// ServiceIdentification defines model for ServiceIdentification.
type ServiceIdentification struct {
	// AfAppId Contains an AF application identifier.
	AfAppId              *externalRef2.AfAppId  `json:"afAppId,omitempty"`
	ServEthFlows         []EthernetFlowInfo     `json:"servEthFlows,omitempty"`
	ServIpFlows          []IpFlowInfo           `json:"servIpFlows,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostPcEventExposureSubscJSONRequestBody defines body for PostPcEventExposureSubsc for application/json ContentType.
type PostPcEventExposureSubscJSONRequestBody = PcEventExposureSubsc

// PutPcEventExposureSubscJSONRequestBody defines body for PutPcEventExposureSubsc for application/json ContentType.
type PutPcEventExposureSubscJSONRequestBody = PcEventExposureSubsc

// Getter for additional properties for EthernetFlowInfo. Returns the specified
// element and whether it was found
func (a EthernetFlowInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EthernetFlowInfo
func (a *EthernetFlowInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EthernetFlowInfo to handle AdditionalProperties
func (a *EthernetFlowInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ethFlows"]; found {
		err = json.Unmarshal(raw, &a.EthFlows)
		if err != nil {
			return fmt.Errorf("error reading 'ethFlows': %w", err)
		}
		delete(object, "ethFlows")
	}

	if raw, found := object["flowNumber"]; found {
		err = json.Unmarshal(raw, &a.FlowNumber)
		if err != nil {
			return fmt.Errorf("error reading 'flowNumber': %w", err)
		}
		delete(object, "flowNumber")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EthernetFlowInfo to handle AdditionalProperties
func (a EthernetFlowInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.EthFlows) != 0 {
		object["ethFlows"], err = json.Marshal(a.EthFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethFlows': %w", err)
		}
	}

	object["flowNumber"], err = json.Marshal(a.FlowNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flowNumber': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpFlowInfo. Returns the specified
// element and whether it was found
func (a IpFlowInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpFlowInfo
func (a *IpFlowInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpFlowInfo to handle AdditionalProperties
func (a *IpFlowInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["flowNumber"]; found {
		err = json.Unmarshal(raw, &a.FlowNumber)
		if err != nil {
			return fmt.Errorf("error reading 'flowNumber': %w", err)
		}
		delete(object, "flowNumber")
	}

	if raw, found := object["ipFlows"]; found {
		err = json.Unmarshal(raw, &a.IpFlows)
		if err != nil {
			return fmt.Errorf("error reading 'ipFlows': %w", err)
		}
		delete(object, "ipFlows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpFlowInfo to handle AdditionalProperties
func (a IpFlowInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["flowNumber"], err = json.Marshal(a.FlowNumber)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'flowNumber': %w", err)
	}

	if len(a.IpFlows) != 0 {
		object["ipFlows"], err = json.Marshal(a.IpFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipFlows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcEventExposureNotif. Returns the specified
// element and whether it was found
func (a PcEventExposureNotif) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcEventExposureNotif
func (a *PcEventExposureNotif) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcEventExposureNotif to handle AdditionalProperties
func (a *PcEventExposureNotif) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventNotifs"]; found {
		err = json.Unmarshal(raw, &a.EventNotifs)
		if err != nil {
			return fmt.Errorf("error reading 'eventNotifs': %w", err)
		}
		delete(object, "eventNotifs")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcEventExposureNotif to handle AdditionalProperties
func (a PcEventExposureNotif) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eventNotifs"], err = json.Marshal(a.EventNotifs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventNotifs': %w", err)
	}

	object["notifId"], err = json.Marshal(a.NotifId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcEventExposureSubsc. Returns the specified
// element and whether it was found
func (a PcEventExposureSubsc) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcEventExposureSubsc
func (a *PcEventExposureSubsc) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcEventExposureSubsc to handle AdditionalProperties
func (a *PcEventExposureSubsc) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["eventSubs"]; found {
		err = json.Unmarshal(raw, &a.EventSubs)
		if err != nil {
			return fmt.Errorf("error reading 'eventSubs': %w", err)
		}
		delete(object, "eventSubs")
	}

	if raw, found := object["eventsRepInfo"]; found {
		err = json.Unmarshal(raw, &a.EventsRepInfo)
		if err != nil {
			return fmt.Errorf("error reading 'eventsRepInfo': %w", err)
		}
		delete(object, "eventsRepInfo")
	}

	if raw, found := object["filterDnns"]; found {
		err = json.Unmarshal(raw, &a.FilterDnns)
		if err != nil {
			return fmt.Errorf("error reading 'filterDnns': %w", err)
		}
		delete(object, "filterDnns")
	}

	if raw, found := object["filterServices"]; found {
		err = json.Unmarshal(raw, &a.FilterServices)
		if err != nil {
			return fmt.Errorf("error reading 'filterServices': %w", err)
		}
		delete(object, "filterServices")
	}

	if raw, found := object["filterSnssais"]; found {
		err = json.Unmarshal(raw, &a.FilterSnssais)
		if err != nil {
			return fmt.Errorf("error reading 'filterSnssais': %w", err)
		}
		delete(object, "filterSnssais")
	}

	if raw, found := object["groupId"]; found {
		err = json.Unmarshal(raw, &a.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'groupId': %w", err)
		}
		delete(object, "groupId")
	}

	if raw, found := object["notifId"]; found {
		err = json.Unmarshal(raw, &a.NotifId)
		if err != nil {
			return fmt.Errorf("error reading 'notifId': %w", err)
		}
		delete(object, "notifId")
	}

	if raw, found := object["notifUri"]; found {
		err = json.Unmarshal(raw, &a.NotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'notifUri': %w", err)
		}
		delete(object, "notifUri")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcEventExposureSubsc to handle AdditionalProperties
func (a PcEventExposureSubsc) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["eventSubs"], err = json.Marshal(a.EventSubs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'eventSubs': %w", err)
	}

	if a.EventsRepInfo != nil {
		object["eventsRepInfo"], err = json.Marshal(a.EventsRepInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'eventsRepInfo': %w", err)
		}
	}

	if len(a.FilterDnns) != 0 {
		object["filterDnns"], err = json.Marshal(a.FilterDnns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'filterDnns': %w", err)
		}
	}

	if len(a.FilterServices) != 0 {
		object["filterServices"], err = json.Marshal(a.FilterServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'filterServices': %w", err)
		}
	}

	if len(a.FilterSnssais) != 0 {
		object["filterSnssais"], err = json.Marshal(a.FilterSnssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'filterSnssais': %w", err)
		}
	}

	if len(a.GroupId) != 0 {
		object["groupId"], err = json.Marshal(a.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groupId': %w", err)
		}
	}

	object["notifId"], err = json.Marshal(a.NotifId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifId': %w", err)
	}

	object["notifUri"], err = json.Marshal(a.NotifUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifUri': %w", err)
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcEventNotification. Returns the specified
// element and whether it was found
func (a PcEventNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcEventNotification
func (a *PcEventNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcEventNotification to handle AdditionalProperties
func (a *PcEventNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accType"]; found {
		err = json.Unmarshal(raw, &a.AccType)
		if err != nil {
			return fmt.Errorf("error reading 'accType': %w", err)
		}
		delete(object, "accType")
	}

	if raw, found := object["addAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.AddAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addAccessInfo': %w", err)
		}
		delete(object, "addAccessInfo")
	}

	if raw, found := object["anGwAddr"]; found {
		err = json.Unmarshal(raw, &a.AnGwAddr)
		if err != nil {
			return fmt.Errorf("error reading 'anGwAddr': %w", err)
		}
		delete(object, "anGwAddr")
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &a.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
		delete(object, "event")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["pduSessionInfo"]; found {
		err = json.Unmarshal(raw, &a.PduSessionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionInfo': %w", err)
		}
		delete(object, "pduSessionInfo")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["relAccessInfo"]; found {
		err = json.Unmarshal(raw, &a.RelAccessInfo)
		if err != nil {
			return fmt.Errorf("error reading 'relAccessInfo': %w", err)
		}
		delete(object, "relAccessInfo")
	}

	if raw, found := object["repServices"]; found {
		err = json.Unmarshal(raw, &a.RepServices)
		if err != nil {
			return fmt.Errorf("error reading 'repServices': %w", err)
		}
		delete(object, "repServices")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcEventNotification to handle AdditionalProperties
func (a PcEventNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AccType) != 0 {
		object["accType"], err = json.Marshal(a.AccType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accType': %w", err)
		}
	}

	if a.AddAccessInfo != nil {
		object["addAccessInfo"], err = json.Marshal(a.AddAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addAccessInfo': %w", err)
		}
	}

	if a.AnGwAddr != nil {
		object["anGwAddr"], err = json.Marshal(a.AnGwAddr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anGwAddr': %w", err)
		}
	}

	object["event"], err = json.Marshal(a.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.PduSessionInfo != nil {
		object["pduSessionInfo"], err = json.Marshal(a.PduSessionInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionInfo': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RelAccessInfo != nil {
		object["relAccessInfo"], err = json.Marshal(a.RelAccessInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'relAccessInfo': %w", err)
		}
	}

	if a.RepServices != nil {
		object["repServices"], err = json.Marshal(a.RepServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repServices': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionInformation. Returns the specified
// element and whether it was found
func (a PduSessionInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionInformation
func (a *PduSessionInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionInformation to handle AdditionalProperties
func (a *PduSessionInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ipDomain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return fmt.Errorf("error reading 'ipDomain': %w", err)
		}
		delete(object, "ipDomain")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionInformation to handle AdditionalProperties
func (a PduSessionInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.IpDomain != nil {
		object["ipDomain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipDomain': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	if len(a.UeIpv4) != 0 {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReportingInformation. Returns the specified
// element and whether it was found
func (a ReportingInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReportingInformation
func (a *ReportingInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReportingInformation to handle AdditionalProperties
func (a *ReportingInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["grpRepTime"]; found {
		err = json.Unmarshal(raw, &a.GrpRepTime)
		if err != nil {
			return fmt.Errorf("error reading 'grpRepTime': %w", err)
		}
		delete(object, "grpRepTime")
	}

	if raw, found := object["immRep"]; found {
		err = json.Unmarshal(raw, &a.ImmRep)
		if err != nil {
			return fmt.Errorf("error reading 'immRep': %w", err)
		}
		delete(object, "immRep")
	}

	if raw, found := object["maxReportNbr"]; found {
		err = json.Unmarshal(raw, &a.MaxReportNbr)
		if err != nil {
			return fmt.Errorf("error reading 'maxReportNbr': %w", err)
		}
		delete(object, "maxReportNbr")
	}

	if raw, found := object["monDur"]; found {
		err = json.Unmarshal(raw, &a.MonDur)
		if err != nil {
			return fmt.Errorf("error reading 'monDur': %w", err)
		}
		delete(object, "monDur")
	}

	if raw, found := object["notifMethod"]; found {
		err = json.Unmarshal(raw, &a.NotifMethod)
		if err != nil {
			return fmt.Errorf("error reading 'notifMethod': %w", err)
		}
		delete(object, "notifMethod")
	}

	if raw, found := object["repPeriod"]; found {
		err = json.Unmarshal(raw, &a.RepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'repPeriod': %w", err)
		}
		delete(object, "repPeriod")
	}

	if raw, found := object["sampRatio"]; found {
		err = json.Unmarshal(raw, &a.SampRatio)
		if err != nil {
			return fmt.Errorf("error reading 'sampRatio': %w", err)
		}
		delete(object, "sampRatio")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReportingInformation to handle AdditionalProperties
func (a ReportingInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.GrpRepTime != nil {
		object["grpRepTime"], err = json.Marshal(a.GrpRepTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'grpRepTime': %w", err)
		}
	}

	if a.ImmRep != nil {
		object["immRep"], err = json.Marshal(a.ImmRep)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immRep': %w", err)
		}
	}

	if a.MaxReportNbr != nil {
		object["maxReportNbr"], err = json.Marshal(a.MaxReportNbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxReportNbr': %w", err)
		}
	}

	if a.MonDur != nil {
		object["monDur"], err = json.Marshal(a.MonDur)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monDur': %w", err)
		}
	}

	if a.NotifMethod != nil {
		object["notifMethod"], err = json.Marshal(a.NotifMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifMethod': %w", err)
		}
	}

	if a.RepPeriod != nil {
		object["repPeriod"], err = json.Marshal(a.RepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repPeriod': %w", err)
		}
	}

	if a.SampRatio != 0 {
		object["sampRatio"], err = json.Marshal(a.SampRatio)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sampRatio': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceIdentification. Returns the specified
// element and whether it was found
func (a ServiceIdentification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceIdentification
func (a *ServiceIdentification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceIdentification to handle AdditionalProperties
func (a *ServiceIdentification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["servEthFlows"]; found {
		err = json.Unmarshal(raw, &a.ServEthFlows)
		if err != nil {
			return fmt.Errorf("error reading 'servEthFlows': %w", err)
		}
		delete(object, "servEthFlows")
	}

	if raw, found := object["servIpFlows"]; found {
		err = json.Unmarshal(raw, &a.ServIpFlows)
		if err != nil {
			return fmt.Errorf("error reading 'servIpFlows': %w", err)
		}
		delete(object, "servIpFlows")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceIdentification to handle AdditionalProperties
func (a ServiceIdentification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if len(a.ServEthFlows) != 0 {
		object["servEthFlows"], err = json.Marshal(a.ServEthFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servEthFlows': %w", err)
		}
	}

	if len(a.ServIpFlows) != 0 {
		object["servIpFlows"], err = json.Marshal(a.ServIpFlows)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servIpFlows': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPcEventExposureSubscWithBody request with any body
	PostPcEventExposureSubscWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPcEventExposureSubsc(ctx context.Context, body PostPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePcEventExposureSubsc request
	DeletePcEventExposureSubsc(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPcEventExposureSubsc request
	GetPcEventExposureSubsc(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPcEventExposureSubscWithBody request with any body
	PutPcEventExposureSubscWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPcEventExposureSubsc(ctx context.Context, subscriptionId string, body PutPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPcEventExposureSubscWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPcEventExposureSubscRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPcEventExposureSubsc(ctx context.Context, body PostPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPcEventExposureSubscRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePcEventExposureSubsc(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePcEventExposureSubscRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPcEventExposureSubsc(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPcEventExposureSubscRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPcEventExposureSubscWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPcEventExposureSubscRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPcEventExposureSubsc(ctx context.Context, subscriptionId string, body PutPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPcEventExposureSubscRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPcEventExposureSubscRequest calls the generic PostPcEventExposureSubsc builder with application/json body
func NewPostPcEventExposureSubscRequest(server string, body PostPcEventExposureSubscJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPcEventExposureSubscRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPcEventExposureSubscRequestWithBody generates requests for PostPcEventExposureSubsc with any type of body
func NewPostPcEventExposureSubscRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePcEventExposureSubscRequest generates requests for DeletePcEventExposureSubsc
func NewDeletePcEventExposureSubscRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPcEventExposureSubscRequest generates requests for GetPcEventExposureSubsc
func NewGetPcEventExposureSubscRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPcEventExposureSubscRequest calls the generic PutPcEventExposureSubsc builder with application/json body
func NewPutPcEventExposureSubscRequest(server string, subscriptionId string, body PutPcEventExposureSubscJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPcEventExposureSubscRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewPutPcEventExposureSubscRequestWithBody generates requests for PutPcEventExposureSubsc with any type of body
func NewPutPcEventExposureSubscRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPcEventExposureSubscWithBodyWithResponse request with any body
	PostPcEventExposureSubscWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPcEventExposureSubscResponse, error)

	PostPcEventExposureSubscWithResponse(ctx context.Context, body PostPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPcEventExposureSubscResponse, error)

	// DeletePcEventExposureSubscWithResponse request
	DeletePcEventExposureSubscWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeletePcEventExposureSubscResponse, error)

	// GetPcEventExposureSubscWithResponse request
	GetPcEventExposureSubscWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*GetPcEventExposureSubscResponse, error)

	// PutPcEventExposureSubscWithBodyWithResponse request with any body
	PutPcEventExposureSubscWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPcEventExposureSubscResponse, error)

	PutPcEventExposureSubscWithResponse(ctx context.Context, subscriptionId string, body PutPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPcEventExposureSubscResponse, error)
}

type PostPcEventExposureSubscResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *PcEventExposureSubsc
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PostPcEventExposureSubscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPcEventExposureSubscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePcEventExposureSubscResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeletePcEventExposureSubscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePcEventExposureSubscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPcEventExposureSubscResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PcEventExposureSubsc
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r GetPcEventExposureSubscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPcEventExposureSubscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPcEventExposureSubscResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PcEventExposureSubsc
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PutPcEventExposureSubscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPcEventExposureSubscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPcEventExposureSubscWithBodyWithResponse request with arbitrary body returning *PostPcEventExposureSubscResponse
func (c *ClientWithResponses) PostPcEventExposureSubscWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPcEventExposureSubscResponse, error) {
	rsp, err := c.PostPcEventExposureSubscWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPcEventExposureSubscResponse(rsp)
}

func (c *ClientWithResponses) PostPcEventExposureSubscWithResponse(ctx context.Context, body PostPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPcEventExposureSubscResponse, error) {
	rsp, err := c.PostPcEventExposureSubsc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPcEventExposureSubscResponse(rsp)
}

// DeletePcEventExposureSubscWithResponse request returning *DeletePcEventExposureSubscResponse
func (c *ClientWithResponses) DeletePcEventExposureSubscWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeletePcEventExposureSubscResponse, error) {
	rsp, err := c.DeletePcEventExposureSubsc(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePcEventExposureSubscResponse(rsp)
}

// GetPcEventExposureSubscWithResponse request returning *GetPcEventExposureSubscResponse
func (c *ClientWithResponses) GetPcEventExposureSubscWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*GetPcEventExposureSubscResponse, error) {
	rsp, err := c.GetPcEventExposureSubsc(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPcEventExposureSubscResponse(rsp)
}

// PutPcEventExposureSubscWithBodyWithResponse request with arbitrary body returning *PutPcEventExposureSubscResponse
func (c *ClientWithResponses) PutPcEventExposureSubscWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPcEventExposureSubscResponse, error) {
	rsp, err := c.PutPcEventExposureSubscWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPcEventExposureSubscResponse(rsp)
}

func (c *ClientWithResponses) PutPcEventExposureSubscWithResponse(ctx context.Context, subscriptionId string, body PutPcEventExposureSubscJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPcEventExposureSubscResponse, error) {
	rsp, err := c.PutPcEventExposureSubsc(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPcEventExposureSubscResponse(rsp)
}

// ParsePostPcEventExposureSubscResponse parses an HTTP response from a PostPcEventExposureSubscWithResponse call
func ParsePostPcEventExposureSubscResponse(rsp *http.Response) (*PostPcEventExposureSubscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPcEventExposureSubscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PcEventExposureSubsc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePcEventExposureSubscResponse parses an HTTP response from a DeletePcEventExposureSubscWithResponse call
func ParseDeletePcEventExposureSubscResponse(rsp *http.Response) (*DeletePcEventExposureSubscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePcEventExposureSubscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetPcEventExposureSubscResponse parses an HTTP response from a GetPcEventExposureSubscWithResponse call
func ParseGetPcEventExposureSubscResponse(rsp *http.Response) (*GetPcEventExposureSubscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPcEventExposureSubscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PcEventExposureSubsc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePutPcEventExposureSubscResponse parses an HTTP response from a PutPcEventExposureSubscWithResponse call
func ParsePutPcEventExposureSubscResponse(rsp *http.Response) (*PutPcEventExposureSubscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPcEventExposureSubscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PcEventExposureSubsc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new Individual Policy Control Events Subscription resource
	// (POST /subscriptions)
	PostPcEventExposureSubsc(c *gin.Context)
	// Cancels an existing Individual Policy Control Events Subscription
	// (DELETE /subscriptions/{subscriptionId})
	DeletePcEventExposureSubsc(c *gin.Context, subscriptionId string)
	// Reads an existing Individual Policy Control Events Subscription
	// (GET /subscriptions/{subscriptionId})
	GetPcEventExposureSubsc(c *gin.Context, subscriptionId string)
	// Modifies an existing Individual Policy Control Events Subscription
	// (PUT /subscriptions/{subscriptionId})
	PutPcEventExposureSubsc(c *gin.Context, subscriptionId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostPcEventExposureSubsc operation middleware
func (siw *ServerInterfaceWrapper) PostPcEventExposureSubsc(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-eventexposure"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPcEventExposureSubsc(c)
}

// DeletePcEventExposureSubsc operation middleware
func (siw *ServerInterfaceWrapper) DeletePcEventExposureSubsc(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-eventexposure"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePcEventExposureSubsc(c, subscriptionId)
}

// GetPcEventExposureSubsc operation middleware
func (siw *ServerInterfaceWrapper) GetPcEventExposureSubsc(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-eventexposure"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPcEventExposureSubsc(c, subscriptionId)
}

// PutPcEventExposureSubsc operation middleware
func (siw *ServerInterfaceWrapper) PutPcEventExposureSubsc(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"npcf-eventexposure"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPcEventExposureSubsc(c, subscriptionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/subscriptions", wrapper.PostPcEventExposureSubsc)
	router.DELETE(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.DeletePcEventExposureSubsc)
	router.GET(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.GetPcEventExposureSubsc)
	router.PUT(options.BaseURL+"/subscriptions/:subscriptionId", wrapper.PutPcEventExposureSubsc)
}

type PostPcEventExposureSubscRequestObject struct {
	Body *PostPcEventExposureSubscJSONRequestBody
}

type PostPcEventExposureSubscResponseObject interface {
	VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error
}

type PostPcEventExposureSubsc201ResponseHeaders struct {
	Location string
}

type PostPcEventExposureSubsc201JSONResponse struct {
	Body    PcEventExposureSubsc
	Headers PostPcEventExposureSubsc201ResponseHeaders
}

func (response PostPcEventExposureSubsc201JSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPcEventExposureSubsc400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc400ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc401ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc403ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc404ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc411ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc413ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc415ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc429ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc500ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubsc503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response PostPcEventExposureSubsc503ApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PostPcEventExposureSubscdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PostPcEventExposureSubscdefaultApplicationProblemPlusJSONResponse) VisitPostPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePcEventExposureSubscRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type DeletePcEventExposureSubscResponseObject interface {
	VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error
}

type DeletePcEventExposureSubsc204Response struct {
}

func (response DeletePcEventExposureSubsc204Response) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePcEventExposureSubsc307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response DeletePcEventExposureSubsc307JSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePcEventExposureSubsc308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response DeletePcEventExposureSubsc308JSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePcEventExposureSubsc400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeletePcEventExposureSubsc400ApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeletePcEventExposureSubsc401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeletePcEventExposureSubsc401ApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type DeletePcEventExposureSubsc403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeletePcEventExposureSubsc403ApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type DeletePcEventExposureSubsc404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeletePcEventExposureSubsc404ApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeletePcEventExposureSubsc429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeletePcEventExposureSubsc429ApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type DeletePcEventExposureSubsc500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeletePcEventExposureSubsc500ApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeletePcEventExposureSubsc503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeletePcEventExposureSubsc503ApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeletePcEventExposureSubscdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeletePcEventExposureSubscdefaultApplicationProblemPlusJSONResponse) VisitDeletePcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPcEventExposureSubscRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type GetPcEventExposureSubscResponseObject interface {
	VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error
}

type GetPcEventExposureSubsc200JSONResponse PcEventExposureSubsc

func (response GetPcEventExposureSubsc200JSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(PcEventExposureSubsc(response))
}

type GetPcEventExposureSubsc307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response GetPcEventExposureSubsc307JSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPcEventExposureSubsc308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response GetPcEventExposureSubsc308JSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPcEventExposureSubsc400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetPcEventExposureSubsc400ApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetPcEventExposureSubsc401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response GetPcEventExposureSubsc401ApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type GetPcEventExposureSubsc403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetPcEventExposureSubsc403ApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GetPcEventExposureSubsc404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetPcEventExposureSubsc404ApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetPcEventExposureSubsc406Response externalRef0.N406Response

func (response GetPcEventExposureSubsc406Response) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type GetPcEventExposureSubsc429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response GetPcEventExposureSubsc429ApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type GetPcEventExposureSubsc500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetPcEventExposureSubsc500ApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetPcEventExposureSubsc503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetPcEventExposureSubsc503ApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetPcEventExposureSubscdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetPcEventExposureSubscdefaultApplicationProblemPlusJSONResponse) VisitGetPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutPcEventExposureSubscRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Body           *PutPcEventExposureSubscJSONRequestBody
}

type PutPcEventExposureSubscResponseObject interface {
	VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error
}

type PutPcEventExposureSubsc200JSONResponse PcEventExposureSubsc

func (response PutPcEventExposureSubsc200JSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(PcEventExposureSubsc(response))
}

type PutPcEventExposureSubsc204Response struct {
}

func (response PutPcEventExposureSubsc204Response) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutPcEventExposureSubsc307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PutPcEventExposureSubsc307JSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutPcEventExposureSubsc308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PutPcEventExposureSubsc308JSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(response.Headers.N3gppSbiTargetNfId))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutPcEventExposureSubsc400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc400ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc401ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc403ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc404ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc411ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc413ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc415ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc429ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc500ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubsc503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response PutPcEventExposureSubsc503ApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type PutPcEventExposureSubscdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PutPcEventExposureSubscdefaultApplicationProblemPlusJSONResponse) VisitPutPcEventExposureSubscResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Creates a new Individual Policy Control Events Subscription resource
	// (POST /subscriptions)
	PostPcEventExposureSubsc(ctx context.Context, request PostPcEventExposureSubscRequestObject) (PostPcEventExposureSubscResponseObject, error)
	// Cancels an existing Individual Policy Control Events Subscription
	// (DELETE /subscriptions/{subscriptionId})
	DeletePcEventExposureSubsc(ctx context.Context, request DeletePcEventExposureSubscRequestObject) (DeletePcEventExposureSubscResponseObject, error)
	// Reads an existing Individual Policy Control Events Subscription
	// (GET /subscriptions/{subscriptionId})
	GetPcEventExposureSubsc(ctx context.Context, request GetPcEventExposureSubscRequestObject) (GetPcEventExposureSubscResponseObject, error)
	// Modifies an existing Individual Policy Control Events Subscription
	// (PUT /subscriptions/{subscriptionId})
	PutPcEventExposureSubsc(ctx context.Context, request PutPcEventExposureSubscRequestObject) (PutPcEventExposureSubscResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostPcEventExposureSubsc operation middleware
func (sh *strictHandler) PostPcEventExposureSubsc(ctx *gin.Context) {
	var request PostPcEventExposureSubscRequestObject

	var body PostPcEventExposureSubscJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPcEventExposureSubsc(ctx, request.(PostPcEventExposureSubscRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPcEventExposureSubsc")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPcEventExposureSubscResponseObject); ok {
		if err := validResponse.VisitPostPcEventExposureSubscResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePcEventExposureSubsc operation middleware
func (sh *strictHandler) DeletePcEventExposureSubsc(ctx *gin.Context, subscriptionId string) {
	var request DeletePcEventExposureSubscRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePcEventExposureSubsc(ctx, request.(DeletePcEventExposureSubscRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePcEventExposureSubsc")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePcEventExposureSubscResponseObject); ok {
		if err := validResponse.VisitDeletePcEventExposureSubscResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPcEventExposureSubsc operation middleware
func (sh *strictHandler) GetPcEventExposureSubsc(ctx *gin.Context, subscriptionId string) {
	var request GetPcEventExposureSubscRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPcEventExposureSubsc(ctx, request.(GetPcEventExposureSubscRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPcEventExposureSubsc")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPcEventExposureSubscResponseObject); ok {
		if err := validResponse.VisitGetPcEventExposureSubscResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutPcEventExposureSubsc operation middleware
func (sh *strictHandler) PutPcEventExposureSubsc(ctx *gin.Context, subscriptionId string) {
	var request PutPcEventExposureSubscRequestObject

	request.SubscriptionId = subscriptionId

	var body PutPcEventExposureSubscJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutPcEventExposureSubsc(ctx, request.(PutPcEventExposureSubscRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPcEventExposureSubsc")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutPcEventExposureSubscResponseObject); ok {
		if err := validResponse.VisitPutPcEventExposureSubscResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
