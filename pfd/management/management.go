// Package management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package management

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/northbound/commondata"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for DomainNameProtocol.
const (
	DNSQNAME DomainNameProtocol = "DNS_QNAME"
	TLSSAN   DomainNameProtocol = "TLS_SAN"
	TLSSNI   DomainNameProtocol = "TLS_SNI"
	TSLSCN   DomainNameProtocol = "TSL_SCN"
)

// Defines values for FailureCode.
const (
	APPIDDUPLICATED    FailureCode = "APP_ID_DUPLICATED"
	MALFUNCTION        FailureCode = "MALFUNCTION"
	OTHERREASON        FailureCode = "OTHER_REASON"
	PARTIALFAILURE     FailureCode = "PARTIAL_FAILURE"
	RESOURCELIMITATION FailureCode = "RESOURCE_LIMITATION"
	SHORTDELAY         FailureCode = "SHORT_DELAY"
)

// DomainNameProtocol Possible values are - DNS_QNAME: Identifies the DNS protocol and the question name in DNS query. - TLS_SNI: Identifies the Server Name Indication in TLS ClientHello message. - TLS_SAN: Identifies the Subject Alternative Name in TLS ServerCertificate message. - TSL_SCN: Identifies the Subject Common Name in TLS ServerCertificate message.
type DomainNameProtocol string

// FailureCode Possible values are - MALFUNCTION: This value indicates that something functions wrongly in PFD provisioning or the PFD provisioning does not function at all. - RESOURCE_LIMITATION: This value indicates there is resource limitation for PFD storage. - SHORT_DELAY: This value indicates that the allowed delay is too short and PFD(s) are not stored. - APP_ID_DUPLICATED: The received external application identifier(s) are already provisioned. - PARTIAL_FAILURE: The PFD(s) are not provisioned to all PCEFs/TDFs/SMFs. - OTHER_REASON: Other reason unspecified.
type FailureCode string

// Pfd defines model for Pfd.
type Pfd struct {
	// DnProtocol Possible values are - DNS_QNAME: Identifies the DNS protocol and the question name in DNS query. - TLS_SNI: Identifies the Server Name Indication in TLS ClientHello message. - TLS_SAN: Identifies the Subject Alternative Name in TLS ServerCertificate message. - TSL_SCN: Identifies the Subject Common Name in TLS ServerCertificate message.
	DnProtocol *DomainNameProtocol `json:"dnProtocol,omitempty"`

	// DomainNames Indicates an FQDN or a regular expression as a domain name matching criteria.
	DomainNames []string `json:"domainNames,omitempty"`

	// FlowDescriptions Represents a 3-tuple with protocol, server ip and server port for UL/DL application traffic. The content of the string has the same encoding as the IPFilterRule AVP value as defined in IETF RFC 6733.
	FlowDescriptions []string `json:"flowDescriptions,omitempty"`

	// PfdId Identifies a PDF of an application identifier.
	PfdId string `json:"pfdId"`

	// Urls Indicates a URL or a regular expression which is used to match the significant parts of the URL.
	Urls                 []string               `json:"urls,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdData defines model for PfdData.
type PfdData struct {
	// AllowedDelay Unsigned integer identifying a period of time in units of seconds with "nullable=true" property.
	AllowedDelay *externalRef1.DurationSecRm `json:"allowedDelay"`

	// CachingTime Unsigned integer identifying a period of time in units of seconds with "readOnly=true" property.
	CachingTime *externalRef1.DurationSecRo `json:"cachingTime,omitempty"`

	// ExternalAppId Each element uniquely external application identifier
	ExternalAppId string `json:"externalAppId"`

	// Pfds Contains the PFDs of the external application identifier. Each PFD is identified in the map via a key containing the PFD identifier.
	Pfds map[string]Pfd `json:"pfds"`

	// Self string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self                 *externalRef1.Link     `json:"self,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PfdManagement defines model for PfdManagement.
type PfdManagement struct {
	// NotificationDestination string formatted according to IETF RFC 3986 identifying a referenced resource.
	NotificationDestination *externalRef1.Link `json:"notificationDestination,omitempty"`

	// PfdDatas Each element uniquely identifies the PFDs for an external application identifier. Each element is identified in the map via an external application identifier as key. The response shall include successfully provisioned PFD data of application(s).
	PfdDatas map[string]PfdData `json:"pfdDatas"`

	// PfdReports Supplied by the SCEF and contains the external application identifiers for which PFD(s) are not added or modified successfully. The failure reason is also included. Each element provides the related information for one or more external application identifier(s) and is identified in the map via the failure identifier as key.
	PfdReports *map[string]PfdReport `json:"pfdReports,omitempty"`

	// RequestTestNotification Set to true by the SCS/AS to request the SCEF to send a test notification as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
	RequestTestNotification *bool `json:"requestTestNotification,omitempty"`

	// Self string formatted according to IETF RFC 3986 identifying a referenced resource.
	Self                 *externalRef1.Link               `json:"self,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures  `json:"supportedFeatures,omitempty"`
	WebsockNotifConfig   *externalRef1.WebsockNotifConfig `json:"websockNotifConfig,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// PfdReport defines model for PfdReport.
type PfdReport struct {
	// CachingTime Unsigned integer identifying a period of time in units of seconds.
	CachingTime *externalRef1.DurationSec `json:"cachingTime,omitempty"`

	// ExternalAppIds Identifies the external application identifier(s) which PFD(s) are not added or modified successfully
	ExternalAppIds []string `json:"externalAppIds"`

	// FailureCode Possible values are - MALFUNCTION: This value indicates that something functions wrongly in PFD provisioning or the PFD provisioning does not function at all. - RESOURCE_LIMITATION: This value indicates there is resource limitation for PFD storage. - SHORT_DELAY: This value indicates that the allowed delay is too short and PFD(s) are not stored. - APP_ID_DUPLICATED: The received external application identifier(s) are already provisioned. - PARTIAL_FAILURE: The PFD(s) are not provisioned to all PCEFs/TDFs/SMFs. - OTHER_REASON: Other reason unspecified.
	FailureCode          FailureCode            `json:"failureCode"`
	LocationArea         *UserPlaneLocationArea `json:"locationArea,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserPlaneLocationArea defines model for UserPlaneLocationArea.
type UserPlaneLocationArea struct {
	// Dnais Identifies a list of DNAI which the user plane functions support.
	Dnais                *[]externalRef0.Dnai         `json:"dnais,omitempty"`
	LocationArea         *externalRef1.LocationArea   `json:"locationArea,omitempty"`
	LocationArea5G       *externalRef1.LocationArea5G `json:"locationArea5G,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// PostScsAsIdTransactionsJSONRequestBody defines body for PostScsAsIdTransactions for application/json ContentType.
type PostScsAsIdTransactionsJSONRequestBody = PfdManagement

// PutScsAsIdTransactionsTransactionIdJSONRequestBody defines body for PutScsAsIdTransactionsTransactionId for application/json ContentType.
type PutScsAsIdTransactionsTransactionIdJSONRequestBody = PfdManagement

// PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody defines body for PatchScsAsIdTransactionsTransactionIdApplicationsAppId for application/merge-patch+json ContentType.
type PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody = PfdData

// PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody defines body for PutScsAsIdTransactionsTransactionIdApplicationsAppId for application/json ContentType.
type PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody = PfdData

// Getter for additional properties for Pfd. Returns the specified
// element and whether it was found
func (a Pfd) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pfd
func (a *Pfd) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pfd to handle AdditionalProperties
func (a *Pfd) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnProtocol"]; found {
		err = json.Unmarshal(raw, &a.DnProtocol)
		if err != nil {
			return fmt.Errorf("error reading 'dnProtocol': %w", err)
		}
		delete(object, "dnProtocol")
	}

	if raw, found := object["domainNames"]; found {
		err = json.Unmarshal(raw, &a.DomainNames)
		if err != nil {
			return fmt.Errorf("error reading 'domainNames': %w", err)
		}
		delete(object, "domainNames")
	}

	if raw, found := object["flowDescriptions"]; found {
		err = json.Unmarshal(raw, &a.FlowDescriptions)
		if err != nil {
			return fmt.Errorf("error reading 'flowDescriptions': %w", err)
		}
		delete(object, "flowDescriptions")
	}

	if raw, found := object["pfdId"]; found {
		err = json.Unmarshal(raw, &a.PfdId)
		if err != nil {
			return fmt.Errorf("error reading 'pfdId': %w", err)
		}
		delete(object, "pfdId")
	}

	if raw, found := object["urls"]; found {
		err = json.Unmarshal(raw, &a.Urls)
		if err != nil {
			return fmt.Errorf("error reading 'urls': %w", err)
		}
		delete(object, "urls")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pfd to handle AdditionalProperties
func (a Pfd) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DnProtocol != nil {
		object["dnProtocol"], err = json.Marshal(a.DnProtocol)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnProtocol': %w", err)
		}
	}

	if len(a.DomainNames) != 0 {
		object["domainNames"], err = json.Marshal(a.DomainNames)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'domainNames': %w", err)
		}
	}

	if len(a.FlowDescriptions) != 0 {
		object["flowDescriptions"], err = json.Marshal(a.FlowDescriptions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'flowDescriptions': %w", err)
		}
	}

	object["pfdId"], err = json.Marshal(a.PfdId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfdId': %w", err)
	}

	if len(a.Urls) != 0 {
		object["urls"], err = json.Marshal(a.Urls)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urls': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdData. Returns the specified
// element and whether it was found
func (a PfdData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdData
func (a *PfdData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdData to handle AdditionalProperties
func (a *PfdData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedDelay"]; found {
		err = json.Unmarshal(raw, &a.AllowedDelay)
		if err != nil {
			return fmt.Errorf("error reading 'allowedDelay': %w", err)
		}
		delete(object, "allowedDelay")
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["externalAppId"]; found {
		err = json.Unmarshal(raw, &a.ExternalAppId)
		if err != nil {
			return fmt.Errorf("error reading 'externalAppId': %w", err)
		}
		delete(object, "externalAppId")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdData to handle AdditionalProperties
func (a PfdData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedDelay"], err = json.Marshal(a.AllowedDelay)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedDelay': %w", err)
	}

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["externalAppId"], err = json.Marshal(a.ExternalAppId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'externalAppId': %w", err)
	}

	object["pfds"], err = json.Marshal(a.Pfds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdManagement. Returns the specified
// element and whether it was found
func (a PfdManagement) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdManagement
func (a *PfdManagement) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdManagement to handle AdditionalProperties
func (a *PfdManagement) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notificationDestination"]; found {
		err = json.Unmarshal(raw, &a.NotificationDestination)
		if err != nil {
			return fmt.Errorf("error reading 'notificationDestination': %w", err)
		}
		delete(object, "notificationDestination")
	}

	if raw, found := object["pfdDatas"]; found {
		err = json.Unmarshal(raw, &a.PfdDatas)
		if err != nil {
			return fmt.Errorf("error reading 'pfdDatas': %w", err)
		}
		delete(object, "pfdDatas")
	}

	if raw, found := object["pfdReports"]; found {
		err = json.Unmarshal(raw, &a.PfdReports)
		if err != nil {
			return fmt.Errorf("error reading 'pfdReports': %w", err)
		}
		delete(object, "pfdReports")
	}

	if raw, found := object["requestTestNotification"]; found {
		err = json.Unmarshal(raw, &a.RequestTestNotification)
		if err != nil {
			return fmt.Errorf("error reading 'requestTestNotification': %w", err)
		}
		delete(object, "requestTestNotification")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["websockNotifConfig"]; found {
		err = json.Unmarshal(raw, &a.WebsockNotifConfig)
		if err != nil {
			return fmt.Errorf("error reading 'websockNotifConfig': %w", err)
		}
		delete(object, "websockNotifConfig")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdManagement to handle AdditionalProperties
func (a PfdManagement) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NotificationDestination != nil {
		object["notificationDestination"], err = json.Marshal(a.NotificationDestination)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notificationDestination': %w", err)
		}
	}

	object["pfdDatas"], err = json.Marshal(a.PfdDatas)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfdDatas': %w", err)
	}

	if a.PfdReports != nil {
		object["pfdReports"], err = json.Marshal(a.PfdReports)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdReports': %w", err)
		}
	}

	if a.RequestTestNotification != nil {
		object["requestTestNotification"], err = json.Marshal(a.RequestTestNotification)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestTestNotification': %w", err)
		}
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.WebsockNotifConfig != nil {
		object["websockNotifConfig"], err = json.Marshal(a.WebsockNotifConfig)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'websockNotifConfig': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdReport. Returns the specified
// element and whether it was found
func (a PfdReport) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdReport
func (a *PfdReport) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdReport to handle AdditionalProperties
func (a *PfdReport) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["externalAppIds"]; found {
		err = json.Unmarshal(raw, &a.ExternalAppIds)
		if err != nil {
			return fmt.Errorf("error reading 'externalAppIds': %w", err)
		}
		delete(object, "externalAppIds")
	}

	if raw, found := object["failureCode"]; found {
		err = json.Unmarshal(raw, &a.FailureCode)
		if err != nil {
			return fmt.Errorf("error reading 'failureCode': %w", err)
		}
		delete(object, "failureCode")
	}

	if raw, found := object["locationArea"]; found {
		err = json.Unmarshal(raw, &a.LocationArea)
		if err != nil {
			return fmt.Errorf("error reading 'locationArea': %w", err)
		}
		delete(object, "locationArea")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdReport to handle AdditionalProperties
func (a PfdReport) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["externalAppIds"], err = json.Marshal(a.ExternalAppIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'externalAppIds': %w", err)
	}

	object["failureCode"], err = json.Marshal(a.FailureCode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'failureCode': %w", err)
	}

	if a.LocationArea != nil {
		object["locationArea"], err = json.Marshal(a.LocationArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationArea': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserPlaneLocationArea. Returns the specified
// element and whether it was found
func (a UserPlaneLocationArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserPlaneLocationArea
func (a *UserPlaneLocationArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserPlaneLocationArea to handle AdditionalProperties
func (a *UserPlaneLocationArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnais"]; found {
		err = json.Unmarshal(raw, &a.Dnais)
		if err != nil {
			return fmt.Errorf("error reading 'dnais': %w", err)
		}
		delete(object, "dnais")
	}

	if raw, found := object["locationArea"]; found {
		err = json.Unmarshal(raw, &a.LocationArea)
		if err != nil {
			return fmt.Errorf("error reading 'locationArea': %w", err)
		}
		delete(object, "locationArea")
	}

	if raw, found := object["locationArea5G"]; found {
		err = json.Unmarshal(raw, &a.LocationArea5G)
		if err != nil {
			return fmt.Errorf("error reading 'locationArea5G': %w", err)
		}
		delete(object, "locationArea5G")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserPlaneLocationArea to handle AdditionalProperties
func (a UserPlaneLocationArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Dnais != nil {
		object["dnais"], err = json.Marshal(a.Dnais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnais': %w", err)
		}
	}

	if a.LocationArea != nil {
		object["locationArea"], err = json.Marshal(a.LocationArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationArea': %w", err)
		}
	}

	if a.LocationArea5G != nil {
		object["locationArea5G"], err = json.Marshal(a.LocationArea5G)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationArea5G': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetScsAsIdTransactions request
	GetScsAsIdTransactions(ctx context.Context, scsAsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScsAsIdTransactionsWithBody request with any body
	PostScsAsIdTransactionsWithBody(ctx context.Context, scsAsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScsAsIdTransactions(ctx context.Context, scsAsId string, body PostScsAsIdTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScsAsIdTransactionsTransactionId request
	DeleteScsAsIdTransactionsTransactionId(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScsAsIdTransactionsTransactionId request
	GetScsAsIdTransactionsTransactionId(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScsAsIdTransactionsTransactionIdWithBody request with any body
	PutScsAsIdTransactionsTransactionIdWithBody(ctx context.Context, scsAsId string, transactionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScsAsIdTransactionsTransactionId(ctx context.Context, scsAsId string, transactionId string, body PutScsAsIdTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScsAsIdTransactionsTransactionIdApplicationsAppId request
	DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScsAsIdTransactionsTransactionIdApplicationsAppId request
	GetScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody request with any body
	PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithApplicationMergePatchPlusJSONBody(ctx context.Context, scsAsId string, transactionId string, appId string, body PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody request with any body
	PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, scsAsId string, transactionId string, appId string, body PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetScsAsIdTransactions(ctx context.Context, scsAsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScsAsIdTransactionsRequest(c.Server, scsAsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScsAsIdTransactionsWithBody(ctx context.Context, scsAsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScsAsIdTransactionsRequestWithBody(c.Server, scsAsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScsAsIdTransactions(ctx context.Context, scsAsId string, body PostScsAsIdTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScsAsIdTransactionsRequest(c.Server, scsAsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScsAsIdTransactionsTransactionId(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScsAsIdTransactionsTransactionIdRequest(c.Server, scsAsId, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScsAsIdTransactionsTransactionId(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScsAsIdTransactionsTransactionIdRequest(c.Server, scsAsId, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScsAsIdTransactionsTransactionIdWithBody(ctx context.Context, scsAsId string, transactionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScsAsIdTransactionsTransactionIdRequestWithBody(c.Server, scsAsId, transactionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScsAsIdTransactionsTransactionId(ctx context.Context, scsAsId string, transactionId string, body PutScsAsIdTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScsAsIdTransactionsTransactionIdRequest(c.Server, scsAsId, transactionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdRequest(c.Server, scsAsId, transactionId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScsAsIdTransactionsTransactionIdApplicationsAppIdRequest(c.Server, scsAsId, transactionId, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody(c.Server, scsAsId, transactionId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithApplicationMergePatchPlusJSONBody(ctx context.Context, scsAsId string, transactionId string, appId string, body PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithApplicationMergePatchPlusJSONBody(c.Server, scsAsId, transactionId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody(c.Server, scsAsId, transactionId, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, scsAsId string, transactionId string, appId string, body PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScsAsIdTransactionsTransactionIdApplicationsAppIdRequest(c.Server, scsAsId, transactionId, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetScsAsIdTransactionsRequest generates requests for GetScsAsIdTransactions
func NewGetScsAsIdTransactionsRequest(server string, scsAsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScsAsIdTransactionsRequest calls the generic PostScsAsIdTransactions builder with application/json body
func NewPostScsAsIdTransactionsRequest(server string, scsAsId string, body PostScsAsIdTransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScsAsIdTransactionsRequestWithBody(server, scsAsId, "application/json", bodyReader)
}

// NewPostScsAsIdTransactionsRequestWithBody generates requests for PostScsAsIdTransactions with any type of body
func NewPostScsAsIdTransactionsRequestWithBody(server string, scsAsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScsAsIdTransactionsTransactionIdRequest generates requests for DeleteScsAsIdTransactionsTransactionId
func NewDeleteScsAsIdTransactionsTransactionIdRequest(server string, scsAsId string, transactionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScsAsIdTransactionsTransactionIdRequest generates requests for GetScsAsIdTransactionsTransactionId
func NewGetScsAsIdTransactionsTransactionIdRequest(server string, scsAsId string, transactionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutScsAsIdTransactionsTransactionIdRequest calls the generic PutScsAsIdTransactionsTransactionId builder with application/json body
func NewPutScsAsIdTransactionsTransactionIdRequest(server string, scsAsId string, transactionId string, body PutScsAsIdTransactionsTransactionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScsAsIdTransactionsTransactionIdRequestWithBody(server, scsAsId, transactionId, "application/json", bodyReader)
}

// NewPutScsAsIdTransactionsTransactionIdRequestWithBody generates requests for PutScsAsIdTransactionsTransactionId with any type of body
func NewPutScsAsIdTransactionsTransactionIdRequestWithBody(server string, scsAsId string, transactionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdRequest generates requests for DeleteScsAsIdTransactionsTransactionIdApplicationsAppId
func NewDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdRequest(server string, scsAsId string, transactionId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions/%s/applications/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScsAsIdTransactionsTransactionIdApplicationsAppIdRequest generates requests for GetScsAsIdTransactionsTransactionIdApplicationsAppId
func NewGetScsAsIdTransactionsTransactionIdApplicationsAppIdRequest(server string, scsAsId string, transactionId string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions/%s/applications/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithApplicationMergePatchPlusJSONBody calls the generic PatchScsAsIdTransactionsTransactionIdApplicationsAppId builder with application/merge-patch+json body
func NewPatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithApplicationMergePatchPlusJSONBody(server string, scsAsId string, transactionId string, appId string, body PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody(server, scsAsId, transactionId, appId, "application/merge-patch+json", bodyReader)
}

// NewPatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody generates requests for PatchScsAsIdTransactionsTransactionIdApplicationsAppId with any type of body
func NewPatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody(server string, scsAsId string, transactionId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions/%s/applications/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutScsAsIdTransactionsTransactionIdApplicationsAppIdRequest calls the generic PutScsAsIdTransactionsTransactionIdApplicationsAppId builder with application/json body
func NewPutScsAsIdTransactionsTransactionIdApplicationsAppIdRequest(server string, scsAsId string, transactionId string, appId string, body PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody(server, scsAsId, transactionId, appId, "application/json", bodyReader)
}

// NewPutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody generates requests for PutScsAsIdTransactionsTransactionIdApplicationsAppId with any type of body
func NewPutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestWithBody(server string, scsAsId string, transactionId string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "scsAsId", runtime.ParamLocationPath, scsAsId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/transactions/%s/applications/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetScsAsIdTransactionsWithResponse request
	GetScsAsIdTransactionsWithResponse(ctx context.Context, scsAsId string, reqEditors ...RequestEditorFn) (*GetScsAsIdTransactionsResponse, error)

	// PostScsAsIdTransactionsWithBodyWithResponse request with any body
	PostScsAsIdTransactionsWithBodyWithResponse(ctx context.Context, scsAsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScsAsIdTransactionsResponse, error)

	PostScsAsIdTransactionsWithResponse(ctx context.Context, scsAsId string, body PostScsAsIdTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScsAsIdTransactionsResponse, error)

	// DeleteScsAsIdTransactionsTransactionIdWithResponse request
	DeleteScsAsIdTransactionsTransactionIdWithResponse(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*DeleteScsAsIdTransactionsTransactionIdResponse, error)

	// GetScsAsIdTransactionsTransactionIdWithResponse request
	GetScsAsIdTransactionsTransactionIdWithResponse(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*GetScsAsIdTransactionsTransactionIdResponse, error)

	// PutScsAsIdTransactionsTransactionIdWithBodyWithResponse request with any body
	PutScsAsIdTransactionsTransactionIdWithBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdResponse, error)

	PutScsAsIdTransactionsTransactionIdWithResponse(ctx context.Context, scsAsId string, transactionId string, body PutScsAsIdTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdResponse, error)

	// DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse request
	DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error)

	// GetScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse request
	GetScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error)

	// PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse request with any body
	PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error)

	PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, body PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error)

	// PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse request with any body
	PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error)

	PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, body PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error)
}

type GetScsAsIdTransactionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]PfdManagement
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON406     *externalRef1.N406
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetScsAsIdTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScsAsIdTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScsAsIdTransactionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *PfdManagement
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	JSON500                       *[]PfdReport
	ApplicationproblemJSON500     *externalRef1.ProblemDetails
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostScsAsIdTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScsAsIdTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScsAsIdTransactionsTransactionIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r DeleteScsAsIdTransactionsTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScsAsIdTransactionsTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScsAsIdTransactionsTransactionIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdManagement
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON406     *externalRef1.N406
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetScsAsIdTransactionsTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScsAsIdTransactionsTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScsAsIdTransactionsTransactionIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdManagement
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	JSON500                       *[]PfdReport
	ApplicationproblemJSON500     *externalRef1.ProblemDetails
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PutScsAsIdTransactionsTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScsAsIdTransactionsTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdData
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON406     *externalRef1.N406
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdData
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	JSON403                       *PfdReport
	ApplicationproblemJSON403     *externalRef1.ProblemDetails
	ApplicationproblemJSON404     *externalRef1.N404
	JSON409                       *PfdReport
	ApplicationproblemJSON409     *externalRef1.ProblemDetails
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	JSON500                       *PfdReport
	ApplicationproblemJSON500     *externalRef1.ProblemDetails
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdData
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	JSON403                       *PfdReport
	ApplicationproblemJSON403     *externalRef1.ProblemDetails
	ApplicationproblemJSON404     *externalRef1.N404
	JSON409                       *PfdReport
	ApplicationproblemJSON409     *externalRef1.ProblemDetails
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	JSON500                       *PfdReport
	ApplicationproblemJSON500     *externalRef1.ProblemDetails
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetScsAsIdTransactionsWithResponse request returning *GetScsAsIdTransactionsResponse
func (c *ClientWithResponses) GetScsAsIdTransactionsWithResponse(ctx context.Context, scsAsId string, reqEditors ...RequestEditorFn) (*GetScsAsIdTransactionsResponse, error) {
	rsp, err := c.GetScsAsIdTransactions(ctx, scsAsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScsAsIdTransactionsResponse(rsp)
}

// PostScsAsIdTransactionsWithBodyWithResponse request with arbitrary body returning *PostScsAsIdTransactionsResponse
func (c *ClientWithResponses) PostScsAsIdTransactionsWithBodyWithResponse(ctx context.Context, scsAsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScsAsIdTransactionsResponse, error) {
	rsp, err := c.PostScsAsIdTransactionsWithBody(ctx, scsAsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScsAsIdTransactionsResponse(rsp)
}

func (c *ClientWithResponses) PostScsAsIdTransactionsWithResponse(ctx context.Context, scsAsId string, body PostScsAsIdTransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScsAsIdTransactionsResponse, error) {
	rsp, err := c.PostScsAsIdTransactions(ctx, scsAsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScsAsIdTransactionsResponse(rsp)
}

// DeleteScsAsIdTransactionsTransactionIdWithResponse request returning *DeleteScsAsIdTransactionsTransactionIdResponse
func (c *ClientWithResponses) DeleteScsAsIdTransactionsTransactionIdWithResponse(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*DeleteScsAsIdTransactionsTransactionIdResponse, error) {
	rsp, err := c.DeleteScsAsIdTransactionsTransactionId(ctx, scsAsId, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScsAsIdTransactionsTransactionIdResponse(rsp)
}

// GetScsAsIdTransactionsTransactionIdWithResponse request returning *GetScsAsIdTransactionsTransactionIdResponse
func (c *ClientWithResponses) GetScsAsIdTransactionsTransactionIdWithResponse(ctx context.Context, scsAsId string, transactionId string, reqEditors ...RequestEditorFn) (*GetScsAsIdTransactionsTransactionIdResponse, error) {
	rsp, err := c.GetScsAsIdTransactionsTransactionId(ctx, scsAsId, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScsAsIdTransactionsTransactionIdResponse(rsp)
}

// PutScsAsIdTransactionsTransactionIdWithBodyWithResponse request with arbitrary body returning *PutScsAsIdTransactionsTransactionIdResponse
func (c *ClientWithResponses) PutScsAsIdTransactionsTransactionIdWithBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdResponse, error) {
	rsp, err := c.PutScsAsIdTransactionsTransactionIdWithBody(ctx, scsAsId, transactionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScsAsIdTransactionsTransactionIdResponse(rsp)
}

func (c *ClientWithResponses) PutScsAsIdTransactionsTransactionIdWithResponse(ctx context.Context, scsAsId string, transactionId string, body PutScsAsIdTransactionsTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdResponse, error) {
	rsp, err := c.PutScsAsIdTransactionsTransactionId(ctx, scsAsId, transactionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScsAsIdTransactionsTransactionIdResponse(rsp)
}

// DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse request returning *DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse
func (c *ClientWithResponses) DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	rsp, err := c.DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(ctx, scsAsId, transactionId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp)
}

// GetScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse request returning *GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse
func (c *ClientWithResponses) GetScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, reqEditors ...RequestEditorFn) (*GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	rsp, err := c.GetScsAsIdTransactionsTransactionIdApplicationsAppId(ctx, scsAsId, transactionId, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp)
}

// PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse request with arbitrary body returning *PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse
func (c *ClientWithResponses) PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	rsp, err := c.PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody(ctx, scsAsId, transactionId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp)
}

func (c *ClientWithResponses) PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, body PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	rsp, err := c.PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithApplicationMergePatchPlusJSONBody(ctx, scsAsId, transactionId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp)
}

// PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse request with arbitrary body returning *PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse
func (c *ClientWithResponses) PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBodyWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	rsp, err := c.PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithBody(ctx, scsAsId, transactionId, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp)
}

func (c *ClientWithResponses) PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse(ctx context.Context, scsAsId string, transactionId string, appId string, body PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	rsp, err := c.PutScsAsIdTransactionsTransactionIdApplicationsAppId(ctx, scsAsId, transactionId, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp)
}

// ParseGetScsAsIdTransactionsResponse parses an HTTP response from a GetScsAsIdTransactionsWithResponse call
func ParseGetScsAsIdTransactionsResponse(rsp *http.Response) (*GetScsAsIdTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScsAsIdTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PfdManagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest externalRef1.N406
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostScsAsIdTransactionsResponse parses an HTTP response from a PostScsAsIdTransactionsWithResponse call
func ParsePostScsAsIdTransactionsResponse(rsp *http.Response) (*PostScsAsIdTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScsAsIdTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PfdManagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest []PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteScsAsIdTransactionsTransactionIdResponse parses an HTTP response from a DeleteScsAsIdTransactionsTransactionIdWithResponse call
func ParseDeleteScsAsIdTransactionsTransactionIdResponse(rsp *http.Response) (*DeleteScsAsIdTransactionsTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScsAsIdTransactionsTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetScsAsIdTransactionsTransactionIdResponse parses an HTTP response from a GetScsAsIdTransactionsTransactionIdWithResponse call
func ParseGetScsAsIdTransactionsTransactionIdResponse(rsp *http.Response) (*GetScsAsIdTransactionsTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScsAsIdTransactionsTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdManagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest externalRef1.N406
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePutScsAsIdTransactionsTransactionIdResponse parses an HTTP response from a PutScsAsIdTransactionsTransactionIdWithResponse call
func ParsePutScsAsIdTransactionsTransactionIdResponse(rsp *http.Response) (*PutScsAsIdTransactionsTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScsAsIdTransactionsTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdManagement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest []PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse parses an HTTP response from a DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse call
func ParseDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp *http.Response) (*DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse parses an HTTP response from a GetScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse call
func ParseGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp *http.Response) (*GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest externalRef1.N406
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse parses an HTTP response from a PatchScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse call
func ParsePatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp *http.Response) (*PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 409:
		var dest PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 409:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse parses an HTTP response from a PutScsAsIdTransactionsTransactionIdApplicationsAppIdWithResponse call
func ParsePutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(rsp *http.Response) (*PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 307:
		break // No content-type

	case rsp.StatusCode == 308:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 409:
		var dest PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 409:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest PfdReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /{scsAsId}/transactions)
	GetScsAsIdTransactions(c *gin.Context, scsAsId string)

	// (POST /{scsAsId}/transactions)
	PostScsAsIdTransactions(c *gin.Context, scsAsId string)

	// (DELETE /{scsAsId}/transactions/{transactionId})
	DeleteScsAsIdTransactionsTransactionId(c *gin.Context, scsAsId string, transactionId string)

	// (GET /{scsAsId}/transactions/{transactionId})
	GetScsAsIdTransactionsTransactionId(c *gin.Context, scsAsId string, transactionId string)

	// (PUT /{scsAsId}/transactions/{transactionId})
	PutScsAsIdTransactionsTransactionId(c *gin.Context, scsAsId string, transactionId string)

	// (DELETE /{scsAsId}/transactions/{transactionId}/applications/{appId})
	DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context, scsAsId string, transactionId string, appId string)

	// (GET /{scsAsId}/transactions/{transactionId}/applications/{appId})
	GetScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context, scsAsId string, transactionId string, appId string)

	// (PATCH /{scsAsId}/transactions/{transactionId}/applications/{appId})
	PatchScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context, scsAsId string, transactionId string, appId string)

	// (PUT /{scsAsId}/transactions/{transactionId}/applications/{appId})
	PutScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context, scsAsId string, transactionId string, appId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetScsAsIdTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetScsAsIdTransactions(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetScsAsIdTransactions(c, scsAsId)
}

// PostScsAsIdTransactions operation middleware
func (siw *ServerInterfaceWrapper) PostScsAsIdTransactions(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostScsAsIdTransactions(c, scsAsId)
}

// DeleteScsAsIdTransactionsTransactionId operation middleware
func (siw *ServerInterfaceWrapper) DeleteScsAsIdTransactionsTransactionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Param("transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteScsAsIdTransactionsTransactionId(c, scsAsId, transactionId)
}

// GetScsAsIdTransactionsTransactionId operation middleware
func (siw *ServerInterfaceWrapper) GetScsAsIdTransactionsTransactionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Param("transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetScsAsIdTransactionsTransactionId(c, scsAsId, transactionId)
}

// PutScsAsIdTransactionsTransactionId operation middleware
func (siw *ServerInterfaceWrapper) PutScsAsIdTransactionsTransactionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Param("transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutScsAsIdTransactionsTransactionId(c, scsAsId, transactionId)
}

// DeleteScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (siw *ServerInterfaceWrapper) DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Param("transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(c, scsAsId, transactionId, appId)
}

// GetScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (siw *ServerInterfaceWrapper) GetScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Param("transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetScsAsIdTransactionsTransactionIdApplicationsAppId(c, scsAsId, transactionId, appId)
}

// PatchScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (siw *ServerInterfaceWrapper) PatchScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Param("transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchScsAsIdTransactionsTransactionIdApplicationsAppId(c, scsAsId, transactionId, appId)
}

// PutScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (siw *ServerInterfaceWrapper) PutScsAsIdTransactionsTransactionIdApplicationsAppId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scsAsId" -------------
	var scsAsId string

	err = runtime.BindStyledParameter("simple", false, "scsAsId", c.Param("scsAsId"), &scsAsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scsAsId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", c.Param("transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter transactionId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutScsAsIdTransactionsTransactionIdApplicationsAppId(c, scsAsId, transactionId, appId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/:scsAsId/transactions", wrapper.GetScsAsIdTransactions)
	router.POST(options.BaseURL+"/:scsAsId/transactions", wrapper.PostScsAsIdTransactions)
	router.DELETE(options.BaseURL+"/:scsAsId/transactions/:transactionId", wrapper.DeleteScsAsIdTransactionsTransactionId)
	router.GET(options.BaseURL+"/:scsAsId/transactions/:transactionId", wrapper.GetScsAsIdTransactionsTransactionId)
	router.PUT(options.BaseURL+"/:scsAsId/transactions/:transactionId", wrapper.PutScsAsIdTransactionsTransactionId)
	router.DELETE(options.BaseURL+"/:scsAsId/transactions/:transactionId/applications/:appId", wrapper.DeleteScsAsIdTransactionsTransactionIdApplicationsAppId)
	router.GET(options.BaseURL+"/:scsAsId/transactions/:transactionId/applications/:appId", wrapper.GetScsAsIdTransactionsTransactionIdApplicationsAppId)
	router.PATCH(options.BaseURL+"/:scsAsId/transactions/:transactionId/applications/:appId", wrapper.PatchScsAsIdTransactionsTransactionIdApplicationsAppId)
	router.PUT(options.BaseURL+"/:scsAsId/transactions/:transactionId/applications/:appId", wrapper.PutScsAsIdTransactionsTransactionIdApplicationsAppId)
}

type GetScsAsIdTransactionsRequestObject struct {
	ScsAsId string `json:"scsAsId"`
}

type GetScsAsIdTransactionsResponseObject interface {
	VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error
}

type GetScsAsIdTransactions200JSONResponse []PfdManagement

func (response GetScsAsIdTransactions200JSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions307Response externalRef1.N307Response

func (response GetScsAsIdTransactions307Response) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type GetScsAsIdTransactions308Response externalRef1.N308Response

func (response GetScsAsIdTransactions308Response) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type GetScsAsIdTransactions400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions400ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions401ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions403ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions404ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions406ApplicationProblemPlusJSONResponse struct {
	externalRef1.N406ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions406ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions429ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions500ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactions503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactions503ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetScsAsIdTransactionsdefaultApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostScsAsIdTransactionsRequestObject struct {
	ScsAsId string `json:"scsAsId"`
	Body    *PostScsAsIdTransactionsJSONRequestBody
}

type PostScsAsIdTransactionsResponseObject interface {
	VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error
}

type PostScsAsIdTransactions201ResponseHeaders struct {
	Location string
}

type PostScsAsIdTransactions201JSONResponse struct {
	Body    PfdManagement
	Headers PostScsAsIdTransactions201ResponseHeaders
}

func (response PostScsAsIdTransactions201JSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostScsAsIdTransactions400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions400ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions401ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions403ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions404ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions411ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions413ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions415ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions429ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions500JSONResponse []PfdReport

func (response PostScsAsIdTransactions500JSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostScsAsIdTransactions500ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactions503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response PostScsAsIdTransactions503ApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PostScsAsIdTransactionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PostScsAsIdTransactionsdefaultApplicationProblemPlusJSONResponse) VisitPostScsAsIdTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteScsAsIdTransactionsTransactionIdRequestObject struct {
	ScsAsId       string `json:"scsAsId"`
	TransactionId string `json:"transactionId"`
}

type DeleteScsAsIdTransactionsTransactionIdResponseObject interface {
	VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error
}

type DeleteScsAsIdTransactionsTransactionId204Response struct {
}

func (response DeleteScsAsIdTransactionsTransactionId204Response) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteScsAsIdTransactionsTransactionId307Response externalRef1.N307Response

func (response DeleteScsAsIdTransactionsTransactionId307Response) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type DeleteScsAsIdTransactionsTransactionId308Response externalRef1.N308Response

func (response DeleteScsAsIdTransactionsTransactionId308Response) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type DeleteScsAsIdTransactionsTransactionId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionId400ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionId401ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionId403ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionId404ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionId429ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionId500ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionId503ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteScsAsIdTransactionsTransactionIddefaultApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetScsAsIdTransactionsTransactionIdRequestObject struct {
	ScsAsId       string `json:"scsAsId"`
	TransactionId string `json:"transactionId"`
}

type GetScsAsIdTransactionsTransactionIdResponseObject interface {
	VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error
}

type GetScsAsIdTransactionsTransactionId200JSONResponse PfdManagement

func (response GetScsAsIdTransactionsTransactionId200JSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId307Response externalRef1.N307Response

func (response GetScsAsIdTransactionsTransactionId307Response) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type GetScsAsIdTransactionsTransactionId308Response externalRef1.N308Response

func (response GetScsAsIdTransactionsTransactionId308Response) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type GetScsAsIdTransactionsTransactionId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId400ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId401ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId403ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId404ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId406ApplicationProblemPlusJSONResponse struct {
	externalRef1.N406ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId406ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId429ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId500ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionId503ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetScsAsIdTransactionsTransactionIddefaultApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutScsAsIdTransactionsTransactionIdRequestObject struct {
	ScsAsId       string `json:"scsAsId"`
	TransactionId string `json:"transactionId"`
	Body          *PutScsAsIdTransactionsTransactionIdJSONRequestBody
}

type PutScsAsIdTransactionsTransactionIdResponseObject interface {
	VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error
}

type PutScsAsIdTransactionsTransactionId200JSONResponse PfdManagement

func (response PutScsAsIdTransactionsTransactionId200JSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId307Response externalRef1.N307Response

func (response PutScsAsIdTransactionsTransactionId307Response) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type PutScsAsIdTransactionsTransactionId308Response externalRef1.N308Response

func (response PutScsAsIdTransactionsTransactionId308Response) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type PutScsAsIdTransactionsTransactionId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId400ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId401ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId403ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId404ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId411ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId413ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId415ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId429ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId500JSONResponse []PfdReport

func (response PutScsAsIdTransactionsTransactionId500JSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PutScsAsIdTransactionsTransactionId500ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionId503ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PutScsAsIdTransactionsTransactionIddefaultApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject struct {
	ScsAsId       string `json:"scsAsId"`
	TransactionId string `json:"transactionId"`
	AppId         string `json:"appId"`
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject interface {
	VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId204Response struct {
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId204Response) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId307Response externalRef1.N307Response

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId307Response) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId308Response externalRef1.N308Response

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId308Response) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse) VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject struct {
	ScsAsId       string `json:"scsAsId"`
	TransactionId string `json:"transactionId"`
	AppId         string `json:"appId"`
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject interface {
	VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId200JSONResponse PfdData

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId200JSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId307Response externalRef1.N307Response

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId307Response) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId308Response externalRef1.N308Response

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId308Response) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId406ApplicationProblemPlusJSONResponse struct {
	externalRef1.N406ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId406ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse) VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject struct {
	ScsAsId       string `json:"scsAsId"`
	TransactionId string `json:"transactionId"`
	AppId         string `json:"appId"`
	Body          *PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject interface {
	VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId200JSONResponse PfdData

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId200JSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId307Response externalRef1.N307Response

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId307Response) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId308Response externalRef1.N308Response

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId308Response) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId403JSONResponse PfdReport

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId403JSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId409JSONResponse PfdReport

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId409JSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId409ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId409ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId411ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId413ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId415ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId500JSONResponse PfdReport

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId500JSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PatchScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PatchScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse) VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject struct {
	ScsAsId       string `json:"scsAsId"`
	TransactionId string `json:"transactionId"`
	AppId         string `json:"appId"`
	Body          *PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject interface {
	VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId200JSONResponse PfdData

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId200JSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId307Response externalRef1.N307Response

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId307Response) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)
	return nil
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId308Response externalRef1.N308Response

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId308Response) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)
	return nil
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId400ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId401ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId403JSONResponse PfdReport

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId403JSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId403ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId404ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId409JSONResponse PfdReport

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId409JSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId409ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId409ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId411ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId413ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId415ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId429ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId500JSONResponse PfdReport

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId500JSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId500ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppId503ApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PutScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PutScsAsIdTransactionsTransactionIdApplicationsAppIddefaultApplicationProblemPlusJSONResponse) VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /{scsAsId}/transactions)
	GetScsAsIdTransactions(ctx context.Context, request GetScsAsIdTransactionsRequestObject) (GetScsAsIdTransactionsResponseObject, error)

	// (POST /{scsAsId}/transactions)
	PostScsAsIdTransactions(ctx context.Context, request PostScsAsIdTransactionsRequestObject) (PostScsAsIdTransactionsResponseObject, error)

	// (DELETE /{scsAsId}/transactions/{transactionId})
	DeleteScsAsIdTransactionsTransactionId(ctx context.Context, request DeleteScsAsIdTransactionsTransactionIdRequestObject) (DeleteScsAsIdTransactionsTransactionIdResponseObject, error)

	// (GET /{scsAsId}/transactions/{transactionId})
	GetScsAsIdTransactionsTransactionId(ctx context.Context, request GetScsAsIdTransactionsTransactionIdRequestObject) (GetScsAsIdTransactionsTransactionIdResponseObject, error)

	// (PUT /{scsAsId}/transactions/{transactionId})
	PutScsAsIdTransactionsTransactionId(ctx context.Context, request PutScsAsIdTransactionsTransactionIdRequestObject) (PutScsAsIdTransactionsTransactionIdResponseObject, error)

	// (DELETE /{scsAsId}/transactions/{transactionId}/applications/{appId})
	DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, request DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject) (DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject, error)

	// (GET /{scsAsId}/transactions/{transactionId}/applications/{appId})
	GetScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, request GetScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject) (GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject, error)

	// (PATCH /{scsAsId}/transactions/{transactionId}/applications/{appId})
	PatchScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, request PatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject) (PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject, error)

	// (PUT /{scsAsId}/transactions/{transactionId}/applications/{appId})
	PutScsAsIdTransactionsTransactionIdApplicationsAppId(ctx context.Context, request PutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject) (PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetScsAsIdTransactions operation middleware
func (sh *strictHandler) GetScsAsIdTransactions(ctx *gin.Context, scsAsId string) {
	var request GetScsAsIdTransactionsRequestObject

	request.ScsAsId = scsAsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetScsAsIdTransactions(ctx, request.(GetScsAsIdTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScsAsIdTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetScsAsIdTransactionsResponseObject); ok {
		if err := validResponse.VisitGetScsAsIdTransactionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostScsAsIdTransactions operation middleware
func (sh *strictHandler) PostScsAsIdTransactions(ctx *gin.Context, scsAsId string) {
	var request PostScsAsIdTransactionsRequestObject

	request.ScsAsId = scsAsId

	var body PostScsAsIdTransactionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostScsAsIdTransactions(ctx, request.(PostScsAsIdTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostScsAsIdTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostScsAsIdTransactionsResponseObject); ok {
		if err := validResponse.VisitPostScsAsIdTransactionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteScsAsIdTransactionsTransactionId operation middleware
func (sh *strictHandler) DeleteScsAsIdTransactionsTransactionId(ctx *gin.Context, scsAsId string, transactionId string) {
	var request DeleteScsAsIdTransactionsTransactionIdRequestObject

	request.ScsAsId = scsAsId
	request.TransactionId = transactionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteScsAsIdTransactionsTransactionId(ctx, request.(DeleteScsAsIdTransactionsTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteScsAsIdTransactionsTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteScsAsIdTransactionsTransactionIdResponseObject); ok {
		if err := validResponse.VisitDeleteScsAsIdTransactionsTransactionIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetScsAsIdTransactionsTransactionId operation middleware
func (sh *strictHandler) GetScsAsIdTransactionsTransactionId(ctx *gin.Context, scsAsId string, transactionId string) {
	var request GetScsAsIdTransactionsTransactionIdRequestObject

	request.ScsAsId = scsAsId
	request.TransactionId = transactionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetScsAsIdTransactionsTransactionId(ctx, request.(GetScsAsIdTransactionsTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScsAsIdTransactionsTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetScsAsIdTransactionsTransactionIdResponseObject); ok {
		if err := validResponse.VisitGetScsAsIdTransactionsTransactionIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutScsAsIdTransactionsTransactionId operation middleware
func (sh *strictHandler) PutScsAsIdTransactionsTransactionId(ctx *gin.Context, scsAsId string, transactionId string) {
	var request PutScsAsIdTransactionsTransactionIdRequestObject

	request.ScsAsId = scsAsId
	request.TransactionId = transactionId

	var body PutScsAsIdTransactionsTransactionIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutScsAsIdTransactionsTransactionId(ctx, request.(PutScsAsIdTransactionsTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutScsAsIdTransactionsTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutScsAsIdTransactionsTransactionIdResponseObject); ok {
		if err := validResponse.VisitPutScsAsIdTransactionsTransactionIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (sh *strictHandler) DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(ctx *gin.Context, scsAsId string, transactionId string, appId string) {
	var request DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject

	request.ScsAsId = scsAsId
	request.TransactionId = transactionId
	request.AppId = appId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteScsAsIdTransactionsTransactionIdApplicationsAppId(ctx, request.(DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteScsAsIdTransactionsTransactionIdApplicationsAppId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject); ok {
		if err := validResponse.VisitDeleteScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (sh *strictHandler) GetScsAsIdTransactionsTransactionIdApplicationsAppId(ctx *gin.Context, scsAsId string, transactionId string, appId string) {
	var request GetScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject

	request.ScsAsId = scsAsId
	request.TransactionId = transactionId
	request.AppId = appId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetScsAsIdTransactionsTransactionIdApplicationsAppId(ctx, request.(GetScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetScsAsIdTransactionsTransactionIdApplicationsAppId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject); ok {
		if err := validResponse.VisitGetScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (sh *strictHandler) PatchScsAsIdTransactionsTransactionIdApplicationsAppId(ctx *gin.Context, scsAsId string, transactionId string, appId string) {
	var request PatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject

	request.ScsAsId = scsAsId
	request.TransactionId = transactionId
	request.AppId = appId

	var body PatchScsAsIdTransactionsTransactionIdApplicationsAppIdApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchScsAsIdTransactionsTransactionIdApplicationsAppId(ctx, request.(PatchScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchScsAsIdTransactionsTransactionIdApplicationsAppId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject); ok {
		if err := validResponse.VisitPatchScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutScsAsIdTransactionsTransactionIdApplicationsAppId operation middleware
func (sh *strictHandler) PutScsAsIdTransactionsTransactionIdApplicationsAppId(ctx *gin.Context, scsAsId string, transactionId string, appId string) {
	var request PutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject

	request.ScsAsId = scsAsId
	request.TransactionId = transactionId
	request.AppId = appId

	var body PutScsAsIdTransactionsTransactionIdApplicationsAppIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutScsAsIdTransactionsTransactionIdApplicationsAppId(ctx, request.(PutScsAsIdTransactionsTransactionIdApplicationsAppIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutScsAsIdTransactionsTransactionIdApplicationsAppId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutScsAsIdTransactionsTransactionIdApplicationsAppIdResponseObject); ok {
		if err := validResponse.VisitPutScsAsIdTransactionsTransactionIdApplicationsAppIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
