// Package session provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package session

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime"
	"mime/multipart"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// N400 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N400 = externalRef0.ExtProblemDetails

// N401 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N401 = externalRef0.ExtProblemDetails

// N403 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N403 = externalRef0.ExtProblemDetails

// N404 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N404 = externalRef0.ExtProblemDetails

// N413 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N413 = externalRef0.ExtProblemDetails

// N415 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N415 = externalRef0.ExtProblemDetails

// N429 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N429 = externalRef0.ExtProblemDetails

// N500 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N500 = externalRef0.ExtProblemDetails

// N503 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ExtProblemDetails
type N503 = externalRef0.ExtProblemDetails

// HsmfUpdateErrorApplicationJSON Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HsmfUpdateError
type HsmfUpdateErrorApplicationJSON = externalRef0.HsmfUpdateError

// HsmfUpdateErrorApplicationProblemPlusJSON defines model for HsmfUpdateError.
type HsmfUpdateErrorApplicationProblemPlusJSON = externalRef0.ProblemDetails

// PduSessionCreateErrorApplicationJSON Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PduSessionCreateError
type PduSessionCreateErrorApplicationJSON = externalRef0.PduSessionCreateError

// PduSessionCreateErrorApplicationProblemPlusJSON defines model for PduSessionCreateError.
type PduSessionCreateErrorApplicationProblemPlusJSON = externalRef0.ProblemDetails

// VsmfUpdateErrorApplicationJSON Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VsmfUpdateError
type VsmfUpdateErrorApplicationJSON = externalRef0.VsmfUpdateError

// VsmfUpdateErrorApplicationProblemPlusJSON defines model for VsmfUpdateError.
type VsmfUpdateErrorApplicationProblemPlusJSON = externalRef0.ProblemDetails

// VsmfUpdateResponse200 Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VsmfUpdatedData
type VsmfUpdateResponse200 = externalRef0.VsmfUpdatedData

// NotifyStatusRequestBody Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/StatusNotification
type NotifyStatusRequestBody = externalRef0.StatusNotification

// VsmfUpdateRequestBody Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/VsmfUpdateData
type VsmfUpdateRequestBody = externalRef0.VsmfUpdateData

// PostPduSessionsMultipartBody defines parameters for PostPduSessions.
type PostPduSessionsMultipartBody struct {
	BinaryDataN1SmInfoFromUe  *openapi_types.File `json:"binaryDataN1SmInfoFromUe,omitempty"`
	BinaryDataUnknownN1SmInfo *openapi_types.File `json:"binaryDataUnknownN1SmInfo,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/PduSessionCreateData
	JsonData             *externalRef0.PduSessionCreateData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}             `json:"-"`
}

// UpdatePduSessionMultipartBody defines parameters for UpdatePduSession.
type UpdatePduSessionMultipartBody struct {
	BinaryDataN1SmInfoFromUe    *openapi_types.File `json:"binaryDataN1SmInfoFromUe,omitempty"`
	BinaryDataN4Information     *openapi_types.File `json:"binaryDataN4Information,omitempty"`
	BinaryDataN4InformationExt1 *openapi_types.File `json:"binaryDataN4InformationExt1,omitempty"`
	BinaryDataN4InformationExt2 *openapi_types.File `json:"binaryDataN4InformationExt2,omitempty"`
	BinaryDataUnknownN1SmInfo   *openapi_types.File `json:"binaryDataUnknownN1SmInfo,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/HsmfUpdateData
	JsonData             *externalRef0.HsmfUpdateData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// ReleasePduSessionMultipartBody defines parameters for ReleasePduSession.
type ReleasePduSessionMultipartBody struct {
	BinaryDataN4Information     *openapi_types.File `json:"binaryDataN4Information,omitempty"`
	BinaryDataN4InformationExt1 *openapi_types.File `json:"binaryDataN4InformationExt1,omitempty"`
	BinaryDataN4InformationExt2 *openapi_types.File `json:"binaryDataN4InformationExt2,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/ReleaseData
	JsonData             *externalRef0.ReleaseData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// TransferMoDataMultipartBody defines parameters for TransferMoData.
type TransferMoDataMultipartBody struct {
	BinaryMoData *openapi_types.File `json:"binaryMoData,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/TransferMoDataReqData
	JsonData             *externalRef0.TransferMoDataReqData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}              `json:"-"`
}

// PostSmContextsMultipartBody defines parameters for PostSmContexts.
type PostSmContextsMultipartBody struct {
	BinaryDataN1SmMessage         *openapi_types.File `json:"binaryDataN1SmMessage,omitempty"`
	BinaryDataN2SmInformation     *openapi_types.File `json:"binaryDataN2SmInformation,omitempty"`
	BinaryDataN2SmInformationExt1 *openapi_types.File `json:"binaryDataN2SmInformationExt1,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextCreateData
	JsonData             *externalRef0.SmContextCreateData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// UpdateSmContextMultipartBody defines parameters for UpdateSmContext.
type UpdateSmContextMultipartBody struct {
	BinaryDataN1SmMessage         *openapi_types.File `json:"binaryDataN1SmMessage,omitempty"`
	BinaryDataN2SmInformation     *openapi_types.File `json:"binaryDataN2SmInformation,omitempty"`
	BinaryDataN2SmInformationExt1 *openapi_types.File `json:"binaryDataN2SmInformationExt1,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextUpdateData
	JsonData             *externalRef0.SmContextUpdateData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// ReleaseSmContextMultipartBody defines parameters for ReleaseSmContext.
type ReleaseSmContextMultipartBody struct {
	BinaryDataN2SmInformation *openapi_types.File `json:"binaryDataN2SmInformation,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SmContextReleaseData
	JsonData             *externalRef0.SmContextReleaseData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}             `json:"-"`
}

// SendMoDataMultipartBody defines parameters for SendMoData.
type SendMoDataMultipartBody struct {
	BinaryMoData *openapi_types.File `json:"binaryMoData,omitempty"`

	// JsonData Original definition in TS29502_Nsmf_PDUSession.yaml#/components/schemas/SendMoDataReqData
	JsonData             *externalRef0.SendMoDataReqData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// PostPduSessionsJSONRequestBody defines body for PostPduSessions for application/json ContentType.
type PostPduSessionsJSONRequestBody = externalRef0.PduSessionCreateData

// PostPduSessionsMultipartRequestBody defines body for PostPduSessions for multipart/related ContentType.
type PostPduSessionsMultipartRequestBody PostPduSessionsMultipartBody

// UpdatePduSessionJSONRequestBody defines body for UpdatePduSession for application/json ContentType.
type UpdatePduSessionJSONRequestBody = externalRef0.HsmfUpdateData

// UpdatePduSessionMultipartRequestBody defines body for UpdatePduSession for multipart/related ContentType.
type UpdatePduSessionMultipartRequestBody UpdatePduSessionMultipartBody

// ReleasePduSessionJSONRequestBody defines body for ReleasePduSession for application/json ContentType.
type ReleasePduSessionJSONRequestBody = externalRef0.ReleaseData

// ReleasePduSessionMultipartRequestBody defines body for ReleasePduSession for multipart/related ContentType.
type ReleasePduSessionMultipartRequestBody ReleasePduSessionMultipartBody

// RetrievePduSessionJSONRequestBody defines body for RetrievePduSession for application/json ContentType.
type RetrievePduSessionJSONRequestBody = externalRef0.RetrieveData

// TransferMoDataMultipartRequestBody defines body for TransferMoData for multipart/related ContentType.
type TransferMoDataMultipartRequestBody TransferMoDataMultipartBody

// PostSmContextsMultipartRequestBody defines body for PostSmContexts for multipart/related ContentType.
type PostSmContextsMultipartRequestBody PostSmContextsMultipartBody

// UpdateSmContextJSONRequestBody defines body for UpdateSmContext for application/json ContentType.
type UpdateSmContextJSONRequestBody = externalRef0.SmContextUpdateData

// UpdateSmContextMultipartRequestBody defines body for UpdateSmContext for multipart/related ContentType.
type UpdateSmContextMultipartRequestBody UpdateSmContextMultipartBody

// ReleaseSmContextJSONRequestBody defines body for ReleaseSmContext for application/json ContentType.
type ReleaseSmContextJSONRequestBody = externalRef0.SmContextReleaseData

// ReleaseSmContextMultipartRequestBody defines body for ReleaseSmContext for multipart/related ContentType.
type ReleaseSmContextMultipartRequestBody ReleaseSmContextMultipartBody

// RetrieveSmContextJSONRequestBody defines body for RetrieveSmContext for application/json ContentType.
type RetrieveSmContextJSONRequestBody = externalRef0.SmContextRetrieveData

// SendMoDataMultipartRequestBody defines body for SendMoData for multipart/related ContentType.
type SendMoDataMultipartRequestBody SendMoDataMultipartBody

// Getter for additional properties for PostPduSessionsMultipartBody. Returns the specified
// element and whether it was found
func (a PostPduSessionsMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PostPduSessionsMultipartBody
func (a *PostPduSessionsMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PostPduSessionsMultipartBody to handle AdditionalProperties
func (a *PostPduSessionsMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmInfoFromUe': %w", err)
		}
		delete(object, "binaryDataN1SmInfoFromUe")
	}

	if raw, found := object["binaryDataUnknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataUnknownN1SmInfo': %w", err)
		}
		delete(object, "binaryDataUnknownN1SmInfo")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PostPduSessionsMultipartBody to handle AdditionalProperties
func (a PostPduSessionsMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmInfoFromUe != nil {
		object["binaryDataN1SmInfoFromUe"], err = json.Marshal(a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmInfoFromUe': %w", err)
		}
	}

	if a.BinaryDataUnknownN1SmInfo != nil {
		object["binaryDataUnknownN1SmInfo"], err = json.Marshal(a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataUnknownN1SmInfo': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdatePduSessionMultipartBody. Returns the specified
// element and whether it was found
func (a UpdatePduSessionMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdatePduSessionMultipartBody
func (a *UpdatePduSessionMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdatePduSessionMultipartBody to handle AdditionalProperties
func (a *UpdatePduSessionMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmInfoFromUe': %w", err)
		}
		delete(object, "binaryDataN1SmInfoFromUe")
	}

	if raw, found := object["binaryDataN4Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4Information': %w", err)
		}
		delete(object, "binaryDataN4Information")
	}

	if raw, found := object["binaryDataN4InformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt1': %w", err)
		}
		delete(object, "binaryDataN4InformationExt1")
	}

	if raw, found := object["binaryDataN4InformationExt2"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt2)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt2': %w", err)
		}
		delete(object, "binaryDataN4InformationExt2")
	}

	if raw, found := object["binaryDataUnknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataUnknownN1SmInfo': %w", err)
		}
		delete(object, "binaryDataUnknownN1SmInfo")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdatePduSessionMultipartBody to handle AdditionalProperties
func (a UpdatePduSessionMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmInfoFromUe != nil {
		object["binaryDataN1SmInfoFromUe"], err = json.Marshal(a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmInfoFromUe': %w", err)
		}
	}

	if a.BinaryDataN4Information != nil {
		object["binaryDataN4Information"], err = json.Marshal(a.BinaryDataN4Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4Information': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt1 != nil {
		object["binaryDataN4InformationExt1"], err = json.Marshal(a.BinaryDataN4InformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt1': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt2 != nil {
		object["binaryDataN4InformationExt2"], err = json.Marshal(a.BinaryDataN4InformationExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt2': %w", err)
		}
	}

	if a.BinaryDataUnknownN1SmInfo != nil {
		object["binaryDataUnknownN1SmInfo"], err = json.Marshal(a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataUnknownN1SmInfo': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleasePduSessionMultipartBody. Returns the specified
// element and whether it was found
func (a ReleasePduSessionMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleasePduSessionMultipartBody
func (a *ReleasePduSessionMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleasePduSessionMultipartBody to handle AdditionalProperties
func (a *ReleasePduSessionMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN4Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4Information': %w", err)
		}
		delete(object, "binaryDataN4Information")
	}

	if raw, found := object["binaryDataN4InformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt1': %w", err)
		}
		delete(object, "binaryDataN4InformationExt1")
	}

	if raw, found := object["binaryDataN4InformationExt2"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt2)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt2': %w", err)
		}
		delete(object, "binaryDataN4InformationExt2")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleasePduSessionMultipartBody to handle AdditionalProperties
func (a ReleasePduSessionMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN4Information != nil {
		object["binaryDataN4Information"], err = json.Marshal(a.BinaryDataN4Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4Information': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt1 != nil {
		object["binaryDataN4InformationExt1"], err = json.Marshal(a.BinaryDataN4InformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt1': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt2 != nil {
		object["binaryDataN4InformationExt2"], err = json.Marshal(a.BinaryDataN4InformationExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt2': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMoDataMultipartBody. Returns the specified
// element and whether it was found
func (a TransferMoDataMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMoDataMultipartBody
func (a *TransferMoDataMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMoDataMultipartBody to handle AdditionalProperties
func (a *TransferMoDataMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryMoData"]; found {
		err = json.Unmarshal(raw, &a.BinaryMoData)
		if err != nil {
			return fmt.Errorf("error reading 'binaryMoData': %w", err)
		}
		delete(object, "binaryMoData")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMoDataMultipartBody to handle AdditionalProperties
func (a TransferMoDataMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryMoData != nil {
		object["binaryMoData"], err = json.Marshal(a.BinaryMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryMoData': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PostSmContextsMultipartBody. Returns the specified
// element and whether it was found
func (a PostSmContextsMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PostSmContextsMultipartBody
func (a *PostSmContextsMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PostSmContextsMultipartBody to handle AdditionalProperties
func (a *PostSmContextsMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmMessage"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmMessage)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmMessage': %w", err)
		}
		delete(object, "binaryDataN1SmMessage")
	}

	if raw, found := object["binaryDataN2SmInformation"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformation)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformation': %w", err)
		}
		delete(object, "binaryDataN2SmInformation")
	}

	if raw, found := object["binaryDataN2SmInformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformationExt1': %w", err)
		}
		delete(object, "binaryDataN2SmInformationExt1")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PostSmContextsMultipartBody to handle AdditionalProperties
func (a PostSmContextsMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmMessage != nil {
		object["binaryDataN1SmMessage"], err = json.Marshal(a.BinaryDataN1SmMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmMessage': %w", err)
		}
	}

	if a.BinaryDataN2SmInformation != nil {
		object["binaryDataN2SmInformation"], err = json.Marshal(a.BinaryDataN2SmInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformation': %w", err)
		}
	}

	if a.BinaryDataN2SmInformationExt1 != nil {
		object["binaryDataN2SmInformationExt1"], err = json.Marshal(a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformationExt1': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateSmContextMultipartBody. Returns the specified
// element and whether it was found
func (a UpdateSmContextMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateSmContextMultipartBody
func (a *UpdateSmContextMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateSmContextMultipartBody to handle AdditionalProperties
func (a *UpdateSmContextMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmMessage"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmMessage)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmMessage': %w", err)
		}
		delete(object, "binaryDataN1SmMessage")
	}

	if raw, found := object["binaryDataN2SmInformation"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformation)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformation': %w", err)
		}
		delete(object, "binaryDataN2SmInformation")
	}

	if raw, found := object["binaryDataN2SmInformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformationExt1': %w", err)
		}
		delete(object, "binaryDataN2SmInformationExt1")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateSmContextMultipartBody to handle AdditionalProperties
func (a UpdateSmContextMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmMessage != nil {
		object["binaryDataN1SmMessage"], err = json.Marshal(a.BinaryDataN1SmMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmMessage': %w", err)
		}
	}

	if a.BinaryDataN2SmInformation != nil {
		object["binaryDataN2SmInformation"], err = json.Marshal(a.BinaryDataN2SmInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformation': %w", err)
		}
	}

	if a.BinaryDataN2SmInformationExt1 != nil {
		object["binaryDataN2SmInformationExt1"], err = json.Marshal(a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformationExt1': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleaseSmContextMultipartBody. Returns the specified
// element and whether it was found
func (a ReleaseSmContextMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleaseSmContextMultipartBody
func (a *ReleaseSmContextMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleaseSmContextMultipartBody to handle AdditionalProperties
func (a *ReleaseSmContextMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN2SmInformation"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformation)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformation': %w", err)
		}
		delete(object, "binaryDataN2SmInformation")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleaseSmContextMultipartBody to handle AdditionalProperties
func (a ReleaseSmContextMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN2SmInformation != nil {
		object["binaryDataN2SmInformation"], err = json.Marshal(a.BinaryDataN2SmInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformation': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SendMoDataMultipartBody. Returns the specified
// element and whether it was found
func (a SendMoDataMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SendMoDataMultipartBody
func (a *SendMoDataMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SendMoDataMultipartBody to handle AdditionalProperties
func (a *SendMoDataMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryMoData"]; found {
		err = json.Unmarshal(raw, &a.BinaryMoData)
		if err != nil {
			return fmt.Errorf("error reading 'binaryMoData': %w", err)
		}
		delete(object, "binaryMoData")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SendMoDataMultipartBody to handle AdditionalProperties
func (a SendMoDataMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryMoData != nil {
		object["binaryMoData"], err = json.Marshal(a.BinaryMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryMoData': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPduSessionsWithBody request with any body
	PostPduSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPduSessions(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePduSessionWithBody request with any body
	UpdatePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePduSession(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleasePduSessionWithBody request with any body
	ReleasePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReleasePduSession(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrievePduSessionWithBody request with any body
	RetrievePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetrievePduSession(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferMoDataWithBody request with any body
	TransferMoDataWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmContextsWithBody request with any body
	PostSmContextsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSmContextWithBody request with any body
	UpdateSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSmContext(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleaseSmContextWithBody request with any body
	ReleaseSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReleaseSmContext(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveSmContextWithBody request with any body
	RetrieveSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetrieveSmContext(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendMoDataWithBody request with any body
	SendMoDataWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPduSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPduSessionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPduSessions(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPduSessionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePduSessionRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePduSession(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePduSessionRequest(c.Server, pduSessionRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleasePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleasePduSessionRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleasePduSession(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleasePduSessionRequest(c.Server, pduSessionRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrievePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrievePduSessionRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrievePduSession(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrievePduSessionRequest(c.Server, pduSessionRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferMoDataWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferMoDataRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmContextsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmContextsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSmContextRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSmContext(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSmContextRequest(c.Server, smContextRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseSmContextRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseSmContext(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseSmContextRequest(c.Server, smContextRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveSmContextRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveSmContext(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveSmContextRequest(c.Server, smContextRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendMoDataWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendMoDataRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPduSessionsRequest calls the generic PostPduSessions builder with application/json body
func NewPostPduSessionsRequest(server string, body PostPduSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPduSessionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPduSessionsRequestWithBody generates requests for PostPduSessions with any type of body
func NewPostPduSessionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePduSessionRequest calls the generic UpdatePduSession builder with application/json body
func NewUpdatePduSessionRequest(server string, pduSessionRef string, body UpdatePduSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePduSessionRequestWithBody(server, pduSessionRef, "application/json", bodyReader)
}

// NewUpdatePduSessionRequestWithBody generates requests for UpdatePduSession with any type of body
func NewUpdatePduSessionRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/modify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReleasePduSessionRequest calls the generic ReleasePduSession builder with application/json body
func NewReleasePduSessionRequest(server string, pduSessionRef string, body ReleasePduSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReleasePduSessionRequestWithBody(server, pduSessionRef, "application/json", bodyReader)
}

// NewReleasePduSessionRequestWithBody generates requests for ReleasePduSession with any type of body
func NewReleasePduSessionRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrievePduSessionRequest calls the generic RetrievePduSession builder with application/json body
func NewRetrievePduSessionRequest(server string, pduSessionRef string, body RetrievePduSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetrievePduSessionRequestWithBody(server, pduSessionRef, "application/json", bodyReader)
}

// NewRetrievePduSessionRequestWithBody generates requests for RetrievePduSession with any type of body
func NewRetrievePduSessionRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/retrieve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTransferMoDataRequestWithBody generates requests for TransferMoData with any type of body
func NewTransferMoDataRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/transfer-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSmContextsRequestWithBody generates requests for PostSmContexts with any type of body
func NewPostSmContextsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSmContextRequest calls the generic UpdateSmContext builder with application/json body
func NewUpdateSmContextRequest(server string, smContextRef string, body UpdateSmContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSmContextRequestWithBody(server, smContextRef, "application/json", bodyReader)
}

// NewUpdateSmContextRequestWithBody generates requests for UpdateSmContext with any type of body
func NewUpdateSmContextRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/modify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReleaseSmContextRequest calls the generic ReleaseSmContext builder with application/json body
func NewReleaseSmContextRequest(server string, smContextRef string, body ReleaseSmContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReleaseSmContextRequestWithBody(server, smContextRef, "application/json", bodyReader)
}

// NewReleaseSmContextRequestWithBody generates requests for ReleaseSmContext with any type of body
func NewReleaseSmContextRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveSmContextRequest calls the generic RetrieveSmContext builder with application/json body
func NewRetrieveSmContextRequest(server string, smContextRef string, body RetrieveSmContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetrieveSmContextRequestWithBody(server, smContextRef, "application/json", bodyReader)
}

// NewRetrieveSmContextRequestWithBody generates requests for RetrieveSmContext with any type of body
func NewRetrieveSmContextRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/retrieve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendMoDataRequestWithBody generates requests for SendMoData with any type of body
func NewSendMoDataRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/send-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPduSessionsWithBodyWithResponse request with any body
	PostPduSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error)

	PostPduSessionsWithResponse(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error)

	// UpdatePduSessionWithBodyWithResponse request with any body
	UpdatePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error)

	UpdatePduSessionWithResponse(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error)

	// ReleasePduSessionWithBodyWithResponse request with any body
	ReleasePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error)

	ReleasePduSessionWithResponse(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error)

	// RetrievePduSessionWithBodyWithResponse request with any body
	RetrievePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error)

	RetrievePduSessionWithResponse(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error)

	// TransferMoDataWithBodyWithResponse request with any body
	TransferMoDataWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferMoDataResponse, error)

	// PostSmContextsWithBodyWithResponse request with any body
	PostSmContextsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmContextsResponse, error)

	// UpdateSmContextWithBodyWithResponse request with any body
	UpdateSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error)

	UpdateSmContextWithResponse(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error)

	// ReleaseSmContextWithBodyWithResponse request with any body
	ReleaseSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error)

	ReleaseSmContextWithResponse(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error)

	// RetrieveSmContextWithBodyWithResponse request with any body
	RetrieveSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error)

	RetrieveSmContextWithResponse(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error)

	// SendMoDataWithBodyWithResponse request with any body
	SendMoDataWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendMoDataResponse, error)
}

type PostPduSessionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.PduSessionCreatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	JSON400                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON400     *PduSessionCreateErrorApplicationProblemPlusJSON
	JSON403                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON403     *PduSessionCreateErrorApplicationProblemPlusJSON
	JSON404                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON404     *PduSessionCreateErrorApplicationProblemPlusJSON
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	JSON500                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON500     *PduSessionCreateErrorApplicationProblemPlusJSON
	JSON503                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON503     *PduSessionCreateErrorApplicationProblemPlusJSON
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PostPduSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPduSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePduSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.HsmfUpdatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	JSON400                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON400     *HsmfUpdateErrorApplicationProblemPlusJSON
	JSON403                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON403     *HsmfUpdateErrorApplicationProblemPlusJSON
	JSON404                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON404     *HsmfUpdateErrorApplicationProblemPlusJSON
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	JSON500                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON500     *HsmfUpdateErrorApplicationProblemPlusJSON
	JSON503                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON503     *HsmfUpdateErrorApplicationProblemPlusJSON
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdatePduSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePduSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleasePduSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.ReleasedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReleasePduSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleasePduSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrievePduSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.RetrievedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSON504     *externalRef0.N504
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RetrievePduSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrievePduSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r TransferMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmContextsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.SmContextCreatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	JSON400                       *externalRef0.SmContextCreateError
	ApplicationproblemJSON400     *externalRef0.ProblemDetails
	JSON403                       *externalRef0.SmContextCreateError
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	JSON404                       *externalRef0.SmContextCreateError
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *N413
	ApplicationproblemJSON415     *N415
	ApplicationproblemJSON429     *N429
	JSON500                       *externalRef0.SmContextCreateError
	ApplicationproblemJSON500     *externalRef0.ProblemDetails
	JSON503                       *externalRef0.SmContextCreateError
	ApplicationproblemJSON503     *externalRef0.ProblemDetails
	JSON504                       *externalRef0.SmContextCreateError
	ApplicationproblemJSON504     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PostSmContextsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmContextsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSmContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SmContextUpdatedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	JSON400                       *externalRef0.SmContextUpdateError
	ApplicationproblemJSON400     *externalRef0.ProblemDetails
	JSON403                       *externalRef0.SmContextUpdateError
	ApplicationproblemJSON403     *externalRef0.ProblemDetails
	JSON404                       *externalRef0.SmContextUpdateError
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *N413
	ApplicationproblemJSON415     *N415
	ApplicationproblemJSON429     *N429
	JSON500                       *externalRef0.SmContextUpdateError
	ApplicationproblemJSON500     *externalRef0.ProblemDetails
	JSON503                       *externalRef0.SmContextUpdateError
	ApplicationproblemJSON503     *externalRef0.ProblemDetails
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateSmContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSmContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleaseSmContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SmContextReleasedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReleaseSmContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleaseSmContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveSmContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SmContextRetrievedData
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSON504     *externalRef0.N504
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r RetrieveSmContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveSmContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef0.N307
	JSON308                       *externalRef0.N308
	ApplicationproblemJSON400     *N400
	ApplicationproblemJSON401     *N401
	ApplicationproblemJSON403     *N403
	ApplicationproblemJSON404     *N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *N413
	ApplicationproblemJSON415     *N415
	ApplicationproblemJSON429     *N429
	ApplicationproblemJSON500     *N500
	ApplicationproblemJSON503     *N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r SendMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPduSessionsWithBodyWithResponse request with arbitrary body returning *PostPduSessionsResponse
func (c *ClientWithResponses) PostPduSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error) {
	rsp, err := c.PostPduSessionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPduSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostPduSessionsWithResponse(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error) {
	rsp, err := c.PostPduSessions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPduSessionsResponse(rsp)
}

// UpdatePduSessionWithBodyWithResponse request with arbitrary body returning *UpdatePduSessionResponse
func (c *ClientWithResponses) UpdatePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error) {
	rsp, err := c.UpdatePduSessionWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePduSessionResponse(rsp)
}

func (c *ClientWithResponses) UpdatePduSessionWithResponse(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error) {
	rsp, err := c.UpdatePduSession(ctx, pduSessionRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePduSessionResponse(rsp)
}

// ReleasePduSessionWithBodyWithResponse request with arbitrary body returning *ReleasePduSessionResponse
func (c *ClientWithResponses) ReleasePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error) {
	rsp, err := c.ReleasePduSessionWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleasePduSessionResponse(rsp)
}

func (c *ClientWithResponses) ReleasePduSessionWithResponse(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error) {
	rsp, err := c.ReleasePduSession(ctx, pduSessionRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleasePduSessionResponse(rsp)
}

// RetrievePduSessionWithBodyWithResponse request with arbitrary body returning *RetrievePduSessionResponse
func (c *ClientWithResponses) RetrievePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error) {
	rsp, err := c.RetrievePduSessionWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrievePduSessionResponse(rsp)
}

func (c *ClientWithResponses) RetrievePduSessionWithResponse(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error) {
	rsp, err := c.RetrievePduSession(ctx, pduSessionRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrievePduSessionResponse(rsp)
}

// TransferMoDataWithBodyWithResponse request with arbitrary body returning *TransferMoDataResponse
func (c *ClientWithResponses) TransferMoDataWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferMoDataResponse, error) {
	rsp, err := c.TransferMoDataWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferMoDataResponse(rsp)
}

// PostSmContextsWithBodyWithResponse request with arbitrary body returning *PostSmContextsResponse
func (c *ClientWithResponses) PostSmContextsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmContextsResponse, error) {
	rsp, err := c.PostSmContextsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmContextsResponse(rsp)
}

// UpdateSmContextWithBodyWithResponse request with arbitrary body returning *UpdateSmContextResponse
func (c *ClientWithResponses) UpdateSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error) {
	rsp, err := c.UpdateSmContextWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSmContextResponse(rsp)
}

func (c *ClientWithResponses) UpdateSmContextWithResponse(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error) {
	rsp, err := c.UpdateSmContext(ctx, smContextRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSmContextResponse(rsp)
}

// ReleaseSmContextWithBodyWithResponse request with arbitrary body returning *ReleaseSmContextResponse
func (c *ClientWithResponses) ReleaseSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error) {
	rsp, err := c.ReleaseSmContextWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseSmContextResponse(rsp)
}

func (c *ClientWithResponses) ReleaseSmContextWithResponse(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error) {
	rsp, err := c.ReleaseSmContext(ctx, smContextRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseSmContextResponse(rsp)
}

// RetrieveSmContextWithBodyWithResponse request with arbitrary body returning *RetrieveSmContextResponse
func (c *ClientWithResponses) RetrieveSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error) {
	rsp, err := c.RetrieveSmContextWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveSmContextResponse(rsp)
}

func (c *ClientWithResponses) RetrieveSmContextWithResponse(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error) {
	rsp, err := c.RetrieveSmContext(ctx, smContextRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveSmContextResponse(rsp)
}

// SendMoDataWithBodyWithResponse request with arbitrary body returning *SendMoDataResponse
func (c *ClientWithResponses) SendMoDataWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendMoDataResponse, error) {
	rsp, err := c.SendMoDataWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendMoDataResponse(rsp)
}

// ParsePostPduSessionsResponse parses an HTTP response from a PostPduSessionsWithResponse call
func ParsePostPduSessionsResponse(rsp *http.Response) (*PostPduSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPduSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.PduSessionCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 404:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 404:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePduSessionResponse parses an HTTP response from a UpdatePduSessionWithResponse call
func ParseUpdatePduSessionResponse(rsp *http.Response) (*UpdatePduSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePduSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.HsmfUpdatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 404:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 404:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReleasePduSessionResponse parses an HTTP response from a ReleasePduSessionWithResponse call
func ParseReleasePduSessionResponse(rsp *http.Response) (*ReleasePduSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleasePduSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ReleasedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRetrievePduSessionResponse parses an HTTP response from a RetrievePduSessionWithResponse call
func ParseRetrievePduSessionResponse(rsp *http.Response) (*RetrievePduSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrievePduSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.RetrievedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.N504
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseTransferMoDataResponse parses an HTTP response from a TransferMoDataWithResponse call
func ParseTransferMoDataResponse(rsp *http.Response) (*TransferMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransferMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostSmContextsResponse parses an HTTP response from a PostSmContextsWithResponse call
func ParsePostSmContextsResponse(rsp *http.Response) (*PostSmContextsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmContextsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.SmContextCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest externalRef0.SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest externalRef0.SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest externalRef0.SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest externalRef0.SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 504:
		var dest externalRef0.SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 504:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	case rsp.StatusCode == 504:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSmContextResponse parses an HTTP response from a UpdateSmContextWithResponse call
func ParseUpdateSmContextResponse(rsp *http.Response) (*UpdateSmContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSmContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SmContextUpdatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest externalRef0.SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest externalRef0.SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest externalRef0.SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest externalRef0.SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReleaseSmContextResponse parses an HTTP response from a ReleaseSmContextWithResponse call
func ParseReleaseSmContextResponse(rsp *http.Response) (*ReleaseSmContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleaseSmContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SmContextReleasedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRetrieveSmContextResponse parses an HTTP response from a RetrieveSmContextWithResponse call
func ParseRetrieveSmContextResponse(rsp *http.Response) (*RetrieveSmContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveSmContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SmContextRetrievedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef0.N504
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSendMoDataResponse parses an HTTP response from a SendMoDataWithResponse call
func ParseSendMoDataResponse(rsp *http.Response) (*SendMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef0.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef0.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create
	// (POST /pdu-sessions)
	PostPduSessions(c *gin.Context)
	// Update (initiated by V-SMF or I-SMF)
	// (POST /pdu-sessions/{pduSessionRef}/modify)
	UpdatePduSession(c *gin.Context, pduSessionRef string)
	// Release
	// (POST /pdu-sessions/{pduSessionRef}/release)
	ReleasePduSession(c *gin.Context, pduSessionRef string)
	// Retrieve
	// (POST /pdu-sessions/{pduSessionRef}/retrieve)
	RetrievePduSession(c *gin.Context, pduSessionRef string)
	// Transfer MO Data
	// (POST /pdu-sessions/{pduSessionRef}/transfer-mo-data)
	TransferMoData(c *gin.Context, pduSessionRef string)
	// Create SM Context
	// (POST /sm-contexts)
	PostSmContexts(c *gin.Context)
	// Update SM Context
	// (POST /sm-contexts/{smContextRef}/modify)
	UpdateSmContext(c *gin.Context, smContextRef string)
	// Release SM Context
	// (POST /sm-contexts/{smContextRef}/release)
	ReleaseSmContext(c *gin.Context, smContextRef string)
	// Retrieve SM Context
	// (POST /sm-contexts/{smContextRef}/retrieve)
	RetrieveSmContext(c *gin.Context, smContextRef string)
	// Send MO Data
	// (POST /sm-contexts/{smContextRef}/send-mo-data)
	SendMoData(c *gin.Context, smContextRef string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostPduSessions operation middleware
func (siw *ServerInterfaceWrapper) PostPduSessions(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPduSessions(c)
}

// UpdatePduSession operation middleware
func (siw *ServerInterfaceWrapper) UpdatePduSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePduSession(c, pduSessionRef)
}

// ReleasePduSession operation middleware
func (siw *ServerInterfaceWrapper) ReleasePduSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReleasePduSession(c, pduSessionRef)
}

// RetrievePduSession operation middleware
func (siw *ServerInterfaceWrapper) RetrievePduSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RetrievePduSession(c, pduSessionRef)
}

// TransferMoData operation middleware
func (siw *ServerInterfaceWrapper) TransferMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameterWithOptions("simple", "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferMoData(c, pduSessionRef)
}

// PostSmContexts operation middleware
func (siw *ServerInterfaceWrapper) PostSmContexts(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSmContexts(c)
}

// UpdateSmContext operation middleware
func (siw *ServerInterfaceWrapper) UpdateSmContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameterWithOptions("simple", "smContextRef", c.Param("smContextRef"), &smContextRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSmContext(c, smContextRef)
}

// ReleaseSmContext operation middleware
func (siw *ServerInterfaceWrapper) ReleaseSmContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameterWithOptions("simple", "smContextRef", c.Param("smContextRef"), &smContextRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReleaseSmContext(c, smContextRef)
}

// RetrieveSmContext operation middleware
func (siw *ServerInterfaceWrapper) RetrieveSmContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameterWithOptions("simple", "smContextRef", c.Param("smContextRef"), &smContextRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RetrieveSmContext(c, smContextRef)
}

// SendMoData operation middleware
func (siw *ServerInterfaceWrapper) SendMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameterWithOptions("simple", "smContextRef", c.Param("smContextRef"), &smContextRef, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendMoData(c, smContextRef)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/pdu-sessions", wrapper.PostPduSessions)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/modify", wrapper.UpdatePduSession)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/release", wrapper.ReleasePduSession)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/retrieve", wrapper.RetrievePduSession)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/transfer-mo-data", wrapper.TransferMoData)
	router.POST(options.BaseURL+"/sm-contexts", wrapper.PostSmContexts)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/modify", wrapper.UpdateSmContext)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/release", wrapper.ReleaseSmContext)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/retrieve", wrapper.RetrieveSmContext)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/send-mo-data", wrapper.SendMoData)
}

type N400ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N401ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N403ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N404ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N413ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N415ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N429ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N500ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type N503ApplicationProblemPlusJSONResponse externalRef0.ExtProblemDetails

type HsmfUpdateErrorJSONResponse externalRef0.HsmfUpdateError
type HsmfUpdateErrorApplicationProblemPlusJSONResponse externalRef0.ProblemDetails
type HsmfUpdateErrorMultipartResponse func(writer *multipart.Writer) error

type PduSessionCreateErrorJSONResponse externalRef0.PduSessionCreateError
type PduSessionCreateErrorApplicationProblemPlusJSONResponse externalRef0.ProblemDetails
type PduSessionCreateErrorMultipartResponse func(writer *multipart.Writer) error

type VsmfUpdateErrorJSONResponse externalRef0.VsmfUpdateError
type VsmfUpdateErrorApplicationProblemPlusJSONResponse externalRef0.ProblemDetails
type VsmfUpdateErrorMultipartResponse func(writer *multipart.Writer) error

type VsmfUpdateResponse200JSONResponse externalRef0.VsmfUpdatedData
type VsmfUpdateResponse200MultipartResponse func(writer *multipart.Writer) error

type PostPduSessionsRequestObject struct {
	JSONBody      *PostPduSessionsJSONRequestBody
	MultipartBody *multipart.Reader
}

type PostPduSessionsResponseObject interface {
	VisitPostPduSessionsResponse(w http.ResponseWriter) error
}

type PostPduSessions201ResponseHeaders struct {
	Location string
}

type PostPduSessions201JSONResponse struct {
	Body    externalRef0.PduSessionCreatedData
	Headers PostPduSessions201ResponseHeaders
}

func (response PostPduSessions201JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPduSessions201MultipartResponse struct {
	Body    func(writer *multipart.Writer) error
	Headers PostPduSessions201ResponseHeaders
}

func (response PostPduSessions201MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	defer writer.Close()
	return response.Body(writer)
}

type PostPduSessions307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PostPduSessions307JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPduSessions308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PostPduSessions308JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPduSessions400JSONResponse struct {
	PduSessionCreateErrorJSONResponse
}

func (response PostPduSessions400JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.PduSessionCreateError(response.PduSessionCreateErrorJSONResponse))
}

type PostPduSessions400ApplicationProblemPlusJSONResponse struct {
	PduSessionCreateErrorApplicationProblemPlusJSONResponse
}

func (response PostPduSessions400ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.PduSessionCreateErrorApplicationProblemPlusJSONResponse))
}

type PostPduSessions400MultipartResponse PduSessionCreateErrorMultipartResponse

func (response PostPduSessions400MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions403JSONResponse externalRef0.PduSessionCreateError

func (response PostPduSessions403JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.PduSessionCreateError(response))
}

type PostPduSessions403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostPduSessions403ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostPduSessions403MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions403MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions404JSONResponse externalRef0.PduSessionCreateError

func (response PostPduSessions404JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.PduSessionCreateError(response))
}

type PostPduSessions404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostPduSessions404ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostPduSessions404MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions404MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions411ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PostPduSessions413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions413ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PostPduSessions415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions415ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PostPduSessions429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions429ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PostPduSessions500JSONResponse externalRef0.PduSessionCreateError

func (response PostPduSessions500JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.PduSessionCreateError(response))
}

type PostPduSessions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostPduSessions500ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostPduSessions500MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions500MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions503JSONResponse externalRef0.PduSessionCreateError

func (response PostPduSessions503JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.PduSessionCreateError(response))
}

type PostPduSessions503ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostPduSessions503ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostPduSessions503MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions503MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type PostPduSessionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PostPduSessionsdefaultApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePduSessionRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	JSONBody      *UpdatePduSessionJSONRequestBody
	MultipartBody *multipart.Reader
}

type UpdatePduSessionResponseObject interface {
	VisitUpdatePduSessionResponse(w http.ResponseWriter) error
}

type UpdatePduSession200JSONResponse externalRef0.HsmfUpdatedData

func (response UpdatePduSession200JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.HsmfUpdatedData(response))
}

type UpdatePduSession200MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession200MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession204Response struct {
}

func (response UpdatePduSession204Response) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdatePduSession307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response UpdatePduSession307JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePduSession308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response UpdatePduSession308JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePduSession400JSONResponse struct{ HsmfUpdateErrorJSONResponse }

func (response UpdatePduSession400JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.HsmfUpdateError(response.HsmfUpdateErrorJSONResponse))
}

type UpdatePduSession400ApplicationProblemPlusJSONResponse struct {
	HsmfUpdateErrorApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession400ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.HsmfUpdateErrorApplicationProblemPlusJSONResponse))
}

type UpdatePduSession400MultipartResponse HsmfUpdateErrorMultipartResponse

func (response UpdatePduSession400MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession403JSONResponse externalRef0.HsmfUpdateError

func (response UpdatePduSession403JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.HsmfUpdateError(response))
}

type UpdatePduSession403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdatePduSession403ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdatePduSession403MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession403MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession404JSONResponse externalRef0.HsmfUpdateError

func (response UpdatePduSession404JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.HsmfUpdateError(response))
}

type UpdatePduSession404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdatePduSession404ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdatePduSession404MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession404MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession411ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession413ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession415ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession429ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession500JSONResponse externalRef0.HsmfUpdateError

func (response UpdatePduSession500JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.HsmfUpdateError(response))
}

type UpdatePduSession500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdatePduSession500ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdatePduSession500MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession500MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession503JSONResponse externalRef0.HsmfUpdateError

func (response UpdatePduSession503JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.HsmfUpdateError(response))
}

type UpdatePduSession503ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdatePduSession503ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdatePduSession503MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession503MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdatePduSessiondefaultApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleasePduSessionRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	JSONBody      *ReleasePduSessionJSONRequestBody
	MultipartBody *multipart.Reader
}

type ReleasePduSessionResponseObject interface {
	VisitReleasePduSessionResponse(w http.ResponseWriter) error
}

type ReleasePduSession200JSONResponse externalRef0.ReleasedData

func (response ReleasePduSession200JSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.ReleasedData(response))
}

type ReleasePduSession200MultipartResponse func(writer *multipart.Writer) error

func (response ReleasePduSession200MultipartResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type ReleasePduSession204Response struct {
}

func (response ReleasePduSession204Response) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReleasePduSession307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ReleasePduSession307JSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleasePduSession308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ReleasePduSession308JSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleasePduSession400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession400ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession403ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession404ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession411ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession413ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession415ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession429ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession500ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession503ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReleasePduSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReleasePduSessiondefaultApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrievePduSessionRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	Body          *RetrievePduSessionJSONRequestBody
}

type RetrievePduSessionResponseObject interface {
	VisitRetrievePduSessionResponse(w http.ResponseWriter) error
}

type RetrievePduSession200JSONResponse externalRef0.RetrievedData

func (response RetrievePduSession200JSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.RetrievedData(response))
}

type RetrievePduSession307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response RetrievePduSession307JSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrievePduSession308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response RetrievePduSession308JSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrievePduSession400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession400ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession403ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession404ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession411ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession413ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession415ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession429ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession500ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession503ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession504ApplicationProblemPlusJSONResponse struct {
	externalRef0.N504ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession504ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N504ApplicationProblemPlusJSONResponse))
}

type RetrievePduSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RetrievePduSessiondefaultApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferMoDataRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	Body          *multipart.Reader
}

type TransferMoDataResponseObject interface {
	VisitTransferMoDataResponse(w http.ResponseWriter) error
}

type TransferMoData204Response struct {
}

func (response TransferMoData204Response) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type TransferMoData307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response TransferMoData307JSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferMoData308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response TransferMoData308JSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferMoData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response TransferMoData400ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type TransferMoData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response TransferMoData401ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type TransferMoData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response TransferMoData403ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type TransferMoData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response TransferMoData404ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type TransferMoData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response TransferMoData411ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type TransferMoData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response TransferMoData413ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type TransferMoData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response TransferMoData415ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type TransferMoData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response TransferMoData429ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type TransferMoData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response TransferMoData500ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type TransferMoData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response TransferMoData503ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type TransferMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response TransferMoDatadefaultApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContextsRequestObject struct {
	Body *multipart.Reader
}

type PostSmContextsResponseObject interface {
	VisitPostSmContextsResponse(w http.ResponseWriter) error
}

type PostSmContexts201ResponseHeaders struct {
	Location string
}

type PostSmContexts201JSONResponse struct {
	Body    externalRef0.SmContextCreatedData
	Headers PostSmContexts201ResponseHeaders
}

func (response PostSmContexts201JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContexts201MultipartResponse struct {
	Body    func(writer *multipart.Writer) error
	Headers PostSmContexts201ResponseHeaders
}

func (response PostSmContexts201MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	defer writer.Close()
	return response.Body(writer)
}

type PostSmContexts307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response PostSmContexts307JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContexts308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response PostSmContexts308JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContexts400JSONResponse externalRef0.SmContextCreateError

func (response PostSmContexts400JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.SmContextCreateError(response))
}

type PostSmContexts400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostSmContexts400ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostSmContexts400MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts400MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts403JSONResponse externalRef0.SmContextCreateError

func (response PostSmContexts403JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.SmContextCreateError(response))
}

type PostSmContexts403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostSmContexts403ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostSmContexts403MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts403MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts404JSONResponse externalRef0.SmContextCreateError

func (response PostSmContexts404JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.SmContextCreateError(response))
}

type PostSmContexts404MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts404MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts411ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PostSmContexts413ApplicationProblemPlusJSONResponse struct {
	N413ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts413ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PostSmContexts415ApplicationProblemPlusJSONResponse struct {
	N415ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts415ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PostSmContexts429ApplicationProblemPlusJSONResponse struct {
	N429ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts429ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PostSmContexts500JSONResponse externalRef0.SmContextCreateError

func (response PostSmContexts500JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.SmContextCreateError(response))
}

type PostSmContexts500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostSmContexts500ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostSmContexts500MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts500MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts503JSONResponse externalRef0.SmContextCreateError

func (response PostSmContexts503JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.SmContextCreateError(response))
}

type PostSmContexts503ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostSmContexts503ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostSmContexts503MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts503MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts504JSONResponse externalRef0.SmContextCreateError

func (response PostSmContexts504JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef0.SmContextCreateError(response))
}

type PostSmContexts504ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PostSmContexts504ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type PostSmContexts504MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts504MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(504)

	defer writer.Close()
	return response(writer)
}

type PostSmContextsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PostSmContextsdefaultApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSmContextRequestObject struct {
	SmContextRef  string `json:"smContextRef"`
	JSONBody      *UpdateSmContextJSONRequestBody
	MultipartBody *multipart.Reader
}

type UpdateSmContextResponseObject interface {
	VisitUpdateSmContextResponse(w http.ResponseWriter) error
}

type UpdateSmContext200JSONResponse externalRef0.SmContextUpdatedData

func (response UpdateSmContext200JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.SmContextUpdatedData(response))
}

type UpdateSmContext200MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext200MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext204Response struct {
}

func (response UpdateSmContext204Response) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateSmContext307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response UpdateSmContext307JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSmContext308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response UpdateSmContext308JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSmContext400JSONResponse externalRef0.SmContextUpdateError

func (response UpdateSmContext400JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.SmContextUpdateError(response))
}

type UpdateSmContext400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateSmContext400ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdateSmContext400MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext400MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext403JSONResponse externalRef0.SmContextUpdateError

func (response UpdateSmContext403JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.SmContextUpdateError(response))
}

type UpdateSmContext403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateSmContext403ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdateSmContext403MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext403MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext404JSONResponse externalRef0.SmContextUpdateError

func (response UpdateSmContext404JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.SmContextUpdateError(response))
}

type UpdateSmContext404MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext404MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext411ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext413ApplicationProblemPlusJSONResponse struct {
	N413ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext413ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext415ApplicationProblemPlusJSONResponse struct {
	N415ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext415ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext429ApplicationProblemPlusJSONResponse struct {
	N429ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext429ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext500JSONResponse externalRef0.SmContextUpdateError

func (response UpdateSmContext500JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.SmContextUpdateError(response))
}

type UpdateSmContext500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateSmContext500ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdateSmContext500MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext500MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext503JSONResponse externalRef0.SmContextUpdateError

func (response UpdateSmContext503JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.SmContextUpdateError(response))
}

type UpdateSmContext503ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateSmContext503ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response))
}

type UpdateSmContext503MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext503MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateSmContextdefaultApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseSmContextRequestObject struct {
	SmContextRef  string `json:"smContextRef"`
	JSONBody      *ReleaseSmContextJSONRequestBody
	MultipartBody *multipart.Reader
}

type ReleaseSmContextResponseObject interface {
	VisitReleaseSmContextResponse(w http.ResponseWriter) error
}

type ReleaseSmContext200JSONResponse externalRef0.SmContextReleasedData

func (response ReleaseSmContext200JSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.SmContextReleasedData(response))
}

type ReleaseSmContext204Response struct {
}

func (response ReleaseSmContext204Response) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReleaseSmContext307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response ReleaseSmContext307JSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseSmContext308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response ReleaseSmContext308JSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseSmContext400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext400ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext403ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext404ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext411ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext413ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext415ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext429ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext500ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext503ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReleaseSmContextdefaultApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrieveSmContextRequestObject struct {
	SmContextRef string `json:"smContextRef"`
	Body         *RetrieveSmContextJSONRequestBody
}

type RetrieveSmContextResponseObject interface {
	VisitRetrieveSmContextResponse(w http.ResponseWriter) error
}

type RetrieveSmContext200JSONResponse externalRef0.SmContextRetrievedData

func (response RetrieveSmContext200JSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.SmContextRetrievedData(response))
}

type RetrieveSmContext307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response RetrieveSmContext307JSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrieveSmContext308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response RetrieveSmContext308JSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrieveSmContext400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext400ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext403ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext404ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext411ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext413ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext415ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext429ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext500ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext503ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext504ApplicationProblemPlusJSONResponse struct {
	externalRef0.N504ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext504ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N504ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response RetrieveSmContextdefaultApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendMoDataRequestObject struct {
	SmContextRef string `json:"smContextRef"`
	Body         *multipart.Reader
}

type SendMoDataResponseObject interface {
	VisitSendMoDataResponse(w http.ResponseWriter) error
}

type SendMoData204Response struct {
}

func (response SendMoData204Response) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SendMoData307JSONResponse struct{ externalRef0.N307JSONResponse }

func (response SendMoData307JSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendMoData308JSONResponse struct{ externalRef0.N308JSONResponse }

func (response SendMoData308JSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendMoData400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response SendMoData400ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SendMoData401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response SendMoData401ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type SendMoData403ApplicationProblemPlusJSONResponse struct {
	N403ApplicationProblemPlusJSONResponse
}

func (response SendMoData403ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type SendMoData404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response SendMoData404ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type SendMoData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response SendMoData411ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type SendMoData413ApplicationProblemPlusJSONResponse struct {
	N413ApplicationProblemPlusJSONResponse
}

func (response SendMoData413ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type SendMoData415ApplicationProblemPlusJSONResponse struct {
	N415ApplicationProblemPlusJSONResponse
}

func (response SendMoData415ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type SendMoData429ApplicationProblemPlusJSONResponse struct {
	N429ApplicationProblemPlusJSONResponse
}

func (response SendMoData429ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type SendMoData500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response SendMoData500ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type SendMoData503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response SendMoData503ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ExtProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SendMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response SendMoDatadefaultApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create
	// (POST /pdu-sessions)
	PostPduSessions(ctx context.Context, request PostPduSessionsRequestObject) (PostPduSessionsResponseObject, error)
	// Update (initiated by V-SMF or I-SMF)
	// (POST /pdu-sessions/{pduSessionRef}/modify)
	UpdatePduSession(ctx context.Context, request UpdatePduSessionRequestObject) (UpdatePduSessionResponseObject, error)
	// Release
	// (POST /pdu-sessions/{pduSessionRef}/release)
	ReleasePduSession(ctx context.Context, request ReleasePduSessionRequestObject) (ReleasePduSessionResponseObject, error)
	// Retrieve
	// (POST /pdu-sessions/{pduSessionRef}/retrieve)
	RetrievePduSession(ctx context.Context, request RetrievePduSessionRequestObject) (RetrievePduSessionResponseObject, error)
	// Transfer MO Data
	// (POST /pdu-sessions/{pduSessionRef}/transfer-mo-data)
	TransferMoData(ctx context.Context, request TransferMoDataRequestObject) (TransferMoDataResponseObject, error)
	// Create SM Context
	// (POST /sm-contexts)
	PostSmContexts(ctx context.Context, request PostSmContextsRequestObject) (PostSmContextsResponseObject, error)
	// Update SM Context
	// (POST /sm-contexts/{smContextRef}/modify)
	UpdateSmContext(ctx context.Context, request UpdateSmContextRequestObject) (UpdateSmContextResponseObject, error)
	// Release SM Context
	// (POST /sm-contexts/{smContextRef}/release)
	ReleaseSmContext(ctx context.Context, request ReleaseSmContextRequestObject) (ReleaseSmContextResponseObject, error)
	// Retrieve SM Context
	// (POST /sm-contexts/{smContextRef}/retrieve)
	RetrieveSmContext(ctx context.Context, request RetrieveSmContextRequestObject) (RetrieveSmContextResponseObject, error)
	// Send MO Data
	// (POST /sm-contexts/{smContextRef}/send-mo-data)
	SendMoData(ctx context.Context, request SendMoDataRequestObject) (SendMoDataResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostPduSessions operation middleware
func (sh *strictHandler) PostPduSessions(ctx *gin.Context) {
	var request PostPduSessionsRequestObject

	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body PostPduSessionsJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPduSessions(ctx, request.(PostPduSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPduSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPduSessionsResponseObject); ok {
		if err := validResponse.VisitPostPduSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePduSession operation middleware
func (sh *strictHandler) UpdatePduSession(ctx *gin.Context, pduSessionRef string) {
	var request UpdatePduSessionRequestObject

	request.PduSessionRef = pduSessionRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body UpdatePduSessionJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePduSession(ctx, request.(UpdatePduSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePduSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePduSessionResponseObject); ok {
		if err := validResponse.VisitUpdatePduSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReleasePduSession operation middleware
func (sh *strictHandler) ReleasePduSession(ctx *gin.Context, pduSessionRef string) {
	var request ReleasePduSessionRequestObject

	request.PduSessionRef = pduSessionRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body ReleasePduSessionJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReleasePduSession(ctx, request.(ReleasePduSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReleasePduSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReleasePduSessionResponseObject); ok {
		if err := validResponse.VisitReleasePduSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetrievePduSession operation middleware
func (sh *strictHandler) RetrievePduSession(ctx *gin.Context, pduSessionRef string) {
	var request RetrievePduSessionRequestObject

	request.PduSessionRef = pduSessionRef

	var body RetrievePduSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RetrievePduSession(ctx, request.(RetrievePduSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrievePduSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RetrievePduSessionResponseObject); ok {
		if err := validResponse.VisitRetrievePduSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferMoData operation middleware
func (sh *strictHandler) TransferMoData(ctx *gin.Context, pduSessionRef string) {
	var request TransferMoDataRequestObject

	request.PduSessionRef = pduSessionRef

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferMoData(ctx, request.(TransferMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferMoDataResponseObject); ok {
		if err := validResponse.VisitTransferMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSmContexts operation middleware
func (sh *strictHandler) PostSmContexts(ctx *gin.Context) {
	var request PostSmContextsRequestObject

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSmContexts(ctx, request.(PostSmContextsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSmContexts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSmContextsResponseObject); ok {
		if err := validResponse.VisitPostSmContextsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSmContext operation middleware
func (sh *strictHandler) UpdateSmContext(ctx *gin.Context, smContextRef string) {
	var request UpdateSmContextRequestObject

	request.SmContextRef = smContextRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body UpdateSmContextJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSmContext(ctx, request.(UpdateSmContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSmContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSmContextResponseObject); ok {
		if err := validResponse.VisitUpdateSmContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReleaseSmContext operation middleware
func (sh *strictHandler) ReleaseSmContext(ctx *gin.Context, smContextRef string) {
	var request ReleaseSmContextRequestObject

	request.SmContextRef = smContextRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body ReleaseSmContextJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReleaseSmContext(ctx, request.(ReleaseSmContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReleaseSmContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReleaseSmContextResponseObject); ok {
		if err := validResponse.VisitReleaseSmContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetrieveSmContext operation middleware
func (sh *strictHandler) RetrieveSmContext(ctx *gin.Context, smContextRef string) {
	var request RetrieveSmContextRequestObject

	request.SmContextRef = smContextRef

	var body RetrieveSmContextJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RetrieveSmContext(ctx, request.(RetrieveSmContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrieveSmContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RetrieveSmContextResponseObject); ok {
		if err := validResponse.VisitRetrieveSmContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendMoData operation middleware
func (sh *strictHandler) SendMoData(ctx *gin.Context, smContextRef string) {
	var request SendMoDataRequestObject

	request.SmContextRef = smContextRef

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendMoData(ctx, request.(SendMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendMoDataResponseObject); ok {
		if err := validResponse.VisitSendMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
