// Package session provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package session

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"mime"
	"mime/multipart"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/amf/communication"
	externalRef1 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef2 "github.com/ShouheiNishi/openapi5g/nrf/management"
	externalRef3 "github.com/ShouheiNishi/openapi5g/udr/policy"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for Cause.
const (
	CHANGEDANCHORSMF             Cause = "CHANGED_ANCHOR_SMF"
	CHANGEDINTERMEDIATESMF       Cause = "CHANGED_INTERMEDIATE_SMF"
	CNASSISTEDRANPARAMETERTUNING Cause = "CN_ASSISTED_RAN_PARAMETER_TUNING"
	DDNFAILURESTATUS             Cause = "DDN_FAILURE_STATUS"
	DNNCONGESTION                Cause = "DNN_CONGESTION"
	EPSFALLBACK                  Cause = "EPS_FALLBACK"
	HOCANCEL                     Cause = "HO_CANCEL"
	HOFAILURE                    Cause = "HO_FAILURE"
	INSUFFICIENTUPRESOURCES      Cause = "INSUFFICIENT_UP_RESOURCES"
	ISMFCONTEXTTRANSFER          Cause = "ISMF_CONTEXT_TRANSFER"
	N5GANNOTRESPONDING           Cause = "5G_AN_NOT_RESPONDING"
	NOTSUPPORTEDWITHISMF         Cause = "NOT_SUPPORTED_WITH_ISMF"
	PDUSESSIONHANDEDOVER         Cause = "PDU_SESSION_HANDED_OVER"
	PDUSESSIONHANDOVERFAILURE    Cause = "PDU_SESSION_HAND_OVER_FAILURE"
	PDUSESSIONRESUMED            Cause = "PDU_SESSION_RESUMED"
	PDUSESSIONSTATUSMISMATCH     Cause = "PDU_SESSION_STATUS_MISMATCH"
	RELDUETOCPONLYNOTAPPLICABLE  Cause = "REL_DUE_TO_CP_ONLY_NOT_APPLICABLE"
	RELDUETODUPLICATESESSIONID   Cause = "REL_DUE_TO_DUPLICATE_SESSION_ID"
	RELDUETOHO                   Cause = "REL_DUE_TO_HO"
	RELDUETOPSTOCSHO             Cause = "REL_DUE_TO_PS_TO_CS_HO"
	RELDUETOREACTIVATION         Cause = "REL_DUE_TO_REACTIVATION"
	RELDUETOSLICENOTAUTHORIZED   Cause = "REL_DUE_TO_SLICE_NOT_AUTHORIZED"
	RELDUETOSLICENOTAVAILABLE    Cause = "REL_DUE_TO_SLICE_NOT_AVAILABLE"
	RELDUETOSMFNOTSUPPORTPSETR   Cause = "REL_DUE_TO_SMF_NOT_SUPPORT_PSETR"
	RELDUETOSUBSCRIPTIONCHANGE   Cause = "REL_DUE_TO_SUBSCRIPTION_CHANGE"
	RELDUETOUPSEC                Cause = "REL_DUE_TO_UP_SEC"
	SMFCONTEXTTRANSFER           Cause = "SMF_CONTEXT_TRANSFER"
	SNSSAICONGESTION             Cause = "S_NSSAI_CONGESTION"
)

// Defines values for DnnSelectionMode.
const (
	NWDNNNOTVERIFIED DnnSelectionMode = "NW_DNN_NOT_VERIFIED"
	UEDNNNOTVERIFIED DnnSelectionMode = "UE_DNN_NOT_VERIFIED"
	VERIFIED         DnnSelectionMode = "VERIFIED"
)

// Defines values for EpsInterworkingIndication.
const (
	EpsInterworkingIndicationIWKNON3GPP EpsInterworkingIndication = "IWK_NON_3GPP"
	EpsInterworkingIndicationNONE       EpsInterworkingIndication = "NONE"
	EpsInterworkingIndicationWITHN26    EpsInterworkingIndication = "WITH_N26"
	EpsInterworkingIndicationWITHOUTN26 EpsInterworkingIndication = "WITHOUT_N26"
)

// Defines values for HoState.
const (
	HoStateCANCELLED HoState = "CANCELLED"
	HoStateCOMPLETED HoState = "COMPLETED"
	HoStateNONE      HoState = "NONE"
	HoStatePREPARED  HoState = "PREPARED"
	HoStatePREPARING HoState = "PREPARING"
)

// Defines values for MaReleaseIndication.
const (
	RELMAPDUOVER3GPP  MaReleaseIndication = "REL_MAPDU_OVER_3GPP"
	RELMAPDUOVERN3GPP MaReleaseIndication = "REL_MAPDU_OVER_N3GPP"
)

// Defines values for MaxIntegrityProtectedDataRate.
const (
	MAXUERATE MaxIntegrityProtectedDataRate = "MAX_UE_RATE"
	N64KBPS   MaxIntegrityProtectedDataRate = "64_KBPS"
)

// Defines values for N2SmInfoType.
const (
	HANDOVERCMD          N2SmInfoType = "HANDOVER_CMD"
	HANDOVERPREPFAIL     N2SmInfoType = "HANDOVER_PREP_FAIL"
	HANDOVERREQACK       N2SmInfoType = "HANDOVER_REQ_ACK"
	HANDOVERREQUIRED     N2SmInfoType = "HANDOVER_REQUIRED"
	HANDOVERRESALLOCFAIL N2SmInfoType = "HANDOVER_RES_ALLOC_FAIL"
	PATHSWITCHREQ        N2SmInfoType = "PATH_SWITCH_REQ"
	PATHSWITCHREQACK     N2SmInfoType = "PATH_SWITCH_REQ_ACK"
	PATHSWITCHREQFAIL    N2SmInfoType = "PATH_SWITCH_REQ_FAIL"
	PATHSWITCHSETUPFAIL  N2SmInfoType = "PATH_SWITCH_SETUP_FAIL"
	PDURESMODCFM         N2SmInfoType = "PDU_RES_MOD_CFM"
	PDURESMODFAIL        N2SmInfoType = "PDU_RES_MOD_FAIL"
	PDURESMODIND         N2SmInfoType = "PDU_RES_MOD_IND"
	PDURESMODINDFAIL     N2SmInfoType = "PDU_RES_MOD_IND_FAIL"
	PDURESMODREQ         N2SmInfoType = "PDU_RES_MOD_REQ"
	PDURESMODRSP         N2SmInfoType = "PDU_RES_MOD_RSP"
	PDURESNTY            N2SmInfoType = "PDU_RES_NTY"
	PDURESNTYREL         N2SmInfoType = "PDU_RES_NTY_REL"
	PDURESRELCMD         N2SmInfoType = "PDU_RES_REL_CMD"
	PDURESRELRSP         N2SmInfoType = "PDU_RES_REL_RSP"
	PDURESSETUPFAIL      N2SmInfoType = "PDU_RES_SETUP_FAIL"
	PDURESSETUPREQ       N2SmInfoType = "PDU_RES_SETUP_REQ"
	PDURESSETUPRSP       N2SmInfoType = "PDU_RES_SETUP_RSP"
	SECONDARYRATUSAGE    N2SmInfoType = "SECONDARY_RAT_USAGE"
	UECONTEXTRESUMEREQ   N2SmInfoType = "UE_CONTEXT_RESUME_REQ"
	UECONTEXTRESUMERSP   N2SmInfoType = "UE_CONTEXT_RESUME_RSP"
	UECONTEXTSUSPENDREQ  N2SmInfoType = "UE_CONTEXT_SUSPEND_REQ"
)

// Defines values for N4MessageType.
const (
	PFCPSESDELREQ N4MessageType = "PFCP_SES_DEL_REQ"
	PFCPSESDELRSP N4MessageType = "PFCP_SES_DEL_RSP"
	PFCPSESESTREQ N4MessageType = "PFCP_SES_EST_REQ"
	PFCPSESESTRSP N4MessageType = "PFCP_SES_EST_RSP"
	PFCPSESMODREQ N4MessageType = "PFCP_SES_MOD_REQ"
	PFCPSESMODRSP N4MessageType = "PFCP_SES_MOD_RSP"
	PFCPSESREPREQ N4MessageType = "PFCP_SES_REP_REQ"
	PFCPSESREPRSP N4MessageType = "PFCP_SES_REP_RSP"
)

// Defines values for NotificationCause.
const (
	QOSFULFILLED      NotificationCause = "QOS_FULFILLED"
	QOSNOTFULFILLED   NotificationCause = "QOS_NOT_FULFILLED"
	UPSECFULFILLED    NotificationCause = "UP_SEC_FULFILLED"
	UPSECNOTFULFILLED NotificationCause = "UP_SEC_NOT_FULFILLED"
)

// Defines values for ProtectionResult.
const (
	NOTPERFORMED ProtectionResult = "NOT_PERFORMED"
	PERFORMED    ProtectionResult = "PERFORMED"
)

// Defines values for PsaIndication.
const (
	PSAINSERTED     PsaIndication = "PSA_INSERTED"
	PSAINSERTEDONLY PsaIndication = "PSA_INSERTED_ONLY"
	PSAREMOVED      PsaIndication = "PSA_REMOVED"
	PSAREMOVEDONLY  PsaIndication = "PSA_REMOVED_ONLY"
)

// Defines values for QosFlowAccessType.
const (
	N3GPP           QosFlowAccessType = "3GPP"
	N3GPPANDNON3GPP QosFlowAccessType = "3GPP_AND_NON_3GPP"
	NON3GPP         QosFlowAccessType = "NON_3GPP"
)

// Defines values for QosMonitoringReq.
const (
	BOTH QosMonitoringReq = "BOTH"
	DL   QosMonitoringReq = "DL"
	NONE QosMonitoringReq = "NONE"
	UL   QosMonitoringReq = "UL"
)

// Defines values for RequestIndication.
const (
	EBIASSIGNMENTREQ    RequestIndication = "EBI_ASSIGNMENT_REQ"
	NWREQPDUSESAUTH     RequestIndication = "NW_REQ_PDU_SES_AUTH"
	NWREQPDUSESMOD      RequestIndication = "NW_REQ_PDU_SES_MOD"
	NWREQPDUSESREL      RequestIndication = "NW_REQ_PDU_SES_REL"
	PDUSESMOB           RequestIndication = "PDU_SES_MOB"
	RELDUETO5GANREQUEST RequestIndication = "REL_DUE_TO_5G_AN_REQUEST"
	UEREQPDUSESMOD      RequestIndication = "UE_REQ_PDU_SES_MOD"
	UEREQPDUSESREL      RequestIndication = "UE_REQ_PDU_SES_REL"
)

// Defines values for RequestType.
const (
	EXISTINGEMERGENCYPDUSESSION RequestType = "EXISTING_EMERGENCY_PDU_SESSION"
	EXISTINGPDUSESSION          RequestType = "EXISTING_PDU_SESSION"
	INITIALEMERGENCYREQUEST     RequestType = "INITIAL_EMERGENCY_REQUEST"
	INITIALREQUEST              RequestType = "INITIAL_REQUEST"
)

// Defines values for ResourceStatus.
const (
	ALTANCHORSMF ResourceStatus = "ALT_ANCHOR_SMF"
	RELEASED     ResourceStatus = "RELEASED"
	TRANSFERRED  ResourceStatus = "TRANSFERRED"
	UNCHANGED    ResourceStatus = "UNCHANGED"
	UPDATED      ResourceStatus = "UPDATED"
)

// Defines values for Rsn.
const (
	V1 Rsn = "V1"
	V2 Rsn = "V2"
)

// Defines values for SmContextType.
const (
	EPSPDNCONNECTION SmContextType = "EPS_PDN_CONNECTION"
	SMCONTEXT        SmContextType = "SM_CONTEXT"
)

// Defines values for UnavailableAccessIndication.
const (
	N3GAUNAVAILABLE  UnavailableAccessIndication = "3GA_UNAVAILABLE"
	N3GAUNAVAILABLE1 UnavailableAccessIndication = "N3GA_UNAVAILABLE"
)

// Defines values for UpCnxState.
const (
	ACTIVATED   UpCnxState = "ACTIVATED"
	ACTIVATING  UpCnxState = "ACTIVATING"
	DEACTIVATED UpCnxState = "DEACTIVATED"
	SUSPENDED   UpCnxState = "SUSPENDED"
)

// AdditionalTnlNb defines model for AdditionalTnlNb.
type AdditionalTnlNb = int

// AlternativeQosProfile defines model for AlternativeQosProfile.
type AlternativeQosProfile struct {
	GuaFbrDl             externalRef1.BitRate         `json:"guaFbrDl,omitempty"`
	GuaFbrUl             externalRef1.BitRate         `json:"guaFbrUl,omitempty"`
	Index                int                          `json:"index"`
	PacketDelayBudget    externalRef1.PacketDelBudget `json:"packetDelayBudget,omitempty"`
	PacketErrRate        externalRef1.PacketErrRate   `json:"packetErrRate,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// AnchorSmfFeatures defines model for AnchorSmfFeatures.
type AnchorSmfFeatures struct {
	PsetrSupportInd      *bool                  `json:"psetrSupportInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
type Cause string

// CnAssistedRanPara defines model for CnAssistedRanPara.
type CnAssistedRanPara struct {
	BatteryIndication          *externalRef1.BatteryIndication          `json:"batteryIndication,omitempty"`
	CommunicationDurationTime  *externalRef1.DurationSec                `json:"communicationDurationTime,omitempty"`
	PeriodicTime               *externalRef1.DurationSec                `json:"periodicTime,omitempty"`
	ScheduledCommunicationTime *externalRef1.ScheduledCommunicationTime `json:"scheduledCommunicationTime,omitempty"`
	ScheduledCommunicationType *externalRef1.ScheduledCommunicationType `json:"scheduledCommunicationType,omitempty"`

	// StationaryIndication Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
	StationaryIndication *externalRef1.StationaryIndication `json:"stationaryIndication,omitempty"`

	// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
	TrafficProfile       *externalRef1.TrafficProfile `json:"trafficProfile,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// DdnFailureSubInfo defines model for DdnFailureSubInfo.
type DdnFailureSubInfo struct {
	DddTrafficDescriptorList []externalRef1.DddTrafficDescriptor `json:"dddTrafficDescriptorList,omitempty"`
	NotifyCorrelationId      string                              `json:"notifyCorrelationId"`
	AdditionalProperties     map[string]interface{}              `json:"-"`
}

// DdnFailureSubs defines model for DdnFailureSubs.
type DdnFailureSubs struct {
	DdnFailureSubsInd      *bool                  `json:"ddnFailureSubsInd,omitempty"`
	DdnFailureSubsInfoList []DdnFailureSubInfo    `json:"ddnFailureSubsInfoList,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// DnaiInformation defines model for DnaiInformation.
type DnaiInformation struct {
	Dnai                 externalRef1.Dnai      `json:"dnai"`
	NoDnaiChangeInd      *bool                  `json:"noDnaiChangeInd,omitempty"`
	NoLocalPsaChangeInd  *bool                  `json:"noLocalPsaChangeInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DnnSelectionMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
type DnnSelectionMode string

// DrbId defines model for DrbId.
type DrbId = int

// EbiArpMapping defines model for EbiArpMapping.
type EbiArpMapping struct {
	Arp                  externalRef1.Arp       `json:"arp"`
	EpsBearerId          EpsBearerId            `json:"epsBearerId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsBearerContainer defines model for EpsBearerContainer.
type EpsBearerContainer = string

// EpsBearerContextStatus defines model for EpsBearerContextStatus.
type EpsBearerContextStatus = string

// EpsBearerId defines model for EpsBearerId.
type EpsBearerId = int

// EpsBearerInfo defines model for EpsBearerInfo.
type EpsBearerInfo struct {
	BearerLevelQoS       externalRef1.Bytes     `json:"bearerLevelQoS"`
	Ebi                  EpsBearerId            `json:"ebi"`
	PgwS8uFteid          externalRef1.Bytes     `json:"pgwS8uFteid"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsInterworkingIndication Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
type EpsInterworkingIndication string

// EpsPdnCnxContainer defines model for EpsPdnCnxContainer.
type EpsPdnCnxContainer = string

// EpsPdnCnxInfo defines model for EpsPdnCnxInfo.
type EpsPdnCnxInfo struct {
	LinkedBearerId       *EpsBearerId           `json:"linkedBearerId,omitempty"`
	PgwNodeName          *externalRef1.Bytes    `json:"pgwNodeName,omitempty"`
	PgwS8cFteid          externalRef1.Bytes     `json:"pgwS8cFteid"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExemptionInd defines model for ExemptionInd.
type ExemptionInd struct {
	DnnCongestion        *bool                  `json:"dnnCongestion,omitempty"`
	SnssaiDnnCongestion  *bool                  `json:"snssaiDnnCongestion,omitempty"`
	SnssaiOnlyCongestion *bool                  `json:"snssaiOnlyCongestion,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExtProblemDetails defines model for ExtProblemDetails.
type ExtProblemDetails struct {
	// AccessTokenError Error returned in the access token response message (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError interface{} `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   interface{}                     `json:"accessTokenRequest,omitempty"`
	Cause                *string                         `json:"cause,omitempty"`
	Detail               *string                         `json:"detail,omitempty"`
	Instance             *externalRef1.Uri               `json:"instance,omitempty"`
	InvalidParams        []externalRef1.InvalidParam     `json:"invalidParams,omitempty"`
	NrfId                *string                         `json:"nrfId,omitempty"`
	RemoteError          *bool                           `json:"remoteError,omitempty"`
	Status               int                             `json:"status,omitempty"`
	SupportedFeatures    *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	Title                *string                         `json:"title,omitempty"`
	Type                 *externalRef1.Uri               `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// ForwardingBearerContainer defines model for ForwardingBearerContainer.
type ForwardingBearerContainer = string

// GbrQosFlowInformation defines model for GbrQosFlowInformation.
type GbrQosFlowInformation struct {
	AlternativeQosProfileList *[]AlternativeQosProfile          `json:"alternativeQosProfileList,omitempty"`
	GuaFbrDl                  externalRef1.BitRate              `json:"guaFbrDl"`
	GuaFbrUl                  externalRef1.BitRate              `json:"guaFbrUl"`
	MaxFbrDl                  externalRef1.BitRate              `json:"maxFbrDl"`
	MaxFbrUl                  externalRef1.BitRate              `json:"maxFbrUl"`
	MaxPacketLossRateDl       *externalRef1.PacketLossRate      `json:"maxPacketLossRateDl,omitempty"`
	MaxPacketLossRateUl       *externalRef1.PacketLossRate      `json:"maxPacketLossRateUl,omitempty"`
	NotifControl              *externalRef1.NotificationControl `json:"notifControl,omitempty"`
	AdditionalProperties      map[string]interface{}            `json:"-"`
}

// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
type HoState string

// HsmfUpdateData defines model for HsmfUpdateData.
type HsmfUpdateData struct {
	N5gMmCauseValue        *externalRef1.N5GMmCause   `json:"5gMmCauseValue,omitempty"`
	NotifyList             []PduSessionNotifyItem     `json:"NotifyList,omitempty"`
	AddUeLocation          *externalRef1.UserLocation `json:"addUeLocation,omitempty"`
	AdditionalAnType       externalRef1.AccessType    `json:"additionalAnType,omitempty"`
	AdditionalCnTunnelInfo *TunnelInfo                `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnRequested      *bool                      `json:"alwaysOnRequested,omitempty"`
	AmfNfId                *externalRef1.NfInstanceId `json:"amfNfId,omitempty"`
	AnType                 externalRef1.AccessType    `json:"anType,omitempty"`
	AnTypeCanBeChanged     *bool                      `json:"anTypeCanBeChanged,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause                *Cause              `json:"cause,omitempty"`
	DlServingPlmnRateCtl *int                `json:"dlServingPlmnRateCtl"`
	DnaiList             []externalRef1.Dnai `json:"dnaiList,omitempty"`
	EpsBearerId          *[]EpsBearerId      `json:"epsBearerId,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	EpsInterworkingInd      *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	Guami                   *externalRef1.Guami        `json:"guami,omitempty"`
	HoPreparationIndication *bool                      `json:"hoPreparationIndication,omitempty"`
	ISmfServiceInstanceId   *string                    `json:"iSmfServiceInstanceId,omitempty"`
	IcnTunnelInfo           *TunnelInfo                `json:"icnTunnelInfo,omitempty"`
	IsmfId                  *externalRef1.NfInstanceId `json:"ismfId,omitempty"`
	IsmfPduSessionUri       *externalRef1.Uri          `json:"ismfPduSessionUri,omitempty"`
	MaNwUpgradeInd          *bool                      `json:"maNwUpgradeInd,omitempty"`

	// MaReleaseInd Possible values are
	//   - REL_MAPDU_OVER_3GPP
	//   - REL_MAPDU_OVER_N3GPP
	MaReleaseInd *MaReleaseIndication `json:"maReleaseInd,omitempty"`
	MaRequestInd *bool                `json:"maRequestInd,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`
	MoExpDataCounter                *externalRef1.MoExpDataCounter `json:"moExpDataCounter,omitempty"`
	N1SmInfoFromUe                  *externalRef1.RefToBinaryData  `json:"n1SmInfoFromUe,omitempty"`
	N4Info                          *N4Information                 `json:"n4Info,omitempty"`
	N4InfoExt1                      *N4Information                 `json:"n4InfoExt1,omitempty"`
	N4InfoExt2                      *N4Information                 `json:"n4InfoExt2,omitempty"`
	NgApCause                       *externalRef1.NgApCause        `json:"ngApCause,omitempty"`
	PauseCharging                   *bool                          `json:"pauseCharging,omitempty"`
	Pei                             externalRef1.Pei               `json:"pei,omitempty"`
	PresenceInLadn                  *externalRef1.PresenceState    `json:"presenceInLadn,omitempty"`
	PsaInfo                         []PsaInformation               `json:"psaInfo,omitempty"`
	Pti                             *ProcedureTransactionId        `json:"pti,omitempty"`
	QosFlowsNotifyList              []QosFlowNotifyItem            `json:"qosFlowsNotifyList,omitempty"`
	QosFlowsRelNotifyList           []QosFlowItem                  `json:"qosFlowsRelNotifyList,omitempty"`
	RatType                         *externalRef1.RatType          `json:"ratType,omitempty"`

	// RequestIndication Possible values are - UE_REQ_PDU_SES_MOD - UE_REQ_PDU_SES_REL - PDU_SES_MOB - NW_REQ_PDU_SES_AUTH - NW_REQ_PDU_SES_MOD - NW_REQ_PDU_SES_REL - EBI_ASSIGNMENT_REQ - REL_DUE_TO_5G_AN_REQUEST
	RequestIndication RequestIndication `json:"requestIndication"`
	RevokeEbiList     []EpsBearerId     `json:"revokeEbiList,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile  interface{}                            `json:"roamingChargingProfile,omitempty"`
	SecondaryRatUsageInfo   []externalRef1.SecondaryRatUsageInfo   `json:"secondaryRatUsageInfo,omitempty"`
	SecondaryRatUsageReport []externalRef1.SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`
	SecurityResult          *SecurityResult                        `json:"securityResult,omitempty"`
	ServingNetwork          *externalRef1.PlmnIdNid                `json:"servingNetwork,omitempty"`
	SupportedFeatures       *externalRef1.SupportedFeatures        `json:"supportedFeatures,omitempty"`
	UeLocation              *externalRef1.UserLocation             `json:"ueLocation,omitempty"`
	UeTimeZone              *externalRef1.TimeZone                 `json:"ueTimeZone,omitempty"`
	UlclBpInfo              *UlclBpInformation                     `json:"ulclBpInfo,omitempty"`

	// UnavailableAccessInd Possible values are
	//   - 3GA_UNAVAILABLE
	//   - N3GA_UNAVAILABLE
	UnavailableAccessInd *UnavailableAccessIndication  `json:"unavailableAccessInd,omitempty"`
	UnknownN1SmInfo      *externalRef1.RefToBinaryData `json:"unknownN1SmInfo,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	UpCnxState            *UpCnxState                `json:"upCnxState,omitempty"`
	UpSecurityInfo        *UpSecurityInfo            `json:"upSecurityInfo,omitempty"`
	VSmfServiceInstanceId *string                    `json:"vSmfServiceInstanceId,omitempty"`
	VcnTunnelInfo         *TunnelInfo                `json:"vcnTunnelInfo,omitempty"`
	VplmnQos              *VplmnQos                  `json:"vplmnQos,omitempty"`
	VsmfId                *externalRef1.NfInstanceId `json:"vsmfId,omitempty"`
	VsmfPduSessionUri     *externalRef1.Uri          `json:"vsmfPduSessionUri,omitempty"`
	AdditionalProperties  map[string]interface{}     `json:"-"`
}

// HsmfUpdateError defines model for HsmfUpdateError.
type HsmfUpdateError struct {
	BackOffTimer         *externalRef1.DurationSec     `json:"backOffTimer,omitempty"`
	Error                externalRef1.ProblemDetails   `json:"error"`
	N1SmInfoToUe         *externalRef1.RefToBinaryData `json:"n1SmInfoToUe,omitempty"`
	N1smCause            string                        `json:"n1smCause,omitempty"`
	Pti                  *ProcedureTransactionId       `json:"pti,omitempty"`
	RecoveryTime         *externalRef1.DateTime        `json:"recoveryTime,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// HsmfUpdatedData defines model for HsmfUpdatedData.
type HsmfUpdatedData struct {
	DnaiList           []externalRef1.Dnai `json:"dnaiList,omitempty"`
	EpsBearerInfo      []EpsBearerInfo     `json:"epsBearerInfo,omitempty"`
	EpsPdnCnxInfo      *EpsPdnCnxInfo      `json:"epsPdnCnxInfo,omitempty"`
	Ipv6MultiHomingInd *bool               `json:"ipv6MultiHomingInd,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`
	N1SmInfoToUe                    *externalRef1.RefToBinaryData  `json:"n1SmInfoToUe,omitempty"`
	N4Info                          *N4Information                 `json:"n4Info,omitempty"`
	N4InfoExt1                      *N4Information                 `json:"n4InfoExt1,omitempty"`
	N4InfoExt2                      *N4Information                 `json:"n4InfoExt2,omitempty"`
	Pti                             *ProcedureTransactionId        `json:"pti,omitempty"`
	QosFlowsSetupList               []QosFlowSetupItem             `json:"qosFlowsSetupList,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile interface{}                     `json:"roamingChargingProfile,omitempty"`
	SessionAmbr            *externalRef1.Ambr              `json:"sessionAmbr,omitempty"`
	SupportedFeatures      *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	UpSecurity             *externalRef1.UpSecurity        `json:"upSecurity,omitempty"`
	AdditionalProperties   map[string]interface{}          `json:"-"`
}

// IndirectDataForwardingTunnelInfo defines model for IndirectDataForwardingTunnelInfo.
type IndirectDataForwardingTunnelInfo struct {
	AdditionalTnlNb      AdditionalTnlNb        `json:"additionalTnlNb,omitempty"`
	DrbId                DrbId                  `json:"drbId,omitempty"`
	GtpTeid              Teid                   `json:"gtpTeid"`
	Ipv4Addr             externalRef1.Ipv4Addr  `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *externalRef1.Ipv6Addr `json:"ipv6Addr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IpAddress defines model for IpAddress.
type IpAddress struct {
	Ipv4Addr             externalRef1.Ipv4Addr    `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *externalRef1.Ipv6Addr   `json:"ipv6Addr,omitempty"`
	Ipv6Prefix           *externalRef1.Ipv6Prefix `json:"ipv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// MaReleaseIndication Possible values are
//   - REL_MAPDU_OVER_3GPP
//   - REL_MAPDU_OVER_N3GPP
type MaReleaseIndication string

// MaxIntegrityProtectedDataRate Possible values are
//   - 64_KBPS
//   - MAX_UE_RATE
type MaxIntegrityProtectedDataRate string

// MmeCapabilities defines model for MmeCapabilities.
type MmeCapabilities struct {
	EthernetSupported    *bool                  `json:"ethernetSupported,omitempty"`
	NonIpSupported       *bool                  `json:"nonIpSupported,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
type N2SmInfoType string

// N4Information defines model for N4Information.
type N4Information struct {
	N4DnaiInfo       *DnaiInformation             `json:"n4DnaiInfo,omitempty"`
	N4MessagePayload externalRef1.RefToBinaryData `json:"n4MessagePayload"`

	// N4MessageType Possible values are
	//   - PFCP_SES_EST_REQ
	//   - PFCP_SES_EST_RSP
	//   - PFCP_SES_MOD_REQ
	//   - PFCP_SES_MOD_RSP
	//   - PFCP_SES_DEL_REQ
	//   - PFCP_SES_DEL_RSP
	//   - PFCP_SES_REP_REQ
	//   - PFCP_SES_REP_RSP
	N4MessageType        N4MessageType          `json:"n4MessageType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// N4MessageType Possible values are
//   - PFCP_SES_EST_REQ
//   - PFCP_SES_EST_RSP
//   - PFCP_SES_MOD_REQ
//   - PFCP_SES_MOD_RSP
//   - PFCP_SES_DEL_REQ
//   - PFCP_SES_DEL_RSP
//   - PFCP_SES_REP_REQ
//   - PFCP_SES_REP_RSP
type N4MessageType string

// NotificationCause Possible values are - QOS_FULFILLED - QOS_NOT_FULFILLED - UP_SEC_FULFILLED - UP_SEC_NOT_FULFILLED
type NotificationCause string

// PduSessionCreateData defines model for PduSessionCreateData.
type PduSessionCreateData struct {
	AddUeLocation          *externalRef1.UserLocation  `json:"addUeLocation,omitempty"`
	AdditionalAnType       externalRef1.AccessType     `json:"additionalAnType,omitempty"`
	AdditionalCnTunnelInfo *TunnelInfo                 `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnRequested      *bool                       `json:"alwaysOnRequested,omitempty"`
	AmfNfId                *externalRef1.NfInstanceId  `json:"amfNfId,omitempty"`
	AnType                 externalRef1.AccessType     `json:"anType"`
	ApnRateStatus          *externalRef1.ApnRateStatus `json:"apnRateStatus,omitempty"`
	ChargingId             string                      `json:"chargingId,omitempty"`
	CpCiotEnabled          *bool                       `json:"cpCiotEnabled,omitempty"`
	CpOnlyInd              *bool                       `json:"cpOnlyInd,omitempty"`
	DlServingPlmnRateCtl   int                         `json:"dlServingPlmnRateCtl,omitempty"`
	DnaiList               []externalRef1.Dnai         `json:"dnaiList,omitempty"`
	Dnn                    externalRef1.Dnn            `json:"dnn"`
	EpsBearerCtxStatus     EpsBearerContextStatus      `json:"epsBearerCtxStatus,omitempty"`
	EpsBearerId            []EpsBearerId               `json:"epsBearerId,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	EpsInterworkingInd      *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	Gpsi                    externalRef1.Gpsi          `json:"gpsi,omitempty"`
	Guami                   *externalRef1.Guami        `json:"guami,omitempty"`
	HPcfId                  *externalRef1.NfInstanceId `json:"hPcfId,omitempty"`
	HoPreparationIndication *bool                      `json:"hoPreparationIndication,omitempty"`
	ISmfServiceInstanceId   *string                    `json:"iSmfServiceInstanceId,omitempty"`
	IcnTunnelInfo           *TunnelInfo                `json:"icnTunnelInfo,omitempty"`
	InvokeNef               *bool                      `json:"invokeNef,omitempty"`
	IsmfId                  *externalRef1.NfInstanceId `json:"ismfId,omitempty"`
	IsmfPduSessionUri       *externalRef1.Uri          `json:"ismfPduSessionUri,omitempty"`
	MaNwUpgradeInd          *bool                      `json:"maNwUpgradeInd,omitempty"`
	MaRequestInd            *bool                      `json:"maRequestInd,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`
	N1SmInfoFromUe                  *externalRef1.RefToBinaryData  `json:"n1SmInfoFromUe,omitempty"`
	N9ForwardingTunnelInfo          *TunnelInfo                    `json:"n9ForwardingTunnelInfo,omitempty"`
	OldPduSessionId                 *externalRef1.PduSessionId     `json:"oldPduSessionId,omitempty"`
	PcfGroupId                      *externalRef1.NfGroupId        `json:"pcfGroupId,omitempty"`
	PcfId                           *externalRef1.NfInstanceId     `json:"pcfId,omitempty"`
	PcfSetId                        *externalRef1.NfSetId          `json:"pcfSetId,omitempty"`
	PduSessionId                    *externalRef1.PduSessionId     `json:"pduSessionId,omitempty"`
	Pei                             externalRef1.Pei               `json:"pei,omitempty"`
	PgwS8cFteid                     *externalRef1.Bytes            `json:"pgwS8cFteid,omitempty"`
	PresenceInLadn                  *externalRef1.PresenceState    `json:"presenceInLadn,omitempty"`
	RatType                         *externalRef1.RatType          `json:"ratType,omitempty"`
	RecoveryTime                    *externalRef1.DateTime         `json:"recoveryTime,omitempty"`

	// RequestType Possible values are - INITIAL_REQUEST - EXISTING_PDU_SESSION - INITIAL_EMERGENCY_REQUEST - EXISTING_EMERGENCY_PDU_SESSION
	RequestType *RequestType `json:"requestType,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile interface{}                          `json:"roamingChargingProfile,omitempty"`
	RoutingIndicator       *string                              `json:"routingIndicator,omitempty"`
	SNssai                 *externalRef1.Snssai                 `json:"sNssai,omitempty"`
	SecondaryRatUsageInfo  []externalRef1.SecondaryRatUsageInfo `json:"secondaryRatUsageInfo,omitempty"`

	// SelMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
	SelMode             *DnnSelectionMode                 `json:"selMode,omitempty"`
	SelectedDnn         *externalRef1.Dnn                 `json:"selectedDnn,omitempty"`
	ServingNetwork      externalRef1.PlmnIdNid            `json:"servingNetwork"`
	SmallDataRateStatus *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	Supi                externalRef1.Supi                 `json:"supi,omitempty"`
	SupportedFeatures   *externalRef1.SupportedFeatures   `json:"supportedFeatures,omitempty"`
	UdmGroupId          *externalRef1.NfGroupId           `json:"udmGroupId,omitempty"`
	UeLocation          *externalRef1.UserLocation        `json:"ueLocation,omitempty"`
	UeTimeZone          *externalRef1.TimeZone            `json:"ueTimeZone,omitempty"`
	UnauthenticatedSupi *bool                             `json:"unauthenticatedSupi,omitempty"`
	UnknownN1SmInfo     *externalRef1.RefToBinaryData     `json:"unknownN1SmInfo,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	UpCnxState            *UpCnxState                `json:"upCnxState,omitempty"`
	UpSecurityInfo        *UpSecurityInfo            `json:"upSecurityInfo,omitempty"`
	VSmfServiceInstanceId *string                    `json:"vSmfServiceInstanceId,omitempty"`
	VcnTunnelInfo         *TunnelInfo                `json:"vcnTunnelInfo,omitempty"`
	VplmnQos              *VplmnQos                  `json:"vplmnQos,omitempty"`
	VsmfId                *externalRef1.NfInstanceId `json:"vsmfId,omitempty"`
	VsmfPduSessionUri     *externalRef1.Uri          `json:"vsmfPduSessionUri,omitempty"`
	AdditionalProperties  map[string]interface{}     `json:"-"`
}

// PduSessionCreateError defines model for PduSessionCreateError.
type PduSessionCreateError struct {
	BackOffTimer         *externalRef1.DurationSec     `json:"backOffTimer,omitempty"`
	Error                externalRef1.ProblemDetails   `json:"error"`
	N1SmInfoToUe         *externalRef1.RefToBinaryData `json:"n1SmInfoToUe,omitempty"`
	N1smCause            string                        `json:"n1smCause,omitempty"`
	RecoveryTime         *externalRef1.DateTime        `json:"recoveryTime,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// PduSessionCreatedData defines model for PduSessionCreatedData.
type PduSessionCreatedData struct {
	AdditionalCnTunnelInfo *TunnelInfo                `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnGranted        *bool                      `json:"alwaysOnGranted,omitempty"`
	CnTunnelInfo           *TunnelInfo                `json:"cnTunnelInfo,omitempty"`
	DnAaaAddress           *IpAddress                 `json:"dnAaaAddress,omitempty"`
	DnaiList               []externalRef1.Dnai        `json:"dnaiList,omitempty"`
	EnablePauseCharging    *bool                      `json:"enablePauseCharging,omitempty"`
	EpsBearerInfo          []EpsBearerInfo            `json:"epsBearerInfo,omitempty"`
	EpsPdnCnxInfo          *EpsPdnCnxInfo             `json:"epsPdnCnxInfo,omitempty"`
	Gpsi                   externalRef1.Gpsi          `json:"gpsi,omitempty"`
	HSmfInstanceId         *externalRef1.NfInstanceId `json:"hSmfInstanceId,omitempty"`
	HSmfServiceInstanceId  *string                    `json:"hSmfServiceInstanceId,omitempty"`
	HcnTunnelInfo          *TunnelInfo                `json:"hcnTunnelInfo,omitempty"`
	HomeProvidedChargingId string                     `json:"homeProvidedChargingId,omitempty"`
	Ipv6Index              *externalRef3.IpIndex      `json:"ipv6Index,omitempty"`
	Ipv6MultiHomingInd     *bool                      `json:"ipv6MultiHomingInd,omitempty"`
	MaAcceptedInd          *bool                      `json:"maAcceptedInd,omitempty"`

	// MaxIntegrityProtectedDataRate Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRate *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRate,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`
	N1SmInfoToUe                    *externalRef1.RefToBinaryData  `json:"n1SmInfoToUe,omitempty"`
	NefExtBufSupportInd             *bool                          `json:"nefExtBufSupportInd,omitempty"`
	PduSessionId                    *externalRef1.PduSessionId     `json:"pduSessionId,omitempty"`
	PduSessionType                  externalRef1.PduSessionType    `json:"pduSessionType"`
	QosFlowsSetupList               []QosFlowSetupItem             `json:"qosFlowsSetupList,omitempty"`
	RecoveryTime                    *externalRef1.DateTime         `json:"recoveryTime,omitempty"`

	// RedundantPduSessionInfo Redundant PDU Session Information
	RedundantPduSessionInfo *RedundantPduSessionInformation `json:"redundantPduSessionInfo,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile      interface{}                     `json:"roamingChargingProfile,omitempty"`
	SNssai                      *externalRef1.Snssai            `json:"sNssai,omitempty"`
	SessionAmbr                 *externalRef1.Ambr              `json:"sessionAmbr,omitempty"`
	SmallDataRateControlEnabled *bool                           `json:"smallDataRateControlEnabled,omitempty"`
	SmfInstanceId               *externalRef1.NfInstanceId      `json:"smfInstanceId,omitempty"`
	SmfServiceInstanceId        *string                         `json:"smfServiceInstanceId,omitempty"`
	SscMode                     string                          `json:"sscMode"`
	SupportedFeatures           *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	UeIpv4Address               externalRef1.Ipv4Addr           `json:"ueIpv4Address,omitempty"`
	UeIpv6InterfaceId           string                          `json:"ueIpv6InterfaceId,omitempty"`
	UeIpv6Prefix                *externalRef1.Ipv6Prefix        `json:"ueIpv6Prefix,omitempty"`
	UpSecurity                  *externalRef1.UpSecurity        `json:"upSecurity,omitempty"`
	AdditionalProperties        map[string]interface{}          `json:"-"`
}

// PduSessionNotifyItem defines model for PduSessionNotifyItem.
type PduSessionNotifyItem struct {
	// NotificationCause Possible values are - QOS_FULFILLED - QOS_NOT_FULFILLED - UP_SEC_FULFILLED - UP_SEC_NOT_FULFILLED
	NotificationCause    NotificationCause      `json:"notificationCause"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProblemDetailsAddInfo defines model for ProblemDetailsAddInfo.
type ProblemDetailsAddInfo struct {
	RemoteError          *bool                  `json:"remoteError,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProcedureTransactionId defines model for ProcedureTransactionId.
type ProcedureTransactionId = int

// ProtectionResult Possible values are
//   - PERFORMED
//   - NOT_PERFORMED
type ProtectionResult string

// PsaIndication Possible values are
//   - PSA_INSERTED
//   - PSA_REMOVED
//   - PSA_INSERTED_ONLY
//   - PSA_REMOVED_ONLY
type PsaIndication string

// PsaInformation defines model for PsaInformation.
type PsaInformation struct {
	DnaiList []externalRef1.Dnai `json:"dnaiList,omitempty"`

	// PsaInd Possible values are
	//   - PSA_INSERTED
	//   - PSA_REMOVED
	//   - PSA_INSERTED_ONLY
	//   - PSA_REMOVED_ONLY
	PsaInd               *PsaIndication             `json:"psaInd,omitempty"`
	PsaUpfId             *externalRef1.NfInstanceId `json:"psaUpfId,omitempty"`
	UeIpv6Prefix         *externalRef1.Ipv6Prefix   `json:"ueIpv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// QosFlowAccessType Possible values are
//   - 3GPP
//   - NON_3GPP
//   - 3GPP_AND_NON_3GPP
type QosFlowAccessType string

// QosFlowAddModifyRequestItem defines model for QosFlowAddModifyRequestItem.
type QosFlowAddModifyRequestItem struct {
	// AssociatedAnType Possible values are
	//   - 3GPP
	//   - NON_3GPP
	//   - 3GPP_AND_NON_3GPP
	AssociatedAnType     *QosFlowAccessType     `json:"associatedAnType,omitempty"`
	Ebi                  *EpsBearerId           `json:"ebi,omitempty"`
	Qfi                  externalRef1.Qfi       `json:"qfi"`
	QosFlowDescription   *externalRef1.Bytes    `json:"qosFlowDescription,omitempty"`
	QosFlowProfile       *QosFlowProfile        `json:"qosFlowProfile,omitempty"`
	QosRules             *externalRef1.Bytes    `json:"qosRules,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowItem defines model for QosFlowItem.
type QosFlowItem struct {
	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause                  *Cause                 `json:"cause,omitempty"`
	CurrentQosProfileIndex int                    `json:"currentQosProfileIndex,omitempty"`
	NullQoSProfileIndex    *bool                  `json:"nullQoSProfileIndex,omitempty"`
	Qfi                    externalRef1.Qfi       `json:"qfi"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// QosFlowNotifyItem defines model for QosFlowNotifyItem.
type QosFlowNotifyItem struct {
	CurrentQosProfileIndex int `json:"currentQosProfileIndex,omitempty"`

	// NotificationCause Possible values are - QOS_FULFILLED - QOS_NOT_FULFILLED - UP_SEC_FULFILLED - UP_SEC_NOT_FULFILLED
	NotificationCause    NotificationCause      `json:"notificationCause"`
	NullQoSProfileIndex  *bool                  `json:"nullQoSProfileIndex,omitempty"`
	Qfi                  externalRef1.Qfi       `json:"qfi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowProfile defines model for QosFlowProfile.
type QosFlowProfile struct {
	N5qi                  externalRef1.N5Qi                   `json:"5qi"`
	AdditionalQosFlowInfo *externalRef1.AdditionalQosFlowInfo `json:"additionalQosFlowInfo,omitempty"`
	Arp                   *externalRef1.Arp                   `json:"arp,omitempty"`
	Dynamic5Qi            *externalRef1.Dynamic5Qi            `json:"dynamic5Qi,omitempty"`
	GbrQosFlowInfo        *GbrQosFlowInformation              `json:"gbrQosFlowInfo,omitempty"`
	NonDynamic5Qi         *externalRef1.NonDynamic5Qi         `json:"nonDynamic5Qi,omitempty"`

	// QosMonitoringReq Possible values are
	//   - UL
	//   - DL
	//   - BOTH
	//   - NONE
	QosMonitoringReq     *QosMonitoringReq                    `json:"qosMonitoringReq,omitempty"`
	QosRepPeriod         *externalRef1.DurationSec            `json:"qosRepPeriod,omitempty"`
	Rqa                  *externalRef1.ReflectiveQoSAttribute `json:"rqa,omitempty"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// QosFlowReleaseRequestItem defines model for QosFlowReleaseRequestItem.
type QosFlowReleaseRequestItem struct {
	Qfi                  externalRef1.Qfi       `json:"qfi"`
	QosFlowDescription   *externalRef1.Bytes    `json:"qosFlowDescription,omitempty"`
	QosRules             *externalRef1.Bytes    `json:"qosRules,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowSetupItem defines model for QosFlowSetupItem.
type QosFlowSetupItem struct {
	// AssociatedAnType Possible values are
	//   - 3GPP
	//   - NON_3GPP
	//   - 3GPP_AND_NON_3GPP
	AssociatedAnType     *QosFlowAccessType     `json:"associatedAnType,omitempty"`
	DefaultQosRuleInd    *bool                  `json:"defaultQosRuleInd,omitempty"`
	Ebi                  *EpsBearerId           `json:"ebi,omitempty"`
	Qfi                  externalRef1.Qfi       `json:"qfi"`
	QosFlowDescription   *externalRef1.Bytes    `json:"qosFlowDescription,omitempty"`
	QosFlowProfile       *QosFlowProfile        `json:"qosFlowProfile,omitempty"`
	QosRules             externalRef1.Bytes     `json:"qosRules"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosFlowTunnel Tunnel Information per QoS Flow
type QosFlowTunnel struct {
	QfiList              []externalRef1.Qfi     `json:"qfiList"`
	TunnelInfo           TunnelInfo             `json:"tunnelInfo"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringInfo defines model for QosMonitoringInfo.
type QosMonitoringInfo struct {
	QosMonitoringInd     *bool                  `json:"qosMonitoringInd,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// QosMonitoringReq Possible values are
//   - UL
//   - DL
//   - BOTH
//   - NONE
type QosMonitoringReq string

// RedundantPduSessionInformation Redundant PDU Session Information
type RedundantPduSessionInformation struct {
	// Rsn Redundancy Sequence Number. Possible values are
	//   - V1
	//   - V2
	Rsn                  Rsn                    `json:"rsn"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReleaseData defines model for ReleaseData.
type ReleaseData struct {
	N5gMmCauseValue *externalRef1.N5GMmCause   `json:"5gMmCauseValue,omitempty"`
	AddUeLocation   *externalRef1.UserLocation `json:"addUeLocation,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause                   *Cause                                 `json:"cause,omitempty"`
	N4Info                  *N4Information                         `json:"n4Info,omitempty"`
	N4InfoExt1              *N4Information                         `json:"n4InfoExt1,omitempty"`
	N4InfoExt2              *N4Information                         `json:"n4InfoExt2,omitempty"`
	NgApCause               *externalRef1.NgApCause                `json:"ngApCause,omitempty"`
	SecondaryRatUsageInfo   []externalRef1.SecondaryRatUsageInfo   `json:"secondaryRatUsageInfo,omitempty"`
	SecondaryRatUsageReport []externalRef1.SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`
	UeLocation              *externalRef1.UserLocation             `json:"ueLocation,omitempty"`
	UeTimeZone              *externalRef1.TimeZone                 `json:"ueTimeZone,omitempty"`
	AdditionalProperties    map[string]interface{}                 `json:"-"`
}

// ReleasedData defines model for ReleasedData.
type ReleasedData struct {
	ApnRateStatus        *externalRef1.ApnRateStatus       `json:"apnRateStatus,omitempty"`
	N4Info               *N4Information                    `json:"n4Info,omitempty"`
	N4InfoExt1           *N4Information                    `json:"n4InfoExt1,omitempty"`
	N4InfoExt2           *N4Information                    `json:"n4InfoExt2,omitempty"`
	SmallDataRateStatus  *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// RequestIndication Possible values are - UE_REQ_PDU_SES_MOD - UE_REQ_PDU_SES_REL - PDU_SES_MOB - NW_REQ_PDU_SES_AUTH - NW_REQ_PDU_SES_MOD - NW_REQ_PDU_SES_REL - EBI_ASSIGNMENT_REQ - REL_DUE_TO_5G_AN_REQUEST
type RequestIndication string

// RequestType Possible values are - INITIAL_REQUEST - EXISTING_PDU_SESSION - INITIAL_EMERGENCY_REQUEST - EXISTING_EMERGENCY_PDU_SESSION
type RequestType string

// ResourceStatus Possible values are - RELEASED - UNCHANGED - TRANSFERRED - UPDATED - ALT_ANCHOR_SMF
type ResourceStatus string

// RetrieveData defines model for RetrieveData.
type RetrieveData struct {
	SmallDataRateStatusReq *bool                  `json:"smallDataRateStatusReq,omitempty"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// RetrievedData defines model for RetrievedData.
type RetrievedData struct {
	SmallDataRateStatus  *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// Rsn Redundancy Sequence Number. Possible values are
//   - V1
//   - V2
type Rsn string

// SecurityResult defines model for SecurityResult.
type SecurityResult struct {
	// ConfidentialityProtectionResult Possible values are
	//   - PERFORMED
	//   - NOT_PERFORMED
	ConfidentialityProtectionResult *ProtectionResult `json:"confidentialityProtectionResult,omitempty"`

	// IntegrityProtectionResult Possible values are
	//   - PERFORMED
	//   - NOT_PERFORMED
	IntegrityProtectionResult *ProtectionResult      `json:"integrityProtectionResult,omitempty"`
	AdditionalProperties      map[string]interface{} `json:"-"`
}

// SendMoDataReqData defines model for SendMoDataReqData.
type SendMoDataReqData struct {
	MoData               externalRef1.RefToBinaryData   `json:"moData"`
	MoExpDataCounter     *externalRef1.MoExpDataCounter `json:"moExpDataCounter,omitempty"`
	UeLocation           *externalRef1.UserLocation     `json:"ueLocation,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// SmContext defines model for SmContext.
type SmContext struct {
	AddRanTunnelInfo    []QosFlowTunnel `json:"addRanTunnelInfo,omitempty"`
	AddRedRanTunnelInfo []QosFlowTunnel `json:"addRedRanTunnelInfo,omitempty"`
	AlwaysOnGranted     *bool           `json:"alwaysOnGranted,omitempty"`
	ChargingId          string          `json:"chargingId,omitempty"`

	// ChargingInfo Original reference TS29512_Npcf_SMPolicyControl.yaml#/components/schemas/ChargingInformation
	ChargingInfo          interface{}                `json:"chargingInfo,omitempty"`
	DlsetSupportInd       *bool                      `json:"dlsetSupportInd,omitempty"`
	DnAaaAddress          *IpAddress                 `json:"dnAaaAddress,omitempty"`
	Dnn                   externalRef1.Dnn           `json:"dnn"`
	EnablePauseCharging   *bool                      `json:"enablePauseCharging,omitempty"`
	EpsBearerInfo         []EpsBearerInfo            `json:"epsBearerInfo,omitempty"`
	EpsPdnCnxInfo         *EpsPdnCnxInfo             `json:"epsPdnCnxInfo,omitempty"`
	ForwardingInd         *bool                      `json:"forwardingInd,omitempty"`
	Gpsi                  externalRef1.Gpsi          `json:"gpsi,omitempty"`
	HSmfInstanceId        *externalRef1.NfInstanceId `json:"hSmfInstanceId,omitempty"`
	HSmfServiceInstanceId *string                    `json:"hSmfServiceInstanceId,omitempty"`
	HSmfUri               *externalRef1.Uri          `json:"hSmfUri,omitempty"`
	HplmnSnssai           *externalRef1.Snssai       `json:"hplmnSnssai,omitempty"`
	Ipv6Index             *externalRef3.IpIndex      `json:"ipv6Index,omitempty"`

	// MaxIntegrityProtectedDataRate Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRate *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRate,omitempty"`

	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`
	NefExtBufSupportInd             *bool                          `json:"nefExtBufSupportInd,omitempty"`
	PcfGroupId                      *externalRef1.NfGroupId        `json:"pcfGroupId,omitempty"`
	PcfId                           *externalRef1.NfInstanceId     `json:"pcfId,omitempty"`
	PcfSetId                        *externalRef1.NfSetId          `json:"pcfSetId,omitempty"`
	PduSessionId                    externalRef1.PduSessionId      `json:"pduSessionId"`
	PduSessionRef                   *externalRef1.Uri              `json:"pduSessionRef,omitempty"`
	PduSessionSmfBinding            *externalRef0.SbiBindingLevel  `json:"pduSessionSmfBinding,omitempty"`
	PduSessionSmfServiceSetId       *externalRef1.NfServiceSetId   `json:"pduSessionSmfServiceSetId,omitempty"`
	PduSessionSmfSetId              *externalRef1.NfSetId          `json:"pduSessionSmfSetId,omitempty"`
	PduSessionType                  externalRef1.PduSessionType    `json:"pduSessionType"`
	PsaTunnelInfo                   *TunnelInfo                    `json:"psaTunnelInfo,omitempty"`
	QosFlowsList                    []QosFlowSetupItem             `json:"qosFlowsList"`

	// RanTunnelInfo Tunnel Information per QoS Flow
	RanTunnelInfo *QosFlowTunnel         `json:"ranTunnelInfo,omitempty"`
	RecoveryTime  *externalRef1.DateTime `json:"recoveryTime,omitempty"`

	// RedRanTunnelInfo Tunnel Information per QoS Flow
	RedRanTunnelInfo *QosFlowTunnel `json:"redRanTunnelInfo,omitempty"`

	// RedundantPduSessionInfo Redundant PDU Session Information
	RedundantPduSessionInfo *RedundantPduSessionInformation `json:"redundantPduSessionInfo,omitempty"`

	// RoamingChargingProfile Original reference TS32291_Nchf_ConvergedCharging.yaml#/components/schemas/RoamingChargingProfile
	RoamingChargingProfile interface{}         `json:"roamingChargingProfile,omitempty"`
	RoutingIndicator       *string             `json:"routingIndicator,omitempty"`
	SNssai                 externalRef1.Snssai `json:"sNssai"`

	// SelMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
	SelMode              *DnnSelectionMode          `json:"selMode,omitempty"`
	SelectedDnn          *externalRef1.Dnn          `json:"selectedDnn,omitempty"`
	SessionAmbr          externalRef1.Ambr          `json:"sessionAmbr"`
	SmfInstanceId        *externalRef1.NfInstanceId `json:"smfInstanceId,omitempty"`
	SmfServiceInstanceId *string                    `json:"smfServiceInstanceId,omitempty"`
	SmfUri               *externalRef1.Uri          `json:"smfUri,omitempty"`
	UdmGroupId           *externalRef1.NfGroupId    `json:"udmGroupId,omitempty"`
	UeIpv4Address        externalRef1.Ipv4Addr      `json:"ueIpv4Address,omitempty"`
	UeIpv6Prefix         *externalRef1.Ipv6Prefix   `json:"ueIpv6Prefix,omitempty"`
	UpSecurity           *externalRef1.UpSecurity   `json:"upSecurity,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// SmContextCreateData defines model for SmContextCreateData.
type SmContextCreateData struct {
	AddUeLocation        *externalRef1.UserLocation   `json:"addUeLocation,omitempty"`
	AdditionalAnType     externalRef1.AccessType      `json:"additionalAnType,omitempty"`
	AdditionalHsmfId     []externalRef1.NfInstanceId  `json:"additionalHsmfId,omitempty"`
	AdditionalHsmfUri    []externalRef1.Uri           `json:"additionalHsmfUri,omitempty"`
	AdditionalSmfId      []externalRef1.NfInstanceId  `json:"additionalSmfId,omitempty"`
	AdditionalSmfUri     []externalRef1.Uri           `json:"additionalSmfUri,omitempty"`
	AnType               externalRef1.AccessType      `json:"anType"`
	ApnRateStatus        *externalRef1.ApnRateStatus  `json:"apnRateStatus,omitempty"`
	BackupAmfInfo        []externalRef1.BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	CpCiotEnabled        *bool                        `json:"cpCiotEnabled,omitempty"`
	CpOnlyInd            *bool                        `json:"cpOnlyInd,omitempty"`
	DdnFailureSubs       *DdnFailureSubs              `json:"ddnFailureSubs,omitempty"`
	DirectForwardingFlag *bool                        `json:"directForwardingFlag,omitempty"`
	DlDataWaitingInd     *bool                        `json:"dlDataWaitingInd,omitempty"`
	Dnn                  *externalRef1.Dnn            `json:"dnn,omitempty"`
	EpsBearerCtxStatus   EpsBearerContextStatus       `json:"epsBearerCtxStatus,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	EpsInterworkingInd    *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	ExtendedNasSmTimerInd *bool                      `json:"extendedNasSmTimerInd,omitempty"`
	Gpsi                  externalRef1.Gpsi          `json:"gpsi,omitempty"`
	Guami                 *externalRef1.Guami        `json:"guami,omitempty"`
	HSmfId                *externalRef1.NfInstanceId `json:"hSmfId,omitempty"`
	HSmfUri               *externalRef1.Uri          `json:"hSmfUri,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	HoState                *HoState                      `json:"hoState,omitempty"`
	HplmnSnssai            *externalRef1.Snssai          `json:"hplmnSnssai,omitempty"`
	IndirectForwardingFlag *bool                         `json:"indirectForwardingFlag,omitempty"`
	InvokeNef              *bool                         `json:"invokeNef,omitempty"`
	MaNwUpgradeInd         *bool                         `json:"maNwUpgradeInd,omitempty"`
	MaRequestInd           *bool                         `json:"maRequestInd,omitempty"`
	N1SmMsg                *externalRef1.RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo               *externalRef1.RefToBinaryData `json:"n2SmInfo,omitempty"`
	N2SmInfoExt1           *externalRef1.RefToBinaryData `json:"n2SmInfoExt1,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`

	// N2SmInfoTypeExt1 Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoTypeExt1        *N2SmInfoType               `json:"n2SmInfoTypeExt1,omitempty"`
	NrfUri                  *externalRef1.Uri           `json:"nrfUri,omitempty"`
	OldPduSessionId         *externalRef1.PduSessionId  `json:"oldPduSessionId,omitempty"`
	OldSmContextRef         *externalRef1.Uri           `json:"oldSmContextRef,omitempty"`
	OldSmfId                *externalRef1.NfInstanceId  `json:"oldSmfId,omitempty"`
	PcfGroupId              *externalRef1.NfGroupId     `json:"pcfGroupId,omitempty"`
	PcfId                   *externalRef1.NfInstanceId  `json:"pcfId,omitempty"`
	PcfSetId                *externalRef1.NfSetId       `json:"pcfSetId,omitempty"`
	PduSessionId            *externalRef1.PduSessionId  `json:"pduSessionId,omitempty"`
	PduSessionsActivateList []externalRef1.PduSessionId `json:"pduSessionsActivateList,omitempty"`
	Pei                     externalRef1.Pei            `json:"pei,omitempty"`
	PresenceInLadn          *externalRef1.PresenceState `json:"presenceInLadn,omitempty"`
	RanUnchangedInd         *bool                       `json:"ranUnchangedInd,omitempty"`
	RatType                 *externalRef1.RatType       `json:"ratType,omitempty"`

	// RequestType Possible values are - INITIAL_REQUEST - EXISTING_PDU_SESSION - INITIAL_EMERGENCY_REQUEST - EXISTING_EMERGENCY_PDU_SESSION
	RequestType      *RequestType         `json:"requestType,omitempty"`
	RoutingIndicator *string              `json:"routingIndicator,omitempty"`
	SNssai           *externalRef1.Snssai `json:"sNssai,omitempty"`

	// SelMode Possible values are - VERIFIED - UE_DNN_NOT_VERIFIED - NW_DNN_NOT_VERIFIED
	SelMode     *DnnSelectionMode `json:"selMode,omitempty"`
	SelectedDnn *externalRef1.Dnn `json:"selectedDnn,omitempty"`

	// ServiceName Service names known to NRF
	ServiceName              *externalRef2.ServiceName         `json:"serviceName,omitempty"`
	ServingNetwork           externalRef1.PlmnIdNid            `json:"servingNetwork"`
	ServingNfId              externalRef1.NfInstanceId         `json:"servingNfId"`
	SmContextRef             *externalRef1.Uri                 `json:"smContextRef,omitempty"`
	SmContextSmfBinding      *externalRef0.SbiBindingLevel     `json:"smContextSmfBinding,omitempty"`
	SmContextSmfId           *externalRef1.NfInstanceId        `json:"smContextSmfId,omitempty"`
	SmContextSmfServiceSetId *externalRef1.NfServiceSetId      `json:"smContextSmfServiceSetId,omitempty"`
	SmContextSmfSetId        *externalRef1.NfSetId             `json:"smContextSmfSetId,omitempty"`
	SmContextStatusUri       externalRef1.Uri                  `json:"smContextStatusUri"`
	SmallDataRateStatus      *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	SmfId                    *externalRef1.NfInstanceId        `json:"smfId,omitempty"`
	SmfTransferInd           *bool                             `json:"smfTransferInd,omitempty"`
	SmfUri                   *externalRef1.Uri                 `json:"smfUri,omitempty"`
	Supi                     externalRef1.Supi                 `json:"supi,omitempty"`
	SupportedFeatures        *externalRef1.SupportedFeatures   `json:"supportedFeatures,omitempty"`
	TargetId                 *externalRef0.NgRanTargetId       `json:"targetId,omitempty"`

	// TngfInfo Infomation of the TNGF endpoints
	TngfInfo  *externalRef2.TngfInfo  `json:"tngfInfo,omitempty"`
	TraceData *externalRef1.TraceData `json:"traceData"`

	// TwifInfo Addressing information (IP addresses, FQDN) of the TWIF
	TwifInfo            *externalRef2.TwifInfo     `json:"twifInfo,omitempty"`
	UdmGroupId          *externalRef1.NfGroupId    `json:"udmGroupId,omitempty"`
	UeEpsPdnConnection  *EpsPdnCnxContainer        `json:"ueEpsPdnConnection,omitempty"`
	UeLocation          *externalRef1.UserLocation `json:"ueLocation,omitempty"`
	UeTimeZone          *externalRef1.TimeZone     `json:"ueTimeZone,omitempty"`
	UnauthenticatedSupi *bool                      `json:"unauthenticatedSupi,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`

	// WAgfInfo Information of the W-AGF end-points
	WAgfInfo             *externalRef2.WAgfInfo `json:"wAgfInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextCreateError defines model for SmContextCreateError.
type SmContextCreateError struct {
	Error    ExtProblemDetails             `json:"error"`
	N1SmMsg  *externalRef1.RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo *externalRef1.RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoType         *N2SmInfoType          `json:"n2SmInfoType,omitempty"`
	RecoveryTime         *externalRef1.DateTime `json:"recoveryTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextCreatedData defines model for SmContextCreatedData.
type SmContextCreatedData struct {
	AllocatedEbiList []EbiArpMapping   `json:"allocatedEbiList,omitempty"`
	Gpsi             externalRef1.Gpsi `json:"gpsi,omitempty"`
	HSmfUri          *externalRef1.Uri `json:"hSmfUri,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	HoState  *HoState                      `json:"hoState,omitempty"`
	N2SmInfo *externalRef1.RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoType         *N2SmInfoType                   `json:"n2SmInfoType,omitempty"`
	PduSessionId         *externalRef1.PduSessionId      `json:"pduSessionId,omitempty"`
	RecoveryTime         *externalRef1.DateTime          `json:"recoveryTime,omitempty"`
	SNssai               *externalRef1.Snssai            `json:"sNssai,omitempty"`
	SelectedOldSmfId     *externalRef1.NfInstanceId      `json:"selectedOldSmfId,omitempty"`
	SelectedSmfId        *externalRef1.NfInstanceId      `json:"selectedSmfId,omitempty"`
	SmfServiceInstanceId *string                         `json:"smfServiceInstanceId,omitempty"`
	SmfUri               *externalRef1.Uri               `json:"smfUri,omitempty"`
	SupportedFeatures    *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextReleaseData defines model for SmContextReleaseData.
type SmContextReleaseData struct {
	N5gMmCauseValue *externalRef1.N5GMmCause   `json:"5gMmCauseValue,omitempty"`
	AddUeLocation   *externalRef1.UserLocation `json:"addUeLocation,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause           *Cause                        `json:"cause,omitempty"`
	IsmfReleaseOnly *bool                         `json:"ismfReleaseOnly,omitempty"`
	N2SmInfo        *externalRef1.RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoType         *N2SmInfoType              `json:"n2SmInfoType,omitempty"`
	NgApCause            *externalRef1.NgApCause    `json:"ngApCause,omitempty"`
	UeLocation           *externalRef1.UserLocation `json:"ueLocation,omitempty"`
	UeTimeZone           *externalRef1.TimeZone     `json:"ueTimeZone,omitempty"`
	VsmfReleaseOnly      *bool                      `json:"vsmfReleaseOnly,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// SmContextReleasedData defines model for SmContextReleasedData.
type SmContextReleasedData struct {
	ApnRateStatus        *externalRef1.ApnRateStatus       `json:"apnRateStatus,omitempty"`
	SmallDataRateStatus  *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// SmContextRetrieveData defines model for SmContextRetrieveData.
type SmContextRetrieveData struct {
	NotToTransferEbiList []EpsBearerId        `json:"notToTransferEbiList,omitempty"`
	RanUnchangedInd      *bool                `json:"ranUnchangedInd,omitempty"`
	ServingNetwork       *externalRef1.PlmnId `json:"servingNetwork,omitempty"`

	// SmContextType Possible values are
	//   - EPS_PDN_CONNECTION
	//   - SM_CONTEXT
	SmContextType        *SmContextType         `json:"smContextType,omitempty"`
	TargetMmeCap         *MmeCapabilities       `json:"targetMmeCap,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextRetrievedData defines model for SmContextRetrievedData.
type SmContextRetrievedData struct {
	ApnRateStatus        *externalRef1.ApnRateStatus       `json:"apnRateStatus,omitempty"`
	DlDataWaitingInd     *bool                             `json:"dlDataWaitingInd,omitempty"`
	SmContext            *SmContext                        `json:"smContext,omitempty"`
	SmallDataRateStatus  *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	UeEpsPdnConnection   EpsPdnCnxContainer                `json:"ueEpsPdnConnection"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// SmContextStatusNotification defines model for SmContextStatusNotification.
type SmContextStatusNotification struct {
	AltAnchorSmfId                    *externalRef1.NfInstanceId        `json:"altAnchorSmfId,omitempty"`
	AltAnchorSmfUri                   *externalRef1.Uri                 `json:"altAnchorSmfUri,omitempty"`
	ApnRateStatus                     *externalRef1.ApnRateStatus       `json:"apnRateStatus,omitempty"`
	DdnFailureStatus                  *bool                             `json:"ddnFailureStatus,omitempty"`
	NewIntermediateSmfId              *externalRef1.NfInstanceId        `json:"newIntermediateSmfId,omitempty"`
	NewSmfId                          *externalRef1.NfInstanceId        `json:"newSmfId,omitempty"`
	NewSmfSetId                       *externalRef1.NfSetId             `json:"newSmfSetId,omitempty"`
	NotifyCorrelationIdsForddnFailure []string                          `json:"notifyCorrelationIdsForddnFailure,omitempty"`
	OldSmContextRef                   *externalRef1.Uri                 `json:"oldSmContextRef,omitempty"`
	OldSmfId                          *externalRef1.NfInstanceId        `json:"oldSmfId,omitempty"`
	SmallDataRateStatus               *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	StatusInfo                        StatusInfo                        `json:"statusInfo"`
	AdditionalProperties              map[string]interface{}            `json:"-"`
}

// SmContextType Possible values are
//   - EPS_PDN_CONNECTION
//   - SM_CONTEXT
type SmContextType string

// SmContextUpdateData defines model for SmContextUpdateData.
type SmContextUpdateData struct {
	N5gMmCauseValue    *externalRef1.N5GMmCause      `json:"5gMmCauseValue,omitempty"`
	AddUeLocation      *externalRef1.UserLocation    `json:"addUeLocation,omitempty"`
	AdditionalAnType   externalRef1.AccessType       `json:"additionalAnType,omitempty"`
	AnType             externalRef1.AccessType       `json:"anType,omitempty"`
	AnTypeCanBeChanged *bool                         `json:"anTypeCanBeChanged,omitempty"`
	AnTypeToReactivate externalRef1.AccessType       `json:"anTypeToReactivate,omitempty"`
	BackupAmfInfo      *[]externalRef1.BackupAmfInfo `json:"backupAmfInfo"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause          *Cause                `json:"cause,omitempty"`
	DataForwarding *bool                 `json:"dataForwarding,omitempty"`
	DdnFailureSubs *DdnFailureSubs       `json:"ddnFailureSubs,omitempty"`
	EpsBearerSetup *[]EpsBearerContainer `json:"epsBearerSetup,omitempty"`

	// EpsInterworkingInd Possible values are - NONE - WITH_N26 - WITHOUT_N26 - IWK_NON_3GPP
	EpsInterworkingInd       *EpsInterworkingIndication  `json:"epsInterworkingInd,omitempty"`
	ExemptionInd             *ExemptionInd               `json:"exemptionInd,omitempty"`
	ExtendedNasSmTimerInd    *bool                       `json:"extendedNasSmTimerInd,omitempty"`
	FailedToBeSwitched       *bool                       `json:"failedToBeSwitched,omitempty"`
	ForwardingBearerContexts []ForwardingBearerContainer `json:"forwardingBearerContexts,omitempty"`
	ForwardingFTeid          *externalRef1.Bytes         `json:"forwardingFTeid,omitempty"`
	Guami                    *externalRef1.Guami         `json:"guami,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	HoState        *HoState `json:"hoState,omitempty"`
	MaNwUpgradeInd *bool    `json:"maNwUpgradeInd,omitempty"`

	// MaReleaseInd Possible values are
	//   - REL_MAPDU_OVER_3GPP
	//   - REL_MAPDU_OVER_N3GPP
	MaReleaseInd     *MaReleaseIndication           `json:"maReleaseInd,omitempty"`
	MaRequestInd     *bool                          `json:"maRequestInd,omitempty"`
	MoExpDataCounter *externalRef1.MoExpDataCounter `json:"moExpDataCounter,omitempty"`
	N1SmMsg          *externalRef1.RefToBinaryData  `json:"n1SmMsg,omitempty"`
	N2SmInfo         *externalRef1.RefToBinaryData  `json:"n2SmInfo,omitempty"`
	N2SmInfoExt1     *externalRef1.RefToBinaryData  `json:"n2SmInfoExt1,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`

	// N2SmInfoTypeExt1 Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoTypeExt1          *N2SmInfoType                      `json:"n2SmInfoTypeExt1,omitempty"`
	N9DlForwardingTnlList     []IndirectDataForwardingTunnelInfo `json:"n9DlForwardingTnlList,omitempty"`
	N9ForwardingTunnel        *TunnelInfo                        `json:"n9ForwardingTunnel,omitempty"`
	N9UlForwardingTnlList     []IndirectDataForwardingTunnelInfo `json:"n9UlForwardingTnlList,omitempty"`
	NgApCause                 *externalRef1.NgApCause            `json:"ngApCause,omitempty"`
	Pei                       externalRef1.Pei                   `json:"pei,omitempty"`
	PresenceInLadn            *externalRef1.PresenceState        `json:"presenceInLadn,omitempty"`
	RatType                   *externalRef1.RatType              `json:"ratType,omitempty"`
	Release                   *bool                              `json:"release,omitempty"`
	RevokeEbiList             []EpsBearerId                      `json:"revokeEbiList,omitempty"`
	SNssai                    *externalRef1.Snssai               `json:"sNssai,omitempty"`
	ServingNetwork            *externalRef1.PlmnIdNid            `json:"servingNetwork,omitempty"`
	ServingNfId               *externalRef1.NfInstanceId         `json:"servingNfId,omitempty"`
	SkipN2PduSessionResRelInd *bool                              `json:"skipN2PduSessionResRelInd,omitempty"`
	SmContextStatusUri        *externalRef1.Uri                  `json:"smContextStatusUri,omitempty"`
	SupportedFeatures         *externalRef1.SupportedFeatures    `json:"supportedFeatures,omitempty"`
	TargetId                  *externalRef0.NgRanTargetId        `json:"targetId,omitempty"`
	TargetServingNfId         *externalRef1.NfInstanceId         `json:"targetServingNfId,omitempty"`
	ToBeSwitched              *bool                              `json:"toBeSwitched,omitempty"`
	TraceData                 *externalRef1.TraceData            `json:"traceData"`
	UeLocation                *externalRef1.UserLocation         `json:"ueLocation,omitempty"`
	UeTimeZone                *externalRef1.TimeZone             `json:"ueTimeZone,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextUpdateError defines model for SmContextUpdateError.
type SmContextUpdateError struct {
	Error    ExtProblemDetails             `json:"error"`
	N1SmMsg  *externalRef1.RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo *externalRef1.RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoType *N2SmInfoType          `json:"n2SmInfoType,omitempty"`
	RecoveryTime *externalRef1.DateTime `json:"recoveryTime,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmContextUpdatedData defines model for SmContextUpdatedData.
type SmContextUpdatedData struct {
	AllocatedEbiList  []EbiArpMapping    `json:"allocatedEbiList,omitempty"`
	AnchorSmfFeatures *AnchorSmfFeatures `json:"anchorSmfFeatures,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause                    *Cause                      `json:"cause,omitempty"`
	DataForwarding           *bool                       `json:"dataForwarding,omitempty"`
	EpsBearerSetup           []EpsBearerContainer        `json:"epsBearerSetup,omitempty"`
	ForwardingBearerContexts []ForwardingBearerContainer `json:"forwardingBearerContexts,omitempty"`
	ForwardingFTeid          *externalRef1.Bytes         `json:"forwardingFTeid,omitempty"`

	// HoState Possible values are - NONE - PREPARING - PREPARED - COMPLETED - CANCELLED
	HoState         *HoState                      `json:"hoState,omitempty"`
	MaAcceptedInd   *bool                         `json:"maAcceptedInd,omitempty"`
	ModifiedEbiList []EbiArpMapping               `json:"modifiedEbiList,omitempty"`
	N1SmMsg         *externalRef1.RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo        *externalRef1.RefToBinaryData `json:"n2SmInfo,omitempty"`

	// N2SmInfoType Possible values are - PDU_RES_SETUP_REQ - PDU_RES_SETUP_RSP - PDU_RES_SETUP_FAIL - PDU_RES_REL_CMD - PDU_RES_REL_RSP - PDU_RES_MOD_REQ - PDU_RES_MOD_RSP - PDU_RES_MOD_FAIL - PDU_RES_NTY - PDU_RES_NTY_REL - PDU_RES_MOD_IND - PDU_RES_MOD_CFM - PATH_SWITCH_REQ - PATH_SWITCH_SETUP_FAIL - PATH_SWITCH_REQ_ACK - PATH_SWITCH_REQ_FAIL - HANDOVER_REQUIRED - HANDOVER_CMD - HANDOVER_PREP_FAIL - HANDOVER_REQ_ACK - HANDOVER_RES_ALLOC_FAIL - SECONDARY_RAT_USAGE - PDU_RES_MOD_IND_FAIL - UE_CONTEXT_RESUME_REQ - UE_CONTEXT_RESUME_RSP - UE_CONTEXT_SUSPEND_REQ
	N2SmInfoType          *N2SmInfoType                      `json:"n2SmInfoType,omitempty"`
	N3DlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n3DlForwardingTnlList,omitempty"`
	N3UlForwardingTnlList []IndirectDataForwardingTunnelInfo `json:"n3UlForwardingTnlList,omitempty"`
	ReleaseEbiList        []EpsBearerId                      `json:"releaseEbiList,omitempty"`
	SelectedOldSmfId      *externalRef1.NfInstanceId         `json:"selectedOldSmfId,omitempty"`
	SelectedSmfId         *externalRef1.NfInstanceId         `json:"selectedSmfId,omitempty"`
	SupportedFeatures     *externalRef1.SupportedFeatures    `json:"supportedFeatures,omitempty"`

	// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
	UpCnxState           *UpCnxState            `json:"upCnxState,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// StatusInfo defines model for StatusInfo.
type StatusInfo struct {
	AnType externalRef1.AccessType `json:"anType,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause             *Cause             `json:"cause,omitempty"`
	CnAssistedRanPara *CnAssistedRanPara `json:"cnAssistedRanPara,omitempty"`

	// ResourceStatus Possible values are - RELEASED - UNCHANGED - TRANSFERRED - UPDATED - ALT_ANCHOR_SMF
	ResourceStatus       ResourceStatus         `json:"resourceStatus"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// StatusNotification defines model for StatusNotification.
type StatusNotification struct {
	ApnRateStatus        *externalRef1.ApnRateStatus       `json:"apnRateStatus,omitempty"`
	EpsPdnCnxInfo        *EpsPdnCnxInfo                    `json:"epsPdnCnxInfo,omitempty"`
	NewSmfId             *externalRef1.NfInstanceId        `json:"newSmfId,omitempty"`
	SmallDataRateStatus  *externalRef1.SmallDataRateStatus `json:"smallDataRateStatus,omitempty"`
	StatusInfo           StatusInfo                        `json:"statusInfo"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// Teid defines model for Teid.
type Teid = string

// TransferMoDataReqData defines model for TransferMoDataReqData.
type TransferMoDataReqData struct {
	MoData               externalRef1.RefToBinaryData   `json:"moData"`
	MoExpDataCounter     *externalRef1.MoExpDataCounter `json:"moExpDataCounter,omitempty"`
	UeLocation           *externalRef1.UserLocation     `json:"ueLocation,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"`
}

// TransferMtDataAddInfo defines model for TransferMtDataAddInfo.
type TransferMtDataAddInfo struct {
	MaxWaitingTime       *externalRef1.DurationSec `json:"maxWaitingTime,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// TransferMtDataError defines model for TransferMtDataError.
type TransferMtDataError struct {
	// AccessTokenError Error returned in the access token response message (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenErr)
	AccessTokenError interface{} `json:"accessTokenError,omitempty"`

	// AccessTokenRequest Contains information related to the access token request (Original reference TS29510_Nnrf_AccessToken.yaml#/components/schemas/AccessTokenReq)
	AccessTokenRequest   interface{}                     `json:"accessTokenRequest,omitempty"`
	Cause                *string                         `json:"cause,omitempty"`
	Detail               *string                         `json:"detail,omitempty"`
	Instance             *externalRef1.Uri               `json:"instance,omitempty"`
	InvalidParams        []externalRef1.InvalidParam     `json:"invalidParams,omitempty"`
	MaxWaitingTime       *externalRef1.DurationSec       `json:"maxWaitingTime,omitempty"`
	NrfId                *string                         `json:"nrfId,omitempty"`
	Status               int                             `json:"status,omitempty"`
	SupportedFeatures    *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	Title                *string                         `json:"title,omitempty"`
	Type                 *externalRef1.Uri               `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// TransferMtDataReqData defines model for TransferMtDataReqData.
type TransferMtDataReqData struct {
	MtData               externalRef1.RefToBinaryData `json:"mtData"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// TunnelInfo defines model for TunnelInfo.
type TunnelInfo struct {
	AnType               externalRef1.AccessType `json:"anType,omitempty"`
	GtpTeid              Teid                    `json:"gtpTeid"`
	Ipv4Addr             externalRef1.Ipv4Addr   `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *externalRef1.Ipv6Addr  `json:"ipv6Addr,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// UlclBpInformation defines model for UlclBpInformation.
type UlclBpInformation struct {
	UlclBpUpfId          *externalRef1.NfInstanceId `json:"ulclBpUpfId,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// UnavailableAccessIndication Possible values are
//   - 3GA_UNAVAILABLE
//   - N3GA_UNAVAILABLE
type UnavailableAccessIndication string

// UpCnxState Possible values are - ACTIVATED - DEACTIVATED - ACTIVATING - SUSPENDED
type UpCnxState string

// UpSecurityInfo defines model for UpSecurityInfo.
type UpSecurityInfo struct {
	// MaxIntegrityProtectedDataRateDl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateDl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	// MaxIntegrityProtectedDataRateUl Possible values are
	//   - 64_KBPS
	//   - MAX_UE_RATE
	MaxIntegrityProtectedDataRateUl *MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`
	SecurityResult                  *SecurityResult                `json:"securityResult,omitempty"`
	UpSecurity                      externalRef1.UpSecurity        `json:"upSecurity"`
	AdditionalProperties            map[string]interface{}         `json:"-"`
}

// VplmnQos defines model for VplmnQos.
type VplmnQos struct {
	N5qi                 *externalRef1.N5Qi     `json:"5qi,omitempty"`
	Arp                  *externalRef1.Arp      `json:"arp,omitempty"`
	GuaFbrDl             externalRef1.BitRate   `json:"guaFbrDl,omitempty"`
	GuaFbrUl             externalRef1.BitRate   `json:"guaFbrUl,omitempty"`
	MaxFbrDl             externalRef1.BitRate   `json:"maxFbrDl,omitempty"`
	MaxFbrUl             externalRef1.BitRate   `json:"maxFbrUl,omitempty"`
	SessionAmbr          *externalRef1.Ambr     `json:"sessionAmbr,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VsmfUpdateData defines model for VsmfUpdateData.
type VsmfUpdateData struct {
	AdditionalCnTunnelInfo *TunnelInfo               `json:"additionalCnTunnelInfo,omitempty"`
	AlwaysOnGranted        *bool                     `json:"alwaysOnGranted,omitempty"`
	AssignEbiList          []externalRef1.Arp        `json:"assignEbiList,omitempty"`
	BackOffTimer           *externalRef1.DurationSec `json:"backOffTimer,omitempty"`

	// Cause Possible values are - REL_DUE_TO_HO - EPS_FALLBACK - REL_DUE_TO_UP_SEC - DNN_CONGESTION - S_NSSAI_CONGESTION - REL_DUE_TO_REACTIVATION - 5G_AN_NOT_RESPONDING - REL_DUE_TO_SLICE_NOT_AVAILABLE - REL_DUE_TO_DUPLICATE_SESSION_ID - PDU_SESSION_STATUS_MISMATCH - HO_FAILURE - INSUFFICIENT_UP_RESOURCES - PDU_SESSION_HANDED_OVER - PDU_SESSION_RESUMED - CN_ASSISTED_RAN_PARAMETER_TUNING - ISMF_CONTEXT_TRANSFER - SMF_CONTEXT_TRANSFER - REL_DUE_TO_PS_TO_CS_HO - REL_DUE_TO_SUBSCRIPTION_CHANGE - HO_CANCEL - REL_DUE_TO_SLICE_NOT_AUTHORIZED - PDU_SESSION_HAND_OVER_FAILURE - DDN_FAILURE_STATUS - REL_DUE_TO_CP_ONLY_NOT_APPLICABLE - NOT_SUPPORTED_WITH_ISMF - CHANGED_ANCHOR_SMF - CHANGED_INTERMEDIATE_SMF - REL_DUE_TO_SMF_NOT_SUPPORT_PSETR
	Cause             *Cause               `json:"cause,omitempty"`
	DnaiList          *[]externalRef1.Dnai `json:"dnaiList,omitempty"`
	EpsBearerInfo     []EpsBearerInfo      `json:"epsBearerInfo,omitempty"`
	EpsPdnCnxInfo     *EpsPdnCnxInfo       `json:"epsPdnCnxInfo,omitempty"`
	HsmfPduSessionUri *externalRef1.Uri    `json:"hsmfPduSessionUri,omitempty"`
	MaAcceptedInd     *bool                `json:"maAcceptedInd,omitempty"`

	// MaReleaseInd Possible values are
	//   - REL_MAPDU_OVER_3GPP
	//   - REL_MAPDU_OVER_N3GPP
	MaReleaseInd              *MaReleaseIndication          `json:"maReleaseInd,omitempty"`
	ModifiedEbiList           []EbiArpMapping               `json:"modifiedEbiList,omitempty"`
	N1SmInfoToUe              *externalRef1.RefToBinaryData `json:"n1SmInfoToUe,omitempty"`
	N1smCause                 *string                       `json:"n1smCause,omitempty"`
	N4Info                    *N4Information                `json:"n4Info,omitempty"`
	N4InfoExt1                *N4Information                `json:"n4InfoExt1,omitempty"`
	N4InfoExt2                *N4Information                `json:"n4InfoExt2,omitempty"`
	Pti                       *ProcedureTransactionId       `json:"pti,omitempty"`
	QosFlowsAddModRequestList []QosFlowAddModifyRequestItem `json:"qosFlowsAddModRequestList,omitempty"`
	QosFlowsRelRequestList    []QosFlowReleaseRequestItem   `json:"qosFlowsRelRequestList,omitempty"`
	QosMonitoringInfo         *QosMonitoringInfo            `json:"qosMonitoringInfo,omitempty"`

	// RequestIndication Possible values are - UE_REQ_PDU_SES_MOD - UE_REQ_PDU_SES_REL - PDU_SES_MOB - NW_REQ_PDU_SES_AUTH - NW_REQ_PDU_SES_MOD - NW_REQ_PDU_SES_REL - EBI_ASSIGNMENT_REQ - REL_DUE_TO_5G_AN_REQUEST
	RequestIndication           RequestIndication               `json:"requestIndication"`
	RevokeEbiList               []EpsBearerId                   `json:"revokeEbiList,omitempty"`
	SessionAmbr                 *externalRef1.Ambr              `json:"sessionAmbr,omitempty"`
	SmallDataRateControlEnabled *bool                           `json:"smallDataRateControlEnabled,omitempty"`
	SupportedFeatures           *externalRef1.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties        map[string]interface{}          `json:"-"`
}

// VsmfUpdateError defines model for VsmfUpdateError.
type VsmfUpdateError struct {
	N5gMmCauseValue       *externalRef1.N5GMmCause      `json:"5gMmCauseValue,omitempty"`
	Error                 externalRef1.ProblemDetails   `json:"error"`
	FailedToAssignEbiList []externalRef1.Arp            `json:"failedToAssignEbiList,omitempty"`
	N1SmInfoFromUe        *externalRef1.RefToBinaryData `json:"n1SmInfoFromUe,omitempty"`
	N1smCause             string                        `json:"n1smCause,omitempty"`
	N4Info                *N4Information                `json:"n4Info,omitempty"`
	N4InfoExt1            *N4Information                `json:"n4InfoExt1,omitempty"`
	N4InfoExt2            *N4Information                `json:"n4InfoExt2,omitempty"`
	NgApCause             *externalRef1.NgApCause       `json:"ngApCause,omitempty"`
	Pti                   *ProcedureTransactionId       `json:"pti,omitempty"`
	RecoveryTime          *externalRef1.DateTime        `json:"recoveryTime,omitempty"`
	UnknownN1SmInfo       *externalRef1.RefToBinaryData `json:"unknownN1SmInfo,omitempty"`
	AdditionalProperties  map[string]interface{}        `json:"-"`
}

// VsmfUpdatedData defines model for VsmfUpdatedData.
type VsmfUpdatedData struct {
	AddUeLocation              *externalRef1.UserLocation             `json:"addUeLocation,omitempty"`
	AssignedEbiList            []EbiArpMapping                        `json:"assignedEbiList,omitempty"`
	FailedToAssignEbiList      []externalRef1.Arp                     `json:"failedToAssignEbiList,omitempty"`
	N1SmInfoFromUe             *externalRef1.RefToBinaryData          `json:"n1SmInfoFromUe,omitempty"`
	N4Info                     *N4Information                         `json:"n4Info,omitempty"`
	N4InfoExt1                 *N4Information                         `json:"n4InfoExt1,omitempty"`
	N4InfoExt2                 *N4Information                         `json:"n4InfoExt2,omitempty"`
	QosFlowsAddModList         []QosFlowItem                          `json:"qosFlowsAddModList,omitempty"`
	QosFlowsFailedtoAddModList []QosFlowItem                          `json:"qosFlowsFailedtoAddModList,omitempty"`
	QosFlowsFailedtoRelList    []QosFlowItem                          `json:"qosFlowsFailedtoRelList,omitempty"`
	QosFlowsRelList            []QosFlowItem                          `json:"qosFlowsRelList,omitempty"`
	ReleasedEbiList            []EpsBearerId                          `json:"releasedEbiList,omitempty"`
	SecondaryRatUsageInfo      []externalRef1.SecondaryRatUsageInfo   `json:"secondaryRatUsageInfo,omitempty"`
	SecondaryRatUsageReport    []externalRef1.SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`
	UeLocation                 *externalRef1.UserLocation             `json:"ueLocation,omitempty"`
	UeTimeZone                 *externalRef1.TimeZone                 `json:"ueTimeZone,omitempty"`
	UnknownN1SmInfo            *externalRef1.RefToBinaryData          `json:"unknownN1SmInfo,omitempty"`
	AdditionalProperties       map[string]interface{}                 `json:"-"`
}

// N400 defines model for 400.
type N400 = ExtProblemDetails

// N401 defines model for 401.
type N401 = ExtProblemDetails

// N403 defines model for 403.
type N403 = ExtProblemDetails

// N404 defines model for 404.
type N404 = ExtProblemDetails

// N413 defines model for 413.
type N413 = ExtProblemDetails

// N415 defines model for 415.
type N415 = ExtProblemDetails

// N429 defines model for 429.
type N429 = ExtProblemDetails

// N500 defines model for 500.
type N500 = ExtProblemDetails

// N503 defines model for 503.
type N503 = ExtProblemDetails

// HsmfUpdateErrorApplicationJSON defines model for HsmfUpdateError.
type HsmfUpdateErrorApplicationJSON = HsmfUpdateError

// HsmfUpdateErrorApplicationProblemPlusJSON defines model for HsmfUpdateError.
type HsmfUpdateErrorApplicationProblemPlusJSON = externalRef1.ProblemDetails

// PduSessionCreateErrorApplicationJSON defines model for PduSessionCreateError.
type PduSessionCreateErrorApplicationJSON = PduSessionCreateError

// PduSessionCreateErrorApplicationProblemPlusJSON defines model for PduSessionCreateError.
type PduSessionCreateErrorApplicationProblemPlusJSON = externalRef1.ProblemDetails

// VsmfUpdateErrorApplicationJSON defines model for VsmfUpdateError.
type VsmfUpdateErrorApplicationJSON = VsmfUpdateError

// VsmfUpdateErrorApplicationProblemPlusJSON defines model for VsmfUpdateError.
type VsmfUpdateErrorApplicationProblemPlusJSON = externalRef1.ProblemDetails

// VsmfUpdateResponse200 defines model for VsmfUpdateResponse200.
type VsmfUpdateResponse200 = VsmfUpdatedData

// NotifyStatusRequestBody defines model for NotifyStatusRequestBody.
type NotifyStatusRequestBody = StatusNotification

// VsmfUpdateRequestBody defines model for VsmfUpdateRequestBody.
type VsmfUpdateRequestBody = VsmfUpdateData

// PostPduSessionsMultipartBody defines parameters for PostPduSessions.
type PostPduSessionsMultipartBody struct {
	BinaryDataN1SmInfoFromUe  *openapi_types.File    `json:"binaryDataN1SmInfoFromUe,omitempty"`
	BinaryDataUnknownN1SmInfo *openapi_types.File    `json:"binaryDataUnknownN1SmInfo,omitempty"`
	JsonData                  *PduSessionCreateData  `json:"jsonData,omitempty"`
	AdditionalProperties      map[string]interface{} `json:"-"`
}

// UpdatePduSessionMultipartBody defines parameters for UpdatePduSession.
type UpdatePduSessionMultipartBody struct {
	BinaryDataN1SmInfoFromUe    *openapi_types.File    `json:"binaryDataN1SmInfoFromUe,omitempty"`
	BinaryDataN4Information     *openapi_types.File    `json:"binaryDataN4Information,omitempty"`
	BinaryDataN4InformationExt1 *openapi_types.File    `json:"binaryDataN4InformationExt1,omitempty"`
	BinaryDataN4InformationExt2 *openapi_types.File    `json:"binaryDataN4InformationExt2,omitempty"`
	BinaryDataUnknownN1SmInfo   *openapi_types.File    `json:"binaryDataUnknownN1SmInfo,omitempty"`
	JsonData                    *HsmfUpdateData        `json:"jsonData,omitempty"`
	AdditionalProperties        map[string]interface{} `json:"-"`
}

// ReleasePduSessionMultipartBody defines parameters for ReleasePduSession.
type ReleasePduSessionMultipartBody struct {
	BinaryDataN4Information     *openapi_types.File    `json:"binaryDataN4Information,omitempty"`
	BinaryDataN4InformationExt1 *openapi_types.File    `json:"binaryDataN4InformationExt1,omitempty"`
	BinaryDataN4InformationExt2 *openapi_types.File    `json:"binaryDataN4InformationExt2,omitempty"`
	JsonData                    *ReleaseData           `json:"jsonData,omitempty"`
	AdditionalProperties        map[string]interface{} `json:"-"`
}

// TransferMoDataMultipartBody defines parameters for TransferMoData.
type TransferMoDataMultipartBody struct {
	BinaryMoData         *openapi_types.File    `json:"binaryMoData,omitempty"`
	JsonData             *TransferMoDataReqData `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostSmContextsMultipartBody defines parameters for PostSmContexts.
type PostSmContextsMultipartBody struct {
	BinaryDataN1SmMessage         *openapi_types.File    `json:"binaryDataN1SmMessage,omitempty"`
	BinaryDataN2SmInformation     *openapi_types.File    `json:"binaryDataN2SmInformation,omitempty"`
	BinaryDataN2SmInformationExt1 *openapi_types.File    `json:"binaryDataN2SmInformationExt1,omitempty"`
	JsonData                      *SmContextCreateData   `json:"jsonData,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// UpdateSmContextMultipartBody defines parameters for UpdateSmContext.
type UpdateSmContextMultipartBody struct {
	BinaryDataN1SmMessage         *openapi_types.File    `json:"binaryDataN1SmMessage,omitempty"`
	BinaryDataN2SmInformation     *openapi_types.File    `json:"binaryDataN2SmInformation,omitempty"`
	BinaryDataN2SmInformationExt1 *openapi_types.File    `json:"binaryDataN2SmInformationExt1,omitempty"`
	JsonData                      *SmContextUpdateData   `json:"jsonData,omitempty"`
	AdditionalProperties          map[string]interface{} `json:"-"`
}

// ReleaseSmContextMultipartBody defines parameters for ReleaseSmContext.
type ReleaseSmContextMultipartBody struct {
	BinaryDataN2SmInformation *openapi_types.File    `json:"binaryDataN2SmInformation,omitempty"`
	JsonData                  *SmContextReleaseData  `json:"jsonData,omitempty"`
	AdditionalProperties      map[string]interface{} `json:"-"`
}

// SendMoDataMultipartBody defines parameters for SendMoData.
type SendMoDataMultipartBody struct {
	BinaryMoData         *openapi_types.File    `json:"binaryMoData,omitempty"`
	JsonData             *SendMoDataReqData     `json:"jsonData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PostPduSessionsJSONRequestBody defines body for PostPduSessions for application/json ContentType.
type PostPduSessionsJSONRequestBody = PduSessionCreateData

// PostPduSessionsMultipartRequestBody defines body for PostPduSessions for multipart/related ContentType.
type PostPduSessionsMultipartRequestBody PostPduSessionsMultipartBody

// UpdatePduSessionJSONRequestBody defines body for UpdatePduSession for application/json ContentType.
type UpdatePduSessionJSONRequestBody = HsmfUpdateData

// UpdatePduSessionMultipartRequestBody defines body for UpdatePduSession for multipart/related ContentType.
type UpdatePduSessionMultipartRequestBody UpdatePduSessionMultipartBody

// ReleasePduSessionJSONRequestBody defines body for ReleasePduSession for application/json ContentType.
type ReleasePduSessionJSONRequestBody = ReleaseData

// ReleasePduSessionMultipartRequestBody defines body for ReleasePduSession for multipart/related ContentType.
type ReleasePduSessionMultipartRequestBody ReleasePduSessionMultipartBody

// RetrievePduSessionJSONRequestBody defines body for RetrievePduSession for application/json ContentType.
type RetrievePduSessionJSONRequestBody = RetrieveData

// TransferMoDataMultipartRequestBody defines body for TransferMoData for multipart/related ContentType.
type TransferMoDataMultipartRequestBody TransferMoDataMultipartBody

// PostSmContextsMultipartRequestBody defines body for PostSmContexts for multipart/related ContentType.
type PostSmContextsMultipartRequestBody PostSmContextsMultipartBody

// UpdateSmContextJSONRequestBody defines body for UpdateSmContext for application/json ContentType.
type UpdateSmContextJSONRequestBody = SmContextUpdateData

// UpdateSmContextMultipartRequestBody defines body for UpdateSmContext for multipart/related ContentType.
type UpdateSmContextMultipartRequestBody UpdateSmContextMultipartBody

// ReleaseSmContextJSONRequestBody defines body for ReleaseSmContext for application/json ContentType.
type ReleaseSmContextJSONRequestBody = SmContextReleaseData

// ReleaseSmContextMultipartRequestBody defines body for ReleaseSmContext for multipart/related ContentType.
type ReleaseSmContextMultipartRequestBody ReleaseSmContextMultipartBody

// RetrieveSmContextJSONRequestBody defines body for RetrieveSmContext for application/json ContentType.
type RetrieveSmContextJSONRequestBody = SmContextRetrieveData

// SendMoDataMultipartRequestBody defines body for SendMoData for multipart/related ContentType.
type SendMoDataMultipartRequestBody SendMoDataMultipartBody

// Getter for additional properties for PostPduSessionsMultipartBody. Returns the specified
// element and whether it was found
func (a PostPduSessionsMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PostPduSessionsMultipartBody
func (a *PostPduSessionsMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PostPduSessionsMultipartBody to handle AdditionalProperties
func (a *PostPduSessionsMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmInfoFromUe': %w", err)
		}
		delete(object, "binaryDataN1SmInfoFromUe")
	}

	if raw, found := object["binaryDataUnknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataUnknownN1SmInfo': %w", err)
		}
		delete(object, "binaryDataUnknownN1SmInfo")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PostPduSessionsMultipartBody to handle AdditionalProperties
func (a PostPduSessionsMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmInfoFromUe != nil {
		object["binaryDataN1SmInfoFromUe"], err = json.Marshal(a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmInfoFromUe': %w", err)
		}
	}

	if a.BinaryDataUnknownN1SmInfo != nil {
		object["binaryDataUnknownN1SmInfo"], err = json.Marshal(a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataUnknownN1SmInfo': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdatePduSessionMultipartBody. Returns the specified
// element and whether it was found
func (a UpdatePduSessionMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdatePduSessionMultipartBody
func (a *UpdatePduSessionMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdatePduSessionMultipartBody to handle AdditionalProperties
func (a *UpdatePduSessionMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmInfoFromUe': %w", err)
		}
		delete(object, "binaryDataN1SmInfoFromUe")
	}

	if raw, found := object["binaryDataN4Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4Information': %w", err)
		}
		delete(object, "binaryDataN4Information")
	}

	if raw, found := object["binaryDataN4InformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt1': %w", err)
		}
		delete(object, "binaryDataN4InformationExt1")
	}

	if raw, found := object["binaryDataN4InformationExt2"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt2)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt2': %w", err)
		}
		delete(object, "binaryDataN4InformationExt2")
	}

	if raw, found := object["binaryDataUnknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataUnknownN1SmInfo': %w", err)
		}
		delete(object, "binaryDataUnknownN1SmInfo")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdatePduSessionMultipartBody to handle AdditionalProperties
func (a UpdatePduSessionMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmInfoFromUe != nil {
		object["binaryDataN1SmInfoFromUe"], err = json.Marshal(a.BinaryDataN1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmInfoFromUe': %w", err)
		}
	}

	if a.BinaryDataN4Information != nil {
		object["binaryDataN4Information"], err = json.Marshal(a.BinaryDataN4Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4Information': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt1 != nil {
		object["binaryDataN4InformationExt1"], err = json.Marshal(a.BinaryDataN4InformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt1': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt2 != nil {
		object["binaryDataN4InformationExt2"], err = json.Marshal(a.BinaryDataN4InformationExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt2': %w", err)
		}
	}

	if a.BinaryDataUnknownN1SmInfo != nil {
		object["binaryDataUnknownN1SmInfo"], err = json.Marshal(a.BinaryDataUnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataUnknownN1SmInfo': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleasePduSessionMultipartBody. Returns the specified
// element and whether it was found
func (a ReleasePduSessionMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleasePduSessionMultipartBody
func (a *ReleasePduSessionMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleasePduSessionMultipartBody to handle AdditionalProperties
func (a *ReleasePduSessionMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN4Information"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4Information)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4Information': %w", err)
		}
		delete(object, "binaryDataN4Information")
	}

	if raw, found := object["binaryDataN4InformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt1': %w", err)
		}
		delete(object, "binaryDataN4InformationExt1")
	}

	if raw, found := object["binaryDataN4InformationExt2"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN4InformationExt2)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN4InformationExt2': %w", err)
		}
		delete(object, "binaryDataN4InformationExt2")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleasePduSessionMultipartBody to handle AdditionalProperties
func (a ReleasePduSessionMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN4Information != nil {
		object["binaryDataN4Information"], err = json.Marshal(a.BinaryDataN4Information)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4Information': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt1 != nil {
		object["binaryDataN4InformationExt1"], err = json.Marshal(a.BinaryDataN4InformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt1': %w", err)
		}
	}

	if a.BinaryDataN4InformationExt2 != nil {
		object["binaryDataN4InformationExt2"], err = json.Marshal(a.BinaryDataN4InformationExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN4InformationExt2': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMoDataMultipartBody. Returns the specified
// element and whether it was found
func (a TransferMoDataMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMoDataMultipartBody
func (a *TransferMoDataMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMoDataMultipartBody to handle AdditionalProperties
func (a *TransferMoDataMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryMoData"]; found {
		err = json.Unmarshal(raw, &a.BinaryMoData)
		if err != nil {
			return fmt.Errorf("error reading 'binaryMoData': %w", err)
		}
		delete(object, "binaryMoData")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMoDataMultipartBody to handle AdditionalProperties
func (a TransferMoDataMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryMoData != nil {
		object["binaryMoData"], err = json.Marshal(a.BinaryMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryMoData': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PostSmContextsMultipartBody. Returns the specified
// element and whether it was found
func (a PostSmContextsMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PostSmContextsMultipartBody
func (a *PostSmContextsMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PostSmContextsMultipartBody to handle AdditionalProperties
func (a *PostSmContextsMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmMessage"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmMessage)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmMessage': %w", err)
		}
		delete(object, "binaryDataN1SmMessage")
	}

	if raw, found := object["binaryDataN2SmInformation"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformation)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformation': %w", err)
		}
		delete(object, "binaryDataN2SmInformation")
	}

	if raw, found := object["binaryDataN2SmInformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformationExt1': %w", err)
		}
		delete(object, "binaryDataN2SmInformationExt1")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PostSmContextsMultipartBody to handle AdditionalProperties
func (a PostSmContextsMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmMessage != nil {
		object["binaryDataN1SmMessage"], err = json.Marshal(a.BinaryDataN1SmMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmMessage': %w", err)
		}
	}

	if a.BinaryDataN2SmInformation != nil {
		object["binaryDataN2SmInformation"], err = json.Marshal(a.BinaryDataN2SmInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformation': %w", err)
		}
	}

	if a.BinaryDataN2SmInformationExt1 != nil {
		object["binaryDataN2SmInformationExt1"], err = json.Marshal(a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformationExt1': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateSmContextMultipartBody. Returns the specified
// element and whether it was found
func (a UpdateSmContextMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateSmContextMultipartBody
func (a *UpdateSmContextMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateSmContextMultipartBody to handle AdditionalProperties
func (a *UpdateSmContextMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN1SmMessage"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN1SmMessage)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN1SmMessage': %w", err)
		}
		delete(object, "binaryDataN1SmMessage")
	}

	if raw, found := object["binaryDataN2SmInformation"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformation)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformation': %w", err)
		}
		delete(object, "binaryDataN2SmInformation")
	}

	if raw, found := object["binaryDataN2SmInformationExt1"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformationExt1': %w", err)
		}
		delete(object, "binaryDataN2SmInformationExt1")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateSmContextMultipartBody to handle AdditionalProperties
func (a UpdateSmContextMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN1SmMessage != nil {
		object["binaryDataN1SmMessage"], err = json.Marshal(a.BinaryDataN1SmMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN1SmMessage': %w", err)
		}
	}

	if a.BinaryDataN2SmInformation != nil {
		object["binaryDataN2SmInformation"], err = json.Marshal(a.BinaryDataN2SmInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformation': %w", err)
		}
	}

	if a.BinaryDataN2SmInformationExt1 != nil {
		object["binaryDataN2SmInformationExt1"], err = json.Marshal(a.BinaryDataN2SmInformationExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformationExt1': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleaseSmContextMultipartBody. Returns the specified
// element and whether it was found
func (a ReleaseSmContextMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleaseSmContextMultipartBody
func (a *ReleaseSmContextMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleaseSmContextMultipartBody to handle AdditionalProperties
func (a *ReleaseSmContextMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryDataN2SmInformation"]; found {
		err = json.Unmarshal(raw, &a.BinaryDataN2SmInformation)
		if err != nil {
			return fmt.Errorf("error reading 'binaryDataN2SmInformation': %w", err)
		}
		delete(object, "binaryDataN2SmInformation")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleaseSmContextMultipartBody to handle AdditionalProperties
func (a ReleaseSmContextMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryDataN2SmInformation != nil {
		object["binaryDataN2SmInformation"], err = json.Marshal(a.BinaryDataN2SmInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryDataN2SmInformation': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SendMoDataMultipartBody. Returns the specified
// element and whether it was found
func (a SendMoDataMultipartBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SendMoDataMultipartBody
func (a *SendMoDataMultipartBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SendMoDataMultipartBody to handle AdditionalProperties
func (a *SendMoDataMultipartBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["binaryMoData"]; found {
		err = json.Unmarshal(raw, &a.BinaryMoData)
		if err != nil {
			return fmt.Errorf("error reading 'binaryMoData': %w", err)
		}
		delete(object, "binaryMoData")
	}

	if raw, found := object["jsonData"]; found {
		err = json.Unmarshal(raw, &a.JsonData)
		if err != nil {
			return fmt.Errorf("error reading 'jsonData': %w", err)
		}
		delete(object, "jsonData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SendMoDataMultipartBody to handle AdditionalProperties
func (a SendMoDataMultipartBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BinaryMoData != nil {
		object["binaryMoData"], err = json.Marshal(a.BinaryMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'binaryMoData': %w", err)
		}
	}

	if a.JsonData != nil {
		object["jsonData"], err = json.Marshal(a.JsonData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jsonData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AlternativeQosProfile. Returns the specified
// element and whether it was found
func (a AlternativeQosProfile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AlternativeQosProfile
func (a *AlternativeQosProfile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AlternativeQosProfile to handle AdditionalProperties
func (a *AlternativeQosProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["guaFbrDl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrDl': %w", err)
		}
		delete(object, "guaFbrDl")
	}

	if raw, found := object["guaFbrUl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrUl': %w", err)
		}
		delete(object, "guaFbrUl")
	}

	if raw, found := object["index"]; found {
		err = json.Unmarshal(raw, &a.Index)
		if err != nil {
			return fmt.Errorf("error reading 'index': %w", err)
		}
		delete(object, "index")
	}

	if raw, found := object["packetDelayBudget"]; found {
		err = json.Unmarshal(raw, &a.PacketDelayBudget)
		if err != nil {
			return fmt.Errorf("error reading 'packetDelayBudget': %w", err)
		}
		delete(object, "packetDelayBudget")
	}

	if raw, found := object["packetErrRate"]; found {
		err = json.Unmarshal(raw, &a.PacketErrRate)
		if err != nil {
			return fmt.Errorf("error reading 'packetErrRate': %w", err)
		}
		delete(object, "packetErrRate")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AlternativeQosProfile to handle AdditionalProperties
func (a AlternativeQosProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GuaFbrDl) != 0 {
		object["guaFbrDl"], err = json.Marshal(a.GuaFbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrDl': %w", err)
		}
	}

	if len(a.GuaFbrUl) != 0 {
		object["guaFbrUl"], err = json.Marshal(a.GuaFbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrUl': %w", err)
		}
	}

	object["index"], err = json.Marshal(a.Index)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'index': %w", err)
	}

	if a.PacketDelayBudget != 0 {
		object["packetDelayBudget"], err = json.Marshal(a.PacketDelayBudget)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packetDelayBudget': %w", err)
		}
	}

	if len(a.PacketErrRate) != 0 {
		object["packetErrRate"], err = json.Marshal(a.PacketErrRate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packetErrRate': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AnchorSmfFeatures. Returns the specified
// element and whether it was found
func (a AnchorSmfFeatures) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AnchorSmfFeatures
func (a *AnchorSmfFeatures) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AnchorSmfFeatures to handle AdditionalProperties
func (a *AnchorSmfFeatures) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["psetrSupportInd"]; found {
		err = json.Unmarshal(raw, &a.PsetrSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'psetrSupportInd': %w", err)
		}
		delete(object, "psetrSupportInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AnchorSmfFeatures to handle AdditionalProperties
func (a AnchorSmfFeatures) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PsetrSupportInd != nil {
		object["psetrSupportInd"], err = json.Marshal(a.PsetrSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psetrSupportInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CnAssistedRanPara. Returns the specified
// element and whether it was found
func (a CnAssistedRanPara) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CnAssistedRanPara
func (a *CnAssistedRanPara) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CnAssistedRanPara to handle AdditionalProperties
func (a *CnAssistedRanPara) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryIndication"]; found {
		err = json.Unmarshal(raw, &a.BatteryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'batteryIndication': %w", err)
		}
		delete(object, "batteryIndication")
	}

	if raw, found := object["communicationDurationTime"]; found {
		err = json.Unmarshal(raw, &a.CommunicationDurationTime)
		if err != nil {
			return fmt.Errorf("error reading 'communicationDurationTime': %w", err)
		}
		delete(object, "communicationDurationTime")
	}

	if raw, found := object["periodicTime"]; found {
		err = json.Unmarshal(raw, &a.PeriodicTime)
		if err != nil {
			return fmt.Errorf("error reading 'periodicTime': %w", err)
		}
		delete(object, "periodicTime")
	}

	if raw, found := object["scheduledCommunicationTime"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationTime)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationTime': %w", err)
		}
		delete(object, "scheduledCommunicationTime")
	}

	if raw, found := object["scheduledCommunicationType"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationType)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationType': %w", err)
		}
		delete(object, "scheduledCommunicationType")
	}

	if raw, found := object["stationaryIndication"]; found {
		err = json.Unmarshal(raw, &a.StationaryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'stationaryIndication': %w", err)
		}
		delete(object, "stationaryIndication")
	}

	if raw, found := object["trafficProfile"]; found {
		err = json.Unmarshal(raw, &a.TrafficProfile)
		if err != nil {
			return fmt.Errorf("error reading 'trafficProfile': %w", err)
		}
		delete(object, "trafficProfile")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CnAssistedRanPara to handle AdditionalProperties
func (a CnAssistedRanPara) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryIndication != nil {
		object["batteryIndication"], err = json.Marshal(a.BatteryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryIndication': %w", err)
		}
	}

	if a.CommunicationDurationTime != nil {
		object["communicationDurationTime"], err = json.Marshal(a.CommunicationDurationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'communicationDurationTime': %w", err)
		}
	}

	if a.PeriodicTime != nil {
		object["periodicTime"], err = json.Marshal(a.PeriodicTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicTime': %w", err)
		}
	}

	if a.ScheduledCommunicationTime != nil {
		object["scheduledCommunicationTime"], err = json.Marshal(a.ScheduledCommunicationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationTime': %w", err)
		}
	}

	if a.ScheduledCommunicationType != nil {
		object["scheduledCommunicationType"], err = json.Marshal(a.ScheduledCommunicationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationType': %w", err)
		}
	}

	if a.StationaryIndication != nil {
		object["stationaryIndication"], err = json.Marshal(a.StationaryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stationaryIndication': %w", err)
		}
	}

	if a.TrafficProfile != nil {
		object["trafficProfile"], err = json.Marshal(a.TrafficProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficProfile': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DdnFailureSubInfo. Returns the specified
// element and whether it was found
func (a DdnFailureSubInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DdnFailureSubInfo
func (a *DdnFailureSubInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DdnFailureSubInfo to handle AdditionalProperties
func (a *DdnFailureSubInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dddTrafficDescriptorList"]; found {
		err = json.Unmarshal(raw, &a.DddTrafficDescriptorList)
		if err != nil {
			return fmt.Errorf("error reading 'dddTrafficDescriptorList': %w", err)
		}
		delete(object, "dddTrafficDescriptorList")
	}

	if raw, found := object["notifyCorrelationId"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationId)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationId': %w", err)
		}
		delete(object, "notifyCorrelationId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DdnFailureSubInfo to handle AdditionalProperties
func (a DdnFailureSubInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DddTrafficDescriptorList) != 0 {
		object["dddTrafficDescriptorList"], err = json.Marshal(a.DddTrafficDescriptorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dddTrafficDescriptorList': %w", err)
		}
	}

	object["notifyCorrelationId"], err = json.Marshal(a.NotifyCorrelationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyCorrelationId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DdnFailureSubs. Returns the specified
// element and whether it was found
func (a DdnFailureSubs) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DdnFailureSubs
func (a *DdnFailureSubs) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DdnFailureSubs to handle AdditionalProperties
func (a *DdnFailureSubs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ddnFailureSubsInd"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubsInd)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubsInd': %w", err)
		}
		delete(object, "ddnFailureSubsInd")
	}

	if raw, found := object["ddnFailureSubsInfoList"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubsInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubsInfoList': %w", err)
		}
		delete(object, "ddnFailureSubsInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DdnFailureSubs to handle AdditionalProperties
func (a DdnFailureSubs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DdnFailureSubsInd != nil {
		object["ddnFailureSubsInd"], err = json.Marshal(a.DdnFailureSubsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubsInd': %w", err)
		}
	}

	if len(a.DdnFailureSubsInfoList) != 0 {
		object["ddnFailureSubsInfoList"], err = json.Marshal(a.DdnFailureSubsInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubsInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnaiInformation. Returns the specified
// element and whether it was found
func (a DnaiInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnaiInformation
func (a *DnaiInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnaiInformation to handle AdditionalProperties
func (a *DnaiInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnai"]; found {
		err = json.Unmarshal(raw, &a.Dnai)
		if err != nil {
			return fmt.Errorf("error reading 'dnai': %w", err)
		}
		delete(object, "dnai")
	}

	if raw, found := object["noDnaiChangeInd"]; found {
		err = json.Unmarshal(raw, &a.NoDnaiChangeInd)
		if err != nil {
			return fmt.Errorf("error reading 'noDnaiChangeInd': %w", err)
		}
		delete(object, "noDnaiChangeInd")
	}

	if raw, found := object["noLocalPsaChangeInd"]; found {
		err = json.Unmarshal(raw, &a.NoLocalPsaChangeInd)
		if err != nil {
			return fmt.Errorf("error reading 'noLocalPsaChangeInd': %w", err)
		}
		delete(object, "noLocalPsaChangeInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnaiInformation to handle AdditionalProperties
func (a DnaiInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnai"], err = json.Marshal(a.Dnai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnai': %w", err)
	}

	if a.NoDnaiChangeInd != nil {
		object["noDnaiChangeInd"], err = json.Marshal(a.NoDnaiChangeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noDnaiChangeInd': %w", err)
		}
	}

	if a.NoLocalPsaChangeInd != nil {
		object["noLocalPsaChangeInd"], err = json.Marshal(a.NoLocalPsaChangeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noLocalPsaChangeInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EbiArpMapping. Returns the specified
// element and whether it was found
func (a EbiArpMapping) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EbiArpMapping
func (a *EbiArpMapping) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EbiArpMapping to handle AdditionalProperties
func (a *EbiArpMapping) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["epsBearerId"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerId': %w", err)
		}
		delete(object, "epsBearerId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EbiArpMapping to handle AdditionalProperties
func (a EbiArpMapping) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["arp"], err = json.Marshal(a.Arp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'arp': %w", err)
	}

	object["epsBearerId"], err = json.Marshal(a.EpsBearerId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'epsBearerId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsBearerInfo. Returns the specified
// element and whether it was found
func (a EpsBearerInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsBearerInfo
func (a *EpsBearerInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsBearerInfo to handle AdditionalProperties
func (a *EpsBearerInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bearerLevelQoS"]; found {
		err = json.Unmarshal(raw, &a.BearerLevelQoS)
		if err != nil {
			return fmt.Errorf("error reading 'bearerLevelQoS': %w", err)
		}
		delete(object, "bearerLevelQoS")
	}

	if raw, found := object["ebi"]; found {
		err = json.Unmarshal(raw, &a.Ebi)
		if err != nil {
			return fmt.Errorf("error reading 'ebi': %w", err)
		}
		delete(object, "ebi")
	}

	if raw, found := object["pgwS8uFteid"]; found {
		err = json.Unmarshal(raw, &a.PgwS8uFteid)
		if err != nil {
			return fmt.Errorf("error reading 'pgwS8uFteid': %w", err)
		}
		delete(object, "pgwS8uFteid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsBearerInfo to handle AdditionalProperties
func (a EpsBearerInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bearerLevelQoS"], err = json.Marshal(a.BearerLevelQoS)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bearerLevelQoS': %w", err)
	}

	object["ebi"], err = json.Marshal(a.Ebi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ebi': %w", err)
	}

	object["pgwS8uFteid"], err = json.Marshal(a.PgwS8uFteid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwS8uFteid': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsPdnCnxInfo. Returns the specified
// element and whether it was found
func (a EpsPdnCnxInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsPdnCnxInfo
func (a *EpsPdnCnxInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsPdnCnxInfo to handle AdditionalProperties
func (a *EpsPdnCnxInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["linkedBearerId"]; found {
		err = json.Unmarshal(raw, &a.LinkedBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'linkedBearerId': %w", err)
		}
		delete(object, "linkedBearerId")
	}

	if raw, found := object["pgwNodeName"]; found {
		err = json.Unmarshal(raw, &a.PgwNodeName)
		if err != nil {
			return fmt.Errorf("error reading 'pgwNodeName': %w", err)
		}
		delete(object, "pgwNodeName")
	}

	if raw, found := object["pgwS8cFteid"]; found {
		err = json.Unmarshal(raw, &a.PgwS8cFteid)
		if err != nil {
			return fmt.Errorf("error reading 'pgwS8cFteid': %w", err)
		}
		delete(object, "pgwS8cFteid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsPdnCnxInfo to handle AdditionalProperties
func (a EpsPdnCnxInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.LinkedBearerId != nil {
		object["linkedBearerId"], err = json.Marshal(a.LinkedBearerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'linkedBearerId': %w", err)
		}
	}

	if a.PgwNodeName != nil {
		object["pgwNodeName"], err = json.Marshal(a.PgwNodeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwNodeName': %w", err)
		}
	}

	object["pgwS8cFteid"], err = json.Marshal(a.PgwS8cFteid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwS8cFteid': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExemptionInd. Returns the specified
// element and whether it was found
func (a ExemptionInd) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExemptionInd
func (a *ExemptionInd) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExemptionInd to handle AdditionalProperties
func (a *ExemptionInd) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnCongestion"]; found {
		err = json.Unmarshal(raw, &a.DnnCongestion)
		if err != nil {
			return fmt.Errorf("error reading 'dnnCongestion': %w", err)
		}
		delete(object, "dnnCongestion")
	}

	if raw, found := object["snssaiDnnCongestion"]; found {
		err = json.Unmarshal(raw, &a.SnssaiDnnCongestion)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiDnnCongestion': %w", err)
		}
		delete(object, "snssaiDnnCongestion")
	}

	if raw, found := object["snssaiOnlyCongestion"]; found {
		err = json.Unmarshal(raw, &a.SnssaiOnlyCongestion)
		if err != nil {
			return fmt.Errorf("error reading 'snssaiOnlyCongestion': %w", err)
		}
		delete(object, "snssaiOnlyCongestion")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExemptionInd to handle AdditionalProperties
func (a ExemptionInd) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DnnCongestion != nil {
		object["dnnCongestion"], err = json.Marshal(a.DnnCongestion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnCongestion': %w", err)
		}
	}

	if a.SnssaiDnnCongestion != nil {
		object["snssaiDnnCongestion"], err = json.Marshal(a.SnssaiDnnCongestion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiDnnCongestion': %w", err)
		}
	}

	if a.SnssaiOnlyCongestion != nil {
		object["snssaiOnlyCongestion"], err = json.Marshal(a.SnssaiOnlyCongestion)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssaiOnlyCongestion': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtProblemDetails. Returns the specified
// element and whether it was found
func (a ExtProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtProblemDetails
func (a *ExtProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtProblemDetails to handle AdditionalProperties
func (a *ExtProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["remoteError"]; found {
		err = json.Unmarshal(raw, &a.RemoteError)
		if err != nil {
			return fmt.Errorf("error reading 'remoteError': %w", err)
		}
		delete(object, "remoteError")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtProblemDetails to handle AdditionalProperties
func (a ExtProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.RemoteError != nil {
		object["remoteError"], err = json.Marshal(a.RemoteError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remoteError': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GbrQosFlowInformation. Returns the specified
// element and whether it was found
func (a GbrQosFlowInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GbrQosFlowInformation
func (a *GbrQosFlowInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GbrQosFlowInformation to handle AdditionalProperties
func (a *GbrQosFlowInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["alternativeQosProfileList"]; found {
		err = json.Unmarshal(raw, &a.AlternativeQosProfileList)
		if err != nil {
			return fmt.Errorf("error reading 'alternativeQosProfileList': %w", err)
		}
		delete(object, "alternativeQosProfileList")
	}

	if raw, found := object["guaFbrDl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrDl': %w", err)
		}
		delete(object, "guaFbrDl")
	}

	if raw, found := object["guaFbrUl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrUl': %w", err)
		}
		delete(object, "guaFbrUl")
	}

	if raw, found := object["maxFbrDl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrDl': %w", err)
		}
		delete(object, "maxFbrDl")
	}

	if raw, found := object["maxFbrUl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrUl': %w", err)
		}
		delete(object, "maxFbrUl")
	}

	if raw, found := object["maxPacketLossRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateDl': %w", err)
		}
		delete(object, "maxPacketLossRateDl")
	}

	if raw, found := object["maxPacketLossRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxPacketLossRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxPacketLossRateUl': %w", err)
		}
		delete(object, "maxPacketLossRateUl")
	}

	if raw, found := object["notifControl"]; found {
		err = json.Unmarshal(raw, &a.NotifControl)
		if err != nil {
			return fmt.Errorf("error reading 'notifControl': %w", err)
		}
		delete(object, "notifControl")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GbrQosFlowInformation to handle AdditionalProperties
func (a GbrQosFlowInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AlternativeQosProfileList != nil {
		object["alternativeQosProfileList"], err = json.Marshal(a.AlternativeQosProfileList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alternativeQosProfileList': %w", err)
		}
	}

	object["guaFbrDl"], err = json.Marshal(a.GuaFbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guaFbrDl': %w", err)
	}

	object["guaFbrUl"], err = json.Marshal(a.GuaFbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guaFbrUl': %w", err)
	}

	object["maxFbrDl"], err = json.Marshal(a.MaxFbrDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxFbrDl': %w", err)
	}

	object["maxFbrUl"], err = json.Marshal(a.MaxFbrUl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maxFbrUl': %w", err)
	}

	if a.MaxPacketLossRateDl != nil {
		object["maxPacketLossRateDl"], err = json.Marshal(a.MaxPacketLossRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxPacketLossRateDl': %w", err)
		}
	}

	if a.MaxPacketLossRateUl != nil {
		object["maxPacketLossRateUl"], err = json.Marshal(a.MaxPacketLossRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxPacketLossRateUl': %w", err)
		}
	}

	if a.NotifControl != nil {
		object["notifControl"], err = json.Marshal(a.NotifControl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifControl': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HsmfUpdateData. Returns the specified
// element and whether it was found
func (a HsmfUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HsmfUpdateData
func (a *HsmfUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HsmfUpdateData to handle AdditionalProperties
func (a *HsmfUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["NotifyList"]; found {
		err = json.Unmarshal(raw, &a.NotifyList)
		if err != nil {
			return fmt.Errorf("error reading 'NotifyList': %w", err)
		}
		delete(object, "NotifyList")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnRequested"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnRequested)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnRequested': %w", err)
		}
		delete(object, "alwaysOnRequested")
	}

	if raw, found := object["amfNfId"]; found {
		err = json.Unmarshal(raw, &a.AmfNfId)
		if err != nil {
			return fmt.Errorf("error reading 'amfNfId': %w", err)
		}
		delete(object, "amfNfId")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["anTypeCanBeChanged"]; found {
		err = json.Unmarshal(raw, &a.AnTypeCanBeChanged)
		if err != nil {
			return fmt.Errorf("error reading 'anTypeCanBeChanged': %w", err)
		}
		delete(object, "anTypeCanBeChanged")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dlServingPlmnRateCtl"]; found {
		err = json.Unmarshal(raw, &a.DlServingPlmnRateCtl)
		if err != nil {
			return fmt.Errorf("error reading 'dlServingPlmnRateCtl': %w", err)
		}
		delete(object, "dlServingPlmnRateCtl")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["epsBearerId"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerId': %w", err)
		}
		delete(object, "epsBearerId")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hoPreparationIndication"]; found {
		err = json.Unmarshal(raw, &a.HoPreparationIndication)
		if err != nil {
			return fmt.Errorf("error reading 'hoPreparationIndication': %w", err)
		}
		delete(object, "hoPreparationIndication")
	}

	if raw, found := object["iSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ISmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'iSmfServiceInstanceId': %w", err)
		}
		delete(object, "iSmfServiceInstanceId")
	}

	if raw, found := object["icnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.IcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'icnTunnelInfo': %w", err)
		}
		delete(object, "icnTunnelInfo")
	}

	if raw, found := object["ismfId"]; found {
		err = json.Unmarshal(raw, &a.IsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'ismfId': %w", err)
		}
		delete(object, "ismfId")
	}

	if raw, found := object["ismfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.IsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'ismfPduSessionUri': %w", err)
		}
		delete(object, "ismfPduSessionUri")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maReleaseInd"]; found {
		err = json.Unmarshal(raw, &a.MaReleaseInd)
		if err != nil {
			return fmt.Errorf("error reading 'maReleaseInd': %w", err)
		}
		delete(object, "maReleaseInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["pauseCharging"]; found {
		err = json.Unmarshal(raw, &a.PauseCharging)
		if err != nil {
			return fmt.Errorf("error reading 'pauseCharging': %w", err)
		}
		delete(object, "pauseCharging")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["psaInfo"]; found {
		err = json.Unmarshal(raw, &a.PsaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'psaInfo': %w", err)
		}
		delete(object, "psaInfo")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["qosFlowsNotifyList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsNotifyList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsNotifyList': %w", err)
		}
		delete(object, "qosFlowsNotifyList")
	}

	if raw, found := object["qosFlowsRelNotifyList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsRelNotifyList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsRelNotifyList': %w", err)
		}
		delete(object, "qosFlowsRelNotifyList")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["requestIndication"]; found {
		err = json.Unmarshal(raw, &a.RequestIndication)
		if err != nil {
			return fmt.Errorf("error reading 'requestIndication': %w", err)
		}
		delete(object, "requestIndication")
	}

	if raw, found := object["revokeEbiList"]; found {
		err = json.Unmarshal(raw, &a.RevokeEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'revokeEbiList': %w", err)
		}
		delete(object, "revokeEbiList")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["secondaryRatUsageReport"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageReport)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageReport': %w", err)
		}
		delete(object, "secondaryRatUsageReport")
	}

	if raw, found := object["securityResult"]; found {
		err = json.Unmarshal(raw, &a.SecurityResult)
		if err != nil {
			return fmt.Errorf("error reading 'securityResult': %w", err)
		}
		delete(object, "securityResult")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["ulclBpInfo"]; found {
		err = json.Unmarshal(raw, &a.UlclBpInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ulclBpInfo': %w", err)
		}
		delete(object, "ulclBpInfo")
	}

	if raw, found := object["unavailableAccessInd"]; found {
		err = json.Unmarshal(raw, &a.UnavailableAccessInd)
		if err != nil {
			return fmt.Errorf("error reading 'unavailableAccessInd': %w", err)
		}
		delete(object, "unavailableAccessInd")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if raw, found := object["upSecurityInfo"]; found {
		err = json.Unmarshal(raw, &a.UpSecurityInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurityInfo': %w", err)
		}
		delete(object, "upSecurityInfo")
	}

	if raw, found := object["vSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.VSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'vSmfServiceInstanceId': %w", err)
		}
		delete(object, "vSmfServiceInstanceId")
	}

	if raw, found := object["vcnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.VcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'vcnTunnelInfo': %w", err)
		}
		delete(object, "vcnTunnelInfo")
	}

	if raw, found := object["vplmnQos"]; found {
		err = json.Unmarshal(raw, &a.VplmnQos)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnQos': %w", err)
		}
		delete(object, "vplmnQos")
	}

	if raw, found := object["vsmfId"]; found {
		err = json.Unmarshal(raw, &a.VsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfId': %w", err)
		}
		delete(object, "vsmfId")
	}

	if raw, found := object["vsmfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.VsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfPduSessionUri': %w", err)
		}
		delete(object, "vsmfPduSessionUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HsmfUpdateData to handle AdditionalProperties
func (a HsmfUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if len(a.NotifyList) != 0 {
		object["NotifyList"], err = json.Marshal(a.NotifyList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'NotifyList': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnRequested != nil {
		object["alwaysOnRequested"], err = json.Marshal(a.AlwaysOnRequested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnRequested': %w", err)
		}
	}

	if a.AmfNfId != nil {
		object["amfNfId"], err = json.Marshal(a.AmfNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNfId': %w", err)
		}
	}

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	if a.AnTypeCanBeChanged != nil {
		object["anTypeCanBeChanged"], err = json.Marshal(a.AnTypeCanBeChanged)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anTypeCanBeChanged': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	object["dlServingPlmnRateCtl"], err = json.Marshal(a.DlServingPlmnRateCtl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dlServingPlmnRateCtl': %w", err)
	}

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if a.EpsBearerId != nil {
		object["epsBearerId"], err = json.Marshal(a.EpsBearerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerId': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HoPreparationIndication != nil {
		object["hoPreparationIndication"], err = json.Marshal(a.HoPreparationIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoPreparationIndication': %w", err)
		}
	}

	if a.ISmfServiceInstanceId != nil {
		object["iSmfServiceInstanceId"], err = json.Marshal(a.ISmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iSmfServiceInstanceId': %w", err)
		}
	}

	if a.IcnTunnelInfo != nil {
		object["icnTunnelInfo"], err = json.Marshal(a.IcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'icnTunnelInfo': %w", err)
		}
	}

	if a.IsmfId != nil {
		object["ismfId"], err = json.Marshal(a.IsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfId': %w", err)
		}
	}

	if a.IsmfPduSessionUri != nil {
		object["ismfPduSessionUri"], err = json.Marshal(a.IsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfPduSessionUri': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaReleaseInd != nil {
		object["maReleaseInd"], err = json.Marshal(a.MaReleaseInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maReleaseInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if a.PauseCharging != nil {
		object["pauseCharging"], err = json.Marshal(a.PauseCharging)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pauseCharging': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if len(a.PsaInfo) != 0 {
		object["psaInfo"], err = json.Marshal(a.PsaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaInfo': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if len(a.QosFlowsNotifyList) != 0 {
		object["qosFlowsNotifyList"], err = json.Marshal(a.QosFlowsNotifyList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsNotifyList': %w", err)
		}
	}

	if len(a.QosFlowsRelNotifyList) != 0 {
		object["qosFlowsRelNotifyList"], err = json.Marshal(a.QosFlowsRelNotifyList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsRelNotifyList': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	object["requestIndication"], err = json.Marshal(a.RequestIndication)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'requestIndication': %w", err)
	}

	if len(a.RevokeEbiList) != 0 {
		object["revokeEbiList"], err = json.Marshal(a.RevokeEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'revokeEbiList': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if len(a.SecondaryRatUsageReport) != 0 {
		object["secondaryRatUsageReport"], err = json.Marshal(a.SecondaryRatUsageReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageReport': %w", err)
		}
	}

	if a.SecurityResult != nil {
		object["securityResult"], err = json.Marshal(a.SecurityResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'securityResult': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UlclBpInfo != nil {
		object["ulclBpInfo"], err = json.Marshal(a.UlclBpInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulclBpInfo': %w", err)
		}
	}

	if a.UnavailableAccessInd != nil {
		object["unavailableAccessInd"], err = json.Marshal(a.UnavailableAccessInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unavailableAccessInd': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	if a.UpSecurityInfo != nil {
		object["upSecurityInfo"], err = json.Marshal(a.UpSecurityInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurityInfo': %w", err)
		}
	}

	if a.VSmfServiceInstanceId != nil {
		object["vSmfServiceInstanceId"], err = json.Marshal(a.VSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vSmfServiceInstanceId': %w", err)
		}
	}

	if a.VcnTunnelInfo != nil {
		object["vcnTunnelInfo"], err = json.Marshal(a.VcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vcnTunnelInfo': %w", err)
		}
	}

	if a.VplmnQos != nil {
		object["vplmnQos"], err = json.Marshal(a.VplmnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vplmnQos': %w", err)
		}
	}

	if a.VsmfId != nil {
		object["vsmfId"], err = json.Marshal(a.VsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfId': %w", err)
		}
	}

	if a.VsmfPduSessionUri != nil {
		object["vsmfPduSessionUri"], err = json.Marshal(a.VsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfPduSessionUri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HsmfUpdateError. Returns the specified
// element and whether it was found
func (a HsmfUpdateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HsmfUpdateError
func (a *HsmfUpdateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HsmfUpdateError to handle AdditionalProperties
func (a *HsmfUpdateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backOffTimer"]; found {
		err = json.Unmarshal(raw, &a.BackOffTimer)
		if err != nil {
			return fmt.Errorf("error reading 'backOffTimer': %w", err)
		}
		delete(object, "backOffTimer")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HsmfUpdateError to handle AdditionalProperties
func (a HsmfUpdateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackOffTimer != nil {
		object["backOffTimer"], err = json.Marshal(a.BackOffTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backOffTimer': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if len(a.N1smCause) != 0 {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HsmfUpdatedData. Returns the specified
// element and whether it was found
func (a HsmfUpdatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HsmfUpdatedData
func (a *HsmfUpdatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HsmfUpdatedData to handle AdditionalProperties
func (a *HsmfUpdatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["ipv6MultiHomingInd"]; found {
		err = json.Unmarshal(raw, &a.Ipv6MultiHomingInd)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6MultiHomingInd': %w", err)
		}
		delete(object, "ipv6MultiHomingInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["qosFlowsSetupList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsSetupList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsSetupList': %w", err)
		}
		delete(object, "qosFlowsSetupList")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HsmfUpdatedData to handle AdditionalProperties
func (a HsmfUpdatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.Ipv6MultiHomingInd != nil {
		object["ipv6MultiHomingInd"], err = json.Marshal(a.Ipv6MultiHomingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6MultiHomingInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if len(a.QosFlowsSetupList) != 0 {
		object["qosFlowsSetupList"], err = json.Marshal(a.QosFlowsSetupList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsSetupList': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IndirectDataForwardingTunnelInfo. Returns the specified
// element and whether it was found
func (a IndirectDataForwardingTunnelInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IndirectDataForwardingTunnelInfo
func (a *IndirectDataForwardingTunnelInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IndirectDataForwardingTunnelInfo to handle AdditionalProperties
func (a *IndirectDataForwardingTunnelInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalTnlNb"]; found {
		err = json.Unmarshal(raw, &a.AdditionalTnlNb)
		if err != nil {
			return fmt.Errorf("error reading 'additionalTnlNb': %w", err)
		}
		delete(object, "additionalTnlNb")
	}

	if raw, found := object["drbId"]; found {
		err = json.Unmarshal(raw, &a.DrbId)
		if err != nil {
			return fmt.Errorf("error reading 'drbId': %w", err)
		}
		delete(object, "drbId")
	}

	if raw, found := object["gtpTeid"]; found {
		err = json.Unmarshal(raw, &a.GtpTeid)
		if err != nil {
			return fmt.Errorf("error reading 'gtpTeid': %w", err)
		}
		delete(object, "gtpTeid")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IndirectDataForwardingTunnelInfo to handle AdditionalProperties
func (a IndirectDataForwardingTunnelInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalTnlNb != 0 {
		object["additionalTnlNb"], err = json.Marshal(a.AdditionalTnlNb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalTnlNb': %w", err)
		}
	}

	if a.DrbId != 0 {
		object["drbId"], err = json.Marshal(a.DrbId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'drbId': %w", err)
		}
	}

	object["gtpTeid"], err = json.Marshal(a.GtpTeid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gtpTeid': %w", err)
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpAddress. Returns the specified
// element and whether it was found
func (a IpAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpAddress
func (a *IpAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpAddress to handle AdditionalProperties
func (a *IpAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpAddress to handle AdditionalProperties
func (a IpAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if a.Ipv6Prefix != nil {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MmeCapabilities. Returns the specified
// element and whether it was found
func (a MmeCapabilities) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MmeCapabilities
func (a *MmeCapabilities) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MmeCapabilities to handle AdditionalProperties
func (a *MmeCapabilities) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ethernetSupported"]; found {
		err = json.Unmarshal(raw, &a.EthernetSupported)
		if err != nil {
			return fmt.Errorf("error reading 'ethernetSupported': %w", err)
		}
		delete(object, "ethernetSupported")
	}

	if raw, found := object["nonIpSupported"]; found {
		err = json.Unmarshal(raw, &a.NonIpSupported)
		if err != nil {
			return fmt.Errorf("error reading 'nonIpSupported': %w", err)
		}
		delete(object, "nonIpSupported")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MmeCapabilities to handle AdditionalProperties
func (a MmeCapabilities) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EthernetSupported != nil {
		object["ethernetSupported"], err = json.Marshal(a.EthernetSupported)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethernetSupported': %w", err)
		}
	}

	if a.NonIpSupported != nil {
		object["nonIpSupported"], err = json.Marshal(a.NonIpSupported)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nonIpSupported': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N4Information. Returns the specified
// element and whether it was found
func (a N4Information) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N4Information
func (a *N4Information) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N4Information to handle AdditionalProperties
func (a *N4Information) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["n4DnaiInfo"]; found {
		err = json.Unmarshal(raw, &a.N4DnaiInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n4DnaiInfo': %w", err)
		}
		delete(object, "n4DnaiInfo")
	}

	if raw, found := object["n4MessagePayload"]; found {
		err = json.Unmarshal(raw, &a.N4MessagePayload)
		if err != nil {
			return fmt.Errorf("error reading 'n4MessagePayload': %w", err)
		}
		delete(object, "n4MessagePayload")
	}

	if raw, found := object["n4MessageType"]; found {
		err = json.Unmarshal(raw, &a.N4MessageType)
		if err != nil {
			return fmt.Errorf("error reading 'n4MessageType': %w", err)
		}
		delete(object, "n4MessageType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N4Information to handle AdditionalProperties
func (a N4Information) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N4DnaiInfo != nil {
		object["n4DnaiInfo"], err = json.Marshal(a.N4DnaiInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4DnaiInfo': %w", err)
		}
	}

	object["n4MessagePayload"], err = json.Marshal(a.N4MessagePayload)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n4MessagePayload': %w", err)
	}

	object["n4MessageType"], err = json.Marshal(a.N4MessageType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'n4MessageType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionCreateData. Returns the specified
// element and whether it was found
func (a PduSessionCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionCreateData
func (a *PduSessionCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionCreateData to handle AdditionalProperties
func (a *PduSessionCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnRequested"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnRequested)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnRequested': %w", err)
		}
		delete(object, "alwaysOnRequested")
	}

	if raw, found := object["amfNfId"]; found {
		err = json.Unmarshal(raw, &a.AmfNfId)
		if err != nil {
			return fmt.Errorf("error reading 'amfNfId': %w", err)
		}
		delete(object, "amfNfId")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["chargingId"]; found {
		err = json.Unmarshal(raw, &a.ChargingId)
		if err != nil {
			return fmt.Errorf("error reading 'chargingId': %w", err)
		}
		delete(object, "chargingId")
	}

	if raw, found := object["cpCiotEnabled"]; found {
		err = json.Unmarshal(raw, &a.CpCiotEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'cpCiotEnabled': %w", err)
		}
		delete(object, "cpCiotEnabled")
	}

	if raw, found := object["cpOnlyInd"]; found {
		err = json.Unmarshal(raw, &a.CpOnlyInd)
		if err != nil {
			return fmt.Errorf("error reading 'cpOnlyInd': %w", err)
		}
		delete(object, "cpOnlyInd")
	}

	if raw, found := object["dlServingPlmnRateCtl"]; found {
		err = json.Unmarshal(raw, &a.DlServingPlmnRateCtl)
		if err != nil {
			return fmt.Errorf("error reading 'dlServingPlmnRateCtl': %w", err)
		}
		delete(object, "dlServingPlmnRateCtl")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["epsBearerCtxStatus"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerCtxStatus)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerCtxStatus': %w", err)
		}
		delete(object, "epsBearerCtxStatus")
	}

	if raw, found := object["epsBearerId"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerId)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerId': %w", err)
		}
		delete(object, "epsBearerId")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hPcfId"]; found {
		err = json.Unmarshal(raw, &a.HPcfId)
		if err != nil {
			return fmt.Errorf("error reading 'hPcfId': %w", err)
		}
		delete(object, "hPcfId")
	}

	if raw, found := object["hoPreparationIndication"]; found {
		err = json.Unmarshal(raw, &a.HoPreparationIndication)
		if err != nil {
			return fmt.Errorf("error reading 'hoPreparationIndication': %w", err)
		}
		delete(object, "hoPreparationIndication")
	}

	if raw, found := object["iSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.ISmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'iSmfServiceInstanceId': %w", err)
		}
		delete(object, "iSmfServiceInstanceId")
	}

	if raw, found := object["icnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.IcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'icnTunnelInfo': %w", err)
		}
		delete(object, "icnTunnelInfo")
	}

	if raw, found := object["invokeNef"]; found {
		err = json.Unmarshal(raw, &a.InvokeNef)
		if err != nil {
			return fmt.Errorf("error reading 'invokeNef': %w", err)
		}
		delete(object, "invokeNef")
	}

	if raw, found := object["ismfId"]; found {
		err = json.Unmarshal(raw, &a.IsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'ismfId': %w", err)
		}
		delete(object, "ismfId")
	}

	if raw, found := object["ismfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.IsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'ismfPduSessionUri': %w", err)
		}
		delete(object, "ismfPduSessionUri")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n9ForwardingTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.N9ForwardingTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n9ForwardingTunnelInfo': %w", err)
		}
		delete(object, "n9ForwardingTunnelInfo")
	}

	if raw, found := object["oldPduSessionId"]; found {
		err = json.Unmarshal(raw, &a.OldPduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'oldPduSessionId': %w", err)
		}
		delete(object, "oldPduSessionId")
	}

	if raw, found := object["pcfGroupId"]; found {
		err = json.Unmarshal(raw, &a.PcfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfGroupId': %w", err)
		}
		delete(object, "pcfGroupId")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["pgwS8cFteid"]; found {
		err = json.Unmarshal(raw, &a.PgwS8cFteid)
		if err != nil {
			return fmt.Errorf("error reading 'pgwS8cFteid': %w", err)
		}
		delete(object, "pgwS8cFteid")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["requestType"]; found {
		err = json.Unmarshal(raw, &a.RequestType)
		if err != nil {
			return fmt.Errorf("error reading 'requestType': %w", err)
		}
		delete(object, "requestType")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["selMode"]; found {
		err = json.Unmarshal(raw, &a.SelMode)
		if err != nil {
			return fmt.Errorf("error reading 'selMode': %w", err)
		}
		delete(object, "selMode")
	}

	if raw, found := object["selectedDnn"]; found {
		err = json.Unmarshal(raw, &a.SelectedDnn)
		if err != nil {
			return fmt.Errorf("error reading 'selectedDnn': %w", err)
		}
		delete(object, "selectedDnn")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["unauthenticatedSupi"]; found {
		err = json.Unmarshal(raw, &a.UnauthenticatedSupi)
		if err != nil {
			return fmt.Errorf("error reading 'unauthenticatedSupi': %w", err)
		}
		delete(object, "unauthenticatedSupi")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if raw, found := object["upSecurityInfo"]; found {
		err = json.Unmarshal(raw, &a.UpSecurityInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurityInfo': %w", err)
		}
		delete(object, "upSecurityInfo")
	}

	if raw, found := object["vSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.VSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'vSmfServiceInstanceId': %w", err)
		}
		delete(object, "vSmfServiceInstanceId")
	}

	if raw, found := object["vcnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.VcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'vcnTunnelInfo': %w", err)
		}
		delete(object, "vcnTunnelInfo")
	}

	if raw, found := object["vplmnQos"]; found {
		err = json.Unmarshal(raw, &a.VplmnQos)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnQos': %w", err)
		}
		delete(object, "vplmnQos")
	}

	if raw, found := object["vsmfId"]; found {
		err = json.Unmarshal(raw, &a.VsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfId': %w", err)
		}
		delete(object, "vsmfId")
	}

	if raw, found := object["vsmfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.VsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfPduSessionUri': %w", err)
		}
		delete(object, "vsmfPduSessionUri")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionCreateData to handle AdditionalProperties
func (a PduSessionCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnRequested != nil {
		object["alwaysOnRequested"], err = json.Marshal(a.AlwaysOnRequested)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnRequested': %w", err)
		}
	}

	if a.AmfNfId != nil {
		object["amfNfId"], err = json.Marshal(a.AmfNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNfId': %w", err)
		}
	}

	object["anType"], err = json.Marshal(a.AnType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'anType': %w", err)
	}

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if len(a.ChargingId) != 0 {
		object["chargingId"], err = json.Marshal(a.ChargingId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingId': %w", err)
		}
	}

	if a.CpCiotEnabled != nil {
		object["cpCiotEnabled"], err = json.Marshal(a.CpCiotEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpCiotEnabled': %w", err)
		}
	}

	if a.CpOnlyInd != nil {
		object["cpOnlyInd"], err = json.Marshal(a.CpOnlyInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpOnlyInd': %w", err)
		}
	}

	if a.DlServingPlmnRateCtl != 0 {
		object["dlServingPlmnRateCtl"], err = json.Marshal(a.DlServingPlmnRateCtl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlServingPlmnRateCtl': %w", err)
		}
	}

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.EpsBearerCtxStatus) != 0 {
		object["epsBearerCtxStatus"], err = json.Marshal(a.EpsBearerCtxStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerCtxStatus': %w", err)
		}
	}

	if len(a.EpsBearerId) != 0 {
		object["epsBearerId"], err = json.Marshal(a.EpsBearerId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerId': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HPcfId != nil {
		object["hPcfId"], err = json.Marshal(a.HPcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hPcfId': %w", err)
		}
	}

	if a.HoPreparationIndication != nil {
		object["hoPreparationIndication"], err = json.Marshal(a.HoPreparationIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoPreparationIndication': %w", err)
		}
	}

	if a.ISmfServiceInstanceId != nil {
		object["iSmfServiceInstanceId"], err = json.Marshal(a.ISmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iSmfServiceInstanceId': %w", err)
		}
	}

	if a.IcnTunnelInfo != nil {
		object["icnTunnelInfo"], err = json.Marshal(a.IcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'icnTunnelInfo': %w", err)
		}
	}

	if a.InvokeNef != nil {
		object["invokeNef"], err = json.Marshal(a.InvokeNef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invokeNef': %w", err)
		}
	}

	if a.IsmfId != nil {
		object["ismfId"], err = json.Marshal(a.IsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfId': %w", err)
		}
	}

	if a.IsmfPduSessionUri != nil {
		object["ismfPduSessionUri"], err = json.Marshal(a.IsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfPduSessionUri': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if a.N9ForwardingTunnelInfo != nil {
		object["n9ForwardingTunnelInfo"], err = json.Marshal(a.N9ForwardingTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9ForwardingTunnelInfo': %w", err)
		}
	}

	if a.OldPduSessionId != nil {
		object["oldPduSessionId"], err = json.Marshal(a.OldPduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldPduSessionId': %w", err)
		}
	}

	if a.PcfGroupId != nil {
		object["pcfGroupId"], err = json.Marshal(a.PcfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfGroupId': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PgwS8cFteid != nil {
		object["pgwS8cFteid"], err = json.Marshal(a.PgwS8cFteid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwS8cFteid': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.RequestType != nil {
		object["requestType"], err = json.Marshal(a.RequestType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestType': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.RoutingIndicator != nil {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if a.SelMode != nil {
		object["selMode"], err = json.Marshal(a.SelMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selMode': %w", err)
		}
	}

	if a.SelectedDnn != nil {
		object["selectedDnn"], err = json.Marshal(a.SelectedDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedDnn': %w", err)
		}
	}

	object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UnauthenticatedSupi != nil {
		object["unauthenticatedSupi"], err = json.Marshal(a.UnauthenticatedSupi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unauthenticatedSupi': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	if a.UpSecurityInfo != nil {
		object["upSecurityInfo"], err = json.Marshal(a.UpSecurityInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurityInfo': %w", err)
		}
	}

	if a.VSmfServiceInstanceId != nil {
		object["vSmfServiceInstanceId"], err = json.Marshal(a.VSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vSmfServiceInstanceId': %w", err)
		}
	}

	if a.VcnTunnelInfo != nil {
		object["vcnTunnelInfo"], err = json.Marshal(a.VcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vcnTunnelInfo': %w", err)
		}
	}

	if a.VplmnQos != nil {
		object["vplmnQos"], err = json.Marshal(a.VplmnQos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vplmnQos': %w", err)
		}
	}

	if a.VsmfId != nil {
		object["vsmfId"], err = json.Marshal(a.VsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfId': %w", err)
		}
	}

	if a.VsmfPduSessionUri != nil {
		object["vsmfPduSessionUri"], err = json.Marshal(a.VsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfPduSessionUri': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionCreateError. Returns the specified
// element and whether it was found
func (a PduSessionCreateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionCreateError
func (a *PduSessionCreateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionCreateError to handle AdditionalProperties
func (a *PduSessionCreateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backOffTimer"]; found {
		err = json.Unmarshal(raw, &a.BackOffTimer)
		if err != nil {
			return fmt.Errorf("error reading 'backOffTimer': %w", err)
		}
		delete(object, "backOffTimer")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionCreateError to handle AdditionalProperties
func (a PduSessionCreateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackOffTimer != nil {
		object["backOffTimer"], err = json.Marshal(a.BackOffTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backOffTimer': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if len(a.N1smCause) != 0 {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionCreatedData. Returns the specified
// element and whether it was found
func (a PduSessionCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionCreatedData
func (a *PduSessionCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionCreatedData to handle AdditionalProperties
func (a *PduSessionCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnGranted"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnGranted)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnGranted': %w", err)
		}
		delete(object, "alwaysOnGranted")
	}

	if raw, found := object["cnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.CnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'cnTunnelInfo': %w", err)
		}
		delete(object, "cnTunnelInfo")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["enablePauseCharging"]; found {
		err = json.Unmarshal(raw, &a.EnablePauseCharging)
		if err != nil {
			return fmt.Errorf("error reading 'enablePauseCharging': %w", err)
		}
		delete(object, "enablePauseCharging")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hSmfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfInstanceId': %w", err)
		}
		delete(object, "hSmfInstanceId")
	}

	if raw, found := object["hSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfServiceInstanceId': %w", err)
		}
		delete(object, "hSmfServiceInstanceId")
	}

	if raw, found := object["hcnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.HcnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'hcnTunnelInfo': %w", err)
		}
		delete(object, "hcnTunnelInfo")
	}

	if raw, found := object["homeProvidedChargingId"]; found {
		err = json.Unmarshal(raw, &a.HomeProvidedChargingId)
		if err != nil {
			return fmt.Errorf("error reading 'homeProvidedChargingId': %w", err)
		}
		delete(object, "homeProvidedChargingId")
	}

	if raw, found := object["ipv6Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Index': %w", err)
		}
		delete(object, "ipv6Index")
	}

	if raw, found := object["ipv6MultiHomingInd"]; found {
		err = json.Unmarshal(raw, &a.Ipv6MultiHomingInd)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6MultiHomingInd': %w", err)
		}
		delete(object, "ipv6MultiHomingInd")
	}

	if raw, found := object["maAcceptedInd"]; found {
		err = json.Unmarshal(raw, &a.MaAcceptedInd)
		if err != nil {
			return fmt.Errorf("error reading 'maAcceptedInd': %w", err)
		}
		delete(object, "maAcceptedInd")
	}

	if raw, found := object["maxIntegrityProtectedDataRate"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRate': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRate")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["nefExtBufSupportInd"]; found {
		err = json.Unmarshal(raw, &a.NefExtBufSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'nefExtBufSupportInd': %w", err)
		}
		delete(object, "nefExtBufSupportInd")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionType"]; found {
		err = json.Unmarshal(raw, &a.PduSessionType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionType': %w", err)
		}
		delete(object, "pduSessionType")
	}

	if raw, found := object["qosFlowsSetupList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsSetupList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsSetupList': %w", err)
		}
		delete(object, "qosFlowsSetupList")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["redundantPduSessionInfo"]; found {
		err = json.Unmarshal(raw, &a.RedundantPduSessionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'redundantPduSessionInfo': %w", err)
		}
		delete(object, "redundantPduSessionInfo")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["smallDataRateControlEnabled"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateControlEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateControlEnabled': %w", err)
		}
		delete(object, "smallDataRateControlEnabled")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["smfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfServiceInstanceId': %w", err)
		}
		delete(object, "smfServiceInstanceId")
	}

	if raw, found := object["sscMode"]; found {
		err = json.Unmarshal(raw, &a.SscMode)
		if err != nil {
			return fmt.Errorf("error reading 'sscMode': %w", err)
		}
		delete(object, "sscMode")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueIpv4Address"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4Address': %w", err)
		}
		delete(object, "ueIpv4Address")
	}

	if raw, found := object["ueIpv6InterfaceId"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6InterfaceId)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6InterfaceId': %w", err)
		}
		delete(object, "ueIpv6InterfaceId")
	}

	if raw, found := object["ueIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Prefix': %w", err)
		}
		delete(object, "ueIpv6Prefix")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionCreatedData to handle AdditionalProperties
func (a PduSessionCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnGranted != nil {
		object["alwaysOnGranted"], err = json.Marshal(a.AlwaysOnGranted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnGranted': %w", err)
		}
	}

	if a.CnTunnelInfo != nil {
		object["cnTunnelInfo"], err = json.Marshal(a.CnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnTunnelInfo': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if a.EnablePauseCharging != nil {
		object["enablePauseCharging"], err = json.Marshal(a.EnablePauseCharging)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enablePauseCharging': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HSmfInstanceId != nil {
		object["hSmfInstanceId"], err = json.Marshal(a.HSmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfInstanceId': %w", err)
		}
	}

	if a.HSmfServiceInstanceId != nil {
		object["hSmfServiceInstanceId"], err = json.Marshal(a.HSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfServiceInstanceId': %w", err)
		}
	}

	if a.HcnTunnelInfo != nil {
		object["hcnTunnelInfo"], err = json.Marshal(a.HcnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hcnTunnelInfo': %w", err)
		}
	}

	if len(a.HomeProvidedChargingId) != 0 {
		object["homeProvidedChargingId"], err = json.Marshal(a.HomeProvidedChargingId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'homeProvidedChargingId': %w", err)
		}
	}

	if a.Ipv6Index != nil {
		object["ipv6Index"], err = json.Marshal(a.Ipv6Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Index': %w", err)
		}
	}

	if a.Ipv6MultiHomingInd != nil {
		object["ipv6MultiHomingInd"], err = json.Marshal(a.Ipv6MultiHomingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6MultiHomingInd': %w", err)
		}
	}

	if a.MaAcceptedInd != nil {
		object["maAcceptedInd"], err = json.Marshal(a.MaAcceptedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maAcceptedInd': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRate != nil {
		object["maxIntegrityProtectedDataRate"], err = json.Marshal(a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRate': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if a.NefExtBufSupportInd != nil {
		object["nefExtBufSupportInd"], err = json.Marshal(a.NefExtBufSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefExtBufSupportInd': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	object["pduSessionType"], err = json.Marshal(a.PduSessionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionType': %w", err)
	}

	if len(a.QosFlowsSetupList) != 0 {
		object["qosFlowsSetupList"], err = json.Marshal(a.QosFlowsSetupList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsSetupList': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.RedundantPduSessionInfo != nil {
		object["redundantPduSessionInfo"], err = json.Marshal(a.RedundantPduSessionInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantPduSessionInfo': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	if a.SmallDataRateControlEnabled != nil {
		object["smallDataRateControlEnabled"], err = json.Marshal(a.SmallDataRateControlEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateControlEnabled': %w", err)
		}
	}

	if a.SmfInstanceId != nil {
		object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
		}
	}

	if a.SmfServiceInstanceId != nil {
		object["smfServiceInstanceId"], err = json.Marshal(a.SmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServiceInstanceId': %w", err)
		}
	}

	object["sscMode"], err = json.Marshal(a.SscMode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sscMode': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.UeIpv4Address) != 0 {
		object["ueIpv4Address"], err = json.Marshal(a.UeIpv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4Address': %w", err)
		}
	}

	if len(a.UeIpv6InterfaceId) != 0 {
		object["ueIpv6InterfaceId"], err = json.Marshal(a.UeIpv6InterfaceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6InterfaceId': %w", err)
		}
	}

	if a.UeIpv6Prefix != nil {
		object["ueIpv6Prefix"], err = json.Marshal(a.UeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Prefix': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionNotifyItem. Returns the specified
// element and whether it was found
func (a PduSessionNotifyItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionNotifyItem
func (a *PduSessionNotifyItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionNotifyItem to handle AdditionalProperties
func (a *PduSessionNotifyItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notificationCause"]; found {
		err = json.Unmarshal(raw, &a.NotificationCause)
		if err != nil {
			return fmt.Errorf("error reading 'notificationCause': %w", err)
		}
		delete(object, "notificationCause")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionNotifyItem to handle AdditionalProperties
func (a PduSessionNotifyItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["notificationCause"], err = json.Marshal(a.NotificationCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationCause': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetailsAddInfo. Returns the specified
// element and whether it was found
func (a ProblemDetailsAddInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetailsAddInfo
func (a *ProblemDetailsAddInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetailsAddInfo to handle AdditionalProperties
func (a *ProblemDetailsAddInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["remoteError"]; found {
		err = json.Unmarshal(raw, &a.RemoteError)
		if err != nil {
			return fmt.Errorf("error reading 'remoteError': %w", err)
		}
		delete(object, "remoteError")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetailsAddInfo to handle AdditionalProperties
func (a ProblemDetailsAddInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RemoteError != nil {
		object["remoteError"], err = json.Marshal(a.RemoteError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remoteError': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PsaInformation. Returns the specified
// element and whether it was found
func (a PsaInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PsaInformation
func (a *PsaInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PsaInformation to handle AdditionalProperties
func (a *PsaInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["psaInd"]; found {
		err = json.Unmarshal(raw, &a.PsaInd)
		if err != nil {
			return fmt.Errorf("error reading 'psaInd': %w", err)
		}
		delete(object, "psaInd")
	}

	if raw, found := object["psaUpfId"]; found {
		err = json.Unmarshal(raw, &a.PsaUpfId)
		if err != nil {
			return fmt.Errorf("error reading 'psaUpfId': %w", err)
		}
		delete(object, "psaUpfId")
	}

	if raw, found := object["ueIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Prefix': %w", err)
		}
		delete(object, "ueIpv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PsaInformation to handle AdditionalProperties
func (a PsaInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DnaiList) != 0 {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if a.PsaInd != nil {
		object["psaInd"], err = json.Marshal(a.PsaInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaInd': %w", err)
		}
	}

	if a.PsaUpfId != nil {
		object["psaUpfId"], err = json.Marshal(a.PsaUpfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaUpfId': %w", err)
		}
	}

	if a.UeIpv6Prefix != nil {
		object["ueIpv6Prefix"], err = json.Marshal(a.UeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowAddModifyRequestItem. Returns the specified
// element and whether it was found
func (a QosFlowAddModifyRequestItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowAddModifyRequestItem
func (a *QosFlowAddModifyRequestItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowAddModifyRequestItem to handle AdditionalProperties
func (a *QosFlowAddModifyRequestItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["associatedAnType"]; found {
		err = json.Unmarshal(raw, &a.AssociatedAnType)
		if err != nil {
			return fmt.Errorf("error reading 'associatedAnType': %w", err)
		}
		delete(object, "associatedAnType")
	}

	if raw, found := object["ebi"]; found {
		err = json.Unmarshal(raw, &a.Ebi)
		if err != nil {
			return fmt.Errorf("error reading 'ebi': %w", err)
		}
		delete(object, "ebi")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["qosFlowDescription"]; found {
		err = json.Unmarshal(raw, &a.QosFlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowDescription': %w", err)
		}
		delete(object, "qosFlowDescription")
	}

	if raw, found := object["qosFlowProfile"]; found {
		err = json.Unmarshal(raw, &a.QosFlowProfile)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowProfile': %w", err)
		}
		delete(object, "qosFlowProfile")
	}

	if raw, found := object["qosRules"]; found {
		err = json.Unmarshal(raw, &a.QosRules)
		if err != nil {
			return fmt.Errorf("error reading 'qosRules': %w", err)
		}
		delete(object, "qosRules")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowAddModifyRequestItem to handle AdditionalProperties
func (a QosFlowAddModifyRequestItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AssociatedAnType != nil {
		object["associatedAnType"], err = json.Marshal(a.AssociatedAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'associatedAnType': %w", err)
		}
	}

	if a.Ebi != nil {
		object["ebi"], err = json.Marshal(a.Ebi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ebi': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	if a.QosFlowDescription != nil {
		object["qosFlowDescription"], err = json.Marshal(a.QosFlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowDescription': %w", err)
		}
	}

	if a.QosFlowProfile != nil {
		object["qosFlowProfile"], err = json.Marshal(a.QosFlowProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowProfile': %w", err)
		}
	}

	if a.QosRules != nil {
		object["qosRules"], err = json.Marshal(a.QosRules)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosRules': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowItem. Returns the specified
// element and whether it was found
func (a QosFlowItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowItem
func (a *QosFlowItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowItem to handle AdditionalProperties
func (a *QosFlowItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["currentQosProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.CurrentQosProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'currentQosProfileIndex': %w", err)
		}
		delete(object, "currentQosProfileIndex")
	}

	if raw, found := object["nullQoSProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.NullQoSProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'nullQoSProfileIndex': %w", err)
		}
		delete(object, "nullQoSProfileIndex")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowItem to handle AdditionalProperties
func (a QosFlowItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.CurrentQosProfileIndex != 0 {
		object["currentQosProfileIndex"], err = json.Marshal(a.CurrentQosProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentQosProfileIndex': %w", err)
		}
	}

	if a.NullQoSProfileIndex != nil {
		object["nullQoSProfileIndex"], err = json.Marshal(a.NullQoSProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nullQoSProfileIndex': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowNotifyItem. Returns the specified
// element and whether it was found
func (a QosFlowNotifyItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowNotifyItem
func (a *QosFlowNotifyItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowNotifyItem to handle AdditionalProperties
func (a *QosFlowNotifyItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["currentQosProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.CurrentQosProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'currentQosProfileIndex': %w", err)
		}
		delete(object, "currentQosProfileIndex")
	}

	if raw, found := object["notificationCause"]; found {
		err = json.Unmarshal(raw, &a.NotificationCause)
		if err != nil {
			return fmt.Errorf("error reading 'notificationCause': %w", err)
		}
		delete(object, "notificationCause")
	}

	if raw, found := object["nullQoSProfileIndex"]; found {
		err = json.Unmarshal(raw, &a.NullQoSProfileIndex)
		if err != nil {
			return fmt.Errorf("error reading 'nullQoSProfileIndex': %w", err)
		}
		delete(object, "nullQoSProfileIndex")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowNotifyItem to handle AdditionalProperties
func (a QosFlowNotifyItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CurrentQosProfileIndex != 0 {
		object["currentQosProfileIndex"], err = json.Marshal(a.CurrentQosProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentQosProfileIndex': %w", err)
		}
	}

	object["notificationCause"], err = json.Marshal(a.NotificationCause)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationCause': %w", err)
	}

	if a.NullQoSProfileIndex != nil {
		object["nullQoSProfileIndex"], err = json.Marshal(a.NullQoSProfileIndex)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nullQoSProfileIndex': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowProfile. Returns the specified
// element and whether it was found
func (a QosFlowProfile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowProfile
func (a *QosFlowProfile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowProfile to handle AdditionalProperties
func (a *QosFlowProfile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["additionalQosFlowInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalQosFlowInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalQosFlowInfo': %w", err)
		}
		delete(object, "additionalQosFlowInfo")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["dynamic5Qi"]; found {
		err = json.Unmarshal(raw, &a.Dynamic5Qi)
		if err != nil {
			return fmt.Errorf("error reading 'dynamic5Qi': %w", err)
		}
		delete(object, "dynamic5Qi")
	}

	if raw, found := object["gbrQosFlowInfo"]; found {
		err = json.Unmarshal(raw, &a.GbrQosFlowInfo)
		if err != nil {
			return fmt.Errorf("error reading 'gbrQosFlowInfo': %w", err)
		}
		delete(object, "gbrQosFlowInfo")
	}

	if raw, found := object["nonDynamic5Qi"]; found {
		err = json.Unmarshal(raw, &a.NonDynamic5Qi)
		if err != nil {
			return fmt.Errorf("error reading 'nonDynamic5Qi': %w", err)
		}
		delete(object, "nonDynamic5Qi")
	}

	if raw, found := object["qosMonitoringReq"]; found {
		err = json.Unmarshal(raw, &a.QosMonitoringReq)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonitoringReq': %w", err)
		}
		delete(object, "qosMonitoringReq")
	}

	if raw, found := object["qosRepPeriod"]; found {
		err = json.Unmarshal(raw, &a.QosRepPeriod)
		if err != nil {
			return fmt.Errorf("error reading 'qosRepPeriod': %w", err)
		}
		delete(object, "qosRepPeriod")
	}

	if raw, found := object["rqa"]; found {
		err = json.Unmarshal(raw, &a.Rqa)
		if err != nil {
			return fmt.Errorf("error reading 'rqa': %w", err)
		}
		delete(object, "rqa")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowProfile to handle AdditionalProperties
func (a QosFlowProfile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["5qi"], err = json.Marshal(a.N5qi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling '5qi': %w", err)
	}

	if a.AdditionalQosFlowInfo != nil {
		object["additionalQosFlowInfo"], err = json.Marshal(a.AdditionalQosFlowInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalQosFlowInfo': %w", err)
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arp': %w", err)
		}
	}

	if a.Dynamic5Qi != nil {
		object["dynamic5Qi"], err = json.Marshal(a.Dynamic5Qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dynamic5Qi': %w", err)
		}
	}

	if a.GbrQosFlowInfo != nil {
		object["gbrQosFlowInfo"], err = json.Marshal(a.GbrQosFlowInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gbrQosFlowInfo': %w", err)
		}
	}

	if a.NonDynamic5Qi != nil {
		object["nonDynamic5Qi"], err = json.Marshal(a.NonDynamic5Qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nonDynamic5Qi': %w", err)
		}
	}

	if a.QosMonitoringReq != nil {
		object["qosMonitoringReq"], err = json.Marshal(a.QosMonitoringReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonitoringReq': %w", err)
		}
	}

	if a.QosRepPeriod != nil {
		object["qosRepPeriod"], err = json.Marshal(a.QosRepPeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosRepPeriod': %w", err)
		}
	}

	if a.Rqa != nil {
		object["rqa"], err = json.Marshal(a.Rqa)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rqa': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowReleaseRequestItem. Returns the specified
// element and whether it was found
func (a QosFlowReleaseRequestItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowReleaseRequestItem
func (a *QosFlowReleaseRequestItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowReleaseRequestItem to handle AdditionalProperties
func (a *QosFlowReleaseRequestItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["qosFlowDescription"]; found {
		err = json.Unmarshal(raw, &a.QosFlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowDescription': %w", err)
		}
		delete(object, "qosFlowDescription")
	}

	if raw, found := object["qosRules"]; found {
		err = json.Unmarshal(raw, &a.QosRules)
		if err != nil {
			return fmt.Errorf("error reading 'qosRules': %w", err)
		}
		delete(object, "qosRules")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowReleaseRequestItem to handle AdditionalProperties
func (a QosFlowReleaseRequestItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	if a.QosFlowDescription != nil {
		object["qosFlowDescription"], err = json.Marshal(a.QosFlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowDescription': %w", err)
		}
	}

	if a.QosRules != nil {
		object["qosRules"], err = json.Marshal(a.QosRules)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosRules': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowSetupItem. Returns the specified
// element and whether it was found
func (a QosFlowSetupItem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowSetupItem
func (a *QosFlowSetupItem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowSetupItem to handle AdditionalProperties
func (a *QosFlowSetupItem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["associatedAnType"]; found {
		err = json.Unmarshal(raw, &a.AssociatedAnType)
		if err != nil {
			return fmt.Errorf("error reading 'associatedAnType': %w", err)
		}
		delete(object, "associatedAnType")
	}

	if raw, found := object["defaultQosRuleInd"]; found {
		err = json.Unmarshal(raw, &a.DefaultQosRuleInd)
		if err != nil {
			return fmt.Errorf("error reading 'defaultQosRuleInd': %w", err)
		}
		delete(object, "defaultQosRuleInd")
	}

	if raw, found := object["ebi"]; found {
		err = json.Unmarshal(raw, &a.Ebi)
		if err != nil {
			return fmt.Errorf("error reading 'ebi': %w", err)
		}
		delete(object, "ebi")
	}

	if raw, found := object["qfi"]; found {
		err = json.Unmarshal(raw, &a.Qfi)
		if err != nil {
			return fmt.Errorf("error reading 'qfi': %w", err)
		}
		delete(object, "qfi")
	}

	if raw, found := object["qosFlowDescription"]; found {
		err = json.Unmarshal(raw, &a.QosFlowDescription)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowDescription': %w", err)
		}
		delete(object, "qosFlowDescription")
	}

	if raw, found := object["qosFlowProfile"]; found {
		err = json.Unmarshal(raw, &a.QosFlowProfile)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowProfile': %w", err)
		}
		delete(object, "qosFlowProfile")
	}

	if raw, found := object["qosRules"]; found {
		err = json.Unmarshal(raw, &a.QosRules)
		if err != nil {
			return fmt.Errorf("error reading 'qosRules': %w", err)
		}
		delete(object, "qosRules")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowSetupItem to handle AdditionalProperties
func (a QosFlowSetupItem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AssociatedAnType != nil {
		object["associatedAnType"], err = json.Marshal(a.AssociatedAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'associatedAnType': %w", err)
		}
	}

	if a.DefaultQosRuleInd != nil {
		object["defaultQosRuleInd"], err = json.Marshal(a.DefaultQosRuleInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultQosRuleInd': %w", err)
		}
	}

	if a.Ebi != nil {
		object["ebi"], err = json.Marshal(a.Ebi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ebi': %w", err)
		}
	}

	object["qfi"], err = json.Marshal(a.Qfi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfi': %w", err)
	}

	if a.QosFlowDescription != nil {
		object["qosFlowDescription"], err = json.Marshal(a.QosFlowDescription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowDescription': %w", err)
		}
	}

	if a.QosFlowProfile != nil {
		object["qosFlowProfile"], err = json.Marshal(a.QosFlowProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowProfile': %w", err)
		}
	}

	object["qosRules"], err = json.Marshal(a.QosRules)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosRules': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosFlowTunnel. Returns the specified
// element and whether it was found
func (a QosFlowTunnel) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosFlowTunnel
func (a *QosFlowTunnel) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosFlowTunnel to handle AdditionalProperties
func (a *QosFlowTunnel) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qfiList"]; found {
		err = json.Unmarshal(raw, &a.QfiList)
		if err != nil {
			return fmt.Errorf("error reading 'qfiList': %w", err)
		}
		delete(object, "qfiList")
	}

	if raw, found := object["tunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.TunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tunnelInfo': %w", err)
		}
		delete(object, "tunnelInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosFlowTunnel to handle AdditionalProperties
func (a QosFlowTunnel) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["qfiList"], err = json.Marshal(a.QfiList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qfiList': %w", err)
	}

	object["tunnelInfo"], err = json.Marshal(a.TunnelInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tunnelInfo': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for QosMonitoringInfo. Returns the specified
// element and whether it was found
func (a QosMonitoringInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QosMonitoringInfo
func (a *QosMonitoringInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QosMonitoringInfo to handle AdditionalProperties
func (a *QosMonitoringInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["qosMonitoringInd"]; found {
		err = json.Unmarshal(raw, &a.QosMonitoringInd)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonitoringInd': %w", err)
		}
		delete(object, "qosMonitoringInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QosMonitoringInfo to handle AdditionalProperties
func (a QosMonitoringInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.QosMonitoringInd != nil {
		object["qosMonitoringInd"], err = json.Marshal(a.QosMonitoringInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonitoringInd': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RedundantPduSessionInformation. Returns the specified
// element and whether it was found
func (a RedundantPduSessionInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RedundantPduSessionInformation
func (a *RedundantPduSessionInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RedundantPduSessionInformation to handle AdditionalProperties
func (a *RedundantPduSessionInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["rsn"]; found {
		err = json.Unmarshal(raw, &a.Rsn)
		if err != nil {
			return fmt.Errorf("error reading 'rsn': %w", err)
		}
		delete(object, "rsn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RedundantPduSessionInformation to handle AdditionalProperties
func (a RedundantPduSessionInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["rsn"], err = json.Marshal(a.Rsn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rsn': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleaseData. Returns the specified
// element and whether it was found
func (a ReleaseData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleaseData
func (a *ReleaseData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleaseData to handle AdditionalProperties
func (a *ReleaseData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["secondaryRatUsageReport"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageReport)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageReport': %w", err)
		}
		delete(object, "secondaryRatUsageReport")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleaseData to handle AdditionalProperties
func (a ReleaseData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if len(a.SecondaryRatUsageReport) != 0 {
		object["secondaryRatUsageReport"], err = json.Marshal(a.SecondaryRatUsageReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageReport': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReleasedData. Returns the specified
// element and whether it was found
func (a ReleasedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReleasedData
func (a *ReleasedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReleasedData to handle AdditionalProperties
func (a *ReleasedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReleasedData to handle AdditionalProperties
func (a ReleasedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RetrieveData. Returns the specified
// element and whether it was found
func (a RetrieveData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RetrieveData
func (a *RetrieveData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RetrieveData to handle AdditionalProperties
func (a *RetrieveData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smallDataRateStatusReq"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatusReq)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatusReq': %w", err)
		}
		delete(object, "smallDataRateStatusReq")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RetrieveData to handle AdditionalProperties
func (a RetrieveData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmallDataRateStatusReq != nil {
		object["smallDataRateStatusReq"], err = json.Marshal(a.SmallDataRateStatusReq)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatusReq': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RetrievedData. Returns the specified
// element and whether it was found
func (a RetrievedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RetrievedData
func (a *RetrievedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RetrievedData to handle AdditionalProperties
func (a *RetrievedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RetrievedData to handle AdditionalProperties
func (a RetrievedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SecurityResult. Returns the specified
// element and whether it was found
func (a SecurityResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SecurityResult
func (a *SecurityResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SecurityResult to handle AdditionalProperties
func (a *SecurityResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["confidentialityProtectionResult"]; found {
		err = json.Unmarshal(raw, &a.ConfidentialityProtectionResult)
		if err != nil {
			return fmt.Errorf("error reading 'confidentialityProtectionResult': %w", err)
		}
		delete(object, "confidentialityProtectionResult")
	}

	if raw, found := object["integrityProtectionResult"]; found {
		err = json.Unmarshal(raw, &a.IntegrityProtectionResult)
		if err != nil {
			return fmt.Errorf("error reading 'integrityProtectionResult': %w", err)
		}
		delete(object, "integrityProtectionResult")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SecurityResult to handle AdditionalProperties
func (a SecurityResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConfidentialityProtectionResult != nil {
		object["confidentialityProtectionResult"], err = json.Marshal(a.ConfidentialityProtectionResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'confidentialityProtectionResult': %w", err)
		}
	}

	if a.IntegrityProtectionResult != nil {
		object["integrityProtectionResult"], err = json.Marshal(a.IntegrityProtectionResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'integrityProtectionResult': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SendMoDataReqData. Returns the specified
// element and whether it was found
func (a SendMoDataReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SendMoDataReqData
func (a *SendMoDataReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SendMoDataReqData to handle AdditionalProperties
func (a *SendMoDataReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["moData"]; found {
		err = json.Unmarshal(raw, &a.MoData)
		if err != nil {
			return fmt.Errorf("error reading 'moData': %w", err)
		}
		delete(object, "moData")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SendMoDataReqData to handle AdditionalProperties
func (a SendMoDataReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["moData"], err = json.Marshal(a.MoData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'moData': %w", err)
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContext. Returns the specified
// element and whether it was found
func (a SmContext) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContext
func (a *SmContext) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContext to handle AdditionalProperties
func (a *SmContext) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addRanTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AddRanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addRanTunnelInfo': %w", err)
		}
		delete(object, "addRanTunnelInfo")
	}

	if raw, found := object["addRedRanTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AddRedRanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'addRedRanTunnelInfo': %w", err)
		}
		delete(object, "addRedRanTunnelInfo")
	}

	if raw, found := object["alwaysOnGranted"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnGranted)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnGranted': %w", err)
		}
		delete(object, "alwaysOnGranted")
	}

	if raw, found := object["chargingId"]; found {
		err = json.Unmarshal(raw, &a.ChargingId)
		if err != nil {
			return fmt.Errorf("error reading 'chargingId': %w", err)
		}
		delete(object, "chargingId")
	}

	if raw, found := object["chargingInfo"]; found {
		err = json.Unmarshal(raw, &a.ChargingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'chargingInfo': %w", err)
		}
		delete(object, "chargingInfo")
	}

	if raw, found := object["dlsetSupportInd"]; found {
		err = json.Unmarshal(raw, &a.DlsetSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'dlsetSupportInd': %w", err)
		}
		delete(object, "dlsetSupportInd")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["enablePauseCharging"]; found {
		err = json.Unmarshal(raw, &a.EnablePauseCharging)
		if err != nil {
			return fmt.Errorf("error reading 'enablePauseCharging': %w", err)
		}
		delete(object, "enablePauseCharging")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["forwardingInd"]; found {
		err = json.Unmarshal(raw, &a.ForwardingInd)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingInd': %w", err)
		}
		delete(object, "forwardingInd")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hSmfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfInstanceId': %w", err)
		}
		delete(object, "hSmfInstanceId")
	}

	if raw, found := object["hSmfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.HSmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfServiceInstanceId': %w", err)
		}
		delete(object, "hSmfServiceInstanceId")
	}

	if raw, found := object["hSmfUri"]; found {
		err = json.Unmarshal(raw, &a.HSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfUri': %w", err)
		}
		delete(object, "hSmfUri")
	}

	if raw, found := object["hplmnSnssai"]; found {
		err = json.Unmarshal(raw, &a.HplmnSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'hplmnSnssai': %w", err)
		}
		delete(object, "hplmnSnssai")
	}

	if raw, found := object["ipv6Index"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Index)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Index': %w", err)
		}
		delete(object, "ipv6Index")
	}

	if raw, found := object["maxIntegrityProtectedDataRate"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRate': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRate")
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["nefExtBufSupportInd"]; found {
		err = json.Unmarshal(raw, &a.NefExtBufSupportInd)
		if err != nil {
			return fmt.Errorf("error reading 'nefExtBufSupportInd': %w", err)
		}
		delete(object, "nefExtBufSupportInd")
	}

	if raw, found := object["pcfGroupId"]; found {
		err = json.Unmarshal(raw, &a.PcfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfGroupId': %w", err)
		}
		delete(object, "pcfGroupId")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionRef"]; found {
		err = json.Unmarshal(raw, &a.PduSessionRef)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionRef': %w", err)
		}
		delete(object, "pduSessionRef")
	}

	if raw, found := object["pduSessionSmfBinding"]; found {
		err = json.Unmarshal(raw, &a.PduSessionSmfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionSmfBinding': %w", err)
		}
		delete(object, "pduSessionSmfBinding")
	}

	if raw, found := object["pduSessionSmfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionSmfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionSmfServiceSetId': %w", err)
		}
		delete(object, "pduSessionSmfServiceSetId")
	}

	if raw, found := object["pduSessionSmfSetId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionSmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionSmfSetId': %w", err)
		}
		delete(object, "pduSessionSmfSetId")
	}

	if raw, found := object["pduSessionType"]; found {
		err = json.Unmarshal(raw, &a.PduSessionType)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionType': %w", err)
		}
		delete(object, "pduSessionType")
	}

	if raw, found := object["psaTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.PsaTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'psaTunnelInfo': %w", err)
		}
		delete(object, "psaTunnelInfo")
	}

	if raw, found := object["qosFlowsList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsList': %w", err)
		}
		delete(object, "qosFlowsList")
	}

	if raw, found := object["ranTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.RanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'ranTunnelInfo': %w", err)
		}
		delete(object, "ranTunnelInfo")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["redRanTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.RedRanTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'redRanTunnelInfo': %w", err)
		}
		delete(object, "redRanTunnelInfo")
	}

	if raw, found := object["redundantPduSessionInfo"]; found {
		err = json.Unmarshal(raw, &a.RedundantPduSessionInfo)
		if err != nil {
			return fmt.Errorf("error reading 'redundantPduSessionInfo': %w", err)
		}
		delete(object, "redundantPduSessionInfo")
	}

	if raw, found := object["roamingChargingProfile"]; found {
		err = json.Unmarshal(raw, &a.RoamingChargingProfile)
		if err != nil {
			return fmt.Errorf("error reading 'roamingChargingProfile': %w", err)
		}
		delete(object, "roamingChargingProfile")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["selMode"]; found {
		err = json.Unmarshal(raw, &a.SelMode)
		if err != nil {
			return fmt.Errorf("error reading 'selMode': %w", err)
		}
		delete(object, "selMode")
	}

	if raw, found := object["selectedDnn"]; found {
		err = json.Unmarshal(raw, &a.SelectedDnn)
		if err != nil {
			return fmt.Errorf("error reading 'selectedDnn': %w", err)
		}
		delete(object, "selectedDnn")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["smfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfServiceInstanceId': %w", err)
		}
		delete(object, "smfServiceInstanceId")
	}

	if raw, found := object["smfUri"]; found {
		err = json.Unmarshal(raw, &a.SmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'smfUri': %w", err)
		}
		delete(object, "smfUri")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if raw, found := object["ueIpv4Address"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4Address)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4Address': %w", err)
		}
		delete(object, "ueIpv4Address")
	}

	if raw, found := object["ueIpv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6Prefix': %w", err)
		}
		delete(object, "ueIpv6Prefix")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContext to handle AdditionalProperties
func (a SmContext) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AddRanTunnelInfo) != 0 {
		object["addRanTunnelInfo"], err = json.Marshal(a.AddRanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addRanTunnelInfo': %w", err)
		}
	}

	if len(a.AddRedRanTunnelInfo) != 0 {
		object["addRedRanTunnelInfo"], err = json.Marshal(a.AddRedRanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addRedRanTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnGranted != nil {
		object["alwaysOnGranted"], err = json.Marshal(a.AlwaysOnGranted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnGranted': %w", err)
		}
	}

	if len(a.ChargingId) != 0 {
		object["chargingId"], err = json.Marshal(a.ChargingId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingId': %w", err)
		}
	}

	if a.ChargingInfo != nil {
		object["chargingInfo"], err = json.Marshal(a.ChargingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'chargingInfo': %w", err)
		}
	}

	if a.DlsetSupportInd != nil {
		object["dlsetSupportInd"], err = json.Marshal(a.DlsetSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlsetSupportInd': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.EnablePauseCharging != nil {
		object["enablePauseCharging"], err = json.Marshal(a.EnablePauseCharging)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enablePauseCharging': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.ForwardingInd != nil {
		object["forwardingInd"], err = json.Marshal(a.ForwardingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingInd': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HSmfInstanceId != nil {
		object["hSmfInstanceId"], err = json.Marshal(a.HSmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfInstanceId': %w", err)
		}
	}

	if a.HSmfServiceInstanceId != nil {
		object["hSmfServiceInstanceId"], err = json.Marshal(a.HSmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfServiceInstanceId': %w", err)
		}
	}

	if a.HSmfUri != nil {
		object["hSmfUri"], err = json.Marshal(a.HSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfUri': %w", err)
		}
	}

	if a.HplmnSnssai != nil {
		object["hplmnSnssai"], err = json.Marshal(a.HplmnSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hplmnSnssai': %w", err)
		}
	}

	if a.Ipv6Index != nil {
		object["ipv6Index"], err = json.Marshal(a.Ipv6Index)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Index': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRate != nil {
		object["maxIntegrityProtectedDataRate"], err = json.Marshal(a.MaxIntegrityProtectedDataRate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRate': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.NefExtBufSupportInd != nil {
		object["nefExtBufSupportInd"], err = json.Marshal(a.NefExtBufSupportInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefExtBufSupportInd': %w", err)
		}
	}

	if a.PcfGroupId != nil {
		object["pcfGroupId"], err = json.Marshal(a.PcfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfGroupId': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	if a.PduSessionRef != nil {
		object["pduSessionRef"], err = json.Marshal(a.PduSessionRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionRef': %w", err)
		}
	}

	if a.PduSessionSmfBinding != nil {
		object["pduSessionSmfBinding"], err = json.Marshal(a.PduSessionSmfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionSmfBinding': %w", err)
		}
	}

	if a.PduSessionSmfServiceSetId != nil {
		object["pduSessionSmfServiceSetId"], err = json.Marshal(a.PduSessionSmfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionSmfServiceSetId': %w", err)
		}
	}

	if a.PduSessionSmfSetId != nil {
		object["pduSessionSmfSetId"], err = json.Marshal(a.PduSessionSmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionSmfSetId': %w", err)
		}
	}

	object["pduSessionType"], err = json.Marshal(a.PduSessionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionType': %w", err)
	}

	if a.PsaTunnelInfo != nil {
		object["psaTunnelInfo"], err = json.Marshal(a.PsaTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'psaTunnelInfo': %w", err)
		}
	}

	object["qosFlowsList"], err = json.Marshal(a.QosFlowsList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'qosFlowsList': %w", err)
	}

	if a.RanTunnelInfo != nil {
		object["ranTunnelInfo"], err = json.Marshal(a.RanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranTunnelInfo': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.RedRanTunnelInfo != nil {
		object["redRanTunnelInfo"], err = json.Marshal(a.RedRanTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redRanTunnelInfo': %w", err)
		}
	}

	if a.RedundantPduSessionInfo != nil {
		object["redundantPduSessionInfo"], err = json.Marshal(a.RedundantPduSessionInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantPduSessionInfo': %w", err)
		}
	}

	if a.RoamingChargingProfile != nil {
		object["roamingChargingProfile"], err = json.Marshal(a.RoamingChargingProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'roamingChargingProfile': %w", err)
		}
	}

	if a.RoutingIndicator != nil {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	if a.SelMode != nil {
		object["selMode"], err = json.Marshal(a.SelMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selMode': %w", err)
		}
	}

	if a.SelectedDnn != nil {
		object["selectedDnn"], err = json.Marshal(a.SelectedDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedDnn': %w", err)
		}
	}

	object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
	}

	if a.SmfInstanceId != nil {
		object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
		}
	}

	if a.SmfServiceInstanceId != nil {
		object["smfServiceInstanceId"], err = json.Marshal(a.SmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServiceInstanceId': %w", err)
		}
	}

	if a.SmfUri != nil {
		object["smfUri"], err = json.Marshal(a.SmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfUri': %w", err)
		}
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	if len(a.UeIpv4Address) != 0 {
		object["ueIpv4Address"], err = json.Marshal(a.UeIpv4Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4Address': %w", err)
		}
	}

	if a.UeIpv6Prefix != nil {
		object["ueIpv6Prefix"], err = json.Marshal(a.UeIpv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6Prefix': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextCreateData. Returns the specified
// element and whether it was found
func (a SmContextCreateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextCreateData
func (a *SmContextCreateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextCreateData to handle AdditionalProperties
func (a *SmContextCreateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["additionalHsmfId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalHsmfId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalHsmfId': %w", err)
		}
		delete(object, "additionalHsmfId")
	}

	if raw, found := object["additionalHsmfUri"]; found {
		err = json.Unmarshal(raw, &a.AdditionalHsmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'additionalHsmfUri': %w", err)
		}
		delete(object, "additionalHsmfUri")
	}

	if raw, found := object["additionalSmfId"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSmfId': %w", err)
		}
		delete(object, "additionalSmfId")
	}

	if raw, found := object["additionalSmfUri"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSmfUri': %w", err)
		}
		delete(object, "additionalSmfUri")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["cpCiotEnabled"]; found {
		err = json.Unmarshal(raw, &a.CpCiotEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'cpCiotEnabled': %w", err)
		}
		delete(object, "cpCiotEnabled")
	}

	if raw, found := object["cpOnlyInd"]; found {
		err = json.Unmarshal(raw, &a.CpOnlyInd)
		if err != nil {
			return fmt.Errorf("error reading 'cpOnlyInd': %w", err)
		}
		delete(object, "cpOnlyInd")
	}

	if raw, found := object["ddnFailureSubs"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubs)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubs': %w", err)
		}
		delete(object, "ddnFailureSubs")
	}

	if raw, found := object["directForwardingFlag"]; found {
		err = json.Unmarshal(raw, &a.DirectForwardingFlag)
		if err != nil {
			return fmt.Errorf("error reading 'directForwardingFlag': %w", err)
		}
		delete(object, "directForwardingFlag")
	}

	if raw, found := object["dlDataWaitingInd"]; found {
		err = json.Unmarshal(raw, &a.DlDataWaitingInd)
		if err != nil {
			return fmt.Errorf("error reading 'dlDataWaitingInd': %w", err)
		}
		delete(object, "dlDataWaitingInd")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["epsBearerCtxStatus"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerCtxStatus)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerCtxStatus': %w", err)
		}
		delete(object, "epsBearerCtxStatus")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["extendedNasSmTimerInd"]; found {
		err = json.Unmarshal(raw, &a.ExtendedNasSmTimerInd)
		if err != nil {
			return fmt.Errorf("error reading 'extendedNasSmTimerInd': %w", err)
		}
		delete(object, "extendedNasSmTimerInd")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hSmfId"]; found {
		err = json.Unmarshal(raw, &a.HSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfId': %w", err)
		}
		delete(object, "hSmfId")
	}

	if raw, found := object["hSmfUri"]; found {
		err = json.Unmarshal(raw, &a.HSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfUri': %w", err)
		}
		delete(object, "hSmfUri")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["hplmnSnssai"]; found {
		err = json.Unmarshal(raw, &a.HplmnSnssai)
		if err != nil {
			return fmt.Errorf("error reading 'hplmnSnssai': %w", err)
		}
		delete(object, "hplmnSnssai")
	}

	if raw, found := object["indirectForwardingFlag"]; found {
		err = json.Unmarshal(raw, &a.IndirectForwardingFlag)
		if err != nil {
			return fmt.Errorf("error reading 'indirectForwardingFlag': %w", err)
		}
		delete(object, "indirectForwardingFlag")
	}

	if raw, found := object["invokeNef"]; found {
		err = json.Unmarshal(raw, &a.InvokeNef)
		if err != nil {
			return fmt.Errorf("error reading 'invokeNef': %w", err)
		}
		delete(object, "invokeNef")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoExt1': %w", err)
		}
		delete(object, "n2SmInfoExt1")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["n2SmInfoTypeExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoTypeExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoTypeExt1': %w", err)
		}
		delete(object, "n2SmInfoTypeExt1")
	}

	if raw, found := object["nrfUri"]; found {
		err = json.Unmarshal(raw, &a.NrfUri)
		if err != nil {
			return fmt.Errorf("error reading 'nrfUri': %w", err)
		}
		delete(object, "nrfUri")
	}

	if raw, found := object["oldPduSessionId"]; found {
		err = json.Unmarshal(raw, &a.OldPduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'oldPduSessionId': %w", err)
		}
		delete(object, "oldPduSessionId")
	}

	if raw, found := object["oldSmContextRef"]; found {
		err = json.Unmarshal(raw, &a.OldSmContextRef)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmContextRef': %w", err)
		}
		delete(object, "oldSmContextRef")
	}

	if raw, found := object["oldSmfId"]; found {
		err = json.Unmarshal(raw, &a.OldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmfId': %w", err)
		}
		delete(object, "oldSmfId")
	}

	if raw, found := object["pcfGroupId"]; found {
		err = json.Unmarshal(raw, &a.PcfGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfGroupId': %w", err)
		}
		delete(object, "pcfGroupId")
	}

	if raw, found := object["pcfId"]; found {
		err = json.Unmarshal(raw, &a.PcfId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfId': %w", err)
		}
		delete(object, "pcfId")
	}

	if raw, found := object["pcfSetId"]; found {
		err = json.Unmarshal(raw, &a.PcfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'pcfSetId': %w", err)
		}
		delete(object, "pcfSetId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pduSessionsActivateList"]; found {
		err = json.Unmarshal(raw, &a.PduSessionsActivateList)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionsActivateList': %w", err)
		}
		delete(object, "pduSessionsActivateList")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["ranUnchangedInd"]; found {
		err = json.Unmarshal(raw, &a.RanUnchangedInd)
		if err != nil {
			return fmt.Errorf("error reading 'ranUnchangedInd': %w", err)
		}
		delete(object, "ranUnchangedInd")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["requestType"]; found {
		err = json.Unmarshal(raw, &a.RequestType)
		if err != nil {
			return fmt.Errorf("error reading 'requestType': %w", err)
		}
		delete(object, "requestType")
	}

	if raw, found := object["routingIndicator"]; found {
		err = json.Unmarshal(raw, &a.RoutingIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'routingIndicator': %w", err)
		}
		delete(object, "routingIndicator")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["selMode"]; found {
		err = json.Unmarshal(raw, &a.SelMode)
		if err != nil {
			return fmt.Errorf("error reading 'selMode': %w", err)
		}
		delete(object, "selMode")
	}

	if raw, found := object["selectedDnn"]; found {
		err = json.Unmarshal(raw, &a.SelectedDnn)
		if err != nil {
			return fmt.Errorf("error reading 'selectedDnn': %w", err)
		}
		delete(object, "selectedDnn")
	}

	if raw, found := object["serviceName"]; found {
		err = json.Unmarshal(raw, &a.ServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'serviceName': %w", err)
		}
		delete(object, "serviceName")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["servingNfId"]; found {
		err = json.Unmarshal(raw, &a.ServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNfId': %w", err)
		}
		delete(object, "servingNfId")
	}

	if raw, found := object["smContextRef"]; found {
		err = json.Unmarshal(raw, &a.SmContextRef)
		if err != nil {
			return fmt.Errorf("error reading 'smContextRef': %w", err)
		}
		delete(object, "smContextRef")
	}

	if raw, found := object["smContextSmfBinding"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfBinding)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfBinding': %w", err)
		}
		delete(object, "smContextSmfBinding")
	}

	if raw, found := object["smContextSmfId"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfId': %w", err)
		}
		delete(object, "smContextSmfId")
	}

	if raw, found := object["smContextSmfServiceSetId"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfServiceSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfServiceSetId': %w", err)
		}
		delete(object, "smContextSmfServiceSetId")
	}

	if raw, found := object["smContextSmfSetId"]; found {
		err = json.Unmarshal(raw, &a.SmContextSmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smContextSmfSetId': %w", err)
		}
		delete(object, "smContextSmfSetId")
	}

	if raw, found := object["smContextStatusUri"]; found {
		err = json.Unmarshal(raw, &a.SmContextStatusUri)
		if err != nil {
			return fmt.Errorf("error reading 'smContextStatusUri': %w", err)
		}
		delete(object, "smContextStatusUri")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["smfId"]; found {
		err = json.Unmarshal(raw, &a.SmfId)
		if err != nil {
			return fmt.Errorf("error reading 'smfId': %w", err)
		}
		delete(object, "smfId")
	}

	if raw, found := object["smfTransferInd"]; found {
		err = json.Unmarshal(raw, &a.SmfTransferInd)
		if err != nil {
			return fmt.Errorf("error reading 'smfTransferInd': %w", err)
		}
		delete(object, "smfTransferInd")
	}

	if raw, found := object["smfUri"]; found {
		err = json.Unmarshal(raw, &a.SmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'smfUri': %w", err)
		}
		delete(object, "smfUri")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetId"]; found {
		err = json.Unmarshal(raw, &a.TargetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetId': %w", err)
		}
		delete(object, "targetId")
	}

	if raw, found := object["tngfInfo"]; found {
		err = json.Unmarshal(raw, &a.TngfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'tngfInfo': %w", err)
		}
		delete(object, "tngfInfo")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["twifInfo"]; found {
		err = json.Unmarshal(raw, &a.TwifInfo)
		if err != nil {
			return fmt.Errorf("error reading 'twifInfo': %w", err)
		}
		delete(object, "twifInfo")
	}

	if raw, found := object["udmGroupId"]; found {
		err = json.Unmarshal(raw, &a.UdmGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'udmGroupId': %w", err)
		}
		delete(object, "udmGroupId")
	}

	if raw, found := object["ueEpsPdnConnection"]; found {
		err = json.Unmarshal(raw, &a.UeEpsPdnConnection)
		if err != nil {
			return fmt.Errorf("error reading 'ueEpsPdnConnection': %w", err)
		}
		delete(object, "ueEpsPdnConnection")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["unauthenticatedSupi"]; found {
		err = json.Unmarshal(raw, &a.UnauthenticatedSupi)
		if err != nil {
			return fmt.Errorf("error reading 'unauthenticatedSupi': %w", err)
		}
		delete(object, "unauthenticatedSupi")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if raw, found := object["wAgfInfo"]; found {
		err = json.Unmarshal(raw, &a.WAgfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'wAgfInfo': %w", err)
		}
		delete(object, "wAgfInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextCreateData to handle AdditionalProperties
func (a SmContextCreateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if len(a.AdditionalHsmfId) != 0 {
		object["additionalHsmfId"], err = json.Marshal(a.AdditionalHsmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalHsmfId': %w", err)
		}
	}

	if len(a.AdditionalHsmfUri) != 0 {
		object["additionalHsmfUri"], err = json.Marshal(a.AdditionalHsmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalHsmfUri': %w", err)
		}
	}

	if len(a.AdditionalSmfId) != 0 {
		object["additionalSmfId"], err = json.Marshal(a.AdditionalSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSmfId': %w", err)
		}
	}

	if len(a.AdditionalSmfUri) != 0 {
		object["additionalSmfUri"], err = json.Marshal(a.AdditionalSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSmfUri': %w", err)
		}
	}

	object["anType"], err = json.Marshal(a.AnType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'anType': %w", err)
	}

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if len(a.BackupAmfInfo) != 0 {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.CpCiotEnabled != nil {
		object["cpCiotEnabled"], err = json.Marshal(a.CpCiotEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpCiotEnabled': %w", err)
		}
	}

	if a.CpOnlyInd != nil {
		object["cpOnlyInd"], err = json.Marshal(a.CpOnlyInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cpOnlyInd': %w", err)
		}
	}

	if a.DdnFailureSubs != nil {
		object["ddnFailureSubs"], err = json.Marshal(a.DdnFailureSubs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubs': %w", err)
		}
	}

	if a.DirectForwardingFlag != nil {
		object["directForwardingFlag"], err = json.Marshal(a.DirectForwardingFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'directForwardingFlag': %w", err)
		}
	}

	if a.DlDataWaitingInd != nil {
		object["dlDataWaitingInd"], err = json.Marshal(a.DlDataWaitingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDataWaitingInd': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EpsBearerCtxStatus) != 0 {
		object["epsBearerCtxStatus"], err = json.Marshal(a.EpsBearerCtxStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerCtxStatus': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if a.ExtendedNasSmTimerInd != nil {
		object["extendedNasSmTimerInd"], err = json.Marshal(a.ExtendedNasSmTimerInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extendedNasSmTimerInd': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HSmfId != nil {
		object["hSmfId"], err = json.Marshal(a.HSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfId': %w", err)
		}
	}

	if a.HSmfUri != nil {
		object["hSmfUri"], err = json.Marshal(a.HSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfUri': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.HplmnSnssai != nil {
		object["hplmnSnssai"], err = json.Marshal(a.HplmnSnssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hplmnSnssai': %w", err)
		}
	}

	if a.IndirectForwardingFlag != nil {
		object["indirectForwardingFlag"], err = json.Marshal(a.IndirectForwardingFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'indirectForwardingFlag': %w", err)
		}
	}

	if a.InvokeNef != nil {
		object["invokeNef"], err = json.Marshal(a.InvokeNef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invokeNef': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoExt1 != nil {
		object["n2SmInfoExt1"], err = json.Marshal(a.N2SmInfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoExt1': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.N2SmInfoTypeExt1 != nil {
		object["n2SmInfoTypeExt1"], err = json.Marshal(a.N2SmInfoTypeExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoTypeExt1': %w", err)
		}
	}

	if a.NrfUri != nil {
		object["nrfUri"], err = json.Marshal(a.NrfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfUri': %w", err)
		}
	}

	if a.OldPduSessionId != nil {
		object["oldPduSessionId"], err = json.Marshal(a.OldPduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldPduSessionId': %w", err)
		}
	}

	if a.OldSmContextRef != nil {
		object["oldSmContextRef"], err = json.Marshal(a.OldSmContextRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmContextRef': %w", err)
		}
	}

	if a.OldSmfId != nil {
		object["oldSmfId"], err = json.Marshal(a.OldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmfId': %w", err)
		}
	}

	if a.PcfGroupId != nil {
		object["pcfGroupId"], err = json.Marshal(a.PcfGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfGroupId': %w", err)
		}
	}

	if a.PcfId != nil {
		object["pcfId"], err = json.Marshal(a.PcfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfId': %w", err)
		}
	}

	if a.PcfSetId != nil {
		object["pcfSetId"], err = json.Marshal(a.PcfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcfSetId': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if len(a.PduSessionsActivateList) != 0 {
		object["pduSessionsActivateList"], err = json.Marshal(a.PduSessionsActivateList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionsActivateList': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if a.RanUnchangedInd != nil {
		object["ranUnchangedInd"], err = json.Marshal(a.RanUnchangedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranUnchangedInd': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.RequestType != nil {
		object["requestType"], err = json.Marshal(a.RequestType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestType': %w", err)
		}
	}

	if a.RoutingIndicator != nil {
		object["routingIndicator"], err = json.Marshal(a.RoutingIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'routingIndicator': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.SelMode != nil {
		object["selMode"], err = json.Marshal(a.SelMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selMode': %w", err)
		}
	}

	if a.SelectedDnn != nil {
		object["selectedDnn"], err = json.Marshal(a.SelectedDnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedDnn': %w", err)
		}
	}

	if a.ServiceName != nil {
		object["serviceName"], err = json.Marshal(a.ServiceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceName': %w", err)
		}
	}

	object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
	}

	object["servingNfId"], err = json.Marshal(a.ServingNfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNfId': %w", err)
	}

	if a.SmContextRef != nil {
		object["smContextRef"], err = json.Marshal(a.SmContextRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextRef': %w", err)
		}
	}

	if a.SmContextSmfBinding != nil {
		object["smContextSmfBinding"], err = json.Marshal(a.SmContextSmfBinding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfBinding': %w", err)
		}
	}

	if a.SmContextSmfId != nil {
		object["smContextSmfId"], err = json.Marshal(a.SmContextSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfId': %w", err)
		}
	}

	if a.SmContextSmfServiceSetId != nil {
		object["smContextSmfServiceSetId"], err = json.Marshal(a.SmContextSmfServiceSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfServiceSetId': %w", err)
		}
	}

	if a.SmContextSmfSetId != nil {
		object["smContextSmfSetId"], err = json.Marshal(a.SmContextSmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextSmfSetId': %w", err)
		}
	}

	object["smContextStatusUri"], err = json.Marshal(a.SmContextStatusUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smContextStatusUri': %w", err)
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	if a.SmfId != nil {
		object["smfId"], err = json.Marshal(a.SmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfId': %w", err)
		}
	}

	if a.SmfTransferInd != nil {
		object["smfTransferInd"], err = json.Marshal(a.SmfTransferInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfTransferInd': %w", err)
		}
	}

	if a.SmfUri != nil {
		object["smfUri"], err = json.Marshal(a.SmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfUri': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.TargetId != nil {
		object["targetId"], err = json.Marshal(a.TargetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetId': %w", err)
		}
	}

	if a.TngfInfo != nil {
		object["tngfInfo"], err = json.Marshal(a.TngfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tngfInfo': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.TwifInfo != nil {
		object["twifInfo"], err = json.Marshal(a.TwifInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'twifInfo': %w", err)
		}
	}

	if a.UdmGroupId != nil {
		object["udmGroupId"], err = json.Marshal(a.UdmGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'udmGroupId': %w", err)
		}
	}

	if a.UeEpsPdnConnection != nil {
		object["ueEpsPdnConnection"], err = json.Marshal(a.UeEpsPdnConnection)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueEpsPdnConnection': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UnauthenticatedSupi != nil {
		object["unauthenticatedSupi"], err = json.Marshal(a.UnauthenticatedSupi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unauthenticatedSupi': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	if a.WAgfInfo != nil {
		object["wAgfInfo"], err = json.Marshal(a.WAgfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wAgfInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextCreateError. Returns the specified
// element and whether it was found
func (a SmContextCreateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextCreateError
func (a *SmContextCreateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextCreateError to handle AdditionalProperties
func (a *SmContextCreateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextCreateError to handle AdditionalProperties
func (a SmContextCreateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextCreatedData. Returns the specified
// element and whether it was found
func (a SmContextCreatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextCreatedData
func (a *SmContextCreatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextCreatedData to handle AdditionalProperties
func (a *SmContextCreatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allocatedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AllocatedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'allocatedEbiList': %w", err)
		}
		delete(object, "allocatedEbiList")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["hSmfUri"]; found {
		err = json.Unmarshal(raw, &a.HSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'hSmfUri': %w", err)
		}
		delete(object, "hSmfUri")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["selectedOldSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedOldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedOldSmfId': %w", err)
		}
		delete(object, "selectedOldSmfId")
	}

	if raw, found := object["selectedSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedSmfId': %w", err)
		}
		delete(object, "selectedSmfId")
	}

	if raw, found := object["smfServiceInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfServiceInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfServiceInstanceId': %w", err)
		}
		delete(object, "smfServiceInstanceId")
	}

	if raw, found := object["smfUri"]; found {
		err = json.Unmarshal(raw, &a.SmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'smfUri': %w", err)
		}
		delete(object, "smfUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextCreatedData to handle AdditionalProperties
func (a SmContextCreatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllocatedEbiList) != 0 {
		object["allocatedEbiList"], err = json.Marshal(a.AllocatedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allocatedEbiList': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	if a.HSmfUri != nil {
		object["hSmfUri"], err = json.Marshal(a.HSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hSmfUri': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.SelectedOldSmfId != nil {
		object["selectedOldSmfId"], err = json.Marshal(a.SelectedOldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedOldSmfId': %w", err)
		}
	}

	if a.SelectedSmfId != nil {
		object["selectedSmfId"], err = json.Marshal(a.SelectedSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedSmfId': %w", err)
		}
	}

	if a.SmfServiceInstanceId != nil {
		object["smfServiceInstanceId"], err = json.Marshal(a.SmfServiceInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfServiceInstanceId': %w", err)
		}
	}

	if a.SmfUri != nil {
		object["smfUri"], err = json.Marshal(a.SmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfUri': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextReleaseData. Returns the specified
// element and whether it was found
func (a SmContextReleaseData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextReleaseData
func (a *SmContextReleaseData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextReleaseData to handle AdditionalProperties
func (a *SmContextReleaseData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["ismfReleaseOnly"]; found {
		err = json.Unmarshal(raw, &a.IsmfReleaseOnly)
		if err != nil {
			return fmt.Errorf("error reading 'ismfReleaseOnly': %w", err)
		}
		delete(object, "ismfReleaseOnly")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["vsmfReleaseOnly"]; found {
		err = json.Unmarshal(raw, &a.VsmfReleaseOnly)
		if err != nil {
			return fmt.Errorf("error reading 'vsmfReleaseOnly': %w", err)
		}
		delete(object, "vsmfReleaseOnly")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextReleaseData to handle AdditionalProperties
func (a SmContextReleaseData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.IsmfReleaseOnly != nil {
		object["ismfReleaseOnly"], err = json.Marshal(a.IsmfReleaseOnly)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ismfReleaseOnly': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.VsmfReleaseOnly != nil {
		object["vsmfReleaseOnly"], err = json.Marshal(a.VsmfReleaseOnly)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vsmfReleaseOnly': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextReleasedData. Returns the specified
// element and whether it was found
func (a SmContextReleasedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextReleasedData
func (a *SmContextReleasedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextReleasedData to handle AdditionalProperties
func (a *SmContextReleasedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextReleasedData to handle AdditionalProperties
func (a SmContextReleasedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextRetrieveData. Returns the specified
// element and whether it was found
func (a SmContextRetrieveData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextRetrieveData
func (a *SmContextRetrieveData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextRetrieveData to handle AdditionalProperties
func (a *SmContextRetrieveData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notToTransferEbiList"]; found {
		err = json.Unmarshal(raw, &a.NotToTransferEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'notToTransferEbiList': %w", err)
		}
		delete(object, "notToTransferEbiList")
	}

	if raw, found := object["ranUnchangedInd"]; found {
		err = json.Unmarshal(raw, &a.RanUnchangedInd)
		if err != nil {
			return fmt.Errorf("error reading 'ranUnchangedInd': %w", err)
		}
		delete(object, "ranUnchangedInd")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["smContextType"]; found {
		err = json.Unmarshal(raw, &a.SmContextType)
		if err != nil {
			return fmt.Errorf("error reading 'smContextType': %w", err)
		}
		delete(object, "smContextType")
	}

	if raw, found := object["targetMmeCap"]; found {
		err = json.Unmarshal(raw, &a.TargetMmeCap)
		if err != nil {
			return fmt.Errorf("error reading 'targetMmeCap': %w", err)
		}
		delete(object, "targetMmeCap")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextRetrieveData to handle AdditionalProperties
func (a SmContextRetrieveData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.NotToTransferEbiList) != 0 {
		object["notToTransferEbiList"], err = json.Marshal(a.NotToTransferEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notToTransferEbiList': %w", err)
		}
	}

	if a.RanUnchangedInd != nil {
		object["ranUnchangedInd"], err = json.Marshal(a.RanUnchangedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ranUnchangedInd': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.SmContextType != nil {
		object["smContextType"], err = json.Marshal(a.SmContextType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextType': %w", err)
		}
	}

	if a.TargetMmeCap != nil {
		object["targetMmeCap"], err = json.Marshal(a.TargetMmeCap)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetMmeCap': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextRetrievedData. Returns the specified
// element and whether it was found
func (a SmContextRetrievedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextRetrievedData
func (a *SmContextRetrievedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextRetrievedData to handle AdditionalProperties
func (a *SmContextRetrievedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["dlDataWaitingInd"]; found {
		err = json.Unmarshal(raw, &a.DlDataWaitingInd)
		if err != nil {
			return fmt.Errorf("error reading 'dlDataWaitingInd': %w", err)
		}
		delete(object, "dlDataWaitingInd")
	}

	if raw, found := object["smContext"]; found {
		err = json.Unmarshal(raw, &a.SmContext)
		if err != nil {
			return fmt.Errorf("error reading 'smContext': %w", err)
		}
		delete(object, "smContext")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["ueEpsPdnConnection"]; found {
		err = json.Unmarshal(raw, &a.UeEpsPdnConnection)
		if err != nil {
			return fmt.Errorf("error reading 'ueEpsPdnConnection': %w", err)
		}
		delete(object, "ueEpsPdnConnection")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextRetrievedData to handle AdditionalProperties
func (a SmContextRetrievedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.DlDataWaitingInd != nil {
		object["dlDataWaitingInd"], err = json.Marshal(a.DlDataWaitingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dlDataWaitingInd': %w", err)
		}
	}

	if a.SmContext != nil {
		object["smContext"], err = json.Marshal(a.SmContext)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContext': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	object["ueEpsPdnConnection"], err = json.Marshal(a.UeEpsPdnConnection)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueEpsPdnConnection': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextStatusNotification. Returns the specified
// element and whether it was found
func (a SmContextStatusNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextStatusNotification
func (a *SmContextStatusNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextStatusNotification to handle AdditionalProperties
func (a *SmContextStatusNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["altAnchorSmfId"]; found {
		err = json.Unmarshal(raw, &a.AltAnchorSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'altAnchorSmfId': %w", err)
		}
		delete(object, "altAnchorSmfId")
	}

	if raw, found := object["altAnchorSmfUri"]; found {
		err = json.Unmarshal(raw, &a.AltAnchorSmfUri)
		if err != nil {
			return fmt.Errorf("error reading 'altAnchorSmfUri': %w", err)
		}
		delete(object, "altAnchorSmfUri")
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["ddnFailureStatus"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureStatus)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureStatus': %w", err)
		}
		delete(object, "ddnFailureStatus")
	}

	if raw, found := object["newIntermediateSmfId"]; found {
		err = json.Unmarshal(raw, &a.NewIntermediateSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'newIntermediateSmfId': %w", err)
		}
		delete(object, "newIntermediateSmfId")
	}

	if raw, found := object["newSmfId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfId': %w", err)
		}
		delete(object, "newSmfId")
	}

	if raw, found := object["newSmfSetId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfSetId': %w", err)
		}
		delete(object, "newSmfSetId")
	}

	if raw, found := object["notifyCorrelationIdsForddnFailure"]; found {
		err = json.Unmarshal(raw, &a.NotifyCorrelationIdsForddnFailure)
		if err != nil {
			return fmt.Errorf("error reading 'notifyCorrelationIdsForddnFailure': %w", err)
		}
		delete(object, "notifyCorrelationIdsForddnFailure")
	}

	if raw, found := object["oldSmContextRef"]; found {
		err = json.Unmarshal(raw, &a.OldSmContextRef)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmContextRef': %w", err)
		}
		delete(object, "oldSmContextRef")
	}

	if raw, found := object["oldSmfId"]; found {
		err = json.Unmarshal(raw, &a.OldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'oldSmfId': %w", err)
		}
		delete(object, "oldSmfId")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["statusInfo"]; found {
		err = json.Unmarshal(raw, &a.StatusInfo)
		if err != nil {
			return fmt.Errorf("error reading 'statusInfo': %w", err)
		}
		delete(object, "statusInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextStatusNotification to handle AdditionalProperties
func (a SmContextStatusNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AltAnchorSmfId != nil {
		object["altAnchorSmfId"], err = json.Marshal(a.AltAnchorSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altAnchorSmfId': %w", err)
		}
	}

	if a.AltAnchorSmfUri != nil {
		object["altAnchorSmfUri"], err = json.Marshal(a.AltAnchorSmfUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'altAnchorSmfUri': %w", err)
		}
	}

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.DdnFailureStatus != nil {
		object["ddnFailureStatus"], err = json.Marshal(a.DdnFailureStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureStatus': %w", err)
		}
	}

	if a.NewIntermediateSmfId != nil {
		object["newIntermediateSmfId"], err = json.Marshal(a.NewIntermediateSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newIntermediateSmfId': %w", err)
		}
	}

	if a.NewSmfId != nil {
		object["newSmfId"], err = json.Marshal(a.NewSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfId': %w", err)
		}
	}

	if a.NewSmfSetId != nil {
		object["newSmfSetId"], err = json.Marshal(a.NewSmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfSetId': %w", err)
		}
	}

	if len(a.NotifyCorrelationIdsForddnFailure) != 0 {
		object["notifyCorrelationIdsForddnFailure"], err = json.Marshal(a.NotifyCorrelationIdsForddnFailure)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyCorrelationIdsForddnFailure': %w", err)
		}
	}

	if a.OldSmContextRef != nil {
		object["oldSmContextRef"], err = json.Marshal(a.OldSmContextRef)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmContextRef': %w", err)
		}
	}

	if a.OldSmfId != nil {
		object["oldSmfId"], err = json.Marshal(a.OldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'oldSmfId': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	object["statusInfo"], err = json.Marshal(a.StatusInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'statusInfo': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextUpdateData. Returns the specified
// element and whether it was found
func (a SmContextUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextUpdateData
func (a *SmContextUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextUpdateData to handle AdditionalProperties
func (a *SmContextUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["additionalAnType"]; found {
		err = json.Unmarshal(raw, &a.AdditionalAnType)
		if err != nil {
			return fmt.Errorf("error reading 'additionalAnType': %w", err)
		}
		delete(object, "additionalAnType")
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["anTypeCanBeChanged"]; found {
		err = json.Unmarshal(raw, &a.AnTypeCanBeChanged)
		if err != nil {
			return fmt.Errorf("error reading 'anTypeCanBeChanged': %w", err)
		}
		delete(object, "anTypeCanBeChanged")
	}

	if raw, found := object["anTypeToReactivate"]; found {
		err = json.Unmarshal(raw, &a.AnTypeToReactivate)
		if err != nil {
			return fmt.Errorf("error reading 'anTypeToReactivate': %w", err)
		}
		delete(object, "anTypeToReactivate")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dataForwarding"]; found {
		err = json.Unmarshal(raw, &a.DataForwarding)
		if err != nil {
			return fmt.Errorf("error reading 'dataForwarding': %w", err)
		}
		delete(object, "dataForwarding")
	}

	if raw, found := object["ddnFailureSubs"]; found {
		err = json.Unmarshal(raw, &a.DdnFailureSubs)
		if err != nil {
			return fmt.Errorf("error reading 'ddnFailureSubs': %w", err)
		}
		delete(object, "ddnFailureSubs")
	}

	if raw, found := object["epsBearerSetup"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerSetup)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerSetup': %w", err)
		}
		delete(object, "epsBearerSetup")
	}

	if raw, found := object["epsInterworkingInd"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInd)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInd': %w", err)
		}
		delete(object, "epsInterworkingInd")
	}

	if raw, found := object["exemptionInd"]; found {
		err = json.Unmarshal(raw, &a.ExemptionInd)
		if err != nil {
			return fmt.Errorf("error reading 'exemptionInd': %w", err)
		}
		delete(object, "exemptionInd")
	}

	if raw, found := object["extendedNasSmTimerInd"]; found {
		err = json.Unmarshal(raw, &a.ExtendedNasSmTimerInd)
		if err != nil {
			return fmt.Errorf("error reading 'extendedNasSmTimerInd': %w", err)
		}
		delete(object, "extendedNasSmTimerInd")
	}

	if raw, found := object["failedToBeSwitched"]; found {
		err = json.Unmarshal(raw, &a.FailedToBeSwitched)
		if err != nil {
			return fmt.Errorf("error reading 'failedToBeSwitched': %w", err)
		}
		delete(object, "failedToBeSwitched")
	}

	if raw, found := object["forwardingBearerContexts"]; found {
		err = json.Unmarshal(raw, &a.ForwardingBearerContexts)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingBearerContexts': %w", err)
		}
		delete(object, "forwardingBearerContexts")
	}

	if raw, found := object["forwardingFTeid"]; found {
		err = json.Unmarshal(raw, &a.ForwardingFTeid)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingFTeid': %w", err)
		}
		delete(object, "forwardingFTeid")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["maNwUpgradeInd"]; found {
		err = json.Unmarshal(raw, &a.MaNwUpgradeInd)
		if err != nil {
			return fmt.Errorf("error reading 'maNwUpgradeInd': %w", err)
		}
		delete(object, "maNwUpgradeInd")
	}

	if raw, found := object["maReleaseInd"]; found {
		err = json.Unmarshal(raw, &a.MaReleaseInd)
		if err != nil {
			return fmt.Errorf("error reading 'maReleaseInd': %w", err)
		}
		delete(object, "maReleaseInd")
	}

	if raw, found := object["maRequestInd"]; found {
		err = json.Unmarshal(raw, &a.MaRequestInd)
		if err != nil {
			return fmt.Errorf("error reading 'maRequestInd': %w", err)
		}
		delete(object, "maRequestInd")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoExt1': %w", err)
		}
		delete(object, "n2SmInfoExt1")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["n2SmInfoTypeExt1"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoTypeExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoTypeExt1': %w", err)
		}
		delete(object, "n2SmInfoTypeExt1")
	}

	if raw, found := object["n9DlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N9DlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n9DlForwardingTnlList': %w", err)
		}
		delete(object, "n9DlForwardingTnlList")
	}

	if raw, found := object["n9ForwardingTunnel"]; found {
		err = json.Unmarshal(raw, &a.N9ForwardingTunnel)
		if err != nil {
			return fmt.Errorf("error reading 'n9ForwardingTunnel': %w", err)
		}
		delete(object, "n9ForwardingTunnel")
	}

	if raw, found := object["n9UlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N9UlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n9UlForwardingTnlList': %w", err)
		}
		delete(object, "n9UlForwardingTnlList")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["presenceInLadn"]; found {
		err = json.Unmarshal(raw, &a.PresenceInLadn)
		if err != nil {
			return fmt.Errorf("error reading 'presenceInLadn': %w", err)
		}
		delete(object, "presenceInLadn")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["release"]; found {
		err = json.Unmarshal(raw, &a.Release)
		if err != nil {
			return fmt.Errorf("error reading 'release': %w", err)
		}
		delete(object, "release")
	}

	if raw, found := object["revokeEbiList"]; found {
		err = json.Unmarshal(raw, &a.RevokeEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'revokeEbiList': %w", err)
		}
		delete(object, "revokeEbiList")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["servingNetwork"]; found {
		err = json.Unmarshal(raw, &a.ServingNetwork)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetwork': %w", err)
		}
		delete(object, "servingNetwork")
	}

	if raw, found := object["servingNfId"]; found {
		err = json.Unmarshal(raw, &a.ServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNfId': %w", err)
		}
		delete(object, "servingNfId")
	}

	if raw, found := object["skipN2PduSessionResRelInd"]; found {
		err = json.Unmarshal(raw, &a.SkipN2PduSessionResRelInd)
		if err != nil {
			return fmt.Errorf("error reading 'skipN2PduSessionResRelInd': %w", err)
		}
		delete(object, "skipN2PduSessionResRelInd")
	}

	if raw, found := object["smContextStatusUri"]; found {
		err = json.Unmarshal(raw, &a.SmContextStatusUri)
		if err != nil {
			return fmt.Errorf("error reading 'smContextStatusUri': %w", err)
		}
		delete(object, "smContextStatusUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["targetId"]; found {
		err = json.Unmarshal(raw, &a.TargetId)
		if err != nil {
			return fmt.Errorf("error reading 'targetId': %w", err)
		}
		delete(object, "targetId")
	}

	if raw, found := object["targetServingNfId"]; found {
		err = json.Unmarshal(raw, &a.TargetServingNfId)
		if err != nil {
			return fmt.Errorf("error reading 'targetServingNfId': %w", err)
		}
		delete(object, "targetServingNfId")
	}

	if raw, found := object["toBeSwitched"]; found {
		err = json.Unmarshal(raw, &a.ToBeSwitched)
		if err != nil {
			return fmt.Errorf("error reading 'toBeSwitched': %w", err)
		}
		delete(object, "toBeSwitched")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextUpdateData to handle AdditionalProperties
func (a SmContextUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AdditionalAnType) != 0 {
		object["additionalAnType"], err = json.Marshal(a.AdditionalAnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalAnType': %w", err)
		}
	}

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	if a.AnTypeCanBeChanged != nil {
		object["anTypeCanBeChanged"], err = json.Marshal(a.AnTypeCanBeChanged)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anTypeCanBeChanged': %w", err)
		}
	}

	if len(a.AnTypeToReactivate) != 0 {
		object["anTypeToReactivate"], err = json.Marshal(a.AnTypeToReactivate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anTypeToReactivate': %w", err)
		}
	}

	object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.DataForwarding != nil {
		object["dataForwarding"], err = json.Marshal(a.DataForwarding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataForwarding': %w", err)
		}
	}

	if a.DdnFailureSubs != nil {
		object["ddnFailureSubs"], err = json.Marshal(a.DdnFailureSubs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ddnFailureSubs': %w", err)
		}
	}

	if a.EpsBearerSetup != nil {
		object["epsBearerSetup"], err = json.Marshal(a.EpsBearerSetup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerSetup': %w", err)
		}
	}

	if a.EpsInterworkingInd != nil {
		object["epsInterworkingInd"], err = json.Marshal(a.EpsInterworkingInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInd': %w", err)
		}
	}

	if a.ExemptionInd != nil {
		object["exemptionInd"], err = json.Marshal(a.ExemptionInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'exemptionInd': %w", err)
		}
	}

	if a.ExtendedNasSmTimerInd != nil {
		object["extendedNasSmTimerInd"], err = json.Marshal(a.ExtendedNasSmTimerInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extendedNasSmTimerInd': %w", err)
		}
	}

	if a.FailedToBeSwitched != nil {
		object["failedToBeSwitched"], err = json.Marshal(a.FailedToBeSwitched)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedToBeSwitched': %w", err)
		}
	}

	if len(a.ForwardingBearerContexts) != 0 {
		object["forwardingBearerContexts"], err = json.Marshal(a.ForwardingBearerContexts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingBearerContexts': %w", err)
		}
	}

	if a.ForwardingFTeid != nil {
		object["forwardingFTeid"], err = json.Marshal(a.ForwardingFTeid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingFTeid': %w", err)
		}
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.MaNwUpgradeInd != nil {
		object["maNwUpgradeInd"], err = json.Marshal(a.MaNwUpgradeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maNwUpgradeInd': %w", err)
		}
	}

	if a.MaReleaseInd != nil {
		object["maReleaseInd"], err = json.Marshal(a.MaReleaseInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maReleaseInd': %w", err)
		}
	}

	if a.MaRequestInd != nil {
		object["maRequestInd"], err = json.Marshal(a.MaRequestInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maRequestInd': %w", err)
		}
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoExt1 != nil {
		object["n2SmInfoExt1"], err = json.Marshal(a.N2SmInfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoExt1': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.N2SmInfoTypeExt1 != nil {
		object["n2SmInfoTypeExt1"], err = json.Marshal(a.N2SmInfoTypeExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoTypeExt1': %w", err)
		}
	}

	if len(a.N9DlForwardingTnlList) != 0 {
		object["n9DlForwardingTnlList"], err = json.Marshal(a.N9DlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9DlForwardingTnlList': %w", err)
		}
	}

	if a.N9ForwardingTunnel != nil {
		object["n9ForwardingTunnel"], err = json.Marshal(a.N9ForwardingTunnel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9ForwardingTunnel': %w", err)
		}
	}

	if len(a.N9UlForwardingTnlList) != 0 {
		object["n9UlForwardingTnlList"], err = json.Marshal(a.N9UlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n9UlForwardingTnlList': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if len(a.Pei) != 0 {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PresenceInLadn != nil {
		object["presenceInLadn"], err = json.Marshal(a.PresenceInLadn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'presenceInLadn': %w", err)
		}
	}

	if a.RatType != nil {
		object["ratType"], err = json.Marshal(a.RatType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
		}
	}

	if a.Release != nil {
		object["release"], err = json.Marshal(a.Release)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'release': %w", err)
		}
	}

	if len(a.RevokeEbiList) != 0 {
		object["revokeEbiList"], err = json.Marshal(a.RevokeEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'revokeEbiList': %w", err)
		}
	}

	if a.SNssai != nil {
		object["sNssai"], err = json.Marshal(a.SNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
		}
	}

	if a.ServingNetwork != nil {
		object["servingNetwork"], err = json.Marshal(a.ServingNetwork)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetwork': %w", err)
		}
	}

	if a.ServingNfId != nil {
		object["servingNfId"], err = json.Marshal(a.ServingNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNfId': %w", err)
		}
	}

	if a.SkipN2PduSessionResRelInd != nil {
		object["skipN2PduSessionResRelInd"], err = json.Marshal(a.SkipN2PduSessionResRelInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'skipN2PduSessionResRelInd': %w", err)
		}
	}

	if a.SmContextStatusUri != nil {
		object["smContextStatusUri"], err = json.Marshal(a.SmContextStatusUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smContextStatusUri': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.TargetId != nil {
		object["targetId"], err = json.Marshal(a.TargetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetId': %w", err)
		}
	}

	if a.TargetServingNfId != nil {
		object["targetServingNfId"], err = json.Marshal(a.TargetServingNfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'targetServingNfId': %w", err)
		}
	}

	if a.ToBeSwitched != nil {
		object["toBeSwitched"], err = json.Marshal(a.ToBeSwitched)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'toBeSwitched': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextUpdateError. Returns the specified
// element and whether it was found
func (a SmContextUpdateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextUpdateError
func (a *SmContextUpdateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextUpdateError to handle AdditionalProperties
func (a *SmContextUpdateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextUpdateError to handle AdditionalProperties
func (a SmContextUpdateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmContextUpdatedData. Returns the specified
// element and whether it was found
func (a SmContextUpdatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmContextUpdatedData
func (a *SmContextUpdatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmContextUpdatedData to handle AdditionalProperties
func (a *SmContextUpdatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allocatedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AllocatedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'allocatedEbiList': %w", err)
		}
		delete(object, "allocatedEbiList")
	}

	if raw, found := object["anchorSmfFeatures"]; found {
		err = json.Unmarshal(raw, &a.AnchorSmfFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'anchorSmfFeatures': %w", err)
		}
		delete(object, "anchorSmfFeatures")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dataForwarding"]; found {
		err = json.Unmarshal(raw, &a.DataForwarding)
		if err != nil {
			return fmt.Errorf("error reading 'dataForwarding': %w", err)
		}
		delete(object, "dataForwarding")
	}

	if raw, found := object["epsBearerSetup"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerSetup)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerSetup': %w", err)
		}
		delete(object, "epsBearerSetup")
	}

	if raw, found := object["forwardingBearerContexts"]; found {
		err = json.Unmarshal(raw, &a.ForwardingBearerContexts)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingBearerContexts': %w", err)
		}
		delete(object, "forwardingBearerContexts")
	}

	if raw, found := object["forwardingFTeid"]; found {
		err = json.Unmarshal(raw, &a.ForwardingFTeid)
		if err != nil {
			return fmt.Errorf("error reading 'forwardingFTeid': %w", err)
		}
		delete(object, "forwardingFTeid")
	}

	if raw, found := object["hoState"]; found {
		err = json.Unmarshal(raw, &a.HoState)
		if err != nil {
			return fmt.Errorf("error reading 'hoState': %w", err)
		}
		delete(object, "hoState")
	}

	if raw, found := object["maAcceptedInd"]; found {
		err = json.Unmarshal(raw, &a.MaAcceptedInd)
		if err != nil {
			return fmt.Errorf("error reading 'maAcceptedInd': %w", err)
		}
		delete(object, "maAcceptedInd")
	}

	if raw, found := object["modifiedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ModifiedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'modifiedEbiList': %w", err)
		}
		delete(object, "modifiedEbiList")
	}

	if raw, found := object["n1SmMsg"]; found {
		err = json.Unmarshal(raw, &a.N1SmMsg)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmMsg': %w", err)
		}
		delete(object, "n1SmMsg")
	}

	if raw, found := object["n2SmInfo"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfo': %w", err)
		}
		delete(object, "n2SmInfo")
	}

	if raw, found := object["n2SmInfoType"]; found {
		err = json.Unmarshal(raw, &a.N2SmInfoType)
		if err != nil {
			return fmt.Errorf("error reading 'n2SmInfoType': %w", err)
		}
		delete(object, "n2SmInfoType")
	}

	if raw, found := object["n3DlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N3DlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n3DlForwardingTnlList': %w", err)
		}
		delete(object, "n3DlForwardingTnlList")
	}

	if raw, found := object["n3UlForwardingTnlList"]; found {
		err = json.Unmarshal(raw, &a.N3UlForwardingTnlList)
		if err != nil {
			return fmt.Errorf("error reading 'n3UlForwardingTnlList': %w", err)
		}
		delete(object, "n3UlForwardingTnlList")
	}

	if raw, found := object["releaseEbiList"]; found {
		err = json.Unmarshal(raw, &a.ReleaseEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'releaseEbiList': %w", err)
		}
		delete(object, "releaseEbiList")
	}

	if raw, found := object["selectedOldSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedOldSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedOldSmfId': %w", err)
		}
		delete(object, "selectedOldSmfId")
	}

	if raw, found := object["selectedSmfId"]; found {
		err = json.Unmarshal(raw, &a.SelectedSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'selectedSmfId': %w", err)
		}
		delete(object, "selectedSmfId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["upCnxState"]; found {
		err = json.Unmarshal(raw, &a.UpCnxState)
		if err != nil {
			return fmt.Errorf("error reading 'upCnxState': %w", err)
		}
		delete(object, "upCnxState")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmContextUpdatedData to handle AdditionalProperties
func (a SmContextUpdatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllocatedEbiList) != 0 {
		object["allocatedEbiList"], err = json.Marshal(a.AllocatedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allocatedEbiList': %w", err)
		}
	}

	if a.AnchorSmfFeatures != nil {
		object["anchorSmfFeatures"], err = json.Marshal(a.AnchorSmfFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anchorSmfFeatures': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.DataForwarding != nil {
		object["dataForwarding"], err = json.Marshal(a.DataForwarding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataForwarding': %w", err)
		}
	}

	if len(a.EpsBearerSetup) != 0 {
		object["epsBearerSetup"], err = json.Marshal(a.EpsBearerSetup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerSetup': %w", err)
		}
	}

	if len(a.ForwardingBearerContexts) != 0 {
		object["forwardingBearerContexts"], err = json.Marshal(a.ForwardingBearerContexts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingBearerContexts': %w", err)
		}
	}

	if a.ForwardingFTeid != nil {
		object["forwardingFTeid"], err = json.Marshal(a.ForwardingFTeid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forwardingFTeid': %w", err)
		}
	}

	if a.HoState != nil {
		object["hoState"], err = json.Marshal(a.HoState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hoState': %w", err)
		}
	}

	if a.MaAcceptedInd != nil {
		object["maAcceptedInd"], err = json.Marshal(a.MaAcceptedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maAcceptedInd': %w", err)
		}
	}

	if len(a.ModifiedEbiList) != 0 {
		object["modifiedEbiList"], err = json.Marshal(a.ModifiedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'modifiedEbiList': %w", err)
		}
	}

	if a.N1SmMsg != nil {
		object["n1SmMsg"], err = json.Marshal(a.N1SmMsg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmMsg': %w", err)
		}
	}

	if a.N2SmInfo != nil {
		object["n2SmInfo"], err = json.Marshal(a.N2SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfo': %w", err)
		}
	}

	if a.N2SmInfoType != nil {
		object["n2SmInfoType"], err = json.Marshal(a.N2SmInfoType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n2SmInfoType': %w", err)
		}
	}

	if len(a.N3DlForwardingTnlList) != 0 {
		object["n3DlForwardingTnlList"], err = json.Marshal(a.N3DlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3DlForwardingTnlList': %w", err)
		}
	}

	if len(a.N3UlForwardingTnlList) != 0 {
		object["n3UlForwardingTnlList"], err = json.Marshal(a.N3UlForwardingTnlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n3UlForwardingTnlList': %w", err)
		}
	}

	if len(a.ReleaseEbiList) != 0 {
		object["releaseEbiList"], err = json.Marshal(a.ReleaseEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'releaseEbiList': %w", err)
		}
	}

	if a.SelectedOldSmfId != nil {
		object["selectedOldSmfId"], err = json.Marshal(a.SelectedOldSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedOldSmfId': %w", err)
		}
	}

	if a.SelectedSmfId != nil {
		object["selectedSmfId"], err = json.Marshal(a.SelectedSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selectedSmfId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UpCnxState != nil {
		object["upCnxState"], err = json.Marshal(a.UpCnxState)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upCnxState': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StatusInfo. Returns the specified
// element and whether it was found
func (a StatusInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StatusInfo
func (a *StatusInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StatusInfo to handle AdditionalProperties
func (a *StatusInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["cnAssistedRanPara"]; found {
		err = json.Unmarshal(raw, &a.CnAssistedRanPara)
		if err != nil {
			return fmt.Errorf("error reading 'cnAssistedRanPara': %w", err)
		}
		delete(object, "cnAssistedRanPara")
	}

	if raw, found := object["resourceStatus"]; found {
		err = json.Unmarshal(raw, &a.ResourceStatus)
		if err != nil {
			return fmt.Errorf("error reading 'resourceStatus': %w", err)
		}
		delete(object, "resourceStatus")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StatusInfo to handle AdditionalProperties
func (a StatusInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.CnAssistedRanPara != nil {
		object["cnAssistedRanPara"], err = json.Marshal(a.CnAssistedRanPara)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cnAssistedRanPara': %w", err)
		}
	}

	object["resourceStatus"], err = json.Marshal(a.ResourceStatus)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resourceStatus': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StatusNotification. Returns the specified
// element and whether it was found
func (a StatusNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StatusNotification
func (a *StatusNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StatusNotification to handle AdditionalProperties
func (a *StatusNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["apnRateStatus"]; found {
		err = json.Unmarshal(raw, &a.ApnRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'apnRateStatus': %w", err)
		}
		delete(object, "apnRateStatus")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["newSmfId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfId': %w", err)
		}
		delete(object, "newSmfId")
	}

	if raw, found := object["smallDataRateStatus"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateStatus)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateStatus': %w", err)
		}
		delete(object, "smallDataRateStatus")
	}

	if raw, found := object["statusInfo"]; found {
		err = json.Unmarshal(raw, &a.StatusInfo)
		if err != nil {
			return fmt.Errorf("error reading 'statusInfo': %w", err)
		}
		delete(object, "statusInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StatusNotification to handle AdditionalProperties
func (a StatusNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ApnRateStatus != nil {
		object["apnRateStatus"], err = json.Marshal(a.ApnRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'apnRateStatus': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.NewSmfId != nil {
		object["newSmfId"], err = json.Marshal(a.NewSmfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfId': %w", err)
		}
	}

	if a.SmallDataRateStatus != nil {
		object["smallDataRateStatus"], err = json.Marshal(a.SmallDataRateStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateStatus': %w", err)
		}
	}

	object["statusInfo"], err = json.Marshal(a.StatusInfo)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'statusInfo': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMoDataReqData. Returns the specified
// element and whether it was found
func (a TransferMoDataReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMoDataReqData
func (a *TransferMoDataReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMoDataReqData to handle AdditionalProperties
func (a *TransferMoDataReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["moData"]; found {
		err = json.Unmarshal(raw, &a.MoData)
		if err != nil {
			return fmt.Errorf("error reading 'moData': %w", err)
		}
		delete(object, "moData")
	}

	if raw, found := object["moExpDataCounter"]; found {
		err = json.Unmarshal(raw, &a.MoExpDataCounter)
		if err != nil {
			return fmt.Errorf("error reading 'moExpDataCounter': %w", err)
		}
		delete(object, "moExpDataCounter")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMoDataReqData to handle AdditionalProperties
func (a TransferMoDataReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["moData"], err = json.Marshal(a.MoData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'moData': %w", err)
	}

	if a.MoExpDataCounter != nil {
		object["moExpDataCounter"], err = json.Marshal(a.MoExpDataCounter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moExpDataCounter': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMtDataAddInfo. Returns the specified
// element and whether it was found
func (a TransferMtDataAddInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMtDataAddInfo
func (a *TransferMtDataAddInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMtDataAddInfo to handle AdditionalProperties
func (a *TransferMtDataAddInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMtDataAddInfo to handle AdditionalProperties
func (a TransferMtDataAddInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMtDataError. Returns the specified
// element and whether it was found
func (a TransferMtDataError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMtDataError
func (a *TransferMtDataError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMtDataError to handle AdditionalProperties
func (a *TransferMtDataError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTokenError"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenError)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenError': %w", err)
		}
		delete(object, "accessTokenError")
	}

	if raw, found := object["accessTokenRequest"]; found {
		err = json.Unmarshal(raw, &a.AccessTokenRequest)
		if err != nil {
			return fmt.Errorf("error reading 'accessTokenRequest': %w", err)
		}
		delete(object, "accessTokenRequest")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalidParams"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalidParams': %w", err)
		}
		delete(object, "invalidParams")
	}

	if raw, found := object["maxWaitingTime"]; found {
		err = json.Unmarshal(raw, &a.MaxWaitingTime)
		if err != nil {
			return fmt.Errorf("error reading 'maxWaitingTime': %w", err)
		}
		delete(object, "maxWaitingTime")
	}

	if raw, found := object["nrfId"]; found {
		err = json.Unmarshal(raw, &a.NrfId)
		if err != nil {
			return fmt.Errorf("error reading 'nrfId': %w", err)
		}
		delete(object, "nrfId")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMtDataError to handle AdditionalProperties
func (a TransferMtDataError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessTokenError != nil {
		object["accessTokenError"], err = json.Marshal(a.AccessTokenError)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenError': %w", err)
		}
	}

	if a.AccessTokenRequest != nil {
		object["accessTokenRequest"], err = json.Marshal(a.AccessTokenRequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessTokenRequest': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if len(a.InvalidParams) != 0 {
		object["invalidParams"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidParams': %w", err)
		}
	}

	if a.MaxWaitingTime != nil {
		object["maxWaitingTime"], err = json.Marshal(a.MaxWaitingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxWaitingTime': %w", err)
		}
	}

	if a.NrfId != nil {
		object["nrfId"], err = json.Marshal(a.NrfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrfId': %w", err)
		}
	}

	if a.Status != 0 {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TransferMtDataReqData. Returns the specified
// element and whether it was found
func (a TransferMtDataReqData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TransferMtDataReqData
func (a *TransferMtDataReqData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TransferMtDataReqData to handle AdditionalProperties
func (a *TransferMtDataReqData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["mtData"]; found {
		err = json.Unmarshal(raw, &a.MtData)
		if err != nil {
			return fmt.Errorf("error reading 'mtData': %w", err)
		}
		delete(object, "mtData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TransferMtDataReqData to handle AdditionalProperties
func (a TransferMtDataReqData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["mtData"], err = json.Marshal(a.MtData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mtData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TunnelInfo. Returns the specified
// element and whether it was found
func (a TunnelInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TunnelInfo
func (a *TunnelInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TunnelInfo to handle AdditionalProperties
func (a *TunnelInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anType"]; found {
		err = json.Unmarshal(raw, &a.AnType)
		if err != nil {
			return fmt.Errorf("error reading 'anType': %w", err)
		}
		delete(object, "anType")
	}

	if raw, found := object["gtpTeid"]; found {
		err = json.Unmarshal(raw, &a.GtpTeid)
		if err != nil {
			return fmt.Errorf("error reading 'gtpTeid': %w", err)
		}
		delete(object, "gtpTeid")
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TunnelInfo to handle AdditionalProperties
func (a TunnelInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AnType) != 0 {
		object["anType"], err = json.Marshal(a.AnType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anType': %w", err)
		}
	}

	object["gtpTeid"], err = json.Marshal(a.GtpTeid)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'gtpTeid': %w", err)
	}

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UlclBpInformation. Returns the specified
// element and whether it was found
func (a UlclBpInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UlclBpInformation
func (a *UlclBpInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UlclBpInformation to handle AdditionalProperties
func (a *UlclBpInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ulclBpUpfId"]; found {
		err = json.Unmarshal(raw, &a.UlclBpUpfId)
		if err != nil {
			return fmt.Errorf("error reading 'ulclBpUpfId': %w", err)
		}
		delete(object, "ulclBpUpfId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UlclBpInformation to handle AdditionalProperties
func (a UlclBpInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.UlclBpUpfId != nil {
		object["ulclBpUpfId"], err = json.Marshal(a.UlclBpUpfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ulclBpUpfId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpSecurityInfo. Returns the specified
// element and whether it was found
func (a UpSecurityInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpSecurityInfo
func (a *UpSecurityInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpSecurityInfo to handle AdditionalProperties
func (a *UpSecurityInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["maxIntegrityProtectedDataRateDl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateDl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateDl")
	}

	if raw, found := object["maxIntegrityProtectedDataRateUl"]; found {
		err = json.Unmarshal(raw, &a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxIntegrityProtectedDataRateUl': %w", err)
		}
		delete(object, "maxIntegrityProtectedDataRateUl")
	}

	if raw, found := object["securityResult"]; found {
		err = json.Unmarshal(raw, &a.SecurityResult)
		if err != nil {
			return fmt.Errorf("error reading 'securityResult': %w", err)
		}
		delete(object, "securityResult")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpSecurityInfo to handle AdditionalProperties
func (a UpSecurityInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MaxIntegrityProtectedDataRateDl != nil {
		object["maxIntegrityProtectedDataRateDl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateDl': %w", err)
		}
	}

	if a.MaxIntegrityProtectedDataRateUl != nil {
		object["maxIntegrityProtectedDataRateUl"], err = json.Marshal(a.MaxIntegrityProtectedDataRateUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxIntegrityProtectedDataRateUl': %w", err)
		}
	}

	if a.SecurityResult != nil {
		object["securityResult"], err = json.Marshal(a.SecurityResult)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'securityResult': %w", err)
		}
	}

	object["upSecurity"], err = json.Marshal(a.UpSecurity)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VplmnQos. Returns the specified
// element and whether it was found
func (a VplmnQos) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VplmnQos
func (a *VplmnQos) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VplmnQos to handle AdditionalProperties
func (a *VplmnQos) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5qi"]; found {
		err = json.Unmarshal(raw, &a.N5qi)
		if err != nil {
			return fmt.Errorf("error reading '5qi': %w", err)
		}
		delete(object, "5qi")
	}

	if raw, found := object["arp"]; found {
		err = json.Unmarshal(raw, &a.Arp)
		if err != nil {
			return fmt.Errorf("error reading 'arp': %w", err)
		}
		delete(object, "arp")
	}

	if raw, found := object["guaFbrDl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrDl': %w", err)
		}
		delete(object, "guaFbrDl")
	}

	if raw, found := object["guaFbrUl"]; found {
		err = json.Unmarshal(raw, &a.GuaFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'guaFbrUl': %w", err)
		}
		delete(object, "guaFbrUl")
	}

	if raw, found := object["maxFbrDl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrDl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrDl': %w", err)
		}
		delete(object, "maxFbrDl")
	}

	if raw, found := object["maxFbrUl"]; found {
		err = json.Unmarshal(raw, &a.MaxFbrUl)
		if err != nil {
			return fmt.Errorf("error reading 'maxFbrUl': %w", err)
		}
		delete(object, "maxFbrUl")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VplmnQos to handle AdditionalProperties
func (a VplmnQos) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5qi != nil {
		object["5qi"], err = json.Marshal(a.N5qi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5qi': %w", err)
		}
	}

	if a.Arp != nil {
		object["arp"], err = json.Marshal(a.Arp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'arp': %w", err)
		}
	}

	if len(a.GuaFbrDl) != 0 {
		object["guaFbrDl"], err = json.Marshal(a.GuaFbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrDl': %w", err)
		}
	}

	if len(a.GuaFbrUl) != 0 {
		object["guaFbrUl"], err = json.Marshal(a.GuaFbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guaFbrUl': %w", err)
		}
	}

	if len(a.MaxFbrDl) != 0 {
		object["maxFbrDl"], err = json.Marshal(a.MaxFbrDl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxFbrDl': %w", err)
		}
	}

	if len(a.MaxFbrUl) != 0 {
		object["maxFbrUl"], err = json.Marshal(a.MaxFbrUl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maxFbrUl': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VsmfUpdateData. Returns the specified
// element and whether it was found
func (a VsmfUpdateData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VsmfUpdateData
func (a *VsmfUpdateData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VsmfUpdateData to handle AdditionalProperties
func (a *VsmfUpdateData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalCnTunnelInfo"]; found {
		err = json.Unmarshal(raw, &a.AdditionalCnTunnelInfo)
		if err != nil {
			return fmt.Errorf("error reading 'additionalCnTunnelInfo': %w", err)
		}
		delete(object, "additionalCnTunnelInfo")
	}

	if raw, found := object["alwaysOnGranted"]; found {
		err = json.Unmarshal(raw, &a.AlwaysOnGranted)
		if err != nil {
			return fmt.Errorf("error reading 'alwaysOnGranted': %w", err)
		}
		delete(object, "alwaysOnGranted")
	}

	if raw, found := object["assignEbiList"]; found {
		err = json.Unmarshal(raw, &a.AssignEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'assignEbiList': %w", err)
		}
		delete(object, "assignEbiList")
	}

	if raw, found := object["backOffTimer"]; found {
		err = json.Unmarshal(raw, &a.BackOffTimer)
		if err != nil {
			return fmt.Errorf("error reading 'backOffTimer': %w", err)
		}
		delete(object, "backOffTimer")
	}

	if raw, found := object["cause"]; found {
		err = json.Unmarshal(raw, &a.Cause)
		if err != nil {
			return fmt.Errorf("error reading 'cause': %w", err)
		}
		delete(object, "cause")
	}

	if raw, found := object["dnaiList"]; found {
		err = json.Unmarshal(raw, &a.DnaiList)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiList': %w", err)
		}
		delete(object, "dnaiList")
	}

	if raw, found := object["epsBearerInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsBearerInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsBearerInfo': %w", err)
		}
		delete(object, "epsBearerInfo")
	}

	if raw, found := object["epsPdnCnxInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsPdnCnxInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsPdnCnxInfo': %w", err)
		}
		delete(object, "epsPdnCnxInfo")
	}

	if raw, found := object["hsmfPduSessionUri"]; found {
		err = json.Unmarshal(raw, &a.HsmfPduSessionUri)
		if err != nil {
			return fmt.Errorf("error reading 'hsmfPduSessionUri': %w", err)
		}
		delete(object, "hsmfPduSessionUri")
	}

	if raw, found := object["maAcceptedInd"]; found {
		err = json.Unmarshal(raw, &a.MaAcceptedInd)
		if err != nil {
			return fmt.Errorf("error reading 'maAcceptedInd': %w", err)
		}
		delete(object, "maAcceptedInd")
	}

	if raw, found := object["maReleaseInd"]; found {
		err = json.Unmarshal(raw, &a.MaReleaseInd)
		if err != nil {
			return fmt.Errorf("error reading 'maReleaseInd': %w", err)
		}
		delete(object, "maReleaseInd")
	}

	if raw, found := object["modifiedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ModifiedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'modifiedEbiList': %w", err)
		}
		delete(object, "modifiedEbiList")
	}

	if raw, found := object["n1SmInfoToUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoToUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoToUe': %w", err)
		}
		delete(object, "n1SmInfoToUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["qosFlowsAddModRequestList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsAddModRequestList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsAddModRequestList': %w", err)
		}
		delete(object, "qosFlowsAddModRequestList")
	}

	if raw, found := object["qosFlowsRelRequestList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsRelRequestList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsRelRequestList': %w", err)
		}
		delete(object, "qosFlowsRelRequestList")
	}

	if raw, found := object["qosMonitoringInfo"]; found {
		err = json.Unmarshal(raw, &a.QosMonitoringInfo)
		if err != nil {
			return fmt.Errorf("error reading 'qosMonitoringInfo': %w", err)
		}
		delete(object, "qosMonitoringInfo")
	}

	if raw, found := object["requestIndication"]; found {
		err = json.Unmarshal(raw, &a.RequestIndication)
		if err != nil {
			return fmt.Errorf("error reading 'requestIndication': %w", err)
		}
		delete(object, "requestIndication")
	}

	if raw, found := object["revokeEbiList"]; found {
		err = json.Unmarshal(raw, &a.RevokeEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'revokeEbiList': %w", err)
		}
		delete(object, "revokeEbiList")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["smallDataRateControlEnabled"]; found {
		err = json.Unmarshal(raw, &a.SmallDataRateControlEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'smallDataRateControlEnabled': %w", err)
		}
		delete(object, "smallDataRateControlEnabled")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VsmfUpdateData to handle AdditionalProperties
func (a VsmfUpdateData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalCnTunnelInfo != nil {
		object["additionalCnTunnelInfo"], err = json.Marshal(a.AdditionalCnTunnelInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalCnTunnelInfo': %w", err)
		}
	}

	if a.AlwaysOnGranted != nil {
		object["alwaysOnGranted"], err = json.Marshal(a.AlwaysOnGranted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'alwaysOnGranted': %w", err)
		}
	}

	if len(a.AssignEbiList) != 0 {
		object["assignEbiList"], err = json.Marshal(a.AssignEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'assignEbiList': %w", err)
		}
	}

	if a.BackOffTimer != nil {
		object["backOffTimer"], err = json.Marshal(a.BackOffTimer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backOffTimer': %w", err)
		}
	}

	if a.Cause != nil {
		object["cause"], err = json.Marshal(a.Cause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cause': %w", err)
		}
	}

	if a.DnaiList != nil {
		object["dnaiList"], err = json.Marshal(a.DnaiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiList': %w", err)
		}
	}

	if len(a.EpsBearerInfo) != 0 {
		object["epsBearerInfo"], err = json.Marshal(a.EpsBearerInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsBearerInfo': %w", err)
		}
	}

	if a.EpsPdnCnxInfo != nil {
		object["epsPdnCnxInfo"], err = json.Marshal(a.EpsPdnCnxInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsPdnCnxInfo': %w", err)
		}
	}

	if a.HsmfPduSessionUri != nil {
		object["hsmfPduSessionUri"], err = json.Marshal(a.HsmfPduSessionUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hsmfPduSessionUri': %w", err)
		}
	}

	if a.MaAcceptedInd != nil {
		object["maAcceptedInd"], err = json.Marshal(a.MaAcceptedInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maAcceptedInd': %w", err)
		}
	}

	if a.MaReleaseInd != nil {
		object["maReleaseInd"], err = json.Marshal(a.MaReleaseInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'maReleaseInd': %w", err)
		}
	}

	if len(a.ModifiedEbiList) != 0 {
		object["modifiedEbiList"], err = json.Marshal(a.ModifiedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'modifiedEbiList': %w", err)
		}
	}

	if a.N1SmInfoToUe != nil {
		object["n1SmInfoToUe"], err = json.Marshal(a.N1SmInfoToUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoToUe': %w", err)
		}
	}

	if a.N1smCause != nil {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if len(a.QosFlowsAddModRequestList) != 0 {
		object["qosFlowsAddModRequestList"], err = json.Marshal(a.QosFlowsAddModRequestList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsAddModRequestList': %w", err)
		}
	}

	if len(a.QosFlowsRelRequestList) != 0 {
		object["qosFlowsRelRequestList"], err = json.Marshal(a.QosFlowsRelRequestList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsRelRequestList': %w", err)
		}
	}

	if a.QosMonitoringInfo != nil {
		object["qosMonitoringInfo"], err = json.Marshal(a.QosMonitoringInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosMonitoringInfo': %w", err)
		}
	}

	object["requestIndication"], err = json.Marshal(a.RequestIndication)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'requestIndication': %w", err)
	}

	if len(a.RevokeEbiList) != 0 {
		object["revokeEbiList"], err = json.Marshal(a.RevokeEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'revokeEbiList': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	if a.SmallDataRateControlEnabled != nil {
		object["smallDataRateControlEnabled"], err = json.Marshal(a.SmallDataRateControlEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smallDataRateControlEnabled': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VsmfUpdateError. Returns the specified
// element and whether it was found
func (a VsmfUpdateError) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VsmfUpdateError
func (a *VsmfUpdateError) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VsmfUpdateError to handle AdditionalProperties
func (a *VsmfUpdateError) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gMmCauseValue"]; found {
		err = json.Unmarshal(raw, &a.N5gMmCauseValue)
		if err != nil {
			return fmt.Errorf("error reading '5gMmCauseValue': %w", err)
		}
		delete(object, "5gMmCauseValue")
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["failedToAssignEbiList"]; found {
		err = json.Unmarshal(raw, &a.FailedToAssignEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'failedToAssignEbiList': %w", err)
		}
		delete(object, "failedToAssignEbiList")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n1smCause"]; found {
		err = json.Unmarshal(raw, &a.N1smCause)
		if err != nil {
			return fmt.Errorf("error reading 'n1smCause': %w", err)
		}
		delete(object, "n1smCause")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["ngApCause"]; found {
		err = json.Unmarshal(raw, &a.NgApCause)
		if err != nil {
			return fmt.Errorf("error reading 'ngApCause': %w", err)
		}
		delete(object, "ngApCause")
	}

	if raw, found := object["pti"]; found {
		err = json.Unmarshal(raw, &a.Pti)
		if err != nil {
			return fmt.Errorf("error reading 'pti': %w", err)
		}
		delete(object, "pti")
	}

	if raw, found := object["recoveryTime"]; found {
		err = json.Unmarshal(raw, &a.RecoveryTime)
		if err != nil {
			return fmt.Errorf("error reading 'recoveryTime': %w", err)
		}
		delete(object, "recoveryTime")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VsmfUpdateError to handle AdditionalProperties
func (a VsmfUpdateError) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gMmCauseValue != nil {
		object["5gMmCauseValue"], err = json.Marshal(a.N5gMmCauseValue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gMmCauseValue': %w", err)
		}
	}

	object["error"], err = json.Marshal(a.Error)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'error': %w", err)
	}

	if len(a.FailedToAssignEbiList) != 0 {
		object["failedToAssignEbiList"], err = json.Marshal(a.FailedToAssignEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedToAssignEbiList': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if len(a.N1smCause) != 0 {
		object["n1smCause"], err = json.Marshal(a.N1smCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1smCause': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if a.NgApCause != nil {
		object["ngApCause"], err = json.Marshal(a.NgApCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ngApCause': %w", err)
		}
	}

	if a.Pti != nil {
		object["pti"], err = json.Marshal(a.Pti)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pti': %w", err)
		}
	}

	if a.RecoveryTime != nil {
		object["recoveryTime"], err = json.Marshal(a.RecoveryTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'recoveryTime': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VsmfUpdatedData. Returns the specified
// element and whether it was found
func (a VsmfUpdatedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VsmfUpdatedData
func (a *VsmfUpdatedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VsmfUpdatedData to handle AdditionalProperties
func (a *VsmfUpdatedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addUeLocation"]; found {
		err = json.Unmarshal(raw, &a.AddUeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'addUeLocation': %w", err)
		}
		delete(object, "addUeLocation")
	}

	if raw, found := object["assignedEbiList"]; found {
		err = json.Unmarshal(raw, &a.AssignedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'assignedEbiList': %w", err)
		}
		delete(object, "assignedEbiList")
	}

	if raw, found := object["failedToAssignEbiList"]; found {
		err = json.Unmarshal(raw, &a.FailedToAssignEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'failedToAssignEbiList': %w", err)
		}
		delete(object, "failedToAssignEbiList")
	}

	if raw, found := object["n1SmInfoFromUe"]; found {
		err = json.Unmarshal(raw, &a.N1SmInfoFromUe)
		if err != nil {
			return fmt.Errorf("error reading 'n1SmInfoFromUe': %w", err)
		}
		delete(object, "n1SmInfoFromUe")
	}

	if raw, found := object["n4Info"]; found {
		err = json.Unmarshal(raw, &a.N4Info)
		if err != nil {
			return fmt.Errorf("error reading 'n4Info': %w", err)
		}
		delete(object, "n4Info")
	}

	if raw, found := object["n4InfoExt1"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt1)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt1': %w", err)
		}
		delete(object, "n4InfoExt1")
	}

	if raw, found := object["n4InfoExt2"]; found {
		err = json.Unmarshal(raw, &a.N4InfoExt2)
		if err != nil {
			return fmt.Errorf("error reading 'n4InfoExt2': %w", err)
		}
		delete(object, "n4InfoExt2")
	}

	if raw, found := object["qosFlowsAddModList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsAddModList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsAddModList': %w", err)
		}
		delete(object, "qosFlowsAddModList")
	}

	if raw, found := object["qosFlowsFailedtoAddModList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsFailedtoAddModList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsFailedtoAddModList': %w", err)
		}
		delete(object, "qosFlowsFailedtoAddModList")
	}

	if raw, found := object["qosFlowsFailedtoRelList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsFailedtoRelList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsFailedtoRelList': %w", err)
		}
		delete(object, "qosFlowsFailedtoRelList")
	}

	if raw, found := object["qosFlowsRelList"]; found {
		err = json.Unmarshal(raw, &a.QosFlowsRelList)
		if err != nil {
			return fmt.Errorf("error reading 'qosFlowsRelList': %w", err)
		}
		delete(object, "qosFlowsRelList")
	}

	if raw, found := object["releasedEbiList"]; found {
		err = json.Unmarshal(raw, &a.ReleasedEbiList)
		if err != nil {
			return fmt.Errorf("error reading 'releasedEbiList': %w", err)
		}
		delete(object, "releasedEbiList")
	}

	if raw, found := object["secondaryRatUsageInfo"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageInfo)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageInfo': %w", err)
		}
		delete(object, "secondaryRatUsageInfo")
	}

	if raw, found := object["secondaryRatUsageReport"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatUsageReport)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatUsageReport': %w", err)
		}
		delete(object, "secondaryRatUsageReport")
	}

	if raw, found := object["ueLocation"]; found {
		err = json.Unmarshal(raw, &a.UeLocation)
		if err != nil {
			return fmt.Errorf("error reading 'ueLocation': %w", err)
		}
		delete(object, "ueLocation")
	}

	if raw, found := object["ueTimeZone"]; found {
		err = json.Unmarshal(raw, &a.UeTimeZone)
		if err != nil {
			return fmt.Errorf("error reading 'ueTimeZone': %w", err)
		}
		delete(object, "ueTimeZone")
	}

	if raw, found := object["unknownN1SmInfo"]; found {
		err = json.Unmarshal(raw, &a.UnknownN1SmInfo)
		if err != nil {
			return fmt.Errorf("error reading 'unknownN1SmInfo': %w", err)
		}
		delete(object, "unknownN1SmInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VsmfUpdatedData to handle AdditionalProperties
func (a VsmfUpdatedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddUeLocation != nil {
		object["addUeLocation"], err = json.Marshal(a.AddUeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addUeLocation': %w", err)
		}
	}

	if len(a.AssignedEbiList) != 0 {
		object["assignedEbiList"], err = json.Marshal(a.AssignedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'assignedEbiList': %w", err)
		}
	}

	if len(a.FailedToAssignEbiList) != 0 {
		object["failedToAssignEbiList"], err = json.Marshal(a.FailedToAssignEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'failedToAssignEbiList': %w", err)
		}
	}

	if a.N1SmInfoFromUe != nil {
		object["n1SmInfoFromUe"], err = json.Marshal(a.N1SmInfoFromUe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n1SmInfoFromUe': %w", err)
		}
	}

	if a.N4Info != nil {
		object["n4Info"], err = json.Marshal(a.N4Info)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4Info': %w", err)
		}
	}

	if a.N4InfoExt1 != nil {
		object["n4InfoExt1"], err = json.Marshal(a.N4InfoExt1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt1': %w", err)
		}
	}

	if a.N4InfoExt2 != nil {
		object["n4InfoExt2"], err = json.Marshal(a.N4InfoExt2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n4InfoExt2': %w", err)
		}
	}

	if len(a.QosFlowsAddModList) != 0 {
		object["qosFlowsAddModList"], err = json.Marshal(a.QosFlowsAddModList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsAddModList': %w", err)
		}
	}

	if len(a.QosFlowsFailedtoAddModList) != 0 {
		object["qosFlowsFailedtoAddModList"], err = json.Marshal(a.QosFlowsFailedtoAddModList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsFailedtoAddModList': %w", err)
		}
	}

	if len(a.QosFlowsFailedtoRelList) != 0 {
		object["qosFlowsFailedtoRelList"], err = json.Marshal(a.QosFlowsFailedtoRelList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsFailedtoRelList': %w", err)
		}
	}

	if len(a.QosFlowsRelList) != 0 {
		object["qosFlowsRelList"], err = json.Marshal(a.QosFlowsRelList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'qosFlowsRelList': %w", err)
		}
	}

	if len(a.ReleasedEbiList) != 0 {
		object["releasedEbiList"], err = json.Marshal(a.ReleasedEbiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'releasedEbiList': %w", err)
		}
	}

	if len(a.SecondaryRatUsageInfo) != 0 {
		object["secondaryRatUsageInfo"], err = json.Marshal(a.SecondaryRatUsageInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageInfo': %w", err)
		}
	}

	if len(a.SecondaryRatUsageReport) != 0 {
		object["secondaryRatUsageReport"], err = json.Marshal(a.SecondaryRatUsageReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatUsageReport': %w", err)
		}
	}

	if a.UeLocation != nil {
		object["ueLocation"], err = json.Marshal(a.UeLocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueLocation': %w", err)
		}
	}

	if a.UeTimeZone != nil {
		object["ueTimeZone"], err = json.Marshal(a.UeTimeZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueTimeZone': %w", err)
		}
	}

	if a.UnknownN1SmInfo != nil {
		object["unknownN1SmInfo"], err = json.Marshal(a.UnknownN1SmInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unknownN1SmInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPduSessionsWithBody request with any body
	PostPduSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPduSessions(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePduSessionWithBody request with any body
	UpdatePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePduSession(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleasePduSessionWithBody request with any body
	ReleasePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReleasePduSession(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrievePduSessionWithBody request with any body
	RetrievePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetrievePduSession(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferMoDataWithBody request with any body
	TransferMoDataWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSmContextsWithBody request with any body
	PostSmContextsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSmContextWithBody request with any body
	UpdateSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSmContext(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleaseSmContextWithBody request with any body
	ReleaseSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReleaseSmContext(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveSmContextWithBody request with any body
	RetrieveSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetrieveSmContext(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendMoDataWithBody request with any body
	SendMoDataWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPduSessionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPduSessionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPduSessions(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPduSessionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePduSessionRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePduSession(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePduSessionRequest(c.Server, pduSessionRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleasePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleasePduSessionRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleasePduSession(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleasePduSessionRequest(c.Server, pduSessionRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrievePduSessionWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrievePduSessionRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrievePduSession(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrievePduSessionRequest(c.Server, pduSessionRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferMoDataWithBody(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferMoDataRequestWithBody(c.Server, pduSessionRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSmContextsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSmContextsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSmContextRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSmContext(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSmContextRequest(c.Server, smContextRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseSmContextRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleaseSmContext(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleaseSmContextRequest(c.Server, smContextRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveSmContextWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveSmContextRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveSmContext(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveSmContextRequest(c.Server, smContextRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendMoDataWithBody(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendMoDataRequestWithBody(c.Server, smContextRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPduSessionsRequest calls the generic PostPduSessions builder with application/json body
func NewPostPduSessionsRequest(server string, body PostPduSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPduSessionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPduSessionsRequestWithBody generates requests for PostPduSessions with any type of body
func NewPostPduSessionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePduSessionRequest calls the generic UpdatePduSession builder with application/json body
func NewUpdatePduSessionRequest(server string, pduSessionRef string, body UpdatePduSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePduSessionRequestWithBody(server, pduSessionRef, "application/json", bodyReader)
}

// NewUpdatePduSessionRequestWithBody generates requests for UpdatePduSession with any type of body
func NewUpdatePduSessionRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/modify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReleasePduSessionRequest calls the generic ReleasePduSession builder with application/json body
func NewReleasePduSessionRequest(server string, pduSessionRef string, body ReleasePduSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReleasePduSessionRequestWithBody(server, pduSessionRef, "application/json", bodyReader)
}

// NewReleasePduSessionRequestWithBody generates requests for ReleasePduSession with any type of body
func NewReleasePduSessionRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrievePduSessionRequest calls the generic RetrievePduSession builder with application/json body
func NewRetrievePduSessionRequest(server string, pduSessionRef string, body RetrievePduSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetrievePduSessionRequestWithBody(server, pduSessionRef, "application/json", bodyReader)
}

// NewRetrievePduSessionRequestWithBody generates requests for RetrievePduSession with any type of body
func NewRetrievePduSessionRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/retrieve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTransferMoDataRequestWithBody generates requests for TransferMoData with any type of body
func NewTransferMoDataRequestWithBody(server string, pduSessionRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pduSessionRef", runtime.ParamLocationPath, pduSessionRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdu-sessions/%s/transfer-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSmContextsRequestWithBody generates requests for PostSmContexts with any type of body
func NewPostSmContextsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSmContextRequest calls the generic UpdateSmContext builder with application/json body
func NewUpdateSmContextRequest(server string, smContextRef string, body UpdateSmContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSmContextRequestWithBody(server, smContextRef, "application/json", bodyReader)
}

// NewUpdateSmContextRequestWithBody generates requests for UpdateSmContext with any type of body
func NewUpdateSmContextRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/modify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReleaseSmContextRequest calls the generic ReleaseSmContext builder with application/json body
func NewReleaseSmContextRequest(server string, smContextRef string, body ReleaseSmContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReleaseSmContextRequestWithBody(server, smContextRef, "application/json", bodyReader)
}

// NewReleaseSmContextRequestWithBody generates requests for ReleaseSmContext with any type of body
func NewReleaseSmContextRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveSmContextRequest calls the generic RetrieveSmContext builder with application/json body
func NewRetrieveSmContextRequest(server string, smContextRef string, body RetrieveSmContextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetrieveSmContextRequestWithBody(server, smContextRef, "application/json", bodyReader)
}

// NewRetrieveSmContextRequestWithBody generates requests for RetrieveSmContext with any type of body
func NewRetrieveSmContextRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/retrieve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendMoDataRequestWithBody generates requests for SendMoData with any type of body
func NewSendMoDataRequestWithBody(server string, smContextRef string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "smContextRef", runtime.ParamLocationPath, smContextRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sm-contexts/%s/send-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPduSessionsWithBodyWithResponse request with any body
	PostPduSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error)

	PostPduSessionsWithResponse(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error)

	// UpdatePduSessionWithBodyWithResponse request with any body
	UpdatePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error)

	UpdatePduSessionWithResponse(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error)

	// ReleasePduSessionWithBodyWithResponse request with any body
	ReleasePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error)

	ReleasePduSessionWithResponse(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error)

	// RetrievePduSessionWithBodyWithResponse request with any body
	RetrievePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error)

	RetrievePduSessionWithResponse(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error)

	// TransferMoDataWithBodyWithResponse request with any body
	TransferMoDataWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferMoDataResponse, error)

	// PostSmContextsWithBodyWithResponse request with any body
	PostSmContextsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmContextsResponse, error)

	// UpdateSmContextWithBodyWithResponse request with any body
	UpdateSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error)

	UpdateSmContextWithResponse(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error)

	// ReleaseSmContextWithBodyWithResponse request with any body
	ReleaseSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error)

	ReleaseSmContextWithResponse(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error)

	// RetrieveSmContextWithBodyWithResponse request with any body
	RetrieveSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error)

	RetrieveSmContextWithResponse(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error)

	// SendMoDataWithBodyWithResponse request with any body
	SendMoDataWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendMoDataResponse, error)
}

type PostPduSessionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *PduSessionCreatedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	JSON400                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON400     *PduSessionCreateErrorApplicationProblemPlusJSON
	JSON403                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON403     *PduSessionCreateErrorApplicationProblemPlusJSON
	JSON404                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON404     *PduSessionCreateErrorApplicationProblemPlusJSON
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	JSON500                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON500     *PduSessionCreateErrorApplicationProblemPlusJSON
	JSON503                       *PduSessionCreateErrorApplicationJSON
	ApplicationproblemJSON503     *PduSessionCreateErrorApplicationProblemPlusJSON
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r PostPduSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPduSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePduSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *HsmfUpdatedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	JSON400                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON400     *HsmfUpdateErrorApplicationProblemPlusJSON
	JSON403                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON403     *HsmfUpdateErrorApplicationProblemPlusJSON
	JSON404                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON404     *HsmfUpdateErrorApplicationProblemPlusJSON
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	JSON500                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON500     *HsmfUpdateErrorApplicationProblemPlusJSON
	JSON503                       *HsmfUpdateErrorApplicationJSON
	ApplicationproblemJSON503     *HsmfUpdateErrorApplicationProblemPlusJSON
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r UpdatePduSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePduSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleasePduSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ReleasedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r ReleasePduSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleasePduSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrievePduSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *RetrievedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSON504     *externalRef1.N504
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r RetrievePduSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrievePduSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON401     *externalRef1.N401
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r TransferMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSmContextsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SmContextCreatedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	JSON400                       *SmContextCreateError
	ApplicationproblemJSON400     *externalRef1.ProblemDetails
	JSON403                       *SmContextCreateError
	ApplicationproblemJSON403     *externalRef1.ProblemDetails
	JSON404                       *SmContextCreateError
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *N413
	ApplicationproblemJSON415     *N415
	ApplicationproblemJSON429     *N429
	JSON500                       *SmContextCreateError
	ApplicationproblemJSON500     *externalRef1.ProblemDetails
	JSON503                       *SmContextCreateError
	ApplicationproblemJSON503     *externalRef1.ProblemDetails
	JSON504                       *SmContextCreateError
	ApplicationproblemJSON504     *externalRef1.ProblemDetails
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r PostSmContextsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSmContextsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSmContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmContextUpdatedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	JSON400                       *SmContextUpdateError
	ApplicationproblemJSON400     *externalRef1.ProblemDetails
	JSON403                       *SmContextUpdateError
	ApplicationproblemJSON403     *externalRef1.ProblemDetails
	JSON404                       *SmContextUpdateError
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *N413
	ApplicationproblemJSON415     *N415
	ApplicationproblemJSON429     *N429
	JSON500                       *SmContextUpdateError
	ApplicationproblemJSON500     *externalRef1.ProblemDetails
	JSON503                       *SmContextUpdateError
	ApplicationproblemJSON503     *externalRef1.ProblemDetails
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r UpdateSmContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSmContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleaseSmContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmContextReleasedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r ReleaseSmContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleaseSmContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveSmContextResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmContextRetrievedData
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	ApplicationproblemJSON400     *externalRef1.N400
	ApplicationproblemJSON403     *externalRef1.N403
	ApplicationproblemJSON404     *externalRef1.N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *externalRef1.N413
	ApplicationproblemJSON415     *externalRef1.N415
	ApplicationproblemJSON429     *externalRef1.N429
	ApplicationproblemJSON500     *externalRef1.N500
	ApplicationproblemJSON503     *externalRef1.N503
	ApplicationproblemJSON504     *externalRef1.N504
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r RetrieveSmContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveSmContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON307                       *externalRef1.N307
	JSON308                       *externalRef1.N308
	ApplicationproblemJSON400     *N400
	ApplicationproblemJSON401     *N401
	ApplicationproblemJSON403     *N403
	ApplicationproblemJSON404     *N404
	ApplicationproblemJSON411     *externalRef1.N411
	ApplicationproblemJSON413     *N413
	ApplicationproblemJSON415     *N415
	ApplicationproblemJSON429     *N429
	ApplicationproblemJSON500     *N500
	ApplicationproblemJSON503     *N503
	ApplicationproblemJSONDefault *externalRef1.Default
}

// Status returns HTTPResponse.Status
func (r SendMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPduSessionsWithBodyWithResponse request with arbitrary body returning *PostPduSessionsResponse
func (c *ClientWithResponses) PostPduSessionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error) {
	rsp, err := c.PostPduSessionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPduSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostPduSessionsWithResponse(ctx context.Context, body PostPduSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPduSessionsResponse, error) {
	rsp, err := c.PostPduSessions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPduSessionsResponse(rsp)
}

// UpdatePduSessionWithBodyWithResponse request with arbitrary body returning *UpdatePduSessionResponse
func (c *ClientWithResponses) UpdatePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error) {
	rsp, err := c.UpdatePduSessionWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePduSessionResponse(rsp)
}

func (c *ClientWithResponses) UpdatePduSessionWithResponse(ctx context.Context, pduSessionRef string, body UpdatePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePduSessionResponse, error) {
	rsp, err := c.UpdatePduSession(ctx, pduSessionRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePduSessionResponse(rsp)
}

// ReleasePduSessionWithBodyWithResponse request with arbitrary body returning *ReleasePduSessionResponse
func (c *ClientWithResponses) ReleasePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error) {
	rsp, err := c.ReleasePduSessionWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleasePduSessionResponse(rsp)
}

func (c *ClientWithResponses) ReleasePduSessionWithResponse(ctx context.Context, pduSessionRef string, body ReleasePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleasePduSessionResponse, error) {
	rsp, err := c.ReleasePduSession(ctx, pduSessionRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleasePduSessionResponse(rsp)
}

// RetrievePduSessionWithBodyWithResponse request with arbitrary body returning *RetrievePduSessionResponse
func (c *ClientWithResponses) RetrievePduSessionWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error) {
	rsp, err := c.RetrievePduSessionWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrievePduSessionResponse(rsp)
}

func (c *ClientWithResponses) RetrievePduSessionWithResponse(ctx context.Context, pduSessionRef string, body RetrievePduSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrievePduSessionResponse, error) {
	rsp, err := c.RetrievePduSession(ctx, pduSessionRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrievePduSessionResponse(rsp)
}

// TransferMoDataWithBodyWithResponse request with arbitrary body returning *TransferMoDataResponse
func (c *ClientWithResponses) TransferMoDataWithBodyWithResponse(ctx context.Context, pduSessionRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferMoDataResponse, error) {
	rsp, err := c.TransferMoDataWithBody(ctx, pduSessionRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferMoDataResponse(rsp)
}

// PostSmContextsWithBodyWithResponse request with arbitrary body returning *PostSmContextsResponse
func (c *ClientWithResponses) PostSmContextsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSmContextsResponse, error) {
	rsp, err := c.PostSmContextsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSmContextsResponse(rsp)
}

// UpdateSmContextWithBodyWithResponse request with arbitrary body returning *UpdateSmContextResponse
func (c *ClientWithResponses) UpdateSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error) {
	rsp, err := c.UpdateSmContextWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSmContextResponse(rsp)
}

func (c *ClientWithResponses) UpdateSmContextWithResponse(ctx context.Context, smContextRef string, body UpdateSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSmContextResponse, error) {
	rsp, err := c.UpdateSmContext(ctx, smContextRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSmContextResponse(rsp)
}

// ReleaseSmContextWithBodyWithResponse request with arbitrary body returning *ReleaseSmContextResponse
func (c *ClientWithResponses) ReleaseSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error) {
	rsp, err := c.ReleaseSmContextWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseSmContextResponse(rsp)
}

func (c *ClientWithResponses) ReleaseSmContextWithResponse(ctx context.Context, smContextRef string, body ReleaseSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*ReleaseSmContextResponse, error) {
	rsp, err := c.ReleaseSmContext(ctx, smContextRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleaseSmContextResponse(rsp)
}

// RetrieveSmContextWithBodyWithResponse request with arbitrary body returning *RetrieveSmContextResponse
func (c *ClientWithResponses) RetrieveSmContextWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error) {
	rsp, err := c.RetrieveSmContextWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveSmContextResponse(rsp)
}

func (c *ClientWithResponses) RetrieveSmContextWithResponse(ctx context.Context, smContextRef string, body RetrieveSmContextJSONRequestBody, reqEditors ...RequestEditorFn) (*RetrieveSmContextResponse, error) {
	rsp, err := c.RetrieveSmContext(ctx, smContextRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveSmContextResponse(rsp)
}

// SendMoDataWithBodyWithResponse request with arbitrary body returning *SendMoDataResponse
func (c *ClientWithResponses) SendMoDataWithBodyWithResponse(ctx context.Context, smContextRef string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendMoDataResponse, error) {
	rsp, err := c.SendMoDataWithBody(ctx, smContextRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendMoDataResponse(rsp)
}

// ParsePostPduSessionsResponse parses an HTTP response from a PostPduSessionsWithResponse call
func ParsePostPduSessionsResponse(rsp *http.Response) (*PostPduSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPduSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PduSessionCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 404:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 404:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest PduSessionCreateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest PduSessionCreateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePduSessionResponse parses an HTTP response from a UpdatePduSessionWithResponse call
func ParseUpdatePduSessionResponse(rsp *http.Response) (*UpdatePduSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePduSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HsmfUpdatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 404:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 404:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest HsmfUpdateErrorApplicationJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest HsmfUpdateErrorApplicationProblemPlusJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReleasePduSessionResponse parses an HTTP response from a ReleasePduSessionWithResponse call
func ParseReleasePduSessionResponse(rsp *http.Response) (*ReleasePduSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleasePduSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReleasedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRetrievePduSessionResponse parses an HTTP response from a RetrievePduSessionWithResponse call
func ParseRetrievePduSessionResponse(rsp *http.Response) (*RetrievePduSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrievePduSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RetrievedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef1.N504
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseTransferMoDataResponse parses an HTTP response from a TransferMoDataWithResponse call
func ParseTransferMoDataResponse(rsp *http.Response) (*TransferMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransferMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef1.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePostSmContextsResponse parses an HTTP response from a PostSmContextsWithResponse call
func ParsePostSmContextsResponse(rsp *http.Response) (*PostSmContextsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSmContextsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmContextCreatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 504:
		var dest SmContextCreateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON504 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 504:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	case rsp.StatusCode == 504:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSmContextResponse parses an HTTP response from a UpdateSmContextWithResponse call
func ParseUpdateSmContextResponse(rsp *http.Response) (*UpdateSmContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSmContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmContextUpdatedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 400:
		var dest SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 400:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case rsp.StatusCode == 400:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 403:
		var dest SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 403:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 500:
		var dest SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 500:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case rsp.StatusCode == 500:
	// Content-type (multipart/related) unsupported

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 503:
		var dest SmContextUpdateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.Header.Get("Content-Type") == "application/problem+json" && rsp.StatusCode == 503:
		var dest externalRef1.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case rsp.StatusCode == 503:
	// Content-type (multipart/related) unsupported

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReleaseSmContextResponse parses an HTTP response from a ReleaseSmContextWithResponse call
func ParseReleaseSmContextResponse(rsp *http.Response) (*ReleaseSmContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleaseSmContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmContextReleasedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseRetrieveSmContextResponse parses an HTTP response from a RetrieveSmContextWithResponse call
func ParseRetrieveSmContextResponse(rsp *http.Response) (*RetrieveSmContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveSmContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmContextRetrievedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef1.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef1.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef1.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef1.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef1.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef1.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef1.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef1.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 504:
		var dest externalRef1.N504
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON504 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSendMoDataResponse parses an HTTP response from a SendMoDataWithResponse call
func ParseSendMoDataResponse(rsp *http.Response) (*SendMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 307:
		var dest externalRef1.N307
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON307 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 308:
		var dest externalRef1.N308
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON308 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef1.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef1.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create
	// (POST /pdu-sessions)
	PostPduSessions(c *gin.Context)
	// Update (initiated by V-SMF or I-SMF)
	// (POST /pdu-sessions/{pduSessionRef}/modify)
	UpdatePduSession(c *gin.Context, pduSessionRef string)
	// Release
	// (POST /pdu-sessions/{pduSessionRef}/release)
	ReleasePduSession(c *gin.Context, pduSessionRef string)
	// Retrieve
	// (POST /pdu-sessions/{pduSessionRef}/retrieve)
	RetrievePduSession(c *gin.Context, pduSessionRef string)
	// Transfer MO Data
	// (POST /pdu-sessions/{pduSessionRef}/transfer-mo-data)
	TransferMoData(c *gin.Context, pduSessionRef string)
	// Create SM Context
	// (POST /sm-contexts)
	PostSmContexts(c *gin.Context)
	// Update SM Context
	// (POST /sm-contexts/{smContextRef}/modify)
	UpdateSmContext(c *gin.Context, smContextRef string)
	// Release SM Context
	// (POST /sm-contexts/{smContextRef}/release)
	ReleaseSmContext(c *gin.Context, smContextRef string)
	// Retrieve SM Context
	// (POST /sm-contexts/{smContextRef}/retrieve)
	RetrieveSmContext(c *gin.Context, smContextRef string)
	// Send MO Data
	// (POST /sm-contexts/{smContextRef}/send-mo-data)
	SendMoData(c *gin.Context, smContextRef string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostPduSessions operation middleware
func (siw *ServerInterfaceWrapper) PostPduSessions(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPduSessions(c)
}

// UpdatePduSession operation middleware
func (siw *ServerInterfaceWrapper) UpdatePduSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameter("simple", false, "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePduSession(c, pduSessionRef)
}

// ReleasePduSession operation middleware
func (siw *ServerInterfaceWrapper) ReleasePduSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameter("simple", false, "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReleasePduSession(c, pduSessionRef)
}

// RetrievePduSession operation middleware
func (siw *ServerInterfaceWrapper) RetrievePduSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameter("simple", false, "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RetrievePduSession(c, pduSessionRef)
}

// TransferMoData operation middleware
func (siw *ServerInterfaceWrapper) TransferMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "pduSessionRef" -------------
	var pduSessionRef string

	err = runtime.BindStyledParameter("simple", false, "pduSessionRef", c.Param("pduSessionRef"), &pduSessionRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferMoData(c, pduSessionRef)
}

// PostSmContexts operation middleware
func (siw *ServerInterfaceWrapper) PostSmContexts(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSmContexts(c)
}

// UpdateSmContext operation middleware
func (siw *ServerInterfaceWrapper) UpdateSmContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameter("simple", false, "smContextRef", c.Param("smContextRef"), &smContextRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSmContext(c, smContextRef)
}

// ReleaseSmContext operation middleware
func (siw *ServerInterfaceWrapper) ReleaseSmContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameter("simple", false, "smContextRef", c.Param("smContextRef"), &smContextRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReleaseSmContext(c, smContextRef)
}

// RetrieveSmContext operation middleware
func (siw *ServerInterfaceWrapper) RetrieveSmContext(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameter("simple", false, "smContextRef", c.Param("smContextRef"), &smContextRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RetrieveSmContext(c, smContextRef)
}

// SendMoData operation middleware
func (siw *ServerInterfaceWrapper) SendMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "smContextRef" -------------
	var smContextRef string

	err = runtime.BindStyledParameter("simple", false, "smContextRef", c.Param("smContextRef"), &smContextRef)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smContextRef: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nsmf-pdusession"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendMoData(c, smContextRef)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/pdu-sessions", wrapper.PostPduSessions)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/modify", wrapper.UpdatePduSession)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/release", wrapper.ReleasePduSession)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/retrieve", wrapper.RetrievePduSession)
	router.POST(options.BaseURL+"/pdu-sessions/:pduSessionRef/transfer-mo-data", wrapper.TransferMoData)
	router.POST(options.BaseURL+"/sm-contexts", wrapper.PostSmContexts)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/modify", wrapper.UpdateSmContext)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/release", wrapper.ReleaseSmContext)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/retrieve", wrapper.RetrieveSmContext)
	router.POST(options.BaseURL+"/sm-contexts/:smContextRef/send-mo-data", wrapper.SendMoData)
}

type N400ApplicationProblemPlusJSONResponse ExtProblemDetails

type N401ApplicationProblemPlusJSONResponse ExtProblemDetails

type N403ApplicationProblemPlusJSONResponse ExtProblemDetails

type N404ApplicationProblemPlusJSONResponse ExtProblemDetails

type N413ApplicationProblemPlusJSONResponse ExtProblemDetails

type N415ApplicationProblemPlusJSONResponse ExtProblemDetails

type N429ApplicationProblemPlusJSONResponse ExtProblemDetails

type N500ApplicationProblemPlusJSONResponse ExtProblemDetails

type N503ApplicationProblemPlusJSONResponse ExtProblemDetails

type HsmfUpdateErrorJSONResponse HsmfUpdateError
type HsmfUpdateErrorApplicationProblemPlusJSONResponse externalRef1.ProblemDetails
type HsmfUpdateErrorMultipartResponse func(writer *multipart.Writer) error

type PduSessionCreateErrorJSONResponse PduSessionCreateError
type PduSessionCreateErrorApplicationProblemPlusJSONResponse externalRef1.ProblemDetails
type PduSessionCreateErrorMultipartResponse func(writer *multipart.Writer) error

type VsmfUpdateErrorJSONResponse VsmfUpdateError
type VsmfUpdateErrorApplicationProblemPlusJSONResponse externalRef1.ProblemDetails
type VsmfUpdateErrorMultipartResponse func(writer *multipart.Writer) error

type VsmfUpdateResponse200JSONResponse VsmfUpdatedData
type VsmfUpdateResponse200MultipartResponse func(writer *multipart.Writer) error

type PostPduSessionsRequestObject struct {
	JSONBody      *PostPduSessionsJSONRequestBody
	MultipartBody *multipart.Reader
}

type PostPduSessionsResponseObject interface {
	VisitPostPduSessionsResponse(w http.ResponseWriter) error
}

type PostPduSessions201ResponseHeaders struct {
	Location string
}

type PostPduSessions201JSONResponse struct {
	Body    PduSessionCreatedData
	Headers PostPduSessions201ResponseHeaders
}

func (response PostPduSessions201JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPduSessions201MultipartResponse struct {
	Body    func(writer *multipart.Writer) error
	Headers PostPduSessions201ResponseHeaders
}

func (response PostPduSessions201MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	defer writer.Close()
	return response.Body(writer)
}

type PostPduSessions307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response PostPduSessions307JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPduSessions308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response PostPduSessions308JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPduSessions400JSONResponse struct {
	PduSessionCreateErrorJSONResponse
}

func (response PostPduSessions400JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(PduSessionCreateError(response.PduSessionCreateErrorJSONResponse))
}

type PostPduSessions400ApplicationProblemPlusJSONResponse struct {
	PduSessionCreateErrorApplicationProblemPlusJSONResponse
}

func (response PostPduSessions400ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.PduSessionCreateErrorApplicationProblemPlusJSONResponse))
}

type PostPduSessions400MultipartResponse PduSessionCreateErrorMultipartResponse

func (response PostPduSessions400MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions403JSONResponse PduSessionCreateError

func (response PostPduSessions403JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(PduSessionCreateError(response))
}

type PostPduSessions403ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostPduSessions403ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostPduSessions403MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions403MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions404JSONResponse PduSessionCreateError

func (response PostPduSessions404JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(PduSessionCreateError(response))
}

type PostPduSessions404ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostPduSessions404ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostPduSessions404MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions404MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions411ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PostPduSessions413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions413ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PostPduSessions415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions415ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PostPduSessions429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response PostPduSessions429ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PostPduSessions500JSONResponse PduSessionCreateError

func (response PostPduSessions500JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(PduSessionCreateError(response))
}

type PostPduSessions500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostPduSessions500ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostPduSessions500MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions500MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type PostPduSessions503JSONResponse PduSessionCreateError

func (response PostPduSessions503JSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(PduSessionCreateError(response))
}

type PostPduSessions503ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostPduSessions503ApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostPduSessions503MultipartResponse func(writer *multipart.Writer) error

func (response PostPduSessions503MultipartResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type PostPduSessionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response PostPduSessionsdefaultApplicationProblemPlusJSONResponse) VisitPostPduSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePduSessionRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	JSONBody      *UpdatePduSessionJSONRequestBody
	MultipartBody *multipart.Reader
}

type UpdatePduSessionResponseObject interface {
	VisitUpdatePduSessionResponse(w http.ResponseWriter) error
}

type UpdatePduSession200JSONResponse HsmfUpdatedData

func (response UpdatePduSession200JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(HsmfUpdatedData(response))
}

type UpdatePduSession200MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession200MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession204Response struct {
}

func (response UpdatePduSession204Response) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdatePduSession307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response UpdatePduSession307JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePduSession308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response UpdatePduSession308JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePduSession400JSONResponse struct{ HsmfUpdateErrorJSONResponse }

func (response UpdatePduSession400JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(HsmfUpdateError(response.HsmfUpdateErrorJSONResponse))
}

type UpdatePduSession400ApplicationProblemPlusJSONResponse struct {
	HsmfUpdateErrorApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession400ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.HsmfUpdateErrorApplicationProblemPlusJSONResponse))
}

type UpdatePduSession400MultipartResponse HsmfUpdateErrorMultipartResponse

func (response UpdatePduSession400MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession403JSONResponse HsmfUpdateError

func (response UpdatePduSession403JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(HsmfUpdateError(response))
}

type UpdatePduSession403ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdatePduSession403ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdatePduSession403MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession403MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession404JSONResponse HsmfUpdateError

func (response UpdatePduSession404JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(HsmfUpdateError(response))
}

type UpdatePduSession404ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdatePduSession404ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdatePduSession404MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession404MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession411ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession413ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession415ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response UpdatePduSession429ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdatePduSession500JSONResponse HsmfUpdateError

func (response UpdatePduSession500JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(HsmfUpdateError(response))
}

type UpdatePduSession500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdatePduSession500ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdatePduSession500MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession500MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSession503JSONResponse HsmfUpdateError

func (response UpdatePduSession503JSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(HsmfUpdateError(response))
}

type UpdatePduSession503ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdatePduSession503ApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdatePduSession503MultipartResponse func(writer *multipart.Writer) error

func (response UpdatePduSession503MultipartResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type UpdatePduSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response UpdatePduSessiondefaultApplicationProblemPlusJSONResponse) VisitUpdatePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleasePduSessionRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	JSONBody      *ReleasePduSessionJSONRequestBody
	MultipartBody *multipart.Reader
}

type ReleasePduSessionResponseObject interface {
	VisitReleasePduSessionResponse(w http.ResponseWriter) error
}

type ReleasePduSession200JSONResponse ReleasedData

func (response ReleasePduSession200JSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(ReleasedData(response))
}

type ReleasePduSession200MultipartResponse func(writer *multipart.Writer) error

func (response ReleasePduSession200MultipartResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type ReleasePduSession204Response struct {
}

func (response ReleasePduSession204Response) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReleasePduSession307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response ReleasePduSession307JSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleasePduSession308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response ReleasePduSession308JSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleasePduSession400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession400ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession403ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession404ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession411ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession413ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession415ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession429ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession500ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReleasePduSession503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response ReleasePduSession503ApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReleasePduSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response ReleasePduSessiondefaultApplicationProblemPlusJSONResponse) VisitReleasePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrievePduSessionRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	Body          *RetrievePduSessionJSONRequestBody
}

type RetrievePduSessionResponseObject interface {
	VisitRetrievePduSessionResponse(w http.ResponseWriter) error
}

type RetrievePduSession200JSONResponse RetrievedData

func (response RetrievePduSession200JSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(RetrievedData(response))
}

type RetrievePduSession307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response RetrievePduSession307JSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrievePduSession308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response RetrievePduSession308JSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrievePduSession400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession400ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession403ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession404ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession411ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession413ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession415ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession429ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession500ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession503ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type RetrievePduSession504ApplicationProblemPlusJSONResponse struct {
	externalRef1.N504ApplicationProblemPlusJSONResponse
}

func (response RetrievePduSession504ApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N504ApplicationProblemPlusJSONResponse))
}

type RetrievePduSessiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response RetrievePduSessiondefaultApplicationProblemPlusJSONResponse) VisitRetrievePduSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferMoDataRequestObject struct {
	PduSessionRef string `json:"pduSessionRef"`
	Body          *multipart.Reader
}

type TransferMoDataResponseObject interface {
	VisitTransferMoDataResponse(w http.ResponseWriter) error
}

type TransferMoData204Response struct {
}

func (response TransferMoData204Response) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type TransferMoData307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response TransferMoData307JSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferMoData308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response TransferMoData308JSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type TransferMoData400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response TransferMoData400ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type TransferMoData401ApplicationProblemPlusJSONResponse struct {
	externalRef1.N401ApplicationProblemPlusJSONResponse
}

func (response TransferMoData401ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type TransferMoData403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response TransferMoData403ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type TransferMoData404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response TransferMoData404ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type TransferMoData411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response TransferMoData411ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type TransferMoData413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response TransferMoData413ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type TransferMoData415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response TransferMoData415ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type TransferMoData429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response TransferMoData429ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type TransferMoData500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response TransferMoData500ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type TransferMoData503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response TransferMoData503ApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type TransferMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response TransferMoDatadefaultApplicationProblemPlusJSONResponse) VisitTransferMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContextsRequestObject struct {
	Body *multipart.Reader
}

type PostSmContextsResponseObject interface {
	VisitPostSmContextsResponse(w http.ResponseWriter) error
}

type PostSmContexts201ResponseHeaders struct {
	Location string
}

type PostSmContexts201JSONResponse struct {
	Body    SmContextCreatedData
	Headers PostSmContexts201ResponseHeaders
}

func (response PostSmContexts201JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContexts201MultipartResponse struct {
	Body    func(writer *multipart.Writer) error
	Headers PostSmContexts201ResponseHeaders
}

func (response PostSmContexts201MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	defer writer.Close()
	return response.Body(writer)
}

type PostSmContexts307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response PostSmContexts307JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContexts308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response PostSmContexts308JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSmContexts400JSONResponse SmContextCreateError

func (response PostSmContexts400JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(SmContextCreateError(response))
}

type PostSmContexts400ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostSmContexts400ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostSmContexts400MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts400MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts403JSONResponse SmContextCreateError

func (response PostSmContexts403JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(SmContextCreateError(response))
}

type PostSmContexts403ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostSmContexts403ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostSmContexts403MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts403MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts404JSONResponse SmContextCreateError

func (response PostSmContexts404JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(SmContextCreateError(response))
}

type PostSmContexts404MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts404MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts411ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type PostSmContexts413ApplicationProblemPlusJSONResponse struct {
	N413ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts413ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type PostSmContexts415ApplicationProblemPlusJSONResponse struct {
	N415ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts415ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type PostSmContexts429ApplicationProblemPlusJSONResponse struct {
	N429ApplicationProblemPlusJSONResponse
}

func (response PostSmContexts429ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type PostSmContexts500JSONResponse SmContextCreateError

func (response PostSmContexts500JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(SmContextCreateError(response))
}

type PostSmContexts500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostSmContexts500ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostSmContexts500MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts500MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts503JSONResponse SmContextCreateError

func (response PostSmContexts503JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(SmContextCreateError(response))
}

type PostSmContexts503ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostSmContexts503ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostSmContexts503MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts503MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type PostSmContexts504JSONResponse SmContextCreateError

func (response PostSmContexts504JSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(SmContextCreateError(response))
}

type PostSmContexts504ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response PostSmContexts504ApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type PostSmContexts504MultipartResponse func(writer *multipart.Writer) error

func (response PostSmContexts504MultipartResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(504)

	defer writer.Close()
	return response(writer)
}

type PostSmContextsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response PostSmContextsdefaultApplicationProblemPlusJSONResponse) VisitPostSmContextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSmContextRequestObject struct {
	SmContextRef  string `json:"smContextRef"`
	JSONBody      *UpdateSmContextJSONRequestBody
	MultipartBody *multipart.Reader
}

type UpdateSmContextResponseObject interface {
	VisitUpdateSmContextResponse(w http.ResponseWriter) error
}

type UpdateSmContext200JSONResponse SmContextUpdatedData

func (response UpdateSmContext200JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(SmContextUpdatedData(response))
}

type UpdateSmContext200MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext200MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(200)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext204Response struct {
}

func (response UpdateSmContext204Response) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateSmContext307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response UpdateSmContext307JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSmContext308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response UpdateSmContext308JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSmContext400JSONResponse SmContextUpdateError

func (response UpdateSmContext400JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(SmContextUpdateError(response))
}

type UpdateSmContext400ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdateSmContext400ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdateSmContext400MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext400MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(400)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext403JSONResponse SmContextUpdateError

func (response UpdateSmContext403JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(SmContextUpdateError(response))
}

type UpdateSmContext403ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdateSmContext403ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdateSmContext403MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext403MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(403)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext404JSONResponse SmContextUpdateError

func (response UpdateSmContext404JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(SmContextUpdateError(response))
}

type UpdateSmContext404MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext404MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(404)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext411ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext413ApplicationProblemPlusJSONResponse struct {
	N413ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext413ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext415ApplicationProblemPlusJSONResponse struct {
	N415ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext415ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext429ApplicationProblemPlusJSONResponse struct {
	N429ApplicationProblemPlusJSONResponse
}

func (response UpdateSmContext429ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type UpdateSmContext500JSONResponse SmContextUpdateError

func (response UpdateSmContext500JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(SmContextUpdateError(response))
}

type UpdateSmContext500ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdateSmContext500ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdateSmContext500MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext500MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(500)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContext503JSONResponse SmContextUpdateError

func (response UpdateSmContext503JSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(SmContextUpdateError(response))
}

type UpdateSmContext503ApplicationProblemPlusJSONResponse externalRef1.ProblemDetails

func (response UpdateSmContext503ApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response))
}

type UpdateSmContext503MultipartResponse func(writer *multipart.Writer) error

func (response UpdateSmContext503MultipartResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	writer := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mime.FormatMediaType("multipart/related", map[string]string{"boundary": writer.Boundary()}))
	w.WriteHeader(503)

	defer writer.Close()
	return response(writer)
}

type UpdateSmContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response UpdateSmContextdefaultApplicationProblemPlusJSONResponse) VisitUpdateSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseSmContextRequestObject struct {
	SmContextRef  string `json:"smContextRef"`
	JSONBody      *ReleaseSmContextJSONRequestBody
	MultipartBody *multipart.Reader
}

type ReleaseSmContextResponseObject interface {
	VisitReleaseSmContextResponse(w http.ResponseWriter) error
}

type ReleaseSmContext200JSONResponse SmContextReleasedData

func (response ReleaseSmContext200JSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(SmContextReleasedData(response))
}

type ReleaseSmContext204Response struct {
}

func (response ReleaseSmContext204Response) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReleaseSmContext307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response ReleaseSmContext307JSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseSmContext308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response ReleaseSmContext308JSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReleaseSmContext400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext400ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext403ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext404ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext411ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext413ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext415ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext429ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext500ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContext503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response ReleaseSmContext503ApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ReleaseSmContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response ReleaseSmContextdefaultApplicationProblemPlusJSONResponse) VisitReleaseSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrieveSmContextRequestObject struct {
	SmContextRef string `json:"smContextRef"`
	Body         *RetrieveSmContextJSONRequestBody
}

type RetrieveSmContextResponseObject interface {
	VisitRetrieveSmContextResponse(w http.ResponseWriter) error
}

type RetrieveSmContext200JSONResponse SmContextRetrievedData

func (response RetrieveSmContext200JSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(SmContextRetrievedData(response))
}

type RetrieveSmContext307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response RetrieveSmContext307JSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrieveSmContext308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response RetrieveSmContext308JSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetrieveSmContext400ApplicationProblemPlusJSONResponse struct {
	externalRef1.N400ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext400ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext403ApplicationProblemPlusJSONResponse struct {
	externalRef1.N403ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext403ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext404ApplicationProblemPlusJSONResponse struct {
	externalRef1.N404ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext404ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext411ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext413ApplicationProblemPlusJSONResponse struct {
	externalRef1.N413ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext413ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext415ApplicationProblemPlusJSONResponse struct {
	externalRef1.N415ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext415ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext429ApplicationProblemPlusJSONResponse struct {
	externalRef1.N429ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext429ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext500ApplicationProblemPlusJSONResponse struct {
	externalRef1.N500ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext500ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext503ApplicationProblemPlusJSONResponse struct {
	externalRef1.N503ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext503ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContext504ApplicationProblemPlusJSONResponse struct {
	externalRef1.N504ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmContext504ApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(504)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N504ApplicationProblemPlusJSONResponse))
}

type RetrieveSmContextdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response RetrieveSmContextdefaultApplicationProblemPlusJSONResponse) VisitRetrieveSmContextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendMoDataRequestObject struct {
	SmContextRef string `json:"smContextRef"`
	Body         *multipart.Reader
}

type SendMoDataResponseObject interface {
	VisitSendMoDataResponse(w http.ResponseWriter) error
}

type SendMoData204Response struct {
}

func (response SendMoData204Response) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SendMoData307JSONResponse struct{ externalRef1.N307JSONResponse }

func (response SendMoData307JSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(307)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendMoData308JSONResponse struct{ externalRef1.N308JSONResponse }

func (response SendMoData308JSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.N3gppSbiTargetNfId != nil {
		w.Header().Set("3gpp-Sbi-Target-Nf-Id", fmt.Sprint(*response.Headers.N3gppSbiTargetNfId))
	}
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(308)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendMoData400ApplicationProblemPlusJSONResponse struct {
	N400ApplicationProblemPlusJSONResponse
}

func (response SendMoData400ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SendMoData401ApplicationProblemPlusJSONResponse struct {
	N401ApplicationProblemPlusJSONResponse
}

func (response SendMoData401ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N401ApplicationProblemPlusJSONResponse))
}

type SendMoData403ApplicationProblemPlusJSONResponse struct {
	N403ApplicationProblemPlusJSONResponse
}

func (response SendMoData403ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type SendMoData404ApplicationProblemPlusJSONResponse struct {
	N404ApplicationProblemPlusJSONResponse
}

func (response SendMoData404ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type SendMoData411ApplicationProblemPlusJSONResponse struct {
	externalRef1.N411ApplicationProblemPlusJSONResponse
}

func (response SendMoData411ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(externalRef1.ProblemDetails(response.N411ApplicationProblemPlusJSONResponse))
}

type SendMoData413ApplicationProblemPlusJSONResponse struct {
	N413ApplicationProblemPlusJSONResponse
}

func (response SendMoData413ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N413ApplicationProblemPlusJSONResponse))
}

type SendMoData415ApplicationProblemPlusJSONResponse struct {
	N415ApplicationProblemPlusJSONResponse
}

func (response SendMoData415ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N415ApplicationProblemPlusJSONResponse))
}

type SendMoData429ApplicationProblemPlusJSONResponse struct {
	N429ApplicationProblemPlusJSONResponse
}

func (response SendMoData429ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N429ApplicationProblemPlusJSONResponse))
}

type SendMoData500ApplicationProblemPlusJSONResponse struct {
	N500ApplicationProblemPlusJSONResponse
}

func (response SendMoData500ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type SendMoData503ApplicationProblemPlusJSONResponse struct {
	N503ApplicationProblemPlusJSONResponse
}

func (response SendMoData503ApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(ExtProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SendMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef1.ProblemDetails
	StatusCode int
}

func (response SendMoDatadefaultApplicationProblemPlusJSONResponse) VisitSendMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create
	// (POST /pdu-sessions)
	PostPduSessions(ctx context.Context, request PostPduSessionsRequestObject) (PostPduSessionsResponseObject, error)
	// Update (initiated by V-SMF or I-SMF)
	// (POST /pdu-sessions/{pduSessionRef}/modify)
	UpdatePduSession(ctx context.Context, request UpdatePduSessionRequestObject) (UpdatePduSessionResponseObject, error)
	// Release
	// (POST /pdu-sessions/{pduSessionRef}/release)
	ReleasePduSession(ctx context.Context, request ReleasePduSessionRequestObject) (ReleasePduSessionResponseObject, error)
	// Retrieve
	// (POST /pdu-sessions/{pduSessionRef}/retrieve)
	RetrievePduSession(ctx context.Context, request RetrievePduSessionRequestObject) (RetrievePduSessionResponseObject, error)
	// Transfer MO Data
	// (POST /pdu-sessions/{pduSessionRef}/transfer-mo-data)
	TransferMoData(ctx context.Context, request TransferMoDataRequestObject) (TransferMoDataResponseObject, error)
	// Create SM Context
	// (POST /sm-contexts)
	PostSmContexts(ctx context.Context, request PostSmContextsRequestObject) (PostSmContextsResponseObject, error)
	// Update SM Context
	// (POST /sm-contexts/{smContextRef}/modify)
	UpdateSmContext(ctx context.Context, request UpdateSmContextRequestObject) (UpdateSmContextResponseObject, error)
	// Release SM Context
	// (POST /sm-contexts/{smContextRef}/release)
	ReleaseSmContext(ctx context.Context, request ReleaseSmContextRequestObject) (ReleaseSmContextResponseObject, error)
	// Retrieve SM Context
	// (POST /sm-contexts/{smContextRef}/retrieve)
	RetrieveSmContext(ctx context.Context, request RetrieveSmContextRequestObject) (RetrieveSmContextResponseObject, error)
	// Send MO Data
	// (POST /sm-contexts/{smContextRef}/send-mo-data)
	SendMoData(ctx context.Context, request SendMoDataRequestObject) (SendMoDataResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostPduSessions operation middleware
func (sh *strictHandler) PostPduSessions(ctx *gin.Context) {
	var request PostPduSessionsRequestObject

	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body PostPduSessionsJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPduSessions(ctx, request.(PostPduSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPduSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPduSessionsResponseObject); ok {
		if err := validResponse.VisitPostPduSessionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePduSession operation middleware
func (sh *strictHandler) UpdatePduSession(ctx *gin.Context, pduSessionRef string) {
	var request UpdatePduSessionRequestObject

	request.PduSessionRef = pduSessionRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body UpdatePduSessionJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePduSession(ctx, request.(UpdatePduSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePduSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePduSessionResponseObject); ok {
		if err := validResponse.VisitUpdatePduSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReleasePduSession operation middleware
func (sh *strictHandler) ReleasePduSession(ctx *gin.Context, pduSessionRef string) {
	var request ReleasePduSessionRequestObject

	request.PduSessionRef = pduSessionRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body ReleasePduSessionJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReleasePduSession(ctx, request.(ReleasePduSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReleasePduSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReleasePduSessionResponseObject); ok {
		if err := validResponse.VisitReleasePduSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetrievePduSession operation middleware
func (sh *strictHandler) RetrievePduSession(ctx *gin.Context, pduSessionRef string) {
	var request RetrievePduSessionRequestObject

	request.PduSessionRef = pduSessionRef

	var body RetrievePduSessionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RetrievePduSession(ctx, request.(RetrievePduSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrievePduSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RetrievePduSessionResponseObject); ok {
		if err := validResponse.VisitRetrievePduSessionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferMoData operation middleware
func (sh *strictHandler) TransferMoData(ctx *gin.Context, pduSessionRef string) {
	var request TransferMoDataRequestObject

	request.PduSessionRef = pduSessionRef

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TransferMoData(ctx, request.(TransferMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TransferMoDataResponseObject); ok {
		if err := validResponse.VisitTransferMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSmContexts operation middleware
func (sh *strictHandler) PostSmContexts(ctx *gin.Context) {
	var request PostSmContextsRequestObject

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSmContexts(ctx, request.(PostSmContextsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSmContexts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSmContextsResponseObject); ok {
		if err := validResponse.VisitPostSmContextsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSmContext operation middleware
func (sh *strictHandler) UpdateSmContext(ctx *gin.Context, smContextRef string) {
	var request UpdateSmContextRequestObject

	request.SmContextRef = smContextRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body UpdateSmContextJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSmContext(ctx, request.(UpdateSmContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSmContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSmContextResponseObject); ok {
		if err := validResponse.VisitUpdateSmContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReleaseSmContext operation middleware
func (sh *strictHandler) ReleaseSmContext(ctx *gin.Context, smContextRef string) {
	var request ReleaseSmContextRequestObject

	request.SmContextRef = smContextRef
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body ReleaseSmContextJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "multipart/related") {
		if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
			ctx.Error(err)
			return
		} else if boundary := params["boundary"]; boundary == "" {
			ctx.Error(http.ErrMissingBoundary)
			return
		} else {
			request.MultipartBody = multipart.NewReader(ctx.Request.Body, boundary)
		}
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReleaseSmContext(ctx, request.(ReleaseSmContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReleaseSmContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReleaseSmContextResponseObject); ok {
		if err := validResponse.VisitReleaseSmContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetrieveSmContext operation middleware
func (sh *strictHandler) RetrieveSmContext(ctx *gin.Context, smContextRef string) {
	var request RetrieveSmContextRequestObject

	request.SmContextRef = smContextRef

	var body RetrieveSmContextJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RetrieveSmContext(ctx, request.(RetrieveSmContextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrieveSmContext")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RetrieveSmContextResponseObject); ok {
		if err := validResponse.VisitRetrieveSmContextResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendMoData operation middleware
func (sh *strictHandler) SendMoData(ctx *gin.Context, smContextRef string) {
	var request SendMoDataRequestObject

	request.SmContextRef = smContextRef

	if _, params, err := mime.ParseMediaType(ctx.Request.Header.Get("Content-Type")); err != nil {
		ctx.Error(err)
		return
	} else if boundary := params["boundary"]; boundary == "" {
		ctx.Error(http.ErrMissingBoundary)
		return
	} else {
		request.Body = multipart.NewReader(ctx.Request.Body, boundary)
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendMoData(ctx, request.(SendMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendMoDataResponseObject); ok {
		if err := validResponse.VisitSendMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
