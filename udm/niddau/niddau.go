// Package niddau provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package niddau

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/nrf/management"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for NiddCause.
const (
	DNNREMOVED             NiddCause = "DNN_REMOVED"
	SUBSCRIPTIONWITHDRAWAL NiddCause = "SUBSCRIPTION_WITHDRAWAL"
)

// AuthorizationData defines model for AuthorizationData.
type AuthorizationData struct {
	AuthorizationData    []UserIdentifier       `json:"authorizationData"`
	ValidityTime         *externalRef0.DateTime `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizationInfo defines model for AuthorizationInfo.
type AuthorizationInfo struct {
	AfId                   *string                             `json:"afId,omitempty"`
	AuthUpdateCallbackUri  externalRef0.Uri                    `json:"authUpdateCallbackUri"`
	Dnn                    externalRef0.Dnn                    `json:"dnn"`
	MtcProviderInformation externalRef0.MtcProviderInformation `json:"mtcProviderInformation"`

	// NefId Identity of the NEF
	NefId                *externalRef1.NefId    `json:"nefId,omitempty"`
	Snssai               externalRef0.Snssai    `json:"snssai"`
	ValidityTime         *externalRef0.DateTime `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NiddAuthUpdateInfo defines model for NiddAuthUpdateInfo.
type NiddAuthUpdateInfo struct {
	AuthorizationData    AuthorizationData      `json:"authorizationData"`
	Dnn                  *externalRef0.Dnn      `json:"dnn,omitempty"`
	InvalidityInd        *bool                  `json:"invalidityInd,omitempty"`
	NiddCause            *NiddCause             `json:"niddCause,omitempty"`
	Snssai               *externalRef0.Snssai   `json:"snssai,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NiddAuthUpdateNotification defines model for NiddAuthUpdateNotification.
type NiddAuthUpdateNotification struct {
	NiddAuthUpdateInfoList []NiddAuthUpdateInfo   `json:"niddAuthUpdateInfoList"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// NiddCause defines model for NiddCause.
type NiddCause string

// UserIdentifier defines model for UserIdentifier.
type UserIdentifier struct {
	Gpsi                 externalRef0.Gpsi      `json:"gpsi,omitempty"`
	Supi                 externalRef0.Supi      `json:"supi"`
	ValidityTime         *externalRef0.DateTime `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AuthorizeNiddDataJSONRequestBody defines body for AuthorizeNiddData for application/json ContentType.
type AuthorizeNiddDataJSONRequestBody = AuthorizationInfo

// Getter for additional properties for AuthorizationData. Returns the specified
// element and whether it was found
func (a AuthorizationData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizationData
func (a *AuthorizationData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizationData to handle AdditionalProperties
func (a *AuthorizationData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authorizationData"]; found {
		err = json.Unmarshal(raw, &a.AuthorizationData)
		if err != nil {
			return fmt.Errorf("error reading 'authorizationData': %w", err)
		}
		delete(object, "authorizationData")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizationData to handle AdditionalProperties
func (a AuthorizationData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authorizationData"], err = json.Marshal(a.AuthorizationData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authorizationData': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthorizationInfo. Returns the specified
// element and whether it was found
func (a AuthorizationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthorizationInfo
func (a *AuthorizationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthorizationInfo to handle AdditionalProperties
func (a *AuthorizationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["authUpdateCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.AuthUpdateCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'authUpdateCallbackUri': %w", err)
		}
		delete(object, "authUpdateCallbackUri")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["nefId"]; found {
		err = json.Unmarshal(raw, &a.NefId)
		if err != nil {
			return fmt.Errorf("error reading 'nefId': %w", err)
		}
		delete(object, "nefId")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthorizationInfo to handle AdditionalProperties
func (a AuthorizationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	object["authUpdateCallbackUri"], err = json.Marshal(a.AuthUpdateCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authUpdateCallbackUri': %w", err)
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
	}

	if a.NefId != nil {
		object["nefId"], err = json.Marshal(a.NefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nefId': %w", err)
		}
	}

	object["snssai"], err = json.Marshal(a.Snssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NiddAuthUpdateInfo. Returns the specified
// element and whether it was found
func (a NiddAuthUpdateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NiddAuthUpdateInfo
func (a *NiddAuthUpdateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NiddAuthUpdateInfo to handle AdditionalProperties
func (a *NiddAuthUpdateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authorizationData"]; found {
		err = json.Unmarshal(raw, &a.AuthorizationData)
		if err != nil {
			return fmt.Errorf("error reading 'authorizationData': %w", err)
		}
		delete(object, "authorizationData")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["invalidityInd"]; found {
		err = json.Unmarshal(raw, &a.InvalidityInd)
		if err != nil {
			return fmt.Errorf("error reading 'invalidityInd': %w", err)
		}
		delete(object, "invalidityInd")
	}

	if raw, found := object["niddCause"]; found {
		err = json.Unmarshal(raw, &a.NiddCause)
		if err != nil {
			return fmt.Errorf("error reading 'niddCause': %w", err)
		}
		delete(object, "niddCause")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NiddAuthUpdateInfo to handle AdditionalProperties
func (a NiddAuthUpdateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authorizationData"], err = json.Marshal(a.AuthorizationData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authorizationData': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.InvalidityInd != nil {
		object["invalidityInd"], err = json.Marshal(a.InvalidityInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalidityInd': %w", err)
		}
	}

	if a.NiddCause != nil {
		object["niddCause"], err = json.Marshal(a.NiddCause)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'niddCause': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NiddAuthUpdateNotification. Returns the specified
// element and whether it was found
func (a NiddAuthUpdateNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NiddAuthUpdateNotification
func (a *NiddAuthUpdateNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NiddAuthUpdateNotification to handle AdditionalProperties
func (a *NiddAuthUpdateNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["niddAuthUpdateInfoList"]; found {
		err = json.Unmarshal(raw, &a.NiddAuthUpdateInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'niddAuthUpdateInfoList': %w", err)
		}
		delete(object, "niddAuthUpdateInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NiddAuthUpdateNotification to handle AdditionalProperties
func (a NiddAuthUpdateNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["niddAuthUpdateInfoList"], err = json.Marshal(a.NiddAuthUpdateInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'niddAuthUpdateInfoList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserIdentifier. Returns the specified
// element and whether it was found
func (a UserIdentifier) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserIdentifier
func (a *UserIdentifier) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserIdentifier to handle AdditionalProperties
func (a *UserIdentifier) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserIdentifier to handle AdditionalProperties
func (a UserIdentifier) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthorizeNiddDataWithBody request with any body
	AuthorizeNiddDataWithBody(ctx context.Context, ueIdentity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthorizeNiddData(ctx context.Context, ueIdentity string, body AuthorizeNiddDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthorizeNiddDataWithBody(ctx context.Context, ueIdentity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeNiddDataRequestWithBody(c.Server, ueIdentity, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthorizeNiddData(ctx context.Context, ueIdentity string, body AuthorizeNiddDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeNiddDataRequest(c.Server, ueIdentity, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthorizeNiddDataRequest calls the generic AuthorizeNiddData builder with application/json body
func NewAuthorizeNiddDataRequest(server string, ueIdentity string, body AuthorizeNiddDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthorizeNiddDataRequestWithBody(server, ueIdentity, "application/json", bodyReader)
}

// NewAuthorizeNiddDataRequestWithBody generates requests for AuthorizeNiddData with any type of body
func NewAuthorizeNiddDataRequestWithBody(server string, ueIdentity string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueIdentity", runtime.ParamLocationPath, ueIdentity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/authorize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthorizeNiddDataWithBodyWithResponse request with any body
	AuthorizeNiddDataWithBodyWithResponse(ctx context.Context, ueIdentity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthorizeNiddDataResponse, error)

	AuthorizeNiddDataWithResponse(ctx context.Context, ueIdentity string, body AuthorizeNiddDataJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthorizeNiddDataResponse, error)
}

type AuthorizeNiddDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AuthorizationData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON501     *externalRef0.N501
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AuthorizeNiddDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizeNiddDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthorizeNiddDataWithBodyWithResponse request with arbitrary body returning *AuthorizeNiddDataResponse
func (c *ClientWithResponses) AuthorizeNiddDataWithBodyWithResponse(ctx context.Context, ueIdentity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthorizeNiddDataResponse, error) {
	rsp, err := c.AuthorizeNiddDataWithBody(ctx, ueIdentity, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeNiddDataResponse(rsp)
}

func (c *ClientWithResponses) AuthorizeNiddDataWithResponse(ctx context.Context, ueIdentity string, body AuthorizeNiddDataJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthorizeNiddDataResponse, error) {
	rsp, err := c.AuthorizeNiddData(ctx, ueIdentity, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeNiddDataResponse(rsp)
}

// ParseAuthorizeNiddDataResponse parses an HTTP response from a AuthorizeNiddDataWithResponse call
func ParseAuthorizeNiddDataResponse(rsp *http.Response) (*AuthorizeNiddDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizeNiddDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authorize the NIDD configuration request.
	// (POST /{ueIdentity}/authorize)
	AuthorizeNiddData(c *gin.Context, ueIdentity string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AuthorizeNiddData operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeNiddData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueIdentity" -------------
	var ueIdentity string

	err = runtime.BindStyledParameter("simple", false, "ueIdentity", c.Param("ueIdentity"), &ueIdentity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueIdentity: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-niddau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeNiddData(c, ueIdentity)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/:ueIdentity/authorize", wrapper.AuthorizeNiddData)
}

type AuthorizeNiddDataRequestObject struct {
	UeIdentity string `json:"ueIdentity"`
	Body       *AuthorizeNiddDataJSONRequestBody
}

type AuthorizeNiddDataResponseObject interface {
	VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error
}

type AuthorizeNiddData200JSONResponse AuthorizationData

func (response AuthorizeNiddData200JSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(AuthorizationData(response))
}

type AuthorizeNiddData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response AuthorizeNiddData400ApplicationProblemPlusJSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type AuthorizeNiddData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response AuthorizeNiddData403ApplicationProblemPlusJSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type AuthorizeNiddData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response AuthorizeNiddData404ApplicationProblemPlusJSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type AuthorizeNiddData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response AuthorizeNiddData500ApplicationProblemPlusJSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type AuthorizeNiddData501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response AuthorizeNiddData501ApplicationProblemPlusJSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N501ApplicationProblemPlusJSONResponse))
}

type AuthorizeNiddData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response AuthorizeNiddData503ApplicationProblemPlusJSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type AuthorizeNiddDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response AuthorizeNiddDatadefaultApplicationProblemPlusJSONResponse) VisitAuthorizeNiddDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authorize the NIDD configuration request.
	// (POST /{ueIdentity}/authorize)
	AuthorizeNiddData(ctx context.Context, request AuthorizeNiddDataRequestObject) (AuthorizeNiddDataResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AuthorizeNiddData operation middleware
func (sh *strictHandler) AuthorizeNiddData(ctx *gin.Context, ueIdentity string) {
	var request AuthorizeNiddDataRequestObject

	request.UeIdentity = ueIdentity

	var body AuthorizeNiddDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeNiddData(ctx, request.(AuthorizeNiddDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeNiddData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeNiddDataResponseObject); ok {
		if err := validResponse.VisitAuthorizeNiddDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
