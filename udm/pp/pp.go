// Package pp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package pp

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// N5GVnGroupConfiguration defines model for 5GVnGroupConfiguration.
type N5GVnGroupConfiguration struct {
	N5gVnGroupData          *N5GVnGroupData                      `json:"5gVnGroupData,omitempty"`
	AfInstanceId            *string                              `json:"afInstanceId,omitempty"`
	InternalGroupIdentifier externalRef0.GroupId                 `json:"internalGroupIdentifier,omitempty"`
	Members                 []externalRef0.Gpsi                  `json:"members,omitempty"`
	MtcProviderInformation  *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	ReferenceId             *ReferenceId                         `json:"referenceId,omitempty"`
	AdditionalProperties    map[string]interface{}               `json:"-"`
}

// N5GVnGroupData defines model for 5GVnGroupData.
type N5GVnGroupData struct {
	AppDescriptors []interface{} `json:"appDescriptors,omitempty"`

	// DnAaaAddress Original reference TS29503_Nudm_SDM.yaml#/components/schemas/IpAddress
	DnAaaAddress         interface{}                   `json:"dnAaaAddress,omitempty"`
	Dnn                  externalRef0.Dnn              `json:"dnn"`
	PduSessionTypes      []externalRef0.PduSessionType `json:"pduSessionTypes,omitempty"`
	SNssai               externalRef0.Snssai           `json:"sNssai"`
	SecondaryAuth        *bool                         `json:"secondaryAuth,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// CommunicationCharacteristics defines model for CommunicationCharacteristics.
type CommunicationCharacteristics struct {
	PpActiveTime          *PpActiveTime          `json:"ppActiveTime"`
	PpDlPacketCount       *PpDlPacketCount       `json:"ppDlPacketCount"`
	PpDlPacketCountExt    *PpDlPacketCountExt    `json:"ppDlPacketCountExt"`
	PpMaximumLatency      *PpMaximumLatency      `json:"ppMaximumLatency"`
	PpMaximumResponseTime *PpMaximumResponseTime `json:"ppMaximumResponseTime"`
	PpSubsRegTimer        *PpSubsRegTimer        `json:"ppSubsRegTimer"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// EcRestriction defines model for EcRestriction.
type EcRestriction struct {
	AfInstanceId           string                               `json:"afInstanceId"`
	MtcProviderInformation *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	PlmnEcInfos            []PlmnEcInfo                         `json:"plmnEcInfos,omitempty"`
	ReferenceId            ReferenceId                          `json:"referenceId"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// ExpectedUeBehaviour defines model for ExpectedUeBehaviour.
type ExpectedUeBehaviour struct {
	AfInstanceId              string                            `json:"afInstanceId"`
	BatteryIndication         *externalRef0.BatteryIndicationRm `json:"batteryIndication,omitempty"`
	CommunicationDurationTime *externalRef0.DurationSecRm       `json:"communicationDurationTime"`

	// ExpectedUmts Identifies the UE's expected geographical movement. The attribute is only applicable in 5G.
	ExpectedUmts               *[]LocationArea                            `json:"expectedUmts"`
	MtcProviderInformation     *externalRef0.MtcProviderInformation       `json:"mtcProviderInformation,omitempty"`
	PeriodicTime               *externalRef0.DurationSecRm                `json:"periodicTime"`
	ReferenceId                ReferenceId                                `json:"referenceId"`
	ScheduledCommunicationTime *externalRef0.ScheduledCommunicationTimeRm `json:"scheduledCommunicationTime,omitempty"`
	ScheduledCommunicationType *externalRef0.ScheduledCommunicationTypeRm `json:"scheduledCommunicationType,omitempty"`
	StationaryIndication       *externalRef0.StationaryIndicationRm       `json:"stationaryIndication,omitempty"`
	TrafficProfile             *externalRef0.TrafficProfileRm             `json:"trafficProfile,omitempty"`
	ValidityTime               *externalRef0.DateTime                     `json:"validityTime,omitempty"`
	AdditionalProperties       map[string]interface{}                     `json:"-"`
}

// LcsPrivacy defines model for LcsPrivacy.
type LcsPrivacy struct {
	AfInstanceId *string `json:"afInstanceId,omitempty"`

	// Lpi Original reference TS29503_Nudm_SDM.yaml#/components/schemas/Lpi
	Lpi                    interface{}                          `json:"lpi,omitempty"`
	MtcProviderInformation *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	ReferenceId            *ReferenceId                         `json:"referenceId,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// LocationArea defines model for LocationArea.
type LocationArea struct {
	// CivicAddresses Identifies a list of civic addresses of the user where the UE is located.
	CivicAddresses *[]interface{} `json:"civicAddresses,omitempty"`

	// GeographicAreas Identifies a list of geographic area of the user where the UE is located.
	GeographicAreas *[]interface{} `json:"geographicAreas,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo           *NetworkAreaInfo       `json:"nwAreaInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NetworkAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
type NetworkAreaInfo struct {
	// Ecgis Contains a list of E-UTRA cell identities.
	Ecgis []externalRef0.Ecgi `json:"ecgis,omitempty"`

	// GRanNodeIds Contains a list of NG RAN nodes.
	GRanNodeIds []externalRef0.GlobalRanNodeId `json:"gRanNodeIds,omitempty"`

	// Ncgis Contains a list of NR cell identities.
	Ncgis []externalRef0.Ncgi `json:"ncgis,omitempty"`

	// Tais Contains a list of tracking area identities.
	Tais                 []externalRef0.Tai     `json:"tais,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PlmnEcInfo defines model for PlmnEcInfo.
type PlmnEcInfo struct {
	EcRestrictionDataNb *bool `json:"ecRestrictionDataNb,omitempty"`

	// EcRestrictionDataWb Original reference TS29503_Nudm_SDM.yaml#/components/schemas/EcRestrictionDataWb
	EcRestrictionDataWb  interface{}            `json:"ecRestrictionDataWb,omitempty"`
	PlmnId               externalRef0.PlmnId    `json:"plmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PpActiveTime defines model for PpActiveTime.
type PpActiveTime struct {
	ActiveTime             externalRef0.DurationSec             `json:"activeTime"`
	AfInstanceId           string                               `json:"afInstanceId"`
	MtcProviderInformation *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	ReferenceId            ReferenceId                          `json:"referenceId"`
	ValidityTime           *externalRef0.DateTime               `json:"validityTime,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// PpData defines model for PpData.
type PpData struct {
	AcsInfo                       *externalRef0.AcsInfoRm       `json:"acsInfo,omitempty"`
	CommunicationCharacteristics  *CommunicationCharacteristics `json:"communicationCharacteristics,omitempty"`
	EcRestriction                 *EcRestriction                `json:"ecRestriction,omitempty"`
	ExpectedUeBehaviourParameters *ExpectedUeBehaviour          `json:"expectedUeBehaviourParameters,omitempty"`
	LcsPrivacy                    *LcsPrivacy                   `json:"lcsPrivacy,omitempty"`

	// SorInfo Original reference TS29503_Nudm_SDM.yaml#/components/schemas/SorInfo
	SorInfo              interface{}                     `json:"sorInfo,omitempty"`
	StnSr                *externalRef0.StnSrRm           `json:"stnSr"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// PpDlPacketCount defines model for PpDlPacketCount.
type PpDlPacketCount = int

// PpDlPacketCountExt defines model for PpDlPacketCountExt.
type PpDlPacketCountExt struct {
	AfInstanceId           string                               `json:"afInstanceId"`
	MtcProviderInformation *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	ReferenceId            ReferenceId                          `json:"referenceId"`
	ValidityTime           *externalRef0.DateTime               `json:"validityTime,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// PpMaximumLatency defines model for PpMaximumLatency.
type PpMaximumLatency struct {
	AfInstanceId           string                               `json:"afInstanceId"`
	MaximumLatency         externalRef0.DurationSec             `json:"maximumLatency"`
	MtcProviderInformation *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	ReferenceId            ReferenceId                          `json:"referenceId"`
	ValidityTime           *externalRef0.DateTime               `json:"validityTime,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// PpMaximumResponseTime defines model for PpMaximumResponseTime.
type PpMaximumResponseTime struct {
	AfInstanceId           string                               `json:"afInstanceId"`
	MaximumResponseTime    externalRef0.DurationSec             `json:"maximumResponseTime"`
	MtcProviderInformation *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	ReferenceId            ReferenceId                          `json:"referenceId"`
	ValidityTime           *externalRef0.DateTime               `json:"validityTime,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// PpSubsRegTimer defines model for PpSubsRegTimer.
type PpSubsRegTimer struct {
	AfInstanceId           string                               `json:"afInstanceId"`
	MtcProviderInformation *externalRef0.MtcProviderInformation `json:"mtcProviderInformation,omitempty"`
	ReferenceId            ReferenceId                          `json:"referenceId"`
	SubsRegTimer           externalRef0.DurationSec             `json:"subsRegTimer"`
	ValidityTime           *externalRef0.DateTime               `json:"validityTime,omitempty"`
	AdditionalProperties   map[string]interface{}               `json:"-"`
}

// ReferenceId defines model for ReferenceId.
type ReferenceId = int

// Delete5GVNGroupParams defines parameters for Delete5GVNGroup.
type Delete5GVNGroupParams struct {
	// MtcProviderInfo MTC Provider Information that originated the service operation
	MtcProviderInfo *externalRef0.MtcProviderInformation `form:"mtc-provider-info,omitempty" json:"mtc-provider-info,omitempty"`

	// AfId AF ID that originated the service operation
	AfId *string `form:"af-id,omitempty" json:"af-id,omitempty"`
}

// Modify5GVNGroupParams defines parameters for Modify5GVNGroup.
type Modify5GVNGroupParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// UpdateParams defines parameters for Update.
type UpdateParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody defines body for Modify5GVNGroup for application/merge-patch+json ContentType.
type Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody = N5GVnGroupConfiguration

// Create5GVNGroupJSONRequestBody defines body for Create5GVNGroup for application/json ContentType.
type Create5GVNGroupJSONRequestBody = N5GVnGroupConfiguration

// UpdateApplicationMergePatchPlusJSONRequestBody defines body for Update for application/merge-patch+json ContentType.
type UpdateApplicationMergePatchPlusJSONRequestBody = PpData

// Getter for additional properties for N5GVnGroupConfiguration. Returns the specified
// element and whether it was found
func (a N5GVnGroupConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N5GVnGroupConfiguration
func (a *N5GVnGroupConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N5GVnGroupConfiguration to handle AdditionalProperties
func (a *N5GVnGroupConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["5gVnGroupData"]; found {
		err = json.Unmarshal(raw, &a.N5gVnGroupData)
		if err != nil {
			return fmt.Errorf("error reading '5gVnGroupData': %w", err)
		}
		delete(object, "5gVnGroupData")
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["internalGroupIdentifier"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIdentifier)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIdentifier': %w", err)
		}
		delete(object, "internalGroupIdentifier")
	}

	if raw, found := object["members"]; found {
		err = json.Unmarshal(raw, &a.Members)
		if err != nil {
			return fmt.Errorf("error reading 'members': %w", err)
		}
		delete(object, "members")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N5GVnGroupConfiguration to handle AdditionalProperties
func (a N5GVnGroupConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N5gVnGroupData != nil {
		object["5gVnGroupData"], err = json.Marshal(a.N5gVnGroupData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gVnGroupData': %w", err)
		}
	}

	if a.AfInstanceId != nil {
		object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
		}
	}

	if len(a.InternalGroupIdentifier) != 0 {
		object["internalGroupIdentifier"], err = json.Marshal(a.InternalGroupIdentifier)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIdentifier': %w", err)
		}
	}

	if len(a.Members) != 0 {
		object["members"], err = json.Marshal(a.Members)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'members': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	if a.ReferenceId != nil {
		object["referenceId"], err = json.Marshal(a.ReferenceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for N5GVnGroupData. Returns the specified
// element and whether it was found
func (a N5GVnGroupData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for N5GVnGroupData
func (a *N5GVnGroupData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for N5GVnGroupData to handle AdditionalProperties
func (a *N5GVnGroupData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appDescriptors"]; found {
		err = json.Unmarshal(raw, &a.AppDescriptors)
		if err != nil {
			return fmt.Errorf("error reading 'appDescriptors': %w", err)
		}
		delete(object, "appDescriptors")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if raw, found := object["sNssai"]; found {
		err = json.Unmarshal(raw, &a.SNssai)
		if err != nil {
			return fmt.Errorf("error reading 'sNssai': %w", err)
		}
		delete(object, "sNssai")
	}

	if raw, found := object["secondaryAuth"]; found {
		err = json.Unmarshal(raw, &a.SecondaryAuth)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryAuth': %w", err)
		}
		delete(object, "secondaryAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for N5GVnGroupData to handle AdditionalProperties
func (a N5GVnGroupData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AppDescriptors) != 0 {
		object["appDescriptors"], err = json.Marshal(a.AppDescriptors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appDescriptors': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if len(a.PduSessionTypes) != 0 {
		object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
		}
	}

	object["sNssai"], err = json.Marshal(a.SNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sNssai': %w", err)
	}

	if a.SecondaryAuth != nil {
		object["secondaryAuth"], err = json.Marshal(a.SecondaryAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommunicationCharacteristics. Returns the specified
// element and whether it was found
func (a CommunicationCharacteristics) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommunicationCharacteristics
func (a *CommunicationCharacteristics) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommunicationCharacteristics to handle AdditionalProperties
func (a *CommunicationCharacteristics) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ppActiveTime"]; found {
		err = json.Unmarshal(raw, &a.PpActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'ppActiveTime': %w", err)
		}
		delete(object, "ppActiveTime")
	}

	if raw, found := object["ppDlPacketCount"]; found {
		err = json.Unmarshal(raw, &a.PpDlPacketCount)
		if err != nil {
			return fmt.Errorf("error reading 'ppDlPacketCount': %w", err)
		}
		delete(object, "ppDlPacketCount")
	}

	if raw, found := object["ppDlPacketCountExt"]; found {
		err = json.Unmarshal(raw, &a.PpDlPacketCountExt)
		if err != nil {
			return fmt.Errorf("error reading 'ppDlPacketCountExt': %w", err)
		}
		delete(object, "ppDlPacketCountExt")
	}

	if raw, found := object["ppMaximumLatency"]; found {
		err = json.Unmarshal(raw, &a.PpMaximumLatency)
		if err != nil {
			return fmt.Errorf("error reading 'ppMaximumLatency': %w", err)
		}
		delete(object, "ppMaximumLatency")
	}

	if raw, found := object["ppMaximumResponseTime"]; found {
		err = json.Unmarshal(raw, &a.PpMaximumResponseTime)
		if err != nil {
			return fmt.Errorf("error reading 'ppMaximumResponseTime': %w", err)
		}
		delete(object, "ppMaximumResponseTime")
	}

	if raw, found := object["ppSubsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.PpSubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'ppSubsRegTimer': %w", err)
		}
		delete(object, "ppSubsRegTimer")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommunicationCharacteristics to handle AdditionalProperties
func (a CommunicationCharacteristics) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ppActiveTime"], err = json.Marshal(a.PpActiveTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppActiveTime': %w", err)
	}

	object["ppDlPacketCount"], err = json.Marshal(a.PpDlPacketCount)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppDlPacketCount': %w", err)
	}

	object["ppDlPacketCountExt"], err = json.Marshal(a.PpDlPacketCountExt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppDlPacketCountExt': %w", err)
	}

	object["ppMaximumLatency"], err = json.Marshal(a.PpMaximumLatency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppMaximumLatency': %w", err)
	}

	object["ppMaximumResponseTime"], err = json.Marshal(a.PpMaximumResponseTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppMaximumResponseTime': %w", err)
	}

	object["ppSubsRegTimer"], err = json.Marshal(a.PpSubsRegTimer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ppSubsRegTimer': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EcRestriction. Returns the specified
// element and whether it was found
func (a EcRestriction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EcRestriction
func (a *EcRestriction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EcRestriction to handle AdditionalProperties
func (a *EcRestriction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["plmnEcInfos"]; found {
		err = json.Unmarshal(raw, &a.PlmnEcInfos)
		if err != nil {
			return fmt.Errorf("error reading 'plmnEcInfos': %w", err)
		}
		delete(object, "plmnEcInfos")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EcRestriction to handle AdditionalProperties
func (a EcRestriction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	if len(a.PlmnEcInfos) != 0 {
		object["plmnEcInfos"], err = json.Marshal(a.PlmnEcInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnEcInfos': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExpectedUeBehaviour. Returns the specified
// element and whether it was found
func (a ExpectedUeBehaviour) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExpectedUeBehaviour
func (a *ExpectedUeBehaviour) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExpectedUeBehaviour to handle AdditionalProperties
func (a *ExpectedUeBehaviour) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["batteryIndication"]; found {
		err = json.Unmarshal(raw, &a.BatteryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'batteryIndication': %w", err)
		}
		delete(object, "batteryIndication")
	}

	if raw, found := object["communicationDurationTime"]; found {
		err = json.Unmarshal(raw, &a.CommunicationDurationTime)
		if err != nil {
			return fmt.Errorf("error reading 'communicationDurationTime': %w", err)
		}
		delete(object, "communicationDurationTime")
	}

	if raw, found := object["expectedUmts"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUmts)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUmts': %w", err)
		}
		delete(object, "expectedUmts")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["periodicTime"]; found {
		err = json.Unmarshal(raw, &a.PeriodicTime)
		if err != nil {
			return fmt.Errorf("error reading 'periodicTime': %w", err)
		}
		delete(object, "periodicTime")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["scheduledCommunicationTime"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationTime)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationTime': %w", err)
		}
		delete(object, "scheduledCommunicationTime")
	}

	if raw, found := object["scheduledCommunicationType"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationType)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationType': %w", err)
		}
		delete(object, "scheduledCommunicationType")
	}

	if raw, found := object["stationaryIndication"]; found {
		err = json.Unmarshal(raw, &a.StationaryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'stationaryIndication': %w", err)
		}
		delete(object, "stationaryIndication")
	}

	if raw, found := object["trafficProfile"]; found {
		err = json.Unmarshal(raw, &a.TrafficProfile)
		if err != nil {
			return fmt.Errorf("error reading 'trafficProfile': %w", err)
		}
		delete(object, "trafficProfile")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExpectedUeBehaviour to handle AdditionalProperties
func (a ExpectedUeBehaviour) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.BatteryIndication != nil {
		object["batteryIndication"], err = json.Marshal(a.BatteryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryIndication': %w", err)
		}
	}

	object["communicationDurationTime"], err = json.Marshal(a.CommunicationDurationTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'communicationDurationTime': %w", err)
	}

	object["expectedUmts"], err = json.Marshal(a.ExpectedUmts)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'expectedUmts': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["periodicTime"], err = json.Marshal(a.PeriodicTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'periodicTime': %w", err)
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ScheduledCommunicationTime != nil {
		object["scheduledCommunicationTime"], err = json.Marshal(a.ScheduledCommunicationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationTime': %w", err)
		}
	}

	if a.ScheduledCommunicationType != nil {
		object["scheduledCommunicationType"], err = json.Marshal(a.ScheduledCommunicationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationType': %w", err)
		}
	}

	if a.StationaryIndication != nil {
		object["stationaryIndication"], err = json.Marshal(a.StationaryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stationaryIndication': %w", err)
		}
	}

	if a.TrafficProfile != nil {
		object["trafficProfile"], err = json.Marshal(a.TrafficProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficProfile': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsPrivacy. Returns the specified
// element and whether it was found
func (a LcsPrivacy) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsPrivacy
func (a *LcsPrivacy) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsPrivacy to handle AdditionalProperties
func (a *LcsPrivacy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["lpi"]; found {
		err = json.Unmarshal(raw, &a.Lpi)
		if err != nil {
			return fmt.Errorf("error reading 'lpi': %w", err)
		}
		delete(object, "lpi")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsPrivacy to handle AdditionalProperties
func (a LcsPrivacy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfInstanceId != nil {
		object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
		}
	}

	if a.Lpi != nil {
		object["lpi"], err = json.Marshal(a.Lpi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lpi': %w", err)
		}
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	if a.ReferenceId != nil {
		object["referenceId"], err = json.Marshal(a.ReferenceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationArea. Returns the specified
// element and whether it was found
func (a LocationArea) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationArea
func (a *LocationArea) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationArea to handle AdditionalProperties
func (a *LocationArea) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["civicAddresses"]; found {
		err = json.Unmarshal(raw, &a.CivicAddresses)
		if err != nil {
			return fmt.Errorf("error reading 'civicAddresses': %w", err)
		}
		delete(object, "civicAddresses")
	}

	if raw, found := object["geographicAreas"]; found {
		err = json.Unmarshal(raw, &a.GeographicAreas)
		if err != nil {
			return fmt.Errorf("error reading 'geographicAreas': %w", err)
		}
		delete(object, "geographicAreas")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationArea to handle AdditionalProperties
func (a LocationArea) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CivicAddresses != nil {
		object["civicAddresses"], err = json.Marshal(a.CivicAddresses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'civicAddresses': %w", err)
		}
	}

	if a.GeographicAreas != nil {
		object["geographicAreas"], err = json.Marshal(a.GeographicAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'geographicAreas': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkAreaInfo. Returns the specified
// element and whether it was found
func (a NetworkAreaInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkAreaInfo
func (a *NetworkAreaInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkAreaInfo to handle AdditionalProperties
func (a *NetworkAreaInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecgis"]; found {
		err = json.Unmarshal(raw, &a.Ecgis)
		if err != nil {
			return fmt.Errorf("error reading 'ecgis': %w", err)
		}
		delete(object, "ecgis")
	}

	if raw, found := object["gRanNodeIds"]; found {
		err = json.Unmarshal(raw, &a.GRanNodeIds)
		if err != nil {
			return fmt.Errorf("error reading 'gRanNodeIds': %w", err)
		}
		delete(object, "gRanNodeIds")
	}

	if raw, found := object["ncgis"]; found {
		err = json.Unmarshal(raw, &a.Ncgis)
		if err != nil {
			return fmt.Errorf("error reading 'ncgis': %w", err)
		}
		delete(object, "ncgis")
	}

	if raw, found := object["tais"]; found {
		err = json.Unmarshal(raw, &a.Tais)
		if err != nil {
			return fmt.Errorf("error reading 'tais': %w", err)
		}
		delete(object, "tais")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkAreaInfo to handle AdditionalProperties
func (a NetworkAreaInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ecgis) != 0 {
		object["ecgis"], err = json.Marshal(a.Ecgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecgis': %w", err)
		}
	}

	if len(a.GRanNodeIds) != 0 {
		object["gRanNodeIds"], err = json.Marshal(a.GRanNodeIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gRanNodeIds': %w", err)
		}
	}

	if len(a.Ncgis) != 0 {
		object["ncgis"], err = json.Marshal(a.Ncgis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ncgis': %w", err)
		}
	}

	if len(a.Tais) != 0 {
		object["tais"], err = json.Marshal(a.Tais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tais': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnEcInfo. Returns the specified
// element and whether it was found
func (a PlmnEcInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnEcInfo
func (a *PlmnEcInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnEcInfo to handle AdditionalProperties
func (a *PlmnEcInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecRestrictionDataNb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataNb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataNb': %w", err)
		}
		delete(object, "ecRestrictionDataNb")
	}

	if raw, found := object["ecRestrictionDataWb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataWb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataWb': %w", err)
		}
		delete(object, "ecRestrictionDataWb")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnEcInfo to handle AdditionalProperties
func (a PlmnEcInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EcRestrictionDataNb != nil {
		object["ecRestrictionDataNb"], err = json.Marshal(a.EcRestrictionDataNb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataNb': %w", err)
		}
	}

	if a.EcRestrictionDataWb != nil {
		object["ecRestrictionDataWb"], err = json.Marshal(a.EcRestrictionDataWb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataWb': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpActiveTime. Returns the specified
// element and whether it was found
func (a PpActiveTime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpActiveTime
func (a *PpActiveTime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpActiveTime to handle AdditionalProperties
func (a *PpActiveTime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["activeTime"]; found {
		err = json.Unmarshal(raw, &a.ActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'activeTime': %w", err)
		}
		delete(object, "activeTime")
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpActiveTime to handle AdditionalProperties
func (a PpActiveTime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["activeTime"], err = json.Marshal(a.ActiveTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'activeTime': %w", err)
	}

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpData. Returns the specified
// element and whether it was found
func (a PpData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpData
func (a *PpData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpData to handle AdditionalProperties
func (a *PpData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["acsInfo"]; found {
		err = json.Unmarshal(raw, &a.AcsInfo)
		if err != nil {
			return fmt.Errorf("error reading 'acsInfo': %w", err)
		}
		delete(object, "acsInfo")
	}

	if raw, found := object["communicationCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.CommunicationCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading 'communicationCharacteristics': %w", err)
		}
		delete(object, "communicationCharacteristics")
	}

	if raw, found := object["ecRestriction"]; found {
		err = json.Unmarshal(raw, &a.EcRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestriction': %w", err)
		}
		delete(object, "ecRestriction")
	}

	if raw, found := object["expectedUeBehaviourParameters"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUeBehaviourParameters)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUeBehaviourParameters': %w", err)
		}
		delete(object, "expectedUeBehaviourParameters")
	}

	if raw, found := object["lcsPrivacy"]; found {
		err = json.Unmarshal(raw, &a.LcsPrivacy)
		if err != nil {
			return fmt.Errorf("error reading 'lcsPrivacy': %w", err)
		}
		delete(object, "lcsPrivacy")
	}

	if raw, found := object["sorInfo"]; found {
		err = json.Unmarshal(raw, &a.SorInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sorInfo': %w", err)
		}
		delete(object, "sorInfo")
	}

	if raw, found := object["stnSr"]; found {
		err = json.Unmarshal(raw, &a.StnSr)
		if err != nil {
			return fmt.Errorf("error reading 'stnSr': %w", err)
		}
		delete(object, "stnSr")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpData to handle AdditionalProperties
func (a PpData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AcsInfo != nil {
		object["acsInfo"], err = json.Marshal(a.AcsInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsInfo': %w", err)
		}
	}

	if a.CommunicationCharacteristics != nil {
		object["communicationCharacteristics"], err = json.Marshal(a.CommunicationCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'communicationCharacteristics': %w", err)
		}
	}

	if a.EcRestriction != nil {
		object["ecRestriction"], err = json.Marshal(a.EcRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestriction': %w", err)
		}
	}

	if a.ExpectedUeBehaviourParameters != nil {
		object["expectedUeBehaviourParameters"], err = json.Marshal(a.ExpectedUeBehaviourParameters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUeBehaviourParameters': %w", err)
		}
	}

	if a.LcsPrivacy != nil {
		object["lcsPrivacy"], err = json.Marshal(a.LcsPrivacy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsPrivacy': %w", err)
		}
	}

	if a.SorInfo != nil {
		object["sorInfo"], err = json.Marshal(a.SorInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorInfo': %w", err)
		}
	}

	object["stnSr"], err = json.Marshal(a.StnSr)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'stnSr': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpDlPacketCountExt. Returns the specified
// element and whether it was found
func (a PpDlPacketCountExt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpDlPacketCountExt
func (a *PpDlPacketCountExt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpDlPacketCountExt to handle AdditionalProperties
func (a *PpDlPacketCountExt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpDlPacketCountExt to handle AdditionalProperties
func (a PpDlPacketCountExt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpMaximumLatency. Returns the specified
// element and whether it was found
func (a PpMaximumLatency) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpMaximumLatency
func (a *PpMaximumLatency) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpMaximumLatency to handle AdditionalProperties
func (a *PpMaximumLatency) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["maximumLatency"]; found {
		err = json.Unmarshal(raw, &a.MaximumLatency)
		if err != nil {
			return fmt.Errorf("error reading 'maximumLatency': %w", err)
		}
		delete(object, "maximumLatency")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpMaximumLatency to handle AdditionalProperties
func (a PpMaximumLatency) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	object["maximumLatency"], err = json.Marshal(a.MaximumLatency)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maximumLatency': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpMaximumResponseTime. Returns the specified
// element and whether it was found
func (a PpMaximumResponseTime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpMaximumResponseTime
func (a *PpMaximumResponseTime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpMaximumResponseTime to handle AdditionalProperties
func (a *PpMaximumResponseTime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["maximumResponseTime"]; found {
		err = json.Unmarshal(raw, &a.MaximumResponseTime)
		if err != nil {
			return fmt.Errorf("error reading 'maximumResponseTime': %w", err)
		}
		delete(object, "maximumResponseTime")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpMaximumResponseTime to handle AdditionalProperties
func (a PpMaximumResponseTime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	object["maximumResponseTime"], err = json.Marshal(a.MaximumResponseTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'maximumResponseTime': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PpSubsRegTimer. Returns the specified
// element and whether it was found
func (a PpSubsRegTimer) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PpSubsRegTimer
func (a *PpSubsRegTimer) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PpSubsRegTimer to handle AdditionalProperties
func (a *PpSubsRegTimer) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'afInstanceId': %w", err)
		}
		delete(object, "afInstanceId")
	}

	if raw, found := object["mtcProviderInformation"]; found {
		err = json.Unmarshal(raw, &a.MtcProviderInformation)
		if err != nil {
			return fmt.Errorf("error reading 'mtcProviderInformation': %w", err)
		}
		delete(object, "mtcProviderInformation")
	}

	if raw, found := object["referenceId"]; found {
		err = json.Unmarshal(raw, &a.ReferenceId)
		if err != nil {
			return fmt.Errorf("error reading 'referenceId': %w", err)
		}
		delete(object, "referenceId")
	}

	if raw, found := object["subsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.SubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'subsRegTimer': %w", err)
		}
		delete(object, "subsRegTimer")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PpSubsRegTimer to handle AdditionalProperties
func (a PpSubsRegTimer) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afInstanceId"], err = json.Marshal(a.AfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afInstanceId': %w", err)
	}

	if a.MtcProviderInformation != nil {
		object["mtcProviderInformation"], err = json.Marshal(a.MtcProviderInformation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtcProviderInformation': %w", err)
		}
	}

	object["referenceId"], err = json.Marshal(a.ReferenceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'referenceId': %w", err)
	}

	object["subsRegTimer"], err = json.Marshal(a.SubsRegTimer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subsRegTimer': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Delete5GVNGroup request
	Delete5GVNGroup(ctx context.Context, extGroupId string, params *Delete5GVNGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get5GVNGroup request
	Get5GVNGroup(ctx context.Context, extGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Modify5GVNGroupWithBody request with any body
	Modify5GVNGroupWithBody(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Modify5GVNGroupWithApplicationMergePatchPlusJSONBody(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, body Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create5GVNGroupWithBody request with any body
	Create5GVNGroupWithBody(ctx context.Context, extGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create5GVNGroup(ctx context.Context, extGroupId string, body Create5GVNGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWithBody request with any body
	UpdateWithBody(ctx context.Context, ueId string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId string, params *UpdateParams, body UpdateApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Delete5GVNGroup(ctx context.Context, extGroupId string, params *Delete5GVNGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete5GVNGroupRequest(c.Server, extGroupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get5GVNGroup(ctx context.Context, extGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet5GVNGroupRequest(c.Server, extGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modify5GVNGroupWithBody(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModify5GVNGroupRequestWithBody(c.Server, extGroupId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Modify5GVNGroupWithApplicationMergePatchPlusJSONBody(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, body Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModify5GVNGroupRequestWithApplicationMergePatchPlusJSONBody(c.Server, extGroupId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5GVNGroupWithBody(ctx context.Context, extGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5GVNGroupRequestWithBody(c.Server, extGroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5GVNGroup(ctx context.Context, extGroupId string, body Create5GVNGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5GVNGroupRequest(c.Server, extGroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithBody(ctx context.Context, ueId string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId string, params *UpdateParams, body UpdateApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDelete5GVNGroupRequest generates requests for Delete5GVNGroup
func NewDelete5GVNGroupRequest(server string, extGroupId string, params *Delete5GVNGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extGroupId", runtime.ParamLocationPath, extGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MtcProviderInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mtc-provider-info", runtime.ParamLocationQuery, *params.MtcProviderInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AfId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "af-id", runtime.ParamLocationQuery, *params.AfId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet5GVNGroupRequest generates requests for Get5GVNGroup
func NewGet5GVNGroupRequest(server string, extGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extGroupId", runtime.ParamLocationPath, extGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModify5GVNGroupRequestWithApplicationMergePatchPlusJSONBody calls the generic Modify5GVNGroup builder with application/merge-patch+json body
func NewModify5GVNGroupRequestWithApplicationMergePatchPlusJSONBody(server string, extGroupId string, params *Modify5GVNGroupParams, body Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModify5GVNGroupRequestWithBody(server, extGroupId, params, "application/merge-patch+json", bodyReader)
}

// NewModify5GVNGroupRequestWithBody generates requests for Modify5GVNGroup with any type of body
func NewModify5GVNGroupRequestWithBody(server string, extGroupId string, params *Modify5GVNGroupParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extGroupId", runtime.ParamLocationPath, extGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreate5GVNGroupRequest calls the generic Create5GVNGroup builder with application/json body
func NewCreate5GVNGroupRequest(server string, extGroupId string, body Create5GVNGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate5GVNGroupRequestWithBody(server, extGroupId, "application/json", bodyReader)
}

// NewCreate5GVNGroupRequestWithBody generates requests for Create5GVNGroup with any type of body
func NewCreate5GVNGroupRequestWithBody(server string, extGroupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extGroupId", runtime.ParamLocationPath, extGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/5g-vn-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRequestWithApplicationMergePatchPlusJSONBody calls the generic Update builder with application/merge-patch+json body
func NewUpdateRequestWithApplicationMergePatchPlusJSONBody(server string, ueId string, params *UpdateParams, body UpdateApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(server, ueId, params, "application/merge-patch+json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(server string, ueId string, params *UpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/pp-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Delete5GVNGroupWithResponse request
	Delete5GVNGroupWithResponse(ctx context.Context, extGroupId string, params *Delete5GVNGroupParams, reqEditors ...RequestEditorFn) (*Delete5GVNGroupResponse, error)

	// Get5GVNGroupWithResponse request
	Get5GVNGroupWithResponse(ctx context.Context, extGroupId string, reqEditors ...RequestEditorFn) (*Get5GVNGroupResponse, error)

	// Modify5GVNGroupWithBodyWithResponse request with any body
	Modify5GVNGroupWithBodyWithResponse(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modify5GVNGroupResponse, error)

	Modify5GVNGroupWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, body Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Modify5GVNGroupResponse, error)

	// Create5GVNGroupWithBodyWithResponse request with any body
	Create5GVNGroupWithBodyWithResponse(ctx context.Context, extGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5GVNGroupResponse, error)

	Create5GVNGroupWithResponse(ctx context.Context, extGroupId string, body Create5GVNGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*Create5GVNGroupResponse, error)

	// UpdateWithBodyWithResponse request with any body
	UpdateWithBodyWithResponse(ctx context.Context, ueId string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	UpdateWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId string, params *UpdateParams, body UpdateApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)
}

type Delete5GVNGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r Delete5GVNGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete5GVNGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get5GVNGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *N5GVnGroupConfiguration
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r Get5GVNGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get5GVNGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Modify5GVNGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r Modify5GVNGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Modify5GVNGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create5GVNGroupResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r Create5GVNGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create5GVNGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.PatchResult
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Delete5GVNGroupWithResponse request returning *Delete5GVNGroupResponse
func (c *ClientWithResponses) Delete5GVNGroupWithResponse(ctx context.Context, extGroupId string, params *Delete5GVNGroupParams, reqEditors ...RequestEditorFn) (*Delete5GVNGroupResponse, error) {
	rsp, err := c.Delete5GVNGroup(ctx, extGroupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete5GVNGroupResponse(rsp)
}

// Get5GVNGroupWithResponse request returning *Get5GVNGroupResponse
func (c *ClientWithResponses) Get5GVNGroupWithResponse(ctx context.Context, extGroupId string, reqEditors ...RequestEditorFn) (*Get5GVNGroupResponse, error) {
	rsp, err := c.Get5GVNGroup(ctx, extGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet5GVNGroupResponse(rsp)
}

// Modify5GVNGroupWithBodyWithResponse request with arbitrary body returning *Modify5GVNGroupResponse
func (c *ClientWithResponses) Modify5GVNGroupWithBodyWithResponse(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Modify5GVNGroupResponse, error) {
	rsp, err := c.Modify5GVNGroupWithBody(ctx, extGroupId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModify5GVNGroupResponse(rsp)
}

func (c *ClientWithResponses) Modify5GVNGroupWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, extGroupId string, params *Modify5GVNGroupParams, body Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Modify5GVNGroupResponse, error) {
	rsp, err := c.Modify5GVNGroupWithApplicationMergePatchPlusJSONBody(ctx, extGroupId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModify5GVNGroupResponse(rsp)
}

// Create5GVNGroupWithBodyWithResponse request with arbitrary body returning *Create5GVNGroupResponse
func (c *ClientWithResponses) Create5GVNGroupWithBodyWithResponse(ctx context.Context, extGroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5GVNGroupResponse, error) {
	rsp, err := c.Create5GVNGroupWithBody(ctx, extGroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5GVNGroupResponse(rsp)
}

func (c *ClientWithResponses) Create5GVNGroupWithResponse(ctx context.Context, extGroupId string, body Create5GVNGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*Create5GVNGroupResponse, error) {
	rsp, err := c.Create5GVNGroup(ctx, extGroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5GVNGroupResponse(rsp)
}

// UpdateWithBodyWithResponse request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBodyWithResponse(ctx context.Context, ueId string, params *UpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) UpdateWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId string, params *UpdateParams, body UpdateApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithApplicationMergePatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

// ParseDelete5GVNGroupResponse parses an HTTP response from a Delete5GVNGroupWithResponse call
func ParseDelete5GVNGroupResponse(rsp *http.Response) (*Delete5GVNGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete5GVNGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGet5GVNGroupResponse parses an HTTP response from a Get5GVNGroupWithResponse call
func ParseGet5GVNGroupResponse(rsp *http.Response) (*Get5GVNGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get5GVNGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest N5GVnGroupConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModify5GVNGroupResponse parses an HTTP response from a Modify5GVNGroupWithResponse call
func ParseModify5GVNGroupResponse(rsp *http.Response) (*Modify5GVNGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Modify5GVNGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreate5GVNGroupResponse parses an HTTP response from a Create5GVNGroupWithResponse call
func ParseCreate5GVNGroupResponse(rsp *http.Response) (*Create5GVNGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create5GVNGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateResponse parses an HTTP response from a UpdateWithResponse call
func ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// delete a 5G VN Group
	// (DELETE /5g-vn-groups/{extGroupId})
	Delete5GVNGroup(c *gin.Context, extGroupId string, params Delete5GVNGroupParams)
	// get 5G VN Group
	// (GET /5g-vn-groups/{extGroupId})
	Get5GVNGroup(c *gin.Context, extGroupId string)
	// modify a 5G VN Group
	// (PATCH /5g-vn-groups/{extGroupId})
	Modify5GVNGroup(c *gin.Context, extGroupId string, params Modify5GVNGroupParams)
	// create a 5G VN Group
	// (PUT /5g-vn-groups/{extGroupId})
	Create5GVNGroup(c *gin.Context, extGroupId string)
	// provision parameters
	// (PATCH /{ueId}/pp-data)
	Update(c *gin.Context, ueId string, params UpdateParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Delete5GVNGroup operation middleware
func (siw *ServerInterfaceWrapper) Delete5GVNGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "extGroupId" -------------
	var extGroupId string

	err = runtime.BindStyledParameter("simple", false, "extGroupId", c.Param("extGroupId"), &extGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-pp"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Delete5GVNGroupParams

	// ------------- Optional query parameter "mtc-provider-info" -------------

	err = runtime.BindQueryParameter("form", true, false, "mtc-provider-info", c.Request.URL.Query(), &params.MtcProviderInfo)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mtc-provider-info: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "af-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "af-id", c.Request.URL.Query(), &params.AfId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter af-id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Delete5GVNGroup(c, extGroupId, params)
}

// Get5GVNGroup operation middleware
func (siw *ServerInterfaceWrapper) Get5GVNGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "extGroupId" -------------
	var extGroupId string

	err = runtime.BindStyledParameter("simple", false, "extGroupId", c.Param("extGroupId"), &extGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-pp"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get5GVNGroup(c, extGroupId)
}

// Modify5GVNGroup operation middleware
func (siw *ServerInterfaceWrapper) Modify5GVNGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "extGroupId" -------------
	var extGroupId string

	err = runtime.BindStyledParameter("simple", false, "extGroupId", c.Param("extGroupId"), &extGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-pp"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Modify5GVNGroupParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Modify5GVNGroup(c, extGroupId, params)
}

// Create5GVNGroup operation middleware
func (siw *ServerInterfaceWrapper) Create5GVNGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "extGroupId" -------------
	var extGroupId string

	err = runtime.BindStyledParameter("simple", false, "extGroupId", c.Param("extGroupId"), &extGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extGroupId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-pp"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Create5GVNGroup(c, extGroupId)
}

// Update operation middleware
func (siw *ServerInterfaceWrapper) Update(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId string

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-pp"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Update(c, ueId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/5g-vn-groups/:extGroupId", wrapper.Delete5GVNGroup)
	router.GET(options.BaseURL+"/5g-vn-groups/:extGroupId", wrapper.Get5GVNGroup)
	router.PATCH(options.BaseURL+"/5g-vn-groups/:extGroupId", wrapper.Modify5GVNGroup)
	router.PUT(options.BaseURL+"/5g-vn-groups/:extGroupId", wrapper.Create5GVNGroup)
	router.PATCH(options.BaseURL+"/:ueId/pp-data", wrapper.Update)
}

type Delete5GVNGroupRequestObject struct {
	ExtGroupId string `json:"extGroupId"`
	Params     Delete5GVNGroupParams
}

type Delete5GVNGroupResponseObject interface {
	VisitDelete5GVNGroupResponse(w http.ResponseWriter) error
}

type Delete5GVNGroup204Response struct {
}

func (response Delete5GVNGroup204Response) VisitDelete5GVNGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Delete5GVNGroup400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Delete5GVNGroup400ApplicationProblemPlusJSONResponse) VisitDelete5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Delete5GVNGroup403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Delete5GVNGroup403ApplicationProblemPlusJSONResponse) VisitDelete5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Delete5GVNGroup404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Delete5GVNGroup404ApplicationProblemPlusJSONResponse) VisitDelete5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Delete5GVNGroup500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Delete5GVNGroup500ApplicationProblemPlusJSONResponse) VisitDelete5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Delete5GVNGroup503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Delete5GVNGroup503ApplicationProblemPlusJSONResponse) VisitDelete5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Delete5GVNGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Delete5GVNGroupdefaultApplicationProblemPlusJSONResponse) VisitDelete5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Get5GVNGroupRequestObject struct {
	ExtGroupId string `json:"extGroupId"`
}

type Get5GVNGroupResponseObject interface {
	VisitGet5GVNGroupResponse(w http.ResponseWriter) error
}

type Get5GVNGroup200JSONResponse N5GVnGroupConfiguration

func (response Get5GVNGroup200JSONResponse) VisitGet5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Get5GVNGroup400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Get5GVNGroup400ApplicationProblemPlusJSONResponse) VisitGet5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Get5GVNGroup403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Get5GVNGroup403ApplicationProblemPlusJSONResponse) VisitGet5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Get5GVNGroup404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Get5GVNGroup404ApplicationProblemPlusJSONResponse) VisitGet5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Get5GVNGroup500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Get5GVNGroup500ApplicationProblemPlusJSONResponse) VisitGet5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Get5GVNGroup503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Get5GVNGroup503ApplicationProblemPlusJSONResponse) VisitGet5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Get5GVNGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Get5GVNGroupdefaultApplicationProblemPlusJSONResponse) VisitGet5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Modify5GVNGroupRequestObject struct {
	ExtGroupId string `json:"extGroupId"`
	Params     Modify5GVNGroupParams
	Body       *Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody
}

type Modify5GVNGroupResponseObject interface {
	VisitModify5GVNGroupResponse(w http.ResponseWriter) error
}

type Modify5GVNGroup200JSONResponse externalRef0.PatchResult

func (response Modify5GVNGroup200JSONResponse) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVNGroup204Response struct {
}

func (response Modify5GVNGroup204Response) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Modify5GVNGroup400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Modify5GVNGroup400ApplicationProblemPlusJSONResponse) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVNGroup403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Modify5GVNGroup403ApplicationProblemPlusJSONResponse) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVNGroup404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Modify5GVNGroup404ApplicationProblemPlusJSONResponse) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVNGroup500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Modify5GVNGroup500ApplicationProblemPlusJSONResponse) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVNGroup503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Modify5GVNGroup503ApplicationProblemPlusJSONResponse) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Modify5GVNGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Modify5GVNGroupdefaultApplicationProblemPlusJSONResponse) VisitModify5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type Create5GVNGroupRequestObject struct {
	ExtGroupId string `json:"extGroupId"`
	Body       *Create5GVNGroupJSONRequestBody
}

type Create5GVNGroupResponseObject interface {
	VisitCreate5GVNGroupResponse(w http.ResponseWriter) error
}

type Create5GVNGroup201Response struct {
}

func (response Create5GVNGroup201Response) VisitCreate5GVNGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type Create5GVNGroup400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Create5GVNGroup400ApplicationProblemPlusJSONResponse) VisitCreate5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Create5GVNGroup403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Create5GVNGroup403ApplicationProblemPlusJSONResponse) VisitCreate5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Create5GVNGroup404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Create5GVNGroup404ApplicationProblemPlusJSONResponse) VisitCreate5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Create5GVNGroup500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Create5GVNGroup500ApplicationProblemPlusJSONResponse) VisitCreate5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Create5GVNGroup503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Create5GVNGroup503ApplicationProblemPlusJSONResponse) VisitCreate5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Create5GVNGroupdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response Create5GVNGroupdefaultApplicationProblemPlusJSONResponse) VisitCreate5GVNGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRequestObject struct {
	UeId   string `json:"ueId"`
	Params UpdateParams
	Body   *UpdateApplicationMergePatchPlusJSONRequestBody
}

type UpdateResponseObject interface {
	VisitUpdateResponse(w http.ResponseWriter) error
}

type Update200JSONResponse externalRef0.PatchResult

func (response Update200JSONResponse) VisitUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Update204Response struct {
}

func (response Update204Response) VisitUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Update400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Update400ApplicationProblemPlusJSONResponse) VisitUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Update403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Update403ApplicationProblemPlusJSONResponse) VisitUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Update404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Update404ApplicationProblemPlusJSONResponse) VisitUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Update500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Update500ApplicationProblemPlusJSONResponse) VisitUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Update503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Update503ApplicationProblemPlusJSONResponse) VisitUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdatedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdatedefaultApplicationProblemPlusJSONResponse) VisitUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// delete a 5G VN Group
	// (DELETE /5g-vn-groups/{extGroupId})
	Delete5GVNGroup(ctx context.Context, request Delete5GVNGroupRequestObject) (Delete5GVNGroupResponseObject, error)
	// get 5G VN Group
	// (GET /5g-vn-groups/{extGroupId})
	Get5GVNGroup(ctx context.Context, request Get5GVNGroupRequestObject) (Get5GVNGroupResponseObject, error)
	// modify a 5G VN Group
	// (PATCH /5g-vn-groups/{extGroupId})
	Modify5GVNGroup(ctx context.Context, request Modify5GVNGroupRequestObject) (Modify5GVNGroupResponseObject, error)
	// create a 5G VN Group
	// (PUT /5g-vn-groups/{extGroupId})
	Create5GVNGroup(ctx context.Context, request Create5GVNGroupRequestObject) (Create5GVNGroupResponseObject, error)
	// provision parameters
	// (PATCH /{ueId}/pp-data)
	Update(ctx context.Context, request UpdateRequestObject) (UpdateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Delete5GVNGroup operation middleware
func (sh *strictHandler) Delete5GVNGroup(ctx *gin.Context, extGroupId string, params Delete5GVNGroupParams) {
	var request Delete5GVNGroupRequestObject

	request.ExtGroupId = extGroupId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Delete5GVNGroup(ctx, request.(Delete5GVNGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Delete5GVNGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Delete5GVNGroupResponseObject); ok {
		if err := validResponse.VisitDelete5GVNGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Get5GVNGroup operation middleware
func (sh *strictHandler) Get5GVNGroup(ctx *gin.Context, extGroupId string) {
	var request Get5GVNGroupRequestObject

	request.ExtGroupId = extGroupId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get5GVNGroup(ctx, request.(Get5GVNGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get5GVNGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Get5GVNGroupResponseObject); ok {
		if err := validResponse.VisitGet5GVNGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Modify5GVNGroup operation middleware
func (sh *strictHandler) Modify5GVNGroup(ctx *gin.Context, extGroupId string, params Modify5GVNGroupParams) {
	var request Modify5GVNGroupRequestObject

	request.ExtGroupId = extGroupId
	request.Params = params

	var body Modify5GVNGroupApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Modify5GVNGroup(ctx, request.(Modify5GVNGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Modify5GVNGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Modify5GVNGroupResponseObject); ok {
		if err := validResponse.VisitModify5GVNGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Create5GVNGroup operation middleware
func (sh *strictHandler) Create5GVNGroup(ctx *gin.Context, extGroupId string) {
	var request Create5GVNGroupRequestObject

	request.ExtGroupId = extGroupId

	var body Create5GVNGroupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Create5GVNGroup(ctx, request.(Create5GVNGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Create5GVNGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Create5GVNGroupResponseObject); ok {
		if err := validResponse.VisitCreate5GVNGroupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Update operation middleware
func (sh *strictHandler) Update(ctx *gin.Context, ueId string, params UpdateParams) {
	var request UpdateRequestObject

	request.UeId = ueId
	request.Params = params

	var body UpdateApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Update(ctx, request.(UpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Update")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateResponseObject); ok {
		if err := validResponse.VisitUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
