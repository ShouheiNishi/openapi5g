// Package sdm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package sdm

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// GetGroupIdentifiersParams defines parameters for GetGroupIdentifiers.
type GetGroupIdentifiersParams struct {
	// ExtGroupId External Group Identifier
	ExtGroupId *externalRef0.ExtGroupId `form:"ext-group-id,omitempty" json:"ext-group-id,omitempty"`

	// IntGroupId Internal Group Identifier
	IntGroupId *externalRef0.GroupId `form:"int-group-id,omitempty" json:"int-group-id,omitempty"`

	// UeIdInd Indication whether UE identifiers are required or not
	UeIdInd *bool `form:"ue-id-ind,omitempty" json:"ue-id-ind,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSharedDataParams defines parameters for GetSharedData.
type GetSharedDataParams struct {
	// SharedDataIds List of shared data ids
	SharedDataIds externalRef0.SharedDataIds `form:"shared-data-ids" json:"shared-data-ids"`

	// SupportedFeatures Supported Features; this query parameter should not be used
	SupportedFeaturesShouldNotBeUsed *externalRef0.SupportedFeatures `form:"supportedFeatures,omitempty" json:"supportedFeatures,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifySharedDataSubsParams defines parameters for ModifySharedDataSubs.
type ModifySharedDataSubsParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetIndividualSharedDataParams defines parameters for GetIndividualSharedData.
type GetIndividualSharedDataParams struct {
	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetDataSetsParams defines parameters for GetDataSets.
type GetDataSetsParams struct {
	// DatasetNames List of dataset names
	DatasetNames externalRef0.UDMDatasetNames `form:"dataset-names" json:"dataset-names"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef0.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetAmDataParams defines parameters for GetAmData.
type GetAmDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef0.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetEcrDataParams defines parameters for GetEcrData.
type GetEcrDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetLcsBcaDataParams defines parameters for GetLcsBcaData.
type GetLcsBcaDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	PlmnId            *externalRef0.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetLcsMoDataParams defines parameters for GetLcsMoData.
type GetLcsMoDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetNSSAIParams defines parameters for GetNSSAI.
type GetNSSAIParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef0.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmDataParams defines parameters for GetSmData.
type GetSmDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	SingleNssai       *externalRef0.Snssai            `form:"single-nssai,omitempty" json:"single-nssai,omitempty"`
	Dnn               *externalRef0.Dnn               `form:"dnn,omitempty" json:"dnn,omitempty"`
	PlmnId            *externalRef0.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmfSelDataParams defines parameters for GetSmfSelData.
type GetSmfSelDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef0.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmsDataParams defines parameters for GetSmsData.
type GetSmsDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	PlmnId            *externalRef0.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmsMngtDataParams defines parameters for GetSmsMngtData.
type GetSmsMngtDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	PlmnId            *externalRef0.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetTraceConfigDataParams defines parameters for GetTraceConfigData.
type GetTraceConfigDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef0.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetUeCtxInAmfDataParams defines parameters for GetUeCtxInAmfData.
type GetUeCtxInAmfDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetUeCtxInSmfDataParams defines parameters for GetUeCtxInSmfData.
type GetUeCtxInSmfDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetUeCtxInSmsfDataParams defines parameters for GetUeCtxInSmsfData.
type GetUeCtxInSmsfDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetV2xDataParams defines parameters for GetV2xData.
type GetV2xDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSupiOrGpsiParams defines parameters for GetSupiOrGpsi.
type GetSupiOrGpsiParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// AppPortId Application port identifier
	AppPortId *externalRef0.AppPortId `form:"app-port-id,omitempty" json:"app-port-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetLcsPrivacyDataParams defines parameters for GetLcsPrivacyData.
type GetLcsPrivacyDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifyParams defines parameters for Modify.
type ModifyParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// SubscribeToSharedDataJSONRequestBody defines body for SubscribeToSharedData for application/json ContentType.
type SubscribeToSharedDataJSONRequestBody = externalRef0.SdmSubscription

// ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody defines body for ModifySharedDataSubs for application/merge-patch+json ContentType.
type ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody = externalRef0.SdmSubsModification

// CAGAckJSONRequestBody defines body for CAGAck for application/json ContentType.
type CAGAckJSONRequestBody = externalRef0.AcknowledgeInfo

// SorAckInfoJSONRequestBody defines body for SorAckInfo for application/json ContentType.
type SorAckInfoJSONRequestBody = externalRef0.AcknowledgeInfo

// SNSSAIsAckJSONRequestBody defines body for SNSSAIsAck for application/json ContentType.
type SNSSAIsAckJSONRequestBody = externalRef0.AcknowledgeInfo

// UpdateSORInfoJSONRequestBody defines body for UpdateSORInfo for application/json ContentType.
type UpdateSORInfoJSONRequestBody = externalRef0.SorUpdateInfo

// UpuAckJSONRequestBody defines body for UpuAck for application/json ContentType.
type UpuAckJSONRequestBody = externalRef0.AcknowledgeInfo

// SubscribeJSONRequestBody defines body for Subscribe for application/json ContentType.
type SubscribeJSONRequestBody = externalRef0.SdmSubscription

// ModifyApplicationMergePatchPlusJSONRequestBody defines body for Modify for application/merge-patch+json ContentType.
type ModifyApplicationMergePatchPlusJSONRequestBody = externalRef0.SdmSubsModification

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGroupIdentifiers request
	GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedData request
	GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeToSharedDataWithBody request with any body
	SubscribeToSharedDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscribeToSharedData(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeForSharedData request
	UnsubscribeForSharedData(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifySharedDataSubsWithBody request with any body
	ModifySharedDataSubsWithBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifySharedDataSubsWithApplicationMergePatchPlusJSONBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividualSharedData request
	GetIndividualSharedData(ctx context.Context, sharedDataId externalRef0.SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataSets request
	GetDataSets(ctx context.Context, supi externalRef0.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAmData request
	GetAmData(ctx context.Context, supi externalRef0.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CAGAckWithBody request with any body
	CAGAckWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CAGAck(ctx context.Context, supi externalRef0.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEcrData request
	GetEcrData(ctx context.Context, supi externalRef0.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SorAckInfoWithBody request with any body
	SorAckInfoWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SorAckInfo(ctx context.Context, supi externalRef0.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SNSSAIsAckWithBody request with any body
	SNSSAIsAckWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SNSSAIsAck(ctx context.Context, supi externalRef0.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSORInfoWithBody request with any body
	UpdateSORInfoWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSORInfo(ctx context.Context, supi externalRef0.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpuAckWithBody request with any body
	UpuAckWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpuAck(ctx context.Context, supi externalRef0.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLcsBcaData request
	GetLcsBcaData(ctx context.Context, supi externalRef0.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLcsMoData request
	GetLcsMoData(ctx context.Context, supi externalRef0.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSSAI request
	GetNSSAI(ctx context.Context, supi externalRef0.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmData request
	GetSmData(ctx context.Context, supi externalRef0.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmfSelData request
	GetSmfSelData(ctx context.Context, supi externalRef0.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmsData request
	GetSmsData(ctx context.Context, supi externalRef0.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmsMngtData request
	GetSmsMngtData(ctx context.Context, supi externalRef0.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceConfigData request
	GetTraceConfigData(ctx context.Context, supi externalRef0.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUeCtxInAmfData request
	GetUeCtxInAmfData(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUeCtxInSmfData request
	GetUeCtxInSmfData(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUeCtxInSmsfData request
	GetUeCtxInSmsfData(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2xData request
	GetV2xData(ctx context.Context, supi externalRef0.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupiOrGpsi request
	GetSupiOrGpsi(ctx context.Context, ueId externalRef0.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLcsPrivacyData request
	GetLcsPrivacyData(ctx context.Context, ueId externalRef0.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeWithBody request with any body
	SubscribeWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Subscribe(ctx context.Context, ueId externalRef0.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unsubscribe request
	Unsubscribe(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyWithBody request with any body
	ModifyWithBody(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeToSharedDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeToSharedDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeToSharedData(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeToSharedDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeForSharedData(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeForSharedDataRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySharedDataSubsWithBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySharedDataSubsRequestWithBody(c.Server, subscriptionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySharedDataSubsWithApplicationMergePatchPlusJSONBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySharedDataSubsRequestWithApplicationMergePatchPlusJSONBody(c.Server, subscriptionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividualSharedData(ctx context.Context, sharedDataId externalRef0.SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualSharedDataRequest(c.Server, sharedDataId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataSets(ctx context.Context, supi externalRef0.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataSetsRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAmData(ctx context.Context, supi externalRef0.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAmDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CAGAckWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCAGAckRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CAGAck(ctx context.Context, supi externalRef0.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCAGAckRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEcrData(ctx context.Context, supi externalRef0.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEcrDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SorAckInfoWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSorAckInfoRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SorAckInfo(ctx context.Context, supi externalRef0.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSorAckInfoRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SNSSAIsAckWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSNSSAIsAckRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SNSSAIsAck(ctx context.Context, supi externalRef0.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSNSSAIsAckRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSORInfoWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSORInfoRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSORInfo(ctx context.Context, supi externalRef0.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSORInfoRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpuAckWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpuAckRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpuAck(ctx context.Context, supi externalRef0.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpuAckRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLcsBcaData(ctx context.Context, supi externalRef0.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLcsBcaDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLcsMoData(ctx context.Context, supi externalRef0.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLcsMoDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSSAI(ctx context.Context, supi externalRef0.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSSAIRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmData(ctx context.Context, supi externalRef0.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmfSelData(ctx context.Context, supi externalRef0.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmfSelDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmsData(ctx context.Context, supi externalRef0.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmsDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmsMngtData(ctx context.Context, supi externalRef0.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmsMngtDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceConfigData(ctx context.Context, supi externalRef0.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceConfigDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUeCtxInAmfData(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUeCtxInAmfDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUeCtxInSmfData(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUeCtxInSmfDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUeCtxInSmsfData(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUeCtxInSmsfDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2xData(ctx context.Context, supi externalRef0.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2xDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupiOrGpsi(ctx context.Context, ueId externalRef0.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupiOrGpsiRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLcsPrivacyData(ctx context.Context, ueId externalRef0.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLcsPrivacyDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeWithBody(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Subscribe(ctx context.Context, ueId externalRef0.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unsubscribe(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeRequest(c.Server, ueId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyWithBody(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRequestWithBody(c.Server, ueId, subscriptionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, subscriptionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGroupIdentifiersRequest generates requests for GetGroupIdentifiers
func NewGetGroupIdentifiersRequest(server string, params *GetGroupIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group-data/group-identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ext-group-id", runtime.ParamLocationQuery, *params.ExtGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IntGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "int-group-id", runtime.ParamLocationQuery, *params.IntGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIdInd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id-ind", runtime.ParamLocationQuery, *params.UeIdInd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSharedDataRequest generates requests for GetSharedData
func NewGetSharedDataRequest(server string, params *GetSharedDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "shared-data-ids", runtime.ParamLocationQuery, params.SharedDataIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeaturesShouldNotBeUsed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supportedFeatures", runtime.ParamLocationQuery, *params.SupportedFeaturesShouldNotBeUsed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewSubscribeToSharedDataRequest calls the generic SubscribeToSharedData builder with application/json body
func NewSubscribeToSharedDataRequest(server string, body SubscribeToSharedDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeToSharedDataRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscribeToSharedDataRequestWithBody generates requests for SubscribeToSharedData with any type of body
func NewSubscribeToSharedDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data-subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeForSharedDataRequest generates requests for UnsubscribeForSharedData
func NewUnsubscribeForSharedDataRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data-subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifySharedDataSubsRequestWithApplicationMergePatchPlusJSONBody calls the generic ModifySharedDataSubs builder with application/merge-patch+json body
func NewModifySharedDataSubsRequestWithApplicationMergePatchPlusJSONBody(server string, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifySharedDataSubsRequestWithBody(server, subscriptionId, params, "application/merge-patch+json", bodyReader)
}

// NewModifySharedDataSubsRequestWithBody generates requests for ModifySharedDataSubs with any type of body
func NewModifySharedDataSubsRequestWithBody(server string, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data-subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndividualSharedDataRequest generates requests for GetIndividualSharedData
func NewGetIndividualSharedDataRequest(server string, sharedDataId externalRef0.SharedDataIds, params *GetIndividualSharedDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sharedDataId", runtime.ParamLocationPath, sharedDataId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetDataSetsRequest generates requests for GetDataSets
func NewGetDataSetsRequest(server string, supi externalRef0.Supi, params *GetDataSetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "dataset-names", runtime.ParamLocationQuery, params.DatasetNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetAmDataRequest generates requests for GetAmData
func NewGetAmDataRequest(server string, supi externalRef0.Supi, params *GetAmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewCAGAckRequest calls the generic CAGAck builder with application/json body
func NewCAGAckRequest(server string, supi externalRef0.Supi, body CAGAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCAGAckRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewCAGAckRequestWithBody generates requests for CAGAck with any type of body
func NewCAGAckRequestWithBody(server string, supi externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/cag-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEcrDataRequest generates requests for GetEcrData
func NewGetEcrDataRequest(server string, supi externalRef0.Supi, params *GetEcrDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/ecr-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewSorAckInfoRequest calls the generic SorAckInfo builder with application/json body
func NewSorAckInfoRequest(server string, supi externalRef0.Supi, body SorAckInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSorAckInfoRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewSorAckInfoRequestWithBody generates requests for SorAckInfo with any type of body
func NewSorAckInfoRequestWithBody(server string, supi externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/sor-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSNSSAIsAckRequest calls the generic SNSSAIsAck builder with application/json body
func NewSNSSAIsAckRequest(server string, supi externalRef0.Supi, body SNSSAIsAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSNSSAIsAckRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewSNSSAIsAckRequestWithBody generates requests for SNSSAIsAck with any type of body
func NewSNSSAIsAckRequestWithBody(server string, supi externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/subscribed-snssais-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSORInfoRequest calls the generic UpdateSORInfo builder with application/json body
func NewUpdateSORInfoRequest(server string, supi externalRef0.Supi, body UpdateSORInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSORInfoRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewUpdateSORInfoRequestWithBody generates requests for UpdateSORInfo with any type of body
func NewUpdateSORInfoRequestWithBody(server string, supi externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/update-sor", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpuAckRequest calls the generic UpuAck builder with application/json body
func NewUpuAckRequest(server string, supi externalRef0.Supi, body UpuAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpuAckRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewUpuAckRequestWithBody generates requests for UpuAck with any type of body
func NewUpuAckRequestWithBody(server string, supi externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/upu-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLcsBcaDataRequest generates requests for GetLcsBcaData
func NewGetLcsBcaDataRequest(server string, supi externalRef0.Supi, params *GetLcsBcaDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/lcs-bca-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetLcsMoDataRequest generates requests for GetLcsMoData
func NewGetLcsMoDataRequest(server string, supi externalRef0.Supi, params *GetLcsMoDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/lcs-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetNSSAIRequest generates requests for GetNSSAI
func NewGetNSSAIRequest(server string, supi externalRef0.Supi, params *GetNSSAIParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/nssai", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmDataRequest generates requests for GetSmData
func NewGetSmDataRequest(server string, supi externalRef0.Supi, params *GetSmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sm-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SingleNssai != nil {

			if queryParamBuf, err := json.Marshal(*params.SingleNssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("single-nssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmfSelDataRequest generates requests for GetSmfSelData
func NewGetSmfSelDataRequest(server string, supi externalRef0.Supi, params *GetSmfSelDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/smf-select-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmsDataRequest generates requests for GetSmsData
func NewGetSmsDataRequest(server string, supi externalRef0.Supi, params *GetSmsDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sms-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmsMngtDataRequest generates requests for GetSmsMngtData
func NewGetSmsMngtDataRequest(server string, supi externalRef0.Supi, params *GetSmsMngtDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sms-mng-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetTraceConfigDataRequest generates requests for GetTraceConfigData
func NewGetTraceConfigDataRequest(server string, supi externalRef0.Supi, params *GetTraceConfigDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/trace-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetUeCtxInAmfDataRequest generates requests for GetUeCtxInAmfData
func NewGetUeCtxInAmfDataRequest(server string, supi externalRef0.Supi, params *GetUeCtxInAmfDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ue-context-in-amf-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUeCtxInSmfDataRequest generates requests for GetUeCtxInSmfData
func NewGetUeCtxInSmfDataRequest(server string, supi externalRef0.Supi, params *GetUeCtxInSmfDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ue-context-in-smf-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUeCtxInSmsfDataRequest generates requests for GetUeCtxInSmsfData
func NewGetUeCtxInSmsfDataRequest(server string, supi externalRef0.Supi, params *GetUeCtxInSmsfDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ue-context-in-smsf-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2xDataRequest generates requests for GetV2xData
func NewGetV2xDataRequest(server string, supi externalRef0.Supi, params *GetV2xDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2x-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSupiOrGpsiRequest generates requests for GetSupiOrGpsi
func NewGetSupiOrGpsiRequest(server string, ueId externalRef0.VarUeId, params *GetSupiOrGpsiParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/id-translation-result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppPortId != nil {

			if queryParamBuf, err := json.Marshal(*params.AppPortId); err != nil {
				return nil, err
			} else {
				queryValues.Add("app-port-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetLcsPrivacyDataRequest generates requests for GetLcsPrivacyData
func NewGetLcsPrivacyDataRequest(server string, ueId externalRef0.VarUeId, params *GetLcsPrivacyDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/lcs-privacy-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewSubscribeRequest calls the generic Subscribe builder with application/json body
func NewSubscribeRequest(server string, ueId externalRef0.VarUeId, body SubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewSubscribeRequestWithBody generates requests for Subscribe with any type of body
func NewSubscribeRequestWithBody(server string, ueId externalRef0.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sdm-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeRequest generates requests for Unsubscribe
func NewUnsubscribeRequest(server string, ueId externalRef0.VarUeId, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyRequestWithApplicationMergePatchPlusJSONBody calls the generic Modify builder with application/merge-patch+json body
func NewModifyRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyRequestWithBody(server, ueId, subscriptionId, params, "application/merge-patch+json", bodyReader)
}

// NewModifyRequestWithBody generates requests for Modify with any type of body
func NewModifyRequestWithBody(server string, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGroupIdentifiersWithResponse request
	GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error)

	// GetSharedDataWithResponse request
	GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error)

	// SubscribeToSharedDataWithBodyWithResponse request with any body
	SubscribeToSharedDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error)

	SubscribeToSharedDataWithResponse(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error)

	// UnsubscribeForSharedDataWithResponse request
	UnsubscribeForSharedDataWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeForSharedDataResponse, error)

	// ModifySharedDataSubsWithBodyWithResponse request with any body
	ModifySharedDataSubsWithBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error)

	ModifySharedDataSubsWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error)

	// GetIndividualSharedDataWithResponse request
	GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId externalRef0.SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error)

	// GetDataSetsWithResponse request
	GetDataSetsWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*GetDataSetsResponse, error)

	// GetAmDataWithResponse request
	GetAmDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*GetAmDataResponse, error)

	// CAGAckWithBodyWithResponse request with any body
	CAGAckWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CAGAckResponse, error)

	CAGAckWithResponse(ctx context.Context, supi externalRef0.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CAGAckResponse, error)

	// GetEcrDataWithResponse request
	GetEcrDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*GetEcrDataResponse, error)

	// SorAckInfoWithBodyWithResponse request with any body
	SorAckInfoWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error)

	SorAckInfoWithResponse(ctx context.Context, supi externalRef0.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error)

	// SNSSAIsAckWithBodyWithResponse request with any body
	SNSSAIsAckWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error)

	SNSSAIsAckWithResponse(ctx context.Context, supi externalRef0.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error)

	// UpdateSORInfoWithBodyWithResponse request with any body
	UpdateSORInfoWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error)

	UpdateSORInfoWithResponse(ctx context.Context, supi externalRef0.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error)

	// UpuAckWithBodyWithResponse request with any body
	UpuAckWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpuAckResponse, error)

	UpuAckWithResponse(ctx context.Context, supi externalRef0.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*UpuAckResponse, error)

	// GetLcsBcaDataWithResponse request
	GetLcsBcaDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*GetLcsBcaDataResponse, error)

	// GetLcsMoDataWithResponse request
	GetLcsMoDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*GetLcsMoDataResponse, error)

	// GetNSSAIWithResponse request
	GetNSSAIWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*GetNSSAIResponse, error)

	// GetSmDataWithResponse request
	GetSmDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*GetSmDataResponse, error)

	// GetSmfSelDataWithResponse request
	GetSmfSelDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*GetSmfSelDataResponse, error)

	// GetSmsDataWithResponse request
	GetSmsDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*GetSmsDataResponse, error)

	// GetSmsMngtDataWithResponse request
	GetSmsMngtDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*GetSmsMngtDataResponse, error)

	// GetTraceConfigDataWithResponse request
	GetTraceConfigDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*GetTraceConfigDataResponse, error)

	// GetUeCtxInAmfDataWithResponse request
	GetUeCtxInAmfDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInAmfDataResponse, error)

	// GetUeCtxInSmfDataWithResponse request
	GetUeCtxInSmfDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmfDataResponse, error)

	// GetUeCtxInSmsfDataWithResponse request
	GetUeCtxInSmsfDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmsfDataResponse, error)

	// GetV2xDataWithResponse request
	GetV2xDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*GetV2xDataResponse, error)

	// GetSupiOrGpsiWithResponse request
	GetSupiOrGpsiWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*GetSupiOrGpsiResponse, error)

	// GetLcsPrivacyDataWithResponse request
	GetLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*GetLcsPrivacyDataResponse, error)

	// SubscribeWithBodyWithResponse request with any body
	SubscribeWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeResponse, error)

	SubscribeWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeResponse, error)

	// UnsubscribeWithResponse request
	UnsubscribeWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error)

	// ModifyWithBodyWithResponse request with any body
	ModifyWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyResponse, error)

	ModifyWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyResponse, error)
}

type GetGroupIdentifiersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.GroupIdentifiers
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetGroupIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef0.SharedData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeToSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.SdmSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SubscribeToSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeToSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeForSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UnsubscribeForSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeForSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifySharedDataSubsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ModifySharedDataSubsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifySharedDataSubsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SharedData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetIndividualSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataSetsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SubscriptionDataSets
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetDataSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AccessAndMobilitySubscriptionData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CAGAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CAGAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CAGAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEcrDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.EnhancedCoverageRestrictionData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetEcrDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEcrDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SorAckInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SorAckInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SorAckInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SNSSAIsAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SNSSAIsAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SNSSAIsAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSORInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SorInfo
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateSORInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSORInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpuAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpuAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpuAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLcsBcaDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.LcsBroadcastAssistanceTypesData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetLcsBcaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLcsBcaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLcsMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.LcsMoData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetLcsMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLcsMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSSAIResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.Nssai
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetNSSAIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSSAIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]externalRef0.SessionManagementSubscriptionData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmfSelDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SmfSelectionSubscriptionData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmfSelDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmfSelDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmsDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SmsSubscriptionData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmsMngtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.SmsManagementSubscriptionData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmsMngtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmsMngtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceConfigDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.TraceDataResponse
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetTraceConfigDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceConfigDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUeCtxInAmfDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.UeContextInAmfData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetUeCtxInAmfDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUeCtxInAmfDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUeCtxInSmfDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.UeContextInSmfData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetUeCtxInSmfDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUeCtxInSmfDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUeCtxInSmsfDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.UeContextInSmsfData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetUeCtxInSmsfDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUeCtxInSmsfDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2xDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.V2xSubscriptionData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetV2xDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2xDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupiOrGpsiResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.IdTranslationResult
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSupiOrGpsiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupiOrGpsiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLcsPrivacyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.LcsPrivacyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetLcsPrivacyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLcsPrivacyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.SdmSubscription
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON501     *externalRef0.N501
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ModifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGroupIdentifiersWithResponse request returning *GetGroupIdentifiersResponse
func (c *ClientWithResponses) GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error) {
	rsp, err := c.GetGroupIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupIdentifiersResponse(rsp)
}

// GetSharedDataWithResponse request returning *GetSharedDataResponse
func (c *ClientWithResponses) GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error) {
	rsp, err := c.GetSharedData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedDataResponse(rsp)
}

// SubscribeToSharedDataWithBodyWithResponse request with arbitrary body returning *SubscribeToSharedDataResponse
func (c *ClientWithResponses) SubscribeToSharedDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error) {
	rsp, err := c.SubscribeToSharedDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeToSharedDataResponse(rsp)
}

func (c *ClientWithResponses) SubscribeToSharedDataWithResponse(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error) {
	rsp, err := c.SubscribeToSharedData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeToSharedDataResponse(rsp)
}

// UnsubscribeForSharedDataWithResponse request returning *UnsubscribeForSharedDataResponse
func (c *ClientWithResponses) UnsubscribeForSharedDataWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeForSharedDataResponse, error) {
	rsp, err := c.UnsubscribeForSharedData(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeForSharedDataResponse(rsp)
}

// ModifySharedDataSubsWithBodyWithResponse request with arbitrary body returning *ModifySharedDataSubsResponse
func (c *ClientWithResponses) ModifySharedDataSubsWithBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error) {
	rsp, err := c.ModifySharedDataSubsWithBody(ctx, subscriptionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySharedDataSubsResponse(rsp)
}

func (c *ClientWithResponses) ModifySharedDataSubsWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error) {
	rsp, err := c.ModifySharedDataSubsWithApplicationMergePatchPlusJSONBody(ctx, subscriptionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySharedDataSubsResponse(rsp)
}

// GetIndividualSharedDataWithResponse request returning *GetIndividualSharedDataResponse
func (c *ClientWithResponses) GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId externalRef0.SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error) {
	rsp, err := c.GetIndividualSharedData(ctx, sharedDataId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualSharedDataResponse(rsp)
}

// GetDataSetsWithResponse request returning *GetDataSetsResponse
func (c *ClientWithResponses) GetDataSetsWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*GetDataSetsResponse, error) {
	rsp, err := c.GetDataSets(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataSetsResponse(rsp)
}

// GetAmDataWithResponse request returning *GetAmDataResponse
func (c *ClientWithResponses) GetAmDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*GetAmDataResponse, error) {
	rsp, err := c.GetAmData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAmDataResponse(rsp)
}

// CAGAckWithBodyWithResponse request with arbitrary body returning *CAGAckResponse
func (c *ClientWithResponses) CAGAckWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CAGAckResponse, error) {
	rsp, err := c.CAGAckWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCAGAckResponse(rsp)
}

func (c *ClientWithResponses) CAGAckWithResponse(ctx context.Context, supi externalRef0.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CAGAckResponse, error) {
	rsp, err := c.CAGAck(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCAGAckResponse(rsp)
}

// GetEcrDataWithResponse request returning *GetEcrDataResponse
func (c *ClientWithResponses) GetEcrDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*GetEcrDataResponse, error) {
	rsp, err := c.GetEcrData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEcrDataResponse(rsp)
}

// SorAckInfoWithBodyWithResponse request with arbitrary body returning *SorAckInfoResponse
func (c *ClientWithResponses) SorAckInfoWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error) {
	rsp, err := c.SorAckInfoWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSorAckInfoResponse(rsp)
}

func (c *ClientWithResponses) SorAckInfoWithResponse(ctx context.Context, supi externalRef0.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error) {
	rsp, err := c.SorAckInfo(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSorAckInfoResponse(rsp)
}

// SNSSAIsAckWithBodyWithResponse request with arbitrary body returning *SNSSAIsAckResponse
func (c *ClientWithResponses) SNSSAIsAckWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error) {
	rsp, err := c.SNSSAIsAckWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSNSSAIsAckResponse(rsp)
}

func (c *ClientWithResponses) SNSSAIsAckWithResponse(ctx context.Context, supi externalRef0.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error) {
	rsp, err := c.SNSSAIsAck(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSNSSAIsAckResponse(rsp)
}

// UpdateSORInfoWithBodyWithResponse request with arbitrary body returning *UpdateSORInfoResponse
func (c *ClientWithResponses) UpdateSORInfoWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error) {
	rsp, err := c.UpdateSORInfoWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSORInfoResponse(rsp)
}

func (c *ClientWithResponses) UpdateSORInfoWithResponse(ctx context.Context, supi externalRef0.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error) {
	rsp, err := c.UpdateSORInfo(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSORInfoResponse(rsp)
}

// UpuAckWithBodyWithResponse request with arbitrary body returning *UpuAckResponse
func (c *ClientWithResponses) UpuAckWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpuAckResponse, error) {
	rsp, err := c.UpuAckWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpuAckResponse(rsp)
}

func (c *ClientWithResponses) UpuAckWithResponse(ctx context.Context, supi externalRef0.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*UpuAckResponse, error) {
	rsp, err := c.UpuAck(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpuAckResponse(rsp)
}

// GetLcsBcaDataWithResponse request returning *GetLcsBcaDataResponse
func (c *ClientWithResponses) GetLcsBcaDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*GetLcsBcaDataResponse, error) {
	rsp, err := c.GetLcsBcaData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLcsBcaDataResponse(rsp)
}

// GetLcsMoDataWithResponse request returning *GetLcsMoDataResponse
func (c *ClientWithResponses) GetLcsMoDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*GetLcsMoDataResponse, error) {
	rsp, err := c.GetLcsMoData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLcsMoDataResponse(rsp)
}

// GetNSSAIWithResponse request returning *GetNSSAIResponse
func (c *ClientWithResponses) GetNSSAIWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*GetNSSAIResponse, error) {
	rsp, err := c.GetNSSAI(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSSAIResponse(rsp)
}

// GetSmDataWithResponse request returning *GetSmDataResponse
func (c *ClientWithResponses) GetSmDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*GetSmDataResponse, error) {
	rsp, err := c.GetSmData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmDataResponse(rsp)
}

// GetSmfSelDataWithResponse request returning *GetSmfSelDataResponse
func (c *ClientWithResponses) GetSmfSelDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*GetSmfSelDataResponse, error) {
	rsp, err := c.GetSmfSelData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmfSelDataResponse(rsp)
}

// GetSmsDataWithResponse request returning *GetSmsDataResponse
func (c *ClientWithResponses) GetSmsDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*GetSmsDataResponse, error) {
	rsp, err := c.GetSmsData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmsDataResponse(rsp)
}

// GetSmsMngtDataWithResponse request returning *GetSmsMngtDataResponse
func (c *ClientWithResponses) GetSmsMngtDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*GetSmsMngtDataResponse, error) {
	rsp, err := c.GetSmsMngtData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmsMngtDataResponse(rsp)
}

// GetTraceConfigDataWithResponse request returning *GetTraceConfigDataResponse
func (c *ClientWithResponses) GetTraceConfigDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*GetTraceConfigDataResponse, error) {
	rsp, err := c.GetTraceConfigData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceConfigDataResponse(rsp)
}

// GetUeCtxInAmfDataWithResponse request returning *GetUeCtxInAmfDataResponse
func (c *ClientWithResponses) GetUeCtxInAmfDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInAmfDataResponse, error) {
	rsp, err := c.GetUeCtxInAmfData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUeCtxInAmfDataResponse(rsp)
}

// GetUeCtxInSmfDataWithResponse request returning *GetUeCtxInSmfDataResponse
func (c *ClientWithResponses) GetUeCtxInSmfDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmfDataResponse, error) {
	rsp, err := c.GetUeCtxInSmfData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUeCtxInSmfDataResponse(rsp)
}

// GetUeCtxInSmsfDataWithResponse request returning *GetUeCtxInSmsfDataResponse
func (c *ClientWithResponses) GetUeCtxInSmsfDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmsfDataResponse, error) {
	rsp, err := c.GetUeCtxInSmsfData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUeCtxInSmsfDataResponse(rsp)
}

// GetV2xDataWithResponse request returning *GetV2xDataResponse
func (c *ClientWithResponses) GetV2xDataWithResponse(ctx context.Context, supi externalRef0.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*GetV2xDataResponse, error) {
	rsp, err := c.GetV2xData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2xDataResponse(rsp)
}

// GetSupiOrGpsiWithResponse request returning *GetSupiOrGpsiResponse
func (c *ClientWithResponses) GetSupiOrGpsiWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*GetSupiOrGpsiResponse, error) {
	rsp, err := c.GetSupiOrGpsi(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupiOrGpsiResponse(rsp)
}

// GetLcsPrivacyDataWithResponse request returning *GetLcsPrivacyDataResponse
func (c *ClientWithResponses) GetLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*GetLcsPrivacyDataResponse, error) {
	rsp, err := c.GetLcsPrivacyData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLcsPrivacyDataResponse(rsp)
}

// SubscribeWithBodyWithResponse request with arbitrary body returning *SubscribeResponse
func (c *ClientWithResponses) SubscribeWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeResponse, error) {
	rsp, err := c.SubscribeWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeResponse(rsp)
}

func (c *ClientWithResponses) SubscribeWithResponse(ctx context.Context, ueId externalRef0.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeResponse, error) {
	rsp, err := c.Subscribe(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeResponse(rsp)
}

// UnsubscribeWithResponse request returning *UnsubscribeResponse
func (c *ClientWithResponses) UnsubscribeWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error) {
	rsp, err := c.Unsubscribe(ctx, ueId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeResponse(rsp)
}

// ModifyWithBodyWithResponse request with arbitrary body returning *ModifyResponse
func (c *ClientWithResponses) ModifyWithBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyResponse, error) {
	rsp, err := c.ModifyWithBody(ctx, ueId, subscriptionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyResponse(rsp)
}

func (c *ClientWithResponses) ModifyWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyResponse, error) {
	rsp, err := c.ModifyWithApplicationMergePatchPlusJSONBody(ctx, ueId, subscriptionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyResponse(rsp)
}

// ParseGetGroupIdentifiersResponse parses an HTTP response from a GetGroupIdentifiersWithResponse call
func ParseGetGroupIdentifiersResponse(rsp *http.Response) (*GetGroupIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.GroupIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSharedDataResponse parses an HTTP response from a GetSharedDataWithResponse call
func ParseGetSharedDataResponse(rsp *http.Response) (*GetSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubscribeToSharedDataResponse parses an HTTP response from a SubscribeToSharedDataWithResponse call
func ParseSubscribeToSharedDataResponse(rsp *http.Response) (*SubscribeToSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeToSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUnsubscribeForSharedDataResponse parses an HTTP response from a UnsubscribeForSharedDataWithResponse call
func ParseUnsubscribeForSharedDataResponse(rsp *http.Response) (*UnsubscribeForSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeForSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifySharedDataSubsResponse parses an HTTP response from a ModifySharedDataSubsWithResponse call
func ParseModifySharedDataSubsResponse(rsp *http.Response) (*ModifySharedDataSubsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifySharedDataSubsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetIndividualSharedDataResponse parses an HTTP response from a GetIndividualSharedDataWithResponse call
func ParseGetIndividualSharedDataResponse(rsp *http.Response) (*GetIndividualSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetDataSetsResponse parses an HTTP response from a GetDataSetsWithResponse call
func ParseGetDataSetsResponse(rsp *http.Response) (*GetDataSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SubscriptionDataSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAmDataResponse parses an HTTP response from a GetAmDataWithResponse call
func ParseGetAmDataResponse(rsp *http.Response) (*GetAmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AccessAndMobilitySubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCAGAckResponse parses an HTTP response from a CAGAckWithResponse call
func ParseCAGAckResponse(rsp *http.Response) (*CAGAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CAGAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetEcrDataResponse parses an HTTP response from a GetEcrDataWithResponse call
func ParseGetEcrDataResponse(rsp *http.Response) (*GetEcrDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEcrDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.EnhancedCoverageRestrictionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSorAckInfoResponse parses an HTTP response from a SorAckInfoWithResponse call
func ParseSorAckInfoResponse(rsp *http.Response) (*SorAckInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SorAckInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSNSSAIsAckResponse parses an HTTP response from a SNSSAIsAckWithResponse call
func ParseSNSSAIsAckResponse(rsp *http.Response) (*SNSSAIsAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SNSSAIsAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSORInfoResponse parses an HTTP response from a UpdateSORInfoWithResponse call
func ParseUpdateSORInfoResponse(rsp *http.Response) (*UpdateSORInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSORInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpuAckResponse parses an HTTP response from a UpuAckWithResponse call
func ParseUpuAckResponse(rsp *http.Response) (*UpuAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpuAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetLcsBcaDataResponse parses an HTTP response from a GetLcsBcaDataWithResponse call
func ParseGetLcsBcaDataResponse(rsp *http.Response) (*GetLcsBcaDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLcsBcaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.LcsBroadcastAssistanceTypesData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetLcsMoDataResponse parses an HTTP response from a GetLcsMoDataWithResponse call
func ParseGetLcsMoDataResponse(rsp *http.Response) (*GetLcsMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLcsMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.LcsMoData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSSAIResponse parses an HTTP response from a GetNSSAIWithResponse call
func ParseGetNSSAIResponse(rsp *http.Response) (*GetNSSAIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSSAIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Nssai
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmDataResponse parses an HTTP response from a GetSmDataWithResponse call
func ParseGetSmDataResponse(rsp *http.Response) (*GetSmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.SessionManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmfSelDataResponse parses an HTTP response from a GetSmfSelDataWithResponse call
func ParseGetSmfSelDataResponse(rsp *http.Response) (*GetSmfSelDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmfSelDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SmfSelectionSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmsDataResponse parses an HTTP response from a GetSmsDataWithResponse call
func ParseGetSmsDataResponse(rsp *http.Response) (*GetSmsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SmsSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmsMngtDataResponse parses an HTTP response from a GetSmsMngtDataWithResponse call
func ParseGetSmsMngtDataResponse(rsp *http.Response) (*GetSmsMngtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmsMngtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.SmsManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetTraceConfigDataResponse parses an HTTP response from a GetTraceConfigDataWithResponse call
func ParseGetTraceConfigDataResponse(rsp *http.Response) (*GetTraceConfigDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceConfigDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TraceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUeCtxInAmfDataResponse parses an HTTP response from a GetUeCtxInAmfDataWithResponse call
func ParseGetUeCtxInAmfDataResponse(rsp *http.Response) (*GetUeCtxInAmfDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUeCtxInAmfDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UeContextInAmfData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUeCtxInSmfDataResponse parses an HTTP response from a GetUeCtxInSmfDataWithResponse call
func ParseGetUeCtxInSmfDataResponse(rsp *http.Response) (*GetUeCtxInSmfDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUeCtxInSmfDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UeContextInSmfData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUeCtxInSmsfDataResponse parses an HTTP response from a GetUeCtxInSmsfDataWithResponse call
func ParseGetUeCtxInSmsfDataResponse(rsp *http.Response) (*GetUeCtxInSmsfDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUeCtxInSmsfDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UeContextInSmsfData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV2xDataResponse parses an HTTP response from a GetV2xDataWithResponse call
func ParseGetV2xDataResponse(rsp *http.Response) (*GetV2xDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2xDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.V2xSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSupiOrGpsiResponse parses an HTTP response from a GetSupiOrGpsiWithResponse call
func ParseGetSupiOrGpsiResponse(rsp *http.Response) (*GetSupiOrGpsiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupiOrGpsiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.IdTranslationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetLcsPrivacyDataResponse parses an HTTP response from a GetLcsPrivacyDataWithResponse call
func ParseGetLcsPrivacyDataResponse(rsp *http.Response) (*GetLcsPrivacyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLcsPrivacyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.LcsPrivacyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubscribeResponse parses an HTTP response from a SubscribeWithResponse call
func ParseSubscribeResponse(rsp *http.Response) (*SubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUnsubscribeResponse parses an HTTP response from a UnsubscribeWithResponse call
func ParseUnsubscribeResponse(rsp *http.Response) (*UnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyResponse parses an HTTP response from a ModifyWithResponse call
func ParseModifyResponse(rsp *http.Response) (*ModifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Mapping of Group Identifiers
	// (GET /group-data/group-identifiers)
	GetGroupIdentifiers(c *gin.Context, params GetGroupIdentifiersParams)
	// retrieve shared data
	// (GET /shared-data)
	GetSharedData(c *gin.Context, params GetSharedDataParams)
	// subscribe to notifications for shared data
	// (POST /shared-data-subscriptions)
	SubscribeToSharedData(c *gin.Context)
	// unsubscribe from notifications for shared data
	// (DELETE /shared-data-subscriptions/{subscriptionId})
	UnsubscribeForSharedData(c *gin.Context, subscriptionId string)
	// modify the subscription
	// (PATCH /shared-data-subscriptions/{subscriptionId})
	ModifySharedDataSubs(c *gin.Context, subscriptionId string, params ModifySharedDataSubsParams)
	// retrieve the individual shared data
	// (GET /shared-data/{sharedDataId})
	GetIndividualSharedData(c *gin.Context, sharedDataId externalRef0.SharedDataIds, params GetIndividualSharedDataParams)
	// retrieve multiple data sets
	// (GET /{supi})
	GetDataSets(c *gin.Context, supi externalRef0.Supi, params GetDataSetsParams)
	// retrieve a UE's Access and Mobility Subscription Data
	// (GET /{supi}/am-data)
	GetAmData(c *gin.Context, supi externalRef0.Supi, params GetAmDataParams)
	// Nudm_Sdm Info operation for CAG acknowledgement
	// (PUT /{supi}/am-data/cag-ack)
	CAGAck(c *gin.Context, supi externalRef0.Supi)
	// retrieve a UE's subscribed Enhanced Coverage Restriction Data
	// (GET /{supi}/am-data/ecr-data)
	GetEcrData(c *gin.Context, supi externalRef0.Supi, params GetEcrDataParams)
	// Nudm_Sdm Info service operation
	// (PUT /{supi}/am-data/sor-ack)
	SorAckInfo(c *gin.Context, supi externalRef0.Supi)
	// Nudm_Sdm Info operation for S-NSSAIs acknowledgement
	// (PUT /{supi}/am-data/subscribed-snssais-ack)
	SNSSAIsAck(c *gin.Context, supi externalRef0.Supi)
	// Nudm_Sdm custom operation to trigger SOR info update
	// (POST /{supi}/am-data/update-sor)
	UpdateSORInfo(c *gin.Context, supi externalRef0.Supi)
	// Nudm_Sdm Info for UPU service operation
	// (PUT /{supi}/am-data/upu-ack)
	UpuAck(c *gin.Context, supi externalRef0.Supi)
	// retrieve a UE's LCS Broadcast Assistance Data Types Subscription Data
	// (GET /{supi}/lcs-bca-data)
	GetLcsBcaData(c *gin.Context, supi externalRef0.Supi, params GetLcsBcaDataParams)
	// retrieve a UE's LCS Mobile Originated Subscription Data
	// (GET /{supi}/lcs-mo-data)
	GetLcsMoData(c *gin.Context, supi externalRef0.Supi, params GetLcsMoDataParams)
	// retrieve a UE's subscribed NSSAI
	// (GET /{supi}/nssai)
	GetNSSAI(c *gin.Context, supi externalRef0.Supi, params GetNSSAIParams)
	// retrieve a UE's Session Management Subscription Data
	// (GET /{supi}/sm-data)
	GetSmData(c *gin.Context, supi externalRef0.Supi, params GetSmDataParams)
	// retrieve a UE's SMF Selection Subscription Data
	// (GET /{supi}/smf-select-data)
	GetSmfSelData(c *gin.Context, supi externalRef0.Supi, params GetSmfSelDataParams)
	// retrieve a UE's SMS Subscription Data
	// (GET /{supi}/sms-data)
	GetSmsData(c *gin.Context, supi externalRef0.Supi, params GetSmsDataParams)
	// retrieve a UE's SMS Management Subscription Data
	// (GET /{supi}/sms-mng-data)
	GetSmsMngtData(c *gin.Context, supi externalRef0.Supi, params GetSmsMngtDataParams)
	// retrieve a UE's Trace Configuration Data
	// (GET /{supi}/trace-data)
	GetTraceConfigData(c *gin.Context, supi externalRef0.Supi, params GetTraceConfigDataParams)
	// retrieve a UE's UE Context In AMF Data
	// (GET /{supi}/ue-context-in-amf-data)
	GetUeCtxInAmfData(c *gin.Context, supi externalRef0.Supi, params GetUeCtxInAmfDataParams)
	// retrieve a UE's UE Context In SMF Data
	// (GET /{supi}/ue-context-in-smf-data)
	GetUeCtxInSmfData(c *gin.Context, supi externalRef0.Supi, params GetUeCtxInSmfDataParams)
	// retrieve a UE's UE Context In SMSF Data
	// (GET /{supi}/ue-context-in-smsf-data)
	GetUeCtxInSmsfData(c *gin.Context, supi externalRef0.Supi, params GetUeCtxInSmsfDataParams)
	// retrieve a UE's V2X Subscription Data
	// (GET /{supi}/v2x-data)
	GetV2xData(c *gin.Context, supi externalRef0.Supi, params GetV2xDataParams)
	// retrieve a UE's SUPI or GPSI
	// (GET /{ueId}/id-translation-result)
	GetSupiOrGpsi(c *gin.Context, ueId externalRef0.VarUeId, params GetSupiOrGpsiParams)
	// retrieve a UE's LCS Privacy Subscription Data
	// (GET /{ueId}/lcs-privacy-data)
	GetLcsPrivacyData(c *gin.Context, ueId externalRef0.VarUeId, params GetLcsPrivacyDataParams)
	// subscribe to notifications
	// (POST /{ueId}/sdm-subscriptions)
	Subscribe(c *gin.Context, ueId externalRef0.VarUeId)
	// unsubscribe from notifications
	// (DELETE /{ueId}/sdm-subscriptions/{subscriptionId})
	Unsubscribe(c *gin.Context, ueId externalRef0.VarUeId, subscriptionId string)
	// modify the subscription
	// (PATCH /{ueId}/sdm-subscriptions/{subscriptionId})
	Modify(c *gin.Context, ueId externalRef0.VarUeId, subscriptionId string, params ModifyParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetGroupIdentifiers operation middleware
func (siw *ServerInterfaceWrapper) GetGroupIdentifiers(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupIdentifiersParams

	// ------------- Optional query parameter "ext-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ext-group-id", c.Request.URL.Query(), &params.ExtGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "int-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "int-group-id", c.Request.URL.Query(), &params.IntGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter int-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-id-ind" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-id-ind", c.Request.URL.Query(), &params.UeIdInd)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id-ind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupIdentifiers(c, params)
}

// GetSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetSharedData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharedDataParams

	// ------------- Required query parameter "shared-data-ids" -------------

	if paramValue := c.Query("shared-data-ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument shared-data-ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "shared-data-ids", c.Request.URL.Query(), &params.SharedDataIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter shared-data-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportedFeatures" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportedFeatures", c.Request.URL.Query(), &params.SupportedFeaturesShouldNotBeUsed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportedFeatures: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSharedData(c, params)
}

// SubscribeToSharedData operation middleware
func (siw *ServerInterfaceWrapper) SubscribeToSharedData(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeToSharedData(c)
}

// UnsubscribeForSharedData operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeForSharedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnsubscribeForSharedData(c, subscriptionId)
}

// ModifySharedDataSubs operation middleware
func (siw *ServerInterfaceWrapper) ModifySharedDataSubs(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifySharedDataSubsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifySharedDataSubs(c, subscriptionId, params)
}

// GetIndividualSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetIndividualSharedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "sharedDataId" -------------
	var sharedDataId externalRef0.SharedDataIds

	err = runtime.BindStyledParameterWithOptions("simple", "sharedDataId", c.Param("sharedDataId"), &sharedDataId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sharedDataId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndividualSharedDataParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIndividualSharedData(c, sharedDataId, params)
}

// GetDataSets operation middleware
func (siw *ServerInterfaceWrapper) GetDataSets(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataSetsParams

	// ------------- Required query parameter "dataset-names" -------------

	if paramValue := c.Query("dataset-names"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument dataset-names is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "dataset-names", c.Request.URL.Query(), &params.DatasetNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dataset-names: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDataSets(c, supi, params)
}

// GetAmData operation middleware
func (siw *ServerInterfaceWrapper) GetAmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAmDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAmData(c, supi, params)
}

// CAGAck operation middleware
func (siw *ServerInterfaceWrapper) CAGAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CAGAck(c, supi)
}

// GetEcrData operation middleware
func (siw *ServerInterfaceWrapper) GetEcrData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEcrDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEcrData(c, supi, params)
}

// SorAckInfo operation middleware
func (siw *ServerInterfaceWrapper) SorAckInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SorAckInfo(c, supi)
}

// SNSSAIsAck operation middleware
func (siw *ServerInterfaceWrapper) SNSSAIsAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SNSSAIsAck(c, supi)
}

// UpdateSORInfo operation middleware
func (siw *ServerInterfaceWrapper) UpdateSORInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSORInfo(c, supi)
}

// UpuAck operation middleware
func (siw *ServerInterfaceWrapper) UpuAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpuAck(c, supi)
}

// GetLcsBcaData operation middleware
func (siw *ServerInterfaceWrapper) GetLcsBcaData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLcsBcaDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLcsBcaData(c, supi, params)
}

// GetLcsMoData operation middleware
func (siw *ServerInterfaceWrapper) GetLcsMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLcsMoDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLcsMoData(c, supi, params)
}

// GetNSSAI operation middleware
func (siw *ServerInterfaceWrapper) GetNSSAI(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNSSAIParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNSSAI(c, supi, params)
}

// GetSmData operation middleware
func (siw *ServerInterfaceWrapper) GetSmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmData(c, supi, params)
}

// GetSmfSelData operation middleware
func (siw *ServerInterfaceWrapper) GetSmfSelData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmfSelDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmfSelData(c, supi, params)
}

// GetSmsData operation middleware
func (siw *ServerInterfaceWrapper) GetSmsData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmsDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmsData(c, supi, params)
}

// GetSmsMngtData operation middleware
func (siw *ServerInterfaceWrapper) GetSmsMngtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmsMngtDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmsMngtData(c, supi, params)
}

// GetTraceConfigData operation middleware
func (siw *ServerInterfaceWrapper) GetTraceConfigData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTraceConfigDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTraceConfigData(c, supi, params)
}

// GetUeCtxInAmfData operation middleware
func (siw *ServerInterfaceWrapper) GetUeCtxInAmfData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUeCtxInAmfDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUeCtxInAmfData(c, supi, params)
}

// GetUeCtxInSmfData operation middleware
func (siw *ServerInterfaceWrapper) GetUeCtxInSmfData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUeCtxInSmfDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUeCtxInSmfData(c, supi, params)
}

// GetUeCtxInSmsfData operation middleware
func (siw *ServerInterfaceWrapper) GetUeCtxInSmsfData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUeCtxInSmsfDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUeCtxInSmsfData(c, supi, params)
}

// GetV2xData operation middleware
func (siw *ServerInterfaceWrapper) GetV2xData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2xDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV2xData(c, supi, params)
}

// GetSupiOrGpsi operation middleware
func (siw *ServerInterfaceWrapper) GetSupiOrGpsi(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSupiOrGpsiParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "app-port-id" -------------

	if paramValue := c.Query("app-port-id"); paramValue != "" {

		var value externalRef0.AppPortId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'app-port-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.AppPortId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSupiOrGpsi(c, ueId, params)
}

// GetLcsPrivacyData operation middleware
func (siw *ServerInterfaceWrapper) GetLcsPrivacyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLcsPrivacyDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLcsPrivacyData(c, ueId, params)
}

// Subscribe operation middleware
func (siw *ServerInterfaceWrapper) Subscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Subscribe(c, ueId)
}

// Unsubscribe operation middleware
func (siw *ServerInterfaceWrapper) Unsubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Unsubscribe(c, ueId, subscriptionId)
}

// Modify operation middleware
func (siw *ServerInterfaceWrapper) Modify(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameterWithOptions("simple", "ueId", c.Param("ueId"), &ueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", c.Param("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Modify(c, ueId, subscriptionId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/group-data/group-identifiers", wrapper.GetGroupIdentifiers)
	router.GET(options.BaseURL+"/shared-data", wrapper.GetSharedData)
	router.POST(options.BaseURL+"/shared-data-subscriptions", wrapper.SubscribeToSharedData)
	router.DELETE(options.BaseURL+"/shared-data-subscriptions/:subscriptionId", wrapper.UnsubscribeForSharedData)
	router.PATCH(options.BaseURL+"/shared-data-subscriptions/:subscriptionId", wrapper.ModifySharedDataSubs)
	router.GET(options.BaseURL+"/shared-data/:sharedDataId", wrapper.GetIndividualSharedData)
	router.GET(options.BaseURL+"/:supi", wrapper.GetDataSets)
	router.GET(options.BaseURL+"/:supi/am-data", wrapper.GetAmData)
	router.PUT(options.BaseURL+"/:supi/am-data/cag-ack", wrapper.CAGAck)
	router.GET(options.BaseURL+"/:supi/am-data/ecr-data", wrapper.GetEcrData)
	router.PUT(options.BaseURL+"/:supi/am-data/sor-ack", wrapper.SorAckInfo)
	router.PUT(options.BaseURL+"/:supi/am-data/subscribed-snssais-ack", wrapper.SNSSAIsAck)
	router.POST(options.BaseURL+"/:supi/am-data/update-sor", wrapper.UpdateSORInfo)
	router.PUT(options.BaseURL+"/:supi/am-data/upu-ack", wrapper.UpuAck)
	router.GET(options.BaseURL+"/:supi/lcs-bca-data", wrapper.GetLcsBcaData)
	router.GET(options.BaseURL+"/:supi/lcs-mo-data", wrapper.GetLcsMoData)
	router.GET(options.BaseURL+"/:supi/nssai", wrapper.GetNSSAI)
	router.GET(options.BaseURL+"/:supi/sm-data", wrapper.GetSmData)
	router.GET(options.BaseURL+"/:supi/smf-select-data", wrapper.GetSmfSelData)
	router.GET(options.BaseURL+"/:supi/sms-data", wrapper.GetSmsData)
	router.GET(options.BaseURL+"/:supi/sms-mng-data", wrapper.GetSmsMngtData)
	router.GET(options.BaseURL+"/:supi/trace-data", wrapper.GetTraceConfigData)
	router.GET(options.BaseURL+"/:supi/ue-context-in-amf-data", wrapper.GetUeCtxInAmfData)
	router.GET(options.BaseURL+"/:supi/ue-context-in-smf-data", wrapper.GetUeCtxInSmfData)
	router.GET(options.BaseURL+"/:supi/ue-context-in-smsf-data", wrapper.GetUeCtxInSmsfData)
	router.GET(options.BaseURL+"/:supi/v2x-data", wrapper.GetV2xData)
	router.GET(options.BaseURL+"/:ueId/id-translation-result", wrapper.GetSupiOrGpsi)
	router.GET(options.BaseURL+"/:ueId/lcs-privacy-data", wrapper.GetLcsPrivacyData)
	router.POST(options.BaseURL+"/:ueId/sdm-subscriptions", wrapper.Subscribe)
	router.DELETE(options.BaseURL+"/:ueId/sdm-subscriptions/:subscriptionId", wrapper.Unsubscribe)
	router.PATCH(options.BaseURL+"/:ueId/sdm-subscriptions/:subscriptionId", wrapper.Modify)
}

type GetGroupIdentifiersRequestObject struct {
	Params GetGroupIdentifiersParams
}

type GetGroupIdentifiersResponseObject interface {
	VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error
}

type GetGroupIdentifiers200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetGroupIdentifiers200JSONResponse struct {
	Body    externalRef0.GroupIdentifiers
	Headers GetGroupIdentifiers200ResponseHeaders
}

func (response GetGroupIdentifiers200JSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetGroupIdentifiers400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers400ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiers404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers404ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiers500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers500ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiers503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers503ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSharedDataRequestObject struct {
	Params GetSharedDataParams
}

type GetSharedDataResponseObject interface {
	VisitGetSharedDataResponse(w http.ResponseWriter) error
}

type GetSharedData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSharedData200JSONResponse struct {
	Body    []externalRef0.SharedData
	Headers GetSharedData200ResponseHeaders
}

func (response GetSharedData200JSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSharedData400ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSharedData404ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSharedData500ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSharedData503ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscribeToSharedDataRequestObject struct {
	Body *SubscribeToSharedDataJSONRequestBody
}

type SubscribeToSharedDataResponseObject interface {
	VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error
}

type SubscribeToSharedData201ResponseHeaders struct {
	Location string
}

type SubscribeToSharedData201JSONResponse struct {
	Body    externalRef0.SdmSubscription
	Headers SubscribeToSharedData201ResponseHeaders
}

func (response SubscribeToSharedData201JSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscribeToSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response SubscribeToSharedData400ApplicationProblemPlusJSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SubscribeToSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response SubscribeToSharedData404ApplicationProblemPlusJSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type SubscribeToSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response SubscribeToSharedDatadefaultApplicationProblemPlusJSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UnsubscribeForSharedDataRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type UnsubscribeForSharedDataResponseObject interface {
	VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error
}

type UnsubscribeForSharedData204Response struct {
}

func (response UnsubscribeForSharedData204Response) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnsubscribeForSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData400ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData404ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData500ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData503ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UnsubscribeForSharedDatadefaultApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifySharedDataSubsRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Params         ModifySharedDataSubsParams
	Body           *ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody
}

type ModifySharedDataSubsResponseObject interface {
	VisitModifySharedDataSubsResponse(w http.ResponseWriter) error
}

type ModifySharedDataSubs200JSONResponse struct {
	union json.RawMessage
}

func (response ModifySharedDataSubs200JSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type ModifySharedDataSubs400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs400ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs403ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs404ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs500ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs503ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifySharedDataSubsdefaultApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedDataRequestObject struct {
	SharedDataId externalRef0.SharedDataIds `json:"sharedDataId"`
	Params       GetIndividualSharedDataParams
}

type GetIndividualSharedDataResponseObject interface {
	VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error
}

type GetIndividualSharedData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetIndividualSharedData200JSONResponse struct {
	Body    externalRef0.SharedData
	Headers GetIndividualSharedData200ResponseHeaders
}

func (response GetIndividualSharedData200JSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData400ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData404ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData500ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData503ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDataSetsRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetDataSetsParams
}

type GetDataSetsResponseObject interface {
	VisitGetDataSetsResponse(w http.ResponseWriter) error
}

type GetDataSets200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetDataSets200JSONResponse struct {
	Body    externalRef0.SubscriptionDataSets
	Headers GetDataSets200ResponseHeaders
}

func (response GetDataSets200JSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDataSets400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetDataSets400ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetDataSets404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetDataSets404ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetDataSets500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetDataSets500ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetDataSets503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetDataSets503ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetDataSetsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetDataSetsdefaultApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAmDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetAmDataParams
}

type GetAmDataResponseObject interface {
	VisitGetAmDataResponse(w http.ResponseWriter) error
}

type GetAmData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetAmData200JSONResponse struct {
	Body    externalRef0.AccessAndMobilitySubscriptionData
	Headers GetAmData200ResponseHeaders
}

func (response GetAmData200JSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAmData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetAmData400ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetAmData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetAmData404ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetAmData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetAmData500ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetAmData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetAmData503ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetAmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetAmDatadefaultApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CAGAckRequestObject struct {
	Supi externalRef0.Supi `json:"supi"`
	Body *CAGAckJSONRequestBody
}

type CAGAckResponseObject interface {
	VisitCAGAckResponse(w http.ResponseWriter) error
}

type CAGAck204Response struct {
}

func (response CAGAck204Response) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CAGAck400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CAGAck400ApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CAGAck500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CAGAck500ApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CAGAck503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CAGAck503ApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CAGAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CAGAckdefaultApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEcrDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetEcrDataParams
}

type GetEcrDataResponseObject interface {
	VisitGetEcrDataResponse(w http.ResponseWriter) error
}

type GetEcrData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetEcrData200JSONResponse struct {
	Body    externalRef0.EnhancedCoverageRestrictionData
	Headers GetEcrData200ResponseHeaders
}

func (response GetEcrData200JSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEcrData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetEcrData400ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetEcrData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetEcrData404ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetEcrData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetEcrData500ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetEcrData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetEcrData503ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetEcrDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetEcrDatadefaultApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SorAckInfoRequestObject struct {
	Supi externalRef0.Supi `json:"supi"`
	Body *SorAckInfoJSONRequestBody
}

type SorAckInfoResponseObject interface {
	VisitSorAckInfoResponse(w http.ResponseWriter) error
}

type SorAckInfo204Response struct {
}

func (response SorAckInfo204Response) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SorAckInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response SorAckInfo400ApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SorAckInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response SorAckInfo500ApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type SorAckInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response SorAckInfo503ApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SorAckInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response SorAckInfodefaultApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SNSSAIsAckRequestObject struct {
	Supi externalRef0.Supi `json:"supi"`
	Body *SNSSAIsAckJSONRequestBody
}

type SNSSAIsAckResponseObject interface {
	VisitSNSSAIsAckResponse(w http.ResponseWriter) error
}

type SNSSAIsAck204Response struct {
}

func (response SNSSAIsAck204Response) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SNSSAIsAck400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response SNSSAIsAck400ApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SNSSAIsAck500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response SNSSAIsAck500ApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type SNSSAIsAck503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response SNSSAIsAck503ApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SNSSAIsAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response SNSSAIsAckdefaultApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSORInfoRequestObject struct {
	Supi externalRef0.Supi `json:"supi"`
	Body *UpdateSORInfoJSONRequestBody
}

type UpdateSORInfoResponseObject interface {
	VisitUpdateSORInfoResponse(w http.ResponseWriter) error
}

type UpdateSORInfo200JSONResponse externalRef0.SorInfo

func (response UpdateSORInfo200JSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.SorInfo(response))
}

type UpdateSORInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo400ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfo404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo404ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo500ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo503ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateSORInfodefaultApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpuAckRequestObject struct {
	Supi externalRef0.Supi `json:"supi"`
	Body *UpuAckJSONRequestBody
}

type UpuAckResponseObject interface {
	VisitUpuAckResponse(w http.ResponseWriter) error
}

type UpuAck204Response struct {
}

func (response UpuAck204Response) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpuAck400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpuAck400ApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpuAck500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpuAck500ApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpuAck503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpuAck503ApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpuAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpuAckdefaultApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsBcaDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetLcsBcaDataParams
}

type GetLcsBcaDataResponseObject interface {
	VisitGetLcsBcaDataResponse(w http.ResponseWriter) error
}

type GetLcsBcaData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetLcsBcaData200JSONResponse struct {
	Body    externalRef0.LcsBroadcastAssistanceTypesData
	Headers GetLcsBcaData200ResponseHeaders
}

func (response GetLcsBcaData200JSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsBcaData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData400ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData404ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData500ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData503ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetLcsBcaDatadefaultApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsMoDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetLcsMoDataParams
}

type GetLcsMoDataResponseObject interface {
	VisitGetLcsMoDataResponse(w http.ResponseWriter) error
}

type GetLcsMoData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetLcsMoData200JSONResponse struct {
	Body    externalRef0.LcsMoData
	Headers GetLcsMoData200ResponseHeaders
}

func (response GetLcsMoData200JSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsMoData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData400ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetLcsMoData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData404ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetLcsMoData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData500ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetLcsMoData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData503ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetLcsMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetLcsMoDatadefaultApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNSSAIRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetNSSAIParams
}

type GetNSSAIResponseObject interface {
	VisitGetNSSAIResponse(w http.ResponseWriter) error
}

type GetNSSAI200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetNSSAI200JSONResponse struct {
	Body    externalRef0.Nssai
	Headers GetNSSAI200ResponseHeaders
}

func (response GetNSSAI200JSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNSSAI400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI400ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetNSSAI404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI404ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetNSSAI500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI500ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetNSSAI503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI503ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetNSSAIdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetNSSAIdefaultApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetSmDataParams
}

type GetSmDataResponseObject interface {
	VisitGetSmDataResponse(w http.ResponseWriter) error
}

type GetSmData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmData200JSONResponse struct {
	Body    []externalRef0.SessionManagementSubscriptionData
	Headers GetSmData200ResponseHeaders
}

func (response GetSmData200JSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmData400ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmData404ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmData500ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmData503ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSmDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmfSelDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetSmfSelDataParams
}

type GetSmfSelDataResponseObject interface {
	VisitGetSmfSelDataResponse(w http.ResponseWriter) error
}

type GetSmfSelData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmfSelData200JSONResponse struct {
	Body    externalRef0.SmfSelectionSubscriptionData
	Headers GetSmfSelData200ResponseHeaders
}

func (response GetSmfSelData200JSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmfSelData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData400ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmfSelData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData404ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmfSelData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData500ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmfSelData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData503ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmfSelDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSmfSelDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetSmsDataParams
}

type GetSmsDataResponseObject interface {
	VisitGetSmsDataResponse(w http.ResponseWriter) error
}

type GetSmsData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmsData200JSONResponse struct {
	Body    externalRef0.SmsSubscriptionData
	Headers GetSmsData200ResponseHeaders
}

func (response GetSmsData200JSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmsData400ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmsData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmsData404ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmsData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmsData500ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmsData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmsData503ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmsDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSmsDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsMngtDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetSmsMngtDataParams
}

type GetSmsMngtDataResponseObject interface {
	VisitGetSmsMngtDataResponse(w http.ResponseWriter) error
}

type GetSmsMngtData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmsMngtData200JSONResponse struct {
	Body    externalRef0.SmsManagementSubscriptionData
	Headers GetSmsMngtData200ResponseHeaders
}

func (response GetSmsMngtData200JSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsMngtData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData400ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData404ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData500ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData503ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSmsMngtDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTraceConfigDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetTraceConfigDataParams
}

type GetTraceConfigDataResponseObject interface {
	VisitGetTraceConfigDataResponse(w http.ResponseWriter) error
}

type GetTraceConfigData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetTraceConfigData200JSONResponse struct {
	Body    externalRef0.TraceDataResponse
	Headers GetTraceConfigData200ResponseHeaders
}

func (response GetTraceConfigData200JSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTraceConfigData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData400ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData404ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData500ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData503ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetTraceConfigDatadefaultApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUeCtxInAmfDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetUeCtxInAmfDataParams
}

type GetUeCtxInAmfDataResponseObject interface {
	VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error
}

type GetUeCtxInAmfData200JSONResponse externalRef0.UeContextInAmfData

func (response GetUeCtxInAmfData200JSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.UeContextInAmfData(response))
}

type GetUeCtxInAmfData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData400ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData404ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData500ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData503ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetUeCtxInAmfDatadefaultApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUeCtxInSmfDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetUeCtxInSmfDataParams
}

type GetUeCtxInSmfDataResponseObject interface {
	VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error
}

type GetUeCtxInSmfData200JSONResponse externalRef0.UeContextInSmfData

func (response GetUeCtxInSmfData200JSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.UeContextInSmfData(response))
}

type GetUeCtxInSmfData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData400ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData404ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData500ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData503ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetUeCtxInSmfDatadefaultApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUeCtxInSmsfDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetUeCtxInSmsfDataParams
}

type GetUeCtxInSmsfDataResponseObject interface {
	VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error
}

type GetUeCtxInSmsfData200JSONResponse externalRef0.UeContextInSmsfData

func (response GetUeCtxInSmsfData200JSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.UeContextInSmsfData(response))
}

type GetUeCtxInSmsfData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData400ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData404ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData500ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData503ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetUeCtxInSmsfDatadefaultApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetV2xDataRequestObject struct {
	Supi   externalRef0.Supi `json:"supi"`
	Params GetV2xDataParams
}

type GetV2xDataResponseObject interface {
	VisitGetV2xDataResponse(w http.ResponseWriter) error
}

type GetV2xData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetV2xData200JSONResponse struct {
	Body    externalRef0.V2xSubscriptionData
	Headers GetV2xData200ResponseHeaders
}

func (response GetV2xData200JSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetV2xData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetV2xData400ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetV2xData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetV2xData404ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetV2xData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetV2xData500ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetV2xData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetV2xData503ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetV2xDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetV2xDatadefaultApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSupiOrGpsiRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetSupiOrGpsiParams
}

type GetSupiOrGpsiResponseObject interface {
	VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error
}

type GetSupiOrGpsi200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSupiOrGpsi200JSONResponse struct {
	Body    externalRef0.IdTranslationResult
	Headers GetSupiOrGpsi200ResponseHeaders
}

func (response GetSupiOrGpsi200JSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSupiOrGpsi400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi400ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsi404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi404ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsi500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi500ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsi503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi503ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsidefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetSupiOrGpsidefaultApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsPrivacyDataRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetLcsPrivacyDataParams
}

type GetLcsPrivacyDataResponseObject interface {
	VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error
}

type GetLcsPrivacyData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetLcsPrivacyData200JSONResponse struct {
	Body    externalRef0.LcsPrivacyData
	Headers GetLcsPrivacyData200ResponseHeaders
}

func (response GetLcsPrivacyData200JSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsPrivacyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData400ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData404ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData500ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData503ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscribeRequestObject struct {
	UeId externalRef0.VarUeId `json:"ueId"`
	Body *SubscribeJSONRequestBody
}

type SubscribeResponseObject interface {
	VisitSubscribeResponse(w http.ResponseWriter) error
}

type Subscribe201ResponseHeaders struct {
	Location string
}

type Subscribe201JSONResponse struct {
	Body    externalRef0.SdmSubscription
	Headers Subscribe201ResponseHeaders
}

func (response Subscribe201JSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type Subscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Subscribe400ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type Subscribe404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Subscribe404ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type Subscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Subscribe500ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type Subscribe501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response Subscribe501ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N501ApplicationProblemPlusJSONResponse))
}

type Subscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Subscribe503ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response SubscribedefaultApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UnsubscribeRequestObject struct {
	UeId           externalRef0.VarUeId `json:"ueId"`
	SubscriptionId string               `json:"subscriptionId"`
}

type UnsubscribeResponseObject interface {
	VisitUnsubscribeResponse(w http.ResponseWriter) error
}

type Unsubscribe204Response struct {
}

func (response Unsubscribe204Response) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Unsubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe400ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type Unsubscribe404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe404ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type Unsubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe500ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type Unsubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe503ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UnsubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UnsubscribedefaultApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyRequestObject struct {
	UeId           externalRef0.VarUeId `json:"ueId"`
	SubscriptionId string               `json:"subscriptionId"`
	Params         ModifyParams
	Body           *ModifyApplicationMergePatchPlusJSONRequestBody
}

type ModifyResponseObject interface {
	VisitModifyResponse(w http.ResponseWriter) error
}

type Modify200JSONResponse struct {
	union json.RawMessage
}

func (response Modify200JSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type Modify400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Modify400ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type Modify403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Modify403ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type Modify404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Modify404ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type Modify500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Modify500ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type Modify503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Modify503ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ModifydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ModifydefaultApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Mapping of Group Identifiers
	// (GET /group-data/group-identifiers)
	GetGroupIdentifiers(ctx context.Context, request GetGroupIdentifiersRequestObject) (GetGroupIdentifiersResponseObject, error)
	// retrieve shared data
	// (GET /shared-data)
	GetSharedData(ctx context.Context, request GetSharedDataRequestObject) (GetSharedDataResponseObject, error)
	// subscribe to notifications for shared data
	// (POST /shared-data-subscriptions)
	SubscribeToSharedData(ctx context.Context, request SubscribeToSharedDataRequestObject) (SubscribeToSharedDataResponseObject, error)
	// unsubscribe from notifications for shared data
	// (DELETE /shared-data-subscriptions/{subscriptionId})
	UnsubscribeForSharedData(ctx context.Context, request UnsubscribeForSharedDataRequestObject) (UnsubscribeForSharedDataResponseObject, error)
	// modify the subscription
	// (PATCH /shared-data-subscriptions/{subscriptionId})
	ModifySharedDataSubs(ctx context.Context, request ModifySharedDataSubsRequestObject) (ModifySharedDataSubsResponseObject, error)
	// retrieve the individual shared data
	// (GET /shared-data/{sharedDataId})
	GetIndividualSharedData(ctx context.Context, request GetIndividualSharedDataRequestObject) (GetIndividualSharedDataResponseObject, error)
	// retrieve multiple data sets
	// (GET /{supi})
	GetDataSets(ctx context.Context, request GetDataSetsRequestObject) (GetDataSetsResponseObject, error)
	// retrieve a UE's Access and Mobility Subscription Data
	// (GET /{supi}/am-data)
	GetAmData(ctx context.Context, request GetAmDataRequestObject) (GetAmDataResponseObject, error)
	// Nudm_Sdm Info operation for CAG acknowledgement
	// (PUT /{supi}/am-data/cag-ack)
	CAGAck(ctx context.Context, request CAGAckRequestObject) (CAGAckResponseObject, error)
	// retrieve a UE's subscribed Enhanced Coverage Restriction Data
	// (GET /{supi}/am-data/ecr-data)
	GetEcrData(ctx context.Context, request GetEcrDataRequestObject) (GetEcrDataResponseObject, error)
	// Nudm_Sdm Info service operation
	// (PUT /{supi}/am-data/sor-ack)
	SorAckInfo(ctx context.Context, request SorAckInfoRequestObject) (SorAckInfoResponseObject, error)
	// Nudm_Sdm Info operation for S-NSSAIs acknowledgement
	// (PUT /{supi}/am-data/subscribed-snssais-ack)
	SNSSAIsAck(ctx context.Context, request SNSSAIsAckRequestObject) (SNSSAIsAckResponseObject, error)
	// Nudm_Sdm custom operation to trigger SOR info update
	// (POST /{supi}/am-data/update-sor)
	UpdateSORInfo(ctx context.Context, request UpdateSORInfoRequestObject) (UpdateSORInfoResponseObject, error)
	// Nudm_Sdm Info for UPU service operation
	// (PUT /{supi}/am-data/upu-ack)
	UpuAck(ctx context.Context, request UpuAckRequestObject) (UpuAckResponseObject, error)
	// retrieve a UE's LCS Broadcast Assistance Data Types Subscription Data
	// (GET /{supi}/lcs-bca-data)
	GetLcsBcaData(ctx context.Context, request GetLcsBcaDataRequestObject) (GetLcsBcaDataResponseObject, error)
	// retrieve a UE's LCS Mobile Originated Subscription Data
	// (GET /{supi}/lcs-mo-data)
	GetLcsMoData(ctx context.Context, request GetLcsMoDataRequestObject) (GetLcsMoDataResponseObject, error)
	// retrieve a UE's subscribed NSSAI
	// (GET /{supi}/nssai)
	GetNSSAI(ctx context.Context, request GetNSSAIRequestObject) (GetNSSAIResponseObject, error)
	// retrieve a UE's Session Management Subscription Data
	// (GET /{supi}/sm-data)
	GetSmData(ctx context.Context, request GetSmDataRequestObject) (GetSmDataResponseObject, error)
	// retrieve a UE's SMF Selection Subscription Data
	// (GET /{supi}/smf-select-data)
	GetSmfSelData(ctx context.Context, request GetSmfSelDataRequestObject) (GetSmfSelDataResponseObject, error)
	// retrieve a UE's SMS Subscription Data
	// (GET /{supi}/sms-data)
	GetSmsData(ctx context.Context, request GetSmsDataRequestObject) (GetSmsDataResponseObject, error)
	// retrieve a UE's SMS Management Subscription Data
	// (GET /{supi}/sms-mng-data)
	GetSmsMngtData(ctx context.Context, request GetSmsMngtDataRequestObject) (GetSmsMngtDataResponseObject, error)
	// retrieve a UE's Trace Configuration Data
	// (GET /{supi}/trace-data)
	GetTraceConfigData(ctx context.Context, request GetTraceConfigDataRequestObject) (GetTraceConfigDataResponseObject, error)
	// retrieve a UE's UE Context In AMF Data
	// (GET /{supi}/ue-context-in-amf-data)
	GetUeCtxInAmfData(ctx context.Context, request GetUeCtxInAmfDataRequestObject) (GetUeCtxInAmfDataResponseObject, error)
	// retrieve a UE's UE Context In SMF Data
	// (GET /{supi}/ue-context-in-smf-data)
	GetUeCtxInSmfData(ctx context.Context, request GetUeCtxInSmfDataRequestObject) (GetUeCtxInSmfDataResponseObject, error)
	// retrieve a UE's UE Context In SMSF Data
	// (GET /{supi}/ue-context-in-smsf-data)
	GetUeCtxInSmsfData(ctx context.Context, request GetUeCtxInSmsfDataRequestObject) (GetUeCtxInSmsfDataResponseObject, error)
	// retrieve a UE's V2X Subscription Data
	// (GET /{supi}/v2x-data)
	GetV2xData(ctx context.Context, request GetV2xDataRequestObject) (GetV2xDataResponseObject, error)
	// retrieve a UE's SUPI or GPSI
	// (GET /{ueId}/id-translation-result)
	GetSupiOrGpsi(ctx context.Context, request GetSupiOrGpsiRequestObject) (GetSupiOrGpsiResponseObject, error)
	// retrieve a UE's LCS Privacy Subscription Data
	// (GET /{ueId}/lcs-privacy-data)
	GetLcsPrivacyData(ctx context.Context, request GetLcsPrivacyDataRequestObject) (GetLcsPrivacyDataResponseObject, error)
	// subscribe to notifications
	// (POST /{ueId}/sdm-subscriptions)
	Subscribe(ctx context.Context, request SubscribeRequestObject) (SubscribeResponseObject, error)
	// unsubscribe from notifications
	// (DELETE /{ueId}/sdm-subscriptions/{subscriptionId})
	Unsubscribe(ctx context.Context, request UnsubscribeRequestObject) (UnsubscribeResponseObject, error)
	// modify the subscription
	// (PATCH /{ueId}/sdm-subscriptions/{subscriptionId})
	Modify(ctx context.Context, request ModifyRequestObject) (ModifyResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetGroupIdentifiers operation middleware
func (sh *strictHandler) GetGroupIdentifiers(ctx *gin.Context, params GetGroupIdentifiersParams) {
	var request GetGroupIdentifiersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupIdentifiers(ctx, request.(GetGroupIdentifiersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupIdentifiers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupIdentifiersResponseObject); ok {
		if err := validResponse.VisitGetGroupIdentifiersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSharedData operation middleware
func (sh *strictHandler) GetSharedData(ctx *gin.Context, params GetSharedDataParams) {
	var request GetSharedDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSharedData(ctx, request.(GetSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSharedDataResponseObject); ok {
		if err := validResponse.VisitGetSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeToSharedData operation middleware
func (sh *strictHandler) SubscribeToSharedData(ctx *gin.Context) {
	var request SubscribeToSharedDataRequestObject

	var body SubscribeToSharedDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeToSharedData(ctx, request.(SubscribeToSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeToSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeToSharedDataResponseObject); ok {
		if err := validResponse.VisitSubscribeToSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnsubscribeForSharedData operation middleware
func (sh *strictHandler) UnsubscribeForSharedData(ctx *gin.Context, subscriptionId string) {
	var request UnsubscribeForSharedDataRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UnsubscribeForSharedData(ctx, request.(UnsubscribeForSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnsubscribeForSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeForSharedDataResponseObject); ok {
		if err := validResponse.VisitUnsubscribeForSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifySharedDataSubs operation middleware
func (sh *strictHandler) ModifySharedDataSubs(ctx *gin.Context, subscriptionId string, params ModifySharedDataSubsParams) {
	var request ModifySharedDataSubsRequestObject

	request.SubscriptionId = subscriptionId
	request.Params = params

	var body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifySharedDataSubs(ctx, request.(ModifySharedDataSubsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifySharedDataSubs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifySharedDataSubsResponseObject); ok {
		if err := validResponse.VisitModifySharedDataSubsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIndividualSharedData operation middleware
func (sh *strictHandler) GetIndividualSharedData(ctx *gin.Context, sharedDataId externalRef0.SharedDataIds, params GetIndividualSharedDataParams) {
	var request GetIndividualSharedDataRequestObject

	request.SharedDataId = sharedDataId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIndividualSharedData(ctx, request.(GetIndividualSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIndividualSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetIndividualSharedDataResponseObject); ok {
		if err := validResponse.VisitGetIndividualSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDataSets operation middleware
func (sh *strictHandler) GetDataSets(ctx *gin.Context, supi externalRef0.Supi, params GetDataSetsParams) {
	var request GetDataSetsRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDataSets(ctx, request.(GetDataSetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDataSets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetDataSetsResponseObject); ok {
		if err := validResponse.VisitGetDataSetsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAmData operation middleware
func (sh *strictHandler) GetAmData(ctx *gin.Context, supi externalRef0.Supi, params GetAmDataParams) {
	var request GetAmDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAmData(ctx, request.(GetAmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAmDataResponseObject); ok {
		if err := validResponse.VisitGetAmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CAGAck operation middleware
func (sh *strictHandler) CAGAck(ctx *gin.Context, supi externalRef0.Supi) {
	var request CAGAckRequestObject

	request.Supi = supi

	var body CAGAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CAGAck(ctx, request.(CAGAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CAGAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CAGAckResponseObject); ok {
		if err := validResponse.VisitCAGAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEcrData operation middleware
func (sh *strictHandler) GetEcrData(ctx *gin.Context, supi externalRef0.Supi, params GetEcrDataParams) {
	var request GetEcrDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEcrData(ctx, request.(GetEcrDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEcrData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEcrDataResponseObject); ok {
		if err := validResponse.VisitGetEcrDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SorAckInfo operation middleware
func (sh *strictHandler) SorAckInfo(ctx *gin.Context, supi externalRef0.Supi) {
	var request SorAckInfoRequestObject

	request.Supi = supi

	var body SorAckInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SorAckInfo(ctx, request.(SorAckInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SorAckInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SorAckInfoResponseObject); ok {
		if err := validResponse.VisitSorAckInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SNSSAIsAck operation middleware
func (sh *strictHandler) SNSSAIsAck(ctx *gin.Context, supi externalRef0.Supi) {
	var request SNSSAIsAckRequestObject

	request.Supi = supi

	var body SNSSAIsAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SNSSAIsAck(ctx, request.(SNSSAIsAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SNSSAIsAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SNSSAIsAckResponseObject); ok {
		if err := validResponse.VisitSNSSAIsAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSORInfo operation middleware
func (sh *strictHandler) UpdateSORInfo(ctx *gin.Context, supi externalRef0.Supi) {
	var request UpdateSORInfoRequestObject

	request.Supi = supi

	var body UpdateSORInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSORInfo(ctx, request.(UpdateSORInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSORInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSORInfoResponseObject); ok {
		if err := validResponse.VisitUpdateSORInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpuAck operation middleware
func (sh *strictHandler) UpuAck(ctx *gin.Context, supi externalRef0.Supi) {
	var request UpuAckRequestObject

	request.Supi = supi

	var body UpuAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpuAck(ctx, request.(UpuAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpuAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpuAckResponseObject); ok {
		if err := validResponse.VisitUpuAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLcsBcaData operation middleware
func (sh *strictHandler) GetLcsBcaData(ctx *gin.Context, supi externalRef0.Supi, params GetLcsBcaDataParams) {
	var request GetLcsBcaDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLcsBcaData(ctx, request.(GetLcsBcaDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLcsBcaData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLcsBcaDataResponseObject); ok {
		if err := validResponse.VisitGetLcsBcaDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLcsMoData operation middleware
func (sh *strictHandler) GetLcsMoData(ctx *gin.Context, supi externalRef0.Supi, params GetLcsMoDataParams) {
	var request GetLcsMoDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLcsMoData(ctx, request.(GetLcsMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLcsMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLcsMoDataResponseObject); ok {
		if err := validResponse.VisitGetLcsMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNSSAI operation middleware
func (sh *strictHandler) GetNSSAI(ctx *gin.Context, supi externalRef0.Supi, params GetNSSAIParams) {
	var request GetNSSAIRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNSSAI(ctx, request.(GetNSSAIRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNSSAI")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNSSAIResponseObject); ok {
		if err := validResponse.VisitGetNSSAIResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmData operation middleware
func (sh *strictHandler) GetSmData(ctx *gin.Context, supi externalRef0.Supi, params GetSmDataParams) {
	var request GetSmDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmData(ctx, request.(GetSmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmDataResponseObject); ok {
		if err := validResponse.VisitGetSmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmfSelData operation middleware
func (sh *strictHandler) GetSmfSelData(ctx *gin.Context, supi externalRef0.Supi, params GetSmfSelDataParams) {
	var request GetSmfSelDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmfSelData(ctx, request.(GetSmfSelDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmfSelData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmfSelDataResponseObject); ok {
		if err := validResponse.VisitGetSmfSelDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmsData operation middleware
func (sh *strictHandler) GetSmsData(ctx *gin.Context, supi externalRef0.Supi, params GetSmsDataParams) {
	var request GetSmsDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmsData(ctx, request.(GetSmsDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmsData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmsDataResponseObject); ok {
		if err := validResponse.VisitGetSmsDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmsMngtData operation middleware
func (sh *strictHandler) GetSmsMngtData(ctx *gin.Context, supi externalRef0.Supi, params GetSmsMngtDataParams) {
	var request GetSmsMngtDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmsMngtData(ctx, request.(GetSmsMngtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmsMngtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmsMngtDataResponseObject); ok {
		if err := validResponse.VisitGetSmsMngtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTraceConfigData operation middleware
func (sh *strictHandler) GetTraceConfigData(ctx *gin.Context, supi externalRef0.Supi, params GetTraceConfigDataParams) {
	var request GetTraceConfigDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTraceConfigData(ctx, request.(GetTraceConfigDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTraceConfigData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTraceConfigDataResponseObject); ok {
		if err := validResponse.VisitGetTraceConfigDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUeCtxInAmfData operation middleware
func (sh *strictHandler) GetUeCtxInAmfData(ctx *gin.Context, supi externalRef0.Supi, params GetUeCtxInAmfDataParams) {
	var request GetUeCtxInAmfDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUeCtxInAmfData(ctx, request.(GetUeCtxInAmfDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUeCtxInAmfData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUeCtxInAmfDataResponseObject); ok {
		if err := validResponse.VisitGetUeCtxInAmfDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUeCtxInSmfData operation middleware
func (sh *strictHandler) GetUeCtxInSmfData(ctx *gin.Context, supi externalRef0.Supi, params GetUeCtxInSmfDataParams) {
	var request GetUeCtxInSmfDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUeCtxInSmfData(ctx, request.(GetUeCtxInSmfDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUeCtxInSmfData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUeCtxInSmfDataResponseObject); ok {
		if err := validResponse.VisitGetUeCtxInSmfDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUeCtxInSmsfData operation middleware
func (sh *strictHandler) GetUeCtxInSmsfData(ctx *gin.Context, supi externalRef0.Supi, params GetUeCtxInSmsfDataParams) {
	var request GetUeCtxInSmsfDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUeCtxInSmsfData(ctx, request.(GetUeCtxInSmsfDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUeCtxInSmsfData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUeCtxInSmsfDataResponseObject); ok {
		if err := validResponse.VisitGetUeCtxInSmsfDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2xData operation middleware
func (sh *strictHandler) GetV2xData(ctx *gin.Context, supi externalRef0.Supi, params GetV2xDataParams) {
	var request GetV2xDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2xData(ctx, request.(GetV2xDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2xData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetV2xDataResponseObject); ok {
		if err := validResponse.VisitGetV2xDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSupiOrGpsi operation middleware
func (sh *strictHandler) GetSupiOrGpsi(ctx *gin.Context, ueId externalRef0.VarUeId, params GetSupiOrGpsiParams) {
	var request GetSupiOrGpsiRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSupiOrGpsi(ctx, request.(GetSupiOrGpsiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSupiOrGpsi")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSupiOrGpsiResponseObject); ok {
		if err := validResponse.VisitGetSupiOrGpsiResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLcsPrivacyData operation middleware
func (sh *strictHandler) GetLcsPrivacyData(ctx *gin.Context, ueId externalRef0.VarUeId, params GetLcsPrivacyDataParams) {
	var request GetLcsPrivacyDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLcsPrivacyData(ctx, request.(GetLcsPrivacyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLcsPrivacyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLcsPrivacyDataResponseObject); ok {
		if err := validResponse.VisitGetLcsPrivacyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Subscribe operation middleware
func (sh *strictHandler) Subscribe(ctx *gin.Context, ueId externalRef0.VarUeId) {
	var request SubscribeRequestObject

	request.UeId = ueId

	var body SubscribeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Subscribe(ctx, request.(SubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Subscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeResponseObject); ok {
		if err := validResponse.VisitSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Unsubscribe operation middleware
func (sh *strictHandler) Unsubscribe(ctx *gin.Context, ueId externalRef0.VarUeId, subscriptionId string) {
	var request UnsubscribeRequestObject

	request.UeId = ueId
	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Unsubscribe(ctx, request.(UnsubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Unsubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeResponseObject); ok {
		if err := validResponse.VisitUnsubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Modify operation middleware
func (sh *strictHandler) Modify(ctx *gin.Context, ueId externalRef0.VarUeId, subscriptionId string, params ModifyParams) {
	var request ModifyRequestObject

	request.UeId = ueId
	request.SubscriptionId = subscriptionId
	request.Params = params

	var body ModifyApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Modify(ctx, request.(ModifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Modify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyResponseObject); ok {
		if err := validResponse.VisitModifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
