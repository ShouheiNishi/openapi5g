// Package sdm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package sdm

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/ausf/sor"
	externalRef1 "github.com/ShouheiNishi/openapi5g/ausf/upu"
	externalRef2 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef3 "github.com/ShouheiNishi/openapi5g/nrf/management"
	externalRef4 "github.com/ShouheiNishi/openapi5g/udm/pp"
	externalRef5 "github.com/ShouheiNishi/openapi5g/udr/policy"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for CodeWordInd.
const (
	CODEWORDCHECKINGMLC CodeWordInd = "CODEWORD_CHECK_IN_GMLC"
	CODEWORDCHECKINUE   CodeWordInd = "CODEWORD_CHECK_IN_UE"
)

// Defines values for DataSetName.
const (
	AM         DataSetName = "AM"
	LCSMO      DataSetName = "LCS_MO"
	LCSPRIVACY DataSetName = "LCS_PRIVACY"
	SM         DataSetName = "SM"
	SMFSEL     DataSetName = "SMF_SEL"
	SMSMNG     DataSetName = "SMS_MNG"
	SMSSUB     DataSetName = "SMS_SUB"
	TRACE      DataSetName = "TRACE"
	UECAMF     DataSetName = "UEC_AMF"
	UECSMF     DataSetName = "UEC_SMF"
	UECSMSF    DataSetName = "UEC_SMSF"
	V2X        DataSetName = "V2X"
)

// Defines values for LcsClientClass.
const (
	ANONYMOUSLOCATIONSERVICE LcsClientClass = "ANONYMOUS_LOCATION_SERVICE"
	BROADCASTSERVICE         LcsClientClass = "BROADCAST_SERVICE"
	OMINHPLMN                LcsClientClass = "OM_IN_HPLMN"
	OMINVPLMN                LcsClientClass = "OM_IN_VPLMN"
	SPECIFICSERVICE          LcsClientClass = "SPECIFIC_SERVICE"
)

// Defines values for LcsMoServiceClass.
const (
	AUTONOMOUSSELFLOCATION LcsMoServiceClass = "AUTONOMOUS_SELF_LOCATION"
	BASICSELFLOCATION      LcsMoServiceClass = "BASIC_SELF_LOCATION"
	TRANSFERTOTHIRDPARTY   LcsMoServiceClass = "TRANSFER_TO_THIRD_PARTY"
)

// Defines values for LocationPrivacyInd.
const (
	LOCATIONALLOWED    LocationPrivacyInd = "LOCATION_ALLOWED"
	LOCATIONDISALLOWED LocationPrivacyInd = "LOCATION_DISALLOWED"
)

// Defines values for MdtUserConsent.
const (
	CONSENTGIVEN    MdtUserConsent = "CONSENT_GIVEN"
	CONSENTNOTGIVEN MdtUserConsent = "CONSENT_NOT_GIVEN"
)

// Defines values for OperationMode.
const (
	NBN1 OperationMode = "NB_N1"
	NBS1 OperationMode = "NB_S1"
	WBN1 OperationMode = "WB_N1"
	WBS1 OperationMode = "WB_S1"
)

// Defines values for PduSessionContinuityInd.
const (
	MAINTAINPDUSESSION  PduSessionContinuityInd = "MAINTAIN_PDUSESSION"
	RECONNECTPDUSESSION PduSessionContinuityInd = "RECONNECT_PDUSESSION"
	RELEASEPDUSESSION   PduSessionContinuityInd = "RELEASE_PDUSESSION"
)

// Defines values for PrivacyCheckRelatedAction.
const (
	LOCATIONALLOWEDWITHNOTIFICATION    PrivacyCheckRelatedAction = "LOCATION_ALLOWED_WITH_NOTIFICATION"
	LOCATIONALLOWEDWITHOUTNOTIFICATION PrivacyCheckRelatedAction = "LOCATION_ALLOWED_WITHOUT_NOTIFICATION"
	LOCATIONALLOWEDWITHOUTRESPONSE     PrivacyCheckRelatedAction = "LOCATION_ALLOWED_WITHOUT_RESPONSE"
	LOCATIONNOTALLOWED                 PrivacyCheckRelatedAction = "LOCATION_NOT_ALLOWED"
	LOCATIONRESTRICTEDWITHOUTRESPONSE  PrivacyCheckRelatedAction = "LOCATION_RESTRICTED_WITHOUT_RESPONSE"
)

// Defines values for SorUpdateIndicator.
const (
	EMERGENCYREGISTRATION SorUpdateIndicator = "EMERGENCY_REGISTRATION"
	INITIALREGISTRATION   SorUpdateIndicator = "INITIAL_REGISTRATION"
)

// N3GppChargingCharacteristics defines model for 3GppChargingCharacteristics.
type N3GppChargingCharacteristics = string

// AccessAndMobilitySubscriptionData defines model for AccessAndMobilitySubscriptionData.
type AccessAndMobilitySubscriptionData struct {
	ActiveTime                     *externalRef2.DurationSecRm                  `json:"activeTime"`
	CMsisdn                        externalRef2.CMsisdn                         `json:"cMsisdn,omitempty"`
	CagData                        *CagData                                     `json:"cagData,omitempty"`
	CoreNetworkTypeRestrictions    *[]externalRef2.CoreNetworkType              `json:"coreNetworkTypeRestrictions,omitempty"`
	EcRestrictionDataNb            *bool                                        `json:"ecRestrictionDataNb,omitempty"`
	EcRestrictionDataWb            *EcRestrictionDataWb                         `json:"ecRestrictionDataWb,omitempty"`
	EdrxParametersList             []EdrxParameters                             `json:"edrxParametersList,omitempty"`
	ExpectedUeBehaviourList        *ExpectedUeBehaviourData                     `json:"expectedUeBehaviourList,omitempty"`
	ForbiddenAreas                 *[]externalRef2.Area                         `json:"forbiddenAreas,omitempty"`
	Gpsis                          *[]externalRef2.Gpsi                         `json:"gpsis,omitempty"`
	IabOperationAllowed            *bool                                        `json:"iabOperationAllowed,omitempty"`
	InternalGroupIds               []externalRef2.GroupId                       `json:"internalGroupIds,omitempty"`
	McsPriority                    *McsPriorityIndicator                        `json:"mcsPriority,omitempty"`
	MdtConfiguration               *externalRef2.MdtConfiguration               `json:"mdtConfiguration,omitempty"`
	MdtUserConsent                 *MdtUserConsent                              `json:"mdtUserConsent,omitempty"`
	MicoAllowed                    *MicoAllowed                                 `json:"micoAllowed,omitempty"`
	MpsPriority                    *MpsPriorityIndicator                        `json:"mpsPriority,omitempty"`
	NbIoTUePriority                *NbIoTUePriority                             `json:"nbIoTUePriority,omitempty"`
	Nssai                          *Nssai                                       `json:"nssai"`
	NssaiInclusionAllowed          *bool                                        `json:"nssaiInclusionAllowed,omitempty"`
	OdbPacketServices              *externalRef2.OdbPacketServices              `json:"odbPacketServices,omitempty"`
	PrimaryRatRestrictions         *[]externalRef2.RatType                      `json:"primaryRatRestrictions,omitempty"`
	PtwParametersList              []PtwParameters                              `json:"ptwParametersList,omitempty"`
	RatRestrictions                *[]externalRef2.RatType                      `json:"ratRestrictions,omitempty"`
	RfspIndex                      *externalRef2.RfspIndexRm                    `json:"rfspIndex"`
	RgWirelineCharacteristics      *externalRef2.RgWirelineCharacteristics      `json:"rgWirelineCharacteristics,omitempty"`
	SecondaryRatRestrictions       *[]externalRef2.RatType                      `json:"secondaryRatRestrictions,omitempty"`
	ServiceAreaRestriction         *externalRef2.ServiceAreaRestriction         `json:"serviceAreaRestriction,omitempty"`
	ServiceGapTime                 *externalRef2.DurationSec                    `json:"serviceGapTime,omitempty"`
	SharedAmDataIds                []SharedDataId                               `json:"sharedAmDataIds,omitempty"`
	SharedVnGroupDataIds           *map[string]SharedDataId                     `json:"sharedVnGroupDataIds,omitempty"`
	SorInfo                        *SorInfo                                     `json:"sorInfo,omitempty"`
	SorInfoExpectInd               *bool                                        `json:"sorInfoExpectInd,omitempty"`
	SorUpdateIndicatorList         []SorUpdateIndicator                         `json:"sorUpdateIndicatorList,omitempty"`
	SorafRetrieval                 *bool                                        `json:"sorafRetrieval,omitempty"`
	StnSr                          *externalRef2.StnSr                          `json:"stnSr,omitempty"`
	SubsRegTimer                   *externalRef2.DurationSecRm                  `json:"subsRegTimer"`
	SubscribedDnnList              *[]string                                    `json:"subscribedDnnList,omitempty"`
	SubscribedUeAmbr               *externalRef2.AmbrRm                         `json:"subscribedUeAmbr,omitempty"`
	SupportedFeatures              *externalRef2.SupportedFeatures              `json:"supportedFeatures,omitempty"`
	TraceData                      *externalRef2.TraceData                      `json:"traceData"`
	UeUsageType                    *UeUsageType                                 `json:"ueUsageType,omitempty"`
	UpuInfo                        *UpuInfo                                     `json:"upuInfo,omitempty"`
	WirelineForbiddenAreas         *[]externalRef2.WirelineArea                 `json:"wirelineForbiddenAreas,omitempty"`
	WirelineServiceAreaRestriction *externalRef2.WirelineServiceAreaRestriction `json:"wirelineServiceAreaRestriction,omitempty"`
	AdditionalProperties           map[string]interface{}                       `json:"-"`
}

// AcknowledgeInfo defines model for AcknowledgeInfo.
type AcknowledgeInfo struct {
	ProvisioningTime     externalRef2.DateTime  `json:"provisioningTime"`
	SecuredPacket        *SecuredPacket         `json:"securedPacket,omitempty"`
	SorMacIue            externalRef0.SorMac    `json:"sorMacIue,omitempty"`
	UeNotReachable       *bool                  `json:"ueNotReachable,omitempty"`
	UpuMacIue            externalRef1.UpuMac    `json:"upuMacIue,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AdditionalSnssaiData defines model for AdditionalSnssaiData.
type AdditionalSnssaiData struct {
	RequiredAuthnAuthz   *bool                  `json:"requiredAuthnAuthz,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AfExternal defines model for AfExternal.
type AfExternal struct {
	AfId                      *AfId                      `json:"afId,omitempty"`
	AllowedGeographicArea     []interface{}              `json:"allowedGeographicArea,omitempty"`
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`
	ValidTimePeriod           *ValidTimePeriod           `json:"validTimePeriod,omitempty"`
	AdditionalProperties      map[string]interface{}     `json:"-"`
}

// AfId defines model for AfId.
type AfId = string

// AppDescriptor defines model for AppDescriptor.
type AppDescriptor struct {
	AppId                *string                `json:"appId,omitempty"`
	OsId                 *externalRef5.OsId     `json:"osId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AppPortId defines model for AppPortId.
type AppPortId struct {
	DestinationPort      *externalRef2.Uint16   `json:"destinationPort,omitempty"`
	OriginatorPort       *externalRef2.Uint16   `json:"originatorPort,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CagData defines model for CagData.
type CagData struct {
	// CagInfos A map (list of key-value pairs where PlmnId serves as key) of CagInfo
	CagInfos             map[string]CagInfo     `json:"cagInfos"`
	ProvisioningTime     *externalRef2.DateTime `json:"provisioningTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CagInfo defines model for CagInfo.
type CagInfo struct {
	AllowedCagList       []externalRef2.CagId   `json:"allowedCagList"`
	CagOnlyIndicator     *bool                  `json:"cagOnlyIndicator,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CodeWord defines model for CodeWord.
type CodeWord = string

// CodeWordInd defines model for CodeWordInd.
type CodeWordInd string

// ContextInfo defines model for ContextInfo.
type ContextInfo struct {
	OrigHeaders          []string               `json:"origHeaders,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DataSetName defines model for DataSetName.
type DataSetName string

// DatasetNames defines model for DatasetNames.
type DatasetNames = []DataSetName

// DefaultUnrelatedClass defines model for DefaultUnrelatedClass.
type DefaultUnrelatedClass struct {
	AllowedGeographicArea     []interface{}              `json:"allowedGeographicArea,omitempty"`
	CodeWordInd               *CodeWordInd               `json:"codeWordInd,omitempty"`
	CodeWordList              []CodeWord                 `json:"codeWordList,omitempty"`
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`
	ValidTimePeriod           *ValidTimePeriod           `json:"validTimePeriod,omitempty"`
	AdditionalProperties      map[string]interface{}     `json:"-"`
}

// DnnConfiguration defines model for DnnConfiguration.
type DnnConfiguration struct {
	N3gppChargingCharacteristics *N3GppChargingCharacteristics      `json:"3gppChargingCharacteristics,omitempty"`
	N5gQosProfile                *externalRef2.SubscribedDefaultQos `json:"5gQosProfile,omitempty"`
	AcsInfo                      *externalRef2.AcsInfo              `json:"acsInfo,omitempty"`
	AtsssAllowed                 *bool                              `json:"atsssAllowed,omitempty"`
	DnAaaAddress                 *IpAddress                         `json:"dnAaaAddress,omitempty"`
	DnAaaIpAddressAllocation     *bool                              `json:"dnAaaIpAddressAllocation,omitempty"`
	IptvAccCtrlInfo              *string                            `json:"iptvAccCtrlInfo,omitempty"`
	Ipv4FrameRouteList           []FrameRouteInfo                   `json:"ipv4FrameRouteList,omitempty"`
	Ipv6FrameRouteList           []FrameRouteInfo                   `json:"ipv6FrameRouteList,omitempty"`
	IwkEpsInd                    *IwkEpsInd                         `json:"iwkEpsInd,omitempty"`
	NiddInfo                     *NiddInformation                   `json:"niddInfo,omitempty"`

	// NiddNefId Identity of the NEF
	NiddNefId               *externalRef3.NefId      `json:"niddNefId,omitempty"`
	PduSessionContinuityInd *PduSessionContinuityInd `json:"pduSessionContinuityInd,omitempty"`
	PduSessionTypes         PduSessionTypes          `json:"pduSessionTypes"`
	RedundantSessionAllowed *bool                    `json:"redundantSessionAllowed,omitempty"`
	SecondaryAuth           *bool                    `json:"secondaryAuth,omitempty"`
	SessionAmbr             *externalRef2.Ambr       `json:"sessionAmbr,omitempty"`
	SscModes                SscModes                 `json:"sscModes"`
	StaticIpAddress         []IpAddress              `json:"staticIpAddress,omitempty"`
	UpSecurity              *externalRef2.UpSecurity `json:"upSecurity,omitempty"`
	AdditionalProperties    map[string]interface{}   `json:"-"`
}

// DnnIndicator defines model for DnnIndicator.
type DnnIndicator = bool

// DnnInfo defines model for DnnInfo.
type DnnInfo struct {
	DefaultDnnIndicator *DnnIndicator `json:"defaultDnnIndicator,omitempty"`

	// Dnn Merged type of
	//   string in TS29571_CommonData.yaml#/components/schemas/Dnn
	//   string in TS29571_CommonData.yaml#/components/schemas/WildcardDnn
	Dnn                  string                      `json:"dnn"`
	DnnBarred            *bool                       `json:"dnnBarred,omitempty"`
	InvokeNefInd         *bool                       `json:"invokeNefInd,omitempty"`
	IwkEpsInd            *IwkEpsInd                  `json:"iwkEpsInd,omitempty"`
	LboRoamingAllowed    *LboRoamingAllowed          `json:"lboRoamingAllowed,omitempty"`
	SameSmfInd           *bool                       `json:"sameSmfInd,omitempty"`
	SmfList              []externalRef2.NfInstanceId `json:"smfList,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// EcRestrictionDataWb defines model for EcRestrictionDataWb.
type EcRestrictionDataWb struct {
	EcModeARestricted    *bool                  `json:"ecModeARestricted,omitempty"`
	EcModeBRestricted    *bool                  `json:"ecModeBRestricted,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdrxParameters defines model for EdrxParameters.
type EdrxParameters struct {
	EdrxValue            string                 `json:"edrxValue"`
	RatType              externalRef2.RatType   `json:"ratType"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EmergencyInfo defines model for EmergencyInfo.
type EmergencyInfo struct {
	EpdgInd              *bool                      `json:"epdgInd,omitempty"`
	PgwFqdn              *string                    `json:"pgwFqdn,omitempty"`
	PgwIpAddress         *IpAddress                 `json:"pgwIpAddress,omitempty"`
	SmfInstanceId        *externalRef2.NfInstanceId `json:"smfInstanceId,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// EnhancedCoverageRestrictionData defines model for EnhancedCoverageRestrictionData.
type EnhancedCoverageRestrictionData struct {
	PlmnEcInfoList       []externalRef4.PlmnEcInfo `json:"plmnEcInfoList,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// ExpectedUeBehaviourData defines model for ExpectedUeBehaviourData.
type ExpectedUeBehaviourData struct {
	BatteryIndication         *externalRef2.BatteryIndication `json:"batteryIndication,omitempty"`
	CommunicationDurationTime *externalRef2.DurationSec       `json:"communicationDurationTime,omitempty"`

	// ExpectedUmts Identifies the UE's expected geographical movement. The attribute is only applicable in 5G.
	ExpectedUmts               []externalRef4.LocationArea              `json:"expectedUmts,omitempty"`
	PeriodicTime               *externalRef2.DurationSec                `json:"periodicTime,omitempty"`
	ScheduledCommunicationTime *externalRef2.ScheduledCommunicationTime `json:"scheduledCommunicationTime,omitempty"`
	ScheduledCommunicationType *externalRef2.ScheduledCommunicationType `json:"scheduledCommunicationType,omitempty"`

	// StationaryIndication Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile
	StationaryIndication *externalRef2.StationaryIndication `json:"stationaryIndication,omitempty"`

	// TrafficProfile Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.
	TrafficProfile       *externalRef2.TrafficProfile `json:"trafficProfile,omitempty"`
	ValidityTime         *externalRef2.DateTime       `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// ExtGroupId defines model for ExtGroupId.
type ExtGroupId = string

// ExternalUnrelatedClass defines model for ExternalUnrelatedClass.
type ExternalUnrelatedClass struct {
	AfExternals             []AfExternal             `json:"afExternals,omitempty"`
	LcsClientExternals      []LcsClientExternal      `json:"lcsClientExternals,omitempty"`
	LcsClientGroupExternals []LcsClientGroupExternal `json:"lcsClientGroupExternals,omitempty"`
	AdditionalProperties    map[string]interface{}   `json:"-"`
}

// FrameRouteInfo defines model for FrameRouteInfo.
type FrameRouteInfo struct {
	Ipv4Mask             externalRef2.Ipv4AddrMask `json:"ipv4Mask,omitempty"`
	Ipv6Prefix           *externalRef2.Ipv6Prefix  `json:"ipv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// GroupIdentifiers defines model for GroupIdentifiers.
type GroupIdentifiers struct {
	ExtGroupId           ExtGroupId             `json:"extGroupId,omitempty"`
	IntGroupId           externalRef2.GroupId   `json:"intGroupId,omitempty"`
	UeIdList             []UeId                 `json:"ueIdList,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IdTranslationResult defines model for IdTranslationResult.
type IdTranslationResult struct {
	Gpsi                 externalRef2.Gpsi               `json:"gpsi,omitempty"`
	Supi                 externalRef2.Supi               `json:"supi"`
	SupportedFeatures    *externalRef2.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// IpAddress defines model for IpAddress.
type IpAddress struct {
	Ipv4Addr             externalRef2.Ipv4Addr    `json:"ipv4Addr,omitempty"`
	Ipv6Addr             *externalRef2.Ipv6Addr   `json:"ipv6Addr,omitempty"`
	Ipv6Prefix           *externalRef2.Ipv6Prefix `json:"ipv6Prefix,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// IwkEpsInd defines model for IwkEpsInd.
type IwkEpsInd = bool

// LboRoamingAllowed defines model for LboRoamingAllowed.
type LboRoamingAllowed = bool

// LcsBroadcastAssistanceTypesData defines model for LcsBroadcastAssistanceTypesData.
type LcsBroadcastAssistanceTypesData struct {
	LocationAssistanceType externalRef2.Bytes     `json:"locationAssistanceType"`
	AdditionalProperties   map[string]interface{} `json:"-"`
}

// LcsClientClass defines model for LcsClientClass.
type LcsClientClass string

// LcsClientExternal defines model for LcsClientExternal.
type LcsClientExternal struct {
	AllowedGeographicArea     []interface{}              `json:"allowedGeographicArea,omitempty"`
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`
	ValidTimePeriod           *ValidTimePeriod           `json:"validTimePeriod,omitempty"`
	AdditionalProperties      map[string]interface{}     `json:"-"`
}

// LcsClientGroupExternal defines model for LcsClientGroupExternal.
type LcsClientGroupExternal struct {
	AllowedGeographicArea     []interface{}              `json:"allowedGeographicArea,omitempty"`
	LcsClientGroupId          ExtGroupId                 `json:"lcsClientGroupId,omitempty"`
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`
	ValidTimePeriod           *ValidTimePeriod           `json:"validTimePeriod,omitempty"`
	AdditionalProperties      map[string]interface{}     `json:"-"`
}

// LcsClientId defines model for LcsClientId.
type LcsClientId = string

// LcsMoData defines model for LcsMoData.
type LcsMoData struct {
	AllowedServiceClasses []LcsMoServiceClass    `json:"allowedServiceClasses"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// LcsMoServiceClass defines model for LcsMoServiceClass.
type LcsMoServiceClass string

// LcsPrivacyData defines model for LcsPrivacyData.
type LcsPrivacyData struct {
	Lpi                  *Lpi                   `json:"lpi,omitempty"`
	PlmnOperatorClasses  []PlmnOperatorClass    `json:"plmnOperatorClasses,omitempty"`
	UnrelatedClass       *UnrelatedClass        `json:"unrelatedClass,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// LocationPrivacyInd defines model for LocationPrivacyInd.
type LocationPrivacyInd string

// Lpi defines model for Lpi.
type Lpi struct {
	LocationPrivacyInd   LocationPrivacyInd     `json:"locationPrivacyInd"`
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// McsPriorityIndicator defines model for McsPriorityIndicator.
type McsPriorityIndicator = bool

// MdtUserConsent defines model for MdtUserConsent.
type MdtUserConsent string

// MicoAllowed defines model for MicoAllowed.
type MicoAllowed = bool

// ModificationNotification defines model for ModificationNotification.
type ModificationNotification struct {
	NotifyItems          []externalRef2.NotifyItem `json:"notifyItems"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// MpsPriorityIndicator defines model for MpsPriorityIndicator.
type MpsPriorityIndicator = bool

// NbIoTUePriority defines model for NbIoTUePriority.
type NbIoTUePriority = int

// NiddInformation defines model for NiddInformation.
type NiddInformation struct {
	AfId                 string                       `json:"afId"`
	ExtGroupId           externalRef2.ExternalGroupId `json:"extGroupId,omitempty"`
	Gpsi                 externalRef2.Gpsi            `json:"gpsi,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"`
}

// Nssai defines model for Nssai.
type Nssai struct {
	AdditionalSnssaiData *map[string]AdditionalSnssaiData `json:"additionalSnssaiData,omitempty"`
	DefaultSingleNssais  []externalRef2.Snssai            `json:"defaultSingleNssais"`
	ProvisioningTime     *externalRef2.DateTime           `json:"provisioningTime,omitempty"`
	SingleNssais         []externalRef2.Snssai            `json:"singleNssais,omitempty"`
	SupportedFeatures    *externalRef2.SupportedFeatures  `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// OperationMode defines model for OperationMode.
type OperationMode string

// PduSession defines model for PduSession.
type PduSession struct {
	Dnn                  externalRef2.Dnn          `json:"dnn"`
	PlmnId               externalRef2.PlmnId       `json:"plmnId"`
	SingleNssai          *externalRef2.Snssai      `json:"singleNssai,omitempty"`
	SmfInstanceId        externalRef2.NfInstanceId `json:"smfInstanceId"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// PduSessionContinuityInd defines model for PduSessionContinuityInd.
type PduSessionContinuityInd string

// PduSessionTypes defines model for PduSessionTypes.
type PduSessionTypes struct {
	AllowedSessionTypes  []externalRef2.PduSessionType `json:"allowedSessionTypes,omitempty"`
	DefaultSessionType   externalRef2.PduSessionType   `json:"defaultSessionType"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// PgwInfo defines model for PgwInfo.
type PgwInfo struct {
	Dnn                  externalRef2.Dnn       `json:"dnn"`
	EpdgInd              *bool                  `json:"epdgInd,omitempty"`
	PgwFqdn              string                 `json:"pgwFqdn"`
	PlmnId               *externalRef2.PlmnId   `json:"plmnId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PlmnOperatorClass defines model for PlmnOperatorClass.
type PlmnOperatorClass struct {
	LcsClientClass       LcsClientClass         `json:"lcsClientClass"`
	LcsClientIds         []LcsClientId          `json:"lcsClientIds"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PrivacyCheckRelatedAction defines model for PrivacyCheckRelatedAction.
type PrivacyCheckRelatedAction string

// PtwParameters defines model for PtwParameters.
type PtwParameters struct {
	OperationMode        OperationMode          `json:"operationMode"`
	PtwValue             string                 `json:"ptwValue"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SdmSubsModification defines model for SdmSubsModification.
type SdmSubsModification struct {
	Expires               *externalRef2.DateTime `json:"expires,omitempty"`
	MonitoredResourceUris []externalRef2.Uri     `json:"monitoredResourceUris,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// SdmSubscription defines model for SdmSubscription.
type SdmSubscription struct {
	// AmfServiceName Service names known to NRF
	AmfServiceName        *externalRef3.ServiceName       `json:"amfServiceName,omitempty"`
	CallbackReference     externalRef2.Uri                `json:"callbackReference"`
	ContextInfo           *ContextInfo                    `json:"contextInfo,omitempty"`
	Dnn                   *externalRef2.Dnn               `json:"dnn,omitempty"`
	Expires               *externalRef2.DateTime          `json:"expires,omitempty"`
	ImmediateReport       *bool                           `json:"immediateReport,omitempty"`
	ImplicitUnsubscribe   *bool                           `json:"implicitUnsubscribe,omitempty"`
	MonitoredResourceUris []externalRef2.Uri              `json:"monitoredResourceUris"`
	NfInstanceId          externalRef2.NfInstanceId       `json:"nfInstanceId"`
	PlmnId                *externalRef2.PlmnId            `json:"plmnId,omitempty"`
	Report                *SubscriptionDataSets           `json:"report,omitempty"`
	SingleNssai           *externalRef2.Snssai            `json:"singleNssai,omitempty"`
	SubscriptionId        *string                         `json:"subscriptionId,omitempty"`
	SupportedFeatures     *externalRef2.SupportedFeatures `json:"supportedFeatures,omitempty"`
	UniqueSubscription    *bool                           `json:"uniqueSubscription,omitempty"`
	AdditionalProperties  map[string]interface{}          `json:"-"`
}

// SecuredPacket defines model for SecuredPacket.
type SecuredPacket = []byte

// ServiceTypeUnrelatedClass defines model for ServiceTypeUnrelatedClass.
type ServiceTypeUnrelatedClass struct {
	AllowedGeographicArea     []interface{}              `json:"allowedGeographicArea,omitempty"`
	CodeWordInd               *CodeWordInd               `json:"codeWordInd,omitempty"`
	CodeWordList              []CodeWord                 `json:"codeWordList,omitempty"`
	PrivacyCheckRelatedAction *PrivacyCheckRelatedAction `json:"privacyCheckRelatedAction,omitempty"`

	// ServiceType Original reference TS29572_Nlmf_Location.yaml#/components/schemas/LcsServiceType
	ServiceType          interface{}            `json:"serviceType"`
	ValidTimePeriod      *ValidTimePeriod       `json:"validTimePeriod,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SessionManagementSubscriptionData defines model for SessionManagementSubscriptionData.
type SessionManagementSubscriptionData struct {
	N3gppChargingCharacteristics *N3GppChargingCharacteristics `json:"3gppChargingCharacteristics,omitempty"`

	// DnnConfigurations A map (list of key-value pairs where Dnn, or optionally the Wildcard DNN, serves as key) of DnnConfigurations
	DnnConfigurations         *map[string]DnnConfiguration        `json:"dnnConfigurations,omitempty"`
	ExpectedUeBehavioursList  *map[string]ExpectedUeBehaviourData `json:"expectedUeBehavioursList,omitempty"`
	InternalGroupIds          []externalRef2.GroupId              `json:"internalGroupIds,omitempty"`
	OdbPacketServices         *externalRef2.OdbPacketServices     `json:"odbPacketServices,omitempty"`
	SharedDnnConfigurationsId SharedDataId                        `json:"sharedDnnConfigurationsId,omitempty"`
	SharedTraceDataId         SharedDataId                        `json:"sharedTraceDataId,omitempty"`
	SharedVnGroupDataIds      *map[string]SharedDataId            `json:"sharedVnGroupDataIds,omitempty"`
	SingleNssai               externalRef2.Snssai                 `json:"singleNssai"`
	SuggestedPacketNumDlList  *map[string]SuggestedPacketNumDl    `json:"suggestedPacketNumDlList,omitempty"`
	TraceData                 *externalRef2.TraceData             `json:"traceData"`
	AdditionalProperties      map[string]interface{}              `json:"-"`
}

// SharedData defines model for SharedData.
type SharedData struct {
	SharedAmData            *AccessAndMobilitySubscriptionData `json:"sharedAmData,omitempty"`
	SharedDataId            SharedDataId                       `json:"sharedDataId"`
	SharedDnnConfigurations *map[string]DnnConfiguration       `json:"sharedDnnConfigurations,omitempty"`
	SharedSmsMngSubsData    *SmsManagementSubscriptionData     `json:"sharedSmsMngSubsData,omitempty"`
	SharedSmsSubsData       *SmsSubscriptionData               `json:"sharedSmsSubsData,omitempty"`
	SharedSnssaiInfos       *map[string]SnssaiInfo             `json:"sharedSnssaiInfos,omitempty"`
	SharedTraceData         *externalRef2.TraceData            `json:"sharedTraceData"`
	SharedVnGroupDatas      *map[string]VnGroupData            `json:"sharedVnGroupDatas,omitempty"`
	AdditionalProperties    map[string]interface{}             `json:"-"`
}

// SharedDataId defines model for SharedDataId.
type SharedDataId = string

// SharedDataIds defines model for SharedDataIds.
type SharedDataIds = []SharedDataId

// SmfSelectionSubscriptionData defines model for SmfSelectionSubscriptionData.
type SmfSelectionSubscriptionData struct {
	SharedSnssaiInfosId   SharedDataId                    `json:"sharedSnssaiInfosId,omitempty"`
	SubscribedSnssaiInfos *map[string]SnssaiInfo          `json:"subscribedSnssaiInfos,omitempty"`
	SupportedFeatures     *externalRef2.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{}          `json:"-"`
}

// SmsManagementSubscriptionData defines model for SmsManagementSubscriptionData.
type SmsManagementSubscriptionData struct {
	MoSmsBarringAll      *bool                           `json:"moSmsBarringAll,omitempty"`
	MoSmsBarringRoaming  *bool                           `json:"moSmsBarringRoaming,omitempty"`
	MoSmsSubscribed      *bool                           `json:"moSmsSubscribed,omitempty"`
	MtSmsBarringAll      *bool                           `json:"mtSmsBarringAll,omitempty"`
	MtSmsBarringRoaming  *bool                           `json:"mtSmsBarringRoaming,omitempty"`
	MtSmsSubscribed      *bool                           `json:"mtSmsSubscribed,omitempty"`
	SharedSmsMngDataIds  []SharedDataId                  `json:"sharedSmsMngDataIds,omitempty"`
	SupportedFeatures    *externalRef2.SupportedFeatures `json:"supportedFeatures,omitempty"`
	TraceData            *externalRef2.TraceData         `json:"traceData"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// SmsSubscribed defines model for SmsSubscribed.
type SmsSubscribed = bool

// SmsSubscriptionData defines model for SmsSubscriptionData.
type SmsSubscriptionData struct {
	SharedSmsSubsDataId  SharedDataId           `json:"sharedSmsSubsDataId,omitempty"`
	SmsSubscribed        *SmsSubscribed         `json:"smsSubscribed,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmsfInfo defines model for SmsfInfo.
type SmsfInfo struct {
	PlmnId               externalRef2.PlmnId       `json:"plmnId"`
	SmsfInstanceId       externalRef2.NfInstanceId `json:"smsfInstanceId"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// SnssaiInfo defines model for SnssaiInfo.
type SnssaiInfo struct {
	DnnInfos             []DnnInfo              `json:"dnnInfos"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SorInfo defines model for SorInfo.
type SorInfo struct {
	AckInd               externalRef0.AckInd     `json:"ackInd"`
	Countersor           externalRef0.CounterSor `json:"countersor,omitempty"`
	ProvisioningTime     externalRef2.DateTime   `json:"provisioningTime"`
	SorMacIausf          externalRef0.SorMac     `json:"sorMacIausf,omitempty"`
	SteeringContainer    *SteeringContainer      `json:"steeringContainer,omitempty"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// SorUpdateIndicator defines model for SorUpdateIndicator.
type SorUpdateIndicator string

// SorUpdateInfo defines model for SorUpdateInfo.
type SorUpdateInfo struct {
	VplmnId              externalRef2.PlmnId    `json:"vplmnId"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SscModes defines model for SscModes.
type SscModes struct {
	AllowedSscModes      []externalRef2.SscMode `json:"allowedSscModes,omitempty"`
	DefaultSscMode       externalRef2.SscMode   `json:"defaultSscMode"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SteeringContainer defines model for SteeringContainer.
type SteeringContainer struct {
	union json.RawMessage
}

// SteeringContainer0 defines model for .
type SteeringContainer0 = []externalRef0.SteeringInfo

// SubscriptionDataSets defines model for SubscriptionDataSets.
type SubscriptionDataSets struct {
	AmData                          *AccessAndMobilitySubscriptionData  `json:"amData,omitempty"`
	LcsBroadcastAssistanceTypesData *LcsBroadcastAssistanceTypesData    `json:"lcsBroadcastAssistanceTypesData,omitempty"`
	LcsMoData                       *LcsMoData                          `json:"lcsMoData,omitempty"`
	LcsPrivacyData                  *LcsPrivacyData                     `json:"lcsPrivacyData,omitempty"`
	SmData                          []SessionManagementSubscriptionData `json:"smData,omitempty"`
	SmfSelData                      *SmfSelectionSubscriptionData       `json:"smfSelData,omitempty"`
	SmsMngData                      *SmsManagementSubscriptionData      `json:"smsMngData,omitempty"`
	SmsSubsData                     *SmsSubscriptionData                `json:"smsSubsData,omitempty"`
	TraceData                       *externalRef2.TraceData             `json:"traceData"`
	UecAmfData                      *UeContextInAmfData                 `json:"uecAmfData,omitempty"`
	UecSmfData                      *UeContextInSmfData                 `json:"uecSmfData,omitempty"`
	UecSmsfData                     *UeContextInSmsfData                `json:"uecSmsfData,omitempty"`
	V2xData                         *V2xSubscriptionData                `json:"v2xData,omitempty"`
	AdditionalProperties            map[string]interface{}              `json:"-"`
}

// SuggestedPacketNumDl defines model for SuggestedPacketNumDl.
type SuggestedPacketNumDl struct {
	SuggestedPacketNumDl int                    `json:"suggestedPacketNumDl"`
	ValidityTime         *externalRef2.DateTime `json:"validityTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TraceDataResponse defines model for TraceDataResponse.
type TraceDataResponse struct {
	SharedTraceDataId    SharedDataId            `json:"sharedTraceDataId,omitempty"`
	TraceData            *externalRef2.TraceData `json:"traceData"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// UeContextInAmfData defines model for UeContextInAmfData.
type UeContextInAmfData struct {
	// EpsInterworkingInfo Original reference TS29503_Nudm_UECM.yaml#/components/schemas/EpsInterworkingInfo
	EpsInterworkingInfo  interface{}            `json:"epsInterworkingInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextInSmfData defines model for UeContextInSmfData.
type UeContextInSmfData struct {
	EmergencyInfo *EmergencyInfo `json:"emergencyInfo,omitempty"`

	// PduSessions A map (list of key-value pairs where PduSessionId serves as key) of PduSessions
	PduSessions          *map[string]PduSession `json:"pduSessions,omitempty"`
	PgwInfo              []PgwInfo              `json:"pgwInfo,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeContextInSmsfData defines model for UeContextInSmsfData.
type UeContextInSmsfData struct {
	SmsfInfo3GppAccess    *SmsfInfo              `json:"smsfInfo3GppAccess,omitempty"`
	SmsfInfoNon3GppAccess *SmsfInfo              `json:"smsfInfoNon3GppAccess,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// UeId defines model for UeId.
type UeId struct {
	GpsiList             []externalRef2.Gpsi    `json:"gpsiList,omitempty"`
	Supi                 externalRef2.Supi      `json:"supi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UeUsageType defines model for UeUsageType.
type UeUsageType = int

// UnrelatedClass defines model for UnrelatedClass.
type UnrelatedClass struct {
	DefaultUnrelatedClass       DefaultUnrelatedClass       `json:"defaultUnrelatedClass"`
	ExternalUnrelatedClass      *ExternalUnrelatedClass     `json:"externalUnrelatedClass,omitempty"`
	ServiceTypeUnrelatedClasses []ServiceTypeUnrelatedClass `json:"serviceTypeUnrelatedClasses,omitempty"`
	AdditionalProperties        map[string]interface{}      `json:"-"`
}

// UpuInfo defines model for UpuInfo.
type UpuInfo struct {
	CounterUpu           externalRef1.CounterUpu `json:"counterUpu,omitempty"`
	ProvisioningTime     externalRef2.DateTime   `json:"provisioningTime"`
	UpuAckInd            externalRef1.UpuAckInd  `json:"upuAckInd"`
	UpuDataList          []externalRef1.UpuData  `json:"upuDataList"`
	UpuMacIausf          externalRef1.UpuMac     `json:"upuMacIausf,omitempty"`
	UpuRegInd            UpuRegInd               `json:"upuRegInd"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// UpuRegInd defines model for UpuRegInd.
type UpuRegInd = bool

// V2xSubscriptionData defines model for V2xSubscriptionData.
type V2xSubscriptionData struct {
	LtePc5Ambr           externalRef2.BitRate     `json:"ltePc5Ambr,omitempty"`
	LteV2xServicesAuth   *externalRef2.LteV2xAuth `json:"lteV2xServicesAuth,omitempty"`
	NrUePc5Ambr          externalRef2.BitRate     `json:"nrUePc5Ambr,omitempty"`
	NrV2xServicesAuth    *externalRef2.NrV2xAuth  `json:"nrV2xServicesAuth,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// ValidTimePeriod defines model for ValidTimePeriod.
type ValidTimePeriod struct {
	EndTime              *externalRef2.DateTime `json:"endTime,omitempty"`
	StartTime            *externalRef2.DateTime `json:"startTime,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VnGroupData defines model for VnGroupData.
type VnGroupData struct {
	AppDescriptors       []AppDescriptor        `json:"appDescriptors,omitempty"`
	Dnn                  *externalRef2.Dnn      `json:"dnn,omitempty"`
	PduSessionTypes      *PduSessionTypes       `json:"pduSessionTypes,omitempty"`
	SingleNssai          *externalRef2.Snssai   `json:"singleNssai,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GetGroupIdentifiersParams defines parameters for GetGroupIdentifiers.
type GetGroupIdentifiersParams struct {
	// ExtGroupId External Group Identifier
	ExtGroupId *ExtGroupId `form:"ext-group-id,omitempty" json:"ext-group-id,omitempty"`

	// IntGroupId Internal Group Identifier
	IntGroupId *externalRef2.GroupId `form:"int-group-id,omitempty" json:"int-group-id,omitempty"`

	// UeIdInd Indication whether UE identifiers are required or not
	UeIdInd *bool `form:"ue-id-ind,omitempty" json:"ue-id-ind,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSharedDataParams defines parameters for GetSharedData.
type GetSharedDataParams struct {
	// SharedDataIds List of shared data ids
	SharedDataIds SharedDataIds `form:"shared-data-ids" json:"shared-data-ids"`

	// SupportedFeatures Supported Features; this query parameter should not be used
	SupportedFeaturesShouldNotBeUsed *externalRef2.SupportedFeatures `form:"supportedFeatures,omitempty" json:"supportedFeatures,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifySharedDataSubsParams defines parameters for ModifySharedDataSubs.
type ModifySharedDataSubsParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetIndividualSharedDataParams defines parameters for GetIndividualSharedData.
type GetIndividualSharedDataParams struct {
	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetDataSetsParams defines parameters for GetDataSets.
type GetDataSetsParams struct {
	// DatasetNames List of dataset names
	DatasetNames DatasetNames `form:"dataset-names" json:"dataset-names"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef2.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetAmDataParams defines parameters for GetAmData.
type GetAmDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef2.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetEcrDataParams defines parameters for GetEcrData.
type GetEcrDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetLcsBcaDataParams defines parameters for GetLcsBcaData.
type GetLcsBcaDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	PlmnId            *externalRef2.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetLcsMoDataParams defines parameters for GetLcsMoData.
type GetLcsMoDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetNSSAIParams defines parameters for GetNSSAI.
type GetNSSAIParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef2.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmDataParams defines parameters for GetSmData.
type GetSmDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	SingleNssai       *externalRef2.Snssai            `form:"single-nssai,omitempty" json:"single-nssai,omitempty"`
	Dnn               *externalRef2.Dnn               `form:"dnn,omitempty" json:"dnn,omitempty"`
	PlmnId            *externalRef2.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmfSelDataParams defines parameters for GetSmfSelData.
type GetSmfSelDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef2.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmsDataParams defines parameters for GetSmsData.
type GetSmsDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	PlmnId            *externalRef2.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSmsMngtDataParams defines parameters for GetSmsMngtData.
type GetSmsMngtDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
	PlmnId            *externalRef2.PlmnId            `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetTraceConfigDataParams defines parameters for GetTraceConfigData.
type GetTraceConfigDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef2.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetUeCtxInAmfDataParams defines parameters for GetUeCtxInAmfData.
type GetUeCtxInAmfDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetUeCtxInSmfDataParams defines parameters for GetUeCtxInSmfData.
type GetUeCtxInSmfDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetUeCtxInSmsfDataParams defines parameters for GetUeCtxInSmsfData.
type GetUeCtxInSmsfDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetV2xDataParams defines parameters for GetV2xData.
type GetV2xDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetSupiOrGpsiParams defines parameters for GetSupiOrGpsi.
type GetSupiOrGpsiParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// AppPortId Application port identifier
	AppPortId *AppPortId `form:"app-port-id,omitempty" json:"app-port-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GetLcsPrivacyDataParams defines parameters for GetLcsPrivacyData.
type GetLcsPrivacyDataParams struct {
	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// ModifyParams defines parameters for Modify.
type ModifyParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef2.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// SubscribeToSharedDataJSONRequestBody defines body for SubscribeToSharedData for application/json ContentType.
type SubscribeToSharedDataJSONRequestBody = SdmSubscription

// ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody defines body for ModifySharedDataSubs for application/merge-patch+json ContentType.
type ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody = SdmSubsModification

// CAGAckJSONRequestBody defines body for CAGAck for application/json ContentType.
type CAGAckJSONRequestBody = AcknowledgeInfo

// SorAckInfoJSONRequestBody defines body for SorAckInfo for application/json ContentType.
type SorAckInfoJSONRequestBody = AcknowledgeInfo

// SNSSAIsAckJSONRequestBody defines body for SNSSAIsAck for application/json ContentType.
type SNSSAIsAckJSONRequestBody = AcknowledgeInfo

// UpdateSORInfoJSONRequestBody defines body for UpdateSORInfo for application/json ContentType.
type UpdateSORInfoJSONRequestBody = SorUpdateInfo

// UpuAckJSONRequestBody defines body for UpuAck for application/json ContentType.
type UpuAckJSONRequestBody = AcknowledgeInfo

// SubscribeJSONRequestBody defines body for Subscribe for application/json ContentType.
type SubscribeJSONRequestBody = SdmSubscription

// ModifyApplicationMergePatchPlusJSONRequestBody defines body for Modify for application/merge-patch+json ContentType.
type ModifyApplicationMergePatchPlusJSONRequestBody = SdmSubsModification

// Getter for additional properties for AccessAndMobilitySubscriptionData. Returns the specified
// element and whether it was found
func (a AccessAndMobilitySubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessAndMobilitySubscriptionData
func (a *AccessAndMobilitySubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessAndMobilitySubscriptionData to handle AdditionalProperties
func (a *AccessAndMobilitySubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["activeTime"]; found {
		err = json.Unmarshal(raw, &a.ActiveTime)
		if err != nil {
			return fmt.Errorf("error reading 'activeTime': %w", err)
		}
		delete(object, "activeTime")
	}

	if raw, found := object["cMsisdn"]; found {
		err = json.Unmarshal(raw, &a.CMsisdn)
		if err != nil {
			return fmt.Errorf("error reading 'cMsisdn': %w", err)
		}
		delete(object, "cMsisdn")
	}

	if raw, found := object["cagData"]; found {
		err = json.Unmarshal(raw, &a.CagData)
		if err != nil {
			return fmt.Errorf("error reading 'cagData': %w", err)
		}
		delete(object, "cagData")
	}

	if raw, found := object["coreNetworkTypeRestrictions"]; found {
		err = json.Unmarshal(raw, &a.CoreNetworkTypeRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'coreNetworkTypeRestrictions': %w", err)
		}
		delete(object, "coreNetworkTypeRestrictions")
	}

	if raw, found := object["ecRestrictionDataNb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataNb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataNb': %w", err)
		}
		delete(object, "ecRestrictionDataNb")
	}

	if raw, found := object["ecRestrictionDataWb"]; found {
		err = json.Unmarshal(raw, &a.EcRestrictionDataWb)
		if err != nil {
			return fmt.Errorf("error reading 'ecRestrictionDataWb': %w", err)
		}
		delete(object, "ecRestrictionDataWb")
	}

	if raw, found := object["edrxParametersList"]; found {
		err = json.Unmarshal(raw, &a.EdrxParametersList)
		if err != nil {
			return fmt.Errorf("error reading 'edrxParametersList': %w", err)
		}
		delete(object, "edrxParametersList")
	}

	if raw, found := object["expectedUeBehaviourList"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUeBehaviourList)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUeBehaviourList': %w", err)
		}
		delete(object, "expectedUeBehaviourList")
	}

	if raw, found := object["forbiddenAreas"]; found {
		err = json.Unmarshal(raw, &a.ForbiddenAreas)
		if err != nil {
			return fmt.Errorf("error reading 'forbiddenAreas': %w", err)
		}
		delete(object, "forbiddenAreas")
	}

	if raw, found := object["gpsis"]; found {
		err = json.Unmarshal(raw, &a.Gpsis)
		if err != nil {
			return fmt.Errorf("error reading 'gpsis': %w", err)
		}
		delete(object, "gpsis")
	}

	if raw, found := object["iabOperationAllowed"]; found {
		err = json.Unmarshal(raw, &a.IabOperationAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'iabOperationAllowed': %w", err)
		}
		delete(object, "iabOperationAllowed")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["mcsPriority"]; found {
		err = json.Unmarshal(raw, &a.McsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mcsPriority': %w", err)
		}
		delete(object, "mcsPriority")
	}

	if raw, found := object["mdtConfiguration"]; found {
		err = json.Unmarshal(raw, &a.MdtConfiguration)
		if err != nil {
			return fmt.Errorf("error reading 'mdtConfiguration': %w", err)
		}
		delete(object, "mdtConfiguration")
	}

	if raw, found := object["mdtUserConsent"]; found {
		err = json.Unmarshal(raw, &a.MdtUserConsent)
		if err != nil {
			return fmt.Errorf("error reading 'mdtUserConsent': %w", err)
		}
		delete(object, "mdtUserConsent")
	}

	if raw, found := object["micoAllowed"]; found {
		err = json.Unmarshal(raw, &a.MicoAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'micoAllowed': %w", err)
		}
		delete(object, "micoAllowed")
	}

	if raw, found := object["mpsPriority"]; found {
		err = json.Unmarshal(raw, &a.MpsPriority)
		if err != nil {
			return fmt.Errorf("error reading 'mpsPriority': %w", err)
		}
		delete(object, "mpsPriority")
	}

	if raw, found := object["nbIoTUePriority"]; found {
		err = json.Unmarshal(raw, &a.NbIoTUePriority)
		if err != nil {
			return fmt.Errorf("error reading 'nbIoTUePriority': %w", err)
		}
		delete(object, "nbIoTUePriority")
	}

	if raw, found := object["nssai"]; found {
		err = json.Unmarshal(raw, &a.Nssai)
		if err != nil {
			return fmt.Errorf("error reading 'nssai': %w", err)
		}
		delete(object, "nssai")
	}

	if raw, found := object["nssaiInclusionAllowed"]; found {
		err = json.Unmarshal(raw, &a.NssaiInclusionAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'nssaiInclusionAllowed': %w", err)
		}
		delete(object, "nssaiInclusionAllowed")
	}

	if raw, found := object["odbPacketServices"]; found {
		err = json.Unmarshal(raw, &a.OdbPacketServices)
		if err != nil {
			return fmt.Errorf("error reading 'odbPacketServices': %w", err)
		}
		delete(object, "odbPacketServices")
	}

	if raw, found := object["primaryRatRestrictions"]; found {
		err = json.Unmarshal(raw, &a.PrimaryRatRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'primaryRatRestrictions': %w", err)
		}
		delete(object, "primaryRatRestrictions")
	}

	if raw, found := object["ptwParametersList"]; found {
		err = json.Unmarshal(raw, &a.PtwParametersList)
		if err != nil {
			return fmt.Errorf("error reading 'ptwParametersList': %w", err)
		}
		delete(object, "ptwParametersList")
	}

	if raw, found := object["ratRestrictions"]; found {
		err = json.Unmarshal(raw, &a.RatRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'ratRestrictions': %w", err)
		}
		delete(object, "ratRestrictions")
	}

	if raw, found := object["rfspIndex"]; found {
		err = json.Unmarshal(raw, &a.RfspIndex)
		if err != nil {
			return fmt.Errorf("error reading 'rfspIndex': %w", err)
		}
		delete(object, "rfspIndex")
	}

	if raw, found := object["rgWirelineCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.RgWirelineCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading 'rgWirelineCharacteristics': %w", err)
		}
		delete(object, "rgWirelineCharacteristics")
	}

	if raw, found := object["secondaryRatRestrictions"]; found {
		err = json.Unmarshal(raw, &a.SecondaryRatRestrictions)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryRatRestrictions': %w", err)
		}
		delete(object, "secondaryRatRestrictions")
	}

	if raw, found := object["serviceAreaRestriction"]; found {
		err = json.Unmarshal(raw, &a.ServiceAreaRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'serviceAreaRestriction': %w", err)
		}
		delete(object, "serviceAreaRestriction")
	}

	if raw, found := object["serviceGapTime"]; found {
		err = json.Unmarshal(raw, &a.ServiceGapTime)
		if err != nil {
			return fmt.Errorf("error reading 'serviceGapTime': %w", err)
		}
		delete(object, "serviceGapTime")
	}

	if raw, found := object["sharedAmDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedAmDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedAmDataIds': %w", err)
		}
		delete(object, "sharedAmDataIds")
	}

	if raw, found := object["sharedVnGroupDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedVnGroupDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedVnGroupDataIds': %w", err)
		}
		delete(object, "sharedVnGroupDataIds")
	}

	if raw, found := object["sorInfo"]; found {
		err = json.Unmarshal(raw, &a.SorInfo)
		if err != nil {
			return fmt.Errorf("error reading 'sorInfo': %w", err)
		}
		delete(object, "sorInfo")
	}

	if raw, found := object["sorInfoExpectInd"]; found {
		err = json.Unmarshal(raw, &a.SorInfoExpectInd)
		if err != nil {
			return fmt.Errorf("error reading 'sorInfoExpectInd': %w", err)
		}
		delete(object, "sorInfoExpectInd")
	}

	if raw, found := object["sorUpdateIndicatorList"]; found {
		err = json.Unmarshal(raw, &a.SorUpdateIndicatorList)
		if err != nil {
			return fmt.Errorf("error reading 'sorUpdateIndicatorList': %w", err)
		}
		delete(object, "sorUpdateIndicatorList")
	}

	if raw, found := object["sorafRetrieval"]; found {
		err = json.Unmarshal(raw, &a.SorafRetrieval)
		if err != nil {
			return fmt.Errorf("error reading 'sorafRetrieval': %w", err)
		}
		delete(object, "sorafRetrieval")
	}

	if raw, found := object["stnSr"]; found {
		err = json.Unmarshal(raw, &a.StnSr)
		if err != nil {
			return fmt.Errorf("error reading 'stnSr': %w", err)
		}
		delete(object, "stnSr")
	}

	if raw, found := object["subsRegTimer"]; found {
		err = json.Unmarshal(raw, &a.SubsRegTimer)
		if err != nil {
			return fmt.Errorf("error reading 'subsRegTimer': %w", err)
		}
		delete(object, "subsRegTimer")
	}

	if raw, found := object["subscribedDnnList"]; found {
		err = json.Unmarshal(raw, &a.SubscribedDnnList)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedDnnList': %w", err)
		}
		delete(object, "subscribedDnnList")
	}

	if raw, found := object["subscribedUeAmbr"]; found {
		err = json.Unmarshal(raw, &a.SubscribedUeAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedUeAmbr': %w", err)
		}
		delete(object, "subscribedUeAmbr")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["ueUsageType"]; found {
		err = json.Unmarshal(raw, &a.UeUsageType)
		if err != nil {
			return fmt.Errorf("error reading 'ueUsageType': %w", err)
		}
		delete(object, "ueUsageType")
	}

	if raw, found := object["upuInfo"]; found {
		err = json.Unmarshal(raw, &a.UpuInfo)
		if err != nil {
			return fmt.Errorf("error reading 'upuInfo': %w", err)
		}
		delete(object, "upuInfo")
	}

	if raw, found := object["wirelineForbiddenAreas"]; found {
		err = json.Unmarshal(raw, &a.WirelineForbiddenAreas)
		if err != nil {
			return fmt.Errorf("error reading 'wirelineForbiddenAreas': %w", err)
		}
		delete(object, "wirelineForbiddenAreas")
	}

	if raw, found := object["wirelineServiceAreaRestriction"]; found {
		err = json.Unmarshal(raw, &a.WirelineServiceAreaRestriction)
		if err != nil {
			return fmt.Errorf("error reading 'wirelineServiceAreaRestriction': %w", err)
		}
		delete(object, "wirelineServiceAreaRestriction")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessAndMobilitySubscriptionData to handle AdditionalProperties
func (a AccessAndMobilitySubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["activeTime"], err = json.Marshal(a.ActiveTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'activeTime': %w", err)
	}

	if len(a.CMsisdn) != 0 {
		object["cMsisdn"], err = json.Marshal(a.CMsisdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cMsisdn': %w", err)
		}
	}

	if a.CagData != nil {
		object["cagData"], err = json.Marshal(a.CagData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cagData': %w", err)
		}
	}

	if a.CoreNetworkTypeRestrictions != nil {
		object["coreNetworkTypeRestrictions"], err = json.Marshal(a.CoreNetworkTypeRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'coreNetworkTypeRestrictions': %w", err)
		}
	}

	if a.EcRestrictionDataNb != nil {
		object["ecRestrictionDataNb"], err = json.Marshal(a.EcRestrictionDataNb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataNb': %w", err)
		}
	}

	if a.EcRestrictionDataWb != nil {
		object["ecRestrictionDataWb"], err = json.Marshal(a.EcRestrictionDataWb)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecRestrictionDataWb': %w", err)
		}
	}

	if len(a.EdrxParametersList) != 0 {
		object["edrxParametersList"], err = json.Marshal(a.EdrxParametersList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'edrxParametersList': %w", err)
		}
	}

	if a.ExpectedUeBehaviourList != nil {
		object["expectedUeBehaviourList"], err = json.Marshal(a.ExpectedUeBehaviourList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUeBehaviourList': %w", err)
		}
	}

	if a.ForbiddenAreas != nil {
		object["forbiddenAreas"], err = json.Marshal(a.ForbiddenAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forbiddenAreas': %w", err)
		}
	}

	if a.Gpsis != nil {
		object["gpsis"], err = json.Marshal(a.Gpsis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsis': %w", err)
		}
	}

	if a.IabOperationAllowed != nil {
		object["iabOperationAllowed"], err = json.Marshal(a.IabOperationAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iabOperationAllowed': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	if a.McsPriority != nil {
		object["mcsPriority"], err = json.Marshal(a.McsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mcsPriority': %w", err)
		}
	}

	if a.MdtConfiguration != nil {
		object["mdtConfiguration"], err = json.Marshal(a.MdtConfiguration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mdtConfiguration': %w", err)
		}
	}

	if a.MdtUserConsent != nil {
		object["mdtUserConsent"], err = json.Marshal(a.MdtUserConsent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mdtUserConsent': %w", err)
		}
	}

	if a.MicoAllowed != nil {
		object["micoAllowed"], err = json.Marshal(a.MicoAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'micoAllowed': %w", err)
		}
	}

	if a.MpsPriority != nil {
		object["mpsPriority"], err = json.Marshal(a.MpsPriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mpsPriority': %w", err)
		}
	}

	if a.NbIoTUePriority != nil {
		object["nbIoTUePriority"], err = json.Marshal(a.NbIoTUePriority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nbIoTUePriority': %w", err)
		}
	}

	object["nssai"], err = json.Marshal(a.Nssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nssai': %w", err)
	}

	if a.NssaiInclusionAllowed != nil {
		object["nssaiInclusionAllowed"], err = json.Marshal(a.NssaiInclusionAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nssaiInclusionAllowed': %w", err)
		}
	}

	if a.OdbPacketServices != nil {
		object["odbPacketServices"], err = json.Marshal(a.OdbPacketServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'odbPacketServices': %w", err)
		}
	}

	if a.PrimaryRatRestrictions != nil {
		object["primaryRatRestrictions"], err = json.Marshal(a.PrimaryRatRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'primaryRatRestrictions': %w", err)
		}
	}

	if len(a.PtwParametersList) != 0 {
		object["ptwParametersList"], err = json.Marshal(a.PtwParametersList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ptwParametersList': %w", err)
		}
	}

	if a.RatRestrictions != nil {
		object["ratRestrictions"], err = json.Marshal(a.RatRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ratRestrictions': %w", err)
		}
	}

	object["rfspIndex"], err = json.Marshal(a.RfspIndex)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rfspIndex': %w", err)
	}

	if a.RgWirelineCharacteristics != nil {
		object["rgWirelineCharacteristics"], err = json.Marshal(a.RgWirelineCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rgWirelineCharacteristics': %w", err)
		}
	}

	if a.SecondaryRatRestrictions != nil {
		object["secondaryRatRestrictions"], err = json.Marshal(a.SecondaryRatRestrictions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryRatRestrictions': %w", err)
		}
	}

	if a.ServiceAreaRestriction != nil {
		object["serviceAreaRestriction"], err = json.Marshal(a.ServiceAreaRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceAreaRestriction': %w", err)
		}
	}

	if a.ServiceGapTime != nil {
		object["serviceGapTime"], err = json.Marshal(a.ServiceGapTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceGapTime': %w", err)
		}
	}

	if len(a.SharedAmDataIds) != 0 {
		object["sharedAmDataIds"], err = json.Marshal(a.SharedAmDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedAmDataIds': %w", err)
		}
	}

	if a.SharedVnGroupDataIds != nil {
		object["sharedVnGroupDataIds"], err = json.Marshal(a.SharedVnGroupDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedVnGroupDataIds': %w", err)
		}
	}

	if a.SorInfo != nil {
		object["sorInfo"], err = json.Marshal(a.SorInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorInfo': %w", err)
		}
	}

	if a.SorInfoExpectInd != nil {
		object["sorInfoExpectInd"], err = json.Marshal(a.SorInfoExpectInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorInfoExpectInd': %w", err)
		}
	}

	if len(a.SorUpdateIndicatorList) != 0 {
		object["sorUpdateIndicatorList"], err = json.Marshal(a.SorUpdateIndicatorList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorUpdateIndicatorList': %w", err)
		}
	}

	if a.SorafRetrieval != nil {
		object["sorafRetrieval"], err = json.Marshal(a.SorafRetrieval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorafRetrieval': %w", err)
		}
	}

	if a.StnSr != nil {
		object["stnSr"], err = json.Marshal(a.StnSr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stnSr': %w", err)
		}
	}

	object["subsRegTimer"], err = json.Marshal(a.SubsRegTimer)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'subsRegTimer': %w", err)
	}

	if a.SubscribedDnnList != nil {
		object["subscribedDnnList"], err = json.Marshal(a.SubscribedDnnList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedDnnList': %w", err)
		}
	}

	if a.SubscribedUeAmbr != nil {
		object["subscribedUeAmbr"], err = json.Marshal(a.SubscribedUeAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedUeAmbr': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UeUsageType != nil {
		object["ueUsageType"], err = json.Marshal(a.UeUsageType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueUsageType': %w", err)
		}
	}

	if a.UpuInfo != nil {
		object["upuInfo"], err = json.Marshal(a.UpuInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuInfo': %w", err)
		}
	}

	if a.WirelineForbiddenAreas != nil {
		object["wirelineForbiddenAreas"], err = json.Marshal(a.WirelineForbiddenAreas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wirelineForbiddenAreas': %w", err)
		}
	}

	if a.WirelineServiceAreaRestriction != nil {
		object["wirelineServiceAreaRestriction"], err = json.Marshal(a.WirelineServiceAreaRestriction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'wirelineServiceAreaRestriction': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AcknowledgeInfo. Returns the specified
// element and whether it was found
func (a AcknowledgeInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AcknowledgeInfo
func (a *AcknowledgeInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AcknowledgeInfo to handle AdditionalProperties
func (a *AcknowledgeInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["securedPacket"]; found {
		err = json.Unmarshal(raw, &a.SecuredPacket)
		if err != nil {
			return fmt.Errorf("error reading 'securedPacket': %w", err)
		}
		delete(object, "securedPacket")
	}

	if raw, found := object["sorMacIue"]; found {
		err = json.Unmarshal(raw, &a.SorMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'sorMacIue': %w", err)
		}
		delete(object, "sorMacIue")
	}

	if raw, found := object["ueNotReachable"]; found {
		err = json.Unmarshal(raw, &a.UeNotReachable)
		if err != nil {
			return fmt.Errorf("error reading 'ueNotReachable': %w", err)
		}
		delete(object, "ueNotReachable")
	}

	if raw, found := object["upuMacIue"]; found {
		err = json.Unmarshal(raw, &a.UpuMacIue)
		if err != nil {
			return fmt.Errorf("error reading 'upuMacIue': %w", err)
		}
		delete(object, "upuMacIue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AcknowledgeInfo to handle AdditionalProperties
func (a AcknowledgeInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	if a.SecuredPacket != nil {
		object["securedPacket"], err = json.Marshal(a.SecuredPacket)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'securedPacket': %w", err)
		}
	}

	if len(a.SorMacIue) != 0 {
		object["sorMacIue"], err = json.Marshal(a.SorMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorMacIue': %w", err)
		}
	}

	if a.UeNotReachable != nil {
		object["ueNotReachable"], err = json.Marshal(a.UeNotReachable)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueNotReachable': %w", err)
		}
	}

	if len(a.UpuMacIue) != 0 {
		object["upuMacIue"], err = json.Marshal(a.UpuMacIue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuMacIue': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AdditionalSnssaiData. Returns the specified
// element and whether it was found
func (a AdditionalSnssaiData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AdditionalSnssaiData
func (a *AdditionalSnssaiData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AdditionalSnssaiData to handle AdditionalProperties
func (a *AdditionalSnssaiData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["requiredAuthnAuthz"]; found {
		err = json.Unmarshal(raw, &a.RequiredAuthnAuthz)
		if err != nil {
			return fmt.Errorf("error reading 'requiredAuthnAuthz': %w", err)
		}
		delete(object, "requiredAuthnAuthz")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AdditionalSnssaiData to handle AdditionalProperties
func (a AdditionalSnssaiData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.RequiredAuthnAuthz != nil {
		object["requiredAuthnAuthz"], err = json.Marshal(a.RequiredAuthnAuthz)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requiredAuthnAuthz': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AfExternal. Returns the specified
// element and whether it was found
func (a AfExternal) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AfExternal
func (a *AfExternal) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AfExternal to handle AdditionalProperties
func (a *AfExternal) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AfExternal to handle AdditionalProperties
func (a AfExternal) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AfId != nil {
		object["afId"], err = json.Marshal(a.AfId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afId': %w", err)
		}
	}

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppDescriptor. Returns the specified
// element and whether it was found
func (a AppDescriptor) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppDescriptor
func (a *AppDescriptor) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppDescriptor to handle AdditionalProperties
func (a *AppDescriptor) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appId"]; found {
		err = json.Unmarshal(raw, &a.AppId)
		if err != nil {
			return fmt.Errorf("error reading 'appId': %w", err)
		}
		delete(object, "appId")
	}

	if raw, found := object["osId"]; found {
		err = json.Unmarshal(raw, &a.OsId)
		if err != nil {
			return fmt.Errorf("error reading 'osId': %w", err)
		}
		delete(object, "osId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppDescriptor to handle AdditionalProperties
func (a AppDescriptor) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AppId != nil {
		object["appId"], err = json.Marshal(a.AppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appId': %w", err)
		}
	}

	if a.OsId != nil {
		object["osId"], err = json.Marshal(a.OsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'osId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AppPortId. Returns the specified
// element and whether it was found
func (a AppPortId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AppPortId
func (a *AppPortId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AppPortId to handle AdditionalProperties
func (a *AppPortId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["destinationPort"]; found {
		err = json.Unmarshal(raw, &a.DestinationPort)
		if err != nil {
			return fmt.Errorf("error reading 'destinationPort': %w", err)
		}
		delete(object, "destinationPort")
	}

	if raw, found := object["originatorPort"]; found {
		err = json.Unmarshal(raw, &a.OriginatorPort)
		if err != nil {
			return fmt.Errorf("error reading 'originatorPort': %w", err)
		}
		delete(object, "originatorPort")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AppPortId to handle AdditionalProperties
func (a AppPortId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DestinationPort != nil {
		object["destinationPort"], err = json.Marshal(a.DestinationPort)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'destinationPort': %w", err)
		}
	}

	if a.OriginatorPort != nil {
		object["originatorPort"], err = json.Marshal(a.OriginatorPort)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'originatorPort': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CagData. Returns the specified
// element and whether it was found
func (a CagData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CagData
func (a *CagData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CagData to handle AdditionalProperties
func (a *CagData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cagInfos"]; found {
		err = json.Unmarshal(raw, &a.CagInfos)
		if err != nil {
			return fmt.Errorf("error reading 'cagInfos': %w", err)
		}
		delete(object, "cagInfos")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CagData to handle AdditionalProperties
func (a CagData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cagInfos"], err = json.Marshal(a.CagInfos)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cagInfos': %w", err)
	}

	if a.ProvisioningTime != nil {
		object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CagInfo. Returns the specified
// element and whether it was found
func (a CagInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CagInfo
func (a *CagInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CagInfo to handle AdditionalProperties
func (a *CagInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedCagList"]; found {
		err = json.Unmarshal(raw, &a.AllowedCagList)
		if err != nil {
			return fmt.Errorf("error reading 'allowedCagList': %w", err)
		}
		delete(object, "allowedCagList")
	}

	if raw, found := object["cagOnlyIndicator"]; found {
		err = json.Unmarshal(raw, &a.CagOnlyIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'cagOnlyIndicator': %w", err)
		}
		delete(object, "cagOnlyIndicator")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CagInfo to handle AdditionalProperties
func (a CagInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedCagList"], err = json.Marshal(a.AllowedCagList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedCagList': %w", err)
	}

	if a.CagOnlyIndicator != nil {
		object["cagOnlyIndicator"], err = json.Marshal(a.CagOnlyIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cagOnlyIndicator': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ContextInfo. Returns the specified
// element and whether it was found
func (a ContextInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ContextInfo
func (a *ContextInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ContextInfo to handle AdditionalProperties
func (a *ContextInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["origHeaders"]; found {
		err = json.Unmarshal(raw, &a.OrigHeaders)
		if err != nil {
			return fmt.Errorf("error reading 'origHeaders': %w", err)
		}
		delete(object, "origHeaders")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ContextInfo to handle AdditionalProperties
func (a ContextInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.OrigHeaders) != 0 {
		object["origHeaders"], err = json.Marshal(a.OrigHeaders)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'origHeaders': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DefaultUnrelatedClass. Returns the specified
// element and whether it was found
func (a DefaultUnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DefaultUnrelatedClass
func (a *DefaultUnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DefaultUnrelatedClass to handle AdditionalProperties
func (a *DefaultUnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["codeWordInd"]; found {
		err = json.Unmarshal(raw, &a.CodeWordInd)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordInd': %w", err)
		}
		delete(object, "codeWordInd")
	}

	if raw, found := object["codeWordList"]; found {
		err = json.Unmarshal(raw, &a.CodeWordList)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordList': %w", err)
		}
		delete(object, "codeWordList")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DefaultUnrelatedClass to handle AdditionalProperties
func (a DefaultUnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.CodeWordInd != nil {
		object["codeWordInd"], err = json.Marshal(a.CodeWordInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordInd': %w", err)
		}
	}

	if len(a.CodeWordList) != 0 {
		object["codeWordList"], err = json.Marshal(a.CodeWordList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordList': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnConfiguration. Returns the specified
// element and whether it was found
func (a DnnConfiguration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnConfiguration
func (a *DnnConfiguration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnConfiguration to handle AdditionalProperties
func (a *DnnConfiguration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["3gppChargingCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.N3gppChargingCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading '3gppChargingCharacteristics': %w", err)
		}
		delete(object, "3gppChargingCharacteristics")
	}

	if raw, found := object["5gQosProfile"]; found {
		err = json.Unmarshal(raw, &a.N5gQosProfile)
		if err != nil {
			return fmt.Errorf("error reading '5gQosProfile': %w", err)
		}
		delete(object, "5gQosProfile")
	}

	if raw, found := object["acsInfo"]; found {
		err = json.Unmarshal(raw, &a.AcsInfo)
		if err != nil {
			return fmt.Errorf("error reading 'acsInfo': %w", err)
		}
		delete(object, "acsInfo")
	}

	if raw, found := object["atsssAllowed"]; found {
		err = json.Unmarshal(raw, &a.AtsssAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'atsssAllowed': %w", err)
		}
		delete(object, "atsssAllowed")
	}

	if raw, found := object["dnAaaAddress"]; found {
		err = json.Unmarshal(raw, &a.DnAaaAddress)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaAddress': %w", err)
		}
		delete(object, "dnAaaAddress")
	}

	if raw, found := object["dnAaaIpAddressAllocation"]; found {
		err = json.Unmarshal(raw, &a.DnAaaIpAddressAllocation)
		if err != nil {
			return fmt.Errorf("error reading 'dnAaaIpAddressAllocation': %w", err)
		}
		delete(object, "dnAaaIpAddressAllocation")
	}

	if raw, found := object["iptvAccCtrlInfo"]; found {
		err = json.Unmarshal(raw, &a.IptvAccCtrlInfo)
		if err != nil {
			return fmt.Errorf("error reading 'iptvAccCtrlInfo': %w", err)
		}
		delete(object, "iptvAccCtrlInfo")
	}

	if raw, found := object["ipv4FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv4FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4FrameRouteList': %w", err)
		}
		delete(object, "ipv4FrameRouteList")
	}

	if raw, found := object["ipv6FrameRouteList"]; found {
		err = json.Unmarshal(raw, &a.Ipv6FrameRouteList)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6FrameRouteList': %w", err)
		}
		delete(object, "ipv6FrameRouteList")
	}

	if raw, found := object["iwkEpsInd"]; found {
		err = json.Unmarshal(raw, &a.IwkEpsInd)
		if err != nil {
			return fmt.Errorf("error reading 'iwkEpsInd': %w", err)
		}
		delete(object, "iwkEpsInd")
	}

	if raw, found := object["niddInfo"]; found {
		err = json.Unmarshal(raw, &a.NiddInfo)
		if err != nil {
			return fmt.Errorf("error reading 'niddInfo': %w", err)
		}
		delete(object, "niddInfo")
	}

	if raw, found := object["niddNefId"]; found {
		err = json.Unmarshal(raw, &a.NiddNefId)
		if err != nil {
			return fmt.Errorf("error reading 'niddNefId': %w", err)
		}
		delete(object, "niddNefId")
	}

	if raw, found := object["pduSessionContinuityInd"]; found {
		err = json.Unmarshal(raw, &a.PduSessionContinuityInd)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionContinuityInd': %w", err)
		}
		delete(object, "pduSessionContinuityInd")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if raw, found := object["redundantSessionAllowed"]; found {
		err = json.Unmarshal(raw, &a.RedundantSessionAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'redundantSessionAllowed': %w", err)
		}
		delete(object, "redundantSessionAllowed")
	}

	if raw, found := object["secondaryAuth"]; found {
		err = json.Unmarshal(raw, &a.SecondaryAuth)
		if err != nil {
			return fmt.Errorf("error reading 'secondaryAuth': %w", err)
		}
		delete(object, "secondaryAuth")
	}

	if raw, found := object["sessionAmbr"]; found {
		err = json.Unmarshal(raw, &a.SessionAmbr)
		if err != nil {
			return fmt.Errorf("error reading 'sessionAmbr': %w", err)
		}
		delete(object, "sessionAmbr")
	}

	if raw, found := object["sscModes"]; found {
		err = json.Unmarshal(raw, &a.SscModes)
		if err != nil {
			return fmt.Errorf("error reading 'sscModes': %w", err)
		}
		delete(object, "sscModes")
	}

	if raw, found := object["staticIpAddress"]; found {
		err = json.Unmarshal(raw, &a.StaticIpAddress)
		if err != nil {
			return fmt.Errorf("error reading 'staticIpAddress': %w", err)
		}
		delete(object, "staticIpAddress")
	}

	if raw, found := object["upSecurity"]; found {
		err = json.Unmarshal(raw, &a.UpSecurity)
		if err != nil {
			return fmt.Errorf("error reading 'upSecurity': %w", err)
		}
		delete(object, "upSecurity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnConfiguration to handle AdditionalProperties
func (a DnnConfiguration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N3gppChargingCharacteristics != nil {
		object["3gppChargingCharacteristics"], err = json.Marshal(a.N3gppChargingCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '3gppChargingCharacteristics': %w", err)
		}
	}

	if a.N5gQosProfile != nil {
		object["5gQosProfile"], err = json.Marshal(a.N5gQosProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '5gQosProfile': %w", err)
		}
	}

	if a.AcsInfo != nil {
		object["acsInfo"], err = json.Marshal(a.AcsInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'acsInfo': %w", err)
		}
	}

	if a.AtsssAllowed != nil {
		object["atsssAllowed"], err = json.Marshal(a.AtsssAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'atsssAllowed': %w", err)
		}
	}

	if a.DnAaaAddress != nil {
		object["dnAaaAddress"], err = json.Marshal(a.DnAaaAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaAddress': %w", err)
		}
	}

	if a.DnAaaIpAddressAllocation != nil {
		object["dnAaaIpAddressAllocation"], err = json.Marshal(a.DnAaaIpAddressAllocation)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnAaaIpAddressAllocation': %w", err)
		}
	}

	if a.IptvAccCtrlInfo != nil {
		object["iptvAccCtrlInfo"], err = json.Marshal(a.IptvAccCtrlInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iptvAccCtrlInfo': %w", err)
		}
	}

	if len(a.Ipv4FrameRouteList) != 0 {
		object["ipv4FrameRouteList"], err = json.Marshal(a.Ipv4FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4FrameRouteList': %w", err)
		}
	}

	if len(a.Ipv6FrameRouteList) != 0 {
		object["ipv6FrameRouteList"], err = json.Marshal(a.Ipv6FrameRouteList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6FrameRouteList': %w", err)
		}
	}

	if a.IwkEpsInd != nil {
		object["iwkEpsInd"], err = json.Marshal(a.IwkEpsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iwkEpsInd': %w", err)
		}
	}

	if a.NiddInfo != nil {
		object["niddInfo"], err = json.Marshal(a.NiddInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'niddInfo': %w", err)
		}
	}

	if a.NiddNefId != nil {
		object["niddNefId"], err = json.Marshal(a.NiddNefId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'niddNefId': %w", err)
		}
	}

	if a.PduSessionContinuityInd != nil {
		object["pduSessionContinuityInd"], err = json.Marshal(a.PduSessionContinuityInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionContinuityInd': %w", err)
		}
	}

	object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
	}

	if a.RedundantSessionAllowed != nil {
		object["redundantSessionAllowed"], err = json.Marshal(a.RedundantSessionAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redundantSessionAllowed': %w", err)
		}
	}

	if a.SecondaryAuth != nil {
		object["secondaryAuth"], err = json.Marshal(a.SecondaryAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secondaryAuth': %w", err)
		}
	}

	if a.SessionAmbr != nil {
		object["sessionAmbr"], err = json.Marshal(a.SessionAmbr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionAmbr': %w", err)
		}
	}

	object["sscModes"], err = json.Marshal(a.SscModes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sscModes': %w", err)
	}

	if len(a.StaticIpAddress) != 0 {
		object["staticIpAddress"], err = json.Marshal(a.StaticIpAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'staticIpAddress': %w", err)
		}
	}

	if a.UpSecurity != nil {
		object["upSecurity"], err = json.Marshal(a.UpSecurity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upSecurity': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DnnInfo. Returns the specified
// element and whether it was found
func (a DnnInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DnnInfo
func (a *DnnInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DnnInfo to handle AdditionalProperties
func (a *DnnInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["defaultDnnIndicator"]; found {
		err = json.Unmarshal(raw, &a.DefaultDnnIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'defaultDnnIndicator': %w", err)
		}
		delete(object, "defaultDnnIndicator")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["dnnBarred"]; found {
		err = json.Unmarshal(raw, &a.DnnBarred)
		if err != nil {
			return fmt.Errorf("error reading 'dnnBarred': %w", err)
		}
		delete(object, "dnnBarred")
	}

	if raw, found := object["invokeNefInd"]; found {
		err = json.Unmarshal(raw, &a.InvokeNefInd)
		if err != nil {
			return fmt.Errorf("error reading 'invokeNefInd': %w", err)
		}
		delete(object, "invokeNefInd")
	}

	if raw, found := object["iwkEpsInd"]; found {
		err = json.Unmarshal(raw, &a.IwkEpsInd)
		if err != nil {
			return fmt.Errorf("error reading 'iwkEpsInd': %w", err)
		}
		delete(object, "iwkEpsInd")
	}

	if raw, found := object["lboRoamingAllowed"]; found {
		err = json.Unmarshal(raw, &a.LboRoamingAllowed)
		if err != nil {
			return fmt.Errorf("error reading 'lboRoamingAllowed': %w", err)
		}
		delete(object, "lboRoamingAllowed")
	}

	if raw, found := object["sameSmfInd"]; found {
		err = json.Unmarshal(raw, &a.SameSmfInd)
		if err != nil {
			return fmt.Errorf("error reading 'sameSmfInd': %w", err)
		}
		delete(object, "sameSmfInd")
	}

	if raw, found := object["smfList"]; found {
		err = json.Unmarshal(raw, &a.SmfList)
		if err != nil {
			return fmt.Errorf("error reading 'smfList': %w", err)
		}
		delete(object, "smfList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DnnInfo to handle AdditionalProperties
func (a DnnInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DefaultDnnIndicator != nil {
		object["defaultDnnIndicator"], err = json.Marshal(a.DefaultDnnIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'defaultDnnIndicator': %w", err)
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.DnnBarred != nil {
		object["dnnBarred"], err = json.Marshal(a.DnnBarred)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnBarred': %w", err)
		}
	}

	if a.InvokeNefInd != nil {
		object["invokeNefInd"], err = json.Marshal(a.InvokeNefInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invokeNefInd': %w", err)
		}
	}

	if a.IwkEpsInd != nil {
		object["iwkEpsInd"], err = json.Marshal(a.IwkEpsInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iwkEpsInd': %w", err)
		}
	}

	if a.LboRoamingAllowed != nil {
		object["lboRoamingAllowed"], err = json.Marshal(a.LboRoamingAllowed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lboRoamingAllowed': %w", err)
		}
	}

	if a.SameSmfInd != nil {
		object["sameSmfInd"], err = json.Marshal(a.SameSmfInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sameSmfInd': %w", err)
		}
	}

	if len(a.SmfList) != 0 {
		object["smfList"], err = json.Marshal(a.SmfList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EcRestrictionDataWb. Returns the specified
// element and whether it was found
func (a EcRestrictionDataWb) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EcRestrictionDataWb
func (a *EcRestrictionDataWb) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EcRestrictionDataWb to handle AdditionalProperties
func (a *EcRestrictionDataWb) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ecModeARestricted"]; found {
		err = json.Unmarshal(raw, &a.EcModeARestricted)
		if err != nil {
			return fmt.Errorf("error reading 'ecModeARestricted': %w", err)
		}
		delete(object, "ecModeARestricted")
	}

	if raw, found := object["ecModeBRestricted"]; found {
		err = json.Unmarshal(raw, &a.EcModeBRestricted)
		if err != nil {
			return fmt.Errorf("error reading 'ecModeBRestricted': %w", err)
		}
		delete(object, "ecModeBRestricted")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EcRestrictionDataWb to handle AdditionalProperties
func (a EcRestrictionDataWb) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EcModeARestricted != nil {
		object["ecModeARestricted"], err = json.Marshal(a.EcModeARestricted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecModeARestricted': %w", err)
		}
	}

	if a.EcModeBRestricted != nil {
		object["ecModeBRestricted"], err = json.Marshal(a.EcModeBRestricted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ecModeBRestricted': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdrxParameters. Returns the specified
// element and whether it was found
func (a EdrxParameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdrxParameters
func (a *EdrxParameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdrxParameters to handle AdditionalProperties
func (a *EdrxParameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["edrxValue"]; found {
		err = json.Unmarshal(raw, &a.EdrxValue)
		if err != nil {
			return fmt.Errorf("error reading 'edrxValue': %w", err)
		}
		delete(object, "edrxValue")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdrxParameters to handle AdditionalProperties
func (a EdrxParameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["edrxValue"], err = json.Marshal(a.EdrxValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'edrxValue': %w", err)
	}

	object["ratType"], err = json.Marshal(a.RatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EmergencyInfo. Returns the specified
// element and whether it was found
func (a EmergencyInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EmergencyInfo
func (a *EmergencyInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EmergencyInfo to handle AdditionalProperties
func (a *EmergencyInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["epdgInd"]; found {
		err = json.Unmarshal(raw, &a.EpdgInd)
		if err != nil {
			return fmt.Errorf("error reading 'epdgInd': %w", err)
		}
		delete(object, "epdgInd")
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["pgwIpAddress"]; found {
		err = json.Unmarshal(raw, &a.PgwIpAddress)
		if err != nil {
			return fmt.Errorf("error reading 'pgwIpAddress': %w", err)
		}
		delete(object, "pgwIpAddress")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EmergencyInfo to handle AdditionalProperties
func (a EmergencyInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EpdgInd != nil {
		object["epdgInd"], err = json.Marshal(a.EpdgInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epdgInd': %w", err)
		}
	}

	if a.PgwFqdn != nil {
		object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
		}
	}

	if a.PgwIpAddress != nil {
		object["pgwIpAddress"], err = json.Marshal(a.PgwIpAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwIpAddress': %w", err)
		}
	}

	if a.SmfInstanceId != nil {
		object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnhancedCoverageRestrictionData. Returns the specified
// element and whether it was found
func (a EnhancedCoverageRestrictionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnhancedCoverageRestrictionData
func (a *EnhancedCoverageRestrictionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnhancedCoverageRestrictionData to handle AdditionalProperties
func (a *EnhancedCoverageRestrictionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plmnEcInfoList"]; found {
		err = json.Unmarshal(raw, &a.PlmnEcInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'plmnEcInfoList': %w", err)
		}
		delete(object, "plmnEcInfoList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnhancedCoverageRestrictionData to handle AdditionalProperties
func (a EnhancedCoverageRestrictionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.PlmnEcInfoList) != 0 {
		object["plmnEcInfoList"], err = json.Marshal(a.PlmnEcInfoList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnEcInfoList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExpectedUeBehaviourData. Returns the specified
// element and whether it was found
func (a ExpectedUeBehaviourData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExpectedUeBehaviourData
func (a *ExpectedUeBehaviourData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExpectedUeBehaviourData to handle AdditionalProperties
func (a *ExpectedUeBehaviourData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["batteryIndication"]; found {
		err = json.Unmarshal(raw, &a.BatteryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'batteryIndication': %w", err)
		}
		delete(object, "batteryIndication")
	}

	if raw, found := object["communicationDurationTime"]; found {
		err = json.Unmarshal(raw, &a.CommunicationDurationTime)
		if err != nil {
			return fmt.Errorf("error reading 'communicationDurationTime': %w", err)
		}
		delete(object, "communicationDurationTime")
	}

	if raw, found := object["expectedUmts"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUmts)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUmts': %w", err)
		}
		delete(object, "expectedUmts")
	}

	if raw, found := object["periodicTime"]; found {
		err = json.Unmarshal(raw, &a.PeriodicTime)
		if err != nil {
			return fmt.Errorf("error reading 'periodicTime': %w", err)
		}
		delete(object, "periodicTime")
	}

	if raw, found := object["scheduledCommunicationTime"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationTime)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationTime': %w", err)
		}
		delete(object, "scheduledCommunicationTime")
	}

	if raw, found := object["scheduledCommunicationType"]; found {
		err = json.Unmarshal(raw, &a.ScheduledCommunicationType)
		if err != nil {
			return fmt.Errorf("error reading 'scheduledCommunicationType': %w", err)
		}
		delete(object, "scheduledCommunicationType")
	}

	if raw, found := object["stationaryIndication"]; found {
		err = json.Unmarshal(raw, &a.StationaryIndication)
		if err != nil {
			return fmt.Errorf("error reading 'stationaryIndication': %w", err)
		}
		delete(object, "stationaryIndication")
	}

	if raw, found := object["trafficProfile"]; found {
		err = json.Unmarshal(raw, &a.TrafficProfile)
		if err != nil {
			return fmt.Errorf("error reading 'trafficProfile': %w", err)
		}
		delete(object, "trafficProfile")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExpectedUeBehaviourData to handle AdditionalProperties
func (a ExpectedUeBehaviourData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BatteryIndication != nil {
		object["batteryIndication"], err = json.Marshal(a.BatteryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'batteryIndication': %w", err)
		}
	}

	if a.CommunicationDurationTime != nil {
		object["communicationDurationTime"], err = json.Marshal(a.CommunicationDurationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'communicationDurationTime': %w", err)
		}
	}

	if len(a.ExpectedUmts) != 0 {
		object["expectedUmts"], err = json.Marshal(a.ExpectedUmts)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUmts': %w", err)
		}
	}

	if a.PeriodicTime != nil {
		object["periodicTime"], err = json.Marshal(a.PeriodicTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'periodicTime': %w", err)
		}
	}

	if a.ScheduledCommunicationTime != nil {
		object["scheduledCommunicationTime"], err = json.Marshal(a.ScheduledCommunicationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationTime': %w", err)
		}
	}

	if a.ScheduledCommunicationType != nil {
		object["scheduledCommunicationType"], err = json.Marshal(a.ScheduledCommunicationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scheduledCommunicationType': %w", err)
		}
	}

	if a.StationaryIndication != nil {
		object["stationaryIndication"], err = json.Marshal(a.StationaryIndication)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stationaryIndication': %w", err)
		}
	}

	if a.TrafficProfile != nil {
		object["trafficProfile"], err = json.Marshal(a.TrafficProfile)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficProfile': %w", err)
		}
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalUnrelatedClass. Returns the specified
// element and whether it was found
func (a ExternalUnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalUnrelatedClass
func (a *ExternalUnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalUnrelatedClass to handle AdditionalProperties
func (a *ExternalUnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afExternals"]; found {
		err = json.Unmarshal(raw, &a.AfExternals)
		if err != nil {
			return fmt.Errorf("error reading 'afExternals': %w", err)
		}
		delete(object, "afExternals")
	}

	if raw, found := object["lcsClientExternals"]; found {
		err = json.Unmarshal(raw, &a.LcsClientExternals)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientExternals': %w", err)
		}
		delete(object, "lcsClientExternals")
	}

	if raw, found := object["lcsClientGroupExternals"]; found {
		err = json.Unmarshal(raw, &a.LcsClientGroupExternals)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientGroupExternals': %w", err)
		}
		delete(object, "lcsClientGroupExternals")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalUnrelatedClass to handle AdditionalProperties
func (a ExternalUnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AfExternals) != 0 {
		object["afExternals"], err = json.Marshal(a.AfExternals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afExternals': %w", err)
		}
	}

	if len(a.LcsClientExternals) != 0 {
		object["lcsClientExternals"], err = json.Marshal(a.LcsClientExternals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsClientExternals': %w", err)
		}
	}

	if len(a.LcsClientGroupExternals) != 0 {
		object["lcsClientGroupExternals"], err = json.Marshal(a.LcsClientGroupExternals)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsClientGroupExternals': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for FrameRouteInfo. Returns the specified
// element and whether it was found
func (a FrameRouteInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FrameRouteInfo
func (a *FrameRouteInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FrameRouteInfo to handle AdditionalProperties
func (a *FrameRouteInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Mask"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Mask)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Mask': %w", err)
		}
		delete(object, "ipv4Mask")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FrameRouteInfo to handle AdditionalProperties
func (a FrameRouteInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Mask) != 0 {
		object["ipv4Mask"], err = json.Marshal(a.Ipv4Mask)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Mask': %w", err)
		}
	}

	if a.Ipv6Prefix != nil {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for GroupIdentifiers. Returns the specified
// element and whether it was found
func (a GroupIdentifiers) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GroupIdentifiers
func (a *GroupIdentifiers) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GroupIdentifiers to handle AdditionalProperties
func (a *GroupIdentifiers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["extGroupId"]; found {
		err = json.Unmarshal(raw, &a.ExtGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'extGroupId': %w", err)
		}
		delete(object, "extGroupId")
	}

	if raw, found := object["intGroupId"]; found {
		err = json.Unmarshal(raw, &a.IntGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'intGroupId': %w", err)
		}
		delete(object, "intGroupId")
	}

	if raw, found := object["ueIdList"]; found {
		err = json.Unmarshal(raw, &a.UeIdList)
		if err != nil {
			return fmt.Errorf("error reading 'ueIdList': %w", err)
		}
		delete(object, "ueIdList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GroupIdentifiers to handle AdditionalProperties
func (a GroupIdentifiers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.ExtGroupId) != 0 {
		object["extGroupId"], err = json.Marshal(a.ExtGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extGroupId': %w", err)
		}
	}

	if len(a.IntGroupId) != 0 {
		object["intGroupId"], err = json.Marshal(a.IntGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'intGroupId': %w", err)
		}
	}

	if len(a.UeIdList) != 0 {
		object["ueIdList"], err = json.Marshal(a.UeIdList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIdList': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IdTranslationResult. Returns the specified
// element and whether it was found
func (a IdTranslationResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IdTranslationResult
func (a *IdTranslationResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IdTranslationResult to handle AdditionalProperties
func (a *IdTranslationResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IdTranslationResult to handle AdditionalProperties
func (a IdTranslationResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpAddress. Returns the specified
// element and whether it was found
func (a IpAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpAddress
func (a *IpAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpAddress to handle AdditionalProperties
func (a *IpAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipv4Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv4Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv4Addr': %w", err)
		}
		delete(object, "ipv4Addr")
	}

	if raw, found := object["ipv6Addr"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Addr)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Addr': %w", err)
		}
		delete(object, "ipv6Addr")
	}

	if raw, found := object["ipv6Prefix"]; found {
		err = json.Unmarshal(raw, &a.Ipv6Prefix)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6Prefix': %w", err)
		}
		delete(object, "ipv6Prefix")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpAddress to handle AdditionalProperties
func (a IpAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Ipv4Addr) != 0 {
		object["ipv4Addr"], err = json.Marshal(a.Ipv4Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv4Addr': %w", err)
		}
	}

	if a.Ipv6Addr != nil {
		object["ipv6Addr"], err = json.Marshal(a.Ipv6Addr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Addr': %w", err)
		}
	}

	if a.Ipv6Prefix != nil {
		object["ipv6Prefix"], err = json.Marshal(a.Ipv6Prefix)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6Prefix': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsBroadcastAssistanceTypesData. Returns the specified
// element and whether it was found
func (a LcsBroadcastAssistanceTypesData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsBroadcastAssistanceTypesData
func (a *LcsBroadcastAssistanceTypesData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsBroadcastAssistanceTypesData to handle AdditionalProperties
func (a *LcsBroadcastAssistanceTypesData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["locationAssistanceType"]; found {
		err = json.Unmarshal(raw, &a.LocationAssistanceType)
		if err != nil {
			return fmt.Errorf("error reading 'locationAssistanceType': %w", err)
		}
		delete(object, "locationAssistanceType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsBroadcastAssistanceTypesData to handle AdditionalProperties
func (a LcsBroadcastAssistanceTypesData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["locationAssistanceType"], err = json.Marshal(a.LocationAssistanceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'locationAssistanceType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsClientExternal. Returns the specified
// element and whether it was found
func (a LcsClientExternal) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsClientExternal
func (a *LcsClientExternal) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsClientExternal to handle AdditionalProperties
func (a *LcsClientExternal) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsClientExternal to handle AdditionalProperties
func (a LcsClientExternal) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsClientGroupExternal. Returns the specified
// element and whether it was found
func (a LcsClientGroupExternal) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsClientGroupExternal
func (a *LcsClientGroupExternal) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsClientGroupExternal to handle AdditionalProperties
func (a *LcsClientGroupExternal) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["lcsClientGroupId"]; found {
		err = json.Unmarshal(raw, &a.LcsClientGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientGroupId': %w", err)
		}
		delete(object, "lcsClientGroupId")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsClientGroupExternal to handle AdditionalProperties
func (a LcsClientGroupExternal) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if len(a.LcsClientGroupId) != 0 {
		object["lcsClientGroupId"], err = json.Marshal(a.LcsClientGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsClientGroupId': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsMoData. Returns the specified
// element and whether it was found
func (a LcsMoData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsMoData
func (a *LcsMoData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsMoData to handle AdditionalProperties
func (a *LcsMoData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedServiceClasses"]; found {
		err = json.Unmarshal(raw, &a.AllowedServiceClasses)
		if err != nil {
			return fmt.Errorf("error reading 'allowedServiceClasses': %w", err)
		}
		delete(object, "allowedServiceClasses")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsMoData to handle AdditionalProperties
func (a LcsMoData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["allowedServiceClasses"], err = json.Marshal(a.AllowedServiceClasses)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'allowedServiceClasses': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LcsPrivacyData. Returns the specified
// element and whether it was found
func (a LcsPrivacyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LcsPrivacyData
func (a *LcsPrivacyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LcsPrivacyData to handle AdditionalProperties
func (a *LcsPrivacyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lpi"]; found {
		err = json.Unmarshal(raw, &a.Lpi)
		if err != nil {
			return fmt.Errorf("error reading 'lpi': %w", err)
		}
		delete(object, "lpi")
	}

	if raw, found := object["plmnOperatorClasses"]; found {
		err = json.Unmarshal(raw, &a.PlmnOperatorClasses)
		if err != nil {
			return fmt.Errorf("error reading 'plmnOperatorClasses': %w", err)
		}
		delete(object, "plmnOperatorClasses")
	}

	if raw, found := object["unrelatedClass"]; found {
		err = json.Unmarshal(raw, &a.UnrelatedClass)
		if err != nil {
			return fmt.Errorf("error reading 'unrelatedClass': %w", err)
		}
		delete(object, "unrelatedClass")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LcsPrivacyData to handle AdditionalProperties
func (a LcsPrivacyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Lpi != nil {
		object["lpi"], err = json.Marshal(a.Lpi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lpi': %w", err)
		}
	}

	if len(a.PlmnOperatorClasses) != 0 {
		object["plmnOperatorClasses"], err = json.Marshal(a.PlmnOperatorClasses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnOperatorClasses': %w", err)
		}
	}

	if a.UnrelatedClass != nil {
		object["unrelatedClass"], err = json.Marshal(a.UnrelatedClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unrelatedClass': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Lpi. Returns the specified
// element and whether it was found
func (a Lpi) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Lpi
func (a *Lpi) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Lpi to handle AdditionalProperties
func (a *Lpi) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["locationPrivacyInd"]; found {
		err = json.Unmarshal(raw, &a.LocationPrivacyInd)
		if err != nil {
			return fmt.Errorf("error reading 'locationPrivacyInd': %w", err)
		}
		delete(object, "locationPrivacyInd")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Lpi to handle AdditionalProperties
func (a Lpi) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["locationPrivacyInd"], err = json.Marshal(a.LocationPrivacyInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'locationPrivacyInd': %w", err)
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ModificationNotification. Returns the specified
// element and whether it was found
func (a ModificationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ModificationNotification
func (a *ModificationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ModificationNotification to handle AdditionalProperties
func (a *ModificationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["notifyItems"]; found {
		err = json.Unmarshal(raw, &a.NotifyItems)
		if err != nil {
			return fmt.Errorf("error reading 'notifyItems': %w", err)
		}
		delete(object, "notifyItems")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ModificationNotification to handle AdditionalProperties
func (a ModificationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["notifyItems"], err = json.Marshal(a.NotifyItems)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notifyItems': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NiddInformation. Returns the specified
// element and whether it was found
func (a NiddInformation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NiddInformation
func (a *NiddInformation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NiddInformation to handle AdditionalProperties
func (a *NiddInformation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afId"]; found {
		err = json.Unmarshal(raw, &a.AfId)
		if err != nil {
			return fmt.Errorf("error reading 'afId': %w", err)
		}
		delete(object, "afId")
	}

	if raw, found := object["extGroupId"]; found {
		err = json.Unmarshal(raw, &a.ExtGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'extGroupId': %w", err)
		}
		delete(object, "extGroupId")
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NiddInformation to handle AdditionalProperties
func (a NiddInformation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afId"], err = json.Marshal(a.AfId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afId': %w", err)
	}

	if len(a.ExtGroupId) != 0 {
		object["extGroupId"], err = json.Marshal(a.ExtGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'extGroupId': %w", err)
		}
	}

	if len(a.Gpsi) != 0 {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Nssai. Returns the specified
// element and whether it was found
func (a Nssai) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Nssai
func (a *Nssai) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Nssai to handle AdditionalProperties
func (a *Nssai) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["additionalSnssaiData"]; found {
		err = json.Unmarshal(raw, &a.AdditionalSnssaiData)
		if err != nil {
			return fmt.Errorf("error reading 'additionalSnssaiData': %w", err)
		}
		delete(object, "additionalSnssaiData")
	}

	if raw, found := object["defaultSingleNssais"]; found {
		err = json.Unmarshal(raw, &a.DefaultSingleNssais)
		if err != nil {
			return fmt.Errorf("error reading 'defaultSingleNssais': %w", err)
		}
		delete(object, "defaultSingleNssais")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["singleNssais"]; found {
		err = json.Unmarshal(raw, &a.SingleNssais)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssais': %w", err)
		}
		delete(object, "singleNssais")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Nssai to handle AdditionalProperties
func (a Nssai) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdditionalSnssaiData != nil {
		object["additionalSnssaiData"], err = json.Marshal(a.AdditionalSnssaiData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'additionalSnssaiData': %w", err)
		}
	}

	object["defaultSingleNssais"], err = json.Marshal(a.DefaultSingleNssais)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultSingleNssais': %w", err)
	}

	if a.ProvisioningTime != nil {
		object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
		}
	}

	if len(a.SingleNssais) != 0 {
		object["singleNssais"], err = json.Marshal(a.SingleNssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssais': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSession. Returns the specified
// element and whether it was found
func (a PduSession) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSession
func (a *PduSession) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSession to handle AdditionalProperties
func (a *PduSession) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSession to handle AdditionalProperties
func (a PduSession) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if a.SingleNssai != nil {
		object["singleNssai"], err = json.Marshal(a.SingleNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
		}
	}

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PduSessionTypes. Returns the specified
// element and whether it was found
func (a PduSessionTypes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PduSessionTypes
func (a *PduSessionTypes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PduSessionTypes to handle AdditionalProperties
func (a *PduSessionTypes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.AllowedSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSessionTypes': %w", err)
		}
		delete(object, "allowedSessionTypes")
	}

	if raw, found := object["defaultSessionType"]; found {
		err = json.Unmarshal(raw, &a.DefaultSessionType)
		if err != nil {
			return fmt.Errorf("error reading 'defaultSessionType': %w", err)
		}
		delete(object, "defaultSessionType")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PduSessionTypes to handle AdditionalProperties
func (a PduSessionTypes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedSessionTypes) != 0 {
		object["allowedSessionTypes"], err = json.Marshal(a.AllowedSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSessionTypes': %w", err)
		}
	}

	object["defaultSessionType"], err = json.Marshal(a.DefaultSessionType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultSessionType': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PgwInfo. Returns the specified
// element and whether it was found
func (a PgwInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PgwInfo
func (a *PgwInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PgwInfo to handle AdditionalProperties
func (a *PgwInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["epdgInd"]; found {
		err = json.Unmarshal(raw, &a.EpdgInd)
		if err != nil {
			return fmt.Errorf("error reading 'epdgInd': %w", err)
		}
		delete(object, "epdgInd")
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PgwInfo to handle AdditionalProperties
func (a PgwInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
	}

	if a.EpdgInd != nil {
		object["epdgInd"], err = json.Marshal(a.EpdgInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epdgInd': %w", err)
		}
	}

	object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PlmnOperatorClass. Returns the specified
// element and whether it was found
func (a PlmnOperatorClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PlmnOperatorClass
func (a *PlmnOperatorClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PlmnOperatorClass to handle AdditionalProperties
func (a *PlmnOperatorClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lcsClientClass"]; found {
		err = json.Unmarshal(raw, &a.LcsClientClass)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientClass': %w", err)
		}
		delete(object, "lcsClientClass")
	}

	if raw, found := object["lcsClientIds"]; found {
		err = json.Unmarshal(raw, &a.LcsClientIds)
		if err != nil {
			return fmt.Errorf("error reading 'lcsClientIds': %w", err)
		}
		delete(object, "lcsClientIds")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PlmnOperatorClass to handle AdditionalProperties
func (a PlmnOperatorClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["lcsClientClass"], err = json.Marshal(a.LcsClientClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsClientClass': %w", err)
	}

	object["lcsClientIds"], err = json.Marshal(a.LcsClientIds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'lcsClientIds': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PtwParameters. Returns the specified
// element and whether it was found
func (a PtwParameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PtwParameters
func (a *PtwParameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PtwParameters to handle AdditionalProperties
func (a *PtwParameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["operationMode"]; found {
		err = json.Unmarshal(raw, &a.OperationMode)
		if err != nil {
			return fmt.Errorf("error reading 'operationMode': %w", err)
		}
		delete(object, "operationMode")
	}

	if raw, found := object["ptwValue"]; found {
		err = json.Unmarshal(raw, &a.PtwValue)
		if err != nil {
			return fmt.Errorf("error reading 'ptwValue': %w", err)
		}
		delete(object, "ptwValue")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PtwParameters to handle AdditionalProperties
func (a PtwParameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["operationMode"], err = json.Marshal(a.OperationMode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'operationMode': %w", err)
	}

	object["ptwValue"], err = json.Marshal(a.PtwValue)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ptwValue': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SdmSubsModification. Returns the specified
// element and whether it was found
func (a SdmSubsModification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdmSubsModification
func (a *SdmSubsModification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdmSubsModification to handle AdditionalProperties
func (a *SdmSubsModification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["expires"]; found {
		err = json.Unmarshal(raw, &a.Expires)
		if err != nil {
			return fmt.Errorf("error reading 'expires': %w", err)
		}
		delete(object, "expires")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdmSubsModification to handle AdditionalProperties
func (a SdmSubsModification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Expires != nil {
		object["expires"], err = json.Marshal(a.Expires)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expires': %w", err)
		}
	}

	if len(a.MonitoredResourceUris) != 0 {
		object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SdmSubscription. Returns the specified
// element and whether it was found
func (a SdmSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdmSubscription
func (a *SdmSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdmSubscription to handle AdditionalProperties
func (a *SdmSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfServiceName"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceName)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceName': %w", err)
		}
		delete(object, "amfServiceName")
	}

	if raw, found := object["callbackReference"]; found {
		err = json.Unmarshal(raw, &a.CallbackReference)
		if err != nil {
			return fmt.Errorf("error reading 'callbackReference': %w", err)
		}
		delete(object, "callbackReference")
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["expires"]; found {
		err = json.Unmarshal(raw, &a.Expires)
		if err != nil {
			return fmt.Errorf("error reading 'expires': %w", err)
		}
		delete(object, "expires")
	}

	if raw, found := object["immediateReport"]; found {
		err = json.Unmarshal(raw, &a.ImmediateReport)
		if err != nil {
			return fmt.Errorf("error reading 'immediateReport': %w", err)
		}
		delete(object, "immediateReport")
	}

	if raw, found := object["implicitUnsubscribe"]; found {
		err = json.Unmarshal(raw, &a.ImplicitUnsubscribe)
		if err != nil {
			return fmt.Errorf("error reading 'implicitUnsubscribe': %w", err)
		}
		delete(object, "implicitUnsubscribe")
	}

	if raw, found := object["monitoredResourceUris"]; found {
		err = json.Unmarshal(raw, &a.MonitoredResourceUris)
		if err != nil {
			return fmt.Errorf("error reading 'monitoredResourceUris': %w", err)
		}
		delete(object, "monitoredResourceUris")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["report"]; found {
		err = json.Unmarshal(raw, &a.Report)
		if err != nil {
			return fmt.Errorf("error reading 'report': %w", err)
		}
		delete(object, "report")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["subscriptionId"]; found {
		err = json.Unmarshal(raw, &a.SubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'subscriptionId': %w", err)
		}
		delete(object, "subscriptionId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["uniqueSubscription"]; found {
		err = json.Unmarshal(raw, &a.UniqueSubscription)
		if err != nil {
			return fmt.Errorf("error reading 'uniqueSubscription': %w", err)
		}
		delete(object, "uniqueSubscription")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdmSubscription to handle AdditionalProperties
func (a SdmSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfServiceName != nil {
		object["amfServiceName"], err = json.Marshal(a.AmfServiceName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceName': %w", err)
		}
	}

	object["callbackReference"], err = json.Marshal(a.CallbackReference)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'callbackReference': %w", err)
	}

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.Expires != nil {
		object["expires"], err = json.Marshal(a.Expires)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expires': %w", err)
		}
	}

	if a.ImmediateReport != nil {
		object["immediateReport"], err = json.Marshal(a.ImmediateReport)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'immediateReport': %w", err)
		}
	}

	if a.ImplicitUnsubscribe != nil {
		object["implicitUnsubscribe"], err = json.Marshal(a.ImplicitUnsubscribe)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'implicitUnsubscribe': %w", err)
		}
	}

	object["monitoredResourceUris"], err = json.Marshal(a.MonitoredResourceUris)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'monitoredResourceUris': %w", err)
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.Report != nil {
		object["report"], err = json.Marshal(a.Report)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'report': %w", err)
		}
	}

	if a.SingleNssai != nil {
		object["singleNssai"], err = json.Marshal(a.SingleNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
		}
	}

	if a.SubscriptionId != nil {
		object["subscriptionId"], err = json.Marshal(a.SubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscriptionId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UniqueSubscription != nil {
		object["uniqueSubscription"], err = json.Marshal(a.UniqueSubscription)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uniqueSubscription': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceTypeUnrelatedClass. Returns the specified
// element and whether it was found
func (a ServiceTypeUnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceTypeUnrelatedClass
func (a *ServiceTypeUnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceTypeUnrelatedClass to handle AdditionalProperties
func (a *ServiceTypeUnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedGeographicArea"]; found {
		err = json.Unmarshal(raw, &a.AllowedGeographicArea)
		if err != nil {
			return fmt.Errorf("error reading 'allowedGeographicArea': %w", err)
		}
		delete(object, "allowedGeographicArea")
	}

	if raw, found := object["codeWordInd"]; found {
		err = json.Unmarshal(raw, &a.CodeWordInd)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordInd': %w", err)
		}
		delete(object, "codeWordInd")
	}

	if raw, found := object["codeWordList"]; found {
		err = json.Unmarshal(raw, &a.CodeWordList)
		if err != nil {
			return fmt.Errorf("error reading 'codeWordList': %w", err)
		}
		delete(object, "codeWordList")
	}

	if raw, found := object["privacyCheckRelatedAction"]; found {
		err = json.Unmarshal(raw, &a.PrivacyCheckRelatedAction)
		if err != nil {
			return fmt.Errorf("error reading 'privacyCheckRelatedAction': %w", err)
		}
		delete(object, "privacyCheckRelatedAction")
	}

	if raw, found := object["serviceType"]; found {
		err = json.Unmarshal(raw, &a.ServiceType)
		if err != nil {
			return fmt.Errorf("error reading 'serviceType': %w", err)
		}
		delete(object, "serviceType")
	}

	if raw, found := object["validTimePeriod"]; found {
		err = json.Unmarshal(raw, &a.ValidTimePeriod)
		if err != nil {
			return fmt.Errorf("error reading 'validTimePeriod': %w", err)
		}
		delete(object, "validTimePeriod")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceTypeUnrelatedClass to handle AdditionalProperties
func (a ServiceTypeUnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedGeographicArea) != 0 {
		object["allowedGeographicArea"], err = json.Marshal(a.AllowedGeographicArea)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedGeographicArea': %w", err)
		}
	}

	if a.CodeWordInd != nil {
		object["codeWordInd"], err = json.Marshal(a.CodeWordInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordInd': %w", err)
		}
	}

	if len(a.CodeWordList) != 0 {
		object["codeWordList"], err = json.Marshal(a.CodeWordList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codeWordList': %w", err)
		}
	}

	if a.PrivacyCheckRelatedAction != nil {
		object["privacyCheckRelatedAction"], err = json.Marshal(a.PrivacyCheckRelatedAction)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'privacyCheckRelatedAction': %w", err)
		}
	}

	object["serviceType"], err = json.Marshal(a.ServiceType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'serviceType': %w", err)
	}

	if a.ValidTimePeriod != nil {
		object["validTimePeriod"], err = json.Marshal(a.ValidTimePeriod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validTimePeriod': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SessionManagementSubscriptionData. Returns the specified
// element and whether it was found
func (a SessionManagementSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SessionManagementSubscriptionData
func (a *SessionManagementSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SessionManagementSubscriptionData to handle AdditionalProperties
func (a *SessionManagementSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["3gppChargingCharacteristics"]; found {
		err = json.Unmarshal(raw, &a.N3gppChargingCharacteristics)
		if err != nil {
			return fmt.Errorf("error reading '3gppChargingCharacteristics': %w", err)
		}
		delete(object, "3gppChargingCharacteristics")
	}

	if raw, found := object["dnnConfigurations"]; found {
		err = json.Unmarshal(raw, &a.DnnConfigurations)
		if err != nil {
			return fmt.Errorf("error reading 'dnnConfigurations': %w", err)
		}
		delete(object, "dnnConfigurations")
	}

	if raw, found := object["expectedUeBehavioursList"]; found {
		err = json.Unmarshal(raw, &a.ExpectedUeBehavioursList)
		if err != nil {
			return fmt.Errorf("error reading 'expectedUeBehavioursList': %w", err)
		}
		delete(object, "expectedUeBehavioursList")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["odbPacketServices"]; found {
		err = json.Unmarshal(raw, &a.OdbPacketServices)
		if err != nil {
			return fmt.Errorf("error reading 'odbPacketServices': %w", err)
		}
		delete(object, "odbPacketServices")
	}

	if raw, found := object["sharedDnnConfigurationsId"]; found {
		err = json.Unmarshal(raw, &a.SharedDnnConfigurationsId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedDnnConfigurationsId': %w", err)
		}
		delete(object, "sharedDnnConfigurationsId")
	}

	if raw, found := object["sharedTraceDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedTraceDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedTraceDataId': %w", err)
		}
		delete(object, "sharedTraceDataId")
	}

	if raw, found := object["sharedVnGroupDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedVnGroupDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedVnGroupDataIds': %w", err)
		}
		delete(object, "sharedVnGroupDataIds")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["suggestedPacketNumDlList"]; found {
		err = json.Unmarshal(raw, &a.SuggestedPacketNumDlList)
		if err != nil {
			return fmt.Errorf("error reading 'suggestedPacketNumDlList': %w", err)
		}
		delete(object, "suggestedPacketNumDlList")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SessionManagementSubscriptionData to handle AdditionalProperties
func (a SessionManagementSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.N3gppChargingCharacteristics != nil {
		object["3gppChargingCharacteristics"], err = json.Marshal(a.N3gppChargingCharacteristics)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '3gppChargingCharacteristics': %w", err)
		}
	}

	if a.DnnConfigurations != nil {
		object["dnnConfigurations"], err = json.Marshal(a.DnnConfigurations)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnnConfigurations': %w", err)
		}
	}

	if a.ExpectedUeBehavioursList != nil {
		object["expectedUeBehavioursList"], err = json.Marshal(a.ExpectedUeBehavioursList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expectedUeBehavioursList': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	if a.OdbPacketServices != nil {
		object["odbPacketServices"], err = json.Marshal(a.OdbPacketServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'odbPacketServices': %w", err)
		}
	}

	if len(a.SharedDnnConfigurationsId) != 0 {
		object["sharedDnnConfigurationsId"], err = json.Marshal(a.SharedDnnConfigurationsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedDnnConfigurationsId': %w", err)
		}
	}

	if len(a.SharedTraceDataId) != 0 {
		object["sharedTraceDataId"], err = json.Marshal(a.SharedTraceDataId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedTraceDataId': %w", err)
		}
	}

	if a.SharedVnGroupDataIds != nil {
		object["sharedVnGroupDataIds"], err = json.Marshal(a.SharedVnGroupDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedVnGroupDataIds': %w", err)
		}
	}

	object["singleNssai"], err = json.Marshal(a.SingleNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
	}

	if a.SuggestedPacketNumDlList != nil {
		object["suggestedPacketNumDlList"], err = json.Marshal(a.SuggestedPacketNumDlList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suggestedPacketNumDlList': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SharedData. Returns the specified
// element and whether it was found
func (a SharedData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SharedData
func (a *SharedData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SharedData to handle AdditionalProperties
func (a *SharedData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedAmData"]; found {
		err = json.Unmarshal(raw, &a.SharedAmData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedAmData': %w", err)
		}
		delete(object, "sharedAmData")
	}

	if raw, found := object["sharedDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedDataId': %w", err)
		}
		delete(object, "sharedDataId")
	}

	if raw, found := object["sharedDnnConfigurations"]; found {
		err = json.Unmarshal(raw, &a.SharedDnnConfigurations)
		if err != nil {
			return fmt.Errorf("error reading 'sharedDnnConfigurations': %w", err)
		}
		delete(object, "sharedDnnConfigurations")
	}

	if raw, found := object["sharedSmsMngSubsData"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsMngSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsMngSubsData': %w", err)
		}
		delete(object, "sharedSmsMngSubsData")
	}

	if raw, found := object["sharedSmsSubsData"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsSubsData': %w", err)
		}
		delete(object, "sharedSmsSubsData")
	}

	if raw, found := object["sharedSnssaiInfos"]; found {
		err = json.Unmarshal(raw, &a.SharedSnssaiInfos)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSnssaiInfos': %w", err)
		}
		delete(object, "sharedSnssaiInfos")
	}

	if raw, found := object["sharedTraceData"]; found {
		err = json.Unmarshal(raw, &a.SharedTraceData)
		if err != nil {
			return fmt.Errorf("error reading 'sharedTraceData': %w", err)
		}
		delete(object, "sharedTraceData")
	}

	if raw, found := object["sharedVnGroupDatas"]; found {
		err = json.Unmarshal(raw, &a.SharedVnGroupDatas)
		if err != nil {
			return fmt.Errorf("error reading 'sharedVnGroupDatas': %w", err)
		}
		delete(object, "sharedVnGroupDatas")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SharedData to handle AdditionalProperties
func (a SharedData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SharedAmData != nil {
		object["sharedAmData"], err = json.Marshal(a.SharedAmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedAmData': %w", err)
		}
	}

	object["sharedDataId"], err = json.Marshal(a.SharedDataId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharedDataId': %w", err)
	}

	if a.SharedDnnConfigurations != nil {
		object["sharedDnnConfigurations"], err = json.Marshal(a.SharedDnnConfigurations)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedDnnConfigurations': %w", err)
		}
	}

	if a.SharedSmsMngSubsData != nil {
		object["sharedSmsMngSubsData"], err = json.Marshal(a.SharedSmsMngSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsMngSubsData': %w", err)
		}
	}

	if a.SharedSmsSubsData != nil {
		object["sharedSmsSubsData"], err = json.Marshal(a.SharedSmsSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsSubsData': %w", err)
		}
	}

	if a.SharedSnssaiInfos != nil {
		object["sharedSnssaiInfos"], err = json.Marshal(a.SharedSnssaiInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSnssaiInfos': %w", err)
		}
	}

	object["sharedTraceData"], err = json.Marshal(a.SharedTraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'sharedTraceData': %w", err)
	}

	if a.SharedVnGroupDatas != nil {
		object["sharedVnGroupDatas"], err = json.Marshal(a.SharedVnGroupDatas)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedVnGroupDatas': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfSelectionSubscriptionData. Returns the specified
// element and whether it was found
func (a SmfSelectionSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfSelectionSubscriptionData
func (a *SmfSelectionSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfSelectionSubscriptionData to handle AdditionalProperties
func (a *SmfSelectionSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedSnssaiInfosId"]; found {
		err = json.Unmarshal(raw, &a.SharedSnssaiInfosId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSnssaiInfosId': %w", err)
		}
		delete(object, "sharedSnssaiInfosId")
	}

	if raw, found := object["subscribedSnssaiInfos"]; found {
		err = json.Unmarshal(raw, &a.SubscribedSnssaiInfos)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedSnssaiInfos': %w", err)
		}
		delete(object, "subscribedSnssaiInfos")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfSelectionSubscriptionData to handle AdditionalProperties
func (a SmfSelectionSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SharedSnssaiInfosId) != 0 {
		object["sharedSnssaiInfosId"], err = json.Marshal(a.SharedSnssaiInfosId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSnssaiInfosId': %w", err)
		}
	}

	if a.SubscribedSnssaiInfos != nil {
		object["subscribedSnssaiInfos"], err = json.Marshal(a.SubscribedSnssaiInfos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedSnssaiInfos': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsManagementSubscriptionData. Returns the specified
// element and whether it was found
func (a SmsManagementSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsManagementSubscriptionData
func (a *SmsManagementSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsManagementSubscriptionData to handle AdditionalProperties
func (a *SmsManagementSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["moSmsBarringAll"]; found {
		err = json.Unmarshal(raw, &a.MoSmsBarringAll)
		if err != nil {
			return fmt.Errorf("error reading 'moSmsBarringAll': %w", err)
		}
		delete(object, "moSmsBarringAll")
	}

	if raw, found := object["moSmsBarringRoaming"]; found {
		err = json.Unmarshal(raw, &a.MoSmsBarringRoaming)
		if err != nil {
			return fmt.Errorf("error reading 'moSmsBarringRoaming': %w", err)
		}
		delete(object, "moSmsBarringRoaming")
	}

	if raw, found := object["moSmsSubscribed"]; found {
		err = json.Unmarshal(raw, &a.MoSmsSubscribed)
		if err != nil {
			return fmt.Errorf("error reading 'moSmsSubscribed': %w", err)
		}
		delete(object, "moSmsSubscribed")
	}

	if raw, found := object["mtSmsBarringAll"]; found {
		err = json.Unmarshal(raw, &a.MtSmsBarringAll)
		if err != nil {
			return fmt.Errorf("error reading 'mtSmsBarringAll': %w", err)
		}
		delete(object, "mtSmsBarringAll")
	}

	if raw, found := object["mtSmsBarringRoaming"]; found {
		err = json.Unmarshal(raw, &a.MtSmsBarringRoaming)
		if err != nil {
			return fmt.Errorf("error reading 'mtSmsBarringRoaming': %w", err)
		}
		delete(object, "mtSmsBarringRoaming")
	}

	if raw, found := object["mtSmsSubscribed"]; found {
		err = json.Unmarshal(raw, &a.MtSmsSubscribed)
		if err != nil {
			return fmt.Errorf("error reading 'mtSmsSubscribed': %w", err)
		}
		delete(object, "mtSmsSubscribed")
	}

	if raw, found := object["sharedSmsMngDataIds"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsMngDataIds)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsMngDataIds': %w", err)
		}
		delete(object, "sharedSmsMngDataIds")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsManagementSubscriptionData to handle AdditionalProperties
func (a SmsManagementSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.MoSmsBarringAll != nil {
		object["moSmsBarringAll"], err = json.Marshal(a.MoSmsBarringAll)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moSmsBarringAll': %w", err)
		}
	}

	if a.MoSmsBarringRoaming != nil {
		object["moSmsBarringRoaming"], err = json.Marshal(a.MoSmsBarringRoaming)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moSmsBarringRoaming': %w", err)
		}
	}

	if a.MoSmsSubscribed != nil {
		object["moSmsSubscribed"], err = json.Marshal(a.MoSmsSubscribed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'moSmsSubscribed': %w", err)
		}
	}

	if a.MtSmsBarringAll != nil {
		object["mtSmsBarringAll"], err = json.Marshal(a.MtSmsBarringAll)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtSmsBarringAll': %w", err)
		}
	}

	if a.MtSmsBarringRoaming != nil {
		object["mtSmsBarringRoaming"], err = json.Marshal(a.MtSmsBarringRoaming)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtSmsBarringRoaming': %w", err)
		}
	}

	if a.MtSmsSubscribed != nil {
		object["mtSmsSubscribed"], err = json.Marshal(a.MtSmsSubscribed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mtSmsSubscribed': %w", err)
		}
	}

	if len(a.SharedSmsMngDataIds) != 0 {
		object["sharedSmsMngDataIds"], err = json.Marshal(a.SharedSmsMngDataIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsMngDataIds': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsSubscriptionData. Returns the specified
// element and whether it was found
func (a SmsSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsSubscriptionData
func (a *SmsSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsSubscriptionData to handle AdditionalProperties
func (a *SmsSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedSmsSubsDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedSmsSubsDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedSmsSubsDataId': %w", err)
		}
		delete(object, "sharedSmsSubsDataId")
	}

	if raw, found := object["smsSubscribed"]; found {
		err = json.Unmarshal(raw, &a.SmsSubscribed)
		if err != nil {
			return fmt.Errorf("error reading 'smsSubscribed': %w", err)
		}
		delete(object, "smsSubscribed")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsSubscriptionData to handle AdditionalProperties
func (a SmsSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SharedSmsSubsDataId) != 0 {
		object["sharedSmsSubsDataId"], err = json.Marshal(a.SharedSmsSubsDataId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedSmsSubsDataId': %w", err)
		}
	}

	if a.SmsSubscribed != nil {
		object["smsSubscribed"], err = json.Marshal(a.SmsSubscribed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsSubscribed': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsfInfo. Returns the specified
// element and whether it was found
func (a SmsfInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsfInfo
func (a *SmsfInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsfInfo to handle AdditionalProperties
func (a *SmsfInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["smsfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmsfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInstanceId': %w", err)
		}
		delete(object, "smsfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsfInfo to handle AdditionalProperties
func (a SmsfInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	object["smsfInstanceId"], err = json.Marshal(a.SmsfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smsfInstanceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnssaiInfo. Returns the specified
// element and whether it was found
func (a SnssaiInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnssaiInfo
func (a *SnssaiInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnssaiInfo to handle AdditionalProperties
func (a *SnssaiInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnnInfos"]; found {
		err = json.Unmarshal(raw, &a.DnnInfos)
		if err != nil {
			return fmt.Errorf("error reading 'dnnInfos': %w", err)
		}
		delete(object, "dnnInfos")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnssaiInfo to handle AdditionalProperties
func (a SnssaiInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["dnnInfos"], err = json.Marshal(a.DnnInfos)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dnnInfos': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SorInfo. Returns the specified
// element and whether it was found
func (a SorInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SorInfo
func (a *SorInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SorInfo to handle AdditionalProperties
func (a *SorInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ackInd"]; found {
		err = json.Unmarshal(raw, &a.AckInd)
		if err != nil {
			return fmt.Errorf("error reading 'ackInd': %w", err)
		}
		delete(object, "ackInd")
	}

	if raw, found := object["countersor"]; found {
		err = json.Unmarshal(raw, &a.Countersor)
		if err != nil {
			return fmt.Errorf("error reading 'countersor': %w", err)
		}
		delete(object, "countersor")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["sorMacIausf"]; found {
		err = json.Unmarshal(raw, &a.SorMacIausf)
		if err != nil {
			return fmt.Errorf("error reading 'sorMacIausf': %w", err)
		}
		delete(object, "sorMacIausf")
	}

	if raw, found := object["steeringContainer"]; found {
		err = json.Unmarshal(raw, &a.SteeringContainer)
		if err != nil {
			return fmt.Errorf("error reading 'steeringContainer': %w", err)
		}
		delete(object, "steeringContainer")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SorInfo to handle AdditionalProperties
func (a SorInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ackInd"], err = json.Marshal(a.AckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ackInd': %w", err)
	}

	if len(a.Countersor) != 0 {
		object["countersor"], err = json.Marshal(a.Countersor)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'countersor': %w", err)
		}
	}

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	if len(a.SorMacIausf) != 0 {
		object["sorMacIausf"], err = json.Marshal(a.SorMacIausf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sorMacIausf': %w", err)
		}
	}

	if a.SteeringContainer != nil {
		object["steeringContainer"], err = json.Marshal(a.SteeringContainer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'steeringContainer': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SorUpdateInfo. Returns the specified
// element and whether it was found
func (a SorUpdateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SorUpdateInfo
func (a *SorUpdateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SorUpdateInfo to handle AdditionalProperties
func (a *SorUpdateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["vplmnId"]; found {
		err = json.Unmarshal(raw, &a.VplmnId)
		if err != nil {
			return fmt.Errorf("error reading 'vplmnId': %w", err)
		}
		delete(object, "vplmnId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SorUpdateInfo to handle AdditionalProperties
func (a SorUpdateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["vplmnId"], err = json.Marshal(a.VplmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'vplmnId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SscModes. Returns the specified
// element and whether it was found
func (a SscModes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SscModes
func (a *SscModes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SscModes to handle AdditionalProperties
func (a *SscModes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["allowedSscModes"]; found {
		err = json.Unmarshal(raw, &a.AllowedSscModes)
		if err != nil {
			return fmt.Errorf("error reading 'allowedSscModes': %w", err)
		}
		delete(object, "allowedSscModes")
	}

	if raw, found := object["defaultSscMode"]; found {
		err = json.Unmarshal(raw, &a.DefaultSscMode)
		if err != nil {
			return fmt.Errorf("error reading 'defaultSscMode': %w", err)
		}
		delete(object, "defaultSscMode")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SscModes to handle AdditionalProperties
func (a SscModes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AllowedSscModes) != 0 {
		object["allowedSscModes"], err = json.Marshal(a.AllowedSscModes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'allowedSscModes': %w", err)
		}
	}

	object["defaultSscMode"], err = json.Marshal(a.DefaultSscMode)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultSscMode': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SubscriptionDataSets. Returns the specified
// element and whether it was found
func (a SubscriptionDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SubscriptionDataSets
func (a *SubscriptionDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SubscriptionDataSets to handle AdditionalProperties
func (a *SubscriptionDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amData"]; found {
		err = json.Unmarshal(raw, &a.AmData)
		if err != nil {
			return fmt.Errorf("error reading 'amData': %w", err)
		}
		delete(object, "amData")
	}

	if raw, found := object["lcsBroadcastAssistanceTypesData"]; found {
		err = json.Unmarshal(raw, &a.LcsBroadcastAssistanceTypesData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsBroadcastAssistanceTypesData': %w", err)
		}
		delete(object, "lcsBroadcastAssistanceTypesData")
	}

	if raw, found := object["lcsMoData"]; found {
		err = json.Unmarshal(raw, &a.LcsMoData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsMoData': %w", err)
		}
		delete(object, "lcsMoData")
	}

	if raw, found := object["lcsPrivacyData"]; found {
		err = json.Unmarshal(raw, &a.LcsPrivacyData)
		if err != nil {
			return fmt.Errorf("error reading 'lcsPrivacyData': %w", err)
		}
		delete(object, "lcsPrivacyData")
	}

	if raw, found := object["smData"]; found {
		err = json.Unmarshal(raw, &a.SmData)
		if err != nil {
			return fmt.Errorf("error reading 'smData': %w", err)
		}
		delete(object, "smData")
	}

	if raw, found := object["smfSelData"]; found {
		err = json.Unmarshal(raw, &a.SmfSelData)
		if err != nil {
			return fmt.Errorf("error reading 'smfSelData': %w", err)
		}
		delete(object, "smfSelData")
	}

	if raw, found := object["smsMngData"]; found {
		err = json.Unmarshal(raw, &a.SmsMngData)
		if err != nil {
			return fmt.Errorf("error reading 'smsMngData': %w", err)
		}
		delete(object, "smsMngData")
	}

	if raw, found := object["smsSubsData"]; found {
		err = json.Unmarshal(raw, &a.SmsSubsData)
		if err != nil {
			return fmt.Errorf("error reading 'smsSubsData': %w", err)
		}
		delete(object, "smsSubsData")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if raw, found := object["uecAmfData"]; found {
		err = json.Unmarshal(raw, &a.UecAmfData)
		if err != nil {
			return fmt.Errorf("error reading 'uecAmfData': %w", err)
		}
		delete(object, "uecAmfData")
	}

	if raw, found := object["uecSmfData"]; found {
		err = json.Unmarshal(raw, &a.UecSmfData)
		if err != nil {
			return fmt.Errorf("error reading 'uecSmfData': %w", err)
		}
		delete(object, "uecSmfData")
	}

	if raw, found := object["uecSmsfData"]; found {
		err = json.Unmarshal(raw, &a.UecSmsfData)
		if err != nil {
			return fmt.Errorf("error reading 'uecSmsfData': %w", err)
		}
		delete(object, "uecSmsfData")
	}

	if raw, found := object["v2xData"]; found {
		err = json.Unmarshal(raw, &a.V2xData)
		if err != nil {
			return fmt.Errorf("error reading 'v2xData': %w", err)
		}
		delete(object, "v2xData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SubscriptionDataSets to handle AdditionalProperties
func (a SubscriptionDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmData != nil {
		object["amData"], err = json.Marshal(a.AmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amData': %w", err)
		}
	}

	if a.LcsBroadcastAssistanceTypesData != nil {
		object["lcsBroadcastAssistanceTypesData"], err = json.Marshal(a.LcsBroadcastAssistanceTypesData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsBroadcastAssistanceTypesData': %w", err)
		}
	}

	if a.LcsMoData != nil {
		object["lcsMoData"], err = json.Marshal(a.LcsMoData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsMoData': %w", err)
		}
	}

	if a.LcsPrivacyData != nil {
		object["lcsPrivacyData"], err = json.Marshal(a.LcsPrivacyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lcsPrivacyData': %w", err)
		}
	}

	if len(a.SmData) != 0 {
		object["smData"], err = json.Marshal(a.SmData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smData': %w", err)
		}
	}

	if a.SmfSelData != nil {
		object["smfSelData"], err = json.Marshal(a.SmfSelData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfSelData': %w", err)
		}
	}

	if a.SmsMngData != nil {
		object["smsMngData"], err = json.Marshal(a.SmsMngData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsMngData': %w", err)
		}
	}

	if a.SmsSubsData != nil {
		object["smsSubsData"], err = json.Marshal(a.SmsSubsData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsSubsData': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	if a.UecAmfData != nil {
		object["uecAmfData"], err = json.Marshal(a.UecAmfData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uecAmfData': %w", err)
		}
	}

	if a.UecSmfData != nil {
		object["uecSmfData"], err = json.Marshal(a.UecSmfData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uecSmfData': %w", err)
		}
	}

	if a.UecSmsfData != nil {
		object["uecSmsfData"], err = json.Marshal(a.UecSmsfData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uecSmsfData': %w", err)
		}
	}

	if a.V2xData != nil {
		object["v2xData"], err = json.Marshal(a.V2xData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'v2xData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SuggestedPacketNumDl. Returns the specified
// element and whether it was found
func (a SuggestedPacketNumDl) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SuggestedPacketNumDl
func (a *SuggestedPacketNumDl) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SuggestedPacketNumDl to handle AdditionalProperties
func (a *SuggestedPacketNumDl) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["suggestedPacketNumDl"]; found {
		err = json.Unmarshal(raw, &a.SuggestedPacketNumDl)
		if err != nil {
			return fmt.Errorf("error reading 'suggestedPacketNumDl': %w", err)
		}
		delete(object, "suggestedPacketNumDl")
	}

	if raw, found := object["validityTime"]; found {
		err = json.Unmarshal(raw, &a.ValidityTime)
		if err != nil {
			return fmt.Errorf("error reading 'validityTime': %w", err)
		}
		delete(object, "validityTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SuggestedPacketNumDl to handle AdditionalProperties
func (a SuggestedPacketNumDl) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["suggestedPacketNumDl"], err = json.Marshal(a.SuggestedPacketNumDl)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'suggestedPacketNumDl': %w", err)
	}

	if a.ValidityTime != nil {
		object["validityTime"], err = json.Marshal(a.ValidityTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validityTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TraceDataResponse. Returns the specified
// element and whether it was found
func (a TraceDataResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TraceDataResponse
func (a *TraceDataResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TraceDataResponse to handle AdditionalProperties
func (a *TraceDataResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sharedTraceDataId"]; found {
		err = json.Unmarshal(raw, &a.SharedTraceDataId)
		if err != nil {
			return fmt.Errorf("error reading 'sharedTraceDataId': %w", err)
		}
		delete(object, "sharedTraceDataId")
	}

	if raw, found := object["traceData"]; found {
		err = json.Unmarshal(raw, &a.TraceData)
		if err != nil {
			return fmt.Errorf("error reading 'traceData': %w", err)
		}
		delete(object, "traceData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TraceDataResponse to handle AdditionalProperties
func (a TraceDataResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.SharedTraceDataId) != 0 {
		object["sharedTraceDataId"], err = json.Marshal(a.SharedTraceDataId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sharedTraceDataId': %w", err)
		}
	}

	object["traceData"], err = json.Marshal(a.TraceData)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'traceData': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInAmfData. Returns the specified
// element and whether it was found
func (a UeContextInAmfData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInAmfData
func (a *UeContextInAmfData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInAmfData to handle AdditionalProperties
func (a *UeContextInAmfData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["epsInterworkingInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInfo': %w", err)
		}
		delete(object, "epsInterworkingInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInAmfData to handle AdditionalProperties
func (a UeContextInAmfData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EpsInterworkingInfo != nil {
		object["epsInterworkingInfo"], err = json.Marshal(a.EpsInterworkingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInSmfData. Returns the specified
// element and whether it was found
func (a UeContextInSmfData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInSmfData
func (a *UeContextInSmfData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInSmfData to handle AdditionalProperties
func (a *UeContextInSmfData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["emergencyInfo"]; found {
		err = json.Unmarshal(raw, &a.EmergencyInfo)
		if err != nil {
			return fmt.Errorf("error reading 'emergencyInfo': %w", err)
		}
		delete(object, "emergencyInfo")
	}

	if raw, found := object["pduSessions"]; found {
		err = json.Unmarshal(raw, &a.PduSessions)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessions': %w", err)
		}
		delete(object, "pduSessions")
	}

	if raw, found := object["pgwInfo"]; found {
		err = json.Unmarshal(raw, &a.PgwInfo)
		if err != nil {
			return fmt.Errorf("error reading 'pgwInfo': %w", err)
		}
		delete(object, "pgwInfo")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInSmfData to handle AdditionalProperties
func (a UeContextInSmfData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EmergencyInfo != nil {
		object["emergencyInfo"], err = json.Marshal(a.EmergencyInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'emergencyInfo': %w", err)
		}
	}

	if a.PduSessions != nil {
		object["pduSessions"], err = json.Marshal(a.PduSessions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessions': %w", err)
		}
	}

	if len(a.PgwInfo) != 0 {
		object["pgwInfo"], err = json.Marshal(a.PgwInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwInfo': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeContextInSmsfData. Returns the specified
// element and whether it was found
func (a UeContextInSmsfData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeContextInSmsfData
func (a *UeContextInSmsfData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeContextInSmsfData to handle AdditionalProperties
func (a *UeContextInSmsfData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smsfInfo3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.SmsfInfo3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInfo3GppAccess': %w", err)
		}
		delete(object, "smsfInfo3GppAccess")
	}

	if raw, found := object["smsfInfoNon3GppAccess"]; found {
		err = json.Unmarshal(raw, &a.SmsfInfoNon3GppAccess)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInfoNon3GppAccess': %w", err)
		}
		delete(object, "smsfInfoNon3GppAccess")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeContextInSmsfData to handle AdditionalProperties
func (a UeContextInSmsfData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.SmsfInfo3GppAccess != nil {
		object["smsfInfo3GppAccess"], err = json.Marshal(a.SmsfInfo3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfInfo3GppAccess': %w", err)
		}
	}

	if a.SmsfInfoNon3GppAccess != nil {
		object["smsfInfoNon3GppAccess"], err = json.Marshal(a.SmsfInfoNon3GppAccess)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfInfoNon3GppAccess': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UeId. Returns the specified
// element and whether it was found
func (a UeId) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UeId
func (a *UeId) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UeId to handle AdditionalProperties
func (a *UeId) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsiList"]; found {
		err = json.Unmarshal(raw, &a.GpsiList)
		if err != nil {
			return fmt.Errorf("error reading 'gpsiList': %w", err)
		}
		delete(object, "gpsiList")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UeId to handle AdditionalProperties
func (a UeId) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.GpsiList) != 0 {
		object["gpsiList"], err = json.Marshal(a.GpsiList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsiList': %w", err)
		}
	}

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UnrelatedClass. Returns the specified
// element and whether it was found
func (a UnrelatedClass) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UnrelatedClass
func (a *UnrelatedClass) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UnrelatedClass to handle AdditionalProperties
func (a *UnrelatedClass) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["defaultUnrelatedClass"]; found {
		err = json.Unmarshal(raw, &a.DefaultUnrelatedClass)
		if err != nil {
			return fmt.Errorf("error reading 'defaultUnrelatedClass': %w", err)
		}
		delete(object, "defaultUnrelatedClass")
	}

	if raw, found := object["externalUnrelatedClass"]; found {
		err = json.Unmarshal(raw, &a.ExternalUnrelatedClass)
		if err != nil {
			return fmt.Errorf("error reading 'externalUnrelatedClass': %w", err)
		}
		delete(object, "externalUnrelatedClass")
	}

	if raw, found := object["serviceTypeUnrelatedClasses"]; found {
		err = json.Unmarshal(raw, &a.ServiceTypeUnrelatedClasses)
		if err != nil {
			return fmt.Errorf("error reading 'serviceTypeUnrelatedClasses': %w", err)
		}
		delete(object, "serviceTypeUnrelatedClasses")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UnrelatedClass to handle AdditionalProperties
func (a UnrelatedClass) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["defaultUnrelatedClass"], err = json.Marshal(a.DefaultUnrelatedClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'defaultUnrelatedClass': %w", err)
	}

	if a.ExternalUnrelatedClass != nil {
		object["externalUnrelatedClass"], err = json.Marshal(a.ExternalUnrelatedClass)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'externalUnrelatedClass': %w", err)
		}
	}

	if len(a.ServiceTypeUnrelatedClasses) != 0 {
		object["serviceTypeUnrelatedClasses"], err = json.Marshal(a.ServiceTypeUnrelatedClasses)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceTypeUnrelatedClasses': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpuInfo. Returns the specified
// element and whether it was found
func (a UpuInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpuInfo
func (a *UpuInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpuInfo to handle AdditionalProperties
func (a *UpuInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["counterUpu"]; found {
		err = json.Unmarshal(raw, &a.CounterUpu)
		if err != nil {
			return fmt.Errorf("error reading 'counterUpu': %w", err)
		}
		delete(object, "counterUpu")
	}

	if raw, found := object["provisioningTime"]; found {
		err = json.Unmarshal(raw, &a.ProvisioningTime)
		if err != nil {
			return fmt.Errorf("error reading 'provisioningTime': %w", err)
		}
		delete(object, "provisioningTime")
	}

	if raw, found := object["upuAckInd"]; found {
		err = json.Unmarshal(raw, &a.UpuAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'upuAckInd': %w", err)
		}
		delete(object, "upuAckInd")
	}

	if raw, found := object["upuDataList"]; found {
		err = json.Unmarshal(raw, &a.UpuDataList)
		if err != nil {
			return fmt.Errorf("error reading 'upuDataList': %w", err)
		}
		delete(object, "upuDataList")
	}

	if raw, found := object["upuMacIausf"]; found {
		err = json.Unmarshal(raw, &a.UpuMacIausf)
		if err != nil {
			return fmt.Errorf("error reading 'upuMacIausf': %w", err)
		}
		delete(object, "upuMacIausf")
	}

	if raw, found := object["upuRegInd"]; found {
		err = json.Unmarshal(raw, &a.UpuRegInd)
		if err != nil {
			return fmt.Errorf("error reading 'upuRegInd': %w", err)
		}
		delete(object, "upuRegInd")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpuInfo to handle AdditionalProperties
func (a UpuInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.CounterUpu) != 0 {
		object["counterUpu"], err = json.Marshal(a.CounterUpu)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'counterUpu': %w", err)
		}
	}

	object["provisioningTime"], err = json.Marshal(a.ProvisioningTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'provisioningTime': %w", err)
	}

	object["upuAckInd"], err = json.Marshal(a.UpuAckInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuAckInd': %w", err)
	}

	object["upuDataList"], err = json.Marshal(a.UpuDataList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuDataList': %w", err)
	}

	if len(a.UpuMacIausf) != 0 {
		object["upuMacIausf"], err = json.Marshal(a.UpuMacIausf)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upuMacIausf': %w", err)
		}
	}

	object["upuRegInd"], err = json.Marshal(a.UpuRegInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'upuRegInd': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for V2xSubscriptionData. Returns the specified
// element and whether it was found
func (a V2xSubscriptionData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for V2xSubscriptionData
func (a *V2xSubscriptionData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for V2xSubscriptionData to handle AdditionalProperties
func (a *V2xSubscriptionData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ltePc5Ambr"]; found {
		err = json.Unmarshal(raw, &a.LtePc5Ambr)
		if err != nil {
			return fmt.Errorf("error reading 'ltePc5Ambr': %w", err)
		}
		delete(object, "ltePc5Ambr")
	}

	if raw, found := object["lteV2xServicesAuth"]; found {
		err = json.Unmarshal(raw, &a.LteV2xServicesAuth)
		if err != nil {
			return fmt.Errorf("error reading 'lteV2xServicesAuth': %w", err)
		}
		delete(object, "lteV2xServicesAuth")
	}

	if raw, found := object["nrUePc5Ambr"]; found {
		err = json.Unmarshal(raw, &a.NrUePc5Ambr)
		if err != nil {
			return fmt.Errorf("error reading 'nrUePc5Ambr': %w", err)
		}
		delete(object, "nrUePc5Ambr")
	}

	if raw, found := object["nrV2xServicesAuth"]; found {
		err = json.Unmarshal(raw, &a.NrV2xServicesAuth)
		if err != nil {
			return fmt.Errorf("error reading 'nrV2xServicesAuth': %w", err)
		}
		delete(object, "nrV2xServicesAuth")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for V2xSubscriptionData to handle AdditionalProperties
func (a V2xSubscriptionData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.LtePc5Ambr) != 0 {
		object["ltePc5Ambr"], err = json.Marshal(a.LtePc5Ambr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ltePc5Ambr': %w", err)
		}
	}

	if a.LteV2xServicesAuth != nil {
		object["lteV2xServicesAuth"], err = json.Marshal(a.LteV2xServicesAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lteV2xServicesAuth': %w", err)
		}
	}

	if len(a.NrUePc5Ambr) != 0 {
		object["nrUePc5Ambr"], err = json.Marshal(a.NrUePc5Ambr)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrUePc5Ambr': %w", err)
		}
	}

	if a.NrV2xServicesAuth != nil {
		object["nrV2xServicesAuth"], err = json.Marshal(a.NrV2xServicesAuth)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nrV2xServicesAuth': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ValidTimePeriod. Returns the specified
// element and whether it was found
func (a ValidTimePeriod) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ValidTimePeriod
func (a *ValidTimePeriod) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ValidTimePeriod to handle AdditionalProperties
func (a *ValidTimePeriod) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["endTime"]; found {
		err = json.Unmarshal(raw, &a.EndTime)
		if err != nil {
			return fmt.Errorf("error reading 'endTime': %w", err)
		}
		delete(object, "endTime")
	}

	if raw, found := object["startTime"]; found {
		err = json.Unmarshal(raw, &a.StartTime)
		if err != nil {
			return fmt.Errorf("error reading 'startTime': %w", err)
		}
		delete(object, "startTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ValidTimePeriod to handle AdditionalProperties
func (a ValidTimePeriod) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EndTime != nil {
		object["endTime"], err = json.Marshal(a.EndTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endTime': %w", err)
		}
	}

	if a.StartTime != nil {
		object["startTime"], err = json.Marshal(a.StartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'startTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VnGroupData. Returns the specified
// element and whether it was found
func (a VnGroupData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VnGroupData
func (a *VnGroupData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VnGroupData to handle AdditionalProperties
func (a *VnGroupData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appDescriptors"]; found {
		err = json.Unmarshal(raw, &a.AppDescriptors)
		if err != nil {
			return fmt.Errorf("error reading 'appDescriptors': %w", err)
		}
		delete(object, "appDescriptors")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["pduSessionTypes"]; found {
		err = json.Unmarshal(raw, &a.PduSessionTypes)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionTypes': %w", err)
		}
		delete(object, "pduSessionTypes")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VnGroupData to handle AdditionalProperties
func (a VnGroupData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AppDescriptors) != 0 {
		object["appDescriptors"], err = json.Marshal(a.AppDescriptors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appDescriptors': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.PduSessionTypes != nil {
		object["pduSessionTypes"], err = json.Marshal(a.PduSessionTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionTypes': %w", err)
		}
	}

	if a.SingleNssai != nil {
		object["singleNssai"], err = json.Marshal(a.SingleNssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsSteeringContainer0 returns the union data inside the SteeringContainer as a SteeringContainer0
func (t SteeringContainer) AsSteeringContainer0() (SteeringContainer0, error) {
	var body SteeringContainer0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSteeringContainer0 overwrites any union data inside the SteeringContainer as the provided SteeringContainer0
func (t *SteeringContainer) FromSteeringContainer0(v SteeringContainer0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSteeringContainer0 performs a merge with any union data inside the SteeringContainer, using the provided SteeringContainer0
func (t *SteeringContainer) MergeSteeringContainer0(v SteeringContainer0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSecuredPacket returns the union data inside the SteeringContainer as a SecuredPacket
func (t SteeringContainer) AsSecuredPacket() (SecuredPacket, error) {
	var body SecuredPacket
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecuredPacket overwrites any union data inside the SteeringContainer as the provided SecuredPacket
func (t *SteeringContainer) FromSecuredPacket(v SecuredPacket) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecuredPacket performs a merge with any union data inside the SteeringContainer, using the provided SecuredPacket
func (t *SteeringContainer) MergeSecuredPacket(v SecuredPacket) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SteeringContainer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SteeringContainer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGroupIdentifiers request
	GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedData request
	GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeToSharedDataWithBody request with any body
	SubscribeToSharedDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscribeToSharedData(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnsubscribeForSharedData request
	UnsubscribeForSharedData(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifySharedDataSubsWithBody request with any body
	ModifySharedDataSubsWithBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifySharedDataSubsWithApplicationMergePatchPlusJSONBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividualSharedData request
	GetIndividualSharedData(ctx context.Context, sharedDataId SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataSets request
	GetDataSets(ctx context.Context, supi externalRef2.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAmData request
	GetAmData(ctx context.Context, supi externalRef2.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CAGAckWithBody request with any body
	CAGAckWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CAGAck(ctx context.Context, supi externalRef2.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEcrData request
	GetEcrData(ctx context.Context, supi externalRef2.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SorAckInfoWithBody request with any body
	SorAckInfoWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SorAckInfo(ctx context.Context, supi externalRef2.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SNSSAIsAckWithBody request with any body
	SNSSAIsAckWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SNSSAIsAck(ctx context.Context, supi externalRef2.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSORInfoWithBody request with any body
	UpdateSORInfoWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSORInfo(ctx context.Context, supi externalRef2.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpuAckWithBody request with any body
	UpuAckWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpuAck(ctx context.Context, supi externalRef2.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLcsBcaData request
	GetLcsBcaData(ctx context.Context, supi externalRef2.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLcsMoData request
	GetLcsMoData(ctx context.Context, supi externalRef2.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNSSAI request
	GetNSSAI(ctx context.Context, supi externalRef2.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmData request
	GetSmData(ctx context.Context, supi externalRef2.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmfSelData request
	GetSmfSelData(ctx context.Context, supi externalRef2.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmsData request
	GetSmsData(ctx context.Context, supi externalRef2.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmsMngtData request
	GetSmsMngtData(ctx context.Context, supi externalRef2.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceConfigData request
	GetTraceConfigData(ctx context.Context, supi externalRef2.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUeCtxInAmfData request
	GetUeCtxInAmfData(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUeCtxInSmfData request
	GetUeCtxInSmfData(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUeCtxInSmsfData request
	GetUeCtxInSmsfData(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2xData request
	GetV2xData(ctx context.Context, supi externalRef2.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupiOrGpsi request
	GetSupiOrGpsi(ctx context.Context, ueId externalRef2.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLcsPrivacyData request
	GetLcsPrivacyData(ctx context.Context, ueId externalRef2.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeWithBody request with any body
	SubscribeWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Subscribe(ctx context.Context, ueId externalRef2.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Unsubscribe request
	Unsubscribe(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyWithBody request with any body
	ModifyWithBody(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGroupIdentifiers(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedData(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeToSharedDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeToSharedDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeToSharedData(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeToSharedDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnsubscribeForSharedData(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeForSharedDataRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySharedDataSubsWithBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySharedDataSubsRequestWithBody(c.Server, subscriptionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifySharedDataSubsWithApplicationMergePatchPlusJSONBody(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifySharedDataSubsRequestWithApplicationMergePatchPlusJSONBody(c.Server, subscriptionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividualSharedData(ctx context.Context, sharedDataId SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualSharedDataRequest(c.Server, sharedDataId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataSets(ctx context.Context, supi externalRef2.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataSetsRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAmData(ctx context.Context, supi externalRef2.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAmDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CAGAckWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCAGAckRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CAGAck(ctx context.Context, supi externalRef2.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCAGAckRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEcrData(ctx context.Context, supi externalRef2.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEcrDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SorAckInfoWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSorAckInfoRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SorAckInfo(ctx context.Context, supi externalRef2.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSorAckInfoRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SNSSAIsAckWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSNSSAIsAckRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SNSSAIsAck(ctx context.Context, supi externalRef2.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSNSSAIsAckRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSORInfoWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSORInfoRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSORInfo(ctx context.Context, supi externalRef2.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSORInfoRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpuAckWithBody(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpuAckRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpuAck(ctx context.Context, supi externalRef2.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpuAckRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLcsBcaData(ctx context.Context, supi externalRef2.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLcsBcaDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLcsMoData(ctx context.Context, supi externalRef2.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLcsMoDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNSSAI(ctx context.Context, supi externalRef2.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNSSAIRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmData(ctx context.Context, supi externalRef2.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmfSelData(ctx context.Context, supi externalRef2.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmfSelDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmsData(ctx context.Context, supi externalRef2.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmsDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmsMngtData(ctx context.Context, supi externalRef2.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmsMngtDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceConfigData(ctx context.Context, supi externalRef2.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceConfigDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUeCtxInAmfData(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUeCtxInAmfDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUeCtxInSmfData(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUeCtxInSmfDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUeCtxInSmsfData(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUeCtxInSmsfDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2xData(ctx context.Context, supi externalRef2.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2xDataRequest(c.Server, supi, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupiOrGpsi(ctx context.Context, ueId externalRef2.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupiOrGpsiRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLcsPrivacyData(ctx context.Context, ueId externalRef2.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLcsPrivacyDataRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeWithBody(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Subscribe(ctx context.Context, ueId externalRef2.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Unsubscribe(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnsubscribeRequest(c.Server, ueId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyWithBody(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRequestWithBody(c.Server, ueId, subscriptionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, subscriptionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGroupIdentifiersRequest generates requests for GetGroupIdentifiers
func NewGetGroupIdentifiersRequest(server string, params *GetGroupIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/group-data/group-identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ext-group-id", runtime.ParamLocationQuery, *params.ExtGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IntGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "int-group-id", runtime.ParamLocationQuery, *params.IntGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIdInd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-id-ind", runtime.ParamLocationQuery, *params.UeIdInd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSharedDataRequest generates requests for GetSharedData
func NewGetSharedDataRequest(server string, params *GetSharedDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "shared-data-ids", runtime.ParamLocationQuery, params.SharedDataIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeaturesShouldNotBeUsed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supportedFeatures", runtime.ParamLocationQuery, *params.SupportedFeaturesShouldNotBeUsed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewSubscribeToSharedDataRequest calls the generic SubscribeToSharedData builder with application/json body
func NewSubscribeToSharedDataRequest(server string, body SubscribeToSharedDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeToSharedDataRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscribeToSharedDataRequestWithBody generates requests for SubscribeToSharedData with any type of body
func NewSubscribeToSharedDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data-subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeForSharedDataRequest generates requests for UnsubscribeForSharedData
func NewUnsubscribeForSharedDataRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data-subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifySharedDataSubsRequestWithApplicationMergePatchPlusJSONBody calls the generic ModifySharedDataSubs builder with application/merge-patch+json body
func NewModifySharedDataSubsRequestWithApplicationMergePatchPlusJSONBody(server string, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifySharedDataSubsRequestWithBody(server, subscriptionId, params, "application/merge-patch+json", bodyReader)
}

// NewModifySharedDataSubsRequestWithBody generates requests for ModifySharedDataSubs with any type of body
func NewModifySharedDataSubsRequestWithBody(server string, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data-subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndividualSharedDataRequest generates requests for GetIndividualSharedData
func NewGetIndividualSharedDataRequest(server string, sharedDataId SharedDataIds, params *GetIndividualSharedDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sharedDataId", runtime.ParamLocationPath, sharedDataId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shared-data/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetDataSetsRequest generates requests for GetDataSets
func NewGetDataSetsRequest(server string, supi externalRef2.Supi, params *GetDataSetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "dataset-names", runtime.ParamLocationQuery, params.DatasetNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetAmDataRequest generates requests for GetAmData
func NewGetAmDataRequest(server string, supi externalRef2.Supi, params *GetAmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewCAGAckRequest calls the generic CAGAck builder with application/json body
func NewCAGAckRequest(server string, supi externalRef2.Supi, body CAGAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCAGAckRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewCAGAckRequestWithBody generates requests for CAGAck with any type of body
func NewCAGAckRequestWithBody(server string, supi externalRef2.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/cag-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEcrDataRequest generates requests for GetEcrData
func NewGetEcrDataRequest(server string, supi externalRef2.Supi, params *GetEcrDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/ecr-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewSorAckInfoRequest calls the generic SorAckInfo builder with application/json body
func NewSorAckInfoRequest(server string, supi externalRef2.Supi, body SorAckInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSorAckInfoRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewSorAckInfoRequestWithBody generates requests for SorAckInfo with any type of body
func NewSorAckInfoRequestWithBody(server string, supi externalRef2.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/sor-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSNSSAIsAckRequest calls the generic SNSSAIsAck builder with application/json body
func NewSNSSAIsAckRequest(server string, supi externalRef2.Supi, body SNSSAIsAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSNSSAIsAckRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewSNSSAIsAckRequestWithBody generates requests for SNSSAIsAck with any type of body
func NewSNSSAIsAckRequestWithBody(server string, supi externalRef2.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/subscribed-snssais-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSORInfoRequest calls the generic UpdateSORInfo builder with application/json body
func NewUpdateSORInfoRequest(server string, supi externalRef2.Supi, body UpdateSORInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSORInfoRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewUpdateSORInfoRequestWithBody generates requests for UpdateSORInfo with any type of body
func NewUpdateSORInfoRequestWithBody(server string, supi externalRef2.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/update-sor", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpuAckRequest calls the generic UpuAck builder with application/json body
func NewUpuAckRequest(server string, supi externalRef2.Supi, body UpuAckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpuAckRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewUpuAckRequestWithBody generates requests for UpuAck with any type of body
func NewUpuAckRequestWithBody(server string, supi externalRef2.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/am-data/upu-ack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLcsBcaDataRequest generates requests for GetLcsBcaData
func NewGetLcsBcaDataRequest(server string, supi externalRef2.Supi, params *GetLcsBcaDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/lcs-bca-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetLcsMoDataRequest generates requests for GetLcsMoData
func NewGetLcsMoDataRequest(server string, supi externalRef2.Supi, params *GetLcsMoDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/lcs-mo-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetNSSAIRequest generates requests for GetNSSAI
func NewGetNSSAIRequest(server string, supi externalRef2.Supi, params *GetNSSAIParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/nssai", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmDataRequest generates requests for GetSmData
func NewGetSmDataRequest(server string, supi externalRef2.Supi, params *GetSmDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sm-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SingleNssai != nil {

			if queryParamBuf, err := json.Marshal(*params.SingleNssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("single-nssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmfSelDataRequest generates requests for GetSmfSelData
func NewGetSmfSelDataRequest(server string, supi externalRef2.Supi, params *GetSmfSelDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/smf-select-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmsDataRequest generates requests for GetSmsData
func NewGetSmsDataRequest(server string, supi externalRef2.Supi, params *GetSmsDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sms-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSmsMngtDataRequest generates requests for GetSmsMngtData
func NewGetSmsMngtDataRequest(server string, supi externalRef2.Supi, params *GetSmsMngtDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sms-mng-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetTraceConfigDataRequest generates requests for GetTraceConfigData
func NewGetTraceConfigDataRequest(server string, supi externalRef2.Supi, params *GetTraceConfigDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/trace-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetUeCtxInAmfDataRequest generates requests for GetUeCtxInAmfData
func NewGetUeCtxInAmfDataRequest(server string, supi externalRef2.Supi, params *GetUeCtxInAmfDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ue-context-in-amf-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUeCtxInSmfDataRequest generates requests for GetUeCtxInSmfData
func NewGetUeCtxInSmfDataRequest(server string, supi externalRef2.Supi, params *GetUeCtxInSmfDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ue-context-in-smf-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUeCtxInSmsfDataRequest generates requests for GetUeCtxInSmsfData
func NewGetUeCtxInSmsfDataRequest(server string, supi externalRef2.Supi, params *GetUeCtxInSmsfDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ue-context-in-smsf-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2xDataRequest generates requests for GetV2xData
func NewGetV2xDataRequest(server string, supi externalRef2.Supi, params *GetV2xDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/v2x-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetSupiOrGpsiRequest generates requests for GetSupiOrGpsi
func NewGetSupiOrGpsiRequest(server string, ueId externalRef2.VarUeId, params *GetSupiOrGpsiParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/id-translation-result", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AppPortId != nil {

			if queryParamBuf, err := json.Marshal(*params.AppPortId); err != nil {
				return nil, err
			} else {
				queryValues.Add("app-port-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGetLcsPrivacyDataRequest generates requests for GetLcsPrivacyData
func NewGetLcsPrivacyDataRequest(server string, ueId externalRef2.VarUeId, params *GetLcsPrivacyDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/lcs-privacy-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewSubscribeRequest calls the generic Subscribe builder with application/json body
func NewSubscribeRequest(server string, ueId externalRef2.VarUeId, body SubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscribeRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewSubscribeRequestWithBody generates requests for Subscribe with any type of body
func NewSubscribeRequestWithBody(server string, ueId externalRef2.VarUeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sdm-subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnsubscribeRequest generates requests for Unsubscribe
func NewUnsubscribeRequest(server string, ueId externalRef2.VarUeId, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyRequestWithApplicationMergePatchPlusJSONBody calls the generic Modify builder with application/merge-patch+json body
func NewModifyRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyRequestWithBody(server, ueId, subscriptionId, params, "application/merge-patch+json", bodyReader)
}

// NewModifyRequestWithBody generates requests for Modify with any type of body
func NewModifyRequestWithBody(server string, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/sdm-subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGroupIdentifiersWithResponse request
	GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error)

	// GetSharedDataWithResponse request
	GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error)

	// SubscribeToSharedDataWithBodyWithResponse request with any body
	SubscribeToSharedDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error)

	SubscribeToSharedDataWithResponse(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error)

	// UnsubscribeForSharedDataWithResponse request
	UnsubscribeForSharedDataWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeForSharedDataResponse, error)

	// ModifySharedDataSubsWithBodyWithResponse request with any body
	ModifySharedDataSubsWithBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error)

	ModifySharedDataSubsWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error)

	// GetIndividualSharedDataWithResponse request
	GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error)

	// GetDataSetsWithResponse request
	GetDataSetsWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*GetDataSetsResponse, error)

	// GetAmDataWithResponse request
	GetAmDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*GetAmDataResponse, error)

	// CAGAckWithBodyWithResponse request with any body
	CAGAckWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CAGAckResponse, error)

	CAGAckWithResponse(ctx context.Context, supi externalRef2.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CAGAckResponse, error)

	// GetEcrDataWithResponse request
	GetEcrDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*GetEcrDataResponse, error)

	// SorAckInfoWithBodyWithResponse request with any body
	SorAckInfoWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error)

	SorAckInfoWithResponse(ctx context.Context, supi externalRef2.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error)

	// SNSSAIsAckWithBodyWithResponse request with any body
	SNSSAIsAckWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error)

	SNSSAIsAckWithResponse(ctx context.Context, supi externalRef2.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error)

	// UpdateSORInfoWithBodyWithResponse request with any body
	UpdateSORInfoWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error)

	UpdateSORInfoWithResponse(ctx context.Context, supi externalRef2.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error)

	// UpuAckWithBodyWithResponse request with any body
	UpuAckWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpuAckResponse, error)

	UpuAckWithResponse(ctx context.Context, supi externalRef2.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*UpuAckResponse, error)

	// GetLcsBcaDataWithResponse request
	GetLcsBcaDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*GetLcsBcaDataResponse, error)

	// GetLcsMoDataWithResponse request
	GetLcsMoDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*GetLcsMoDataResponse, error)

	// GetNSSAIWithResponse request
	GetNSSAIWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*GetNSSAIResponse, error)

	// GetSmDataWithResponse request
	GetSmDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*GetSmDataResponse, error)

	// GetSmfSelDataWithResponse request
	GetSmfSelDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*GetSmfSelDataResponse, error)

	// GetSmsDataWithResponse request
	GetSmsDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*GetSmsDataResponse, error)

	// GetSmsMngtDataWithResponse request
	GetSmsMngtDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*GetSmsMngtDataResponse, error)

	// GetTraceConfigDataWithResponse request
	GetTraceConfigDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*GetTraceConfigDataResponse, error)

	// GetUeCtxInAmfDataWithResponse request
	GetUeCtxInAmfDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInAmfDataResponse, error)

	// GetUeCtxInSmfDataWithResponse request
	GetUeCtxInSmfDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmfDataResponse, error)

	// GetUeCtxInSmsfDataWithResponse request
	GetUeCtxInSmsfDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmsfDataResponse, error)

	// GetV2xDataWithResponse request
	GetV2xDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*GetV2xDataResponse, error)

	// GetSupiOrGpsiWithResponse request
	GetSupiOrGpsiWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*GetSupiOrGpsiResponse, error)

	// GetLcsPrivacyDataWithResponse request
	GetLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*GetLcsPrivacyDataResponse, error)

	// SubscribeWithBodyWithResponse request with any body
	SubscribeWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeResponse, error)

	SubscribeWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeResponse, error)

	// UnsubscribeWithResponse request
	UnsubscribeWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error)

	// ModifyWithBodyWithResponse request with any body
	ModifyWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyResponse, error)

	ModifyWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyResponse, error)
}

type GetGroupIdentifiersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *GroupIdentifiers
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetGroupIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]SharedData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeToSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SdmSubscription
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SubscribeToSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeToSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeForSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UnsubscribeForSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeForSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifySharedDataSubsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ModifySharedDataSubsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifySharedDataSubsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualSharedDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SharedData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetIndividualSharedDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualSharedDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataSetsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SubscriptionDataSets
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetDataSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AccessAndMobilitySubscriptionData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CAGAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CAGAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CAGAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEcrDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *EnhancedCoverageRestrictionData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetEcrDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEcrDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SorAckInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SorAckInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SorAckInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SNSSAIsAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SNSSAIsAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SNSSAIsAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSORInfoResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SorInfo
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpdateSORInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSORInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpuAckResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UpuAckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpuAckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLcsBcaDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *LcsBroadcastAssistanceTypesData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetLcsBcaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLcsBcaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLcsMoDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *LcsMoData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetLcsMoDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLcsMoDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNSSAIResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Nssai
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetNSSAIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNSSAIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]SessionManagementSubscriptionData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmfSelDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmfSelectionSubscriptionData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmfSelDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmfSelDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmsDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmsSubscriptionData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmsMngtDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *SmsManagementSubscriptionData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSmsMngtDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmsMngtDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceConfigDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TraceDataResponse
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetTraceConfigDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceConfigDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUeCtxInAmfDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UeContextInAmfData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetUeCtxInAmfDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUeCtxInAmfDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUeCtxInSmfDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UeContextInSmfData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetUeCtxInSmfDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUeCtxInSmfDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUeCtxInSmsfDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *UeContextInSmsfData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetUeCtxInSmsfDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUeCtxInSmsfDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2xDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *V2xSubscriptionData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetV2xDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2xDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupiOrGpsiResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *IdTranslationResult
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSupiOrGpsiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupiOrGpsiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLcsPrivacyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *LcsPrivacyData
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetLcsPrivacyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLcsPrivacyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *SdmSubscription
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON501     *externalRef2.N501
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnsubscribeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r UnsubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnsubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	ApplicationproblemJSON400     *externalRef2.N400
	ApplicationproblemJSON403     *externalRef2.N403
	ApplicationproblemJSON404     *externalRef2.N404
	ApplicationproblemJSON500     *externalRef2.N500
	ApplicationproblemJSON503     *externalRef2.N503
	ApplicationproblemJSONDefault *externalRef2.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ModifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGroupIdentifiersWithResponse request returning *GetGroupIdentifiersResponse
func (c *ClientWithResponses) GetGroupIdentifiersWithResponse(ctx context.Context, params *GetGroupIdentifiersParams, reqEditors ...RequestEditorFn) (*GetGroupIdentifiersResponse, error) {
	rsp, err := c.GetGroupIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupIdentifiersResponse(rsp)
}

// GetSharedDataWithResponse request returning *GetSharedDataResponse
func (c *ClientWithResponses) GetSharedDataWithResponse(ctx context.Context, params *GetSharedDataParams, reqEditors ...RequestEditorFn) (*GetSharedDataResponse, error) {
	rsp, err := c.GetSharedData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedDataResponse(rsp)
}

// SubscribeToSharedDataWithBodyWithResponse request with arbitrary body returning *SubscribeToSharedDataResponse
func (c *ClientWithResponses) SubscribeToSharedDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error) {
	rsp, err := c.SubscribeToSharedDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeToSharedDataResponse(rsp)
}

func (c *ClientWithResponses) SubscribeToSharedDataWithResponse(ctx context.Context, body SubscribeToSharedDataJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeToSharedDataResponse, error) {
	rsp, err := c.SubscribeToSharedData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeToSharedDataResponse(rsp)
}

// UnsubscribeForSharedDataWithResponse request returning *UnsubscribeForSharedDataResponse
func (c *ClientWithResponses) UnsubscribeForSharedDataWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeForSharedDataResponse, error) {
	rsp, err := c.UnsubscribeForSharedData(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeForSharedDataResponse(rsp)
}

// ModifySharedDataSubsWithBodyWithResponse request with arbitrary body returning *ModifySharedDataSubsResponse
func (c *ClientWithResponses) ModifySharedDataSubsWithBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error) {
	rsp, err := c.ModifySharedDataSubsWithBody(ctx, subscriptionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySharedDataSubsResponse(rsp)
}

func (c *ClientWithResponses) ModifySharedDataSubsWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, subscriptionId string, params *ModifySharedDataSubsParams, body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifySharedDataSubsResponse, error) {
	rsp, err := c.ModifySharedDataSubsWithApplicationMergePatchPlusJSONBody(ctx, subscriptionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifySharedDataSubsResponse(rsp)
}

// GetIndividualSharedDataWithResponse request returning *GetIndividualSharedDataResponse
func (c *ClientWithResponses) GetIndividualSharedDataWithResponse(ctx context.Context, sharedDataId SharedDataIds, params *GetIndividualSharedDataParams, reqEditors ...RequestEditorFn) (*GetIndividualSharedDataResponse, error) {
	rsp, err := c.GetIndividualSharedData(ctx, sharedDataId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualSharedDataResponse(rsp)
}

// GetDataSetsWithResponse request returning *GetDataSetsResponse
func (c *ClientWithResponses) GetDataSetsWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetDataSetsParams, reqEditors ...RequestEditorFn) (*GetDataSetsResponse, error) {
	rsp, err := c.GetDataSets(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataSetsResponse(rsp)
}

// GetAmDataWithResponse request returning *GetAmDataResponse
func (c *ClientWithResponses) GetAmDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetAmDataParams, reqEditors ...RequestEditorFn) (*GetAmDataResponse, error) {
	rsp, err := c.GetAmData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAmDataResponse(rsp)
}

// CAGAckWithBodyWithResponse request with arbitrary body returning *CAGAckResponse
func (c *ClientWithResponses) CAGAckWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CAGAckResponse, error) {
	rsp, err := c.CAGAckWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCAGAckResponse(rsp)
}

func (c *ClientWithResponses) CAGAckWithResponse(ctx context.Context, supi externalRef2.Supi, body CAGAckJSONRequestBody, reqEditors ...RequestEditorFn) (*CAGAckResponse, error) {
	rsp, err := c.CAGAck(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCAGAckResponse(rsp)
}

// GetEcrDataWithResponse request returning *GetEcrDataResponse
func (c *ClientWithResponses) GetEcrDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetEcrDataParams, reqEditors ...RequestEditorFn) (*GetEcrDataResponse, error) {
	rsp, err := c.GetEcrData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEcrDataResponse(rsp)
}

// SorAckInfoWithBodyWithResponse request with arbitrary body returning *SorAckInfoResponse
func (c *ClientWithResponses) SorAckInfoWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error) {
	rsp, err := c.SorAckInfoWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSorAckInfoResponse(rsp)
}

func (c *ClientWithResponses) SorAckInfoWithResponse(ctx context.Context, supi externalRef2.Supi, body SorAckInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*SorAckInfoResponse, error) {
	rsp, err := c.SorAckInfo(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSorAckInfoResponse(rsp)
}

// SNSSAIsAckWithBodyWithResponse request with arbitrary body returning *SNSSAIsAckResponse
func (c *ClientWithResponses) SNSSAIsAckWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error) {
	rsp, err := c.SNSSAIsAckWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSNSSAIsAckResponse(rsp)
}

func (c *ClientWithResponses) SNSSAIsAckWithResponse(ctx context.Context, supi externalRef2.Supi, body SNSSAIsAckJSONRequestBody, reqEditors ...RequestEditorFn) (*SNSSAIsAckResponse, error) {
	rsp, err := c.SNSSAIsAck(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSNSSAIsAckResponse(rsp)
}

// UpdateSORInfoWithBodyWithResponse request with arbitrary body returning *UpdateSORInfoResponse
func (c *ClientWithResponses) UpdateSORInfoWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error) {
	rsp, err := c.UpdateSORInfoWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSORInfoResponse(rsp)
}

func (c *ClientWithResponses) UpdateSORInfoWithResponse(ctx context.Context, supi externalRef2.Supi, body UpdateSORInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSORInfoResponse, error) {
	rsp, err := c.UpdateSORInfo(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSORInfoResponse(rsp)
}

// UpuAckWithBodyWithResponse request with arbitrary body returning *UpuAckResponse
func (c *ClientWithResponses) UpuAckWithBodyWithResponse(ctx context.Context, supi externalRef2.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpuAckResponse, error) {
	rsp, err := c.UpuAckWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpuAckResponse(rsp)
}

func (c *ClientWithResponses) UpuAckWithResponse(ctx context.Context, supi externalRef2.Supi, body UpuAckJSONRequestBody, reqEditors ...RequestEditorFn) (*UpuAckResponse, error) {
	rsp, err := c.UpuAck(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpuAckResponse(rsp)
}

// GetLcsBcaDataWithResponse request returning *GetLcsBcaDataResponse
func (c *ClientWithResponses) GetLcsBcaDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetLcsBcaDataParams, reqEditors ...RequestEditorFn) (*GetLcsBcaDataResponse, error) {
	rsp, err := c.GetLcsBcaData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLcsBcaDataResponse(rsp)
}

// GetLcsMoDataWithResponse request returning *GetLcsMoDataResponse
func (c *ClientWithResponses) GetLcsMoDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetLcsMoDataParams, reqEditors ...RequestEditorFn) (*GetLcsMoDataResponse, error) {
	rsp, err := c.GetLcsMoData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLcsMoDataResponse(rsp)
}

// GetNSSAIWithResponse request returning *GetNSSAIResponse
func (c *ClientWithResponses) GetNSSAIWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetNSSAIParams, reqEditors ...RequestEditorFn) (*GetNSSAIResponse, error) {
	rsp, err := c.GetNSSAI(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNSSAIResponse(rsp)
}

// GetSmDataWithResponse request returning *GetSmDataResponse
func (c *ClientWithResponses) GetSmDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmDataParams, reqEditors ...RequestEditorFn) (*GetSmDataResponse, error) {
	rsp, err := c.GetSmData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmDataResponse(rsp)
}

// GetSmfSelDataWithResponse request returning *GetSmfSelDataResponse
func (c *ClientWithResponses) GetSmfSelDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmfSelDataParams, reqEditors ...RequestEditorFn) (*GetSmfSelDataResponse, error) {
	rsp, err := c.GetSmfSelData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmfSelDataResponse(rsp)
}

// GetSmsDataWithResponse request returning *GetSmsDataResponse
func (c *ClientWithResponses) GetSmsDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmsDataParams, reqEditors ...RequestEditorFn) (*GetSmsDataResponse, error) {
	rsp, err := c.GetSmsData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmsDataResponse(rsp)
}

// GetSmsMngtDataWithResponse request returning *GetSmsMngtDataResponse
func (c *ClientWithResponses) GetSmsMngtDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetSmsMngtDataParams, reqEditors ...RequestEditorFn) (*GetSmsMngtDataResponse, error) {
	rsp, err := c.GetSmsMngtData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmsMngtDataResponse(rsp)
}

// GetTraceConfigDataWithResponse request returning *GetTraceConfigDataResponse
func (c *ClientWithResponses) GetTraceConfigDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetTraceConfigDataParams, reqEditors ...RequestEditorFn) (*GetTraceConfigDataResponse, error) {
	rsp, err := c.GetTraceConfigData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceConfigDataResponse(rsp)
}

// GetUeCtxInAmfDataWithResponse request returning *GetUeCtxInAmfDataResponse
func (c *ClientWithResponses) GetUeCtxInAmfDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInAmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInAmfDataResponse, error) {
	rsp, err := c.GetUeCtxInAmfData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUeCtxInAmfDataResponse(rsp)
}

// GetUeCtxInSmfDataWithResponse request returning *GetUeCtxInSmfDataResponse
func (c *ClientWithResponses) GetUeCtxInSmfDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmfDataResponse, error) {
	rsp, err := c.GetUeCtxInSmfData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUeCtxInSmfDataResponse(rsp)
}

// GetUeCtxInSmsfDataWithResponse request returning *GetUeCtxInSmsfDataResponse
func (c *ClientWithResponses) GetUeCtxInSmsfDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetUeCtxInSmsfDataParams, reqEditors ...RequestEditorFn) (*GetUeCtxInSmsfDataResponse, error) {
	rsp, err := c.GetUeCtxInSmsfData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUeCtxInSmsfDataResponse(rsp)
}

// GetV2xDataWithResponse request returning *GetV2xDataResponse
func (c *ClientWithResponses) GetV2xDataWithResponse(ctx context.Context, supi externalRef2.Supi, params *GetV2xDataParams, reqEditors ...RequestEditorFn) (*GetV2xDataResponse, error) {
	rsp, err := c.GetV2xData(ctx, supi, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2xDataResponse(rsp)
}

// GetSupiOrGpsiWithResponse request returning *GetSupiOrGpsiResponse
func (c *ClientWithResponses) GetSupiOrGpsiWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetSupiOrGpsiParams, reqEditors ...RequestEditorFn) (*GetSupiOrGpsiResponse, error) {
	rsp, err := c.GetSupiOrGpsi(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupiOrGpsiResponse(rsp)
}

// GetLcsPrivacyDataWithResponse request returning *GetLcsPrivacyDataResponse
func (c *ClientWithResponses) GetLcsPrivacyDataWithResponse(ctx context.Context, ueId externalRef2.VarUeId, params *GetLcsPrivacyDataParams, reqEditors ...RequestEditorFn) (*GetLcsPrivacyDataResponse, error) {
	rsp, err := c.GetLcsPrivacyData(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLcsPrivacyDataResponse(rsp)
}

// SubscribeWithBodyWithResponse request with arbitrary body returning *SubscribeResponse
func (c *ClientWithResponses) SubscribeWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeResponse, error) {
	rsp, err := c.SubscribeWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeResponse(rsp)
}

func (c *ClientWithResponses) SubscribeWithResponse(ctx context.Context, ueId externalRef2.VarUeId, body SubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscribeResponse, error) {
	rsp, err := c.Subscribe(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeResponse(rsp)
}

// UnsubscribeWithResponse request returning *UnsubscribeResponse
func (c *ClientWithResponses) UnsubscribeWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, reqEditors ...RequestEditorFn) (*UnsubscribeResponse, error) {
	rsp, err := c.Unsubscribe(ctx, ueId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnsubscribeResponse(rsp)
}

// ModifyWithBodyWithResponse request with arbitrary body returning *ModifyResponse
func (c *ClientWithResponses) ModifyWithBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyResponse, error) {
	rsp, err := c.ModifyWithBody(ctx, ueId, subscriptionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyResponse(rsp)
}

func (c *ClientWithResponses) ModifyWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef2.VarUeId, subscriptionId string, params *ModifyParams, body ModifyApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyResponse, error) {
	rsp, err := c.ModifyWithApplicationMergePatchPlusJSONBody(ctx, ueId, subscriptionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyResponse(rsp)
}

// ParseGetGroupIdentifiersResponse parses an HTTP response from a GetGroupIdentifiersWithResponse call
func ParseGetGroupIdentifiersResponse(rsp *http.Response) (*GetGroupIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSharedDataResponse parses an HTTP response from a GetSharedDataWithResponse call
func ParseGetSharedDataResponse(rsp *http.Response) (*GetSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubscribeToSharedDataResponse parses an HTTP response from a SubscribeToSharedDataWithResponse call
func ParseSubscribeToSharedDataResponse(rsp *http.Response) (*SubscribeToSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeToSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUnsubscribeForSharedDataResponse parses an HTTP response from a UnsubscribeForSharedDataWithResponse call
func ParseUnsubscribeForSharedDataResponse(rsp *http.Response) (*UnsubscribeForSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeForSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifySharedDataSubsResponse parses an HTTP response from a ModifySharedDataSubsWithResponse call
func ParseModifySharedDataSubsResponse(rsp *http.Response) (*ModifySharedDataSubsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifySharedDataSubsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetIndividualSharedDataResponse parses an HTTP response from a GetIndividualSharedDataWithResponse call
func ParseGetIndividualSharedDataResponse(rsp *http.Response) (*GetIndividualSharedDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualSharedDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetDataSetsResponse parses an HTTP response from a GetDataSetsWithResponse call
func ParseGetDataSetsResponse(rsp *http.Response) (*GetDataSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionDataSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAmDataResponse parses an HTTP response from a GetAmDataWithResponse call
func ParseGetAmDataResponse(rsp *http.Response) (*GetAmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessAndMobilitySubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCAGAckResponse parses an HTTP response from a CAGAckWithResponse call
func ParseCAGAckResponse(rsp *http.Response) (*CAGAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CAGAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetEcrDataResponse parses an HTTP response from a GetEcrDataWithResponse call
func ParseGetEcrDataResponse(rsp *http.Response) (*GetEcrDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEcrDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnhancedCoverageRestrictionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSorAckInfoResponse parses an HTTP response from a SorAckInfoWithResponse call
func ParseSorAckInfoResponse(rsp *http.Response) (*SorAckInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SorAckInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSNSSAIsAckResponse parses an HTTP response from a SNSSAIsAckWithResponse call
func ParseSNSSAIsAckResponse(rsp *http.Response) (*SNSSAIsAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SNSSAIsAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateSORInfoResponse parses an HTTP response from a UpdateSORInfoWithResponse call
func ParseUpdateSORInfoResponse(rsp *http.Response) (*UpdateSORInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSORInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SorInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpuAckResponse parses an HTTP response from a UpuAckWithResponse call
func ParseUpuAckResponse(rsp *http.Response) (*UpuAckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpuAckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetLcsBcaDataResponse parses an HTTP response from a GetLcsBcaDataWithResponse call
func ParseGetLcsBcaDataResponse(rsp *http.Response) (*GetLcsBcaDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLcsBcaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LcsBroadcastAssistanceTypesData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetLcsMoDataResponse parses an HTTP response from a GetLcsMoDataWithResponse call
func ParseGetLcsMoDataResponse(rsp *http.Response) (*GetLcsMoDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLcsMoDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LcsMoData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNSSAIResponse parses an HTTP response from a GetNSSAIWithResponse call
func ParseGetNSSAIResponse(rsp *http.Response) (*GetNSSAIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNSSAIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nssai
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmDataResponse parses an HTTP response from a GetSmDataWithResponse call
func ParseGetSmDataResponse(rsp *http.Response) (*GetSmDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SessionManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmfSelDataResponse parses an HTTP response from a GetSmfSelDataWithResponse call
func ParseGetSmfSelDataResponse(rsp *http.Response) (*GetSmfSelDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmfSelDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfSelectionSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmsDataResponse parses an HTTP response from a GetSmsDataWithResponse call
func ParseGetSmsDataResponse(rsp *http.Response) (*GetSmsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSmsMngtDataResponse parses an HTTP response from a GetSmsMngtDataWithResponse call
func ParseGetSmsMngtDataResponse(rsp *http.Response) (*GetSmsMngtDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmsMngtDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsManagementSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetTraceConfigDataResponse parses an HTTP response from a GetTraceConfigDataWithResponse call
func ParseGetTraceConfigDataResponse(rsp *http.Response) (*GetTraceConfigDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceConfigDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUeCtxInAmfDataResponse parses an HTTP response from a GetUeCtxInAmfDataWithResponse call
func ParseGetUeCtxInAmfDataResponse(rsp *http.Response) (*GetUeCtxInAmfDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUeCtxInAmfDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UeContextInAmfData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUeCtxInSmfDataResponse parses an HTTP response from a GetUeCtxInSmfDataWithResponse call
func ParseGetUeCtxInSmfDataResponse(rsp *http.Response) (*GetUeCtxInSmfDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUeCtxInSmfDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UeContextInSmfData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetUeCtxInSmsfDataResponse parses an HTTP response from a GetUeCtxInSmsfDataWithResponse call
func ParseGetUeCtxInSmsfDataResponse(rsp *http.Response) (*GetUeCtxInSmsfDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUeCtxInSmsfDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UeContextInSmsfData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetV2xDataResponse parses an HTTP response from a GetV2xDataWithResponse call
func ParseGetV2xDataResponse(rsp *http.Response) (*GetV2xDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2xDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V2xSubscriptionData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSupiOrGpsiResponse parses an HTTP response from a GetSupiOrGpsiWithResponse call
func ParseGetSupiOrGpsiResponse(rsp *http.Response) (*GetSupiOrGpsiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupiOrGpsiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdTranslationResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetLcsPrivacyDataResponse parses an HTTP response from a GetLcsPrivacyDataWithResponse call
func ParseGetLcsPrivacyDataResponse(rsp *http.Response) (*GetLcsPrivacyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLcsPrivacyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LcsPrivacyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubscribeResponse parses an HTTP response from a SubscribeWithResponse call
func ParseSubscribeResponse(rsp *http.Response) (*SubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SdmSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef2.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUnsubscribeResponse parses an HTTP response from a UnsubscribeWithResponse call
func ParseUnsubscribeResponse(rsp *http.Response) (*UnsubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnsubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseModifyResponse parses an HTTP response from a ModifyWithResponse call
func ParseModifyResponse(rsp *http.Response) (*ModifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef2.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef2.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef2.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef2.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef2.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef2.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Mapping of Group Identifiers
	// (GET /group-data/group-identifiers)
	GetGroupIdentifiers(c *gin.Context, params GetGroupIdentifiersParams)
	// retrieve shared data
	// (GET /shared-data)
	GetSharedData(c *gin.Context, params GetSharedDataParams)
	// subscribe to notifications for shared data
	// (POST /shared-data-subscriptions)
	SubscribeToSharedData(c *gin.Context)
	// unsubscribe from notifications for shared data
	// (DELETE /shared-data-subscriptions/{subscriptionId})
	UnsubscribeForSharedData(c *gin.Context, subscriptionId string)
	// modify the subscription
	// (PATCH /shared-data-subscriptions/{subscriptionId})
	ModifySharedDataSubs(c *gin.Context, subscriptionId string, params ModifySharedDataSubsParams)
	// retrieve the individual shared data
	// (GET /shared-data/{sharedDataId})
	GetIndividualSharedData(c *gin.Context, sharedDataId SharedDataIds, params GetIndividualSharedDataParams)
	// retrieve multiple data sets
	// (GET /{supi})
	GetDataSets(c *gin.Context, supi externalRef2.Supi, params GetDataSetsParams)
	// retrieve a UE's Access and Mobility Subscription Data
	// (GET /{supi}/am-data)
	GetAmData(c *gin.Context, supi externalRef2.Supi, params GetAmDataParams)
	// Nudm_Sdm Info operation for CAG acknowledgement
	// (PUT /{supi}/am-data/cag-ack)
	CAGAck(c *gin.Context, supi externalRef2.Supi)
	// retrieve a UE's subscribed Enhanced Coverage Restriction Data
	// (GET /{supi}/am-data/ecr-data)
	GetEcrData(c *gin.Context, supi externalRef2.Supi, params GetEcrDataParams)
	// Nudm_Sdm Info service operation
	// (PUT /{supi}/am-data/sor-ack)
	SorAckInfo(c *gin.Context, supi externalRef2.Supi)
	// Nudm_Sdm Info operation for S-NSSAIs acknowledgement
	// (PUT /{supi}/am-data/subscribed-snssais-ack)
	SNSSAIsAck(c *gin.Context, supi externalRef2.Supi)
	// Nudm_Sdm custom operation to trigger SOR info update
	// (POST /{supi}/am-data/update-sor)
	UpdateSORInfo(c *gin.Context, supi externalRef2.Supi)
	// Nudm_Sdm Info for UPU service operation
	// (PUT /{supi}/am-data/upu-ack)
	UpuAck(c *gin.Context, supi externalRef2.Supi)
	// retrieve a UE's LCS Broadcast Assistance Data Types Subscription Data
	// (GET /{supi}/lcs-bca-data)
	GetLcsBcaData(c *gin.Context, supi externalRef2.Supi, params GetLcsBcaDataParams)
	// retrieve a UE's LCS Mobile Originated Subscription Data
	// (GET /{supi}/lcs-mo-data)
	GetLcsMoData(c *gin.Context, supi externalRef2.Supi, params GetLcsMoDataParams)
	// retrieve a UE's subscribed NSSAI
	// (GET /{supi}/nssai)
	GetNSSAI(c *gin.Context, supi externalRef2.Supi, params GetNSSAIParams)
	// retrieve a UE's Session Management Subscription Data
	// (GET /{supi}/sm-data)
	GetSmData(c *gin.Context, supi externalRef2.Supi, params GetSmDataParams)
	// retrieve a UE's SMF Selection Subscription Data
	// (GET /{supi}/smf-select-data)
	GetSmfSelData(c *gin.Context, supi externalRef2.Supi, params GetSmfSelDataParams)
	// retrieve a UE's SMS Subscription Data
	// (GET /{supi}/sms-data)
	GetSmsData(c *gin.Context, supi externalRef2.Supi, params GetSmsDataParams)
	// retrieve a UE's SMS Management Subscription Data
	// (GET /{supi}/sms-mng-data)
	GetSmsMngtData(c *gin.Context, supi externalRef2.Supi, params GetSmsMngtDataParams)
	// retrieve a UE's Trace Configuration Data
	// (GET /{supi}/trace-data)
	GetTraceConfigData(c *gin.Context, supi externalRef2.Supi, params GetTraceConfigDataParams)
	// retrieve a UE's UE Context In AMF Data
	// (GET /{supi}/ue-context-in-amf-data)
	GetUeCtxInAmfData(c *gin.Context, supi externalRef2.Supi, params GetUeCtxInAmfDataParams)
	// retrieve a UE's UE Context In SMF Data
	// (GET /{supi}/ue-context-in-smf-data)
	GetUeCtxInSmfData(c *gin.Context, supi externalRef2.Supi, params GetUeCtxInSmfDataParams)
	// retrieve a UE's UE Context In SMSF Data
	// (GET /{supi}/ue-context-in-smsf-data)
	GetUeCtxInSmsfData(c *gin.Context, supi externalRef2.Supi, params GetUeCtxInSmsfDataParams)
	// retrieve a UE's V2X Subscription Data
	// (GET /{supi}/v2x-data)
	GetV2xData(c *gin.Context, supi externalRef2.Supi, params GetV2xDataParams)
	// retrieve a UE's SUPI or GPSI
	// (GET /{ueId}/id-translation-result)
	GetSupiOrGpsi(c *gin.Context, ueId externalRef2.VarUeId, params GetSupiOrGpsiParams)
	// retrieve a UE's LCS Privacy Subscription Data
	// (GET /{ueId}/lcs-privacy-data)
	GetLcsPrivacyData(c *gin.Context, ueId externalRef2.VarUeId, params GetLcsPrivacyDataParams)
	// subscribe to notifications
	// (POST /{ueId}/sdm-subscriptions)
	Subscribe(c *gin.Context, ueId externalRef2.VarUeId)
	// unsubscribe from notifications
	// (DELETE /{ueId}/sdm-subscriptions/{subscriptionId})
	Unsubscribe(c *gin.Context, ueId externalRef2.VarUeId, subscriptionId string)
	// modify the subscription
	// (PATCH /{ueId}/sdm-subscriptions/{subscriptionId})
	Modify(c *gin.Context, ueId externalRef2.VarUeId, subscriptionId string, params ModifyParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetGroupIdentifiers operation middleware
func (siw *ServerInterfaceWrapper) GetGroupIdentifiers(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupIdentifiersParams

	// ------------- Optional query parameter "ext-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ext-group-id", c.Request.URL.Query(), &params.ExtGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "int-group-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "int-group-id", c.Request.URL.Query(), &params.IntGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter int-group-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-id-ind" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-id-ind", c.Request.URL.Query(), &params.UeIdInd)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-id-ind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupIdentifiers(c, params)
}

// GetSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetSharedData(c *gin.Context) {

	var err error

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSharedDataParams

	// ------------- Required query parameter "shared-data-ids" -------------

	if paramValue := c.Query("shared-data-ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument shared-data-ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "shared-data-ids", c.Request.URL.Query(), &params.SharedDataIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter shared-data-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportedFeatures" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportedFeatures", c.Request.URL.Query(), &params.SupportedFeaturesShouldNotBeUsed)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportedFeatures: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSharedData(c, params)
}

// SubscribeToSharedData operation middleware
func (siw *ServerInterfaceWrapper) SubscribeToSharedData(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeToSharedData(c)
}

// UnsubscribeForSharedData operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeForSharedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnsubscribeForSharedData(c, subscriptionId)
}

// ModifySharedDataSubs operation middleware
func (siw *ServerInterfaceWrapper) ModifySharedDataSubs(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifySharedDataSubsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ModifySharedDataSubs(c, subscriptionId, params)
}

// GetIndividualSharedData operation middleware
func (siw *ServerInterfaceWrapper) GetIndividualSharedData(c *gin.Context) {

	var err error

	// ------------- Path parameter "sharedDataId" -------------
	var sharedDataId SharedDataIds

	err = runtime.BindStyledParameter("simple", false, "sharedDataId", c.Param("sharedDataId"), &sharedDataId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sharedDataId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndividualSharedDataParams

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIndividualSharedData(c, sharedDataId, params)
}

// GetDataSets operation middleware
func (siw *ServerInterfaceWrapper) GetDataSets(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDataSetsParams

	// ------------- Required query parameter "dataset-names" -------------

	if paramValue := c.Query("dataset-names"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument dataset-names is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "dataset-names", c.Request.URL.Query(), &params.DatasetNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dataset-names: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDataSets(c, supi, params)
}

// GetAmData operation middleware
func (siw *ServerInterfaceWrapper) GetAmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAmDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAmData(c, supi, params)
}

// CAGAck operation middleware
func (siw *ServerInterfaceWrapper) CAGAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CAGAck(c, supi)
}

// GetEcrData operation middleware
func (siw *ServerInterfaceWrapper) GetEcrData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEcrDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEcrData(c, supi, params)
}

// SorAckInfo operation middleware
func (siw *ServerInterfaceWrapper) SorAckInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SorAckInfo(c, supi)
}

// SNSSAIsAck operation middleware
func (siw *ServerInterfaceWrapper) SNSSAIsAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SNSSAIsAck(c, supi)
}

// UpdateSORInfo operation middleware
func (siw *ServerInterfaceWrapper) UpdateSORInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSORInfo(c, supi)
}

// UpuAck operation middleware
func (siw *ServerInterfaceWrapper) UpuAck(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpuAck(c, supi)
}

// GetLcsBcaData operation middleware
func (siw *ServerInterfaceWrapper) GetLcsBcaData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLcsBcaDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLcsBcaData(c, supi, params)
}

// GetLcsMoData operation middleware
func (siw *ServerInterfaceWrapper) GetLcsMoData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLcsMoDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLcsMoData(c, supi, params)
}

// GetNSSAI operation middleware
func (siw *ServerInterfaceWrapper) GetNSSAI(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNSSAIParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNSSAI(c, supi, params)
}

// GetSmData operation middleware
func (siw *ServerInterfaceWrapper) GetSmData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value externalRef2.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmData(c, supi, params)
}

// GetSmfSelData operation middleware
func (siw *ServerInterfaceWrapper) GetSmfSelData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmfSelDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmfSelData(c, supi, params)
}

// GetSmsData operation middleware
func (siw *ServerInterfaceWrapper) GetSmsData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmsDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmsData(c, supi, params)
}

// GetSmsMngtData operation middleware
func (siw *ServerInterfaceWrapper) GetSmsMngtData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmsMngtDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmsMngtData(c, supi, params)
}

// GetTraceConfigData operation middleware
func (siw *ServerInterfaceWrapper) GetTraceConfigData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTraceConfigDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef2.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTraceConfigData(c, supi, params)
}

// GetUeCtxInAmfData operation middleware
func (siw *ServerInterfaceWrapper) GetUeCtxInAmfData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUeCtxInAmfDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUeCtxInAmfData(c, supi, params)
}

// GetUeCtxInSmfData operation middleware
func (siw *ServerInterfaceWrapper) GetUeCtxInSmfData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUeCtxInSmfDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUeCtxInSmfData(c, supi, params)
}

// GetUeCtxInSmsfData operation middleware
func (siw *ServerInterfaceWrapper) GetUeCtxInSmsfData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUeCtxInSmsfDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUeCtxInSmsfData(c, supi, params)
}

// GetV2xData operation middleware
func (siw *ServerInterfaceWrapper) GetV2xData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef2.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2xDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV2xData(c, supi, params)
}

// GetSupiOrGpsi operation middleware
func (siw *ServerInterfaceWrapper) GetSupiOrGpsi(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSupiOrGpsiParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "app-port-id" -------------

	if paramValue := c.Query("app-port-id"); paramValue != "" {

		var value AppPortId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'app-port-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.AppPortId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSupiOrGpsi(c, ueId, params)
}

// GetLcsPrivacyData operation middleware
func (siw *ServerInterfaceWrapper) GetLcsPrivacyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLcsPrivacyDataParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLcsPrivacyData(c, ueId, params)
}

// Subscribe operation middleware
func (siw *ServerInterfaceWrapper) Subscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Subscribe(c, ueId)
}

// Unsubscribe operation middleware
func (siw *ServerInterfaceWrapper) Unsubscribe(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Unsubscribe(c, ueId, subscriptionId)
}

// Modify operation middleware
func (siw *ServerInterfaceWrapper) Modify(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef2.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-sdm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ModifyParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Modify(c, ueId, subscriptionId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/group-data/group-identifiers", wrapper.GetGroupIdentifiers)
	router.GET(options.BaseURL+"/shared-data", wrapper.GetSharedData)
	router.POST(options.BaseURL+"/shared-data-subscriptions", wrapper.SubscribeToSharedData)
	router.DELETE(options.BaseURL+"/shared-data-subscriptions/:subscriptionId", wrapper.UnsubscribeForSharedData)
	router.PATCH(options.BaseURL+"/shared-data-subscriptions/:subscriptionId", wrapper.ModifySharedDataSubs)
	router.GET(options.BaseURL+"/shared-data/:sharedDataId", wrapper.GetIndividualSharedData)
	router.GET(options.BaseURL+"/:supi", wrapper.GetDataSets)
	router.GET(options.BaseURL+"/:supi/am-data", wrapper.GetAmData)
	router.PUT(options.BaseURL+"/:supi/am-data/cag-ack", wrapper.CAGAck)
	router.GET(options.BaseURL+"/:supi/am-data/ecr-data", wrapper.GetEcrData)
	router.PUT(options.BaseURL+"/:supi/am-data/sor-ack", wrapper.SorAckInfo)
	router.PUT(options.BaseURL+"/:supi/am-data/subscribed-snssais-ack", wrapper.SNSSAIsAck)
	router.POST(options.BaseURL+"/:supi/am-data/update-sor", wrapper.UpdateSORInfo)
	router.PUT(options.BaseURL+"/:supi/am-data/upu-ack", wrapper.UpuAck)
	router.GET(options.BaseURL+"/:supi/lcs-bca-data", wrapper.GetLcsBcaData)
	router.GET(options.BaseURL+"/:supi/lcs-mo-data", wrapper.GetLcsMoData)
	router.GET(options.BaseURL+"/:supi/nssai", wrapper.GetNSSAI)
	router.GET(options.BaseURL+"/:supi/sm-data", wrapper.GetSmData)
	router.GET(options.BaseURL+"/:supi/smf-select-data", wrapper.GetSmfSelData)
	router.GET(options.BaseURL+"/:supi/sms-data", wrapper.GetSmsData)
	router.GET(options.BaseURL+"/:supi/sms-mng-data", wrapper.GetSmsMngtData)
	router.GET(options.BaseURL+"/:supi/trace-data", wrapper.GetTraceConfigData)
	router.GET(options.BaseURL+"/:supi/ue-context-in-amf-data", wrapper.GetUeCtxInAmfData)
	router.GET(options.BaseURL+"/:supi/ue-context-in-smf-data", wrapper.GetUeCtxInSmfData)
	router.GET(options.BaseURL+"/:supi/ue-context-in-smsf-data", wrapper.GetUeCtxInSmsfData)
	router.GET(options.BaseURL+"/:supi/v2x-data", wrapper.GetV2xData)
	router.GET(options.BaseURL+"/:ueId/id-translation-result", wrapper.GetSupiOrGpsi)
	router.GET(options.BaseURL+"/:ueId/lcs-privacy-data", wrapper.GetLcsPrivacyData)
	router.POST(options.BaseURL+"/:ueId/sdm-subscriptions", wrapper.Subscribe)
	router.DELETE(options.BaseURL+"/:ueId/sdm-subscriptions/:subscriptionId", wrapper.Unsubscribe)
	router.PATCH(options.BaseURL+"/:ueId/sdm-subscriptions/:subscriptionId", wrapper.Modify)
}

type GetGroupIdentifiersRequestObject struct {
	Params GetGroupIdentifiersParams
}

type GetGroupIdentifiersResponseObject interface {
	VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error
}

type GetGroupIdentifiers200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetGroupIdentifiers200JSONResponse struct {
	Body    GroupIdentifiers
	Headers GetGroupIdentifiers200ResponseHeaders
}

func (response GetGroupIdentifiers200JSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetGroupIdentifiers400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers400ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiers404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers404ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiers500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers500ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiers503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetGroupIdentifiers503ApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetGroupIdentifiersdefaultApplicationProblemPlusJSONResponse) VisitGetGroupIdentifiersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSharedDataRequestObject struct {
	Params GetSharedDataParams
}

type GetSharedDataResponseObject interface {
	VisitGetSharedDataResponse(w http.ResponseWriter) error
}

type GetSharedData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSharedData200JSONResponse struct {
	Body    []SharedData
	Headers GetSharedData200ResponseHeaders
}

func (response GetSharedData200JSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetSharedData400ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetSharedData404ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetSharedData500ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetSharedData503ApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscribeToSharedDataRequestObject struct {
	Body *SubscribeToSharedDataJSONRequestBody
}

type SubscribeToSharedDataResponseObject interface {
	VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error
}

type SubscribeToSharedData201ResponseHeaders struct {
	Location string
}

type SubscribeToSharedData201JSONResponse struct {
	Body    SdmSubscription
	Headers SubscribeToSharedData201ResponseHeaders
}

func (response SubscribeToSharedData201JSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscribeToSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response SubscribeToSharedData400ApplicationProblemPlusJSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SubscribeToSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response SubscribeToSharedData404ApplicationProblemPlusJSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type SubscribeToSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response SubscribeToSharedDatadefaultApplicationProblemPlusJSONResponse) VisitSubscribeToSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UnsubscribeForSharedDataRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type UnsubscribeForSharedDataResponseObject interface {
	VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error
}

type UnsubscribeForSharedData204Response struct {
}

func (response UnsubscribeForSharedData204Response) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnsubscribeForSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData400ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData404ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData500ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response UnsubscribeForSharedData503ApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UnsubscribeForSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response UnsubscribeForSharedDatadefaultApplicationProblemPlusJSONResponse) VisitUnsubscribeForSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifySharedDataSubsRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Params         ModifySharedDataSubsParams
	Body           *ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody
}

type ModifySharedDataSubsResponseObject interface {
	VisitModifySharedDataSubsResponse(w http.ResponseWriter) error
}

type ModifySharedDataSubs200JSONResponse struct {
	union json.RawMessage
}

func (response ModifySharedDataSubs200JSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type ModifySharedDataSubs400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs400ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs403ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs404ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs500ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubs503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response ModifySharedDataSubs503ApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ModifySharedDataSubsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifySharedDataSubsdefaultApplicationProblemPlusJSONResponse) VisitModifySharedDataSubsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedDataRequestObject struct {
	SharedDataId SharedDataIds `json:"sharedDataId"`
	Params       GetIndividualSharedDataParams
}

type GetIndividualSharedDataResponseObject interface {
	VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error
}

type GetIndividualSharedData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetIndividualSharedData200JSONResponse struct {
	Body    SharedData
	Headers GetIndividualSharedData200ResponseHeaders
}

func (response GetIndividualSharedData200JSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIndividualSharedData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData400ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData404ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData500ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetIndividualSharedData503ApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetIndividualSharedDatadefaultApplicationProblemPlusJSONResponse) VisitGetIndividualSharedDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDataSetsRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetDataSetsParams
}

type GetDataSetsResponseObject interface {
	VisitGetDataSetsResponse(w http.ResponseWriter) error
}

type GetDataSets200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetDataSets200JSONResponse struct {
	Body    SubscriptionDataSets
	Headers GetDataSets200ResponseHeaders
}

func (response GetDataSets200JSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDataSets400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetDataSets400ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetDataSets404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetDataSets404ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetDataSets500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetDataSets500ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetDataSets503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetDataSets503ApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetDataSetsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetDataSetsdefaultApplicationProblemPlusJSONResponse) VisitGetDataSetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAmDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetAmDataParams
}

type GetAmDataResponseObject interface {
	VisitGetAmDataResponse(w http.ResponseWriter) error
}

type GetAmData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetAmData200JSONResponse struct {
	Body    AccessAndMobilitySubscriptionData
	Headers GetAmData200ResponseHeaders
}

func (response GetAmData200JSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAmData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetAmData400ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetAmData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetAmData404ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetAmData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetAmData500ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetAmData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetAmData503ApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetAmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetAmDatadefaultApplicationProblemPlusJSONResponse) VisitGetAmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CAGAckRequestObject struct {
	Supi externalRef2.Supi `json:"supi"`
	Body *CAGAckJSONRequestBody
}

type CAGAckResponseObject interface {
	VisitCAGAckResponse(w http.ResponseWriter) error
}

type CAGAck204Response struct {
}

func (response CAGAck204Response) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CAGAck400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response CAGAck400ApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type CAGAck500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response CAGAck500ApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type CAGAck503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response CAGAck503ApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type CAGAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response CAGAckdefaultApplicationProblemPlusJSONResponse) VisitCAGAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEcrDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetEcrDataParams
}

type GetEcrDataResponseObject interface {
	VisitGetEcrDataResponse(w http.ResponseWriter) error
}

type GetEcrData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetEcrData200JSONResponse struct {
	Body    EnhancedCoverageRestrictionData
	Headers GetEcrData200ResponseHeaders
}

func (response GetEcrData200JSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEcrData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetEcrData400ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetEcrData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetEcrData404ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetEcrData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetEcrData500ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetEcrData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetEcrData503ApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetEcrDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetEcrDatadefaultApplicationProblemPlusJSONResponse) VisitGetEcrDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SorAckInfoRequestObject struct {
	Supi externalRef2.Supi `json:"supi"`
	Body *SorAckInfoJSONRequestBody
}

type SorAckInfoResponseObject interface {
	VisitSorAckInfoResponse(w http.ResponseWriter) error
}

type SorAckInfo204Response struct {
}

func (response SorAckInfo204Response) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SorAckInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response SorAckInfo400ApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SorAckInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response SorAckInfo500ApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type SorAckInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response SorAckInfo503ApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SorAckInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response SorAckInfodefaultApplicationProblemPlusJSONResponse) VisitSorAckInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SNSSAIsAckRequestObject struct {
	Supi externalRef2.Supi `json:"supi"`
	Body *SNSSAIsAckJSONRequestBody
}

type SNSSAIsAckResponseObject interface {
	VisitSNSSAIsAckResponse(w http.ResponseWriter) error
}

type SNSSAIsAck204Response struct {
}

func (response SNSSAIsAck204Response) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SNSSAIsAck400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response SNSSAIsAck400ApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type SNSSAIsAck500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response SNSSAIsAck500ApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type SNSSAIsAck503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response SNSSAIsAck503ApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SNSSAIsAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response SNSSAIsAckdefaultApplicationProblemPlusJSONResponse) VisitSNSSAIsAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSORInfoRequestObject struct {
	Supi externalRef2.Supi `json:"supi"`
	Body *UpdateSORInfoJSONRequestBody
}

type UpdateSORInfoResponseObject interface {
	VisitUpdateSORInfoResponse(w http.ResponseWriter) error
}

type UpdateSORInfo200JSONResponse SorInfo

func (response UpdateSORInfo200JSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(SorInfo(response))
}

type UpdateSORInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo400ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfo404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo404ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo500ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateSORInfo503ApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpdateSORInfodefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response UpdateSORInfodefaultApplicationProblemPlusJSONResponse) VisitUpdateSORInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpuAckRequestObject struct {
	Supi externalRef2.Supi `json:"supi"`
	Body *UpuAckJSONRequestBody
}

type UpuAckResponseObject interface {
	VisitUpuAckResponse(w http.ResponseWriter) error
}

type UpuAck204Response struct {
}

func (response UpuAck204Response) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpuAck400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response UpuAck400ApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type UpuAck500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response UpuAck500ApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type UpuAck503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response UpuAck503ApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UpuAckdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response UpuAckdefaultApplicationProblemPlusJSONResponse) VisitUpuAckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsBcaDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetLcsBcaDataParams
}

type GetLcsBcaDataResponseObject interface {
	VisitGetLcsBcaDataResponse(w http.ResponseWriter) error
}

type GetLcsBcaData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetLcsBcaData200JSONResponse struct {
	Body    LcsBroadcastAssistanceTypesData
	Headers GetLcsBcaData200ResponseHeaders
}

func (response GetLcsBcaData200JSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsBcaData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData400ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData404ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData500ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetLcsBcaData503ApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetLcsBcaDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetLcsBcaDatadefaultApplicationProblemPlusJSONResponse) VisitGetLcsBcaDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsMoDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetLcsMoDataParams
}

type GetLcsMoDataResponseObject interface {
	VisitGetLcsMoDataResponse(w http.ResponseWriter) error
}

type GetLcsMoData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetLcsMoData200JSONResponse struct {
	Body    LcsMoData
	Headers GetLcsMoData200ResponseHeaders
}

func (response GetLcsMoData200JSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsMoData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData400ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetLcsMoData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData404ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetLcsMoData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData500ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetLcsMoData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetLcsMoData503ApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetLcsMoDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetLcsMoDatadefaultApplicationProblemPlusJSONResponse) VisitGetLcsMoDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNSSAIRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetNSSAIParams
}

type GetNSSAIResponseObject interface {
	VisitGetNSSAIResponse(w http.ResponseWriter) error
}

type GetNSSAI200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetNSSAI200JSONResponse struct {
	Body    Nssai
	Headers GetNSSAI200ResponseHeaders
}

func (response GetNSSAI200JSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetNSSAI400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI400ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetNSSAI404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI404ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetNSSAI500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI500ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetNSSAI503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetNSSAI503ApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetNSSAIdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetNSSAIdefaultApplicationProblemPlusJSONResponse) VisitGetNSSAIResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetSmDataParams
}

type GetSmDataResponseObject interface {
	VisitGetSmDataResponse(w http.ResponseWriter) error
}

type GetSmData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmData200JSONResponse struct {
	Body    []SessionManagementSubscriptionData
	Headers GetSmData200ResponseHeaders
}

func (response GetSmData200JSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmData400ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmData404ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmData500ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmData503ApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSmDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmfSelDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetSmfSelDataParams
}

type GetSmfSelDataResponseObject interface {
	VisitGetSmfSelDataResponse(w http.ResponseWriter) error
}

type GetSmfSelData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmfSelData200JSONResponse struct {
	Body    SmfSelectionSubscriptionData
	Headers GetSmfSelData200ResponseHeaders
}

func (response GetSmfSelData200JSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmfSelData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData400ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmfSelData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData404ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmfSelData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData500ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmfSelData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmfSelData503ApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmfSelDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSmfSelDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmfSelDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetSmsDataParams
}

type GetSmsDataResponseObject interface {
	VisitGetSmsDataResponse(w http.ResponseWriter) error
}

type GetSmsData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmsData200JSONResponse struct {
	Body    SmsSubscriptionData
	Headers GetSmsData200ResponseHeaders
}

func (response GetSmsData200JSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmsData400ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmsData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmsData404ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmsData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmsData500ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmsData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmsData503ApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmsDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSmsDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmsDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsMngtDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetSmsMngtDataParams
}

type GetSmsMngtDataResponseObject interface {
	VisitGetSmsMngtDataResponse(w http.ResponseWriter) error
}

type GetSmsMngtData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSmsMngtData200JSONResponse struct {
	Body    SmsManagementSubscriptionData
	Headers GetSmsMngtData200ResponseHeaders
}

func (response GetSmsMngtData200JSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSmsMngtData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData400ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData404ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData500ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmsMngtData503ApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSmsMngtDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSmsMngtDatadefaultApplicationProblemPlusJSONResponse) VisitGetSmsMngtDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTraceConfigDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetTraceConfigDataParams
}

type GetTraceConfigDataResponseObject interface {
	VisitGetTraceConfigDataResponse(w http.ResponseWriter) error
}

type GetTraceConfigData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetTraceConfigData200JSONResponse struct {
	Body    TraceDataResponse
	Headers GetTraceConfigData200ResponseHeaders
}

func (response GetTraceConfigData200JSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTraceConfigData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData400ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData404ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData500ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetTraceConfigData503ApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetTraceConfigDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetTraceConfigDatadefaultApplicationProblemPlusJSONResponse) VisitGetTraceConfigDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUeCtxInAmfDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetUeCtxInAmfDataParams
}

type GetUeCtxInAmfDataResponseObject interface {
	VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error
}

type GetUeCtxInAmfData200JSONResponse UeContextInAmfData

func (response GetUeCtxInAmfData200JSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(UeContextInAmfData(response))
}

type GetUeCtxInAmfData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData400ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData404ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData500ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInAmfData503ApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInAmfDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetUeCtxInAmfDatadefaultApplicationProblemPlusJSONResponse) VisitGetUeCtxInAmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUeCtxInSmfDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetUeCtxInSmfDataParams
}

type GetUeCtxInSmfDataResponseObject interface {
	VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error
}

type GetUeCtxInSmfData200JSONResponse UeContextInSmfData

func (response GetUeCtxInSmfData200JSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(UeContextInSmfData(response))
}

type GetUeCtxInSmfData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData400ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData404ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData500ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmfData503ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmfDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetUeCtxInSmfDatadefaultApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUeCtxInSmsfDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetUeCtxInSmsfDataParams
}

type GetUeCtxInSmsfDataResponseObject interface {
	VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error
}

type GetUeCtxInSmsfData200JSONResponse UeContextInSmsfData

func (response GetUeCtxInSmsfData200JSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(UeContextInSmsfData(response))
}

type GetUeCtxInSmsfData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData400ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData404ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData500ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetUeCtxInSmsfData503ApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetUeCtxInSmsfDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetUeCtxInSmsfDatadefaultApplicationProblemPlusJSONResponse) VisitGetUeCtxInSmsfDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetV2xDataRequestObject struct {
	Supi   externalRef2.Supi `json:"supi"`
	Params GetV2xDataParams
}

type GetV2xDataResponseObject interface {
	VisitGetV2xDataResponse(w http.ResponseWriter) error
}

type GetV2xData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetV2xData200JSONResponse struct {
	Body    V2xSubscriptionData
	Headers GetV2xData200ResponseHeaders
}

func (response GetV2xData200JSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetV2xData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetV2xData400ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetV2xData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetV2xData404ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetV2xData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetV2xData500ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetV2xData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetV2xData503ApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetV2xDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetV2xDatadefaultApplicationProblemPlusJSONResponse) VisitGetV2xDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSupiOrGpsiRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params GetSupiOrGpsiParams
}

type GetSupiOrGpsiResponseObject interface {
	VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error
}

type GetSupiOrGpsi200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetSupiOrGpsi200JSONResponse struct {
	Body    IdTranslationResult
	Headers GetSupiOrGpsi200ResponseHeaders
}

func (response GetSupiOrGpsi200JSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSupiOrGpsi400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi400ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsi404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi404ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsi500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi500ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsi503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetSupiOrGpsi503ApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetSupiOrGpsidefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetSupiOrGpsidefaultApplicationProblemPlusJSONResponse) VisitGetSupiOrGpsiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsPrivacyDataRequestObject struct {
	UeId   externalRef2.VarUeId `json:"ueId"`
	Params GetLcsPrivacyDataParams
}

type GetLcsPrivacyDataResponseObject interface {
	VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error
}

type GetLcsPrivacyData200ResponseHeaders struct {
	CacheControl *string
	ETag         *string
	LastModified *string
}

type GetLcsPrivacyData200JSONResponse struct {
	Body    LcsPrivacyData
	Headers GetLcsPrivacyData200ResponseHeaders
}

func (response GetLcsPrivacyData200JSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	if response.Headers.CacheControl != nil {
		w.Header().Set("Cache-Control", fmt.Sprint(*response.Headers.CacheControl))
	}
	if response.Headers.ETag != nil {
		w.Header().Set("ETag", fmt.Sprint(*response.Headers.ETag))
	}
	if response.Headers.LastModified != nil {
		w.Header().Set("Last-Modified", fmt.Sprint(*response.Headers.LastModified))
	}
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetLcsPrivacyData400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData400ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyData404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData404ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyData500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData500ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyData503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response GetLcsPrivacyData503ApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response GetLcsPrivacyDatadefaultApplicationProblemPlusJSONResponse) VisitGetLcsPrivacyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SubscribeRequestObject struct {
	UeId externalRef2.VarUeId `json:"ueId"`
	Body *SubscribeJSONRequestBody
}

type SubscribeResponseObject interface {
	VisitSubscribeResponse(w http.ResponseWriter) error
}

type Subscribe201ResponseHeaders struct {
	Location string
}

type Subscribe201JSONResponse struct {
	Body    SdmSubscription
	Headers Subscribe201ResponseHeaders
}

func (response Subscribe201JSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type Subscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response Subscribe400ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type Subscribe404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response Subscribe404ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type Subscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response Subscribe500ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type Subscribe501ApplicationProblemPlusJSONResponse struct {
	externalRef2.N501ApplicationProblemPlusJSONResponse
}

func (response Subscribe501ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N501ApplicationProblemPlusJSONResponse))
}

type Subscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response Subscribe503ApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type SubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response SubscribedefaultApplicationProblemPlusJSONResponse) VisitSubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UnsubscribeRequestObject struct {
	UeId           externalRef2.VarUeId `json:"ueId"`
	SubscriptionId string               `json:"subscriptionId"`
}

type UnsubscribeResponseObject interface {
	VisitUnsubscribeResponse(w http.ResponseWriter) error
}

type Unsubscribe204Response struct {
}

func (response Unsubscribe204Response) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Unsubscribe400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe400ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type Unsubscribe404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe404ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type Unsubscribe500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe500ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type Unsubscribe503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response Unsubscribe503ApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type UnsubscribedefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response UnsubscribedefaultApplicationProblemPlusJSONResponse) VisitUnsubscribeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ModifyRequestObject struct {
	UeId           externalRef2.VarUeId `json:"ueId"`
	SubscriptionId string               `json:"subscriptionId"`
	Params         ModifyParams
	Body           *ModifyApplicationMergePatchPlusJSONRequestBody
}

type ModifyResponseObject interface {
	VisitModifyResponse(w http.ResponseWriter) error
}

type Modify200JSONResponse struct {
	union json.RawMessage
}

func (response Modify200JSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type Modify400ApplicationProblemPlusJSONResponse struct {
	externalRef2.N400ApplicationProblemPlusJSONResponse
}

func (response Modify400ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type Modify403ApplicationProblemPlusJSONResponse struct {
	externalRef2.N403ApplicationProblemPlusJSONResponse
}

func (response Modify403ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type Modify404ApplicationProblemPlusJSONResponse struct {
	externalRef2.N404ApplicationProblemPlusJSONResponse
}

func (response Modify404ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type Modify500ApplicationProblemPlusJSONResponse struct {
	externalRef2.N500ApplicationProblemPlusJSONResponse
}

func (response Modify500ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type Modify503ApplicationProblemPlusJSONResponse struct {
	externalRef2.N503ApplicationProblemPlusJSONResponse
}

func (response Modify503ApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef2.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ModifydefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef2.ProblemDetails
	StatusCode int
}

func (response ModifydefaultApplicationProblemPlusJSONResponse) VisitModifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Mapping of Group Identifiers
	// (GET /group-data/group-identifiers)
	GetGroupIdentifiers(ctx context.Context, request GetGroupIdentifiersRequestObject) (GetGroupIdentifiersResponseObject, error)
	// retrieve shared data
	// (GET /shared-data)
	GetSharedData(ctx context.Context, request GetSharedDataRequestObject) (GetSharedDataResponseObject, error)
	// subscribe to notifications for shared data
	// (POST /shared-data-subscriptions)
	SubscribeToSharedData(ctx context.Context, request SubscribeToSharedDataRequestObject) (SubscribeToSharedDataResponseObject, error)
	// unsubscribe from notifications for shared data
	// (DELETE /shared-data-subscriptions/{subscriptionId})
	UnsubscribeForSharedData(ctx context.Context, request UnsubscribeForSharedDataRequestObject) (UnsubscribeForSharedDataResponseObject, error)
	// modify the subscription
	// (PATCH /shared-data-subscriptions/{subscriptionId})
	ModifySharedDataSubs(ctx context.Context, request ModifySharedDataSubsRequestObject) (ModifySharedDataSubsResponseObject, error)
	// retrieve the individual shared data
	// (GET /shared-data/{sharedDataId})
	GetIndividualSharedData(ctx context.Context, request GetIndividualSharedDataRequestObject) (GetIndividualSharedDataResponseObject, error)
	// retrieve multiple data sets
	// (GET /{supi})
	GetDataSets(ctx context.Context, request GetDataSetsRequestObject) (GetDataSetsResponseObject, error)
	// retrieve a UE's Access and Mobility Subscription Data
	// (GET /{supi}/am-data)
	GetAmData(ctx context.Context, request GetAmDataRequestObject) (GetAmDataResponseObject, error)
	// Nudm_Sdm Info operation for CAG acknowledgement
	// (PUT /{supi}/am-data/cag-ack)
	CAGAck(ctx context.Context, request CAGAckRequestObject) (CAGAckResponseObject, error)
	// retrieve a UE's subscribed Enhanced Coverage Restriction Data
	// (GET /{supi}/am-data/ecr-data)
	GetEcrData(ctx context.Context, request GetEcrDataRequestObject) (GetEcrDataResponseObject, error)
	// Nudm_Sdm Info service operation
	// (PUT /{supi}/am-data/sor-ack)
	SorAckInfo(ctx context.Context, request SorAckInfoRequestObject) (SorAckInfoResponseObject, error)
	// Nudm_Sdm Info operation for S-NSSAIs acknowledgement
	// (PUT /{supi}/am-data/subscribed-snssais-ack)
	SNSSAIsAck(ctx context.Context, request SNSSAIsAckRequestObject) (SNSSAIsAckResponseObject, error)
	// Nudm_Sdm custom operation to trigger SOR info update
	// (POST /{supi}/am-data/update-sor)
	UpdateSORInfo(ctx context.Context, request UpdateSORInfoRequestObject) (UpdateSORInfoResponseObject, error)
	// Nudm_Sdm Info for UPU service operation
	// (PUT /{supi}/am-data/upu-ack)
	UpuAck(ctx context.Context, request UpuAckRequestObject) (UpuAckResponseObject, error)
	// retrieve a UE's LCS Broadcast Assistance Data Types Subscription Data
	// (GET /{supi}/lcs-bca-data)
	GetLcsBcaData(ctx context.Context, request GetLcsBcaDataRequestObject) (GetLcsBcaDataResponseObject, error)
	// retrieve a UE's LCS Mobile Originated Subscription Data
	// (GET /{supi}/lcs-mo-data)
	GetLcsMoData(ctx context.Context, request GetLcsMoDataRequestObject) (GetLcsMoDataResponseObject, error)
	// retrieve a UE's subscribed NSSAI
	// (GET /{supi}/nssai)
	GetNSSAI(ctx context.Context, request GetNSSAIRequestObject) (GetNSSAIResponseObject, error)
	// retrieve a UE's Session Management Subscription Data
	// (GET /{supi}/sm-data)
	GetSmData(ctx context.Context, request GetSmDataRequestObject) (GetSmDataResponseObject, error)
	// retrieve a UE's SMF Selection Subscription Data
	// (GET /{supi}/smf-select-data)
	GetSmfSelData(ctx context.Context, request GetSmfSelDataRequestObject) (GetSmfSelDataResponseObject, error)
	// retrieve a UE's SMS Subscription Data
	// (GET /{supi}/sms-data)
	GetSmsData(ctx context.Context, request GetSmsDataRequestObject) (GetSmsDataResponseObject, error)
	// retrieve a UE's SMS Management Subscription Data
	// (GET /{supi}/sms-mng-data)
	GetSmsMngtData(ctx context.Context, request GetSmsMngtDataRequestObject) (GetSmsMngtDataResponseObject, error)
	// retrieve a UE's Trace Configuration Data
	// (GET /{supi}/trace-data)
	GetTraceConfigData(ctx context.Context, request GetTraceConfigDataRequestObject) (GetTraceConfigDataResponseObject, error)
	// retrieve a UE's UE Context In AMF Data
	// (GET /{supi}/ue-context-in-amf-data)
	GetUeCtxInAmfData(ctx context.Context, request GetUeCtxInAmfDataRequestObject) (GetUeCtxInAmfDataResponseObject, error)
	// retrieve a UE's UE Context In SMF Data
	// (GET /{supi}/ue-context-in-smf-data)
	GetUeCtxInSmfData(ctx context.Context, request GetUeCtxInSmfDataRequestObject) (GetUeCtxInSmfDataResponseObject, error)
	// retrieve a UE's UE Context In SMSF Data
	// (GET /{supi}/ue-context-in-smsf-data)
	GetUeCtxInSmsfData(ctx context.Context, request GetUeCtxInSmsfDataRequestObject) (GetUeCtxInSmsfDataResponseObject, error)
	// retrieve a UE's V2X Subscription Data
	// (GET /{supi}/v2x-data)
	GetV2xData(ctx context.Context, request GetV2xDataRequestObject) (GetV2xDataResponseObject, error)
	// retrieve a UE's SUPI or GPSI
	// (GET /{ueId}/id-translation-result)
	GetSupiOrGpsi(ctx context.Context, request GetSupiOrGpsiRequestObject) (GetSupiOrGpsiResponseObject, error)
	// retrieve a UE's LCS Privacy Subscription Data
	// (GET /{ueId}/lcs-privacy-data)
	GetLcsPrivacyData(ctx context.Context, request GetLcsPrivacyDataRequestObject) (GetLcsPrivacyDataResponseObject, error)
	// subscribe to notifications
	// (POST /{ueId}/sdm-subscriptions)
	Subscribe(ctx context.Context, request SubscribeRequestObject) (SubscribeResponseObject, error)
	// unsubscribe from notifications
	// (DELETE /{ueId}/sdm-subscriptions/{subscriptionId})
	Unsubscribe(ctx context.Context, request UnsubscribeRequestObject) (UnsubscribeResponseObject, error)
	// modify the subscription
	// (PATCH /{ueId}/sdm-subscriptions/{subscriptionId})
	Modify(ctx context.Context, request ModifyRequestObject) (ModifyResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetGroupIdentifiers operation middleware
func (sh *strictHandler) GetGroupIdentifiers(ctx *gin.Context, params GetGroupIdentifiersParams) {
	var request GetGroupIdentifiersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupIdentifiers(ctx, request.(GetGroupIdentifiersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupIdentifiers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGroupIdentifiersResponseObject); ok {
		if err := validResponse.VisitGetGroupIdentifiersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSharedData operation middleware
func (sh *strictHandler) GetSharedData(ctx *gin.Context, params GetSharedDataParams) {
	var request GetSharedDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSharedData(ctx, request.(GetSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSharedDataResponseObject); ok {
		if err := validResponse.VisitGetSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeToSharedData operation middleware
func (sh *strictHandler) SubscribeToSharedData(ctx *gin.Context) {
	var request SubscribeToSharedDataRequestObject

	var body SubscribeToSharedDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeToSharedData(ctx, request.(SubscribeToSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeToSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeToSharedDataResponseObject); ok {
		if err := validResponse.VisitSubscribeToSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnsubscribeForSharedData operation middleware
func (sh *strictHandler) UnsubscribeForSharedData(ctx *gin.Context, subscriptionId string) {
	var request UnsubscribeForSharedDataRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UnsubscribeForSharedData(ctx, request.(UnsubscribeForSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnsubscribeForSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeForSharedDataResponseObject); ok {
		if err := validResponse.VisitUnsubscribeForSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ModifySharedDataSubs operation middleware
func (sh *strictHandler) ModifySharedDataSubs(ctx *gin.Context, subscriptionId string, params ModifySharedDataSubsParams) {
	var request ModifySharedDataSubsRequestObject

	request.SubscriptionId = subscriptionId
	request.Params = params

	var body ModifySharedDataSubsApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ModifySharedDataSubs(ctx, request.(ModifySharedDataSubsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ModifySharedDataSubs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifySharedDataSubsResponseObject); ok {
		if err := validResponse.VisitModifySharedDataSubsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIndividualSharedData operation middleware
func (sh *strictHandler) GetIndividualSharedData(ctx *gin.Context, sharedDataId SharedDataIds, params GetIndividualSharedDataParams) {
	var request GetIndividualSharedDataRequestObject

	request.SharedDataId = sharedDataId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIndividualSharedData(ctx, request.(GetIndividualSharedDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIndividualSharedData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetIndividualSharedDataResponseObject); ok {
		if err := validResponse.VisitGetIndividualSharedDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDataSets operation middleware
func (sh *strictHandler) GetDataSets(ctx *gin.Context, supi externalRef2.Supi, params GetDataSetsParams) {
	var request GetDataSetsRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDataSets(ctx, request.(GetDataSetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDataSets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetDataSetsResponseObject); ok {
		if err := validResponse.VisitGetDataSetsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAmData operation middleware
func (sh *strictHandler) GetAmData(ctx *gin.Context, supi externalRef2.Supi, params GetAmDataParams) {
	var request GetAmDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAmData(ctx, request.(GetAmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAmDataResponseObject); ok {
		if err := validResponse.VisitGetAmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CAGAck operation middleware
func (sh *strictHandler) CAGAck(ctx *gin.Context, supi externalRef2.Supi) {
	var request CAGAckRequestObject

	request.Supi = supi

	var body CAGAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CAGAck(ctx, request.(CAGAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CAGAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CAGAckResponseObject); ok {
		if err := validResponse.VisitCAGAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEcrData operation middleware
func (sh *strictHandler) GetEcrData(ctx *gin.Context, supi externalRef2.Supi, params GetEcrDataParams) {
	var request GetEcrDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEcrData(ctx, request.(GetEcrDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEcrData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEcrDataResponseObject); ok {
		if err := validResponse.VisitGetEcrDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SorAckInfo operation middleware
func (sh *strictHandler) SorAckInfo(ctx *gin.Context, supi externalRef2.Supi) {
	var request SorAckInfoRequestObject

	request.Supi = supi

	var body SorAckInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SorAckInfo(ctx, request.(SorAckInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SorAckInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SorAckInfoResponseObject); ok {
		if err := validResponse.VisitSorAckInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SNSSAIsAck operation middleware
func (sh *strictHandler) SNSSAIsAck(ctx *gin.Context, supi externalRef2.Supi) {
	var request SNSSAIsAckRequestObject

	request.Supi = supi

	var body SNSSAIsAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SNSSAIsAck(ctx, request.(SNSSAIsAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SNSSAIsAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SNSSAIsAckResponseObject); ok {
		if err := validResponse.VisitSNSSAIsAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSORInfo operation middleware
func (sh *strictHandler) UpdateSORInfo(ctx *gin.Context, supi externalRef2.Supi) {
	var request UpdateSORInfoRequestObject

	request.Supi = supi

	var body UpdateSORInfoJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSORInfo(ctx, request.(UpdateSORInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSORInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSORInfoResponseObject); ok {
		if err := validResponse.VisitUpdateSORInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpuAck operation middleware
func (sh *strictHandler) UpuAck(ctx *gin.Context, supi externalRef2.Supi) {
	var request UpuAckRequestObject

	request.Supi = supi

	var body UpuAckJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpuAck(ctx, request.(UpuAckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpuAck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpuAckResponseObject); ok {
		if err := validResponse.VisitUpuAckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLcsBcaData operation middleware
func (sh *strictHandler) GetLcsBcaData(ctx *gin.Context, supi externalRef2.Supi, params GetLcsBcaDataParams) {
	var request GetLcsBcaDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLcsBcaData(ctx, request.(GetLcsBcaDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLcsBcaData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLcsBcaDataResponseObject); ok {
		if err := validResponse.VisitGetLcsBcaDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLcsMoData operation middleware
func (sh *strictHandler) GetLcsMoData(ctx *gin.Context, supi externalRef2.Supi, params GetLcsMoDataParams) {
	var request GetLcsMoDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLcsMoData(ctx, request.(GetLcsMoDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLcsMoData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLcsMoDataResponseObject); ok {
		if err := validResponse.VisitGetLcsMoDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNSSAI operation middleware
func (sh *strictHandler) GetNSSAI(ctx *gin.Context, supi externalRef2.Supi, params GetNSSAIParams) {
	var request GetNSSAIRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNSSAI(ctx, request.(GetNSSAIRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNSSAI")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNSSAIResponseObject); ok {
		if err := validResponse.VisitGetNSSAIResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmData operation middleware
func (sh *strictHandler) GetSmData(ctx *gin.Context, supi externalRef2.Supi, params GetSmDataParams) {
	var request GetSmDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmData(ctx, request.(GetSmDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmDataResponseObject); ok {
		if err := validResponse.VisitGetSmDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmfSelData operation middleware
func (sh *strictHandler) GetSmfSelData(ctx *gin.Context, supi externalRef2.Supi, params GetSmfSelDataParams) {
	var request GetSmfSelDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmfSelData(ctx, request.(GetSmfSelDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmfSelData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmfSelDataResponseObject); ok {
		if err := validResponse.VisitGetSmfSelDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmsData operation middleware
func (sh *strictHandler) GetSmsData(ctx *gin.Context, supi externalRef2.Supi, params GetSmsDataParams) {
	var request GetSmsDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmsData(ctx, request.(GetSmsDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmsData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmsDataResponseObject); ok {
		if err := validResponse.VisitGetSmsDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmsMngtData operation middleware
func (sh *strictHandler) GetSmsMngtData(ctx *gin.Context, supi externalRef2.Supi, params GetSmsMngtDataParams) {
	var request GetSmsMngtDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmsMngtData(ctx, request.(GetSmsMngtDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmsMngtData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmsMngtDataResponseObject); ok {
		if err := validResponse.VisitGetSmsMngtDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTraceConfigData operation middleware
func (sh *strictHandler) GetTraceConfigData(ctx *gin.Context, supi externalRef2.Supi, params GetTraceConfigDataParams) {
	var request GetTraceConfigDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTraceConfigData(ctx, request.(GetTraceConfigDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTraceConfigData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTraceConfigDataResponseObject); ok {
		if err := validResponse.VisitGetTraceConfigDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUeCtxInAmfData operation middleware
func (sh *strictHandler) GetUeCtxInAmfData(ctx *gin.Context, supi externalRef2.Supi, params GetUeCtxInAmfDataParams) {
	var request GetUeCtxInAmfDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUeCtxInAmfData(ctx, request.(GetUeCtxInAmfDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUeCtxInAmfData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUeCtxInAmfDataResponseObject); ok {
		if err := validResponse.VisitGetUeCtxInAmfDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUeCtxInSmfData operation middleware
func (sh *strictHandler) GetUeCtxInSmfData(ctx *gin.Context, supi externalRef2.Supi, params GetUeCtxInSmfDataParams) {
	var request GetUeCtxInSmfDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUeCtxInSmfData(ctx, request.(GetUeCtxInSmfDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUeCtxInSmfData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUeCtxInSmfDataResponseObject); ok {
		if err := validResponse.VisitGetUeCtxInSmfDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUeCtxInSmsfData operation middleware
func (sh *strictHandler) GetUeCtxInSmsfData(ctx *gin.Context, supi externalRef2.Supi, params GetUeCtxInSmsfDataParams) {
	var request GetUeCtxInSmsfDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUeCtxInSmsfData(ctx, request.(GetUeCtxInSmsfDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUeCtxInSmsfData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUeCtxInSmsfDataResponseObject); ok {
		if err := validResponse.VisitGetUeCtxInSmsfDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2xData operation middleware
func (sh *strictHandler) GetV2xData(ctx *gin.Context, supi externalRef2.Supi, params GetV2xDataParams) {
	var request GetV2xDataRequestObject

	request.Supi = supi
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2xData(ctx, request.(GetV2xDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2xData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetV2xDataResponseObject); ok {
		if err := validResponse.VisitGetV2xDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSupiOrGpsi operation middleware
func (sh *strictHandler) GetSupiOrGpsi(ctx *gin.Context, ueId externalRef2.VarUeId, params GetSupiOrGpsiParams) {
	var request GetSupiOrGpsiRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSupiOrGpsi(ctx, request.(GetSupiOrGpsiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSupiOrGpsi")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSupiOrGpsiResponseObject); ok {
		if err := validResponse.VisitGetSupiOrGpsiResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLcsPrivacyData operation middleware
func (sh *strictHandler) GetLcsPrivacyData(ctx *gin.Context, ueId externalRef2.VarUeId, params GetLcsPrivacyDataParams) {
	var request GetLcsPrivacyDataRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLcsPrivacyData(ctx, request.(GetLcsPrivacyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLcsPrivacyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLcsPrivacyDataResponseObject); ok {
		if err := validResponse.VisitGetLcsPrivacyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Subscribe operation middleware
func (sh *strictHandler) Subscribe(ctx *gin.Context, ueId externalRef2.VarUeId) {
	var request SubscribeRequestObject

	request.UeId = ueId

	var body SubscribeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Subscribe(ctx, request.(SubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Subscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeResponseObject); ok {
		if err := validResponse.VisitSubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Unsubscribe operation middleware
func (sh *strictHandler) Unsubscribe(ctx *gin.Context, ueId externalRef2.VarUeId, subscriptionId string) {
	var request UnsubscribeRequestObject

	request.UeId = ueId
	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Unsubscribe(ctx, request.(UnsubscribeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Unsubscribe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeResponseObject); ok {
		if err := validResponse.VisitUnsubscribeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Modify operation middleware
func (sh *strictHandler) Modify(ctx *gin.Context, ueId externalRef2.VarUeId, subscriptionId string, params ModifyParams) {
	var request ModifyRequestObject

	request.UeId = ueId
	request.SubscriptionId = subscriptionId
	request.Params = params

	var body ModifyApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Modify(ctx, request.(ModifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Modify")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ModifyResponseObject); ok {
		if err := validResponse.VisitModifyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
