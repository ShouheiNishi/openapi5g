// Package ueau provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package ueau

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/models"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// GetRgAuthDataParams defines parameters for GetRgAuthData.
type GetRgAuthDataParams struct {
	// AuthenticatedInd Authenticated indication
	AuthenticatedInd externalRef0.AuthenticatedInd `form:"authenticated-ind" json:"authenticated-ind"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef0.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GenerateAuthDataJSONRequestBody defines body for GenerateAuthData for application/json ContentType.
type GenerateAuthDataJSONRequestBody = externalRef0.AuthenticationInfoRequest

// ConfirmAuthJSONRequestBody defines body for ConfirmAuth for application/json ContentType.
type ConfirmAuthJSONRequestBody = externalRef0.AuthEvent

// DeleteAuthJSONRequestBody defines body for DeleteAuth for application/json ContentType.
type DeleteAuthJSONRequestBody = externalRef0.AuthEvent

// GenerateAvJSONRequestBody defines body for GenerateAv for application/json ContentType.
type GenerateAvJSONRequestBody = externalRef0.HssAuthenticationInfoRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRgAuthData request
	GetRgAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateAuthDataWithBody request with any body
	GenerateAuthDataWithBody(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmAuthWithBody request with any body
	ConfirmAuthWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmAuth(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthWithBody request with any body
	DeleteAuthWithBody(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAuth(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateAvWithBody request with any body
	GenerateAvWithBody(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateAv(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRgAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRgAuthDataRequest(c.Server, supiOrSuci, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAuthDataWithBody(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAuthDataRequestWithBody(c.Server, supiOrSuci, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAuthDataRequest(c.Server, supiOrSuci, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmAuthWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmAuthRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmAuth(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmAuthRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthWithBody(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthRequestWithBody(c.Server, supi, authEventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuth(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthRequest(c.Server, supi, authEventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAvWithBody(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvRequestWithBody(c.Server, supi, hssAuthType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAv(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvRequest(c.Server, supi, hssAuthType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRgAuthDataRequest generates requests for GetRgAuthData
func NewGetRgAuthDataRequest(server string, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supiOrSuci", runtime.ParamLocationPath, supiOrSuci)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/security-information-rg", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authenticated-ind", runtime.ParamLocationQuery, params.AuthenticatedInd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGenerateAuthDataRequest calls the generic GenerateAuthData builder with application/json body
func NewGenerateAuthDataRequest(server string, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateAuthDataRequestWithBody(server, supiOrSuci, "application/json", bodyReader)
}

// NewGenerateAuthDataRequestWithBody generates requests for GenerateAuthData with any type of body
func NewGenerateAuthDataRequestWithBody(server string, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supiOrSuci", runtime.ParamLocationPath, supiOrSuci)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/security-information/generate-auth-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmAuthRequest calls the generic ConfirmAuth builder with application/json body
func NewConfirmAuthRequest(server string, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmAuthRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewConfirmAuthRequestWithBody generates requests for ConfirmAuth with any type of body
func NewConfirmAuthRequestWithBody(server string, supi externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthRequest calls the generic DeleteAuth builder with application/json body
func NewDeleteAuthRequest(server string, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAuthRequestWithBody(server, supi, authEventId, "application/json", bodyReader)
}

// NewDeleteAuthRequestWithBody generates requests for DeleteAuth with any type of body
func NewDeleteAuthRequestWithBody(server string, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "authEventId", runtime.ParamLocationPath, authEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth-events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateAvRequest calls the generic GenerateAv builder with application/json body
func NewGenerateAvRequest(server string, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, body GenerateAvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateAvRequestWithBody(server, supi, hssAuthType, "application/json", bodyReader)
}

// NewGenerateAvRequestWithBody generates requests for GenerateAv with any type of body
func NewGenerateAvRequestWithBody(server string, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hssAuthType", runtime.ParamLocationPath, hssAuthType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/hss-security-information/%s/generate-av", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRgAuthDataWithResponse request
	GetRgAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*GetRgAuthDataResponse, error)

	// GenerateAuthDataWithBodyWithResponse request with any body
	GenerateAuthDataWithBodyWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error)

	GenerateAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error)

	// ConfirmAuthWithBodyWithResponse request with any body
	ConfirmAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error)

	ConfirmAuthWithResponse(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error)

	// DeleteAuthWithBodyWithResponse request with any body
	DeleteAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error)

	DeleteAuthWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error)

	// GenerateAvWithBodyWithResponse request with any body
	GenerateAvWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error)

	GenerateAvWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error)
}

type GetRgAuthDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.RgAuthCtx
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetRgAuthDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRgAuthDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateAuthDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.AuthenticationInfoResult
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON501     *externalRef0.N501
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GenerateAuthDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateAuthDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmAuthResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *externalRef0.AuthEvent
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r ConfirmAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateAvResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *externalRef0.HssAuthenticationInfoResult
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON501     *externalRef0.N501
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GenerateAvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateAvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRgAuthDataWithResponse request returning *GetRgAuthDataResponse
func (c *ClientWithResponses) GetRgAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*GetRgAuthDataResponse, error) {
	rsp, err := c.GetRgAuthData(ctx, supiOrSuci, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRgAuthDataResponse(rsp)
}

// GenerateAuthDataWithBodyWithResponse request with arbitrary body returning *GenerateAuthDataResponse
func (c *ClientWithResponses) GenerateAuthDataWithBodyWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error) {
	rsp, err := c.GenerateAuthDataWithBody(ctx, supiOrSuci, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAuthDataResponse(rsp)
}

func (c *ClientWithResponses) GenerateAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error) {
	rsp, err := c.GenerateAuthData(ctx, supiOrSuci, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAuthDataResponse(rsp)
}

// ConfirmAuthWithBodyWithResponse request with arbitrary body returning *ConfirmAuthResponse
func (c *ClientWithResponses) ConfirmAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error) {
	rsp, err := c.ConfirmAuthWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmAuthResponse(rsp)
}

func (c *ClientWithResponses) ConfirmAuthWithResponse(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error) {
	rsp, err := c.ConfirmAuth(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmAuthResponse(rsp)
}

// DeleteAuthWithBodyWithResponse request with arbitrary body returning *DeleteAuthResponse
func (c *ClientWithResponses) DeleteAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error) {
	rsp, err := c.DeleteAuthWithBody(ctx, supi, authEventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthResponse(rsp)
}

func (c *ClientWithResponses) DeleteAuthWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error) {
	rsp, err := c.DeleteAuth(ctx, supi, authEventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthResponse(rsp)
}

// GenerateAvWithBodyWithResponse request with arbitrary body returning *GenerateAvResponse
func (c *ClientWithResponses) GenerateAvWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error) {
	rsp, err := c.GenerateAvWithBody(ctx, supi, hssAuthType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvResponse(rsp)
}

func (c *ClientWithResponses) GenerateAvWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error) {
	rsp, err := c.GenerateAv(ctx, supi, hssAuthType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvResponse(rsp)
}

// ParseGetRgAuthDataResponse parses an HTTP response from a GetRgAuthDataWithResponse call
func ParseGetRgAuthDataResponse(rsp *http.Response) (*GetRgAuthDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRgAuthDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.RgAuthCtx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateAuthDataResponse parses an HTTP response from a GenerateAuthDataWithResponse call
func ParseGenerateAuthDataResponse(rsp *http.Response) (*GenerateAuthDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateAuthDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.AuthenticationInfoResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseConfirmAuthResponse parses an HTTP response from a ConfirmAuthWithResponse call
func ParseConfirmAuthResponse(rsp *http.Response) (*ConfirmAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest externalRef0.AuthEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteAuthResponse parses an HTTP response from a DeleteAuthWithResponse call
func ParseDeleteAuthResponse(rsp *http.Response) (*DeleteAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGenerateAvResponse parses an HTTP response from a GenerateAvWithResponse call
func ParseGenerateAvResponse(rsp *http.Response) (*GenerateAvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateAvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.HssAuthenticationInfoResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get authentication data for the FN-RG
	// (GET /{supiOrSuci}/security-information-rg)
	GetRgAuthData(c *gin.Context, supiOrSuci externalRef0.SupiOrSuci, params GetRgAuthDataParams)
	// Generate authentication data for the UE
	// (POST /{supiOrSuci}/security-information/generate-auth-data)
	GenerateAuthData(c *gin.Context, supiOrSuci externalRef0.SupiOrSuci)
	// Create a new confirmation event
	// (POST /{supi}/auth-events)
	ConfirmAuth(c *gin.Context, supi externalRef0.Supi)
	// Deletes the authentication result in the UDM
	// (PUT /{supi}/auth-events/{authEventId})
	DeleteAuth(c *gin.Context, supi externalRef0.Supi, authEventId string)
	// Generate authentication data for the UE in EPS or IMS domain
	// (POST /{supi}/hss-security-information/{hssAuthType}/generate-av)
	GenerateAv(c *gin.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRgAuthData operation middleware
func (siw *ServerInterfaceWrapper) GetRgAuthData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supiOrSuci" -------------
	var supiOrSuci externalRef0.SupiOrSuci

	err = runtime.BindStyledParameterWithOptions("simple", "supiOrSuci", c.Param("supiOrSuci"), &supiOrSuci, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supiOrSuci: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRgAuthDataParams

	// ------------- Required query parameter "authenticated-ind" -------------

	if paramValue := c.Query("authenticated-ind"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument authenticated-ind is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "authenticated-ind", c.Request.URL.Query(), &params.AuthenticatedInd)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authenticated-ind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-None-Match", valueList[0], &IfNoneMatch, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "If-Modified-Since", valueList[0], &IfModifiedSince, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRgAuthData(c, supiOrSuci, params)
}

// GenerateAuthData operation middleware
func (siw *ServerInterfaceWrapper) GenerateAuthData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supiOrSuci" -------------
	var supiOrSuci externalRef0.SupiOrSuci

	err = runtime.BindStyledParameterWithOptions("simple", "supiOrSuci", c.Param("supiOrSuci"), &supiOrSuci, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supiOrSuci: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateAuthData(c, supiOrSuci)
}

// ConfirmAuth operation middleware
func (siw *ServerInterfaceWrapper) ConfirmAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ConfirmAuth(c, supi)
}

// DeleteAuth operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "authEventId" -------------
	var authEventId string

	err = runtime.BindStyledParameterWithOptions("simple", "authEventId", c.Param("authEventId"), &authEventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authEventId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuth(c, supi, authEventId)
}

// GenerateAv operation middleware
func (siw *ServerInterfaceWrapper) GenerateAv(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameterWithOptions("simple", "supi", c.Param("supi"), &supi, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "hssAuthType" -------------
	var hssAuthType externalRef0.HssAuthTypeInUri

	err = runtime.BindStyledParameterWithOptions("simple", "hssAuthType", c.Param("hssAuthType"), &hssAuthType, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hssAuthType: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateAv(c, supi, hssAuthType)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/:supiOrSuci/security-information-rg", wrapper.GetRgAuthData)
	router.POST(options.BaseURL+"/:supiOrSuci/security-information/generate-auth-data", wrapper.GenerateAuthData)
	router.POST(options.BaseURL+"/:supi/auth-events", wrapper.ConfirmAuth)
	router.PUT(options.BaseURL+"/:supi/auth-events/:authEventId", wrapper.DeleteAuth)
	router.POST(options.BaseURL+"/:supi/hss-security-information/:hssAuthType/generate-av", wrapper.GenerateAv)
}

type GetRgAuthDataRequestObject struct {
	SupiOrSuci externalRef0.SupiOrSuci `json:"supiOrSuci"`
	Params     GetRgAuthDataParams
}

type GetRgAuthDataResponseObject interface {
	VisitGetRgAuthDataResponse(w http.ResponseWriter) error
}

type GetRgAuthData200JSONResponse externalRef0.RgAuthCtx

func (response GetRgAuthData200JSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.RgAuthCtx(response))
}

type GetRgAuthData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData400ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GetRgAuthData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData403ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GetRgAuthData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData404ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GetRgAuthData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData500ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GetRgAuthData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData503ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GetRgAuthDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GetRgAuthDatadefaultApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GenerateAuthDataRequestObject struct {
	SupiOrSuci externalRef0.SupiOrSuci `json:"supiOrSuci"`
	Body       *GenerateAuthDataJSONRequestBody
}

type GenerateAuthDataResponseObject interface {
	VisitGenerateAuthDataResponse(w http.ResponseWriter) error
}

type GenerateAuthData200JSONResponse externalRef0.AuthenticationInfoResult

func (response GenerateAuthData200JSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.AuthenticationInfoResult(response))
}

type GenerateAuthData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData400ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GenerateAuthData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData403ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GenerateAuthData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData404ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GenerateAuthData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData500ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GenerateAuthData501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData501ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N501ApplicationProblemPlusJSONResponse))
}

type GenerateAuthData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData503ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GenerateAuthDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GenerateAuthDatadefaultApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConfirmAuthRequestObject struct {
	Supi externalRef0.Supi `json:"supi"`
	Body *ConfirmAuthJSONRequestBody
}

type ConfirmAuthResponseObject interface {
	VisitConfirmAuthResponse(w http.ResponseWriter) error
}

type ConfirmAuth201ResponseHeaders struct {
	Location string
}

type ConfirmAuth201JSONResponse struct {
	Body    externalRef0.AuthEvent
	Headers ConfirmAuth201ResponseHeaders
}

func (response ConfirmAuth201JSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConfirmAuth400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth400ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type ConfirmAuth404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth404ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type ConfirmAuth500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth500ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type ConfirmAuth503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth503ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type ConfirmAuthdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ConfirmAuthdefaultApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAuthRequestObject struct {
	Supi        externalRef0.Supi `json:"supi"`
	AuthEventId string            `json:"authEventId"`
	Body        *DeleteAuthJSONRequestBody
}

type DeleteAuthResponseObject interface {
	VisitDeleteAuthResponse(w http.ResponseWriter) error
}

type DeleteAuth204Response struct {
}

func (response DeleteAuth204Response) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAuth400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth400ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type DeleteAuth404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth404ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type DeleteAuth500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth500ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type DeleteAuth503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth503ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type DeleteAuthdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteAuthdefaultApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GenerateAvRequestObject struct {
	Supi        externalRef0.Supi             `json:"supi"`
	HssAuthType externalRef0.HssAuthTypeInUri `json:"hssAuthType"`
	Body        *GenerateAvJSONRequestBody
}

type GenerateAvResponseObject interface {
	VisitGenerateAvResponse(w http.ResponseWriter) error
}

type GenerateAv200JSONResponse externalRef0.HssAuthenticationInfoResult

func (response GenerateAv200JSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(externalRef0.HssAuthenticationInfoResult(response))
}

type GenerateAv400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GenerateAv400ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N400ApplicationProblemPlusJSONResponse))
}

type GenerateAv403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GenerateAv403ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N403ApplicationProblemPlusJSONResponse))
}

type GenerateAv404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GenerateAv404ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N404ApplicationProblemPlusJSONResponse))
}

type GenerateAv500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GenerateAv500ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N500ApplicationProblemPlusJSONResponse))
}

type GenerateAv501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response GenerateAv501ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N501ApplicationProblemPlusJSONResponse))
}

type GenerateAv503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GenerateAv503ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(externalRef0.ProblemDetails(response.N503ApplicationProblemPlusJSONResponse))
}

type GenerateAvdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response GenerateAvdefaultApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get authentication data for the FN-RG
	// (GET /{supiOrSuci}/security-information-rg)
	GetRgAuthData(ctx context.Context, request GetRgAuthDataRequestObject) (GetRgAuthDataResponseObject, error)
	// Generate authentication data for the UE
	// (POST /{supiOrSuci}/security-information/generate-auth-data)
	GenerateAuthData(ctx context.Context, request GenerateAuthDataRequestObject) (GenerateAuthDataResponseObject, error)
	// Create a new confirmation event
	// (POST /{supi}/auth-events)
	ConfirmAuth(ctx context.Context, request ConfirmAuthRequestObject) (ConfirmAuthResponseObject, error)
	// Deletes the authentication result in the UDM
	// (PUT /{supi}/auth-events/{authEventId})
	DeleteAuth(ctx context.Context, request DeleteAuthRequestObject) (DeleteAuthResponseObject, error)
	// Generate authentication data for the UE in EPS or IMS domain
	// (POST /{supi}/hss-security-information/{hssAuthType}/generate-av)
	GenerateAv(ctx context.Context, request GenerateAvRequestObject) (GenerateAvResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetRgAuthData operation middleware
func (sh *strictHandler) GetRgAuthData(ctx *gin.Context, supiOrSuci externalRef0.SupiOrSuci, params GetRgAuthDataParams) {
	var request GetRgAuthDataRequestObject

	request.SupiOrSuci = supiOrSuci
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRgAuthData(ctx, request.(GetRgAuthDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRgAuthData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRgAuthDataResponseObject); ok {
		if err := validResponse.VisitGetRgAuthDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateAuthData operation middleware
func (sh *strictHandler) GenerateAuthData(ctx *gin.Context, supiOrSuci externalRef0.SupiOrSuci) {
	var request GenerateAuthDataRequestObject

	request.SupiOrSuci = supiOrSuci

	var body GenerateAuthDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateAuthData(ctx, request.(GenerateAuthDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateAuthData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GenerateAuthDataResponseObject); ok {
		if err := validResponse.VisitGenerateAuthDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConfirmAuth operation middleware
func (sh *strictHandler) ConfirmAuth(ctx *gin.Context, supi externalRef0.Supi) {
	var request ConfirmAuthRequestObject

	request.Supi = supi

	var body ConfirmAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmAuth(ctx, request.(ConfirmAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ConfirmAuthResponseObject); ok {
		if err := validResponse.VisitConfirmAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAuth operation middleware
func (sh *strictHandler) DeleteAuth(ctx *gin.Context, supi externalRef0.Supi, authEventId string) {
	var request DeleteAuthRequestObject

	request.Supi = supi
	request.AuthEventId = authEventId

	var body DeleteAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAuth(ctx, request.(DeleteAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAuthResponseObject); ok {
		if err := validResponse.VisitDeleteAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateAv operation middleware
func (sh *strictHandler) GenerateAv(ctx *gin.Context, supi externalRef0.Supi, hssAuthType externalRef0.HssAuthTypeInUri) {
	var request GenerateAvRequestObject

	request.Supi = supi
	request.HssAuthType = hssAuthType

	var body GenerateAvJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateAv(ctx, request.(GenerateAvRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateAv")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GenerateAvResponseObject); ok {
		if err := validResponse.VisitGenerateAvResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
