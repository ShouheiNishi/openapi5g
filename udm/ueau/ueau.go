// Package ueau provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package ueau

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for AccessNetworkId.
const (
	ETHERNET AccessNetworkId = "ETHERNET"
	HRPD     AccessNetworkId = "HRPD"
	WIMAX    AccessNetworkId = "WIMAX"
	WLAN     AccessNetworkId = "WLAN"
)

// Defines values for AuthType.
const (
	AuthTypeEAPAKAPRIME AuthType = "EAP_AKA_PRIME"
	AuthTypeEAPTLS      AuthType = "EAP_TLS"
	AuthTypeN5GAKA      AuthType = "5G_AKA"
)

// Defines values for AvType.
const (
	AvTypeEAPAKAPRIME AvType = "EAP_AKA_PRIME"
	AvTypeN5GHEAKA    AvType = "5G_HE_AKA"
)

// Defines values for HssAuthType.
const (
	HssAuthTypeEAPAKA      HssAuthType = "EAP_AKA"
	HssAuthTypeEAPAKAPRIME HssAuthType = "EAP_AKA_PRIME"
	HssAuthTypeEPSAKA      HssAuthType = "EPS_AKA"
	HssAuthTypeGBAAKA      HssAuthType = "GBA_AKA"
	HssAuthTypeIMSAKA      HssAuthType = "IMS_AKA"
	HssAuthTypeUMTSAKA     HssAuthType = "UMTS_AKA"
)

// Defines values for HssAuthTypeInUri.
const (
	EapAka      HssAuthTypeInUri = "eap-aka"
	EapAkaPrime HssAuthTypeInUri = "eap-aka-prime"
	EpsAka      HssAuthTypeInUri = "eps-aka"
	GbaAka      HssAuthTypeInUri = "gba-aka"
	ImsAka      HssAuthTypeInUri = "ims-aka"
)

// Defines values for HssAvType.
const (
	HssAvTypeEAPAKA  HssAvType = "EAP_AKA"
	HssAvTypeEPSAKA  HssAvType = "EPS_AKA"
	HssAvTypeGBAAKA  HssAvType = "GBA_AKA"
	HssAvTypeIMSAKA  HssAvType = "IMS_AKA"
	HssAvTypeUMTSAKA HssAvType = "UMTS_AKA"
)

// Defines values for NodeType.
const (
	AUSF          NodeType = "AUSF"
	BSF           NodeType = "BSF"
	GANAAASERVER  NodeType = "GAN_AAA_SERVER"
	MME           NodeType = "MME"
	SCSCF         NodeType = "S_CSCF"
	SGSN          NodeType = "SGSN"
	VLR           NodeType = "VLR"
	WLANAAASERVER NodeType = "WLAN_AAA_SERVER"
)

// AccessNetworkId defines model for AccessNetworkId.
type AccessNetworkId string

// AuthEvent defines model for AuthEvent.
type AuthEvent struct {
	AuthRemovalInd       *bool                     `json:"authRemovalInd,omitempty"`
	AuthType             AuthType                  `json:"authType"`
	NfInstanceId         externalRef0.NfInstanceId `json:"nfInstanceId"`
	NfSetId              *externalRef0.NfSetId     `json:"nfSetId,omitempty"`
	ServingNetworkName   ServingNetworkName        `json:"servingNetworkName"`
	Success              Success                   `json:"success"`
	TimeStamp            externalRef0.DateTime     `json:"timeStamp"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// AuthType defines model for AuthType.
type AuthType string

// AuthenticatedInd defines model for AuthenticatedInd.
type AuthenticatedInd = bool

// AuthenticationInfoRequest defines model for AuthenticationInfoRequest.
type AuthenticationInfoRequest struct {
	AusfInstanceId        externalRef0.NfInstanceId       `json:"ausfInstanceId"`
	CellCagInfo           *[]externalRef0.CagId           `json:"cellCagInfo,omitempty"`
	N5gcInd               *bool                           `json:"n5gcInd,omitempty"`
	ResynchronizationInfo *ResynchronizationInfo          `json:"resynchronizationInfo,omitempty"`
	ServingNetworkName    ServingNetworkName              `json:"servingNetworkName"`
	SupportedFeatures     *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{}          `json:"-"`
}

// AuthenticationInfoResult defines model for AuthenticationInfoResult.
type AuthenticationInfoResult struct {
	AuthType             AuthType                        `json:"authType"`
	AuthenticationVector *AuthenticationVector           `json:"authenticationVector,omitempty"`
	Supi                 *externalRef0.Supi              `json:"supi,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// AuthenticationVector defines model for AuthenticationVector.
type AuthenticationVector struct {
	union json.RawMessage
}

// Autn defines model for Autn.
type Autn = string

// Auts defines model for Auts.
type Auts = string

// Av5GHeAka defines model for Av5GHeAka.
type Av5GHeAka struct {
	Autn                 Autn                   `json:"autn"`
	AvType               AvType                 `json:"avType"`
	Kausf                Kausf                  `json:"kausf"`
	Rand                 Rand                   `json:"rand"`
	XresStar             XresStar               `json:"xresStar"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvEapAkaPrime defines model for AvEapAkaPrime.
type AvEapAkaPrime struct {
	Autn                 Autn                   `json:"autn"`
	AvType               AvType                 `json:"avType"`
	CkPrime              CkPrime                `json:"ckPrime"`
	IkPrime              IkPrime                `json:"ikPrime"`
	Rand                 Rand                   `json:"rand"`
	Xres                 Xres                   `json:"xres"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvEpsAka defines model for AvEpsAka.
type AvEpsAka struct {
	Autn                 Autn                   `json:"autn"`
	AvType               HssAvType              `json:"avType"`
	Kasme                Kasme                  `json:"kasme"`
	Rand                 Rand                   `json:"rand"`
	Xres                 Xres                   `json:"xres"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvImsGbaEapAka defines model for AvImsGbaEapAka.
type AvImsGbaEapAka struct {
	Autn                 Autn                   `json:"autn"`
	AvType               HssAvType              `json:"avType"`
	Ck                   ConfidentialityKey     `json:"ck"`
	Ik                   IntegrityKey           `json:"ik"`
	Rand                 Rand                   `json:"rand"`
	Xres                 Xres                   `json:"xres"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AvType defines model for AvType.
type AvType string

// CkPrime defines model for CkPrime.
type CkPrime = string

// ConfidentialityKey defines model for ConfidentialityKey.
type ConfidentialityKey = string

// HssAuthType defines model for HssAuthType.
type HssAuthType string

// HssAuthTypeInUri defines model for HssAuthTypeInUri.
type HssAuthTypeInUri string

// HssAuthenticationInfoRequest defines model for HssAuthenticationInfoRequest.
type HssAuthenticationInfoRequest struct {
	AnId                  *AccessNetworkId                `json:"anId,omitempty"`
	HssAuthType           HssAuthType                     `json:"hssAuthType"`
	NumOfRequestedVectors NumOfRequestedVectors           `json:"numOfRequestedVectors"`
	RequestingNodeType    *NodeType                       `json:"requestingNodeType,omitempty"`
	ResynchronizationInfo *ResynchronizationInfo          `json:"resynchronizationInfo,omitempty"`
	ServingNetworkId      *externalRef0.PlmnId            `json:"servingNetworkId,omitempty"`
	SupportedFeatures     *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties  map[string]interface{}          `json:"-"`
}

// HssAuthenticationInfoResult defines model for HssAuthenticationInfoResult.
type HssAuthenticationInfoResult struct {
	HssAuthenticationVectors HssAuthenticationVectors        `json:"hssAuthenticationVectors"`
	SupportedFeatures        *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties     map[string]interface{}          `json:"-"`
}

// HssAuthenticationVectors defines model for HssAuthenticationVectors.
type HssAuthenticationVectors struct {
	union json.RawMessage
}

// HssAuthenticationVectors0 defines model for .
type HssAuthenticationVectors0 = []AvEpsAka

// HssAuthenticationVectors1 defines model for .
type HssAuthenticationVectors1 = []AvImsGbaEapAka

// HssAuthenticationVectors2 defines model for .
type HssAuthenticationVectors2 = []AvEapAkaPrime

// HssAvType defines model for HssAvType.
type HssAvType string

// IkPrime defines model for IkPrime.
type IkPrime = string

// IntegrityKey defines model for IntegrityKey.
type IntegrityKey = string

// Kasme defines model for Kasme.
type Kasme = string

// Kausf defines model for Kausf.
type Kausf = string

// NodeType defines model for NodeType.
type NodeType string

// NumOfRequestedVectors defines model for NumOfRequestedVectors.
type NumOfRequestedVectors = int

// Rand defines model for Rand.
type Rand = string

// ResynchronizationInfo defines model for ResynchronizationInfo.
type ResynchronizationInfo struct {
	Auts                 Auts                   `json:"auts"`
	Rand                 Rand                   `json:"rand"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RgAuthCtx defines model for RgAuthCtx.
type RgAuthCtx struct {
	AuthInd              bool                            `json:"authInd"`
	Supi                 *externalRef0.Supi              `json:"supi,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// ServingNetworkName defines model for ServingNetworkName.
type ServingNetworkName = string

// Success defines model for Success.
type Success = bool

// Xres defines model for Xres.
type Xres = string

// XresStar defines model for XresStar.
type XresStar = string

// GetRgAuthDataParams defines parameters for GetRgAuthData.
type GetRgAuthDataParams struct {
	// AuthenticatedInd Authenticated indication
	AuthenticatedInd AuthenticatedInd `form:"authenticated-ind" json:"authenticated-ind"`

	// SupportedFeatures Supported Features
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// PlmnId serving PLMN ID
	PlmnId *externalRef0.PlmnId `form:"plmn-id,omitempty" json:"plmn-id,omitempty"`

	// IfNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
	IfNoneMatch *string `json:"If-None-Match,omitempty"`

	// IfModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
	IfModifiedSince *string `json:"If-Modified-Since,omitempty"`
}

// GenerateAuthDataJSONRequestBody defines body for GenerateAuthData for application/json ContentType.
type GenerateAuthDataJSONRequestBody = AuthenticationInfoRequest

// ConfirmAuthJSONRequestBody defines body for ConfirmAuth for application/json ContentType.
type ConfirmAuthJSONRequestBody = AuthEvent

// DeleteAuthJSONRequestBody defines body for DeleteAuth for application/json ContentType.
type DeleteAuthJSONRequestBody = AuthEvent

// GenerateAvJSONRequestBody defines body for GenerateAv for application/json ContentType.
type GenerateAvJSONRequestBody = HssAuthenticationInfoRequest

// Getter for additional properties for AuthEvent. Returns the specified
// element and whether it was found
func (a AuthEvent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthEvent
func (a *AuthEvent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthEvent to handle AdditionalProperties
func (a *AuthEvent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authRemovalInd"]; found {
		err = json.Unmarshal(raw, &a.AuthRemovalInd)
		if err != nil {
			return fmt.Errorf("error reading 'authRemovalInd': %w", err)
		}
		delete(object, "authRemovalInd")
	}

	if raw, found := object["authType"]; found {
		err = json.Unmarshal(raw, &a.AuthType)
		if err != nil {
			return fmt.Errorf("error reading 'authType': %w", err)
		}
		delete(object, "authType")
	}

	if raw, found := object["nfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'nfInstanceId': %w", err)
		}
		delete(object, "nfInstanceId")
	}

	if raw, found := object["nfSetId"]; found {
		err = json.Unmarshal(raw, &a.NfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'nfSetId': %w", err)
		}
		delete(object, "nfSetId")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if raw, found := object["success"]; found {
		err = json.Unmarshal(raw, &a.Success)
		if err != nil {
			return fmt.Errorf("error reading 'success': %w", err)
		}
		delete(object, "success")
	}

	if raw, found := object["timeStamp"]; found {
		err = json.Unmarshal(raw, &a.TimeStamp)
		if err != nil {
			return fmt.Errorf("error reading 'timeStamp': %w", err)
		}
		delete(object, "timeStamp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthEvent to handle AdditionalProperties
func (a AuthEvent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AuthRemovalInd != nil {
		object["authRemovalInd"], err = json.Marshal(a.AuthRemovalInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authRemovalInd': %w", err)
		}
	}

	object["authType"], err = json.Marshal(a.AuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authType': %w", err)
	}

	object["nfInstanceId"], err = json.Marshal(a.NfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'nfInstanceId': %w", err)
	}

	if a.NfSetId != nil {
		object["nfSetId"], err = json.Marshal(a.NfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nfSetId': %w", err)
		}
	}

	object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
	}

	object["success"], err = json.Marshal(a.Success)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'success': %w", err)
	}

	object["timeStamp"], err = json.Marshal(a.TimeStamp)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'timeStamp': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationInfoRequest. Returns the specified
// element and whether it was found
func (a AuthenticationInfoRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationInfoRequest
func (a *AuthenticationInfoRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationInfoRequest to handle AdditionalProperties
func (a *AuthenticationInfoRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ausfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AusfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'ausfInstanceId': %w", err)
		}
		delete(object, "ausfInstanceId")
	}

	if raw, found := object["cellCagInfo"]; found {
		err = json.Unmarshal(raw, &a.CellCagInfo)
		if err != nil {
			return fmt.Errorf("error reading 'cellCagInfo': %w", err)
		}
		delete(object, "cellCagInfo")
	}

	if raw, found := object["n5gcInd"]; found {
		err = json.Unmarshal(raw, &a.N5gcInd)
		if err != nil {
			return fmt.Errorf("error reading 'n5gcInd': %w", err)
		}
		delete(object, "n5gcInd")
	}

	if raw, found := object["resynchronizationInfo"]; found {
		err = json.Unmarshal(raw, &a.ResynchronizationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'resynchronizationInfo': %w", err)
		}
		delete(object, "resynchronizationInfo")
	}

	if raw, found := object["servingNetworkName"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkName)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkName': %w", err)
		}
		delete(object, "servingNetworkName")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationInfoRequest to handle AdditionalProperties
func (a AuthenticationInfoRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["ausfInstanceId"], err = json.Marshal(a.AusfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ausfInstanceId': %w", err)
	}

	if a.CellCagInfo != nil {
		object["cellCagInfo"], err = json.Marshal(a.CellCagInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cellCagInfo': %w", err)
		}
	}

	if a.N5gcInd != nil {
		object["n5gcInd"], err = json.Marshal(a.N5gcInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'n5gcInd': %w", err)
		}
	}

	if a.ResynchronizationInfo != nil {
		object["resynchronizationInfo"], err = json.Marshal(a.ResynchronizationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resynchronizationInfo': %w", err)
		}
	}

	object["servingNetworkName"], err = json.Marshal(a.ServingNetworkName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'servingNetworkName': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthenticationInfoResult. Returns the specified
// element and whether it was found
func (a AuthenticationInfoResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthenticationInfoResult
func (a *AuthenticationInfoResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthenticationInfoResult to handle AdditionalProperties
func (a *AuthenticationInfoResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authType"]; found {
		err = json.Unmarshal(raw, &a.AuthType)
		if err != nil {
			return fmt.Errorf("error reading 'authType': %w", err)
		}
		delete(object, "authType")
	}

	if raw, found := object["authenticationVector"]; found {
		err = json.Unmarshal(raw, &a.AuthenticationVector)
		if err != nil {
			return fmt.Errorf("error reading 'authenticationVector': %w", err)
		}
		delete(object, "authenticationVector")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthenticationInfoResult to handle AdditionalProperties
func (a AuthenticationInfoResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authType"], err = json.Marshal(a.AuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authType': %w", err)
	}

	if a.AuthenticationVector != nil {
		object["authenticationVector"], err = json.Marshal(a.AuthenticationVector)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'authenticationVector': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Av5GHeAka. Returns the specified
// element and whether it was found
func (a Av5GHeAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Av5GHeAka
func (a *Av5GHeAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Av5GHeAka to handle AdditionalProperties
func (a *Av5GHeAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["kausf"]; found {
		err = json.Unmarshal(raw, &a.Kausf)
		if err != nil {
			return fmt.Errorf("error reading 'kausf': %w", err)
		}
		delete(object, "kausf")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xresStar"]; found {
		err = json.Unmarshal(raw, &a.XresStar)
		if err != nil {
			return fmt.Errorf("error reading 'xresStar': %w", err)
		}
		delete(object, "xresStar")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Av5GHeAka to handle AdditionalProperties
func (a Av5GHeAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["kausf"], err = json.Marshal(a.Kausf)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'kausf': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xresStar"], err = json.Marshal(a.XresStar)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xresStar': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AvEapAkaPrime. Returns the specified
// element and whether it was found
func (a AvEapAkaPrime) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AvEapAkaPrime
func (a *AvEapAkaPrime) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AvEapAkaPrime to handle AdditionalProperties
func (a *AvEapAkaPrime) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["ckPrime"]; found {
		err = json.Unmarshal(raw, &a.CkPrime)
		if err != nil {
			return fmt.Errorf("error reading 'ckPrime': %w", err)
		}
		delete(object, "ckPrime")
	}

	if raw, found := object["ikPrime"]; found {
		err = json.Unmarshal(raw, &a.IkPrime)
		if err != nil {
			return fmt.Errorf("error reading 'ikPrime': %w", err)
		}
		delete(object, "ikPrime")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xres"]; found {
		err = json.Unmarshal(raw, &a.Xres)
		if err != nil {
			return fmt.Errorf("error reading 'xres': %w", err)
		}
		delete(object, "xres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AvEapAkaPrime to handle AdditionalProperties
func (a AvEapAkaPrime) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["ckPrime"], err = json.Marshal(a.CkPrime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ckPrime': %w", err)
	}

	object["ikPrime"], err = json.Marshal(a.IkPrime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ikPrime': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xres"], err = json.Marshal(a.Xres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AvEpsAka. Returns the specified
// element and whether it was found
func (a AvEpsAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AvEpsAka
func (a *AvEpsAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AvEpsAka to handle AdditionalProperties
func (a *AvEpsAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["kasme"]; found {
		err = json.Unmarshal(raw, &a.Kasme)
		if err != nil {
			return fmt.Errorf("error reading 'kasme': %w", err)
		}
		delete(object, "kasme")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xres"]; found {
		err = json.Unmarshal(raw, &a.Xres)
		if err != nil {
			return fmt.Errorf("error reading 'xres': %w", err)
		}
		delete(object, "xres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AvEpsAka to handle AdditionalProperties
func (a AvEpsAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["kasme"], err = json.Marshal(a.Kasme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'kasme': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xres"], err = json.Marshal(a.Xres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AvImsGbaEapAka. Returns the specified
// element and whether it was found
func (a AvImsGbaEapAka) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AvImsGbaEapAka
func (a *AvImsGbaEapAka) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AvImsGbaEapAka to handle AdditionalProperties
func (a *AvImsGbaEapAka) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["autn"]; found {
		err = json.Unmarshal(raw, &a.Autn)
		if err != nil {
			return fmt.Errorf("error reading 'autn': %w", err)
		}
		delete(object, "autn")
	}

	if raw, found := object["avType"]; found {
		err = json.Unmarshal(raw, &a.AvType)
		if err != nil {
			return fmt.Errorf("error reading 'avType': %w", err)
		}
		delete(object, "avType")
	}

	if raw, found := object["ck"]; found {
		err = json.Unmarshal(raw, &a.Ck)
		if err != nil {
			return fmt.Errorf("error reading 'ck': %w", err)
		}
		delete(object, "ck")
	}

	if raw, found := object["ik"]; found {
		err = json.Unmarshal(raw, &a.Ik)
		if err != nil {
			return fmt.Errorf("error reading 'ik': %w", err)
		}
		delete(object, "ik")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if raw, found := object["xres"]; found {
		err = json.Unmarshal(raw, &a.Xres)
		if err != nil {
			return fmt.Errorf("error reading 'xres': %w", err)
		}
		delete(object, "xres")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AvImsGbaEapAka to handle AdditionalProperties
func (a AvImsGbaEapAka) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["autn"], err = json.Marshal(a.Autn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'autn': %w", err)
	}

	object["avType"], err = json.Marshal(a.AvType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'avType': %w", err)
	}

	object["ck"], err = json.Marshal(a.Ck)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ck': %w", err)
	}

	object["ik"], err = json.Marshal(a.Ik)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ik': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	object["xres"], err = json.Marshal(a.Xres)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'xres': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssAuthenticationInfoRequest. Returns the specified
// element and whether it was found
func (a HssAuthenticationInfoRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssAuthenticationInfoRequest
func (a *HssAuthenticationInfoRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssAuthenticationInfoRequest to handle AdditionalProperties
func (a *HssAuthenticationInfoRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anId"]; found {
		err = json.Unmarshal(raw, &a.AnId)
		if err != nil {
			return fmt.Errorf("error reading 'anId': %w", err)
		}
		delete(object, "anId")
	}

	if raw, found := object["hssAuthType"]; found {
		err = json.Unmarshal(raw, &a.HssAuthType)
		if err != nil {
			return fmt.Errorf("error reading 'hssAuthType': %w", err)
		}
		delete(object, "hssAuthType")
	}

	if raw, found := object["numOfRequestedVectors"]; found {
		err = json.Unmarshal(raw, &a.NumOfRequestedVectors)
		if err != nil {
			return fmt.Errorf("error reading 'numOfRequestedVectors': %w", err)
		}
		delete(object, "numOfRequestedVectors")
	}

	if raw, found := object["requestingNodeType"]; found {
		err = json.Unmarshal(raw, &a.RequestingNodeType)
		if err != nil {
			return fmt.Errorf("error reading 'requestingNodeType': %w", err)
		}
		delete(object, "requestingNodeType")
	}

	if raw, found := object["resynchronizationInfo"]; found {
		err = json.Unmarshal(raw, &a.ResynchronizationInfo)
		if err != nil {
			return fmt.Errorf("error reading 'resynchronizationInfo': %w", err)
		}
		delete(object, "resynchronizationInfo")
	}

	if raw, found := object["servingNetworkId"]; found {
		err = json.Unmarshal(raw, &a.ServingNetworkId)
		if err != nil {
			return fmt.Errorf("error reading 'servingNetworkId': %w", err)
		}
		delete(object, "servingNetworkId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssAuthenticationInfoRequest to handle AdditionalProperties
func (a HssAuthenticationInfoRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnId != nil {
		object["anId"], err = json.Marshal(a.AnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anId': %w", err)
		}
	}

	object["hssAuthType"], err = json.Marshal(a.HssAuthType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssAuthType': %w", err)
	}

	object["numOfRequestedVectors"], err = json.Marshal(a.NumOfRequestedVectors)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'numOfRequestedVectors': %w", err)
	}

	if a.RequestingNodeType != nil {
		object["requestingNodeType"], err = json.Marshal(a.RequestingNodeType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'requestingNodeType': %w", err)
		}
	}

	if a.ResynchronizationInfo != nil {
		object["resynchronizationInfo"], err = json.Marshal(a.ResynchronizationInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resynchronizationInfo': %w", err)
		}
	}

	if a.ServingNetworkId != nil {
		object["servingNetworkId"], err = json.Marshal(a.ServingNetworkId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'servingNetworkId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HssAuthenticationInfoResult. Returns the specified
// element and whether it was found
func (a HssAuthenticationInfoResult) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HssAuthenticationInfoResult
func (a *HssAuthenticationInfoResult) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HssAuthenticationInfoResult to handle AdditionalProperties
func (a *HssAuthenticationInfoResult) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hssAuthenticationVectors"]; found {
		err = json.Unmarshal(raw, &a.HssAuthenticationVectors)
		if err != nil {
			return fmt.Errorf("error reading 'hssAuthenticationVectors': %w", err)
		}
		delete(object, "hssAuthenticationVectors")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HssAuthenticationInfoResult to handle AdditionalProperties
func (a HssAuthenticationInfoResult) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["hssAuthenticationVectors"], err = json.Marshal(a.HssAuthenticationVectors)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'hssAuthenticationVectors': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ResynchronizationInfo. Returns the specified
// element and whether it was found
func (a ResynchronizationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ResynchronizationInfo
func (a *ResynchronizationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ResynchronizationInfo to handle AdditionalProperties
func (a *ResynchronizationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["auts"]; found {
		err = json.Unmarshal(raw, &a.Auts)
		if err != nil {
			return fmt.Errorf("error reading 'auts': %w", err)
		}
		delete(object, "auts")
	}

	if raw, found := object["rand"]; found {
		err = json.Unmarshal(raw, &a.Rand)
		if err != nil {
			return fmt.Errorf("error reading 'rand': %w", err)
		}
		delete(object, "rand")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ResynchronizationInfo to handle AdditionalProperties
func (a ResynchronizationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["auts"], err = json.Marshal(a.Auts)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'auts': %w", err)
	}

	object["rand"], err = json.Marshal(a.Rand)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'rand': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RgAuthCtx. Returns the specified
// element and whether it was found
func (a RgAuthCtx) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RgAuthCtx
func (a *RgAuthCtx) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RgAuthCtx to handle AdditionalProperties
func (a *RgAuthCtx) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["authInd"]; found {
		err = json.Unmarshal(raw, &a.AuthInd)
		if err != nil {
			return fmt.Errorf("error reading 'authInd': %w", err)
		}
		delete(object, "authInd")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RgAuthCtx to handle AdditionalProperties
func (a RgAuthCtx) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["authInd"], err = json.Marshal(a.AuthInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'authInd': %w", err)
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsAvEapAkaPrime returns the union data inside the AuthenticationVector as a AvEapAkaPrime
func (t AuthenticationVector) AsAvEapAkaPrime() (AvEapAkaPrime, error) {
	var body AvEapAkaPrime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAvEapAkaPrime overwrites any union data inside the AuthenticationVector as the provided AvEapAkaPrime
func (t *AuthenticationVector) FromAvEapAkaPrime(v AvEapAkaPrime) error {
	v.AvType = "EAP_AKA_PRIME"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAvEapAkaPrime performs a merge with any union data inside the AuthenticationVector, using the provided AvEapAkaPrime
func (t *AuthenticationVector) MergeAvEapAkaPrime(v AvEapAkaPrime) error {
	v.AvType = "EAP_AKA_PRIME"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAv5GHeAka returns the union data inside the AuthenticationVector as a Av5GHeAka
func (t AuthenticationVector) AsAv5GHeAka() (Av5GHeAka, error) {
	var body Av5GHeAka
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAv5GHeAka overwrites any union data inside the AuthenticationVector as the provided Av5GHeAka
func (t *AuthenticationVector) FromAv5GHeAka(v Av5GHeAka) error {
	v.AvType = "5G_HE_AKA"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAv5GHeAka performs a merge with any union data inside the AuthenticationVector, using the provided Av5GHeAka
func (t *AuthenticationVector) MergeAv5GHeAka(v Av5GHeAka) error {
	v.AvType = "5G_HE_AKA"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AuthenticationVector) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"avType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t AuthenticationVector) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "5G_HE_AKA":
		return t.AsAv5GHeAka()
	case "EAP_AKA_PRIME":
		return t.AsAvEapAkaPrime()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t AuthenticationVector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AuthenticationVector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHssAuthenticationVectors0 returns the union data inside the HssAuthenticationVectors as a HssAuthenticationVectors0
func (t HssAuthenticationVectors) AsHssAuthenticationVectors0() (HssAuthenticationVectors0, error) {
	var body HssAuthenticationVectors0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHssAuthenticationVectors0 overwrites any union data inside the HssAuthenticationVectors as the provided HssAuthenticationVectors0
func (t *HssAuthenticationVectors) FromHssAuthenticationVectors0(v HssAuthenticationVectors0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHssAuthenticationVectors0 performs a merge with any union data inside the HssAuthenticationVectors, using the provided HssAuthenticationVectors0
func (t *HssAuthenticationVectors) MergeHssAuthenticationVectors0(v HssAuthenticationVectors0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHssAuthenticationVectors1 returns the union data inside the HssAuthenticationVectors as a HssAuthenticationVectors1
func (t HssAuthenticationVectors) AsHssAuthenticationVectors1() (HssAuthenticationVectors1, error) {
	var body HssAuthenticationVectors1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHssAuthenticationVectors1 overwrites any union data inside the HssAuthenticationVectors as the provided HssAuthenticationVectors1
func (t *HssAuthenticationVectors) FromHssAuthenticationVectors1(v HssAuthenticationVectors1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHssAuthenticationVectors1 performs a merge with any union data inside the HssAuthenticationVectors, using the provided HssAuthenticationVectors1
func (t *HssAuthenticationVectors) MergeHssAuthenticationVectors1(v HssAuthenticationVectors1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHssAuthenticationVectors2 returns the union data inside the HssAuthenticationVectors as a HssAuthenticationVectors2
func (t HssAuthenticationVectors) AsHssAuthenticationVectors2() (HssAuthenticationVectors2, error) {
	var body HssAuthenticationVectors2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHssAuthenticationVectors2 overwrites any union data inside the HssAuthenticationVectors as the provided HssAuthenticationVectors2
func (t *HssAuthenticationVectors) FromHssAuthenticationVectors2(v HssAuthenticationVectors2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHssAuthenticationVectors2 performs a merge with any union data inside the HssAuthenticationVectors, using the provided HssAuthenticationVectors2
func (t *HssAuthenticationVectors) MergeHssAuthenticationVectors2(v HssAuthenticationVectors2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t HssAuthenticationVectors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HssAuthenticationVectors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRgAuthData request
	GetRgAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateAuthDataWithBody request with any body
	GenerateAuthDataWithBody(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmAuthWithBody request with any body
	ConfirmAuthWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmAuth(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthWithBody request with any body
	DeleteAuthWithBody(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAuth(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateAvWithBody request with any body
	GenerateAvWithBody(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateAv(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRgAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRgAuthDataRequest(c.Server, supiOrSuci, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAuthDataWithBody(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAuthDataRequestWithBody(c.Server, supiOrSuci, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAuthData(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAuthDataRequest(c.Server, supiOrSuci, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmAuthWithBody(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmAuthRequestWithBody(c.Server, supi, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmAuth(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmAuthRequest(c.Server, supi, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthWithBody(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthRequestWithBody(c.Server, supi, authEventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuth(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthRequest(c.Server, supi, authEventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAvWithBody(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvRequestWithBody(c.Server, supi, hssAuthType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateAv(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateAvRequest(c.Server, supi, hssAuthType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRgAuthDataRequest generates requests for GetRgAuthData
func NewGetRgAuthDataRequest(server string, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supiOrSuci", runtime.ParamLocationPath, supiOrSuci)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/security-information-rg", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authenticated-ind", runtime.ParamLocationQuery, params.AuthenticatedInd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PlmnId != nil {

			if queryParamBuf, err := json.Marshal(*params.PlmnId); err != nil {
				return nil, err
			} else {
				queryValues.Add("plmn-id", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfNoneMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, *params.IfNoneMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-None-Match", headerParam0)
		}

		if params.IfModifiedSince != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, *params.IfModifiedSince)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Modified-Since", headerParam1)
		}

	}

	return req, nil
}

// NewGenerateAuthDataRequest calls the generic GenerateAuthData builder with application/json body
func NewGenerateAuthDataRequest(server string, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateAuthDataRequestWithBody(server, supiOrSuci, "application/json", bodyReader)
}

// NewGenerateAuthDataRequestWithBody generates requests for GenerateAuthData with any type of body
func NewGenerateAuthDataRequestWithBody(server string, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supiOrSuci", runtime.ParamLocationPath, supiOrSuci)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/security-information/generate-auth-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmAuthRequest calls the generic ConfirmAuth builder with application/json body
func NewConfirmAuthRequest(server string, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmAuthRequestWithBody(server, supi, "application/json", bodyReader)
}

// NewConfirmAuthRequestWithBody generates requests for ConfirmAuth with any type of body
func NewConfirmAuthRequestWithBody(server string, supi externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthRequest calls the generic DeleteAuth builder with application/json body
func NewDeleteAuthRequest(server string, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAuthRequestWithBody(server, supi, authEventId, "application/json", bodyReader)
}

// NewDeleteAuthRequestWithBody generates requests for DeleteAuth with any type of body
func NewDeleteAuthRequestWithBody(server string, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "authEventId", runtime.ParamLocationPath, authEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth-events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateAvRequest calls the generic GenerateAv builder with application/json body
func NewGenerateAvRequest(server string, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, body GenerateAvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateAvRequestWithBody(server, supi, hssAuthType, "application/json", bodyReader)
}

// NewGenerateAvRequestWithBody generates requests for GenerateAv with any type of body
func NewGenerateAvRequestWithBody(server string, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "supi", runtime.ParamLocationPath, supi)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "hssAuthType", runtime.ParamLocationPath, hssAuthType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/hss-security-information/%s/generate-av", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRgAuthDataWithResponse request
	GetRgAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*GetRgAuthDataResponse, error)

	// GenerateAuthDataWithBodyWithResponse request with any body
	GenerateAuthDataWithBodyWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error)

	GenerateAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error)

	// ConfirmAuthWithBodyWithResponse request with any body
	ConfirmAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error)

	ConfirmAuthWithResponse(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error)

	// DeleteAuthWithBodyWithResponse request with any body
	DeleteAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error)

	DeleteAuthWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error)

	// GenerateAvWithBodyWithResponse request with any body
	GenerateAvWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error)

	GenerateAvWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error)
}

type GetRgAuthDataResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RgAuthCtx
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GetRgAuthDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRgAuthDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateAuthDataResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AuthenticationInfoResult
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON501 *externalRef0.N501
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GenerateAuthDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateAuthDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmAuthResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *AuthEvent
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r ConfirmAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r DeleteAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateAvResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *HssAuthenticationInfoResult
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON501 *externalRef0.N501
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GenerateAvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateAvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRgAuthDataWithResponse request returning *GetRgAuthDataResponse
func (c *ClientWithResponses) GetRgAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, params *GetRgAuthDataParams, reqEditors ...RequestEditorFn) (*GetRgAuthDataResponse, error) {
	rsp, err := c.GetRgAuthData(ctx, supiOrSuci, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRgAuthDataResponse(rsp)
}

// GenerateAuthDataWithBodyWithResponse request with arbitrary body returning *GenerateAuthDataResponse
func (c *ClientWithResponses) GenerateAuthDataWithBodyWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error) {
	rsp, err := c.GenerateAuthDataWithBody(ctx, supiOrSuci, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAuthDataResponse(rsp)
}

func (c *ClientWithResponses) GenerateAuthDataWithResponse(ctx context.Context, supiOrSuci externalRef0.SupiOrSuci, body GenerateAuthDataJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAuthDataResponse, error) {
	rsp, err := c.GenerateAuthData(ctx, supiOrSuci, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAuthDataResponse(rsp)
}

// ConfirmAuthWithBodyWithResponse request with arbitrary body returning *ConfirmAuthResponse
func (c *ClientWithResponses) ConfirmAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error) {
	rsp, err := c.ConfirmAuthWithBody(ctx, supi, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmAuthResponse(rsp)
}

func (c *ClientWithResponses) ConfirmAuthWithResponse(ctx context.Context, supi externalRef0.Supi, body ConfirmAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmAuthResponse, error) {
	rsp, err := c.ConfirmAuth(ctx, supi, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmAuthResponse(rsp)
}

// DeleteAuthWithBodyWithResponse request with arbitrary body returning *DeleteAuthResponse
func (c *ClientWithResponses) DeleteAuthWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error) {
	rsp, err := c.DeleteAuthWithBody(ctx, supi, authEventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthResponse(rsp)
}

func (c *ClientWithResponses) DeleteAuthWithResponse(ctx context.Context, supi externalRef0.Supi, authEventId string, body DeleteAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAuthResponse, error) {
	rsp, err := c.DeleteAuth(ctx, supi, authEventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthResponse(rsp)
}

// GenerateAvWithBodyWithResponse request with arbitrary body returning *GenerateAvResponse
func (c *ClientWithResponses) GenerateAvWithBodyWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error) {
	rsp, err := c.GenerateAvWithBody(ctx, supi, hssAuthType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvResponse(rsp)
}

func (c *ClientWithResponses) GenerateAvWithResponse(ctx context.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri, body GenerateAvJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateAvResponse, error) {
	rsp, err := c.GenerateAv(ctx, supi, hssAuthType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateAvResponse(rsp)
}

// ParseGetRgAuthDataResponse parses an HTTP response from a GetRgAuthDataWithResponse call
func ParseGetRgAuthDataResponse(rsp *http.Response) (*GetRgAuthDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRgAuthDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RgAuthCtx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGenerateAuthDataResponse parses an HTTP response from a GenerateAuthDataWithResponse call
func ParseGenerateAuthDataResponse(rsp *http.Response) (*GenerateAuthDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateAuthDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationInfoResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseConfirmAuthResponse parses an HTTP response from a ConfirmAuthWithResponse call
func ParseConfirmAuthResponse(rsp *http.Response) (*ConfirmAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseDeleteAuthResponse parses an HTTP response from a DeleteAuthWithResponse call
func ParseDeleteAuthResponse(rsp *http.Response) (*DeleteAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGenerateAvResponse parses an HTTP response from a GenerateAvWithResponse call
func ParseGenerateAvResponse(rsp *http.Response) (*GenerateAvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateAvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HssAuthenticationInfoResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get authentication data for the FN-RG
	// (GET /{supiOrSuci}/security-information-rg)
	GetRgAuthData(c *gin.Context, supiOrSuci externalRef0.SupiOrSuci, params GetRgAuthDataParams)
	// Generate authentication data for the UE
	// (POST /{supiOrSuci}/security-information/generate-auth-data)
	GenerateAuthData(c *gin.Context, supiOrSuci externalRef0.SupiOrSuci)
	// Create a new confirmation event
	// (POST /{supi}/auth-events)
	ConfirmAuth(c *gin.Context, supi externalRef0.Supi)
	// Deletes the authentication result in the UDM
	// (PUT /{supi}/auth-events/{authEventId})
	DeleteAuth(c *gin.Context, supi externalRef0.Supi, authEventId string)
	// Generate authentication data for the UE in EPS or IMS domain
	// (POST /{supi}/hss-security-information/{hssAuthType}/generate-av)
	GenerateAv(c *gin.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetRgAuthData operation middleware
func (siw *ServerInterfaceWrapper) GetRgAuthData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supiOrSuci" -------------
	var supiOrSuci externalRef0.SupiOrSuci

	err = runtime.BindStyledParameter("simple", false, "supiOrSuci", c.Param("supiOrSuci"), &supiOrSuci)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supiOrSuci: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRgAuthDataParams

	// ------------- Required query parameter "authenticated-ind" -------------

	if paramValue := c.Query("authenticated-ind"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument authenticated-ind is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "authenticated-ind", c.Request.URL.Query(), &params.AuthenticatedInd)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authenticated-ind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "plmn-id" -------------

	if paramValue := c.Query("plmn-id"); paramValue != "" {

		var value externalRef0.PlmnId
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'plmn-id' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.PlmnId = &value

	}

	headers := c.Request.Header

	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-None-Match, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-None-Match: %w", err), http.StatusBadRequest)
			return
		}

		params.IfNoneMatch = &IfNoneMatch

	}

	// ------------- Optional header parameter "If-Modified-Since" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Modified-Since")]; found {
		var IfModifiedSince string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for If-Modified-Since, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Modified-Since", runtime.ParamLocationHeader, valueList[0], &IfModifiedSince)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter If-Modified-Since: %w", err), http.StatusBadRequest)
			return
		}

		params.IfModifiedSince = &IfModifiedSince

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRgAuthData(c, supiOrSuci, params)
}

// GenerateAuthData operation middleware
func (siw *ServerInterfaceWrapper) GenerateAuthData(c *gin.Context) {

	var err error

	// ------------- Path parameter "supiOrSuci" -------------
	var supiOrSuci externalRef0.SupiOrSuci

	err = runtime.BindStyledParameter("simple", false, "supiOrSuci", c.Param("supiOrSuci"), &supiOrSuci)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supiOrSuci: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateAuthData(c, supiOrSuci)
}

// ConfirmAuth operation middleware
func (siw *ServerInterfaceWrapper) ConfirmAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ConfirmAuth(c, supi)
}

// DeleteAuth operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "authEventId" -------------
	var authEventId string

	err = runtime.BindStyledParameter("simple", false, "authEventId", c.Param("authEventId"), &authEventId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter authEventId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuth(c, supi, authEventId)
}

// GenerateAv operation middleware
func (siw *ServerInterfaceWrapper) GenerateAv(c *gin.Context) {

	var err error

	// ------------- Path parameter "supi" -------------
	var supi externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "supi", c.Param("supi"), &supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "hssAuthType" -------------
	var hssAuthType HssAuthTypeInUri

	err = runtime.BindStyledParameter("simple", false, "hssAuthType", c.Param("hssAuthType"), &hssAuthType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hssAuthType: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-ueau"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateAv(c, supi, hssAuthType)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/:supiOrSuci/security-information-rg", wrapper.GetRgAuthData)
	router.POST(options.BaseURL+"/:supiOrSuci/security-information/generate-auth-data", wrapper.GenerateAuthData)
	router.POST(options.BaseURL+"/:supi/auth-events", wrapper.ConfirmAuth)
	router.PUT(options.BaseURL+"/:supi/auth-events/:authEventId", wrapper.DeleteAuth)
	router.POST(options.BaseURL+"/:supi/hss-security-information/:hssAuthType/generate-av", wrapper.GenerateAv)
}

type GetRgAuthDataRequestObject struct {
	SupiOrSuci externalRef0.SupiOrSuci `json:"supiOrSuci"`
	Params     GetRgAuthDataParams
}

type GetRgAuthDataResponseObject interface {
	VisitGetRgAuthDataResponse(w http.ResponseWriter) error
}

type GetRgAuthData200JSONResponse RgAuthCtx

func (response GetRgAuthData200JSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRgAuthData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData400ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRgAuthData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData403ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRgAuthData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData404ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRgAuthData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData500ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRgAuthData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetRgAuthData503ApplicationProblemPlusJSONResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetRgAuthDatadefaultResponse struct {
	StatusCode int
}

func (response GetRgAuthDatadefaultResponse) VisitGetRgAuthDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GenerateAuthDataRequestObject struct {
	SupiOrSuci externalRef0.SupiOrSuci `json:"supiOrSuci"`
	Body       *GenerateAuthDataJSONRequestBody
}

type GenerateAuthDataResponseObject interface {
	VisitGenerateAuthDataResponse(w http.ResponseWriter) error
}

type GenerateAuthData200JSONResponse AuthenticationInfoResult

func (response GenerateAuthData200JSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAuthData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData400ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAuthData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData403ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAuthData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData404ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAuthData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData500ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAuthData501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData501ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAuthData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GenerateAuthData503ApplicationProblemPlusJSONResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAuthDatadefaultResponse struct {
	StatusCode int
}

func (response GenerateAuthDatadefaultResponse) VisitGenerateAuthDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ConfirmAuthRequestObject struct {
	Supi externalRef0.Supi `json:"supi"`
	Body *ConfirmAuthJSONRequestBody
}

type ConfirmAuthResponseObject interface {
	VisitConfirmAuthResponse(w http.ResponseWriter) error
}

type ConfirmAuth201ResponseHeaders struct {
	Location string
}

type ConfirmAuth201JSONResponse struct {
	Body    AuthEvent
	Headers ConfirmAuth201ResponseHeaders
}

func (response ConfirmAuth201JSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConfirmAuth400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth400ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmAuth404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth404ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmAuth500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth500ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmAuth503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ConfirmAuth503ApplicationProblemPlusJSONResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmAuthdefaultResponse struct {
	StatusCode int
}

func (response ConfirmAuthdefaultResponse) VisitConfirmAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeleteAuthRequestObject struct {
	Supi        externalRef0.Supi `json:"supi"`
	AuthEventId string            `json:"authEventId"`
	Body        *DeleteAuthJSONRequestBody
}

type DeleteAuthResponseObject interface {
	VisitDeleteAuthResponse(w http.ResponseWriter) error
}

type DeleteAuth204Response struct {
}

func (response DeleteAuth204Response) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAuth400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth400ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAuth404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth404ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAuth500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth500ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAuth503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteAuth503ApplicationProblemPlusJSONResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAuthdefaultResponse struct {
	StatusCode int
}

func (response DeleteAuthdefaultResponse) VisitDeleteAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GenerateAvRequestObject struct {
	Supi        externalRef0.Supi `json:"supi"`
	HssAuthType HssAuthTypeInUri  `json:"hssAuthType"`
	Body        *GenerateAvJSONRequestBody
}

type GenerateAvResponseObject interface {
	VisitGenerateAvResponse(w http.ResponseWriter) error
}

type GenerateAv200JSONResponse HssAuthenticationInfoResult

func (response GenerateAv200JSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAv400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GenerateAv400ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAv403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GenerateAv403ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAv404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GenerateAv404ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAv500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GenerateAv500ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAv501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response GenerateAv501ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAv503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GenerateAv503ApplicationProblemPlusJSONResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GenerateAvdefaultResponse struct {
	StatusCode int
}

func (response GenerateAvdefaultResponse) VisitGenerateAvResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get authentication data for the FN-RG
	// (GET /{supiOrSuci}/security-information-rg)
	GetRgAuthData(ctx context.Context, request GetRgAuthDataRequestObject) (GetRgAuthDataResponseObject, error)
	// Generate authentication data for the UE
	// (POST /{supiOrSuci}/security-information/generate-auth-data)
	GenerateAuthData(ctx context.Context, request GenerateAuthDataRequestObject) (GenerateAuthDataResponseObject, error)
	// Create a new confirmation event
	// (POST /{supi}/auth-events)
	ConfirmAuth(ctx context.Context, request ConfirmAuthRequestObject) (ConfirmAuthResponseObject, error)
	// Deletes the authentication result in the UDM
	// (PUT /{supi}/auth-events/{authEventId})
	DeleteAuth(ctx context.Context, request DeleteAuthRequestObject) (DeleteAuthResponseObject, error)
	// Generate authentication data for the UE in EPS or IMS domain
	// (POST /{supi}/hss-security-information/{hssAuthType}/generate-av)
	GenerateAv(ctx context.Context, request GenerateAvRequestObject) (GenerateAvResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetRgAuthData operation middleware
func (sh *strictHandler) GetRgAuthData(ctx *gin.Context, supiOrSuci externalRef0.SupiOrSuci, params GetRgAuthDataParams) {
	var request GetRgAuthDataRequestObject

	request.SupiOrSuci = supiOrSuci
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRgAuthData(ctx, request.(GetRgAuthDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRgAuthData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRgAuthDataResponseObject); ok {
		if err := validResponse.VisitGetRgAuthDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateAuthData operation middleware
func (sh *strictHandler) GenerateAuthData(ctx *gin.Context, supiOrSuci externalRef0.SupiOrSuci) {
	var request GenerateAuthDataRequestObject

	request.SupiOrSuci = supiOrSuci

	var body GenerateAuthDataJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateAuthData(ctx, request.(GenerateAuthDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateAuthData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GenerateAuthDataResponseObject); ok {
		if err := validResponse.VisitGenerateAuthDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ConfirmAuth operation middleware
func (sh *strictHandler) ConfirmAuth(ctx *gin.Context, supi externalRef0.Supi) {
	var request ConfirmAuthRequestObject

	request.Supi = supi

	var body ConfirmAuthJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmAuth(ctx, request.(ConfirmAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ConfirmAuthResponseObject); ok {
		if err := validResponse.VisitConfirmAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAuth operation middleware
func (sh *strictHandler) DeleteAuth(ctx *gin.Context, supi externalRef0.Supi, authEventId string) {
	var request DeleteAuthRequestObject

	request.Supi = supi
	request.AuthEventId = authEventId

	var body DeleteAuthJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAuth(ctx, request.(DeleteAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAuthResponseObject); ok {
		if err := validResponse.VisitDeleteAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateAv operation middleware
func (sh *strictHandler) GenerateAv(ctx *gin.Context, supi externalRef0.Supi, hssAuthType HssAuthTypeInUri) {
	var request GenerateAvRequestObject

	request.Supi = supi
	request.HssAuthType = hssAuthType

	var body GenerateAvJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateAv(ctx, request.(GenerateAvRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateAv")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GenerateAvResponseObject); ok {
		if err := validResponse.VisitGenerateAvResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
