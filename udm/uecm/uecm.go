// Package uecm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package uecm

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/nrf/management"
	externalRef2 "github.com/ShouheiNishi/openapi5g/udm/sdm"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for DeregistrationReason.
const (
	DeregistrationReasonN5GSTOEPSMOBILITY                      DeregistrationReason = "5GS_TO_EPS_MOBILITY"
	DeregistrationReasonN5GSTOEPSMOBILITYUEINITIALREGISTRATION DeregistrationReason = "5GS_TO_EPS_MOBILITY_UE_INITIAL_REGISTRATION"
	DeregistrationReasonREREGISTRATIONREQUIRED                 DeregistrationReason = "REREGISTRATION_REQUIRED"
	DeregistrationReasonSMFCONTEXTTRANSFERRED                  DeregistrationReason = "SMF_CONTEXT_TRANSFERRED"
	DeregistrationReasonSUBSCRIPTIONWITHDRAWN                  DeregistrationReason = "SUBSCRIPTION_WITHDRAWN"
	DeregistrationReasonUEINITIALREGISTRATION                  DeregistrationReason = "UE_INITIAL_REGISTRATION"
	DeregistrationReasonUEREGISTRATIONAREACHANGE               DeregistrationReason = "UE_REGISTRATION_AREA_CHANGE"
)

// Defines values for ImsVoPs.
const (
	HOMOGENEOUSNONSUPPORT   ImsVoPs = "HOMOGENEOUS_NON_SUPPORT"
	HOMOGENEOUSSUPPORT      ImsVoPs = "HOMOGENEOUS_SUPPORT"
	NONHOMOGENEOUSORUNKNOWN ImsVoPs = "NON_HOMOGENEOUS_OR_UNKNOWN"
)

// Defines values for RegistrationDataSetName.
const (
	AMF3GPP        RegistrationDataSetName = "AMF_3GPP"
	AMFNON3GPP     RegistrationDataSetName = "AMF_NON_3GPP"
	SMFPDUSESSIONS RegistrationDataSetName = "SMF_PDU_SESSIONS"
	SMSF3GPP       RegistrationDataSetName = "SMSF_3GPP"
	SMSFNON3GPP    RegistrationDataSetName = "SMSF_NON_3GPP"
)

// Defines values for RegistrationReason.
const (
	RegistrationReasonSMFCONTEXTTRANSFERRED RegistrationReason = "SMF_CONTEXT_TRANSFERRED"
)

// Amf3GppAccessRegistration defines model for Amf3GppAccessRegistration.
type Amf3GppAccessRegistration struct {
	AmfEeSubscriptionId *externalRef0.Uri         `json:"amfEeSubscriptionId,omitempty"`
	AmfInstanceId       externalRef0.NfInstanceId `json:"amfInstanceId"`

	// AmfServiceNameDereg Service names known to NRF
	AmfServiceNameDereg *externalRef1.ServiceName `json:"amfServiceNameDereg,omitempty"`

	// AmfServiceNamePcscfRest Service names known to NRF
	AmfServiceNamePcscfRest     *externalRef1.ServiceName       `json:"amfServiceNamePcscfRest,omitempty"`
	BackupAmfInfo               *[]externalRef0.BackupAmfInfo   `json:"backupAmfInfo,omitempty"`
	ContextInfo                 *externalRef2.ContextInfo       `json:"contextInfo,omitempty"`
	DeregCallbackUri            externalRef0.Uri                `json:"deregCallbackUri"`
	DrFlag                      *DualRegistrationFlag           `json:"drFlag,omitempty"`
	EpsInterworkingInfo         *EpsInterworkingInfo            `json:"epsInterworkingInfo,omitempty"`
	Guami                       externalRef0.Guami              `json:"guami"`
	ImsVoPs                     *ImsVoPs                        `json:"imsVoPs,omitempty"`
	InitialRegistrationInd      *bool                           `json:"initialRegistrationInd,omitempty"`
	NoEeSubscriptionInd         *bool                           `json:"noEeSubscriptionInd,omitempty"`
	PcscfRestorationCallbackUri *externalRef0.Uri               `json:"pcscfRestorationCallbackUri,omitempty"`
	Pei                         *externalRef0.Pei               `json:"pei,omitempty"`
	PurgeFlag                   *PurgeFlag                      `json:"purgeFlag,omitempty"`
	RatType                     externalRef0.RatType            `json:"ratType"`
	RegistrationTime            *externalRef0.DateTime          `json:"registrationTime,omitempty"`
	Supi                        *externalRef0.Supi              `json:"supi,omitempty"`
	SupportedFeatures           *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	UeSrvccCapability           *bool                           `json:"ueSrvccCapability,omitempty"`
	UrrpIndicator               *bool                           `json:"urrpIndicator,omitempty"`
	VgmlcAddress                *VgmlcAddress                   `json:"vgmlcAddress,omitempty"`
	AdditionalProperties        map[string]interface{}          `json:"-"`
}

// Amf3GppAccessRegistrationModification defines model for Amf3GppAccessRegistrationModification.
type Amf3GppAccessRegistrationModification struct {
	BackupAmfInfo        *[]externalRef0.BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	EpsInterworkingInfo  *EpsInterworkingInfo          `json:"epsInterworkingInfo,omitempty"`
	Guami                externalRef0.Guami            `json:"guami"`
	ImsVoPs              *ImsVoPs                      `json:"imsVoPs,omitempty"`
	Pei                  *externalRef0.Pei             `json:"pei,omitempty"`
	PurgeFlag            *PurgeFlag                    `json:"purgeFlag,omitempty"`
	UeSrvccCapability    *bool                         `json:"ueSrvccCapability"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// AmfDeregInfo defines model for AmfDeregInfo.
type AmfDeregInfo struct {
	DeregReason          DeregistrationReason   `json:"deregReason"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AmfNon3GppAccessRegistration defines model for AmfNon3GppAccessRegistration.
type AmfNon3GppAccessRegistration struct {
	AmfEeSubscriptionId *externalRef0.Uri         `json:"amfEeSubscriptionId,omitempty"`
	AmfInstanceId       externalRef0.NfInstanceId `json:"amfInstanceId"`

	// AmfServiceNameDereg Service names known to NRF
	AmfServiceNameDereg *externalRef1.ServiceName `json:"amfServiceNameDereg,omitempty"`

	// AmfServiceNamePcscfRest Service names known to NRF
	AmfServiceNamePcscfRest     *externalRef1.ServiceName       `json:"amfServiceNamePcscfRest,omitempty"`
	BackupAmfInfo               *[]externalRef0.BackupAmfInfo   `json:"backupAmfInfo,omitempty"`
	ContextInfo                 *externalRef2.ContextInfo       `json:"contextInfo,omitempty"`
	DeregCallbackUri            externalRef0.Uri                `json:"deregCallbackUri"`
	Guami                       externalRef0.Guami              `json:"guami"`
	ImsVoPs                     ImsVoPs                         `json:"imsVoPs"`
	NoEeSubscriptionInd         *bool                           `json:"noEeSubscriptionInd,omitempty"`
	PcscfRestorationCallbackUri *externalRef0.Uri               `json:"pcscfRestorationCallbackUri,omitempty"`
	Pei                         *externalRef0.Pei               `json:"pei,omitempty"`
	PurgeFlag                   *PurgeFlag                      `json:"purgeFlag,omitempty"`
	RatType                     externalRef0.RatType            `json:"ratType"`
	RegistrationTime            *externalRef0.DateTime          `json:"registrationTime,omitempty"`
	Supi                        *externalRef0.Supi              `json:"supi,omitempty"`
	SupportedFeatures           *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	UrrpIndicator               *bool                           `json:"urrpIndicator,omitempty"`
	VgmlcAddress                *VgmlcAddress                   `json:"vgmlcAddress,omitempty"`
	AdditionalProperties        map[string]interface{}          `json:"-"`
}

// AmfNon3GppAccessRegistrationModification defines model for AmfNon3GppAccessRegistrationModification.
type AmfNon3GppAccessRegistrationModification struct {
	BackupAmfInfo        *[]externalRef0.BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	Guami                externalRef0.Guami            `json:"guami"`
	ImsVoPs              *ImsVoPs                      `json:"imsVoPs,omitempty"`
	Pei                  *externalRef0.Pei             `json:"pei,omitempty"`
	PurgeFlag            *PurgeFlag                    `json:"purgeFlag,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// DeregistrationData defines model for DeregistrationData.
type DeregistrationData struct {
	AccessType           *externalRef0.AccessType   `json:"accessType,omitempty"`
	DeregReason          DeregistrationReason       `json:"deregReason"`
	NewSmfInstanceId     *externalRef0.NfInstanceId `json:"newSmfInstanceId,omitempty"`
	PduSessionId         *externalRef0.PduSessionId `json:"pduSessionId,omitempty"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// DeregistrationReason defines model for DeregistrationReason.
type DeregistrationReason string

// DualRegistrationFlag defines model for DualRegistrationFlag.
type DualRegistrationFlag = bool

// E164Number defines model for E164Number.
type E164Number = string

// EpsInterworkingInfo defines model for EpsInterworkingInfo.
type EpsInterworkingInfo struct {
	// EpsIwkPgws A map (list of key-value pairs where Dnn serves as key) of EpsIwkPgws
	EpsIwkPgws           *map[string]EpsIwkPgw  `json:"epsIwkPgws,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EpsIwkPgw defines model for EpsIwkPgw.
type EpsIwkPgw struct {
	PgwFqdn              string                    `json:"pgwFqdn"`
	SmfInstanceId        externalRef0.NfInstanceId `json:"smfInstanceId"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// ImsVoPs defines model for ImsVoPs.
type ImsVoPs string

// IpSmGwRegistration defines model for IpSmGwRegistration.
type IpSmGwRegistration struct {
	IpSmGwDiameterAddress *NetworkNodeDiameterAddress `json:"ipSmGwDiameterAddress,omitempty"`
	IpSmGwMapAddress      *E164Number                 `json:"ipSmGwMapAddress,omitempty"`
	UnriIndicator         *bool                       `json:"unriIndicator,omitempty"`
	AdditionalProperties  map[string]interface{}      `json:"-"`
}

// LocationInfo defines model for LocationInfo.
type LocationInfo struct {
	Gpsi                         *externalRef0.Gpsi              `json:"gpsi,omitempty"`
	RegistrationLocationInfoList []RegistrationLocationInfo      `json:"registrationLocationInfoList"`
	Supi                         *externalRef0.Supi              `json:"supi,omitempty"`
	SupportedFeatures            *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties         map[string]interface{}          `json:"-"`
}

// NetworkNodeDiameterAddress defines model for NetworkNodeDiameterAddress.
type NetworkNodeDiameterAddress struct {
	Name                 externalRef0.DiameterIdentity `json:"name"`
	Realm                externalRef0.DiameterIdentity `json:"realm"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// PcscfRestorationNotification defines model for PcscfRestorationNotification.
type PcscfRestorationNotification struct {
	Supi                 externalRef0.Supi      `json:"supi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PeiUpdateInfo defines model for PeiUpdateInfo.
type PeiUpdateInfo struct {
	Pei                  externalRef0.Pei       `json:"pei"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PurgeFlag defines model for PurgeFlag.
type PurgeFlag = bool

// RegistrationDataSetName defines model for RegistrationDataSetName.
type RegistrationDataSetName string

// RegistrationDataSets defines model for RegistrationDataSets.
type RegistrationDataSets struct {
	Amf3Gpp              *Amf3GppAccessRegistration    `json:"amf3Gpp,omitempty"`
	AmfNon3Gpp           *AmfNon3GppAccessRegistration `json:"amfNon3Gpp,omitempty"`
	SmfRegistration      *SmfRegistrationInfo          `json:"smfRegistration,omitempty"`
	Smsf3Gpp             *SmsfRegistration             `json:"smsf3Gpp,omitempty"`
	SmsfNon3Gpp          *SmsfRegistration             `json:"smsfNon3Gpp,omitempty"`
	AdditionalProperties map[string]interface{}        `json:"-"`
}

// RegistrationDatasetNames defines model for RegistrationDatasetNames.
type RegistrationDatasetNames = []RegistrationDataSetName

// RegistrationLocationInfo defines model for RegistrationLocationInfo.
type RegistrationLocationInfo struct {
	AccessTypeList       []externalRef0.AccessType `json:"accessTypeList"`
	AmfInstanceId        externalRef0.NfInstanceId `json:"amfInstanceId"`
	Guami                *externalRef0.Guami       `json:"guami,omitempty"`
	PlmnId               *externalRef0.PlmnId      `json:"plmnId,omitempty"`
	VgmlcAddress         *VgmlcAddress             `json:"vgmlcAddress,omitempty"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// RegistrationReason defines model for RegistrationReason.
type RegistrationReason string

// SmfRegistration defines model for SmfRegistration.
type SmfRegistration struct {
	ContextInfo                 *externalRef2.ContextInfo       `json:"contextInfo,omitempty"`
	DeregCallbackUri            *externalRef0.Uri               `json:"deregCallbackUri,omitempty"`
	Dnn                         *externalRef0.Dnn               `json:"dnn,omitempty"`
	EmergencyServices           *bool                           `json:"emergencyServices,omitempty"`
	EpdgInd                     *bool                           `json:"epdgInd,omitempty"`
	PcscfRestorationCallbackUri *externalRef0.Uri               `json:"pcscfRestorationCallbackUri,omitempty"`
	PduSessionId                externalRef0.PduSessionId       `json:"pduSessionId"`
	PgwFqdn                     *string                         `json:"pgwFqdn,omitempty"`
	PlmnId                      externalRef0.PlmnId             `json:"plmnId"`
	RegistrationReason          *RegistrationReason             `json:"registrationReason,omitempty"`
	RegistrationTime            *externalRef0.DateTime          `json:"registrationTime,omitempty"`
	SingleNssai                 externalRef0.Snssai             `json:"singleNssai"`
	SmfInstanceId               externalRef0.NfInstanceId       `json:"smfInstanceId"`
	SmfSetId                    *externalRef0.NfSetId           `json:"smfSetId,omitempty"`
	SupportedFeatures           *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties        map[string]interface{}          `json:"-"`
}

// SmfRegistrationInfo defines model for SmfRegistrationInfo.
type SmfRegistrationInfo struct {
	SmfRegistrationList  []SmfRegistration      `json:"smfRegistrationList"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SmsfRegistration defines model for SmsfRegistration.
type SmsfRegistration struct {
	ContextInfo          *externalRef2.ContextInfo       `json:"contextInfo,omitempty"`
	PlmnId               externalRef0.PlmnId             `json:"plmnId"`
	RegistrationTime     *externalRef0.DateTime          `json:"registrationTime,omitempty"`
	SmsfDiameterAddress  *NetworkNodeDiameterAddress     `json:"smsfDiameterAddress,omitempty"`
	SmsfInstanceId       externalRef0.NfInstanceId       `json:"smsfInstanceId"`
	SmsfMAPAddress       *E164Number                     `json:"smsfMAPAddress,omitempty"`
	SmsfSetId            *externalRef0.NfSetId           `json:"smsfSetId,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// TriggerRequest defines model for TriggerRequest.
type TriggerRequest struct {
	Supi                 externalRef0.Supi      `json:"supi"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// VgmlcAddress defines model for VgmlcAddress.
type VgmlcAddress struct {
	VgmlcAddressIpv4 *externalRef0.Ipv4Addr `json:"vgmlcAddressIpv4,omitempty"`
	VgmlcAddressIpv6 *externalRef0.Ipv6Addr `json:"vgmlcAddressIpv6,omitempty"`

	// VgmlcFqdn Fully Qualified Domain Name
	VgmlcFqdn            *externalRef1.Fqdn     `json:"vgmlcFqdn,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GetRegistrationsParams defines parameters for GetRegistrations.
type GetRegistrationsParams struct {
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`

	// RegistrationDatasetNames List of UECM registration dataset names
	RegistrationDatasetNames RegistrationDatasetNames `form:"registration-dataset-names" json:"registration-dataset-names"`
	SingleNssai              *externalRef0.Snssai     `form:"single-nssai,omitempty" json:"single-nssai,omitempty"`
	Dnn                      *externalRef0.Dnn        `form:"dnn,omitempty" json:"dnn,omitempty"`
}

// Get3GppRegistrationParams defines parameters for Get3GppRegistration.
type Get3GppRegistrationParams struct {
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// Update3GppRegistrationParams defines parameters for Update3GppRegistration.
type Update3GppRegistrationParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetNon3GppRegistrationParams defines parameters for GetNon3GppRegistration.
type GetNon3GppRegistrationParams struct {
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// UpdateNon3GppRegistrationParams defines parameters for UpdateNon3GppRegistration.
type UpdateNon3GppRegistrationParams struct {
	// SupportedFeatures Features required to be supported by the target NF
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetLocationInfoParams defines parameters for GetLocationInfo.
type GetLocationInfoParams struct {
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// GetSmfRegistrationParams defines parameters for GetSmfRegistration.
type GetSmfRegistrationParams struct {
	SingleNssai       *externalRef0.Snssai            `form:"single-nssai,omitempty" json:"single-nssai,omitempty"`
	Dnn               *externalRef0.Dnn               `form:"dnn,omitempty" json:"dnn,omitempty"`
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// SmfDeregistrationParams defines parameters for SmfDeregistration.
type SmfDeregistrationParams struct {
	SmfSetId      *externalRef0.NfSetId      `form:"smf-set-id,omitempty" json:"smf-set-id,omitempty"`
	SmfInstanceId *externalRef0.NfInstanceId `form:"smf-instance-id,omitempty" json:"smf-instance-id,omitempty"`
}

// N3GppSmsfDeregistrationParams defines parameters for N3GppSmsfDeregistration.
type N3GppSmsfDeregistrationParams struct {
	SmsfSetId *externalRef0.NfSetId `form:"smsf-set-id,omitempty" json:"smsf-set-id,omitempty"`
}

// Get3GppSmsfRegistrationParams defines parameters for Get3GppSmsfRegistration.
type Get3GppSmsfRegistrationParams struct {
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// Non3GppSmsfDeregistrationParams defines parameters for Non3GppSmsfDeregistration.
type Non3GppSmsfDeregistrationParams struct {
	SmsfSetId *externalRef0.NfSetId `form:"smsf-set-id,omitempty" json:"smsf-set-id,omitempty"`
}

// GetNon3GppSmsfRegistrationParams defines parameters for GetNon3GppSmsfRegistration.
type GetNon3GppSmsfRegistrationParams struct {
	SupportedFeatures *externalRef0.SupportedFeatures `form:"supported-features,omitempty" json:"supported-features,omitempty"`
}

// TriggerPCSCFRestorationJSONRequestBody defines body for TriggerPCSCFRestoration for application/json ContentType.
type TriggerPCSCFRestorationJSONRequestBody = TriggerRequest

// Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody defines body for Update3GppRegistration for application/merge-patch+json ContentType.
type Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody = Amf3GppAccessRegistrationModification

// N3GppRegistrationJSONRequestBody defines body for N3GppRegistration for application/json ContentType.
type N3GppRegistrationJSONRequestBody = Amf3GppAccessRegistration

// DeregAMFJSONRequestBody defines body for DeregAMF for application/json ContentType.
type DeregAMFJSONRequestBody = AmfDeregInfo

// PeiUpdateJSONRequestBody defines body for PeiUpdate for application/json ContentType.
type PeiUpdateJSONRequestBody = PeiUpdateInfo

// UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody defines body for UpdateNon3GppRegistration for application/merge-patch+json ContentType.
type UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody = AmfNon3GppAccessRegistrationModification

// Non3GppRegistrationJSONRequestBody defines body for Non3GppRegistration for application/json ContentType.
type Non3GppRegistrationJSONRequestBody = AmfNon3GppAccessRegistration

// IpSmGwRegistrationJSONRequestBody defines body for IpSmGwRegistration for application/json ContentType.
type IpSmGwRegistrationJSONRequestBody = IpSmGwRegistration

// RegistrationJSONRequestBody defines body for Registration for application/json ContentType.
type RegistrationJSONRequestBody = SmfRegistration

// N3GppSmsfRegistrationJSONRequestBody defines body for N3GppSmsfRegistration for application/json ContentType.
type N3GppSmsfRegistrationJSONRequestBody = SmsfRegistration

// Non3GppSmsfRegistrationJSONRequestBody defines body for Non3GppSmsfRegistration for application/json ContentType.
type Non3GppSmsfRegistrationJSONRequestBody = SmsfRegistration

// Getter for additional properties for Amf3GppAccessRegistration. Returns the specified
// element and whether it was found
func (a Amf3GppAccessRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Amf3GppAccessRegistration
func (a *Amf3GppAccessRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Amf3GppAccessRegistration to handle AdditionalProperties
func (a *Amf3GppAccessRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfEeSubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.AmfEeSubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'amfEeSubscriptionId': %w", err)
		}
		delete(object, "amfEeSubscriptionId")
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["amfServiceNameDereg"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNameDereg)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNameDereg': %w", err)
		}
		delete(object, "amfServiceNameDereg")
	}

	if raw, found := object["amfServiceNamePcscfRest"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNamePcscfRest)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNamePcscfRest': %w", err)
		}
		delete(object, "amfServiceNamePcscfRest")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["deregCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.DeregCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'deregCallbackUri': %w", err)
		}
		delete(object, "deregCallbackUri")
	}

	if raw, found := object["drFlag"]; found {
		err = json.Unmarshal(raw, &a.DrFlag)
		if err != nil {
			return fmt.Errorf("error reading 'drFlag': %w", err)
		}
		delete(object, "drFlag")
	}

	if raw, found := object["epsInterworkingInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInfo': %w", err)
		}
		delete(object, "epsInterworkingInfo")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["initialRegistrationInd"]; found {
		err = json.Unmarshal(raw, &a.InitialRegistrationInd)
		if err != nil {
			return fmt.Errorf("error reading 'initialRegistrationInd': %w", err)
		}
		delete(object, "initialRegistrationInd")
	}

	if raw, found := object["noEeSubscriptionInd"]; found {
		err = json.Unmarshal(raw, &a.NoEeSubscriptionInd)
		if err != nil {
			return fmt.Errorf("error reading 'noEeSubscriptionInd': %w", err)
		}
		delete(object, "noEeSubscriptionInd")
	}

	if raw, found := object["pcscfRestorationCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.PcscfRestorationCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfRestorationCallbackUri': %w", err)
		}
		delete(object, "pcscfRestorationCallbackUri")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["ueSrvccCapability"]; found {
		err = json.Unmarshal(raw, &a.UeSrvccCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueSrvccCapability': %w", err)
		}
		delete(object, "ueSrvccCapability")
	}

	if raw, found := object["urrpIndicator"]; found {
		err = json.Unmarshal(raw, &a.UrrpIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'urrpIndicator': %w", err)
		}
		delete(object, "urrpIndicator")
	}

	if raw, found := object["vgmlcAddress"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddress)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddress': %w", err)
		}
		delete(object, "vgmlcAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Amf3GppAccessRegistration to handle AdditionalProperties
func (a Amf3GppAccessRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfEeSubscriptionId != nil {
		object["amfEeSubscriptionId"], err = json.Marshal(a.AmfEeSubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfEeSubscriptionId': %w", err)
		}
	}

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.AmfServiceNameDereg != nil {
		object["amfServiceNameDereg"], err = json.Marshal(a.AmfServiceNameDereg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNameDereg': %w", err)
		}
	}

	if a.AmfServiceNamePcscfRest != nil {
		object["amfServiceNamePcscfRest"], err = json.Marshal(a.AmfServiceNamePcscfRest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNamePcscfRest': %w", err)
		}
	}

	if a.BackupAmfInfo != nil {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	object["deregCallbackUri"], err = json.Marshal(a.DeregCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregCallbackUri': %w", err)
	}

	if a.DrFlag != nil {
		object["drFlag"], err = json.Marshal(a.DrFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'drFlag': %w", err)
		}
	}

	if a.EpsInterworkingInfo != nil {
		object["epsInterworkingInfo"], err = json.Marshal(a.EpsInterworkingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInfo': %w", err)
		}
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	if a.ImsVoPs != nil {
		object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
		}
	}

	if a.InitialRegistrationInd != nil {
		object["initialRegistrationInd"], err = json.Marshal(a.InitialRegistrationInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'initialRegistrationInd': %w", err)
		}
	}

	if a.NoEeSubscriptionInd != nil {
		object["noEeSubscriptionInd"], err = json.Marshal(a.NoEeSubscriptionInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noEeSubscriptionInd': %w", err)
		}
	}

	if a.PcscfRestorationCallbackUri != nil {
		object["pcscfRestorationCallbackUri"], err = json.Marshal(a.PcscfRestorationCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfRestorationCallbackUri': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	object["ratType"], err = json.Marshal(a.RatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UeSrvccCapability != nil {
		object["ueSrvccCapability"], err = json.Marshal(a.UeSrvccCapability)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueSrvccCapability': %w", err)
		}
	}

	if a.UrrpIndicator != nil {
		object["urrpIndicator"], err = json.Marshal(a.UrrpIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urrpIndicator': %w", err)
		}
	}

	if a.VgmlcAddress != nil {
		object["vgmlcAddress"], err = json.Marshal(a.VgmlcAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Amf3GppAccessRegistrationModification. Returns the specified
// element and whether it was found
func (a Amf3GppAccessRegistrationModification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Amf3GppAccessRegistrationModification
func (a *Amf3GppAccessRegistrationModification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Amf3GppAccessRegistrationModification to handle AdditionalProperties
func (a *Amf3GppAccessRegistrationModification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["epsInterworkingInfo"]; found {
		err = json.Unmarshal(raw, &a.EpsInterworkingInfo)
		if err != nil {
			return fmt.Errorf("error reading 'epsInterworkingInfo': %w", err)
		}
		delete(object, "epsInterworkingInfo")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if raw, found := object["ueSrvccCapability"]; found {
		err = json.Unmarshal(raw, &a.UeSrvccCapability)
		if err != nil {
			return fmt.Errorf("error reading 'ueSrvccCapability': %w", err)
		}
		delete(object, "ueSrvccCapability")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Amf3GppAccessRegistrationModification to handle AdditionalProperties
func (a Amf3GppAccessRegistrationModification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackupAmfInfo != nil {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.EpsInterworkingInfo != nil {
		object["epsInterworkingInfo"], err = json.Marshal(a.EpsInterworkingInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsInterworkingInfo': %w", err)
		}
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	if a.ImsVoPs != nil {
		object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	object["ueSrvccCapability"], err = json.Marshal(a.UeSrvccCapability)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ueSrvccCapability': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfDeregInfo. Returns the specified
// element and whether it was found
func (a AmfDeregInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfDeregInfo
func (a *AmfDeregInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfDeregInfo to handle AdditionalProperties
func (a *AmfDeregInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["deregReason"]; found {
		err = json.Unmarshal(raw, &a.DeregReason)
		if err != nil {
			return fmt.Errorf("error reading 'deregReason': %w", err)
		}
		delete(object, "deregReason")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfDeregInfo to handle AdditionalProperties
func (a AmfDeregInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["deregReason"], err = json.Marshal(a.DeregReason)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregReason': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfNon3GppAccessRegistration. Returns the specified
// element and whether it was found
func (a AmfNon3GppAccessRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfNon3GppAccessRegistration
func (a *AmfNon3GppAccessRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfNon3GppAccessRegistration to handle AdditionalProperties
func (a *AmfNon3GppAccessRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amfEeSubscriptionId"]; found {
		err = json.Unmarshal(raw, &a.AmfEeSubscriptionId)
		if err != nil {
			return fmt.Errorf("error reading 'amfEeSubscriptionId': %w", err)
		}
		delete(object, "amfEeSubscriptionId")
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["amfServiceNameDereg"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNameDereg)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNameDereg': %w", err)
		}
		delete(object, "amfServiceNameDereg")
	}

	if raw, found := object["amfServiceNamePcscfRest"]; found {
		err = json.Unmarshal(raw, &a.AmfServiceNamePcscfRest)
		if err != nil {
			return fmt.Errorf("error reading 'amfServiceNamePcscfRest': %w", err)
		}
		delete(object, "amfServiceNamePcscfRest")
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["deregCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.DeregCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'deregCallbackUri': %w", err)
		}
		delete(object, "deregCallbackUri")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["noEeSubscriptionInd"]; found {
		err = json.Unmarshal(raw, &a.NoEeSubscriptionInd)
		if err != nil {
			return fmt.Errorf("error reading 'noEeSubscriptionInd': %w", err)
		}
		delete(object, "noEeSubscriptionInd")
	}

	if raw, found := object["pcscfRestorationCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.PcscfRestorationCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfRestorationCallbackUri': %w", err)
		}
		delete(object, "pcscfRestorationCallbackUri")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if raw, found := object["ratType"]; found {
		err = json.Unmarshal(raw, &a.RatType)
		if err != nil {
			return fmt.Errorf("error reading 'ratType': %w", err)
		}
		delete(object, "ratType")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["urrpIndicator"]; found {
		err = json.Unmarshal(raw, &a.UrrpIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'urrpIndicator': %w", err)
		}
		delete(object, "urrpIndicator")
	}

	if raw, found := object["vgmlcAddress"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddress)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddress': %w", err)
		}
		delete(object, "vgmlcAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfNon3GppAccessRegistration to handle AdditionalProperties
func (a AmfNon3GppAccessRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AmfEeSubscriptionId != nil {
		object["amfEeSubscriptionId"], err = json.Marshal(a.AmfEeSubscriptionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfEeSubscriptionId': %w", err)
		}
	}

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.AmfServiceNameDereg != nil {
		object["amfServiceNameDereg"], err = json.Marshal(a.AmfServiceNameDereg)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNameDereg': %w", err)
		}
	}

	if a.AmfServiceNamePcscfRest != nil {
		object["amfServiceNamePcscfRest"], err = json.Marshal(a.AmfServiceNamePcscfRest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfServiceNamePcscfRest': %w", err)
		}
	}

	if a.BackupAmfInfo != nil {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	object["deregCallbackUri"], err = json.Marshal(a.DeregCallbackUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregCallbackUri': %w", err)
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
	}

	if a.NoEeSubscriptionInd != nil {
		object["noEeSubscriptionInd"], err = json.Marshal(a.NoEeSubscriptionInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'noEeSubscriptionInd': %w", err)
		}
	}

	if a.PcscfRestorationCallbackUri != nil {
		object["pcscfRestorationCallbackUri"], err = json.Marshal(a.PcscfRestorationCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfRestorationCallbackUri': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	object["ratType"], err = json.Marshal(a.RatType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'ratType': %w", err)
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if a.UrrpIndicator != nil {
		object["urrpIndicator"], err = json.Marshal(a.UrrpIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'urrpIndicator': %w", err)
		}
	}

	if a.VgmlcAddress != nil {
		object["vgmlcAddress"], err = json.Marshal(a.VgmlcAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AmfNon3GppAccessRegistrationModification. Returns the specified
// element and whether it was found
func (a AmfNon3GppAccessRegistrationModification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AmfNon3GppAccessRegistrationModification
func (a *AmfNon3GppAccessRegistrationModification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AmfNon3GppAccessRegistrationModification to handle AdditionalProperties
func (a *AmfNon3GppAccessRegistrationModification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["backupAmfInfo"]; found {
		err = json.Unmarshal(raw, &a.BackupAmfInfo)
		if err != nil {
			return fmt.Errorf("error reading 'backupAmfInfo': %w", err)
		}
		delete(object, "backupAmfInfo")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["imsVoPs"]; found {
		err = json.Unmarshal(raw, &a.ImsVoPs)
		if err != nil {
			return fmt.Errorf("error reading 'imsVoPs': %w", err)
		}
		delete(object, "imsVoPs")
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if raw, found := object["purgeFlag"]; found {
		err = json.Unmarshal(raw, &a.PurgeFlag)
		if err != nil {
			return fmt.Errorf("error reading 'purgeFlag': %w", err)
		}
		delete(object, "purgeFlag")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AmfNon3GppAccessRegistrationModification to handle AdditionalProperties
func (a AmfNon3GppAccessRegistrationModification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BackupAmfInfo != nil {
		object["backupAmfInfo"], err = json.Marshal(a.BackupAmfInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'backupAmfInfo': %w", err)
		}
	}

	object["guami"], err = json.Marshal(a.Guami)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'guami': %w", err)
	}

	if a.ImsVoPs != nil {
		object["imsVoPs"], err = json.Marshal(a.ImsVoPs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'imsVoPs': %w", err)
		}
	}

	if a.Pei != nil {
		object["pei"], err = json.Marshal(a.Pei)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pei': %w", err)
		}
	}

	if a.PurgeFlag != nil {
		object["purgeFlag"], err = json.Marshal(a.PurgeFlag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'purgeFlag': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeregistrationData. Returns the specified
// element and whether it was found
func (a DeregistrationData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeregistrationData
func (a *DeregistrationData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeregistrationData to handle AdditionalProperties
func (a *DeregistrationData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessType"]; found {
		err = json.Unmarshal(raw, &a.AccessType)
		if err != nil {
			return fmt.Errorf("error reading 'accessType': %w", err)
		}
		delete(object, "accessType")
	}

	if raw, found := object["deregReason"]; found {
		err = json.Unmarshal(raw, &a.DeregReason)
		if err != nil {
			return fmt.Errorf("error reading 'deregReason': %w", err)
		}
		delete(object, "deregReason")
	}

	if raw, found := object["newSmfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.NewSmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'newSmfInstanceId': %w", err)
		}
		delete(object, "newSmfInstanceId")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeregistrationData to handle AdditionalProperties
func (a DeregistrationData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccessType != nil {
		object["accessType"], err = json.Marshal(a.AccessType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'accessType': %w", err)
		}
	}

	object["deregReason"], err = json.Marshal(a.DeregReason)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'deregReason': %w", err)
	}

	if a.NewSmfInstanceId != nil {
		object["newSmfInstanceId"], err = json.Marshal(a.NewSmfInstanceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newSmfInstanceId': %w", err)
		}
	}

	if a.PduSessionId != nil {
		object["pduSessionId"], err = json.Marshal(a.PduSessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsInterworkingInfo. Returns the specified
// element and whether it was found
func (a EpsInterworkingInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsInterworkingInfo
func (a *EpsInterworkingInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsInterworkingInfo to handle AdditionalProperties
func (a *EpsInterworkingInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["epsIwkPgws"]; found {
		err = json.Unmarshal(raw, &a.EpsIwkPgws)
		if err != nil {
			return fmt.Errorf("error reading 'epsIwkPgws': %w", err)
		}
		delete(object, "epsIwkPgws")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsInterworkingInfo to handle AdditionalProperties
func (a EpsInterworkingInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.EpsIwkPgws != nil {
		object["epsIwkPgws"], err = json.Marshal(a.EpsIwkPgws)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epsIwkPgws': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EpsIwkPgw. Returns the specified
// element and whether it was found
func (a EpsIwkPgw) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EpsIwkPgw
func (a *EpsIwkPgw) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EpsIwkPgw to handle AdditionalProperties
func (a *EpsIwkPgw) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EpsIwkPgw to handle AdditionalProperties
func (a EpsIwkPgw) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
	}

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IpSmGwRegistration. Returns the specified
// element and whether it was found
func (a IpSmGwRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IpSmGwRegistration
func (a *IpSmGwRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IpSmGwRegistration to handle AdditionalProperties
func (a *IpSmGwRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ipSmGwDiameterAddress"]; found {
		err = json.Unmarshal(raw, &a.IpSmGwDiameterAddress)
		if err != nil {
			return fmt.Errorf("error reading 'ipSmGwDiameterAddress': %w", err)
		}
		delete(object, "ipSmGwDiameterAddress")
	}

	if raw, found := object["ipSmGwMapAddress"]; found {
		err = json.Unmarshal(raw, &a.IpSmGwMapAddress)
		if err != nil {
			return fmt.Errorf("error reading 'ipSmGwMapAddress': %w", err)
		}
		delete(object, "ipSmGwMapAddress")
	}

	if raw, found := object["unriIndicator"]; found {
		err = json.Unmarshal(raw, &a.UnriIndicator)
		if err != nil {
			return fmt.Errorf("error reading 'unriIndicator': %w", err)
		}
		delete(object, "unriIndicator")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IpSmGwRegistration to handle AdditionalProperties
func (a IpSmGwRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.IpSmGwDiameterAddress != nil {
		object["ipSmGwDiameterAddress"], err = json.Marshal(a.IpSmGwDiameterAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipSmGwDiameterAddress': %w", err)
		}
	}

	if a.IpSmGwMapAddress != nil {
		object["ipSmGwMapAddress"], err = json.Marshal(a.IpSmGwMapAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipSmGwMapAddress': %w", err)
		}
	}

	if a.UnriIndicator != nil {
		object["unriIndicator"], err = json.Marshal(a.UnriIndicator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'unriIndicator': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for LocationInfo. Returns the specified
// element and whether it was found
func (a LocationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LocationInfo
func (a *LocationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LocationInfo to handle AdditionalProperties
func (a *LocationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["gpsi"]; found {
		err = json.Unmarshal(raw, &a.Gpsi)
		if err != nil {
			return fmt.Errorf("error reading 'gpsi': %w", err)
		}
		delete(object, "gpsi")
	}

	if raw, found := object["registrationLocationInfoList"]; found {
		err = json.Unmarshal(raw, &a.RegistrationLocationInfoList)
		if err != nil {
			return fmt.Errorf("error reading 'registrationLocationInfoList': %w", err)
		}
		delete(object, "registrationLocationInfoList")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LocationInfo to handle AdditionalProperties
func (a LocationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Gpsi != nil {
		object["gpsi"], err = json.Marshal(a.Gpsi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'gpsi': %w", err)
		}
	}

	object["registrationLocationInfoList"], err = json.Marshal(a.RegistrationLocationInfoList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'registrationLocationInfoList': %w", err)
	}

	if a.Supi != nil {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NetworkNodeDiameterAddress. Returns the specified
// element and whether it was found
func (a NetworkNodeDiameterAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NetworkNodeDiameterAddress
func (a *NetworkNodeDiameterAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NetworkNodeDiameterAddress to handle AdditionalProperties
func (a *NetworkNodeDiameterAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["realm"]; found {
		err = json.Unmarshal(raw, &a.Realm)
		if err != nil {
			return fmt.Errorf("error reading 'realm': %w", err)
		}
		delete(object, "realm")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NetworkNodeDiameterAddress to handle AdditionalProperties
func (a NetworkNodeDiameterAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	object["realm"], err = json.Marshal(a.Realm)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'realm': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PcscfRestorationNotification. Returns the specified
// element and whether it was found
func (a PcscfRestorationNotification) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PcscfRestorationNotification
func (a *PcscfRestorationNotification) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PcscfRestorationNotification to handle AdditionalProperties
func (a *PcscfRestorationNotification) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PcscfRestorationNotification to handle AdditionalProperties
func (a PcscfRestorationNotification) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PeiUpdateInfo. Returns the specified
// element and whether it was found
func (a PeiUpdateInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PeiUpdateInfo
func (a *PeiUpdateInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PeiUpdateInfo to handle AdditionalProperties
func (a *PeiUpdateInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pei"]; found {
		err = json.Unmarshal(raw, &a.Pei)
		if err != nil {
			return fmt.Errorf("error reading 'pei': %w", err)
		}
		delete(object, "pei")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PeiUpdateInfo to handle AdditionalProperties
func (a PeiUpdateInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["pei"], err = json.Marshal(a.Pei)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pei': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RegistrationDataSets. Returns the specified
// element and whether it was found
func (a RegistrationDataSets) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RegistrationDataSets
func (a *RegistrationDataSets) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RegistrationDataSets to handle AdditionalProperties
func (a *RegistrationDataSets) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["amf3Gpp"]; found {
		err = json.Unmarshal(raw, &a.Amf3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amf3Gpp': %w", err)
		}
		delete(object, "amf3Gpp")
	}

	if raw, found := object["amfNon3Gpp"]; found {
		err = json.Unmarshal(raw, &a.AmfNon3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'amfNon3Gpp': %w", err)
		}
		delete(object, "amfNon3Gpp")
	}

	if raw, found := object["smfRegistration"]; found {
		err = json.Unmarshal(raw, &a.SmfRegistration)
		if err != nil {
			return fmt.Errorf("error reading 'smfRegistration': %w", err)
		}
		delete(object, "smfRegistration")
	}

	if raw, found := object["smsf3Gpp"]; found {
		err = json.Unmarshal(raw, &a.Smsf3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'smsf3Gpp': %w", err)
		}
		delete(object, "smsf3Gpp")
	}

	if raw, found := object["smsfNon3Gpp"]; found {
		err = json.Unmarshal(raw, &a.SmsfNon3Gpp)
		if err != nil {
			return fmt.Errorf("error reading 'smsfNon3Gpp': %w", err)
		}
		delete(object, "smsfNon3Gpp")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RegistrationDataSets to handle AdditionalProperties
func (a RegistrationDataSets) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Amf3Gpp != nil {
		object["amf3Gpp"], err = json.Marshal(a.Amf3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amf3Gpp': %w", err)
		}
	}

	if a.AmfNon3Gpp != nil {
		object["amfNon3Gpp"], err = json.Marshal(a.AmfNon3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'amfNon3Gpp': %w", err)
		}
	}

	if a.SmfRegistration != nil {
		object["smfRegistration"], err = json.Marshal(a.SmfRegistration)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfRegistration': %w", err)
		}
	}

	if a.Smsf3Gpp != nil {
		object["smsf3Gpp"], err = json.Marshal(a.Smsf3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsf3Gpp': %w", err)
		}
	}

	if a.SmsfNon3Gpp != nil {
		object["smsfNon3Gpp"], err = json.Marshal(a.SmsfNon3Gpp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfNon3Gpp': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RegistrationLocationInfo. Returns the specified
// element and whether it was found
func (a RegistrationLocationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RegistrationLocationInfo
func (a *RegistrationLocationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RegistrationLocationInfo to handle AdditionalProperties
func (a *RegistrationLocationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accessTypeList"]; found {
		err = json.Unmarshal(raw, &a.AccessTypeList)
		if err != nil {
			return fmt.Errorf("error reading 'accessTypeList': %w", err)
		}
		delete(object, "accessTypeList")
	}

	if raw, found := object["amfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.AmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'amfInstanceId': %w", err)
		}
		delete(object, "amfInstanceId")
	}

	if raw, found := object["guami"]; found {
		err = json.Unmarshal(raw, &a.Guami)
		if err != nil {
			return fmt.Errorf("error reading 'guami': %w", err)
		}
		delete(object, "guami")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["vgmlcAddress"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddress)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddress': %w", err)
		}
		delete(object, "vgmlcAddress")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RegistrationLocationInfo to handle AdditionalProperties
func (a RegistrationLocationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accessTypeList"], err = json.Marshal(a.AccessTypeList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accessTypeList': %w", err)
	}

	object["amfInstanceId"], err = json.Marshal(a.AmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'amfInstanceId': %w", err)
	}

	if a.Guami != nil {
		object["guami"], err = json.Marshal(a.Guami)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'guami': %w", err)
		}
	}

	if a.PlmnId != nil {
		object["plmnId"], err = json.Marshal(a.PlmnId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
		}
	}

	if a.VgmlcAddress != nil {
		object["vgmlcAddress"], err = json.Marshal(a.VgmlcAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddress': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfRegistration. Returns the specified
// element and whether it was found
func (a SmfRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfRegistration
func (a *SmfRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfRegistration to handle AdditionalProperties
func (a *SmfRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["deregCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.DeregCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'deregCallbackUri': %w", err)
		}
		delete(object, "deregCallbackUri")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["emergencyServices"]; found {
		err = json.Unmarshal(raw, &a.EmergencyServices)
		if err != nil {
			return fmt.Errorf("error reading 'emergencyServices': %w", err)
		}
		delete(object, "emergencyServices")
	}

	if raw, found := object["epdgInd"]; found {
		err = json.Unmarshal(raw, &a.EpdgInd)
		if err != nil {
			return fmt.Errorf("error reading 'epdgInd': %w", err)
		}
		delete(object, "epdgInd")
	}

	if raw, found := object["pcscfRestorationCallbackUri"]; found {
		err = json.Unmarshal(raw, &a.PcscfRestorationCallbackUri)
		if err != nil {
			return fmt.Errorf("error reading 'pcscfRestorationCallbackUri': %w", err)
		}
		delete(object, "pcscfRestorationCallbackUri")
	}

	if raw, found := object["pduSessionId"]; found {
		err = json.Unmarshal(raw, &a.PduSessionId)
		if err != nil {
			return fmt.Errorf("error reading 'pduSessionId': %w", err)
		}
		delete(object, "pduSessionId")
	}

	if raw, found := object["pgwFqdn"]; found {
		err = json.Unmarshal(raw, &a.PgwFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'pgwFqdn': %w", err)
		}
		delete(object, "pgwFqdn")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["registrationReason"]; found {
		err = json.Unmarshal(raw, &a.RegistrationReason)
		if err != nil {
			return fmt.Errorf("error reading 'registrationReason': %w", err)
		}
		delete(object, "registrationReason")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["singleNssai"]; found {
		err = json.Unmarshal(raw, &a.SingleNssai)
		if err != nil {
			return fmt.Errorf("error reading 'singleNssai': %w", err)
		}
		delete(object, "singleNssai")
	}

	if raw, found := object["smfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smfInstanceId': %w", err)
		}
		delete(object, "smfInstanceId")
	}

	if raw, found := object["smfSetId"]; found {
		err = json.Unmarshal(raw, &a.SmfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smfSetId': %w", err)
		}
		delete(object, "smfSetId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfRegistration to handle AdditionalProperties
func (a SmfRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	if a.DeregCallbackUri != nil {
		object["deregCallbackUri"], err = json.Marshal(a.DeregCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deregCallbackUri': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if a.EmergencyServices != nil {
		object["emergencyServices"], err = json.Marshal(a.EmergencyServices)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'emergencyServices': %w", err)
		}
	}

	if a.EpdgInd != nil {
		object["epdgInd"], err = json.Marshal(a.EpdgInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'epdgInd': %w", err)
		}
	}

	if a.PcscfRestorationCallbackUri != nil {
		object["pcscfRestorationCallbackUri"], err = json.Marshal(a.PcscfRestorationCallbackUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pcscfRestorationCallbackUri': %w", err)
		}
	}

	object["pduSessionId"], err = json.Marshal(a.PduSessionId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pduSessionId': %w", err)
	}

	if a.PgwFqdn != nil {
		object["pgwFqdn"], err = json.Marshal(a.PgwFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pgwFqdn': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if a.RegistrationReason != nil {
		object["registrationReason"], err = json.Marshal(a.RegistrationReason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationReason': %w", err)
		}
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	object["singleNssai"], err = json.Marshal(a.SingleNssai)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'singleNssai': %w", err)
	}

	object["smfInstanceId"], err = json.Marshal(a.SmfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfInstanceId': %w", err)
	}

	if a.SmfSetId != nil {
		object["smfSetId"], err = json.Marshal(a.SmfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smfSetId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmfRegistrationInfo. Returns the specified
// element and whether it was found
func (a SmfRegistrationInfo) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmfRegistrationInfo
func (a *SmfRegistrationInfo) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmfRegistrationInfo to handle AdditionalProperties
func (a *SmfRegistrationInfo) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["smfRegistrationList"]; found {
		err = json.Unmarshal(raw, &a.SmfRegistrationList)
		if err != nil {
			return fmt.Errorf("error reading 'smfRegistrationList': %w", err)
		}
		delete(object, "smfRegistrationList")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmfRegistrationInfo to handle AdditionalProperties
func (a SmfRegistrationInfo) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["smfRegistrationList"], err = json.Marshal(a.SmfRegistrationList)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smfRegistrationList': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SmsfRegistration. Returns the specified
// element and whether it was found
func (a SmsfRegistration) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SmsfRegistration
func (a *SmsfRegistration) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SmsfRegistration to handle AdditionalProperties
func (a *SmsfRegistration) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["contextInfo"]; found {
		err = json.Unmarshal(raw, &a.ContextInfo)
		if err != nil {
			return fmt.Errorf("error reading 'contextInfo': %w", err)
		}
		delete(object, "contextInfo")
	}

	if raw, found := object["plmnId"]; found {
		err = json.Unmarshal(raw, &a.PlmnId)
		if err != nil {
			return fmt.Errorf("error reading 'plmnId': %w", err)
		}
		delete(object, "plmnId")
	}

	if raw, found := object["registrationTime"]; found {
		err = json.Unmarshal(raw, &a.RegistrationTime)
		if err != nil {
			return fmt.Errorf("error reading 'registrationTime': %w", err)
		}
		delete(object, "registrationTime")
	}

	if raw, found := object["smsfDiameterAddress"]; found {
		err = json.Unmarshal(raw, &a.SmsfDiameterAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smsfDiameterAddress': %w", err)
		}
		delete(object, "smsfDiameterAddress")
	}

	if raw, found := object["smsfInstanceId"]; found {
		err = json.Unmarshal(raw, &a.SmsfInstanceId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfInstanceId': %w", err)
		}
		delete(object, "smsfInstanceId")
	}

	if raw, found := object["smsfMAPAddress"]; found {
		err = json.Unmarshal(raw, &a.SmsfMAPAddress)
		if err != nil {
			return fmt.Errorf("error reading 'smsfMAPAddress': %w", err)
		}
		delete(object, "smsfMAPAddress")
	}

	if raw, found := object["smsfSetId"]; found {
		err = json.Unmarshal(raw, &a.SmsfSetId)
		if err != nil {
			return fmt.Errorf("error reading 'smsfSetId': %w", err)
		}
		delete(object, "smsfSetId")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SmsfRegistration to handle AdditionalProperties
func (a SmsfRegistration) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ContextInfo != nil {
		object["contextInfo"], err = json.Marshal(a.ContextInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'contextInfo': %w", err)
		}
	}

	object["plmnId"], err = json.Marshal(a.PlmnId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'plmnId': %w", err)
	}

	if a.RegistrationTime != nil {
		object["registrationTime"], err = json.Marshal(a.RegistrationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'registrationTime': %w", err)
		}
	}

	if a.SmsfDiameterAddress != nil {
		object["smsfDiameterAddress"], err = json.Marshal(a.SmsfDiameterAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfDiameterAddress': %w", err)
		}
	}

	object["smsfInstanceId"], err = json.Marshal(a.SmsfInstanceId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'smsfInstanceId': %w", err)
	}

	if a.SmsfMAPAddress != nil {
		object["smsfMAPAddress"], err = json.Marshal(a.SmsfMAPAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfMAPAddress': %w", err)
		}
	}

	if a.SmsfSetId != nil {
		object["smsfSetId"], err = json.Marshal(a.SmsfSetId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'smsfSetId': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TriggerRequest. Returns the specified
// element and whether it was found
func (a TriggerRequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TriggerRequest
func (a *TriggerRequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TriggerRequest to handle AdditionalProperties
func (a *TriggerRequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TriggerRequest to handle AdditionalProperties
func (a TriggerRequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["supi"], err = json.Marshal(a.Supi)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'supi': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VgmlcAddress. Returns the specified
// element and whether it was found
func (a VgmlcAddress) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VgmlcAddress
func (a *VgmlcAddress) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VgmlcAddress to handle AdditionalProperties
func (a *VgmlcAddress) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["vgmlcAddressIpv4"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddressIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddressIpv4': %w", err)
		}
		delete(object, "vgmlcAddressIpv4")
	}

	if raw, found := object["vgmlcAddressIpv6"]; found {
		err = json.Unmarshal(raw, &a.VgmlcAddressIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcAddressIpv6': %w", err)
		}
		delete(object, "vgmlcAddressIpv6")
	}

	if raw, found := object["vgmlcFqdn"]; found {
		err = json.Unmarshal(raw, &a.VgmlcFqdn)
		if err != nil {
			return fmt.Errorf("error reading 'vgmlcFqdn': %w", err)
		}
		delete(object, "vgmlcFqdn")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VgmlcAddress to handle AdditionalProperties
func (a VgmlcAddress) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.VgmlcAddressIpv4 != nil {
		object["vgmlcAddressIpv4"], err = json.Marshal(a.VgmlcAddressIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddressIpv4': %w", err)
		}
	}

	if a.VgmlcAddressIpv6 != nil {
		object["vgmlcAddressIpv6"], err = json.Marshal(a.VgmlcAddressIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcAddressIpv6': %w", err)
		}
	}

	if a.VgmlcFqdn != nil {
		object["vgmlcFqdn"], err = json.Marshal(a.VgmlcFqdn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'vgmlcFqdn': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TriggerPCSCFRestorationWithBody request with any body
	TriggerPCSCFRestorationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TriggerPCSCFRestoration(ctx context.Context, body TriggerPCSCFRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegistrations request
	GetRegistrations(ctx context.Context, ueId externalRef0.VarUeId, params *GetRegistrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get3GppRegistration request
	Get3GppRegistration(ctx context.Context, ueId externalRef0.VarUeId, params *Get3GppRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update3GppRegistrationWithBody request with any body
	Update3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update3GppRegistrationWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, body Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// N3GppRegistrationWithBody request with any body
	N3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	N3GppRegistration(ctx context.Context, ueId externalRef0.Supi, body N3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeregAMFWithBody request with any body
	DeregAMFWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeregAMF(ctx context.Context, ueId externalRef0.Supi, body DeregAMFJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PeiUpdateWithBody request with any body
	PeiUpdateWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PeiUpdate(ctx context.Context, ueId externalRef0.Supi, body PeiUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNon3GppRegistration request
	GetNon3GppRegistration(ctx context.Context, ueId externalRef0.VarUeId, params *GetNon3GppRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNon3GppRegistrationWithBody request with any body
	UpdateNon3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNon3GppRegistrationWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, body UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Non3GppRegistrationWithBody request with any body
	Non3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Non3GppRegistration(ctx context.Context, ueId externalRef0.Supi, body Non3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IpSmGwDeregistration request
	IpSmGwDeregistration(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpSmGwRegistration request
	GetIpSmGwRegistration(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IpSmGwRegistrationWithBody request with any body
	IpSmGwRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IpSmGwRegistration(ctx context.Context, ueId externalRef0.Supi, body IpSmGwRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocationInfo request
	GetLocationInfo(ctx context.Context, ueId externalRef0.VarUeId, params *GetLocationInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSmfRegistration request
	GetSmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, params *GetSmfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SmfDeregistration request
	SmfDeregistration(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, params *SmfDeregistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveSmfRegistration request
	RetrieveSmfRegistration(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegistrationWithBody request with any body
	RegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Registration(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, body RegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// N3GppSmsfDeregistration request
	N3GppSmsfDeregistration(ctx context.Context, ueId externalRef0.Supi, params *N3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get3GppSmsfRegistration request
	Get3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Gpsi, params *Get3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// N3GppSmsfRegistrationWithBody request with any body
	N3GppSmsfRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	N3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Supi, body N3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Non3GppSmsfDeregistration request
	Non3GppSmsfDeregistration(ctx context.Context, ueId externalRef0.Supi, params *Non3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNon3GppSmsfRegistration request
	GetNon3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Gpsi, params *GetNon3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Non3GppSmsfRegistrationWithBody request with any body
	Non3GppSmsfRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Non3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Supi, body Non3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TriggerPCSCFRestorationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerPCSCFRestorationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerPCSCFRestoration(ctx context.Context, body TriggerPCSCFRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerPCSCFRestorationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegistrations(ctx context.Context, ueId externalRef0.VarUeId, params *GetRegistrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegistrationsRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get3GppRegistration(ctx context.Context, ueId externalRef0.VarUeId, params *Get3GppRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet3GppRegistrationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate3GppRegistrationRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update3GppRegistrationWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, body Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate3GppRegistrationRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN3GppRegistrationRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N3GppRegistration(ctx context.Context, ueId externalRef0.Supi, body N3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN3GppRegistrationRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeregAMFWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeregAMFRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeregAMF(ctx context.Context, ueId externalRef0.Supi, body DeregAMFJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeregAMFRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PeiUpdateWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPeiUpdateRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PeiUpdate(ctx context.Context, ueId externalRef0.Supi, body PeiUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPeiUpdateRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNon3GppRegistration(ctx context.Context, ueId externalRef0.VarUeId, params *GetNon3GppRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNon3GppRegistrationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNon3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNon3GppRegistrationRequestWithBody(c.Server, ueId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNon3GppRegistrationWithApplicationMergePatchPlusJSONBody(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, body UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNon3GppRegistrationRequestWithApplicationMergePatchPlusJSONBody(c.Server, ueId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Non3GppRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNon3GppRegistrationRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Non3GppRegistration(ctx context.Context, ueId externalRef0.Supi, body Non3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNon3GppRegistrationRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IpSmGwDeregistration(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIpSmGwDeregistrationRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIpSmGwRegistration(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpSmGwRegistrationRequest(c.Server, ueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IpSmGwRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIpSmGwRegistrationRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IpSmGwRegistration(ctx context.Context, ueId externalRef0.Supi, body IpSmGwRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIpSmGwRegistrationRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocationInfo(ctx context.Context, ueId externalRef0.VarUeId, params *GetLocationInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationInfoRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSmfRegistration(ctx context.Context, ueId externalRef0.VarUeId, params *GetSmfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSmfRegistrationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SmfDeregistration(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, params *SmfDeregistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSmfDeregistrationRequest(c.Server, ueId, pduSessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveSmfRegistration(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveSmfRegistrationRequest(c.Server, ueId, pduSessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegistrationRequestWithBody(c.Server, ueId, pduSessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Registration(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, body RegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegistrationRequest(c.Server, ueId, pduSessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N3GppSmsfDeregistration(ctx context.Context, ueId externalRef0.Supi, params *N3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN3GppSmsfDeregistrationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Gpsi, params *Get3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet3GppSmsfRegistrationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N3GppSmsfRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN3GppSmsfRegistrationRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) N3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Supi, body N3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewN3GppSmsfRegistrationRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Non3GppSmsfDeregistration(ctx context.Context, ueId externalRef0.Supi, params *Non3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNon3GppSmsfDeregistrationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNon3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Gpsi, params *GetNon3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNon3GppSmsfRegistrationRequest(c.Server, ueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Non3GppSmsfRegistrationWithBody(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNon3GppSmsfRegistrationRequestWithBody(c.Server, ueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Non3GppSmsfRegistration(ctx context.Context, ueId externalRef0.Supi, body Non3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNon3GppSmsfRegistrationRequest(c.Server, ueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTriggerPCSCFRestorationRequest calls the generic TriggerPCSCFRestoration builder with application/json body
func NewTriggerPCSCFRestorationRequest(server string, body TriggerPCSCFRestorationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTriggerPCSCFRestorationRequestWithBody(server, "application/json", bodyReader)
}

// NewTriggerPCSCFRestorationRequestWithBody generates requests for TriggerPCSCFRestoration with any type of body
func NewTriggerPCSCFRestorationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restore-pcscf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRegistrationsRequest generates requests for GetRegistrations
func NewGetRegistrationsRequest(server string, ueId externalRef0.VarUeId, params *GetRegistrationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "registration-dataset-names", runtime.ParamLocationQuery, params.RegistrationDatasetNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SingleNssai != nil {

			if queryParamBuf, err := json.Marshal(*params.SingleNssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("single-nssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet3GppRegistrationRequest generates requests for Get3GppRegistration
func NewGet3GppRegistrationRequest(server string, ueId externalRef0.VarUeId, params *Get3GppRegistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate3GppRegistrationRequestWithApplicationMergePatchPlusJSONBody calls the generic Update3GppRegistration builder with application/merge-patch+json body
func NewUpdate3GppRegistrationRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.Supi, params *Update3GppRegistrationParams, body Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate3GppRegistrationRequestWithBody(server, ueId, params, "application/merge-patch+json", bodyReader)
}

// NewUpdate3GppRegistrationRequestWithBody generates requests for Update3GppRegistration with any type of body
func NewUpdate3GppRegistrationRequestWithBody(server string, ueId externalRef0.Supi, params *Update3GppRegistrationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewN3GppRegistrationRequest calls the generic N3GppRegistration builder with application/json body
func NewN3GppRegistrationRequest(server string, ueId externalRef0.Supi, body N3GppRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewN3GppRegistrationRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewN3GppRegistrationRequestWithBody generates requests for N3GppRegistration with any type of body
func NewN3GppRegistrationRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeregAMFRequest calls the generic DeregAMF builder with application/json body
func NewDeregAMFRequest(server string, ueId externalRef0.Supi, body DeregAMFJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeregAMFRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewDeregAMFRequestWithBody generates requests for DeregAMF with any type of body
func NewDeregAMFRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-3gpp-access/dereg-amf", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPeiUpdateRequest calls the generic PeiUpdate builder with application/json body
func NewPeiUpdateRequest(server string, ueId externalRef0.Supi, body PeiUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPeiUpdateRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewPeiUpdateRequestWithBody generates requests for PeiUpdate with any type of body
func NewPeiUpdateRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-3gpp-access/pei-update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNon3GppRegistrationRequest generates requests for GetNon3GppRegistration
func NewGetNon3GppRegistrationRequest(server string, ueId externalRef0.VarUeId, params *GetNon3GppRegistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNon3GppRegistrationRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateNon3GppRegistration builder with application/merge-patch+json body
func NewUpdateNon3GppRegistrationRequestWithApplicationMergePatchPlusJSONBody(server string, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, body UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNon3GppRegistrationRequestWithBody(server, ueId, params, "application/merge-patch+json", bodyReader)
}

// NewUpdateNon3GppRegistrationRequestWithBody generates requests for UpdateNon3GppRegistration with any type of body
func NewUpdateNon3GppRegistrationRequestWithBody(server string, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNon3GppRegistrationRequest calls the generic Non3GppRegistration builder with application/json body
func NewNon3GppRegistrationRequest(server string, ueId externalRef0.Supi, body Non3GppRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNon3GppRegistrationRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewNon3GppRegistrationRequestWithBody generates requests for Non3GppRegistration with any type of body
func NewNon3GppRegistrationRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/amf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIpSmGwDeregistrationRequest generates requests for IpSmGwDeregistration
func NewIpSmGwDeregistrationRequest(server string, ueId externalRef0.Supi) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpSmGwRegistrationRequest generates requests for GetIpSmGwRegistration
func NewGetIpSmGwRegistrationRequest(server string, ueId externalRef0.Supi) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIpSmGwRegistrationRequest calls the generic IpSmGwRegistration builder with application/json body
func NewIpSmGwRegistrationRequest(server string, ueId externalRef0.Supi, body IpSmGwRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIpSmGwRegistrationRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewIpSmGwRegistrationRequestWithBody generates requests for IpSmGwRegistration with any type of body
func NewIpSmGwRegistrationRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/ip-sm-gw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLocationInfoRequest generates requests for GetLocationInfo
func NewGetLocationInfoRequest(server string, ueId externalRef0.VarUeId, params *GetLocationInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/location", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSmfRegistrationRequest generates requests for GetSmfRegistration
func NewGetSmfRegistrationRequest(server string, ueId externalRef0.VarUeId, params *GetSmfRegistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smf-registrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SingleNssai != nil {

			if queryParamBuf, err := json.Marshal(*params.SingleNssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("single-nssai", string(queryParamBuf))
			}

		}

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSmfDeregistrationRequest generates requests for SmfDeregistration
func NewSmfDeregistrationRequest(server string, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, params *SmfDeregistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SmfSetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "smf-set-id", runtime.ParamLocationQuery, *params.SmfSetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SmfInstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "smf-instance-id", runtime.ParamLocationQuery, *params.SmfInstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveSmfRegistrationRequest generates requests for RetrieveSmfRegistration
func NewRetrieveSmfRegistrationRequest(server string, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegistrationRequest calls the generic Registration builder with application/json body
func NewRegistrationRequest(server string, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, body RegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegistrationRequestWithBody(server, ueId, pduSessionId, "application/json", bodyReader)
}

// NewRegistrationRequestWithBody generates requests for Registration with any type of body
func NewRegistrationRequestWithBody(server string, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pduSessionId", runtime.ParamLocationPath, pduSessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smf-registrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewN3GppSmsfDeregistrationRequest generates requests for N3GppSmsfDeregistration
func NewN3GppSmsfDeregistrationRequest(server string, ueId externalRef0.Supi, params *N3GppSmsfDeregistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SmsfSetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "smsf-set-id", runtime.ParamLocationQuery, *params.SmsfSetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet3GppSmsfRegistrationRequest generates requests for Get3GppSmsfRegistration
func NewGet3GppSmsfRegistrationRequest(server string, ueId externalRef0.Gpsi, params *Get3GppSmsfRegistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewN3GppSmsfRegistrationRequest calls the generic N3GppSmsfRegistration builder with application/json body
func NewN3GppSmsfRegistrationRequest(server string, ueId externalRef0.Supi, body N3GppSmsfRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewN3GppSmsfRegistrationRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewN3GppSmsfRegistrationRequestWithBody generates requests for N3GppSmsfRegistration with any type of body
func NewN3GppSmsfRegistrationRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smsf-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNon3GppSmsfDeregistrationRequest generates requests for Non3GppSmsfDeregistration
func NewNon3GppSmsfDeregistrationRequest(server string, ueId externalRef0.Supi, params *Non3GppSmsfDeregistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SmsfSetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "smsf-set-id", runtime.ParamLocationQuery, *params.SmsfSetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNon3GppSmsfRegistrationRequest generates requests for GetNon3GppSmsfRegistration
func NewGetNon3GppSmsfRegistrationRequest(server string, ueId externalRef0.Gpsi, params *GetNon3GppSmsfRegistrationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SupportedFeatures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supported-features", runtime.ParamLocationQuery, *params.SupportedFeatures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNon3GppSmsfRegistrationRequest calls the generic Non3GppSmsfRegistration builder with application/json body
func NewNon3GppSmsfRegistrationRequest(server string, ueId externalRef0.Supi, body Non3GppSmsfRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNon3GppSmsfRegistrationRequestWithBody(server, ueId, "application/json", bodyReader)
}

// NewNon3GppSmsfRegistrationRequestWithBody generates requests for Non3GppSmsfRegistration with any type of body
func NewNon3GppSmsfRegistrationRequestWithBody(server string, ueId externalRef0.Supi, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ueId", runtime.ParamLocationPath, ueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/registrations/smsf-non-3gpp-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TriggerPCSCFRestorationWithBodyWithResponse request with any body
	TriggerPCSCFRestorationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerPCSCFRestorationResponse, error)

	TriggerPCSCFRestorationWithResponse(ctx context.Context, body TriggerPCSCFRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerPCSCFRestorationResponse, error)

	// GetRegistrationsWithResponse request
	GetRegistrationsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetRegistrationsParams, reqEditors ...RequestEditorFn) (*GetRegistrationsResponse, error)

	// Get3GppRegistrationWithResponse request
	Get3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *Get3GppRegistrationParams, reqEditors ...RequestEditorFn) (*Get3GppRegistrationResponse, error)

	// Update3GppRegistrationWithBodyWithResponse request with any body
	Update3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update3GppRegistrationResponse, error)

	Update3GppRegistrationWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, body Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Update3GppRegistrationResponse, error)

	// N3GppRegistrationWithBodyWithResponse request with any body
	N3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N3GppRegistrationResponse, error)

	N3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body N3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*N3GppRegistrationResponse, error)

	// DeregAMFWithBodyWithResponse request with any body
	DeregAMFWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeregAMFResponse, error)

	DeregAMFWithResponse(ctx context.Context, ueId externalRef0.Supi, body DeregAMFJSONRequestBody, reqEditors ...RequestEditorFn) (*DeregAMFResponse, error)

	// PeiUpdateWithBodyWithResponse request with any body
	PeiUpdateWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PeiUpdateResponse, error)

	PeiUpdateWithResponse(ctx context.Context, ueId externalRef0.Supi, body PeiUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PeiUpdateResponse, error)

	// GetNon3GppRegistrationWithResponse request
	GetNon3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetNon3GppRegistrationParams, reqEditors ...RequestEditorFn) (*GetNon3GppRegistrationResponse, error)

	// UpdateNon3GppRegistrationWithBodyWithResponse request with any body
	UpdateNon3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNon3GppRegistrationResponse, error)

	UpdateNon3GppRegistrationWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, body UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNon3GppRegistrationResponse, error)

	// Non3GppRegistrationWithBodyWithResponse request with any body
	Non3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Non3GppRegistrationResponse, error)

	Non3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body Non3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*Non3GppRegistrationResponse, error)

	// IpSmGwDeregistrationWithResponse request
	IpSmGwDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*IpSmGwDeregistrationResponse, error)

	// GetIpSmGwRegistrationWithResponse request
	GetIpSmGwRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*GetIpSmGwRegistrationResponse, error)

	// IpSmGwRegistrationWithBodyWithResponse request with any body
	IpSmGwRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IpSmGwRegistrationResponse, error)

	IpSmGwRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body IpSmGwRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IpSmGwRegistrationResponse, error)

	// GetLocationInfoWithResponse request
	GetLocationInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetLocationInfoParams, reqEditors ...RequestEditorFn) (*GetLocationInfoResponse, error)

	// GetSmfRegistrationWithResponse request
	GetSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetSmfRegistrationParams, reqEditors ...RequestEditorFn) (*GetSmfRegistrationResponse, error)

	// SmfDeregistrationWithResponse request
	SmfDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, params *SmfDeregistrationParams, reqEditors ...RequestEditorFn) (*SmfDeregistrationResponse, error)

	// RetrieveSmfRegistrationWithResponse request
	RetrieveSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*RetrieveSmfRegistrationResponse, error)

	// RegistrationWithBodyWithResponse request with any body
	RegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegistrationResponse, error)

	RegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, body RegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*RegistrationResponse, error)

	// N3GppSmsfDeregistrationWithResponse request
	N3GppSmsfDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, params *N3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*N3GppSmsfDeregistrationResponse, error)

	// Get3GppSmsfRegistrationWithResponse request
	Get3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Gpsi, params *Get3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*Get3GppSmsfRegistrationResponse, error)

	// N3GppSmsfRegistrationWithBodyWithResponse request with any body
	N3GppSmsfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N3GppSmsfRegistrationResponse, error)

	N3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body N3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*N3GppSmsfRegistrationResponse, error)

	// Non3GppSmsfDeregistrationWithResponse request
	Non3GppSmsfDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, params *Non3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*Non3GppSmsfDeregistrationResponse, error)

	// GetNon3GppSmsfRegistrationWithResponse request
	GetNon3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Gpsi, params *GetNon3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*GetNon3GppSmsfRegistrationResponse, error)

	// Non3GppSmsfRegistrationWithBodyWithResponse request with any body
	Non3GppSmsfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Non3GppSmsfRegistrationResponse, error)

	Non3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body Non3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*Non3GppSmsfRegistrationResponse, error)
}

type TriggerPCSCFRestorationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON501 *externalRef0.N501
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r TriggerPCSCFRestorationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerPCSCFRestorationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegistrationsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RegistrationDataSets
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GetRegistrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegistrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get3GppRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Amf3GppAccessRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r Get3GppRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get3GppRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update3GppRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *externalRef0.PatchResult
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON422 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r Update3GppRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update3GppRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type N3GppRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Amf3GppAccessRegistration
	JSON201                   *Amf3GppAccessRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r N3GppRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r N3GppRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeregAMFResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r DeregAMFResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeregAMFResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PeiUpdateResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r PeiUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PeiUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNon3GppRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AmfNon3GppAccessRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GetNon3GppRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNon3GppRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNon3GppRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *externalRef0.PatchResult
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON422 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r UpdateNon3GppRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNon3GppRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Non3GppRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AmfNon3GppAccessRegistration
	JSON201                   *AmfNon3GppAccessRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r Non3GppRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Non3GppRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IpSmGwDeregistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r IpSmGwDeregistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IpSmGwDeregistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpSmGwRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *IpSmGwRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GetIpSmGwRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpSmGwRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IpSmGwRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *IpSmGwRegistration
	JSON201                   *IpSmGwRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r IpSmGwRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IpSmGwRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationInfoResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *LocationInfo
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GetLocationInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSmfRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SmfRegistrationInfo
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GetSmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SmfDeregistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON422 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r SmfDeregistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SmfDeregistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveSmfRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SmfRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r RetrieveSmfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveSmfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SmfRegistration
	JSON201                   *SmfRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r RegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type N3GppSmsfDeregistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON422 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r N3GppSmsfDeregistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r N3GppSmsfDeregistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get3GppSmsfRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SmsfRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r Get3GppSmsfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get3GppSmsfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type N3GppSmsfRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SmsfRegistration
	JSON201                   *SmsfRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r N3GppSmsfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r N3GppSmsfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Non3GppSmsfDeregistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON422 *externalRef0.ProblemDetails
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r Non3GppSmsfDeregistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Non3GppSmsfDeregistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNon3GppSmsfRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SmsfRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r GetNon3GppSmsfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNon3GppSmsfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Non3GppSmsfRegistrationResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SmsfRegistration
	JSON201                   *SmsfRegistration
	ApplicationproblemJSON400 *externalRef0.N400
	ApplicationproblemJSON403 *externalRef0.N403
	ApplicationproblemJSON404 *externalRef0.N404
	ApplicationproblemJSON500 *externalRef0.N500
	ApplicationproblemJSON503 *externalRef0.N503
}

// Status returns HTTPResponse.Status
func (r Non3GppSmsfRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Non3GppSmsfRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TriggerPCSCFRestorationWithBodyWithResponse request with arbitrary body returning *TriggerPCSCFRestorationResponse
func (c *ClientWithResponses) TriggerPCSCFRestorationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerPCSCFRestorationResponse, error) {
	rsp, err := c.TriggerPCSCFRestorationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerPCSCFRestorationResponse(rsp)
}

func (c *ClientWithResponses) TriggerPCSCFRestorationWithResponse(ctx context.Context, body TriggerPCSCFRestorationJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerPCSCFRestorationResponse, error) {
	rsp, err := c.TriggerPCSCFRestoration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerPCSCFRestorationResponse(rsp)
}

// GetRegistrationsWithResponse request returning *GetRegistrationsResponse
func (c *ClientWithResponses) GetRegistrationsWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetRegistrationsParams, reqEditors ...RequestEditorFn) (*GetRegistrationsResponse, error) {
	rsp, err := c.GetRegistrations(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegistrationsResponse(rsp)
}

// Get3GppRegistrationWithResponse request returning *Get3GppRegistrationResponse
func (c *ClientWithResponses) Get3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *Get3GppRegistrationParams, reqEditors ...RequestEditorFn) (*Get3GppRegistrationResponse, error) {
	rsp, err := c.Get3GppRegistration(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet3GppRegistrationResponse(rsp)
}

// Update3GppRegistrationWithBodyWithResponse request with arbitrary body returning *Update3GppRegistrationResponse
func (c *ClientWithResponses) Update3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update3GppRegistrationResponse, error) {
	rsp, err := c.Update3GppRegistrationWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate3GppRegistrationResponse(rsp)
}

func (c *ClientWithResponses) Update3GppRegistrationWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *Update3GppRegistrationParams, body Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*Update3GppRegistrationResponse, error) {
	rsp, err := c.Update3GppRegistrationWithApplicationMergePatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate3GppRegistrationResponse(rsp)
}

// N3GppRegistrationWithBodyWithResponse request with arbitrary body returning *N3GppRegistrationResponse
func (c *ClientWithResponses) N3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N3GppRegistrationResponse, error) {
	rsp, err := c.N3GppRegistrationWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN3GppRegistrationResponse(rsp)
}

func (c *ClientWithResponses) N3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body N3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*N3GppRegistrationResponse, error) {
	rsp, err := c.N3GppRegistration(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN3GppRegistrationResponse(rsp)
}

// DeregAMFWithBodyWithResponse request with arbitrary body returning *DeregAMFResponse
func (c *ClientWithResponses) DeregAMFWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeregAMFResponse, error) {
	rsp, err := c.DeregAMFWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeregAMFResponse(rsp)
}

func (c *ClientWithResponses) DeregAMFWithResponse(ctx context.Context, ueId externalRef0.Supi, body DeregAMFJSONRequestBody, reqEditors ...RequestEditorFn) (*DeregAMFResponse, error) {
	rsp, err := c.DeregAMF(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeregAMFResponse(rsp)
}

// PeiUpdateWithBodyWithResponse request with arbitrary body returning *PeiUpdateResponse
func (c *ClientWithResponses) PeiUpdateWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PeiUpdateResponse, error) {
	rsp, err := c.PeiUpdateWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePeiUpdateResponse(rsp)
}

func (c *ClientWithResponses) PeiUpdateWithResponse(ctx context.Context, ueId externalRef0.Supi, body PeiUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PeiUpdateResponse, error) {
	rsp, err := c.PeiUpdate(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePeiUpdateResponse(rsp)
}

// GetNon3GppRegistrationWithResponse request returning *GetNon3GppRegistrationResponse
func (c *ClientWithResponses) GetNon3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetNon3GppRegistrationParams, reqEditors ...RequestEditorFn) (*GetNon3GppRegistrationResponse, error) {
	rsp, err := c.GetNon3GppRegistration(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNon3GppRegistrationResponse(rsp)
}

// UpdateNon3GppRegistrationWithBodyWithResponse request with arbitrary body returning *UpdateNon3GppRegistrationResponse
func (c *ClientWithResponses) UpdateNon3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNon3GppRegistrationResponse, error) {
	rsp, err := c.UpdateNon3GppRegistrationWithBody(ctx, ueId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNon3GppRegistrationResponse(rsp)
}

func (c *ClientWithResponses) UpdateNon3GppRegistrationWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, params *UpdateNon3GppRegistrationParams, body UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNon3GppRegistrationResponse, error) {
	rsp, err := c.UpdateNon3GppRegistrationWithApplicationMergePatchPlusJSONBody(ctx, ueId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNon3GppRegistrationResponse(rsp)
}

// Non3GppRegistrationWithBodyWithResponse request with arbitrary body returning *Non3GppRegistrationResponse
func (c *ClientWithResponses) Non3GppRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Non3GppRegistrationResponse, error) {
	rsp, err := c.Non3GppRegistrationWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNon3GppRegistrationResponse(rsp)
}

func (c *ClientWithResponses) Non3GppRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body Non3GppRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*Non3GppRegistrationResponse, error) {
	rsp, err := c.Non3GppRegistration(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNon3GppRegistrationResponse(rsp)
}

// IpSmGwDeregistrationWithResponse request returning *IpSmGwDeregistrationResponse
func (c *ClientWithResponses) IpSmGwDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*IpSmGwDeregistrationResponse, error) {
	rsp, err := c.IpSmGwDeregistration(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIpSmGwDeregistrationResponse(rsp)
}

// GetIpSmGwRegistrationWithResponse request returning *GetIpSmGwRegistrationResponse
func (c *ClientWithResponses) GetIpSmGwRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, reqEditors ...RequestEditorFn) (*GetIpSmGwRegistrationResponse, error) {
	rsp, err := c.GetIpSmGwRegistration(ctx, ueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpSmGwRegistrationResponse(rsp)
}

// IpSmGwRegistrationWithBodyWithResponse request with arbitrary body returning *IpSmGwRegistrationResponse
func (c *ClientWithResponses) IpSmGwRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IpSmGwRegistrationResponse, error) {
	rsp, err := c.IpSmGwRegistrationWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIpSmGwRegistrationResponse(rsp)
}

func (c *ClientWithResponses) IpSmGwRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body IpSmGwRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*IpSmGwRegistrationResponse, error) {
	rsp, err := c.IpSmGwRegistration(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIpSmGwRegistrationResponse(rsp)
}

// GetLocationInfoWithResponse request returning *GetLocationInfoResponse
func (c *ClientWithResponses) GetLocationInfoWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetLocationInfoParams, reqEditors ...RequestEditorFn) (*GetLocationInfoResponse, error) {
	rsp, err := c.GetLocationInfo(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationInfoResponse(rsp)
}

// GetSmfRegistrationWithResponse request returning *GetSmfRegistrationResponse
func (c *ClientWithResponses) GetSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.VarUeId, params *GetSmfRegistrationParams, reqEditors ...RequestEditorFn) (*GetSmfRegistrationResponse, error) {
	rsp, err := c.GetSmfRegistration(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSmfRegistrationResponse(rsp)
}

// SmfDeregistrationWithResponse request returning *SmfDeregistrationResponse
func (c *ClientWithResponses) SmfDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, params *SmfDeregistrationParams, reqEditors ...RequestEditorFn) (*SmfDeregistrationResponse, error) {
	rsp, err := c.SmfDeregistration(ctx, ueId, pduSessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSmfDeregistrationResponse(rsp)
}

// RetrieveSmfRegistrationWithResponse request returning *RetrieveSmfRegistrationResponse
func (c *ClientWithResponses) RetrieveSmfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, reqEditors ...RequestEditorFn) (*RetrieveSmfRegistrationResponse, error) {
	rsp, err := c.RetrieveSmfRegistration(ctx, ueId, pduSessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveSmfRegistrationResponse(rsp)
}

// RegistrationWithBodyWithResponse request with arbitrary body returning *RegistrationResponse
func (c *ClientWithResponses) RegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegistrationResponse, error) {
	rsp, err := c.RegistrationWithBody(ctx, ueId, pduSessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegistrationResponse(rsp)
}

func (c *ClientWithResponses) RegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, body RegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*RegistrationResponse, error) {
	rsp, err := c.Registration(ctx, ueId, pduSessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegistrationResponse(rsp)
}

// N3GppSmsfDeregistrationWithResponse request returning *N3GppSmsfDeregistrationResponse
func (c *ClientWithResponses) N3GppSmsfDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, params *N3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*N3GppSmsfDeregistrationResponse, error) {
	rsp, err := c.N3GppSmsfDeregistration(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN3GppSmsfDeregistrationResponse(rsp)
}

// Get3GppSmsfRegistrationWithResponse request returning *Get3GppSmsfRegistrationResponse
func (c *ClientWithResponses) Get3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Gpsi, params *Get3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*Get3GppSmsfRegistrationResponse, error) {
	rsp, err := c.Get3GppSmsfRegistration(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet3GppSmsfRegistrationResponse(rsp)
}

// N3GppSmsfRegistrationWithBodyWithResponse request with arbitrary body returning *N3GppSmsfRegistrationResponse
func (c *ClientWithResponses) N3GppSmsfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*N3GppSmsfRegistrationResponse, error) {
	rsp, err := c.N3GppSmsfRegistrationWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN3GppSmsfRegistrationResponse(rsp)
}

func (c *ClientWithResponses) N3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body N3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*N3GppSmsfRegistrationResponse, error) {
	rsp, err := c.N3GppSmsfRegistration(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseN3GppSmsfRegistrationResponse(rsp)
}

// Non3GppSmsfDeregistrationWithResponse request returning *Non3GppSmsfDeregistrationResponse
func (c *ClientWithResponses) Non3GppSmsfDeregistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, params *Non3GppSmsfDeregistrationParams, reqEditors ...RequestEditorFn) (*Non3GppSmsfDeregistrationResponse, error) {
	rsp, err := c.Non3GppSmsfDeregistration(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNon3GppSmsfDeregistrationResponse(rsp)
}

// GetNon3GppSmsfRegistrationWithResponse request returning *GetNon3GppSmsfRegistrationResponse
func (c *ClientWithResponses) GetNon3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Gpsi, params *GetNon3GppSmsfRegistrationParams, reqEditors ...RequestEditorFn) (*GetNon3GppSmsfRegistrationResponse, error) {
	rsp, err := c.GetNon3GppSmsfRegistration(ctx, ueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNon3GppSmsfRegistrationResponse(rsp)
}

// Non3GppSmsfRegistrationWithBodyWithResponse request with arbitrary body returning *Non3GppSmsfRegistrationResponse
func (c *ClientWithResponses) Non3GppSmsfRegistrationWithBodyWithResponse(ctx context.Context, ueId externalRef0.Supi, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Non3GppSmsfRegistrationResponse, error) {
	rsp, err := c.Non3GppSmsfRegistrationWithBody(ctx, ueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNon3GppSmsfRegistrationResponse(rsp)
}

func (c *ClientWithResponses) Non3GppSmsfRegistrationWithResponse(ctx context.Context, ueId externalRef0.Supi, body Non3GppSmsfRegistrationJSONRequestBody, reqEditors ...RequestEditorFn) (*Non3GppSmsfRegistrationResponse, error) {
	rsp, err := c.Non3GppSmsfRegistration(ctx, ueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNon3GppSmsfRegistrationResponse(rsp)
}

// ParseTriggerPCSCFRestorationResponse parses an HTTP response from a TriggerPCSCFRestorationWithResponse call
func ParseTriggerPCSCFRestorationResponse(rsp *http.Response) (*TriggerPCSCFRestorationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriggerPCSCFRestorationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest externalRef0.N501
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetRegistrationsResponse parses an HTTP response from a GetRegistrationsWithResponse call
func ParseGetRegistrationsResponse(rsp *http.Response) (*GetRegistrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegistrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistrationDataSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGet3GppRegistrationResponse parses an HTTP response from a Get3GppRegistrationWithResponse call
func ParseGet3GppRegistrationResponse(rsp *http.Response) (*Get3GppRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get3GppRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseUpdate3GppRegistrationResponse parses an HTTP response from a Update3GppRegistrationWithResponse call
func ParseUpdate3GppRegistrationResponse(rsp *http.Response) (*Update3GppRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update3GppRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseN3GppRegistrationResponse parses an HTTP response from a N3GppRegistrationWithResponse call
func ParseN3GppRegistrationResponse(rsp *http.Response) (*N3GppRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &N3GppRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Amf3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseDeregAMFResponse parses an HTTP response from a DeregAMFWithResponse call
func ParseDeregAMFResponse(rsp *http.Response) (*DeregAMFResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeregAMFResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParsePeiUpdateResponse parses an HTTP response from a PeiUpdateWithResponse call
func ParsePeiUpdateResponse(rsp *http.Response) (*PeiUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PeiUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetNon3GppRegistrationResponse parses an HTTP response from a GetNon3GppRegistrationWithResponse call
func ParseGetNon3GppRegistrationResponse(rsp *http.Response) (*GetNon3GppRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNon3GppRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AmfNon3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseUpdateNon3GppRegistrationResponse parses an HTTP response from a UpdateNon3GppRegistrationWithResponse call
func ParseUpdateNon3GppRegistrationResponse(rsp *http.Response) (*UpdateNon3GppRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNon3GppRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.PatchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseNon3GppRegistrationResponse parses an HTTP response from a Non3GppRegistrationWithResponse call
func ParseNon3GppRegistrationResponse(rsp *http.Response) (*Non3GppRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Non3GppRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AmfNon3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AmfNon3GppAccessRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseIpSmGwDeregistrationResponse parses an HTTP response from a IpSmGwDeregistrationWithResponse call
func ParseIpSmGwDeregistrationResponse(rsp *http.Response) (*IpSmGwDeregistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IpSmGwDeregistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetIpSmGwRegistrationResponse parses an HTTP response from a GetIpSmGwRegistrationWithResponse call
func ParseGetIpSmGwRegistrationResponse(rsp *http.Response) (*GetIpSmGwRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpSmGwRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IpSmGwRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseIpSmGwRegistrationResponse parses an HTTP response from a IpSmGwRegistrationWithResponse call
func ParseIpSmGwRegistrationResponse(rsp *http.Response) (*IpSmGwRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IpSmGwRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IpSmGwRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IpSmGwRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetLocationInfoResponse parses an HTTP response from a GetLocationInfoWithResponse call
func ParseGetLocationInfoResponse(rsp *http.Response) (*GetLocationInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetSmfRegistrationResponse parses an HTTP response from a GetSmfRegistrationWithResponse call
func ParseGetSmfRegistrationResponse(rsp *http.Response) (*GetSmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfRegistrationInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseSmfDeregistrationResponse parses an HTTP response from a SmfDeregistrationWithResponse call
func ParseSmfDeregistrationResponse(rsp *http.Response) (*SmfDeregistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SmfDeregistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveSmfRegistrationResponse parses an HTTP response from a RetrieveSmfRegistrationWithResponse call
func ParseRetrieveSmfRegistrationResponse(rsp *http.Response) (*RetrieveSmfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveSmfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseRegistrationResponse parses an HTTP response from a RegistrationWithResponse call
func ParseRegistrationResponse(rsp *http.Response) (*RegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseN3GppSmsfDeregistrationResponse parses an HTTP response from a N3GppSmsfDeregistrationWithResponse call
func ParseN3GppSmsfDeregistrationResponse(rsp *http.Response) (*N3GppSmsfDeregistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &N3GppSmsfDeregistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGet3GppSmsfRegistrationResponse parses an HTTP response from a Get3GppSmsfRegistrationWithResponse call
func ParseGet3GppSmsfRegistrationResponse(rsp *http.Response) (*Get3GppSmsfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get3GppSmsfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseN3GppSmsfRegistrationResponse parses an HTTP response from a N3GppSmsfRegistrationWithResponse call
func ParseN3GppSmsfRegistrationResponse(rsp *http.Response) (*N3GppSmsfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &N3GppSmsfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseNon3GppSmsfDeregistrationResponse parses an HTTP response from a Non3GppSmsfDeregistrationWithResponse call
func ParseNon3GppSmsfDeregistrationResponse(rsp *http.Response) (*Non3GppSmsfDeregistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Non3GppSmsfDeregistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest externalRef0.ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseGetNon3GppSmsfRegistrationResponse parses an HTTP response from a GetNon3GppSmsfRegistrationWithResponse call
func ParseGetNon3GppSmsfRegistrationResponse(rsp *http.Response) (*GetNon3GppSmsfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNon3GppSmsfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ParseNon3GppSmsfRegistrationResponse parses an HTTP response from a Non3GppSmsfRegistrationWithResponse call
func ParseNon3GppSmsfRegistrationResponse(rsp *http.Response) (*Non3GppSmsfRegistrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Non3GppSmsfRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmsfRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Trigger the Restoration of the P-CSCF
	// (POST /restore-pcscf)
	TriggerPCSCFRestoration(c *gin.Context)
	// retrieve UE registration data sets
	// (GET /{ueId}/registrations)
	GetRegistrations(c *gin.Context, ueId externalRef0.VarUeId, params GetRegistrationsParams)
	// retrieve the AMF registration for 3GPP access information
	// (GET /{ueId}/registrations/amf-3gpp-access)
	Get3GppRegistration(c *gin.Context, ueId externalRef0.VarUeId, params Get3GppRegistrationParams)
	// Update a parameter in the AMF registration for 3GPP access
	// (PATCH /{ueId}/registrations/amf-3gpp-access)
	Update3GppRegistration(c *gin.Context, ueId externalRef0.Supi, params Update3GppRegistrationParams)
	// register as AMF for 3GPP access
	// (PUT /{ueId}/registrations/amf-3gpp-access)
	N3GppRegistration(c *gin.Context, ueId externalRef0.Supi)
	// trigger AMF for 3GPP access deregistration
	// (POST /{ueId}/registrations/amf-3gpp-access/dereg-amf)
	DeregAMF(c *gin.Context, ueId externalRef0.Supi)
	// Updates the PEI in the 3GPP access registration context
	// (POST /{ueId}/registrations/amf-3gpp-access/pei-update)
	PeiUpdate(c *gin.Context, ueId externalRef0.Supi)
	// retrieve the AMF registration for non-3GPP access information
	// (GET /{ueId}/registrations/amf-non-3gpp-access)
	GetNon3GppRegistration(c *gin.Context, ueId externalRef0.VarUeId, params GetNon3GppRegistrationParams)
	// update a parameter in the AMF registration for non-3GPP access
	// (PATCH /{ueId}/registrations/amf-non-3gpp-access)
	UpdateNon3GppRegistration(c *gin.Context, ueId externalRef0.Supi, params UpdateNon3GppRegistrationParams)
	// register as AMF for non-3GPP access
	// (PUT /{ueId}/registrations/amf-non-3gpp-access)
	Non3GppRegistration(c *gin.Context, ueId externalRef0.Supi)
	// Delete the IP-SM-GW registration
	// (DELETE /{ueId}/registrations/ip-sm-gw)
	IpSmGwDeregistration(c *gin.Context, ueId externalRef0.Supi)
	// Retrieve the IP-SM-GW registration information
	// (GET /{ueId}/registrations/ip-sm-gw)
	GetIpSmGwRegistration(c *gin.Context, ueId externalRef0.Supi)
	// Register an IP-SM-GW
	// (PUT /{ueId}/registrations/ip-sm-gw)
	IpSmGwRegistration(c *gin.Context, ueId externalRef0.Supi)
	// retrieve the target UE's location information
	// (GET /{ueId}/registrations/location)
	GetLocationInfo(c *gin.Context, ueId externalRef0.VarUeId, params GetLocationInfoParams)
	// retrieve the SMF registration information
	// (GET /{ueId}/registrations/smf-registrations)
	GetSmfRegistration(c *gin.Context, ueId externalRef0.VarUeId, params GetSmfRegistrationParams)
	// delete an SMF registration
	// (DELETE /{ueId}/registrations/smf-registrations/{pduSessionId})
	SmfDeregistration(c *gin.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, params SmfDeregistrationParams)
	// get an SMF registration
	// (GET /{ueId}/registrations/smf-registrations/{pduSessionId})
	RetrieveSmfRegistration(c *gin.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId)
	// register as SMF
	// (PUT /{ueId}/registrations/smf-registrations/{pduSessionId})
	Registration(c *gin.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId)
	// delete the SMSF registration for 3GPP access
	// (DELETE /{ueId}/registrations/smsf-3gpp-access)
	N3GppSmsfDeregistration(c *gin.Context, ueId externalRef0.Supi, params N3GppSmsfDeregistrationParams)
	// retrieve the SMSF registration for 3GPP access information
	// (GET /{ueId}/registrations/smsf-3gpp-access)
	Get3GppSmsfRegistration(c *gin.Context, ueId externalRef0.Gpsi, params Get3GppSmsfRegistrationParams)
	// register as SMSF for 3GPP access
	// (PUT /{ueId}/registrations/smsf-3gpp-access)
	N3GppSmsfRegistration(c *gin.Context, ueId externalRef0.Supi)
	// delete SMSF registration for non 3GPP access
	// (DELETE /{ueId}/registrations/smsf-non-3gpp-access)
	Non3GppSmsfDeregistration(c *gin.Context, ueId externalRef0.Supi, params Non3GppSmsfDeregistrationParams)
	// retrieve the SMSF registration for non-3GPP access information
	// (GET /{ueId}/registrations/smsf-non-3gpp-access)
	GetNon3GppSmsfRegistration(c *gin.Context, ueId externalRef0.Gpsi, params GetNon3GppSmsfRegistrationParams)
	// register as SMSF for non-3GPP access
	// (PUT /{ueId}/registrations/smsf-non-3gpp-access)
	Non3GppSmsfRegistration(c *gin.Context, ueId externalRef0.Supi)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// TriggerPCSCFRestoration operation middleware
func (siw *ServerInterfaceWrapper) TriggerPCSCFRestoration(c *gin.Context) {

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TriggerPCSCFRestoration(c)
}

// GetRegistrations operation middleware
func (siw *ServerInterfaceWrapper) GetRegistrations(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRegistrationsParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "registration-dataset-names" -------------

	if paramValue := c.Query("registration-dataset-names"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument registration-dataset-names is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "registration-dataset-names", c.Request.URL.Query(), &params.RegistrationDatasetNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter registration-dataset-names: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRegistrations(c, ueId, params)
}

// Get3GppRegistration operation middleware
func (siw *ServerInterfaceWrapper) Get3GppRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Get3GppRegistrationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get3GppRegistration(c, ueId, params)
}

// Update3GppRegistration operation middleware
func (siw *ServerInterfaceWrapper) Update3GppRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Update3GppRegistrationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Update3GppRegistration(c, ueId, params)
}

// N3GppRegistration operation middleware
func (siw *ServerInterfaceWrapper) N3GppRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.N3GppRegistration(c, ueId)
}

// DeregAMF operation middleware
func (siw *ServerInterfaceWrapper) DeregAMF(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeregAMF(c, ueId)
}

// PeiUpdate operation middleware
func (siw *ServerInterfaceWrapper) PeiUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PeiUpdate(c, ueId)
}

// GetNon3GppRegistration operation middleware
func (siw *ServerInterfaceWrapper) GetNon3GppRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNon3GppRegistrationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNon3GppRegistration(c, ueId, params)
}

// UpdateNon3GppRegistration operation middleware
func (siw *ServerInterfaceWrapper) UpdateNon3GppRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateNon3GppRegistrationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNon3GppRegistration(c, ueId, params)
}

// Non3GppRegistration operation middleware
func (siw *ServerInterfaceWrapper) Non3GppRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Non3GppRegistration(c, ueId)
}

// IpSmGwDeregistration operation middleware
func (siw *ServerInterfaceWrapper) IpSmGwDeregistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IpSmGwDeregistration(c, ueId)
}

// GetIpSmGwRegistration operation middleware
func (siw *ServerInterfaceWrapper) GetIpSmGwRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIpSmGwRegistration(c, ueId)
}

// IpSmGwRegistration operation middleware
func (siw *ServerInterfaceWrapper) IpSmGwRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IpSmGwRegistration(c, ueId)
}

// GetLocationInfo operation middleware
func (siw *ServerInterfaceWrapper) GetLocationInfo(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocationInfoParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLocationInfo(c, ueId, params)
}

// GetSmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) GetSmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.VarUeId

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSmfRegistrationParams

	// ------------- Optional query parameter "single-nssai" -------------

	if paramValue := c.Query("single-nssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'single-nssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.SingleNssai = &value

	}

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSmfRegistration(c, ueId, params)
}

// SmfDeregistration operation middleware
func (siw *ServerInterfaceWrapper) SmfDeregistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameter("simple", false, "pduSessionId", c.Param("pduSessionId"), &pduSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SmfDeregistrationParams

	// ------------- Optional query parameter "smf-set-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "smf-set-id", c.Request.URL.Query(), &params.SmfSetId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smf-set-id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "smf-instance-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "smf-instance-id", c.Request.URL.Query(), &params.SmfInstanceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smf-instance-id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SmfDeregistration(c, ueId, pduSessionId, params)
}

// RetrieveSmfRegistration operation middleware
func (siw *ServerInterfaceWrapper) RetrieveSmfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameter("simple", false, "pduSessionId", c.Param("pduSessionId"), &pduSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RetrieveSmfRegistration(c, ueId, pduSessionId)
}

// Registration operation middleware
func (siw *ServerInterfaceWrapper) Registration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "pduSessionId" -------------
	var pduSessionId externalRef0.PduSessionId

	err = runtime.BindStyledParameter("simple", false, "pduSessionId", c.Param("pduSessionId"), &pduSessionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pduSessionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Registration(c, ueId, pduSessionId)
}

// N3GppSmsfDeregistration operation middleware
func (siw *ServerInterfaceWrapper) N3GppSmsfDeregistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params N3GppSmsfDeregistrationParams

	// ------------- Optional query parameter "smsf-set-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "smsf-set-id", c.Request.URL.Query(), &params.SmsfSetId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smsf-set-id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.N3GppSmsfDeregistration(c, ueId, params)
}

// Get3GppSmsfRegistration operation middleware
func (siw *ServerInterfaceWrapper) Get3GppSmsfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Gpsi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Get3GppSmsfRegistrationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get3GppSmsfRegistration(c, ueId, params)
}

// N3GppSmsfRegistration operation middleware
func (siw *ServerInterfaceWrapper) N3GppSmsfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.N3GppSmsfRegistration(c, ueId)
}

// Non3GppSmsfDeregistration operation middleware
func (siw *ServerInterfaceWrapper) Non3GppSmsfDeregistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params Non3GppSmsfDeregistrationParams

	// ------------- Optional query parameter "smsf-set-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "smsf-set-id", c.Request.URL.Query(), &params.SmsfSetId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter smsf-set-id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Non3GppSmsfDeregistration(c, ueId, params)
}

// GetNon3GppSmsfRegistration operation middleware
func (siw *ServerInterfaceWrapper) GetNon3GppSmsfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Gpsi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNon3GppSmsfRegistrationParams

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", c.Request.URL.Query(), &params.SupportedFeatures)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supported-features: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNon3GppSmsfRegistration(c, ueId, params)
}

// Non3GppSmsfRegistration operation middleware
func (siw *ServerInterfaceWrapper) Non3GppSmsfRegistration(c *gin.Context) {

	var err error

	// ------------- Path parameter "ueId" -------------
	var ueId externalRef0.Supi

	err = runtime.BindStyledParameter("simple", false, "ueId", c.Param("ueId"), &ueId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ueId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(OAuth2ClientCredentialsScopes, []string{"nudm-uecm"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Non3GppSmsfRegistration(c, ueId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/restore-pcscf", wrapper.TriggerPCSCFRestoration)
	router.GET(options.BaseURL+"/:ueId/registrations", wrapper.GetRegistrations)
	router.GET(options.BaseURL+"/:ueId/registrations/amf-3gpp-access", wrapper.Get3GppRegistration)
	router.PATCH(options.BaseURL+"/:ueId/registrations/amf-3gpp-access", wrapper.Update3GppRegistration)
	router.PUT(options.BaseURL+"/:ueId/registrations/amf-3gpp-access", wrapper.N3GppRegistration)
	router.POST(options.BaseURL+"/:ueId/registrations/amf-3gpp-access/dereg-amf", wrapper.DeregAMF)
	router.POST(options.BaseURL+"/:ueId/registrations/amf-3gpp-access/pei-update", wrapper.PeiUpdate)
	router.GET(options.BaseURL+"/:ueId/registrations/amf-non-3gpp-access", wrapper.GetNon3GppRegistration)
	router.PATCH(options.BaseURL+"/:ueId/registrations/amf-non-3gpp-access", wrapper.UpdateNon3GppRegistration)
	router.PUT(options.BaseURL+"/:ueId/registrations/amf-non-3gpp-access", wrapper.Non3GppRegistration)
	router.DELETE(options.BaseURL+"/:ueId/registrations/ip-sm-gw", wrapper.IpSmGwDeregistration)
	router.GET(options.BaseURL+"/:ueId/registrations/ip-sm-gw", wrapper.GetIpSmGwRegistration)
	router.PUT(options.BaseURL+"/:ueId/registrations/ip-sm-gw", wrapper.IpSmGwRegistration)
	router.GET(options.BaseURL+"/:ueId/registrations/location", wrapper.GetLocationInfo)
	router.GET(options.BaseURL+"/:ueId/registrations/smf-registrations", wrapper.GetSmfRegistration)
	router.DELETE(options.BaseURL+"/:ueId/registrations/smf-registrations/:pduSessionId", wrapper.SmfDeregistration)
	router.GET(options.BaseURL+"/:ueId/registrations/smf-registrations/:pduSessionId", wrapper.RetrieveSmfRegistration)
	router.PUT(options.BaseURL+"/:ueId/registrations/smf-registrations/:pduSessionId", wrapper.Registration)
	router.DELETE(options.BaseURL+"/:ueId/registrations/smsf-3gpp-access", wrapper.N3GppSmsfDeregistration)
	router.GET(options.BaseURL+"/:ueId/registrations/smsf-3gpp-access", wrapper.Get3GppSmsfRegistration)
	router.PUT(options.BaseURL+"/:ueId/registrations/smsf-3gpp-access", wrapper.N3GppSmsfRegistration)
	router.DELETE(options.BaseURL+"/:ueId/registrations/smsf-non-3gpp-access", wrapper.Non3GppSmsfDeregistration)
	router.GET(options.BaseURL+"/:ueId/registrations/smsf-non-3gpp-access", wrapper.GetNon3GppSmsfRegistration)
	router.PUT(options.BaseURL+"/:ueId/registrations/smsf-non-3gpp-access", wrapper.Non3GppSmsfRegistration)
}

type TriggerPCSCFRestorationRequestObject struct {
	Body *TriggerPCSCFRestorationJSONRequestBody
}

type TriggerPCSCFRestorationResponseObject interface {
	VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error
}

type TriggerPCSCFRestoration204Response struct {
}

func (response TriggerPCSCFRestoration204Response) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type TriggerPCSCFRestoration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response TriggerPCSCFRestoration400ApplicationProblemPlusJSONResponse) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TriggerPCSCFRestoration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response TriggerPCSCFRestoration403ApplicationProblemPlusJSONResponse) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TriggerPCSCFRestoration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response TriggerPCSCFRestoration404ApplicationProblemPlusJSONResponse) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TriggerPCSCFRestoration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response TriggerPCSCFRestoration500ApplicationProblemPlusJSONResponse) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TriggerPCSCFRestoration501ApplicationProblemPlusJSONResponse struct {
	externalRef0.N501ApplicationProblemPlusJSONResponse
}

func (response TriggerPCSCFRestoration501ApplicationProblemPlusJSONResponse) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(501)

	return json.NewEncoder(w).Encode(response)
}

type TriggerPCSCFRestoration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response TriggerPCSCFRestoration503ApplicationProblemPlusJSONResponse) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type TriggerPCSCFRestorationdefaultResponse struct {
	StatusCode int
}

func (response TriggerPCSCFRestorationdefaultResponse) VisitTriggerPCSCFRestorationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetRegistrationsRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetRegistrationsParams
}

type GetRegistrationsResponseObject interface {
	VisitGetRegistrationsResponse(w http.ResponseWriter) error
}

type GetRegistrations200JSONResponse RegistrationDataSets

func (response GetRegistrations200JSONResponse) VisitGetRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRegistrations400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetRegistrations400ApplicationProblemPlusJSONResponse) VisitGetRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRegistrations403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetRegistrations403ApplicationProblemPlusJSONResponse) VisitGetRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRegistrations404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetRegistrations404ApplicationProblemPlusJSONResponse) VisitGetRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRegistrations500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetRegistrations500ApplicationProblemPlusJSONResponse) VisitGetRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRegistrations503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetRegistrations503ApplicationProblemPlusJSONResponse) VisitGetRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetRegistrationsdefaultResponse struct {
	StatusCode int
}

func (response GetRegistrationsdefaultResponse) VisitGetRegistrationsResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type Get3GppRegistrationRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params Get3GppRegistrationParams
}

type Get3GppRegistrationResponseObject interface {
	VisitGet3GppRegistrationResponse(w http.ResponseWriter) error
}

type Get3GppRegistration200JSONResponse Amf3GppAccessRegistration

func (response Get3GppRegistration200JSONResponse) VisitGet3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Get3GppRegistration400ApplicationProblemPlusJSONResponse) VisitGet3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Get3GppRegistration403ApplicationProblemPlusJSONResponse) VisitGet3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Get3GppRegistration404ApplicationProblemPlusJSONResponse) VisitGet3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Get3GppRegistration500ApplicationProblemPlusJSONResponse) VisitGet3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Get3GppRegistration503ApplicationProblemPlusJSONResponse) VisitGet3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppRegistrationdefaultResponse struct {
	StatusCode int
}

func (response Get3GppRegistrationdefaultResponse) VisitGet3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type Update3GppRegistrationRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params Update3GppRegistrationParams
	Body   *Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody
}

type Update3GppRegistrationResponseObject interface {
	VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error
}

type Update3GppRegistration200JSONResponse externalRef0.PatchResult

func (response Update3GppRegistration200JSONResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Update3GppRegistration204Response struct {
}

func (response Update3GppRegistration204Response) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Update3GppRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Update3GppRegistration400ApplicationProblemPlusJSONResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Update3GppRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Update3GppRegistration403ApplicationProblemPlusJSONResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Update3GppRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Update3GppRegistration404ApplicationProblemPlusJSONResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Update3GppRegistration422ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response Update3GppRegistration422ApplicationProblemPlusJSONResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type Update3GppRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Update3GppRegistration500ApplicationProblemPlusJSONResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Update3GppRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Update3GppRegistration503ApplicationProblemPlusJSONResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Update3GppRegistrationdefaultResponse struct {
	StatusCode int
}

func (response Update3GppRegistrationdefaultResponse) VisitUpdate3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type N3GppRegistrationRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *N3GppRegistrationJSONRequestBody
}

type N3GppRegistrationResponseObject interface {
	VisitN3GppRegistrationResponse(w http.ResponseWriter) error
}

type N3GppRegistration200JSONResponse Amf3GppAccessRegistration

func (response N3GppRegistration200JSONResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type N3GppRegistration201ResponseHeaders struct {
	Location string
}

type N3GppRegistration201JSONResponse struct {
	Body    Amf3GppAccessRegistration
	Headers N3GppRegistration201ResponseHeaders
}

func (response N3GppRegistration201JSONResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type N3GppRegistration204Response struct {
}

func (response N3GppRegistration204Response) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type N3GppRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response N3GppRegistration400ApplicationProblemPlusJSONResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type N3GppRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response N3GppRegistration403ApplicationProblemPlusJSONResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type N3GppRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response N3GppRegistration404ApplicationProblemPlusJSONResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type N3GppRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response N3GppRegistration500ApplicationProblemPlusJSONResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type N3GppRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response N3GppRegistration503ApplicationProblemPlusJSONResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type N3GppRegistrationdefaultResponse struct {
	StatusCode int
}

func (response N3GppRegistrationdefaultResponse) VisitN3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type DeregAMFRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *DeregAMFJSONRequestBody
}

type DeregAMFResponseObject interface {
	VisitDeregAMFResponse(w http.ResponseWriter) error
}

type DeregAMF204Response struct {
}

func (response DeregAMF204Response) VisitDeregAMFResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeregAMF400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeregAMF400ApplicationProblemPlusJSONResponse) VisitDeregAMFResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeregAMF403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeregAMF403ApplicationProblemPlusJSONResponse) VisitDeregAMFResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeregAMF404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeregAMF404ApplicationProblemPlusJSONResponse) VisitDeregAMFResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeregAMF500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeregAMF500ApplicationProblemPlusJSONResponse) VisitDeregAMFResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeregAMF503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeregAMF503ApplicationProblemPlusJSONResponse) VisitDeregAMFResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeregAMFdefaultResponse struct {
	StatusCode int
}

func (response DeregAMFdefaultResponse) VisitDeregAMFResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type PeiUpdateRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *PeiUpdateJSONRequestBody
}

type PeiUpdateResponseObject interface {
	VisitPeiUpdateResponse(w http.ResponseWriter) error
}

type PeiUpdate204Response struct {
}

func (response PeiUpdate204Response) VisitPeiUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PeiUpdate400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PeiUpdate400ApplicationProblemPlusJSONResponse) VisitPeiUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PeiUpdate403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response PeiUpdate403ApplicationProblemPlusJSONResponse) VisitPeiUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PeiUpdate404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PeiUpdate404ApplicationProblemPlusJSONResponse) VisitPeiUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PeiUpdate500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response PeiUpdate500ApplicationProblemPlusJSONResponse) VisitPeiUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PeiUpdate503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response PeiUpdate503ApplicationProblemPlusJSONResponse) VisitPeiUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PeiUpdatedefaultResponse struct {
	StatusCode int
}

func (response PeiUpdatedefaultResponse) VisitPeiUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetNon3GppRegistrationRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetNon3GppRegistrationParams
}

type GetNon3GppRegistrationResponseObject interface {
	VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error
}

type GetNon3GppRegistration200JSONResponse AmfNon3GppAccessRegistration

func (response GetNon3GppRegistration200JSONResponse) VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppRegistration400ApplicationProblemPlusJSONResponse) VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppRegistration403ApplicationProblemPlusJSONResponse) VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppRegistration404ApplicationProblemPlusJSONResponse) VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppRegistration500ApplicationProblemPlusJSONResponse) VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppRegistration503ApplicationProblemPlusJSONResponse) VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppRegistrationdefaultResponse struct {
	StatusCode int
}

func (response GetNon3GppRegistrationdefaultResponse) VisitGetNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type UpdateNon3GppRegistrationRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params UpdateNon3GppRegistrationParams
	Body   *UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody
}

type UpdateNon3GppRegistrationResponseObject interface {
	VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error
}

type UpdateNon3GppRegistration200JSONResponse externalRef0.PatchResult

func (response UpdateNon3GppRegistration200JSONResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNon3GppRegistration204Response struct {
}

func (response UpdateNon3GppRegistration204Response) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateNon3GppRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateNon3GppRegistration400ApplicationProblemPlusJSONResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNon3GppRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateNon3GppRegistration403ApplicationProblemPlusJSONResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNon3GppRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateNon3GppRegistration404ApplicationProblemPlusJSONResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNon3GppRegistration422ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateNon3GppRegistration422ApplicationProblemPlusJSONResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNon3GppRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateNon3GppRegistration500ApplicationProblemPlusJSONResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNon3GppRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateNon3GppRegistration503ApplicationProblemPlusJSONResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNon3GppRegistrationdefaultResponse struct {
	StatusCode int
}

func (response UpdateNon3GppRegistrationdefaultResponse) VisitUpdateNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type Non3GppRegistrationRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *Non3GppRegistrationJSONRequestBody
}

type Non3GppRegistrationResponseObject interface {
	VisitNon3GppRegistrationResponse(w http.ResponseWriter) error
}

type Non3GppRegistration200JSONResponse AmfNon3GppAccessRegistration

func (response Non3GppRegistration200JSONResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppRegistration201ResponseHeaders struct {
	Location string
}

type Non3GppRegistration201JSONResponse struct {
	Body    AmfNon3GppAccessRegistration
	Headers Non3GppRegistration201ResponseHeaders
}

func (response Non3GppRegistration201JSONResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type Non3GppRegistration204Response struct {
}

func (response Non3GppRegistration204Response) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Non3GppRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Non3GppRegistration400ApplicationProblemPlusJSONResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Non3GppRegistration403ApplicationProblemPlusJSONResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Non3GppRegistration404ApplicationProblemPlusJSONResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Non3GppRegistration500ApplicationProblemPlusJSONResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Non3GppRegistration503ApplicationProblemPlusJSONResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppRegistrationdefaultResponse struct {
	StatusCode int
}

func (response Non3GppRegistrationdefaultResponse) VisitNon3GppRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type IpSmGwDeregistrationRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
}

type IpSmGwDeregistrationResponseObject interface {
	VisitIpSmGwDeregistrationResponse(w http.ResponseWriter) error
}

type IpSmGwDeregistration204Response struct {
}

func (response IpSmGwDeregistration204Response) VisitIpSmGwDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type IpSmGwDeregistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response IpSmGwDeregistration400ApplicationProblemPlusJSONResponse) VisitIpSmGwDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwDeregistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response IpSmGwDeregistration404ApplicationProblemPlusJSONResponse) VisitIpSmGwDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwDeregistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response IpSmGwDeregistration500ApplicationProblemPlusJSONResponse) VisitIpSmGwDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwDeregistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response IpSmGwDeregistration503ApplicationProblemPlusJSONResponse) VisitIpSmGwDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwDeregistrationdefaultResponse struct {
	StatusCode int
}

func (response IpSmGwDeregistrationdefaultResponse) VisitIpSmGwDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetIpSmGwRegistrationRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
}

type GetIpSmGwRegistrationResponseObject interface {
	VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error
}

type GetIpSmGwRegistration200JSONResponse IpSmGwRegistration

func (response GetIpSmGwRegistration200JSONResponse) VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIpSmGwRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetIpSmGwRegistration400ApplicationProblemPlusJSONResponse) VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetIpSmGwRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetIpSmGwRegistration403ApplicationProblemPlusJSONResponse) VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetIpSmGwRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetIpSmGwRegistration404ApplicationProblemPlusJSONResponse) VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIpSmGwRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetIpSmGwRegistration500ApplicationProblemPlusJSONResponse) VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIpSmGwRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetIpSmGwRegistration503ApplicationProblemPlusJSONResponse) VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetIpSmGwRegistrationdefaultResponse struct {
	StatusCode int
}

func (response GetIpSmGwRegistrationdefaultResponse) VisitGetIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type IpSmGwRegistrationRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *IpSmGwRegistrationJSONRequestBody
}

type IpSmGwRegistrationResponseObject interface {
	VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error
}

type IpSmGwRegistration200JSONResponse IpSmGwRegistration

func (response IpSmGwRegistration200JSONResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwRegistration201ResponseHeaders struct {
	Location string
}

type IpSmGwRegistration201JSONResponse struct {
	Body    IpSmGwRegistration
	Headers IpSmGwRegistration201ResponseHeaders
}

func (response IpSmGwRegistration201JSONResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type IpSmGwRegistration204Response struct {
}

func (response IpSmGwRegistration204Response) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type IpSmGwRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response IpSmGwRegistration400ApplicationProblemPlusJSONResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response IpSmGwRegistration403ApplicationProblemPlusJSONResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response IpSmGwRegistration404ApplicationProblemPlusJSONResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response IpSmGwRegistration500ApplicationProblemPlusJSONResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response IpSmGwRegistration503ApplicationProblemPlusJSONResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type IpSmGwRegistrationdefaultResponse struct {
	StatusCode int
}

func (response IpSmGwRegistrationdefaultResponse) VisitIpSmGwRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetLocationInfoRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetLocationInfoParams
}

type GetLocationInfoResponseObject interface {
	VisitGetLocationInfoResponse(w http.ResponseWriter) error
}

type GetLocationInfo200JSONResponse LocationInfo

func (response GetLocationInfo200JSONResponse) VisitGetLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLocationInfo400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetLocationInfo400ApplicationProblemPlusJSONResponse) VisitGetLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLocationInfo403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetLocationInfo403ApplicationProblemPlusJSONResponse) VisitGetLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetLocationInfo404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetLocationInfo404ApplicationProblemPlusJSONResponse) VisitGetLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLocationInfo500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetLocationInfo500ApplicationProblemPlusJSONResponse) VisitGetLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLocationInfo503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetLocationInfo503ApplicationProblemPlusJSONResponse) VisitGetLocationInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetLocationInfodefaultResponse struct {
	StatusCode int
}

func (response GetLocationInfodefaultResponse) VisitGetLocationInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetSmfRegistrationRequestObject struct {
	UeId   externalRef0.VarUeId `json:"ueId"`
	Params GetSmfRegistrationParams
}

type GetSmfRegistrationResponseObject interface {
	VisitGetSmfRegistrationResponse(w http.ResponseWriter) error
}

type GetSmfRegistration200JSONResponse SmfRegistrationInfo

func (response GetSmfRegistration200JSONResponse) VisitGetSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSmfRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetSmfRegistration400ApplicationProblemPlusJSONResponse) VisitGetSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSmfRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetSmfRegistration403ApplicationProblemPlusJSONResponse) VisitGetSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetSmfRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetSmfRegistration404ApplicationProblemPlusJSONResponse) VisitGetSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSmfRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetSmfRegistration500ApplicationProblemPlusJSONResponse) VisitGetSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSmfRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetSmfRegistration503ApplicationProblemPlusJSONResponse) VisitGetSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetSmfRegistrationdefaultResponse struct {
	StatusCode int
}

func (response GetSmfRegistrationdefaultResponse) VisitGetSmfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type SmfDeregistrationRequestObject struct {
	UeId         externalRef0.Supi         `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Params       SmfDeregistrationParams
}

type SmfDeregistrationResponseObject interface {
	VisitSmfDeregistrationResponse(w http.ResponseWriter) error
}

type SmfDeregistration204Response struct {
}

func (response SmfDeregistration204Response) VisitSmfDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type SmfDeregistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response SmfDeregistration400ApplicationProblemPlusJSONResponse) VisitSmfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SmfDeregistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response SmfDeregistration404ApplicationProblemPlusJSONResponse) VisitSmfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SmfDeregistration422ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response SmfDeregistration422ApplicationProblemPlusJSONResponse) VisitSmfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type SmfDeregistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response SmfDeregistration500ApplicationProblemPlusJSONResponse) VisitSmfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SmfDeregistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response SmfDeregistration503ApplicationProblemPlusJSONResponse) VisitSmfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type SmfDeregistrationdefaultResponse struct {
	StatusCode int
}

func (response SmfDeregistrationdefaultResponse) VisitSmfDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type RetrieveSmfRegistrationRequestObject struct {
	UeId         externalRef0.Supi         `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
}

type RetrieveSmfRegistrationResponseObject interface {
	VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error
}

type RetrieveSmfRegistration200JSONResponse SmfRegistration

func (response RetrieveSmfRegistration200JSONResponse) VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveSmfRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmfRegistration400ApplicationProblemPlusJSONResponse) VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveSmfRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmfRegistration403ApplicationProblemPlusJSONResponse) VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveSmfRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmfRegistration404ApplicationProblemPlusJSONResponse) VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveSmfRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmfRegistration500ApplicationProblemPlusJSONResponse) VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveSmfRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response RetrieveSmfRegistration503ApplicationProblemPlusJSONResponse) VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveSmfRegistrationdefaultResponse struct {
	StatusCode int
}

func (response RetrieveSmfRegistrationdefaultResponse) VisitRetrieveSmfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type RegistrationRequestObject struct {
	UeId         externalRef0.Supi         `json:"ueId"`
	PduSessionId externalRef0.PduSessionId `json:"pduSessionId"`
	Body         *RegistrationJSONRequestBody
}

type RegistrationResponseObject interface {
	VisitRegistrationResponse(w http.ResponseWriter) error
}

type Registration200JSONResponse SmfRegistration

func (response Registration200JSONResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Registration201ResponseHeaders struct {
	Location string
}

type Registration201JSONResponse struct {
	Body    SmfRegistration
	Headers Registration201ResponseHeaders
}

func (response Registration201JSONResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type Registration204Response struct {
}

func (response Registration204Response) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Registration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Registration400ApplicationProblemPlusJSONResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Registration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Registration403ApplicationProblemPlusJSONResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Registration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Registration404ApplicationProblemPlusJSONResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Registration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Registration500ApplicationProblemPlusJSONResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Registration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Registration503ApplicationProblemPlusJSONResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type RegistrationdefaultResponse struct {
	StatusCode int
}

func (response RegistrationdefaultResponse) VisitRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type N3GppSmsfDeregistrationRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params N3GppSmsfDeregistrationParams
}

type N3GppSmsfDeregistrationResponseObject interface {
	VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error
}

type N3GppSmsfDeregistration204Response struct {
}

func (response N3GppSmsfDeregistration204Response) VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type N3GppSmsfDeregistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfDeregistration400ApplicationProblemPlusJSONResponse) VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfDeregistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfDeregistration404ApplicationProblemPlusJSONResponse) VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfDeregistration422ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response N3GppSmsfDeregistration422ApplicationProblemPlusJSONResponse) VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfDeregistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfDeregistration500ApplicationProblemPlusJSONResponse) VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfDeregistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfDeregistration503ApplicationProblemPlusJSONResponse) VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfDeregistrationdefaultResponse struct {
	StatusCode int
}

func (response N3GppSmsfDeregistrationdefaultResponse) VisitN3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type Get3GppSmsfRegistrationRequestObject struct {
	UeId   externalRef0.Gpsi `json:"ueId"`
	Params Get3GppSmsfRegistrationParams
}

type Get3GppSmsfRegistrationResponseObject interface {
	VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error
}

type Get3GppSmsfRegistration200JSONResponse SmsfRegistration

func (response Get3GppSmsfRegistration200JSONResponse) VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppSmsfRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Get3GppSmsfRegistration400ApplicationProblemPlusJSONResponse) VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppSmsfRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Get3GppSmsfRegistration403ApplicationProblemPlusJSONResponse) VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppSmsfRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Get3GppSmsfRegistration404ApplicationProblemPlusJSONResponse) VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppSmsfRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Get3GppSmsfRegistration500ApplicationProblemPlusJSONResponse) VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppSmsfRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Get3GppSmsfRegistration503ApplicationProblemPlusJSONResponse) VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Get3GppSmsfRegistrationdefaultResponse struct {
	StatusCode int
}

func (response Get3GppSmsfRegistrationdefaultResponse) VisitGet3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type N3GppSmsfRegistrationRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *N3GppSmsfRegistrationJSONRequestBody
}

type N3GppSmsfRegistrationResponseObject interface {
	VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error
}

type N3GppSmsfRegistration200JSONResponse SmsfRegistration

func (response N3GppSmsfRegistration200JSONResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfRegistration201ResponseHeaders struct {
	Location string
}

type N3GppSmsfRegistration201JSONResponse struct {
	Body    SmsfRegistration
	Headers N3GppSmsfRegistration201ResponseHeaders
}

func (response N3GppSmsfRegistration201JSONResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type N3GppSmsfRegistration204Response struct {
}

func (response N3GppSmsfRegistration204Response) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type N3GppSmsfRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfRegistration400ApplicationProblemPlusJSONResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfRegistration403ApplicationProblemPlusJSONResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfRegistration404ApplicationProblemPlusJSONResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfRegistration500ApplicationProblemPlusJSONResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response N3GppSmsfRegistration503ApplicationProblemPlusJSONResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type N3GppSmsfRegistrationdefaultResponse struct {
	StatusCode int
}

func (response N3GppSmsfRegistrationdefaultResponse) VisitN3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type Non3GppSmsfDeregistrationRequestObject struct {
	UeId   externalRef0.Supi `json:"ueId"`
	Params Non3GppSmsfDeregistrationParams
}

type Non3GppSmsfDeregistrationResponseObject interface {
	VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error
}

type Non3GppSmsfDeregistration204Response struct {
}

func (response Non3GppSmsfDeregistration204Response) VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Non3GppSmsfDeregistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfDeregistration400ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfDeregistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfDeregistration404ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfDeregistration422ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response Non3GppSmsfDeregistration422ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfDeregistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfDeregistration500ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfDeregistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfDeregistration503ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfDeregistrationdefaultResponse struct {
	StatusCode int
}

func (response Non3GppSmsfDeregistrationdefaultResponse) VisitNon3GppSmsfDeregistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetNon3GppSmsfRegistrationRequestObject struct {
	UeId   externalRef0.Gpsi `json:"ueId"`
	Params GetNon3GppSmsfRegistrationParams
}

type GetNon3GppSmsfRegistrationResponseObject interface {
	VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error
}

type GetNon3GppSmsfRegistration200JSONResponse SmsfRegistration

func (response GetNon3GppSmsfRegistration200JSONResponse) VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppSmsfRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppSmsfRegistration400ApplicationProblemPlusJSONResponse) VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppSmsfRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppSmsfRegistration403ApplicationProblemPlusJSONResponse) VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppSmsfRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppSmsfRegistration404ApplicationProblemPlusJSONResponse) VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppSmsfRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppSmsfRegistration500ApplicationProblemPlusJSONResponse) VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppSmsfRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response GetNon3GppSmsfRegistration503ApplicationProblemPlusJSONResponse) VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetNon3GppSmsfRegistrationdefaultResponse struct {
	StatusCode int
}

func (response GetNon3GppSmsfRegistrationdefaultResponse) VisitGetNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type Non3GppSmsfRegistrationRequestObject struct {
	UeId externalRef0.Supi `json:"ueId"`
	Body *Non3GppSmsfRegistrationJSONRequestBody
}

type Non3GppSmsfRegistrationResponseObject interface {
	VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error
}

type Non3GppSmsfRegistration200JSONResponse SmsfRegistration

func (response Non3GppSmsfRegistration200JSONResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfRegistration201ResponseHeaders struct {
	Location string
}

type Non3GppSmsfRegistration201JSONResponse struct {
	Body    SmsfRegistration
	Headers Non3GppSmsfRegistration201ResponseHeaders
}

func (response Non3GppSmsfRegistration201JSONResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type Non3GppSmsfRegistration204Response struct {
}

func (response Non3GppSmsfRegistration204Response) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Non3GppSmsfRegistration400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfRegistration400ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfRegistration403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfRegistration403ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfRegistration404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfRegistration404ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfRegistration500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfRegistration500ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfRegistration503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response Non3GppSmsfRegistration503ApplicationProblemPlusJSONResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type Non3GppSmsfRegistrationdefaultResponse struct {
	StatusCode int
}

func (response Non3GppSmsfRegistrationdefaultResponse) VisitNon3GppSmsfRegistrationResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Trigger the Restoration of the P-CSCF
	// (POST /restore-pcscf)
	TriggerPCSCFRestoration(ctx context.Context, request TriggerPCSCFRestorationRequestObject) (TriggerPCSCFRestorationResponseObject, error)
	// retrieve UE registration data sets
	// (GET /{ueId}/registrations)
	GetRegistrations(ctx context.Context, request GetRegistrationsRequestObject) (GetRegistrationsResponseObject, error)
	// retrieve the AMF registration for 3GPP access information
	// (GET /{ueId}/registrations/amf-3gpp-access)
	Get3GppRegistration(ctx context.Context, request Get3GppRegistrationRequestObject) (Get3GppRegistrationResponseObject, error)
	// Update a parameter in the AMF registration for 3GPP access
	// (PATCH /{ueId}/registrations/amf-3gpp-access)
	Update3GppRegistration(ctx context.Context, request Update3GppRegistrationRequestObject) (Update3GppRegistrationResponseObject, error)
	// register as AMF for 3GPP access
	// (PUT /{ueId}/registrations/amf-3gpp-access)
	N3GppRegistration(ctx context.Context, request N3GppRegistrationRequestObject) (N3GppRegistrationResponseObject, error)
	// trigger AMF for 3GPP access deregistration
	// (POST /{ueId}/registrations/amf-3gpp-access/dereg-amf)
	DeregAMF(ctx context.Context, request DeregAMFRequestObject) (DeregAMFResponseObject, error)
	// Updates the PEI in the 3GPP access registration context
	// (POST /{ueId}/registrations/amf-3gpp-access/pei-update)
	PeiUpdate(ctx context.Context, request PeiUpdateRequestObject) (PeiUpdateResponseObject, error)
	// retrieve the AMF registration for non-3GPP access information
	// (GET /{ueId}/registrations/amf-non-3gpp-access)
	GetNon3GppRegistration(ctx context.Context, request GetNon3GppRegistrationRequestObject) (GetNon3GppRegistrationResponseObject, error)
	// update a parameter in the AMF registration for non-3GPP access
	// (PATCH /{ueId}/registrations/amf-non-3gpp-access)
	UpdateNon3GppRegistration(ctx context.Context, request UpdateNon3GppRegistrationRequestObject) (UpdateNon3GppRegistrationResponseObject, error)
	// register as AMF for non-3GPP access
	// (PUT /{ueId}/registrations/amf-non-3gpp-access)
	Non3GppRegistration(ctx context.Context, request Non3GppRegistrationRequestObject) (Non3GppRegistrationResponseObject, error)
	// Delete the IP-SM-GW registration
	// (DELETE /{ueId}/registrations/ip-sm-gw)
	IpSmGwDeregistration(ctx context.Context, request IpSmGwDeregistrationRequestObject) (IpSmGwDeregistrationResponseObject, error)
	// Retrieve the IP-SM-GW registration information
	// (GET /{ueId}/registrations/ip-sm-gw)
	GetIpSmGwRegistration(ctx context.Context, request GetIpSmGwRegistrationRequestObject) (GetIpSmGwRegistrationResponseObject, error)
	// Register an IP-SM-GW
	// (PUT /{ueId}/registrations/ip-sm-gw)
	IpSmGwRegistration(ctx context.Context, request IpSmGwRegistrationRequestObject) (IpSmGwRegistrationResponseObject, error)
	// retrieve the target UE's location information
	// (GET /{ueId}/registrations/location)
	GetLocationInfo(ctx context.Context, request GetLocationInfoRequestObject) (GetLocationInfoResponseObject, error)
	// retrieve the SMF registration information
	// (GET /{ueId}/registrations/smf-registrations)
	GetSmfRegistration(ctx context.Context, request GetSmfRegistrationRequestObject) (GetSmfRegistrationResponseObject, error)
	// delete an SMF registration
	// (DELETE /{ueId}/registrations/smf-registrations/{pduSessionId})
	SmfDeregistration(ctx context.Context, request SmfDeregistrationRequestObject) (SmfDeregistrationResponseObject, error)
	// get an SMF registration
	// (GET /{ueId}/registrations/smf-registrations/{pduSessionId})
	RetrieveSmfRegistration(ctx context.Context, request RetrieveSmfRegistrationRequestObject) (RetrieveSmfRegistrationResponseObject, error)
	// register as SMF
	// (PUT /{ueId}/registrations/smf-registrations/{pduSessionId})
	Registration(ctx context.Context, request RegistrationRequestObject) (RegistrationResponseObject, error)
	// delete the SMSF registration for 3GPP access
	// (DELETE /{ueId}/registrations/smsf-3gpp-access)
	N3GppSmsfDeregistration(ctx context.Context, request N3GppSmsfDeregistrationRequestObject) (N3GppSmsfDeregistrationResponseObject, error)
	// retrieve the SMSF registration for 3GPP access information
	// (GET /{ueId}/registrations/smsf-3gpp-access)
	Get3GppSmsfRegistration(ctx context.Context, request Get3GppSmsfRegistrationRequestObject) (Get3GppSmsfRegistrationResponseObject, error)
	// register as SMSF for 3GPP access
	// (PUT /{ueId}/registrations/smsf-3gpp-access)
	N3GppSmsfRegistration(ctx context.Context, request N3GppSmsfRegistrationRequestObject) (N3GppSmsfRegistrationResponseObject, error)
	// delete SMSF registration for non 3GPP access
	// (DELETE /{ueId}/registrations/smsf-non-3gpp-access)
	Non3GppSmsfDeregistration(ctx context.Context, request Non3GppSmsfDeregistrationRequestObject) (Non3GppSmsfDeregistrationResponseObject, error)
	// retrieve the SMSF registration for non-3GPP access information
	// (GET /{ueId}/registrations/smsf-non-3gpp-access)
	GetNon3GppSmsfRegistration(ctx context.Context, request GetNon3GppSmsfRegistrationRequestObject) (GetNon3GppSmsfRegistrationResponseObject, error)
	// register as SMSF for non-3GPP access
	// (PUT /{ueId}/registrations/smsf-non-3gpp-access)
	Non3GppSmsfRegistration(ctx context.Context, request Non3GppSmsfRegistrationRequestObject) (Non3GppSmsfRegistrationResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// TriggerPCSCFRestoration operation middleware
func (sh *strictHandler) TriggerPCSCFRestoration(ctx *gin.Context) {
	var request TriggerPCSCFRestorationRequestObject

	var body TriggerPCSCFRestorationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.TriggerPCSCFRestoration(ctx, request.(TriggerPCSCFRestorationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TriggerPCSCFRestoration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(TriggerPCSCFRestorationResponseObject); ok {
		if err := validResponse.VisitTriggerPCSCFRestorationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRegistrations operation middleware
func (sh *strictHandler) GetRegistrations(ctx *gin.Context, ueId externalRef0.VarUeId, params GetRegistrationsParams) {
	var request GetRegistrationsRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRegistrations(ctx, request.(GetRegistrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRegistrations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRegistrationsResponseObject); ok {
		if err := validResponse.VisitGetRegistrationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Get3GppRegistration operation middleware
func (sh *strictHandler) Get3GppRegistration(ctx *gin.Context, ueId externalRef0.VarUeId, params Get3GppRegistrationParams) {
	var request Get3GppRegistrationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get3GppRegistration(ctx, request.(Get3GppRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get3GppRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Get3GppRegistrationResponseObject); ok {
		if err := validResponse.VisitGet3GppRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Update3GppRegistration operation middleware
func (sh *strictHandler) Update3GppRegistration(ctx *gin.Context, ueId externalRef0.Supi, params Update3GppRegistrationParams) {
	var request Update3GppRegistrationRequestObject

	request.UeId = ueId
	request.Params = params

	var body Update3GppRegistrationApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Update3GppRegistration(ctx, request.(Update3GppRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Update3GppRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Update3GppRegistrationResponseObject); ok {
		if err := validResponse.VisitUpdate3GppRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// N3GppRegistration operation middleware
func (sh *strictHandler) N3GppRegistration(ctx *gin.Context, ueId externalRef0.Supi) {
	var request N3GppRegistrationRequestObject

	request.UeId = ueId

	var body N3GppRegistrationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.N3GppRegistration(ctx, request.(N3GppRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "N3GppRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(N3GppRegistrationResponseObject); ok {
		if err := validResponse.VisitN3GppRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeregAMF operation middleware
func (sh *strictHandler) DeregAMF(ctx *gin.Context, ueId externalRef0.Supi) {
	var request DeregAMFRequestObject

	request.UeId = ueId

	var body DeregAMFJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeregAMF(ctx, request.(DeregAMFRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeregAMF")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeregAMFResponseObject); ok {
		if err := validResponse.VisitDeregAMFResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PeiUpdate operation middleware
func (sh *strictHandler) PeiUpdate(ctx *gin.Context, ueId externalRef0.Supi) {
	var request PeiUpdateRequestObject

	request.UeId = ueId

	var body PeiUpdateJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PeiUpdate(ctx, request.(PeiUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PeiUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PeiUpdateResponseObject); ok {
		if err := validResponse.VisitPeiUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNon3GppRegistration operation middleware
func (sh *strictHandler) GetNon3GppRegistration(ctx *gin.Context, ueId externalRef0.VarUeId, params GetNon3GppRegistrationParams) {
	var request GetNon3GppRegistrationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNon3GppRegistration(ctx, request.(GetNon3GppRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNon3GppRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNon3GppRegistrationResponseObject); ok {
		if err := validResponse.VisitGetNon3GppRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateNon3GppRegistration operation middleware
func (sh *strictHandler) UpdateNon3GppRegistration(ctx *gin.Context, ueId externalRef0.Supi, params UpdateNon3GppRegistrationParams) {
	var request UpdateNon3GppRegistrationRequestObject

	request.UeId = ueId
	request.Params = params

	var body UpdateNon3GppRegistrationApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateNon3GppRegistration(ctx, request.(UpdateNon3GppRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateNon3GppRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateNon3GppRegistrationResponseObject); ok {
		if err := validResponse.VisitUpdateNon3GppRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Non3GppRegistration operation middleware
func (sh *strictHandler) Non3GppRegistration(ctx *gin.Context, ueId externalRef0.Supi) {
	var request Non3GppRegistrationRequestObject

	request.UeId = ueId

	var body Non3GppRegistrationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Non3GppRegistration(ctx, request.(Non3GppRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Non3GppRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Non3GppRegistrationResponseObject); ok {
		if err := validResponse.VisitNon3GppRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// IpSmGwDeregistration operation middleware
func (sh *strictHandler) IpSmGwDeregistration(ctx *gin.Context, ueId externalRef0.Supi) {
	var request IpSmGwDeregistrationRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IpSmGwDeregistration(ctx, request.(IpSmGwDeregistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IpSmGwDeregistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(IpSmGwDeregistrationResponseObject); ok {
		if err := validResponse.VisitIpSmGwDeregistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIpSmGwRegistration operation middleware
func (sh *strictHandler) GetIpSmGwRegistration(ctx *gin.Context, ueId externalRef0.Supi) {
	var request GetIpSmGwRegistrationRequestObject

	request.UeId = ueId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIpSmGwRegistration(ctx, request.(GetIpSmGwRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIpSmGwRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetIpSmGwRegistrationResponseObject); ok {
		if err := validResponse.VisitGetIpSmGwRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// IpSmGwRegistration operation middleware
func (sh *strictHandler) IpSmGwRegistration(ctx *gin.Context, ueId externalRef0.Supi) {
	var request IpSmGwRegistrationRequestObject

	request.UeId = ueId

	var body IpSmGwRegistrationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IpSmGwRegistration(ctx, request.(IpSmGwRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IpSmGwRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(IpSmGwRegistrationResponseObject); ok {
		if err := validResponse.VisitIpSmGwRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLocationInfo operation middleware
func (sh *strictHandler) GetLocationInfo(ctx *gin.Context, ueId externalRef0.VarUeId, params GetLocationInfoParams) {
	var request GetLocationInfoRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLocationInfo(ctx, request.(GetLocationInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLocationInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetLocationInfoResponseObject); ok {
		if err := validResponse.VisitGetLocationInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSmfRegistration operation middleware
func (sh *strictHandler) GetSmfRegistration(ctx *gin.Context, ueId externalRef0.VarUeId, params GetSmfRegistrationParams) {
	var request GetSmfRegistrationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSmfRegistration(ctx, request.(GetSmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSmfRegistrationResponseObject); ok {
		if err := validResponse.VisitGetSmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SmfDeregistration operation middleware
func (sh *strictHandler) SmfDeregistration(ctx *gin.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId, params SmfDeregistrationParams) {
	var request SmfDeregistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SmfDeregistration(ctx, request.(SmfDeregistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SmfDeregistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SmfDeregistrationResponseObject); ok {
		if err := validResponse.VisitSmfDeregistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetrieveSmfRegistration operation middleware
func (sh *strictHandler) RetrieveSmfRegistration(ctx *gin.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId) {
	var request RetrieveSmfRegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RetrieveSmfRegistration(ctx, request.(RetrieveSmfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrieveSmfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RetrieveSmfRegistrationResponseObject); ok {
		if err := validResponse.VisitRetrieveSmfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Registration operation middleware
func (sh *strictHandler) Registration(ctx *gin.Context, ueId externalRef0.Supi, pduSessionId externalRef0.PduSessionId) {
	var request RegistrationRequestObject

	request.UeId = ueId
	request.PduSessionId = pduSessionId

	var body RegistrationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Registration(ctx, request.(RegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Registration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegistrationResponseObject); ok {
		if err := validResponse.VisitRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// N3GppSmsfDeregistration operation middleware
func (sh *strictHandler) N3GppSmsfDeregistration(ctx *gin.Context, ueId externalRef0.Supi, params N3GppSmsfDeregistrationParams) {
	var request N3GppSmsfDeregistrationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.N3GppSmsfDeregistration(ctx, request.(N3GppSmsfDeregistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "N3GppSmsfDeregistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(N3GppSmsfDeregistrationResponseObject); ok {
		if err := validResponse.VisitN3GppSmsfDeregistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Get3GppSmsfRegistration operation middleware
func (sh *strictHandler) Get3GppSmsfRegistration(ctx *gin.Context, ueId externalRef0.Gpsi, params Get3GppSmsfRegistrationParams) {
	var request Get3GppSmsfRegistrationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Get3GppSmsfRegistration(ctx, request.(Get3GppSmsfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get3GppSmsfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Get3GppSmsfRegistrationResponseObject); ok {
		if err := validResponse.VisitGet3GppSmsfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// N3GppSmsfRegistration operation middleware
func (sh *strictHandler) N3GppSmsfRegistration(ctx *gin.Context, ueId externalRef0.Supi) {
	var request N3GppSmsfRegistrationRequestObject

	request.UeId = ueId

	var body N3GppSmsfRegistrationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.N3GppSmsfRegistration(ctx, request.(N3GppSmsfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "N3GppSmsfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(N3GppSmsfRegistrationResponseObject); ok {
		if err := validResponse.VisitN3GppSmsfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Non3GppSmsfDeregistration operation middleware
func (sh *strictHandler) Non3GppSmsfDeregistration(ctx *gin.Context, ueId externalRef0.Supi, params Non3GppSmsfDeregistrationParams) {
	var request Non3GppSmsfDeregistrationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Non3GppSmsfDeregistration(ctx, request.(Non3GppSmsfDeregistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Non3GppSmsfDeregistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Non3GppSmsfDeregistrationResponseObject); ok {
		if err := validResponse.VisitNon3GppSmsfDeregistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNon3GppSmsfRegistration operation middleware
func (sh *strictHandler) GetNon3GppSmsfRegistration(ctx *gin.Context, ueId externalRef0.Gpsi, params GetNon3GppSmsfRegistrationParams) {
	var request GetNon3GppSmsfRegistrationRequestObject

	request.UeId = ueId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetNon3GppSmsfRegistration(ctx, request.(GetNon3GppSmsfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNon3GppSmsfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetNon3GppSmsfRegistrationResponseObject); ok {
		if err := validResponse.VisitGetNon3GppSmsfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Non3GppSmsfRegistration operation middleware
func (sh *strictHandler) Non3GppSmsfRegistration(ctx *gin.Context, ueId externalRef0.Supi) {
	var request Non3GppSmsfRegistrationRequestObject

	request.UeId = ueId

	var body Non3GppSmsfRegistrationJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Non3GppSmsfRegistration(ctx, request.(Non3GppSmsfRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Non3GppSmsfRegistration")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(Non3GppSmsfRegistrationResponseObject); ok {
		if err := validResponse.VisitNon3GppSmsfRegistrationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
