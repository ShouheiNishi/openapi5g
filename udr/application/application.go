// Package application provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package application

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/ShouheiNishi/openapi5g/commondata"
	externalRef1 "github.com/ShouheiNishi/openapi5g/influence"
	externalRef2 "github.com/ShouheiNishi/openapi5g/nef/management"
	externalRef3 "github.com/ShouheiNishi/openapi5g/northbound/commondata"
	externalRef4 "github.com/ShouheiNishi/openapi5g/pcf/BDTpolicy"
	externalRef5 "github.com/ShouheiNishi/openapi5g/pcf/authorization"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for DataInd.
const (
	BDT      DataInd = "BDT"
	IPTV     DataInd = "IPTV"
	PFD      DataInd = "PFD"
	SVCPARAM DataInd = "SVC_PARAM"
)

// ApplicationDataChangeNotif Contains changed application data for which notification was requested.
type ApplicationDataChangeNotif struct {
	BdtPolicyData        *BdtPolicyData                      `json:"bdtPolicyData,omitempty"`
	IptvConfigData       *IptvConfigData                     `json:"iptvConfigData,omitempty"`
	PfdData              *externalRef2.PfdChangeNotification `json:"pfdData,omitempty"`
	ResUri               externalRef0.Uri                    `json:"resUri"`
	SerParamData         *ServiceParameterData               `json:"serParamData,omitempty"`
	AdditionalProperties map[string]interface{}              `json:"-"`
}

// ApplicationDataSubs Identifies a subscription to application data change notification.
type ApplicationDataSubs struct {
	DataFilters          []DataFilter                    `json:"dataFilters,omitempty"`
	Expiry               *externalRef0.DateTime          `json:"expiry,omitempty"`
	NotificationUri      externalRef0.Uri                `json:"notificationUri"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// BdtPolicyData defines model for BdtPolicyData.
type BdtPolicyData struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId             externalRef3.BdtReferenceId `json:"bdtRefId"`
	Dnn                  *externalRef0.Dnn           `json:"dnn,omitempty"`
	InterGroupId         externalRef0.GroupId        `json:"interGroupId,omitempty"`
	ResUri               *externalRef0.Uri           `json:"resUri,omitempty"`
	Snssai               *externalRef0.Snssai        `json:"snssai,omitempty"`
	Supi                 externalRef0.Supi           `json:"supi,omitempty"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// BdtPolicyDataPatch defines model for BdtPolicyDataPatch.
type BdtPolicyDataPatch struct {
	// BdtRefId string identifying a BDT Reference ID as defined in subclause 5.3.3 of 3GPP TS 29.154.
	BdtRefId             externalRef3.BdtReferenceId `json:"bdtRefId"`
	AdditionalProperties map[string]interface{}      `json:"-"`
}

// DataFilter Identifies a data filter.
type DataFilter struct {
	AppIds []externalRef0.ApplicationId `json:"appIds,omitempty"`

	// DataInd Possible values are - PFD - IPTV - BDT - SVC_PARAM
	DataInd              DataInd                  `json:"dataInd"`
	Dnns                 []externalRef0.Dnn       `json:"dnns,omitempty"`
	InternalGroupIds     []externalRef0.GroupId   `json:"internalGroupIds,omitempty"`
	Snssais              []externalRef0.Snssai    `json:"snssais,omitempty"`
	Supis                []externalRef0.Supi      `json:"supis,omitempty"`
	UeIpv4s              []externalRef0.Ipv4Addr  `json:"ueIpv4s,omitempty"`
	UeIpv6s              []externalRef0.Ipv6Addr  `json:"ueIpv6s,omitempty"`
	UeMacs               []externalRef0.MacAddr48 `json:"ueMacs,omitempty"`
	AdditionalProperties map[string]interface{}   `json:"-"`
}

// DataInd Possible values are - PFD - IPTV - BDT - SVC_PARAM
type DataInd string

// IptvConfigData defines model for IptvConfigData.
type IptvConfigData struct {
	AfAppId              string                          `json:"afAppId"`
	Dnn                  *externalRef0.Dnn               `json:"dnn,omitempty"`
	InterGroupId         externalRef0.GroupId            `json:"interGroupId,omitempty"`
	MultiAccCtrls        map[string]interface{}          `json:"multiAccCtrls"`
	ResUri               *externalRef0.Uri               `json:"resUri,omitempty"`
	Snssai               *externalRef0.Snssai            `json:"snssai,omitempty"`
	Supi                 externalRef0.Supi               `json:"supi,omitempty"`
	SuppFeat             *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// PfdDataForAppExt defines model for PfdDataForAppExt.
type PfdDataForAppExt struct {
	ApplicationId        externalRef0.ApplicationId      `json:"applicationId"`
	CachingTime          *externalRef0.DateTime          `json:"cachingTime,omitempty"`
	Pfds                 []externalRef2.PfdContent       `json:"pfds"`
	SuppFeat             *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// ServiceParameterData defines model for ServiceParameterData.
type ServiceParameterData struct {
	AnyUeInd *bool `json:"anyUeInd,omitempty"`

	// AppId Identifies an application.
	AppId        *string              `json:"appId,omitempty"`
	Dnn          *externalRef0.Dnn    `json:"dnn,omitempty"`
	InterGroupId externalRef0.GroupId `json:"interGroupId,omitempty"`

	// ParamOverPc5 Original reference TS29522_ServiceParameter.yaml#/components/schemas/ParameterOverPc5
	ParamOverPc5 *string `json:"paramOverPc5,omitempty"`

	// ParamOverUu Original reference TS29522_ServiceParameter.yaml#/components/schemas/ParameterOverUu
	ParamOverUu *string                         `json:"paramOverUu,omitempty"`
	ResUri      *externalRef0.Uri               `json:"resUri,omitempty"`
	Snssai      *externalRef0.Snssai            `json:"snssai,omitempty"`
	Supi        externalRef0.Supi               `json:"supi,omitempty"`
	SuppFeat    *externalRef0.SupportedFeatures `json:"suppFeat,omitempty"`

	// UeIpv4 string identifying a Ipv4 address formatted in the "dotted decimal" notation as defined in IETF RFC 1166.
	UeIpv4 *externalRef3.Ipv4Addr `json:"ueIpv4,omitempty"`

	// UeIpv6 string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
	UeIpv6               *externalRef3.Ipv6Addr `json:"ueIpv6,omitempty"`
	UeMac                externalRef0.MacAddr48 `json:"ueMac,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TrafficInfluData defines model for TrafficInfluData.
type TrafficInfluData struct {
	AddrPreserInd *bool `json:"addrPreserInd,omitempty"`
	AfAckInd      *bool `json:"afAckInd,omitempty"`

	// AfAppId Identifies an application.
	AfAppId *string `json:"afAppId,omitempty"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool `json:"appReloInd,omitempty"`

	// DnaiChgType Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.
	DnaiChgType *externalRef0.DnaiChangeType `json:"dnaiChgType,omitempty"`
	Dnn         *externalRef0.Dnn            `json:"dnn,omitempty"`

	// EthTrafficFilters Identifies Ethernet packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	EthTrafficFilters []externalRef5.EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	Headers           []string                          `json:"headers,omitempty"`
	InterGroupId      externalRef0.GroupId              `json:"interGroupId,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo        *externalRef4.NetworkAreaInfo   `json:"nwAreaInfo,omitempty"`
	ResUri            *externalRef0.Uri               `json:"resUri,omitempty"`
	Snssai            *externalRef0.Snssai            `json:"snssai,omitempty"`
	SubscribedEvents  []externalRef1.SubscribedEvent  `json:"subscribedEvents,omitempty"`
	Supi              externalRef0.Supi               `json:"supi,omitempty"`
	SupportedFeatures *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`

	// TempValidities Identifies the temporal validities for the N6 traffic routing requirement.
	TempValidities []externalRef5.TemporalValidity `json:"tempValidities,omitempty"`
	TraffCorreInd  *bool                           `json:"traffCorreInd,omitempty"`

	// TrafficFilters Identifies IP packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	TrafficFilters []externalRef3.FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []externalRef0.RouteToLocation `json:"trafficRoutes,omitempty"`

	// UpPathChgNotifCorreId Contains the Notification Correlation Id allocated by the NEF for the UP path change notification.
	UpPathChgNotifCorreId *string                `json:"upPathChgNotifCorreId,omitempty"`
	UpPathChgNotifUri     *externalRef0.Uri      `json:"upPathChgNotifUri,omitempty"`
	ValidEndTime          *externalRef0.DateTime `json:"validEndTime,omitempty"`
	ValidStartTime        *externalRef0.DateTime `json:"validStartTime,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// TrafficInfluDataNotif defines model for TrafficInfluDataNotif.
type TrafficInfluDataNotif struct {
	ResUri               externalRef0.Uri       `json:"resUri"`
	TrafficInfluData     *TrafficInfluData      `json:"trafficInfluData,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TrafficInfluDataPatch defines model for TrafficInfluDataPatch.
type TrafficInfluDataPatch struct {
	AddrPreserInd *bool `json:"addrPreserInd,omitempty"`
	AfAckInd      *bool `json:"afAckInd,omitempty"`

	// AppReloInd Identifies whether an application can be relocated once a location of the application has been selected.
	AppReloInd *bool             `json:"appReloInd,omitempty"`
	Dnn        *externalRef0.Dnn `json:"dnn,omitempty"`

	// EthTrafficFilters Identifies Ethernet packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	EthTrafficFilters []externalRef5.EthFlowDescription `json:"ethTrafficFilters,omitempty"`
	Headers           []string                          `json:"headers,omitempty"`
	InternalGroupId   externalRef0.GroupId              `json:"internalGroupId,omitempty"`

	// NwAreaInfo Describes a network area information in which the NF service consumer requests the number of UEs.
	NwAreaInfo *externalRef4.NetworkAreaInfo `json:"nwAreaInfo,omitempty"`
	Snssai     *externalRef0.Snssai          `json:"snssai,omitempty"`
	Supi       externalRef0.Supi             `json:"supi,omitempty"`

	// TempValidities Identifies the temporal validities for the N6 traffic routing requirement.
	TempValidities *[]externalRef5.TemporalValidity `json:"tempValidities"`
	TraffCorreInd  *bool                            `json:"traffCorreInd,omitempty"`

	// TrafficFilters Identifies IP packet filters. Either "trafficFilters" or "ethTrafficFilters" shall be included if applicable.
	TrafficFilters []externalRef3.FlowInfo `json:"trafficFilters,omitempty"`

	// TrafficRoutes Identifies the N6 traffic routing requirement.
	TrafficRoutes []externalRef0.RouteToLocation `json:"trafficRoutes,omitempty"`

	// UpPathChgNotifCorreId Contains the Notification Correlation Id allocated by the NEF for the UP path change notification.
	UpPathChgNotifCorreId *string                `json:"upPathChgNotifCorreId,omitempty"`
	UpPathChgNotifUri     *externalRef0.Uri      `json:"upPathChgNotifUri,omitempty"`
	ValidEndTime          *externalRef0.DateTime `json:"validEndTime,omitempty"`
	ValidStartTime        *externalRef0.DateTime `json:"validStartTime,omitempty"`
	AdditionalProperties  map[string]interface{} `json:"-"`
}

// TrafficInfluSub defines model for TrafficInfluSub.
type TrafficInfluSub struct {
	// Dnns Each element identifies a DNN.
	Dnns   []externalRef0.Dnn     `json:"dnns,omitempty"`
	Expiry *externalRef0.DateTime `json:"expiry,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds []externalRef0.GroupId `json:"internalGroupIds,omitempty"`
	NotificationUri  externalRef0.Uri       `json:"notificationUri"`

	// Snssais Each element identifies a slice.
	Snssais []externalRef0.Snssai `json:"snssais,omitempty"`

	// Supis Each element identifies the user.
	Supis                []externalRef0.Supi             `json:"supis,omitempty"`
	SupportedFeatures    *externalRef0.SupportedFeatures `json:"supportedFeatures,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// ReadBdtPolicyDataParams defines parameters for ReadBdtPolicyData.
type ReadBdtPolicyDataParams struct {
	// BdtPolicyIds Each element identifies a service.
	BdtPolicyIds *[]string `form:"bdt-policy-ids,omitempty" json:"bdt-policy-ids,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds *[]externalRef0.GroupId `form:"internal-group-ids,omitempty" json:"internal-group-ids,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`
}

// ReadInfluenceDataParams defines parameters for ReadInfluenceData.
type ReadInfluenceDataParams struct {
	// InfluenceIds Each element identifies a service.
	InfluenceIds *[]string `form:"influence-Ids,omitempty" json:"influence-Ids,omitempty"`

	// Dnns Each element identifies a DNN.
	Dnns *[]externalRef0.Dnn `form:"dnns,omitempty" json:"dnns,omitempty"`

	// Snssais Each element identifies a slice.
	Snssais *[]externalRef0.Snssai `form:"snssais,omitempty" json:"snssais,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds *[]externalRef0.GroupId `form:"internal-Group-Ids,omitempty" json:"internal-Group-Ids,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// ReadInfluenceDataSubscriptionsParams defines parameters for ReadInfluenceDataSubscriptions.
type ReadInfluenceDataSubscriptionsParams struct {
	// Dnn Identifies a DNN.
	Dnn *externalRef0.Dnn `form:"dnn,omitempty" json:"dnn,omitempty"`

	// Snssai Identifies a slice.
	Snssai *externalRef0.Snssai `form:"snssai,omitempty" json:"snssai,omitempty"`

	// InternalGroupId Identifies a group of users.
	InternalGroupId *externalRef0.GroupId `form:"internal-Group-Id,omitempty" json:"internal-Group-Id,omitempty"`

	// Supi Identifies a user.
	Supi *externalRef0.Supi `form:"supi,omitempty" json:"supi,omitempty"`
}

// ReadIPTVCongifurationDataParams defines parameters for ReadIPTVCongifurationData.
type ReadIPTVCongifurationDataParams struct {
	// ConfigIds Each element identifies a configuration.
	ConfigIds *[]string `form:"config-ids,omitempty" json:"config-ids,omitempty"`

	// Dnns Each element identifies a DNN.
	Dnns *[]externalRef0.Dnn `form:"dnns,omitempty" json:"dnns,omitempty"`

	// Snssais Each element identifies a slice.
	Snssais *[]externalRef0.Snssai `form:"snssais,omitempty" json:"snssais,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`

	// InterGroupIds Each element identifies a group of users.
	InterGroupIds *[]externalRef0.GroupId `form:"inter-group-ids,omitempty" json:"inter-group-ids,omitempty"`
}

// PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONBody defines parameters for PartialReplaceIndividualIPTVConfigurationData.
type PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONBody = interface{}

// ReadPFDDataParams defines parameters for ReadPFDData.
type ReadPFDDataParams struct {
	// AppId Contains the information of the application identifier(s) for the querying PFD Data resource. If none appId is included in the URI, it applies to all application identifier(s) for the querying PFD Data resource.
	AppId *[]externalRef0.ApplicationId `form:"appId,omitempty" json:"appId,omitempty"`
}

// ReadServiceParameterDataParams defines parameters for ReadServiceParameterData.
type ReadServiceParameterDataParams struct {
	// ServiceParamIds Each element identifies a service.
	ServiceParamIds *[]string `form:"service-param-ids,omitempty" json:"service-param-ids,omitempty"`

	// Dnns Each element identifies a DNN.
	Dnns *[]externalRef0.Dnn `form:"dnns,omitempty" json:"dnns,omitempty"`

	// Snssais Each element identifies a slice.
	Snssais *[]externalRef0.Snssai `form:"snssais,omitempty" json:"snssais,omitempty"`

	// InternalGroupIds Each element identifies a group of users.
	InternalGroupIds *[]externalRef0.GroupId `form:"internal-group-ids,omitempty" json:"internal-group-ids,omitempty"`

	// Supis Each element identifies the user.
	Supis *[]externalRef0.Supi `form:"supis,omitempty" json:"supis,omitempty"`

	// UeIpv4s Each element identifies the user.
	UeIpv4s *[]externalRef0.Ipv4Addr `form:"ue-ipv4s,omitempty" json:"ue-ipv4s,omitempty"`

	// UeIpv6s Each element identifies the user.
	UeIpv6s *[]externalRef0.Ipv6Addr `form:"ue-ipv6s,omitempty" json:"ue-ipv6s,omitempty"`

	// UeMacs Each element identifies the user.
	UeMacs *[]externalRef0.MacAddr48 `form:"ue-macs,omitempty" json:"ue-macs,omitempty"`

	// SuppFeat Supported Features
	SuppFeat *externalRef0.SupportedFeatures `form:"supp-feat,omitempty" json:"supp-feat,omitempty"`
}

// UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONBody defines parameters for UpdateIndividualServiceParameterData.
type UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONBody = interface{}

// ReadApplicationDataChangeSubscriptionsParams defines parameters for ReadApplicationDataChangeSubscriptions.
type ReadApplicationDataChangeSubscriptionsParams struct {
	// DataFilter The data filter for the query.
	DataFilter *DataFilter `form:"data-filter,omitempty" json:"data-filter,omitempty"`
}

// UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualAppliedBdtPolicyData for application/merge-patch+json ContentType.
type UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody = BdtPolicyDataPatch

// CreateIndividualAppliedBdtPolicyDataJSONRequestBody defines body for CreateIndividualAppliedBdtPolicyData for application/json ContentType.
type CreateIndividualAppliedBdtPolicyDataJSONRequestBody = BdtPolicyData

// CreateIndividualInfluenceDataSubscriptionJSONRequestBody defines body for CreateIndividualInfluenceDataSubscription for application/json ContentType.
type CreateIndividualInfluenceDataSubscriptionJSONRequestBody = TrafficInfluSub

// ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody defines body for ReplaceIndividualInfluenceDataSubscription for application/json ContentType.
type ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody = TrafficInfluSub

// UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualInfluenceData for application/merge-patch+json ContentType.
type UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody = TrafficInfluDataPatch

// CreateOrReplaceIndividualInfluenceDataJSONRequestBody defines body for CreateOrReplaceIndividualInfluenceData for application/json ContentType.
type CreateOrReplaceIndividualInfluenceDataJSONRequestBody = TrafficInfluData

// PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody defines body for PartialReplaceIndividualIPTVConfigurationData for application/merge-patch+json ContentType.
type PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody = PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONBody

// CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody defines body for CreateOrReplaceIndividualIPTVConfigurationData for application/json ContentType.
type CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody = IptvConfigData

// CreateOrReplaceIndividualPFDDataJSONRequestBody defines body for CreateOrReplaceIndividualPFDData for application/json ContentType.
type CreateOrReplaceIndividualPFDDataJSONRequestBody = PfdDataForAppExt

// UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody defines body for UpdateIndividualServiceParameterData for application/merge-patch+json ContentType.
type UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody = UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONBody

// CreateOrReplaceServiceParameterDataJSONRequestBody defines body for CreateOrReplaceServiceParameterData for application/json ContentType.
type CreateOrReplaceServiceParameterDataJSONRequestBody = ServiceParameterData

// CreateIndividualApplicationDataSubscriptionJSONRequestBody defines body for CreateIndividualApplicationDataSubscription for application/json ContentType.
type CreateIndividualApplicationDataSubscriptionJSONRequestBody = ApplicationDataSubs

// ReplaceIndividualApplicationDataSubscriptionJSONRequestBody defines body for ReplaceIndividualApplicationDataSubscription for application/json ContentType.
type ReplaceIndividualApplicationDataSubscriptionJSONRequestBody = ApplicationDataSubs

// Getter for additional properties for ApplicationDataChangeNotif. Returns the specified
// element and whether it was found
func (a ApplicationDataChangeNotif) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApplicationDataChangeNotif
func (a *ApplicationDataChangeNotif) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApplicationDataChangeNotif to handle AdditionalProperties
func (a *ApplicationDataChangeNotif) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtPolicyData"]; found {
		err = json.Unmarshal(raw, &a.BdtPolicyData)
		if err != nil {
			return fmt.Errorf("error reading 'bdtPolicyData': %w", err)
		}
		delete(object, "bdtPolicyData")
	}

	if raw, found := object["iptvConfigData"]; found {
		err = json.Unmarshal(raw, &a.IptvConfigData)
		if err != nil {
			return fmt.Errorf("error reading 'iptvConfigData': %w", err)
		}
		delete(object, "iptvConfigData")
	}

	if raw, found := object["pfdData"]; found {
		err = json.Unmarshal(raw, &a.PfdData)
		if err != nil {
			return fmt.Errorf("error reading 'pfdData': %w", err)
		}
		delete(object, "pfdData")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["serParamData"]; found {
		err = json.Unmarshal(raw, &a.SerParamData)
		if err != nil {
			return fmt.Errorf("error reading 'serParamData': %w", err)
		}
		delete(object, "serParamData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApplicationDataChangeNotif to handle AdditionalProperties
func (a ApplicationDataChangeNotif) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BdtPolicyData != nil {
		object["bdtPolicyData"], err = json.Marshal(a.BdtPolicyData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bdtPolicyData': %w", err)
		}
	}

	if a.IptvConfigData != nil {
		object["iptvConfigData"], err = json.Marshal(a.IptvConfigData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'iptvConfigData': %w", err)
		}
	}

	if a.PfdData != nil {
		object["pfdData"], err = json.Marshal(a.PfdData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pfdData': %w", err)
		}
	}

	object["resUri"], err = json.Marshal(a.ResUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
	}

	if a.SerParamData != nil {
		object["serParamData"], err = json.Marshal(a.SerParamData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serParamData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApplicationDataSubs. Returns the specified
// element and whether it was found
func (a ApplicationDataSubs) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApplicationDataSubs
func (a *ApplicationDataSubs) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApplicationDataSubs to handle AdditionalProperties
func (a *ApplicationDataSubs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dataFilters"]; found {
		err = json.Unmarshal(raw, &a.DataFilters)
		if err != nil {
			return fmt.Errorf("error reading 'dataFilters': %w", err)
		}
		delete(object, "dataFilters")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApplicationDataSubs to handle AdditionalProperties
func (a ApplicationDataSubs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.DataFilters) != 0 {
		object["dataFilters"], err = json.Marshal(a.DataFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dataFilters': %w", err)
		}
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtPolicyData. Returns the specified
// element and whether it was found
func (a BdtPolicyData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicyData
func (a *BdtPolicyData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicyData to handle AdditionalProperties
func (a *BdtPolicyData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicyData to handle AdditionalProperties
func (a BdtPolicyData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BdtPolicyDataPatch. Returns the specified
// element and whether it was found
func (a BdtPolicyDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BdtPolicyDataPatch
func (a *BdtPolicyDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BdtPolicyDataPatch to handle AdditionalProperties
func (a *BdtPolicyDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bdtRefId"]; found {
		err = json.Unmarshal(raw, &a.BdtRefId)
		if err != nil {
			return fmt.Errorf("error reading 'bdtRefId': %w", err)
		}
		delete(object, "bdtRefId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BdtPolicyDataPatch to handle AdditionalProperties
func (a BdtPolicyDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["bdtRefId"], err = json.Marshal(a.BdtRefId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'bdtRefId': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DataFilter. Returns the specified
// element and whether it was found
func (a DataFilter) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DataFilter
func (a *DataFilter) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DataFilter to handle AdditionalProperties
func (a *DataFilter) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appIds"]; found {
		err = json.Unmarshal(raw, &a.AppIds)
		if err != nil {
			return fmt.Errorf("error reading 'appIds': %w", err)
		}
		delete(object, "appIds")
	}

	if raw, found := object["dataInd"]; found {
		err = json.Unmarshal(raw, &a.DataInd)
		if err != nil {
			return fmt.Errorf("error reading 'dataInd': %w", err)
		}
		delete(object, "dataInd")
	}

	if raw, found := object["dnns"]; found {
		err = json.Unmarshal(raw, &a.Dnns)
		if err != nil {
			return fmt.Errorf("error reading 'dnns': %w", err)
		}
		delete(object, "dnns")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["snssais"]; found {
		err = json.Unmarshal(raw, &a.Snssais)
		if err != nil {
			return fmt.Errorf("error reading 'snssais': %w", err)
		}
		delete(object, "snssais")
	}

	if raw, found := object["supis"]; found {
		err = json.Unmarshal(raw, &a.Supis)
		if err != nil {
			return fmt.Errorf("error reading 'supis': %w", err)
		}
		delete(object, "supis")
	}

	if raw, found := object["ueIpv4s"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4s)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4s': %w", err)
		}
		delete(object, "ueIpv4s")
	}

	if raw, found := object["ueIpv6s"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6s)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6s': %w", err)
		}
		delete(object, "ueIpv6s")
	}

	if raw, found := object["ueMacs"]; found {
		err = json.Unmarshal(raw, &a.UeMacs)
		if err != nil {
			return fmt.Errorf("error reading 'ueMacs': %w", err)
		}
		delete(object, "ueMacs")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DataFilter to handle AdditionalProperties
func (a DataFilter) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.AppIds) != 0 {
		object["appIds"], err = json.Marshal(a.AppIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appIds': %w", err)
		}
	}

	object["dataInd"], err = json.Marshal(a.DataInd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'dataInd': %w", err)
	}

	if len(a.Dnns) != 0 {
		object["dnns"], err = json.Marshal(a.Dnns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnns': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	if len(a.Snssais) != 0 {
		object["snssais"], err = json.Marshal(a.Snssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssais': %w", err)
		}
	}

	if len(a.Supis) != 0 {
		object["supis"], err = json.Marshal(a.Supis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supis': %w", err)
		}
	}

	if len(a.UeIpv4s) != 0 {
		object["ueIpv4s"], err = json.Marshal(a.UeIpv4s)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4s': %w", err)
		}
	}

	if len(a.UeIpv6s) != 0 {
		object["ueIpv6s"], err = json.Marshal(a.UeIpv6s)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6s': %w", err)
		}
	}

	if len(a.UeMacs) != 0 {
		object["ueMacs"], err = json.Marshal(a.UeMacs)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMacs': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IptvConfigData. Returns the specified
// element and whether it was found
func (a IptvConfigData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IptvConfigData
func (a *IptvConfigData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IptvConfigData to handle AdditionalProperties
func (a *IptvConfigData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["multiAccCtrls"]; found {
		err = json.Unmarshal(raw, &a.MultiAccCtrls)
		if err != nil {
			return fmt.Errorf("error reading 'multiAccCtrls': %w", err)
		}
		delete(object, "multiAccCtrls")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IptvConfigData to handle AdditionalProperties
func (a IptvConfigData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["afAppId"], err = json.Marshal(a.AfAppId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	object["multiAccCtrls"], err = json.Marshal(a.MultiAccCtrls)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'multiAccCtrls': %w", err)
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PfdDataForAppExt. Returns the specified
// element and whether it was found
func (a PfdDataForAppExt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PfdDataForAppExt
func (a *PfdDataForAppExt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PfdDataForAppExt to handle AdditionalProperties
func (a *PfdDataForAppExt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["applicationId"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return fmt.Errorf("error reading 'applicationId': %w", err)
		}
		delete(object, "applicationId")
	}

	if raw, found := object["cachingTime"]; found {
		err = json.Unmarshal(raw, &a.CachingTime)
		if err != nil {
			return fmt.Errorf("error reading 'cachingTime': %w", err)
		}
		delete(object, "cachingTime")
	}

	if raw, found := object["pfds"]; found {
		err = json.Unmarshal(raw, &a.Pfds)
		if err != nil {
			return fmt.Errorf("error reading 'pfds': %w", err)
		}
		delete(object, "pfds")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PfdDataForAppExt to handle AdditionalProperties
func (a PfdDataForAppExt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["applicationId"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'applicationId': %w", err)
	}

	if a.CachingTime != nil {
		object["cachingTime"], err = json.Marshal(a.CachingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cachingTime': %w", err)
		}
	}

	object["pfds"], err = json.Marshal(a.Pfds)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pfds': %w", err)
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ServiceParameterData. Returns the specified
// element and whether it was found
func (a ServiceParameterData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ServiceParameterData
func (a *ServiceParameterData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ServiceParameterData to handle AdditionalProperties
func (a *ServiceParameterData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["anyUeInd"]; found {
		err = json.Unmarshal(raw, &a.AnyUeInd)
		if err != nil {
			return fmt.Errorf("error reading 'anyUeInd': %w", err)
		}
		delete(object, "anyUeInd")
	}

	if raw, found := object["appId"]; found {
		err = json.Unmarshal(raw, &a.AppId)
		if err != nil {
			return fmt.Errorf("error reading 'appId': %w", err)
		}
		delete(object, "appId")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["paramOverPc5"]; found {
		err = json.Unmarshal(raw, &a.ParamOverPc5)
		if err != nil {
			return fmt.Errorf("error reading 'paramOverPc5': %w", err)
		}
		delete(object, "paramOverPc5")
	}

	if raw, found := object["paramOverUu"]; found {
		err = json.Unmarshal(raw, &a.ParamOverUu)
		if err != nil {
			return fmt.Errorf("error reading 'paramOverUu': %w", err)
		}
		delete(object, "paramOverUu")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["suppFeat"]; found {
		err = json.Unmarshal(raw, &a.SuppFeat)
		if err != nil {
			return fmt.Errorf("error reading 'suppFeat': %w", err)
		}
		delete(object, "suppFeat")
	}

	if raw, found := object["ueIpv4"]; found {
		err = json.Unmarshal(raw, &a.UeIpv4)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv4': %w", err)
		}
		delete(object, "ueIpv4")
	}

	if raw, found := object["ueIpv6"]; found {
		err = json.Unmarshal(raw, &a.UeIpv6)
		if err != nil {
			return fmt.Errorf("error reading 'ueIpv6': %w", err)
		}
		delete(object, "ueIpv6")
	}

	if raw, found := object["ueMac"]; found {
		err = json.Unmarshal(raw, &a.UeMac)
		if err != nil {
			return fmt.Errorf("error reading 'ueMac': %w", err)
		}
		delete(object, "ueMac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ServiceParameterData to handle AdditionalProperties
func (a ServiceParameterData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnyUeInd != nil {
		object["anyUeInd"], err = json.Marshal(a.AnyUeInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'anyUeInd': %w", err)
		}
	}

	if a.AppId != nil {
		object["appId"], err = json.Marshal(a.AppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appId': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.ParamOverPc5 != nil {
		object["paramOverPc5"], err = json.Marshal(a.ParamOverPc5)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paramOverPc5': %w", err)
		}
	}

	if a.ParamOverUu != nil {
		object["paramOverUu"], err = json.Marshal(a.ParamOverUu)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paramOverUu': %w", err)
		}
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SuppFeat != nil {
		object["suppFeat"], err = json.Marshal(a.SuppFeat)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'suppFeat': %w", err)
		}
	}

	if a.UeIpv4 != nil {
		object["ueIpv4"], err = json.Marshal(a.UeIpv4)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv4': %w", err)
		}
	}

	if a.UeIpv6 != nil {
		object["ueIpv6"], err = json.Marshal(a.UeIpv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueIpv6': %w", err)
		}
	}

	if len(a.UeMac) != 0 {
		object["ueMac"], err = json.Marshal(a.UeMac)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ueMac': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluData. Returns the specified
// element and whether it was found
func (a TrafficInfluData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluData
func (a *TrafficInfluData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluData to handle AdditionalProperties
func (a *TrafficInfluData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["afAppId"]; found {
		err = json.Unmarshal(raw, &a.AfAppId)
		if err != nil {
			return fmt.Errorf("error reading 'afAppId': %w", err)
		}
		delete(object, "afAppId")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["dnaiChgType"]; found {
		err = json.Unmarshal(raw, &a.DnaiChgType)
		if err != nil {
			return fmt.Errorf("error reading 'dnaiChgType': %w", err)
		}
		delete(object, "dnaiChgType")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["headers"]; found {
		err = json.Unmarshal(raw, &a.Headers)
		if err != nil {
			return fmt.Errorf("error reading 'headers': %w", err)
		}
		delete(object, "headers")
	}

	if raw, found := object["interGroupId"]; found {
		err = json.Unmarshal(raw, &a.InterGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'interGroupId': %w", err)
		}
		delete(object, "interGroupId")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["subscribedEvents"]; found {
		err = json.Unmarshal(raw, &a.SubscribedEvents)
		if err != nil {
			return fmt.Errorf("error reading 'subscribedEvents': %w", err)
		}
		delete(object, "subscribedEvents")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["traffCorreInd"]; found {
		err = json.Unmarshal(raw, &a.TraffCorreInd)
		if err != nil {
			return fmt.Errorf("error reading 'traffCorreInd': %w", err)
		}
		delete(object, "traffCorreInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["upPathChgNotifCorreId"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifCorreId': %w", err)
		}
		delete(object, "upPathChgNotifCorreId")
	}

	if raw, found := object["upPathChgNotifUri"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifUri': %w", err)
		}
		delete(object, "upPathChgNotifUri")
	}

	if raw, found := object["validEndTime"]; found {
		err = json.Unmarshal(raw, &a.ValidEndTime)
		if err != nil {
			return fmt.Errorf("error reading 'validEndTime': %w", err)
		}
		delete(object, "validEndTime")
	}

	if raw, found := object["validStartTime"]; found {
		err = json.Unmarshal(raw, &a.ValidStartTime)
		if err != nil {
			return fmt.Errorf("error reading 'validStartTime': %w", err)
		}
		delete(object, "validStartTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluData to handle AdditionalProperties
func (a TrafficInfluData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AfAckInd != nil {
		object["afAckInd"], err = json.Marshal(a.AfAckInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
		}
	}

	if a.AfAppId != nil {
		object["afAppId"], err = json.Marshal(a.AfAppId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAppId': %w", err)
		}
	}

	if a.AppReloInd != nil {
		object["appReloInd"], err = json.Marshal(a.AppReloInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
		}
	}

	if a.DnaiChgType != nil {
		object["dnaiChgType"], err = json.Marshal(a.DnaiChgType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnaiChgType': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	if len(a.Headers) != 0 {
		object["headers"], err = json.Marshal(a.Headers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'headers': %w", err)
		}
	}

	if len(a.InterGroupId) != 0 {
		object["interGroupId"], err = json.Marshal(a.InterGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'interGroupId': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.ResUri != nil {
		object["resUri"], err = json.Marshal(a.ResUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.SubscribedEvents) != 0 {
		object["subscribedEvents"], err = json.Marshal(a.SubscribedEvents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subscribedEvents': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	if len(a.TempValidities) != 0 {
		object["tempValidities"], err = json.Marshal(a.TempValidities)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
		}
	}

	if a.TraffCorreInd != nil {
		object["traffCorreInd"], err = json.Marshal(a.TraffCorreInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traffCorreInd': %w", err)
		}
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	if a.UpPathChgNotifCorreId != nil {
		object["upPathChgNotifCorreId"], err = json.Marshal(a.UpPathChgNotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifCorreId': %w", err)
		}
	}

	if a.UpPathChgNotifUri != nil {
		object["upPathChgNotifUri"], err = json.Marshal(a.UpPathChgNotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifUri': %w", err)
		}
	}

	if a.ValidEndTime != nil {
		object["validEndTime"], err = json.Marshal(a.ValidEndTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validEndTime': %w", err)
		}
	}

	if a.ValidStartTime != nil {
		object["validStartTime"], err = json.Marshal(a.ValidStartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validStartTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluDataNotif. Returns the specified
// element and whether it was found
func (a TrafficInfluDataNotif) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluDataNotif
func (a *TrafficInfluDataNotif) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluDataNotif to handle AdditionalProperties
func (a *TrafficInfluDataNotif) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["resUri"]; found {
		err = json.Unmarshal(raw, &a.ResUri)
		if err != nil {
			return fmt.Errorf("error reading 'resUri': %w", err)
		}
		delete(object, "resUri")
	}

	if raw, found := object["trafficInfluData"]; found {
		err = json.Unmarshal(raw, &a.TrafficInfluData)
		if err != nil {
			return fmt.Errorf("error reading 'trafficInfluData': %w", err)
		}
		delete(object, "trafficInfluData")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluDataNotif to handle AdditionalProperties
func (a TrafficInfluDataNotif) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["resUri"], err = json.Marshal(a.ResUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'resUri': %w", err)
	}

	if a.TrafficInfluData != nil {
		object["trafficInfluData"], err = json.Marshal(a.TrafficInfluData)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficInfluData': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluDataPatch. Returns the specified
// element and whether it was found
func (a TrafficInfluDataPatch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluDataPatch
func (a *TrafficInfluDataPatch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluDataPatch to handle AdditionalProperties
func (a *TrafficInfluDataPatch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addrPreserInd"]; found {
		err = json.Unmarshal(raw, &a.AddrPreserInd)
		if err != nil {
			return fmt.Errorf("error reading 'addrPreserInd': %w", err)
		}
		delete(object, "addrPreserInd")
	}

	if raw, found := object["afAckInd"]; found {
		err = json.Unmarshal(raw, &a.AfAckInd)
		if err != nil {
			return fmt.Errorf("error reading 'afAckInd': %w", err)
		}
		delete(object, "afAckInd")
	}

	if raw, found := object["appReloInd"]; found {
		err = json.Unmarshal(raw, &a.AppReloInd)
		if err != nil {
			return fmt.Errorf("error reading 'appReloInd': %w", err)
		}
		delete(object, "appReloInd")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return fmt.Errorf("error reading 'dnn': %w", err)
		}
		delete(object, "dnn")
	}

	if raw, found := object["ethTrafficFilters"]; found {
		err = json.Unmarshal(raw, &a.EthTrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'ethTrafficFilters': %w", err)
		}
		delete(object, "ethTrafficFilters")
	}

	if raw, found := object["headers"]; found {
		err = json.Unmarshal(raw, &a.Headers)
		if err != nil {
			return fmt.Errorf("error reading 'headers': %w", err)
		}
		delete(object, "headers")
	}

	if raw, found := object["internalGroupId"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupId)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupId': %w", err)
		}
		delete(object, "internalGroupId")
	}

	if raw, found := object["nwAreaInfo"]; found {
		err = json.Unmarshal(raw, &a.NwAreaInfo)
		if err != nil {
			return fmt.Errorf("error reading 'nwAreaInfo': %w", err)
		}
		delete(object, "nwAreaInfo")
	}

	if raw, found := object["snssai"]; found {
		err = json.Unmarshal(raw, &a.Snssai)
		if err != nil {
			return fmt.Errorf("error reading 'snssai': %w", err)
		}
		delete(object, "snssai")
	}

	if raw, found := object["supi"]; found {
		err = json.Unmarshal(raw, &a.Supi)
		if err != nil {
			return fmt.Errorf("error reading 'supi': %w", err)
		}
		delete(object, "supi")
	}

	if raw, found := object["tempValidities"]; found {
		err = json.Unmarshal(raw, &a.TempValidities)
		if err != nil {
			return fmt.Errorf("error reading 'tempValidities': %w", err)
		}
		delete(object, "tempValidities")
	}

	if raw, found := object["traffCorreInd"]; found {
		err = json.Unmarshal(raw, &a.TraffCorreInd)
		if err != nil {
			return fmt.Errorf("error reading 'traffCorreInd': %w", err)
		}
		delete(object, "traffCorreInd")
	}

	if raw, found := object["trafficFilters"]; found {
		err = json.Unmarshal(raw, &a.TrafficFilters)
		if err != nil {
			return fmt.Errorf("error reading 'trafficFilters': %w", err)
		}
		delete(object, "trafficFilters")
	}

	if raw, found := object["trafficRoutes"]; found {
		err = json.Unmarshal(raw, &a.TrafficRoutes)
		if err != nil {
			return fmt.Errorf("error reading 'trafficRoutes': %w", err)
		}
		delete(object, "trafficRoutes")
	}

	if raw, found := object["upPathChgNotifCorreId"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifCorreId)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifCorreId': %w", err)
		}
		delete(object, "upPathChgNotifCorreId")
	}

	if raw, found := object["upPathChgNotifUri"]; found {
		err = json.Unmarshal(raw, &a.UpPathChgNotifUri)
		if err != nil {
			return fmt.Errorf("error reading 'upPathChgNotifUri': %w", err)
		}
		delete(object, "upPathChgNotifUri")
	}

	if raw, found := object["validEndTime"]; found {
		err = json.Unmarshal(raw, &a.ValidEndTime)
		if err != nil {
			return fmt.Errorf("error reading 'validEndTime': %w", err)
		}
		delete(object, "validEndTime")
	}

	if raw, found := object["validStartTime"]; found {
		err = json.Unmarshal(raw, &a.ValidStartTime)
		if err != nil {
			return fmt.Errorf("error reading 'validStartTime': %w", err)
		}
		delete(object, "validStartTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluDataPatch to handle AdditionalProperties
func (a TrafficInfluDataPatch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddrPreserInd != nil {
		object["addrPreserInd"], err = json.Marshal(a.AddrPreserInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addrPreserInd': %w", err)
		}
	}

	if a.AfAckInd != nil {
		object["afAckInd"], err = json.Marshal(a.AfAckInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'afAckInd': %w", err)
		}
	}

	if a.AppReloInd != nil {
		object["appReloInd"], err = json.Marshal(a.AppReloInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'appReloInd': %w", err)
		}
	}

	if a.Dnn != nil {
		object["dnn"], err = json.Marshal(a.Dnn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnn': %w", err)
		}
	}

	if len(a.EthTrafficFilters) != 0 {
		object["ethTrafficFilters"], err = json.Marshal(a.EthTrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ethTrafficFilters': %w", err)
		}
	}

	if len(a.Headers) != 0 {
		object["headers"], err = json.Marshal(a.Headers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'headers': %w", err)
		}
	}

	if len(a.InternalGroupId) != 0 {
		object["internalGroupId"], err = json.Marshal(a.InternalGroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupId': %w", err)
		}
	}

	if a.NwAreaInfo != nil {
		object["nwAreaInfo"], err = json.Marshal(a.NwAreaInfo)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nwAreaInfo': %w", err)
		}
	}

	if a.Snssai != nil {
		object["snssai"], err = json.Marshal(a.Snssai)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssai': %w", err)
		}
	}

	if len(a.Supi) != 0 {
		object["supi"], err = json.Marshal(a.Supi)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supi': %w", err)
		}
	}

	object["tempValidities"], err = json.Marshal(a.TempValidities)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'tempValidities': %w", err)
	}

	if a.TraffCorreInd != nil {
		object["traffCorreInd"], err = json.Marshal(a.TraffCorreInd)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'traffCorreInd': %w", err)
		}
	}

	if len(a.TrafficFilters) != 0 {
		object["trafficFilters"], err = json.Marshal(a.TrafficFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficFilters': %w", err)
		}
	}

	if len(a.TrafficRoutes) != 0 {
		object["trafficRoutes"], err = json.Marshal(a.TrafficRoutes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trafficRoutes': %w", err)
		}
	}

	if a.UpPathChgNotifCorreId != nil {
		object["upPathChgNotifCorreId"], err = json.Marshal(a.UpPathChgNotifCorreId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifCorreId': %w", err)
		}
	}

	if a.UpPathChgNotifUri != nil {
		object["upPathChgNotifUri"], err = json.Marshal(a.UpPathChgNotifUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'upPathChgNotifUri': %w", err)
		}
	}

	if a.ValidEndTime != nil {
		object["validEndTime"], err = json.Marshal(a.ValidEndTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validEndTime': %w", err)
		}
	}

	if a.ValidStartTime != nil {
		object["validStartTime"], err = json.Marshal(a.ValidStartTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'validStartTime': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TrafficInfluSub. Returns the specified
// element and whether it was found
func (a TrafficInfluSub) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TrafficInfluSub
func (a *TrafficInfluSub) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TrafficInfluSub to handle AdditionalProperties
func (a *TrafficInfluSub) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dnns"]; found {
		err = json.Unmarshal(raw, &a.Dnns)
		if err != nil {
			return fmt.Errorf("error reading 'dnns': %w", err)
		}
		delete(object, "dnns")
	}

	if raw, found := object["expiry"]; found {
		err = json.Unmarshal(raw, &a.Expiry)
		if err != nil {
			return fmt.Errorf("error reading 'expiry': %w", err)
		}
		delete(object, "expiry")
	}

	if raw, found := object["internalGroupIds"]; found {
		err = json.Unmarshal(raw, &a.InternalGroupIds)
		if err != nil {
			return fmt.Errorf("error reading 'internalGroupIds': %w", err)
		}
		delete(object, "internalGroupIds")
	}

	if raw, found := object["notificationUri"]; found {
		err = json.Unmarshal(raw, &a.NotificationUri)
		if err != nil {
			return fmt.Errorf("error reading 'notificationUri': %w", err)
		}
		delete(object, "notificationUri")
	}

	if raw, found := object["snssais"]; found {
		err = json.Unmarshal(raw, &a.Snssais)
		if err != nil {
			return fmt.Errorf("error reading 'snssais': %w", err)
		}
		delete(object, "snssais")
	}

	if raw, found := object["supis"]; found {
		err = json.Unmarshal(raw, &a.Supis)
		if err != nil {
			return fmt.Errorf("error reading 'supis': %w", err)
		}
		delete(object, "supis")
	}

	if raw, found := object["supportedFeatures"]; found {
		err = json.Unmarshal(raw, &a.SupportedFeatures)
		if err != nil {
			return fmt.Errorf("error reading 'supportedFeatures': %w", err)
		}
		delete(object, "supportedFeatures")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TrafficInfluSub to handle AdditionalProperties
func (a TrafficInfluSub) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if len(a.Dnns) != 0 {
		object["dnns"], err = json.Marshal(a.Dnns)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dnns': %w", err)
		}
	}

	if a.Expiry != nil {
		object["expiry"], err = json.Marshal(a.Expiry)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'expiry': %w", err)
		}
	}

	if len(a.InternalGroupIds) != 0 {
		object["internalGroupIds"], err = json.Marshal(a.InternalGroupIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'internalGroupIds': %w", err)
		}
	}

	object["notificationUri"], err = json.Marshal(a.NotificationUri)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'notificationUri': %w", err)
	}

	if len(a.Snssais) != 0 {
		object["snssais"], err = json.Marshal(a.Snssais)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snssais': %w", err)
		}
	}

	if len(a.Supis) != 0 {
		object["supis"], err = json.Marshal(a.Supis)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supis': %w", err)
		}
	}

	if a.SupportedFeatures != nil {
		object["supportedFeatures"], err = json.Marshal(a.SupportedFeatures)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'supportedFeatures': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReadBdtPolicyData request
	ReadBdtPolicyData(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualAppliedBdtPolicyData request
	DeleteIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualAppliedBdtPolicyDataWithBody request with any body
	UpdateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualAppliedBdtPolicyDataWithBody request with any body
	CreateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadInfluenceData request
	ReadInfluenceData(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadInfluenceDataSubscriptions request
	ReadInfluenceDataSubscriptions(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualInfluenceDataSubscriptionWithBody request with any body
	CreateIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualInfluenceDataSubscription(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualInfluenceDataSubscription request
	DeleteIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualInfluenceDataSubscription request
	ReadIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualInfluenceDataSubscriptionWithBody request with any body
	ReplaceIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualInfluenceData request
	DeleteIndividualInfluenceData(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualInfluenceDataWithBody request with any body
	UpdateIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceIndividualInfluenceDataWithBody request with any body
	CreateOrReplaceIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceIndividualInfluenceData(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIPTVCongifurationData request
	ReadIPTVCongifurationData(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualIPTVConfigurationData request
	DeleteIndividualIPTVConfigurationData(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartialReplaceIndividualIPTVConfigurationDataWithBody request with any body
	PartialReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceIndividualIPTVConfigurationDataWithBody request with any body
	CreateOrReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceIndividualIPTVConfigurationData(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPFDData request
	ReadPFDData(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualPFDData request
	DeleteIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualPFDData request
	ReadIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceIndividualPFDDataWithBody request with any body
	CreateOrReplaceIndividualPFDDataWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceIndividualPFDData(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServiceParameterData request
	ReadServiceParameterData(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualServiceParameterData request
	DeleteIndividualServiceParameterData(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIndividualServiceParameterDataWithBody request with any body
	UpdateIndividualServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrReplaceServiceParameterDataWithBody request with any body
	CreateOrReplaceServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrReplaceServiceParameterData(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadApplicationDataChangeSubscriptions request
	ReadApplicationDataChangeSubscriptions(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndividualApplicationDataSubscriptionWithBody request with any body
	CreateIndividualApplicationDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIndividualApplicationDataSubscription(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIndividualApplicationDataSubscription request
	DeleteIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadIndividualApplicationDataSubscription request
	ReadIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceIndividualApplicationDataSubscriptionWithBody request with any body
	ReplaceIndividualApplicationDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceIndividualApplicationDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReadBdtPolicyData(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadBdtPolicyDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualAppliedBdtPolicyDataRequest(c.Server, bdtPolicyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody(c.Server, bdtPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualAppliedBdtPolicyDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, bdtPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAppliedBdtPolicyDataWithBody(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAppliedBdtPolicyDataRequestWithBody(c.Server, bdtPolicyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualAppliedBdtPolicyData(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualAppliedBdtPolicyDataRequest(c.Server, bdtPolicyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadInfluenceData(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadInfluenceDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadInfluenceDataSubscriptions(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadInfluenceDataSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualInfluenceDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualInfluenceDataSubscription(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualInfluenceDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualInfluenceDataSubscriptionRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualInfluenceDataSubscriptionRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualInfluenceDataSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualInfluenceDataSubscription(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualInfluenceDataSubscriptionRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualInfluenceData(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualInfluenceDataRequest(c.Server, influenceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualInfluenceDataRequestWithBody(c.Server, influenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualInfluenceDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, influenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualInfluenceDataWithBody(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualInfluenceDataRequestWithBody(c.Server, influenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualInfluenceData(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualInfluenceDataRequest(c.Server, influenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIPTVCongifurationData(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIPTVCongifurationDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualIPTVConfigurationData(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualIPTVConfigurationDataRequest(c.Server, configurationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody(c.Server, configurationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialReplaceIndividualIPTVConfigurationDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, configurationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualIPTVConfigurationDataWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody(c.Server, configurationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualIPTVConfigurationData(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualIPTVConfigurationDataRequest(c.Server, configurationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPFDData(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPFDDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualPFDDataRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualPFDData(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualPFDDataRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualPFDDataWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualPFDDataRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceIndividualPFDData(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceIndividualPFDDataRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServiceParameterData(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServiceParameterDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualServiceParameterData(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualServiceParameterDataRequest(c.Server, serviceParamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualServiceParameterDataRequestWithBody(c.Server, serviceParamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBody(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIndividualServiceParameterDataRequestWithApplicationMergePatchPlusJSONBody(c.Server, serviceParamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceServiceParameterDataWithBody(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceServiceParameterDataRequestWithBody(c.Server, serviceParamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrReplaceServiceParameterData(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrReplaceServiceParameterDataRequest(c.Server, serviceParamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadApplicationDataChangeSubscriptions(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadApplicationDataChangeSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualApplicationDataSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualApplicationDataSubscriptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndividualApplicationDataSubscription(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndividualApplicationDataSubscriptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIndividualApplicationDataSubscriptionRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadIndividualApplicationDataSubscription(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadIndividualApplicationDataSubscriptionRequest(c.Server, subsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualApplicationDataSubscriptionWithBody(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualApplicationDataSubscriptionRequestWithBody(c.Server, subsId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceIndividualApplicationDataSubscription(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceIndividualApplicationDataSubscriptionRequest(c.Server, subsId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReadBdtPolicyDataRequest generates requests for ReadBdtPolicyData
func NewReadBdtPolicyDataRequest(server string, params *ReadBdtPolicyDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BdtPolicyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bdt-policy-ids", runtime.ParamLocationQuery, *params.BdtPolicyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InternalGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-group-ids", runtime.ParamLocationQuery, *params.InternalGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualAppliedBdtPolicyDataRequest generates requests for DeleteIndividualAppliedBdtPolicyData
func NewDeleteIndividualAppliedBdtPolicyDataRequest(server string, bdtPolicyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualAppliedBdtPolicyDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualAppliedBdtPolicyData builder with application/merge-patch+json body
func NewUpdateIndividualAppliedBdtPolicyDataRequestWithApplicationMergePatchPlusJSONBody(server string, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody(server, bdtPolicyId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody generates requests for UpdateIndividualAppliedBdtPolicyData with any type of body
func NewUpdateIndividualAppliedBdtPolicyDataRequestWithBody(server string, bdtPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIndividualAppliedBdtPolicyDataRequest calls the generic CreateIndividualAppliedBdtPolicyData builder with application/json body
func NewCreateIndividualAppliedBdtPolicyDataRequest(server string, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualAppliedBdtPolicyDataRequestWithBody(server, bdtPolicyId, "application/json", bodyReader)
}

// NewCreateIndividualAppliedBdtPolicyDataRequestWithBody generates requests for CreateIndividualAppliedBdtPolicyData with any type of body
func NewCreateIndividualAppliedBdtPolicyDataRequestWithBody(server string, bdtPolicyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bdtPolicyId", runtime.ParamLocationPath, bdtPolicyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/bdtPolicyData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadInfluenceDataRequest generates requests for ReadInfluenceData
func NewReadInfluenceDataRequest(server string, params *ReadInfluenceDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.InfluenceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "influence-Ids", runtime.ParamLocationQuery, *params.InfluenceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnns != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnns", runtime.ParamLocationQuery, *params.Dnns); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssais != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssais); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssais", string(queryParamBuf))
			}

		}

		if params.InternalGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-Group-Ids", runtime.ParamLocationQuery, *params.InternalGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadInfluenceDataSubscriptionsRequest generates requests for ReadInfluenceDataSubscriptions
func NewReadInfluenceDataSubscriptionsRequest(server string, params *ReadInfluenceDataSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Dnn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnn", runtime.ParamLocationQuery, *params.Dnn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssai != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssai); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssai", string(queryParamBuf))
			}

		}

		if params.InternalGroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-Group-Id", runtime.ParamLocationQuery, *params.InternalGroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supi != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supi", runtime.ParamLocationQuery, *params.Supi); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualInfluenceDataSubscriptionRequest calls the generic CreateIndividualInfluenceDataSubscription builder with application/json body
func NewCreateIndividualInfluenceDataSubscriptionRequest(server string, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualInfluenceDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualInfluenceDataSubscriptionRequestWithBody generates requests for CreateIndividualInfluenceDataSubscription with any type of body
func NewCreateIndividualInfluenceDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualInfluenceDataSubscriptionRequest generates requests for DeleteIndividualInfluenceDataSubscription
func NewDeleteIndividualInfluenceDataSubscriptionRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualInfluenceDataSubscriptionRequest generates requests for ReadIndividualInfluenceDataSubscription
func NewReadIndividualInfluenceDataSubscriptionRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualInfluenceDataSubscriptionRequest calls the generic ReplaceIndividualInfluenceDataSubscription builder with application/json body
func NewReplaceIndividualInfluenceDataSubscriptionRequest(server string, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody generates requests for ReplaceIndividualInfluenceDataSubscription with any type of body
func NewReplaceIndividualInfluenceDataSubscriptionRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualInfluenceDataRequest generates requests for DeleteIndividualInfluenceData
func NewDeleteIndividualInfluenceDataRequest(server string, influenceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "influenceId", runtime.ParamLocationPath, influenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualInfluenceDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualInfluenceData builder with application/merge-patch+json body
func NewUpdateIndividualInfluenceDataRequestWithApplicationMergePatchPlusJSONBody(server string, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualInfluenceDataRequestWithBody(server, influenceId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualInfluenceDataRequestWithBody generates requests for UpdateIndividualInfluenceData with any type of body
func NewUpdateIndividualInfluenceDataRequestWithBody(server string, influenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "influenceId", runtime.ParamLocationPath, influenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceIndividualInfluenceDataRequest calls the generic CreateOrReplaceIndividualInfluenceData builder with application/json body
func NewCreateOrReplaceIndividualInfluenceDataRequest(server string, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceIndividualInfluenceDataRequestWithBody(server, influenceId, "application/json", bodyReader)
}

// NewCreateOrReplaceIndividualInfluenceDataRequestWithBody generates requests for CreateOrReplaceIndividualInfluenceData with any type of body
func NewCreateOrReplaceIndividualInfluenceDataRequestWithBody(server string, influenceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "influenceId", runtime.ParamLocationPath, influenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/influenceData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadIPTVCongifurationDataRequest generates requests for ReadIPTVCongifurationData
func NewReadIPTVCongifurationDataRequest(server string, params *ReadIPTVCongifurationDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ConfigIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "config-ids", runtime.ParamLocationQuery, *params.ConfigIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnns != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnns", runtime.ParamLocationQuery, *params.Dnns); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssais != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssais); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssais", string(queryParamBuf))
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InterGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inter-group-ids", runtime.ParamLocationQuery, *params.InterGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualIPTVConfigurationDataRequest generates requests for DeleteIndividualIPTVConfigurationData
func NewDeleteIndividualIPTVConfigurationDataRequest(server string, configurationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPartialReplaceIndividualIPTVConfigurationDataRequestWithApplicationMergePatchPlusJSONBody calls the generic PartialReplaceIndividualIPTVConfigurationData builder with application/merge-patch+json body
func NewPartialReplaceIndividualIPTVConfigurationDataRequestWithApplicationMergePatchPlusJSONBody(server string, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody(server, configurationId, "application/merge-patch+json", bodyReader)
}

// NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody generates requests for PartialReplaceIndividualIPTVConfigurationData with any type of body
func NewPartialReplaceIndividualIPTVConfigurationDataRequestWithBody(server string, configurationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceIndividualIPTVConfigurationDataRequest calls the generic CreateOrReplaceIndividualIPTVConfigurationData builder with application/json body
func NewCreateOrReplaceIndividualIPTVConfigurationDataRequest(server string, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody(server, configurationId, "application/json", bodyReader)
}

// NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody generates requests for CreateOrReplaceIndividualIPTVConfigurationData with any type of body
func NewCreateOrReplaceIndividualIPTVConfigurationDataRequestWithBody(server string, configurationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/iptvConfigData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadPFDDataRequest generates requests for ReadPFDData
func NewReadPFDDataRequest(server string, params *ReadPFDDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AppId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "appId", runtime.ParamLocationQuery, *params.AppId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualPFDDataRequest generates requests for DeleteIndividualPFDData
func NewDeleteIndividualPFDDataRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualPFDDataRequest generates requests for ReadIndividualPFDData
func NewReadIndividualPFDDataRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrReplaceIndividualPFDDataRequest calls the generic CreateOrReplaceIndividualPFDData builder with application/json body
func NewCreateOrReplaceIndividualPFDDataRequest(server string, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceIndividualPFDDataRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewCreateOrReplaceIndividualPFDDataRequestWithBody generates requests for CreateOrReplaceIndividualPFDData with any type of body
func NewCreateOrReplaceIndividualPFDDataRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/pfds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadServiceParameterDataRequest generates requests for ReadServiceParameterData
func NewReadServiceParameterDataRequest(server string, params *ReadServiceParameterDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceParamIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service-param-ids", runtime.ParamLocationQuery, *params.ServiceParamIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dnns != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dnns", runtime.ParamLocationQuery, *params.Dnns); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snssais != nil {

			if queryParamBuf, err := json.Marshal(*params.Snssais); err != nil {
				return nil, err
			} else {
				queryValues.Add("snssais", string(queryParamBuf))
			}

		}

		if params.InternalGroupIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internal-group-ids", runtime.ParamLocationQuery, *params.InternalGroupIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Supis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supis", runtime.ParamLocationQuery, *params.Supis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIpv4s != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-ipv4s", runtime.ParamLocationQuery, *params.UeIpv4s); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeIpv6s != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-ipv6s", runtime.ParamLocationQuery, *params.UeIpv6s); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UeMacs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ue-macs", runtime.ParamLocationQuery, *params.UeMacs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SuppFeat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supp-feat", runtime.ParamLocationQuery, *params.SuppFeat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIndividualServiceParameterDataRequest generates requests for DeleteIndividualServiceParameterData
func NewDeleteIndividualServiceParameterDataRequest(server string, serviceParamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceParamId", runtime.ParamLocationPath, serviceParamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIndividualServiceParameterDataRequestWithApplicationMergePatchPlusJSONBody calls the generic UpdateIndividualServiceParameterData builder with application/merge-patch+json body
func NewUpdateIndividualServiceParameterDataRequestWithApplicationMergePatchPlusJSONBody(server string, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIndividualServiceParameterDataRequestWithBody(server, serviceParamId, "application/merge-patch+json", bodyReader)
}

// NewUpdateIndividualServiceParameterDataRequestWithBody generates requests for UpdateIndividualServiceParameterData with any type of body
func NewUpdateIndividualServiceParameterDataRequestWithBody(server string, serviceParamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceParamId", runtime.ParamLocationPath, serviceParamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrReplaceServiceParameterDataRequest calls the generic CreateOrReplaceServiceParameterData builder with application/json body
func NewCreateOrReplaceServiceParameterDataRequest(server string, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrReplaceServiceParameterDataRequestWithBody(server, serviceParamId, "application/json", bodyReader)
}

// NewCreateOrReplaceServiceParameterDataRequestWithBody generates requests for CreateOrReplaceServiceParameterData with any type of body
func NewCreateOrReplaceServiceParameterDataRequestWithBody(server string, serviceParamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceParamId", runtime.ParamLocationPath, serviceParamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/serviceParamData/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadApplicationDataChangeSubscriptionsRequest generates requests for ReadApplicationDataChangeSubscriptions
func NewReadApplicationDataChangeSubscriptionsRequest(server string, params *ReadApplicationDataChangeSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DataFilter != nil {

			if queryParamBuf, err := json.Marshal(*params.DataFilter); err != nil {
				return nil, err
			} else {
				queryValues.Add("data-filter", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndividualApplicationDataSubscriptionRequest calls the generic CreateIndividualApplicationDataSubscription builder with application/json body
func NewCreateIndividualApplicationDataSubscriptionRequest(server string, body CreateIndividualApplicationDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIndividualApplicationDataSubscriptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIndividualApplicationDataSubscriptionRequestWithBody generates requests for CreateIndividualApplicationDataSubscription with any type of body
func NewCreateIndividualApplicationDataSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIndividualApplicationDataSubscriptionRequest generates requests for DeleteIndividualApplicationDataSubscription
func NewDeleteIndividualApplicationDataSubscriptionRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadIndividualApplicationDataSubscriptionRequest generates requests for ReadIndividualApplicationDataSubscription
func NewReadIndividualApplicationDataSubscriptionRequest(server string, subsId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceIndividualApplicationDataSubscriptionRequest calls the generic ReplaceIndividualApplicationDataSubscription builder with application/json body
func NewReplaceIndividualApplicationDataSubscriptionRequest(server string, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceIndividualApplicationDataSubscriptionRequestWithBody(server, subsId, "application/json", bodyReader)
}

// NewReplaceIndividualApplicationDataSubscriptionRequestWithBody generates requests for ReplaceIndividualApplicationDataSubscription with any type of body
func NewReplaceIndividualApplicationDataSubscriptionRequestWithBody(server string, subsId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subsId", runtime.ParamLocationPath, subsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application-data/subs-to-notify/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReadBdtPolicyDataWithResponse request
	ReadBdtPolicyDataWithResponse(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadBdtPolicyDataResponse, error)

	// DeleteIndividualAppliedBdtPolicyDataWithResponse request
	DeleteIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*DeleteIndividualAppliedBdtPolicyDataResponse, error)

	// UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with any body
	UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error)

	UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error)

	// CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with any body
	CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error)

	CreateIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error)

	// ReadInfluenceDataWithResponse request
	ReadInfluenceDataWithResponse(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataResponse, error)

	// ReadInfluenceDataSubscriptionsWithResponse request
	ReadInfluenceDataSubscriptionsWithResponse(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataSubscriptionsResponse, error)

	// CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error)

	CreateIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error)

	// DeleteIndividualInfluenceDataSubscriptionWithResponse request
	DeleteIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataSubscriptionResponse, error)

	// ReadIndividualInfluenceDataSubscriptionWithResponse request
	ReadIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*ReadIndividualInfluenceDataSubscriptionResponse, error)

	// ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error)

	ReplaceIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error)

	// DeleteIndividualInfluenceDataWithResponse request
	DeleteIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataResponse, error)

	// UpdateIndividualInfluenceDataWithBodyWithResponse request with any body
	UpdateIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error)

	UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error)

	// CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse request with any body
	CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error)

	CreateOrReplaceIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error)

	// ReadIPTVCongifurationDataWithResponse request
	ReadIPTVCongifurationDataWithResponse(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*ReadIPTVCongifurationDataResponse, error)

	// DeleteIndividualIPTVConfigurationDataWithResponse request
	DeleteIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*DeleteIndividualIPTVConfigurationDataResponse, error)

	// PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with any body
	PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error)

	PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error)

	// CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with any body
	CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error)

	CreateOrReplaceIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error)

	// ReadPFDDataWithResponse request
	ReadPFDDataWithResponse(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*ReadPFDDataResponse, error)

	// DeleteIndividualPFDDataWithResponse request
	DeleteIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPFDDataResponse, error)

	// ReadIndividualPFDDataWithResponse request
	ReadIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ReadIndividualPFDDataResponse, error)

	// CreateOrReplaceIndividualPFDDataWithBodyWithResponse request with any body
	CreateOrReplaceIndividualPFDDataWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error)

	CreateOrReplaceIndividualPFDDataWithResponse(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error)

	// ReadServiceParameterDataWithResponse request
	ReadServiceParameterDataWithResponse(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*ReadServiceParameterDataResponse, error)

	// DeleteIndividualServiceParameterDataWithResponse request
	DeleteIndividualServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*DeleteIndividualServiceParameterDataResponse, error)

	// UpdateIndividualServiceParameterDataWithBodyWithResponse request with any body
	UpdateIndividualServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error)

	UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error)

	// CreateOrReplaceServiceParameterDataWithBodyWithResponse request with any body
	CreateOrReplaceServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error)

	CreateOrReplaceServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error)

	// ReadApplicationDataChangeSubscriptionsWithResponse request
	ReadApplicationDataChangeSubscriptionsWithResponse(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadApplicationDataChangeSubscriptionsResponse, error)

	// CreateIndividualApplicationDataSubscriptionWithBodyWithResponse request with any body
	CreateIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error)

	CreateIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error)

	// DeleteIndividualApplicationDataSubscriptionWithResponse request
	DeleteIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualApplicationDataSubscriptionResponse, error)

	// ReadIndividualApplicationDataSubscriptionWithResponse request
	ReadIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*ReadIndividualApplicationDataSubscriptionResponse, error)

	// ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse request with any body
	ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error)

	ReplaceIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error)
}

type ReadBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]BdtPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualAppliedBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualAppliedBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualAppliedBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualAppliedBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BdtPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualAppliedBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualAppliedBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualAppliedBdtPolicyDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *BdtPolicyData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualAppliedBdtPolicyDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualAppliedBdtPolicyDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]TrafficInfluData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadInfluenceDataSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadInfluenceDataSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadInfluenceDataSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualInfluenceDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TrafficInfluSub
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualInfluenceDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualInfluenceDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TrafficInfluData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceIndividualInfluenceDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *TrafficInfluData
	JSON201                       *TrafficInfluData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceIndividualInfluenceDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceIndividualInfluenceDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIPTVCongifurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]IptvConfigData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIPTVCongifurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIPTVCongifurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualIPTVConfigurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualIPTVConfigurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualIPTVConfigurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartialReplaceIndividualIPTVConfigurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *IptvConfigData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r PartialReplaceIndividualIPTVConfigurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartialReplaceIndividualIPTVConfigurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceIndividualIPTVConfigurationDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *IptvConfigData
	JSON201                       *IptvConfigData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceIndividualIPTVConfigurationDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceIndividualIPTVConfigurationDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]PfdDataForAppExt
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdDataForAppExt
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceIndividualPFDDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PfdDataForAppExt
	JSON201                       *PfdDataForAppExt
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceIndividualPFDDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceIndividualPFDDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]ServiceParameterData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIndividualServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ServiceParameterData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r UpdateIndividualServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIndividualServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrReplaceServiceParameterDataResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ServiceParameterData
	JSON201                       *ServiceParameterData
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateOrReplaceServiceParameterDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrReplaceServiceParameterDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadApplicationDataChangeSubscriptionsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadApplicationDataChangeSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadApplicationDataChangeSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r CreateIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r DeleteIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON414     *externalRef0.N414
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReadIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceIndividualApplicationDataSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ApplicationDataSubs
	ApplicationproblemJSON400     *externalRef0.N400
	ApplicationproblemJSON401     *externalRef0.N401
	ApplicationproblemJSON403     *externalRef0.N403
	ApplicationproblemJSON404     *externalRef0.N404
	ApplicationproblemJSON411     *externalRef0.N411
	ApplicationproblemJSON413     *externalRef0.N413
	ApplicationproblemJSON415     *externalRef0.N415
	ApplicationproblemJSON429     *externalRef0.N429
	ApplicationproblemJSON500     *externalRef0.N500
	ApplicationproblemJSON503     *externalRef0.N503
	ApplicationproblemJSONDefault *externalRef0.Default
}

// Status returns HTTPResponse.Status
func (r ReplaceIndividualApplicationDataSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceIndividualApplicationDataSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReadBdtPolicyDataWithResponse request returning *ReadBdtPolicyDataResponse
func (c *ClientWithResponses) ReadBdtPolicyDataWithResponse(ctx context.Context, params *ReadBdtPolicyDataParams, reqEditors ...RequestEditorFn) (*ReadBdtPolicyDataResponse, error) {
	rsp, err := c.ReadBdtPolicyData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadBdtPolicyDataResponse(rsp)
}

// DeleteIndividualAppliedBdtPolicyDataWithResponse request returning *DeleteIndividualAppliedBdtPolicyDataResponse
func (c *ClientWithResponses) DeleteIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, reqEditors ...RequestEditorFn) (*DeleteIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.DeleteIndividualAppliedBdtPolicyData(ctx, bdtPolicyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualAppliedBdtPolicyDataResponse(rsp)
}

// UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualAppliedBdtPolicyDataResponse
func (c *ClientWithResponses) UpdateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.UpdateIndividualAppliedBdtPolicyDataWithBody(ctx, bdtPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualAppliedBdtPolicyDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, bdtPolicyId string, body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.UpdateIndividualAppliedBdtPolicyDataWithApplicationMergePatchPlusJSONBody(ctx, bdtPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualAppliedBdtPolicyDataResponse(rsp)
}

// CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse request with arbitrary body returning *CreateIndividualAppliedBdtPolicyDataResponse
func (c *ClientWithResponses) CreateIndividualAppliedBdtPolicyDataWithBodyWithResponse(ctx context.Context, bdtPolicyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.CreateIndividualAppliedBdtPolicyDataWithBody(ctx, bdtPolicyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAppliedBdtPolicyDataResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualAppliedBdtPolicyDataWithResponse(ctx context.Context, bdtPolicyId string, body CreateIndividualAppliedBdtPolicyDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualAppliedBdtPolicyDataResponse, error) {
	rsp, err := c.CreateIndividualAppliedBdtPolicyData(ctx, bdtPolicyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualAppliedBdtPolicyDataResponse(rsp)
}

// ReadInfluenceDataWithResponse request returning *ReadInfluenceDataResponse
func (c *ClientWithResponses) ReadInfluenceDataWithResponse(ctx context.Context, params *ReadInfluenceDataParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataResponse, error) {
	rsp, err := c.ReadInfluenceData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadInfluenceDataResponse(rsp)
}

// ReadInfluenceDataSubscriptionsWithResponse request returning *ReadInfluenceDataSubscriptionsResponse
func (c *ClientWithResponses) ReadInfluenceDataSubscriptionsWithResponse(ctx context.Context, params *ReadInfluenceDataSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadInfluenceDataSubscriptionsResponse, error) {
	rsp, err := c.ReadInfluenceDataSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadInfluenceDataSubscriptionsResponse(rsp)
}

// CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualInfluenceDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualInfluenceDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualInfluenceDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualInfluenceDataSubscriptionResponse(rsp)
}

// DeleteIndividualInfluenceDataSubscriptionWithResponse request returning *DeleteIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualInfluenceDataSubscription(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualInfluenceDataSubscriptionResponse(rsp)
}

// ReadIndividualInfluenceDataSubscriptionWithResponse request returning *ReadIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) ReadIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*ReadIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.ReadIndividualInfluenceDataSubscription(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualInfluenceDataSubscriptionResponse(rsp)
}

// ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualInfluenceDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualInfluenceDataSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualInfluenceDataSubscriptionWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualInfluenceDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualInfluenceDataSubscriptionWithResponse(ctx context.Context, subscriptionId string, body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualInfluenceDataSubscription(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualInfluenceDataSubscriptionResponse(rsp)
}

// DeleteIndividualInfluenceDataWithResponse request returning *DeleteIndividualInfluenceDataResponse
func (c *ClientWithResponses) DeleteIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, reqEditors ...RequestEditorFn) (*DeleteIndividualInfluenceDataResponse, error) {
	rsp, err := c.DeleteIndividualInfluenceData(ctx, influenceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualInfluenceDataResponse(rsp)
}

// UpdateIndividualInfluenceDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualInfluenceDataResponse
func (c *ClientWithResponses) UpdateIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error) {
	rsp, err := c.UpdateIndividualInfluenceDataWithBody(ctx, influenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualInfluenceDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, influenceId string, body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualInfluenceDataResponse, error) {
	rsp, err := c.UpdateIndividualInfluenceDataWithApplicationMergePatchPlusJSONBody(ctx, influenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualInfluenceDataResponse(rsp)
}

// CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceIndividualInfluenceDataResponse
func (c *ClientWithResponses) CreateOrReplaceIndividualInfluenceDataWithBodyWithResponse(ctx context.Context, influenceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualInfluenceDataWithBody(ctx, influenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualInfluenceDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceIndividualInfluenceDataWithResponse(ctx context.Context, influenceId string, body CreateOrReplaceIndividualInfluenceDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualInfluenceDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualInfluenceData(ctx, influenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualInfluenceDataResponse(rsp)
}

// ReadIPTVCongifurationDataWithResponse request returning *ReadIPTVCongifurationDataResponse
func (c *ClientWithResponses) ReadIPTVCongifurationDataWithResponse(ctx context.Context, params *ReadIPTVCongifurationDataParams, reqEditors ...RequestEditorFn) (*ReadIPTVCongifurationDataResponse, error) {
	rsp, err := c.ReadIPTVCongifurationData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIPTVCongifurationDataResponse(rsp)
}

// DeleteIndividualIPTVConfigurationDataWithResponse request returning *DeleteIndividualIPTVConfigurationDataResponse
func (c *ClientWithResponses) DeleteIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, reqEditors ...RequestEditorFn) (*DeleteIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.DeleteIndividualIPTVConfigurationData(ctx, configurationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualIPTVConfigurationDataResponse(rsp)
}

// PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with arbitrary body returning *PartialReplaceIndividualIPTVConfigurationDataResponse
func (c *ClientWithResponses) PartialReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.PartialReplaceIndividualIPTVConfigurationDataWithBody(ctx, configurationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

func (c *ClientWithResponses) PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, configurationId string, body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.PartialReplaceIndividualIPTVConfigurationDataWithApplicationMergePatchPlusJSONBody(ctx, configurationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

// CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceIndividualIPTVConfigurationDataResponse
func (c *ClientWithResponses) CreateOrReplaceIndividualIPTVConfigurationDataWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualIPTVConfigurationDataWithBody(ctx, configurationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceIndividualIPTVConfigurationDataWithResponse(ctx context.Context, configurationId string, body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualIPTVConfigurationData(ctx, configurationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse(rsp)
}

// ReadPFDDataWithResponse request returning *ReadPFDDataResponse
func (c *ClientWithResponses) ReadPFDDataWithResponse(ctx context.Context, params *ReadPFDDataParams, reqEditors ...RequestEditorFn) (*ReadPFDDataResponse, error) {
	rsp, err := c.ReadPFDData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPFDDataResponse(rsp)
}

// DeleteIndividualPFDDataWithResponse request returning *DeleteIndividualPFDDataResponse
func (c *ClientWithResponses) DeleteIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*DeleteIndividualPFDDataResponse, error) {
	rsp, err := c.DeleteIndividualPFDData(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualPFDDataResponse(rsp)
}

// ReadIndividualPFDDataWithResponse request returning *ReadIndividualPFDDataResponse
func (c *ClientWithResponses) ReadIndividualPFDDataWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ReadIndividualPFDDataResponse, error) {
	rsp, err := c.ReadIndividualPFDData(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualPFDDataResponse(rsp)
}

// CreateOrReplaceIndividualPFDDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceIndividualPFDDataResponse
func (c *ClientWithResponses) CreateOrReplaceIndividualPFDDataWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualPFDDataWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualPFDDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceIndividualPFDDataWithResponse(ctx context.Context, appId string, body CreateOrReplaceIndividualPFDDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceIndividualPFDDataResponse, error) {
	rsp, err := c.CreateOrReplaceIndividualPFDData(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceIndividualPFDDataResponse(rsp)
}

// ReadServiceParameterDataWithResponse request returning *ReadServiceParameterDataResponse
func (c *ClientWithResponses) ReadServiceParameterDataWithResponse(ctx context.Context, params *ReadServiceParameterDataParams, reqEditors ...RequestEditorFn) (*ReadServiceParameterDataResponse, error) {
	rsp, err := c.ReadServiceParameterData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServiceParameterDataResponse(rsp)
}

// DeleteIndividualServiceParameterDataWithResponse request returning *DeleteIndividualServiceParameterDataResponse
func (c *ClientWithResponses) DeleteIndividualServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, reqEditors ...RequestEditorFn) (*DeleteIndividualServiceParameterDataResponse, error) {
	rsp, err := c.DeleteIndividualServiceParameterData(ctx, serviceParamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualServiceParameterDataResponse(rsp)
}

// UpdateIndividualServiceParameterDataWithBodyWithResponse request with arbitrary body returning *UpdateIndividualServiceParameterDataResponse
func (c *ClientWithResponses) UpdateIndividualServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error) {
	rsp, err := c.UpdateIndividualServiceParameterDataWithBody(ctx, serviceParamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualServiceParameterDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBodyWithResponse(ctx context.Context, serviceParamId string, body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIndividualServiceParameterDataResponse, error) {
	rsp, err := c.UpdateIndividualServiceParameterDataWithApplicationMergePatchPlusJSONBody(ctx, serviceParamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIndividualServiceParameterDataResponse(rsp)
}

// CreateOrReplaceServiceParameterDataWithBodyWithResponse request with arbitrary body returning *CreateOrReplaceServiceParameterDataResponse
func (c *ClientWithResponses) CreateOrReplaceServiceParameterDataWithBodyWithResponse(ctx context.Context, serviceParamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error) {
	rsp, err := c.CreateOrReplaceServiceParameterDataWithBody(ctx, serviceParamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceServiceParameterDataResponse(rsp)
}

func (c *ClientWithResponses) CreateOrReplaceServiceParameterDataWithResponse(ctx context.Context, serviceParamId string, body CreateOrReplaceServiceParameterDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrReplaceServiceParameterDataResponse, error) {
	rsp, err := c.CreateOrReplaceServiceParameterData(ctx, serviceParamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrReplaceServiceParameterDataResponse(rsp)
}

// ReadApplicationDataChangeSubscriptionsWithResponse request returning *ReadApplicationDataChangeSubscriptionsResponse
func (c *ClientWithResponses) ReadApplicationDataChangeSubscriptionsWithResponse(ctx context.Context, params *ReadApplicationDataChangeSubscriptionsParams, reqEditors ...RequestEditorFn) (*ReadApplicationDataChangeSubscriptionsResponse, error) {
	rsp, err := c.ReadApplicationDataChangeSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadApplicationDataChangeSubscriptionsResponse(rsp)
}

// CreateIndividualApplicationDataSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) CreateIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualApplicationDataSubscriptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualApplicationDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, body CreateIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.CreateIndividualApplicationDataSubscription(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndividualApplicationDataSubscriptionResponse(rsp)
}

// DeleteIndividualApplicationDataSubscriptionWithResponse request returning *DeleteIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) DeleteIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*DeleteIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.DeleteIndividualApplicationDataSubscription(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIndividualApplicationDataSubscriptionResponse(rsp)
}

// ReadIndividualApplicationDataSubscriptionWithResponse request returning *ReadIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) ReadIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, reqEditors ...RequestEditorFn) (*ReadIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.ReadIndividualApplicationDataSubscription(ctx, subsId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadIndividualApplicationDataSubscriptionResponse(rsp)
}

// ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse request with arbitrary body returning *ReplaceIndividualApplicationDataSubscriptionResponse
func (c *ClientWithResponses) ReplaceIndividualApplicationDataSubscriptionWithBodyWithResponse(ctx context.Context, subsId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualApplicationDataSubscriptionWithBody(ctx, subsId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualApplicationDataSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) ReplaceIndividualApplicationDataSubscriptionWithResponse(ctx context.Context, subsId string, body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceIndividualApplicationDataSubscriptionResponse, error) {
	rsp, err := c.ReplaceIndividualApplicationDataSubscription(ctx, subsId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceIndividualApplicationDataSubscriptionResponse(rsp)
}

// ParseReadBdtPolicyDataResponse parses an HTTP response from a ReadBdtPolicyDataWithResponse call
func ParseReadBdtPolicyDataResponse(rsp *http.Response) (*ReadBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BdtPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualAppliedBdtPolicyDataResponse parses an HTTP response from a DeleteIndividualAppliedBdtPolicyDataWithResponse call
func ParseDeleteIndividualAppliedBdtPolicyDataResponse(rsp *http.Response) (*DeleteIndividualAppliedBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualAppliedBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualAppliedBdtPolicyDataResponse parses an HTTP response from a UpdateIndividualAppliedBdtPolicyDataWithResponse call
func ParseUpdateIndividualAppliedBdtPolicyDataResponse(rsp *http.Response) (*UpdateIndividualAppliedBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualAppliedBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BdtPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualAppliedBdtPolicyDataResponse parses an HTTP response from a CreateIndividualAppliedBdtPolicyDataWithResponse call
func ParseCreateIndividualAppliedBdtPolicyDataResponse(rsp *http.Response) (*CreateIndividualAppliedBdtPolicyDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualAppliedBdtPolicyDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BdtPolicyData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadInfluenceDataResponse parses an HTTP response from a ReadInfluenceDataWithResponse call
func ParseReadInfluenceDataResponse(rsp *http.Response) (*ReadInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadInfluenceDataSubscriptionsResponse parses an HTTP response from a ReadInfluenceDataSubscriptionsWithResponse call
func ParseReadInfluenceDataSubscriptionsResponse(rsp *http.Response) (*ReadInfluenceDataSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadInfluenceDataSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a CreateIndividualInfluenceDataSubscriptionWithResponse call
func ParseCreateIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a DeleteIndividualInfluenceDataSubscriptionWithResponse call
func ParseDeleteIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a ReadIndividualInfluenceDataSubscriptionWithResponse call
func ParseReadIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*ReadIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualInfluenceDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualInfluenceDataSubscriptionWithResponse call
func ParseReplaceIndividualInfluenceDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualInfluenceDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualInfluenceDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficInfluSub
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualInfluenceDataResponse parses an HTTP response from a DeleteIndividualInfluenceDataWithResponse call
func ParseDeleteIndividualInfluenceDataResponse(rsp *http.Response) (*DeleteIndividualInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualInfluenceDataResponse parses an HTTP response from a UpdateIndividualInfluenceDataWithResponse call
func ParseUpdateIndividualInfluenceDataResponse(rsp *http.Response) (*UpdateIndividualInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceIndividualInfluenceDataResponse parses an HTTP response from a CreateOrReplaceIndividualInfluenceDataWithResponse call
func ParseCreateOrReplaceIndividualInfluenceDataResponse(rsp *http.Response) (*CreateOrReplaceIndividualInfluenceDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceIndividualInfluenceDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TrafficInfluData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIPTVCongifurationDataResponse parses an HTTP response from a ReadIPTVCongifurationDataWithResponse call
func ParseReadIPTVCongifurationDataResponse(rsp *http.Response) (*ReadIPTVCongifurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIPTVCongifurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualIPTVConfigurationDataResponse parses an HTTP response from a DeleteIndividualIPTVConfigurationDataWithResponse call
func ParseDeleteIndividualIPTVConfigurationDataResponse(rsp *http.Response) (*DeleteIndividualIPTVConfigurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualIPTVConfigurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePartialReplaceIndividualIPTVConfigurationDataResponse parses an HTTP response from a PartialReplaceIndividualIPTVConfigurationDataWithResponse call
func ParsePartialReplaceIndividualIPTVConfigurationDataResponse(rsp *http.Response) (*PartialReplaceIndividualIPTVConfigurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartialReplaceIndividualIPTVConfigurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse parses an HTTP response from a CreateOrReplaceIndividualIPTVConfigurationDataWithResponse call
func ParseCreateOrReplaceIndividualIPTVConfigurationDataResponse(rsp *http.Response) (*CreateOrReplaceIndividualIPTVConfigurationDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceIndividualIPTVConfigurationDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IptvConfigData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadPFDDataResponse parses an HTTP response from a ReadPFDDataWithResponse call
func ParseReadPFDDataResponse(rsp *http.Response) (*ReadPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualPFDDataResponse parses an HTTP response from a DeleteIndividualPFDDataWithResponse call
func ParseDeleteIndividualPFDDataResponse(rsp *http.Response) (*DeleteIndividualPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualPFDDataResponse parses an HTTP response from a ReadIndividualPFDDataWithResponse call
func ParseReadIndividualPFDDataResponse(rsp *http.Response) (*ReadIndividualPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceIndividualPFDDataResponse parses an HTTP response from a CreateOrReplaceIndividualPFDDataWithResponse call
func ParseCreateOrReplaceIndividualPFDDataResponse(rsp *http.Response) (*CreateOrReplaceIndividualPFDDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceIndividualPFDDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PfdDataForAppExt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadServiceParameterDataResponse parses an HTTP response from a ReadServiceParameterDataWithResponse call
func ParseReadServiceParameterDataResponse(rsp *http.Response) (*ReadServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualServiceParameterDataResponse parses an HTTP response from a DeleteIndividualServiceParameterDataWithResponse call
func ParseDeleteIndividualServiceParameterDataResponse(rsp *http.Response) (*DeleteIndividualServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateIndividualServiceParameterDataResponse parses an HTTP response from a UpdateIndividualServiceParameterDataWithResponse call
func ParseUpdateIndividualServiceParameterDataResponse(rsp *http.Response) (*UpdateIndividualServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIndividualServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateOrReplaceServiceParameterDataResponse parses an HTTP response from a CreateOrReplaceServiceParameterDataWithResponse call
func ParseCreateOrReplaceServiceParameterDataResponse(rsp *http.Response) (*CreateOrReplaceServiceParameterDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrReplaceServiceParameterDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceParameterData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadApplicationDataChangeSubscriptionsResponse parses an HTTP response from a ReadApplicationDataChangeSubscriptionsWithResponse call
func ParseReadApplicationDataChangeSubscriptionsResponse(rsp *http.Response) (*ReadApplicationDataChangeSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadApplicationDataChangeSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateIndividualApplicationDataSubscriptionResponse parses an HTTP response from a CreateIndividualApplicationDataSubscriptionWithResponse call
func ParseCreateIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*CreateIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteIndividualApplicationDataSubscriptionResponse parses an HTTP response from a DeleteIndividualApplicationDataSubscriptionWithResponse call
func ParseDeleteIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*DeleteIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReadIndividualApplicationDataSubscriptionResponse parses an HTTP response from a ReadIndividualApplicationDataSubscriptionWithResponse call
func ParseReadIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*ReadIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case rsp.StatusCode == 406:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest externalRef0.N414
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceIndividualApplicationDataSubscriptionResponse parses an HTTP response from a ReplaceIndividualApplicationDataSubscriptionWithResponse call
func ParseReplaceIndividualApplicationDataSubscriptionResponse(rsp *http.Response) (*ReplaceIndividualApplicationDataSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceIndividualApplicationDataSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationDataSubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 204:
		break // No content-type

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest externalRef0.N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest externalRef0.N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest externalRef0.N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest externalRef0.N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 411:
		var dest externalRef0.N411
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON411 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest externalRef0.N413
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest externalRef0.N415
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest externalRef0.N429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest externalRef0.N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest externalRef0.N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest externalRef0.Default
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve applied BDT Policy Data
	// (GET /application-data/bdtPolicyData)
	ReadBdtPolicyData(c *gin.Context, params ReadBdtPolicyDataParams)
	// Delete an individual Applied BDT Policy Data resource
	// (DELETE /application-data/bdtPolicyData/{bdtPolicyId})
	DeleteIndividualAppliedBdtPolicyData(c *gin.Context, bdtPolicyId string)
	// Modify part of the properties of an individual Applied BDT Policy Data resource
	// (PATCH /application-data/bdtPolicyData/{bdtPolicyId})
	UpdateIndividualAppliedBdtPolicyData(c *gin.Context, bdtPolicyId string)
	// Create an individual applied BDT Policy Data resource
	// (PUT /application-data/bdtPolicyData/{bdtPolicyId})
	CreateIndividualAppliedBdtPolicyData(c *gin.Context, bdtPolicyId string)
	// Retrieve Traffic Influence Data
	// (GET /application-data/influenceData)
	ReadInfluenceData(c *gin.Context, params ReadInfluenceDataParams)
	// Read Influence Data Subscriptions
	// (GET /application-data/influenceData/subs-to-notify)
	ReadInfluenceDataSubscriptions(c *gin.Context, params ReadInfluenceDataSubscriptionsParams)
	// Create a new Individual Influence Data Subscription resource
	// (POST /application-data/influenceData/subs-to-notify)
	CreateIndividualInfluenceDataSubscription(c *gin.Context)
	// Delete an individual Influence Data Subscription resource
	// (DELETE /application-data/influenceData/subs-to-notify/{subscriptionId})
	DeleteIndividualInfluenceDataSubscription(c *gin.Context, subscriptionId string)
	// Get an existing individual Influence Data Subscription resource
	// (GET /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReadIndividualInfluenceDataSubscription(c *gin.Context, subscriptionId string)
	// Modify an existing individual Influence Data Subscription resource
	// (PUT /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReplaceIndividualInfluenceDataSubscription(c *gin.Context, subscriptionId string)
	// Delete an individual Influence Data resource
	// (DELETE /application-data/influenceData/{influenceId})
	DeleteIndividualInfluenceData(c *gin.Context, influenceId string)
	// Modify part of the properties of an individual Influence Data resource
	// (PATCH /application-data/influenceData/{influenceId})
	UpdateIndividualInfluenceData(c *gin.Context, influenceId string)
	// Create or update an individual Influence Data resource
	// (PUT /application-data/influenceData/{influenceId})
	CreateOrReplaceIndividualInfluenceData(c *gin.Context, influenceId string)
	// Retrieve IPTV configuration Data
	// (GET /application-data/iptvConfigData)
	ReadIPTVCongifurationData(c *gin.Context, params ReadIPTVCongifurationDataParams)
	// Delete an individual IPTV configuration resource
	// (DELETE /application-data/iptvConfigData/{configurationId})
	DeleteIndividualIPTVConfigurationData(c *gin.Context, configurationId string)
	// Partial update an individual IPTV configuration resource
	// (PATCH /application-data/iptvConfigData/{configurationId})
	PartialReplaceIndividualIPTVConfigurationData(c *gin.Context, configurationId string)
	// Create or update an individual IPTV configuration resource
	// (PUT /application-data/iptvConfigData/{configurationId})
	CreateOrReplaceIndividualIPTVConfigurationData(c *gin.Context, configurationId string)
	// Retrieve PFDs for application identifier(s)
	// (GET /application-data/pfds)
	ReadPFDData(c *gin.Context, params ReadPFDDataParams)
	// Delete the corresponding PFDs of the specified application identifier
	// (DELETE /application-data/pfds/{appId})
	DeleteIndividualPFDData(c *gin.Context, appId string)
	// Retrieve the corresponding PFDs of the specified application identifier
	// (GET /application-data/pfds/{appId})
	ReadIndividualPFDData(c *gin.Context, appId string)
	// Create or update the corresponding PFDs for the specified application identifier
	// (PUT /application-data/pfds/{appId})
	CreateOrReplaceIndividualPFDData(c *gin.Context, appId string)
	// Retrieve Service Parameter Data
	// (GET /application-data/serviceParamData)
	ReadServiceParameterData(c *gin.Context, params ReadServiceParameterDataParams)
	// Delete an individual Service Parameter Data resource
	// (DELETE /application-data/serviceParamData/{serviceParamId})
	DeleteIndividualServiceParameterData(c *gin.Context, serviceParamId string)
	// Modify part of the properties of an individual Service Parameter Data resource
	// (PATCH /application-data/serviceParamData/{serviceParamId})
	UpdateIndividualServiceParameterData(c *gin.Context, serviceParamId string)
	// Create or update an individual Service Parameter Data resource
	// (PUT /application-data/serviceParamData/{serviceParamId})
	CreateOrReplaceServiceParameterData(c *gin.Context, serviceParamId string)
	// Read Application Data change Subscriptions
	// (GET /application-data/subs-to-notify)
	ReadApplicationDataChangeSubscriptions(c *gin.Context, params ReadApplicationDataChangeSubscriptionsParams)
	// Create a subscription to receive notification of application data changes
	// (POST /application-data/subs-to-notify)
	CreateIndividualApplicationDataSubscription(c *gin.Context)
	// Delete the individual Application Data subscription
	// (DELETE /application-data/subs-to-notify/{subsId})
	DeleteIndividualApplicationDataSubscription(c *gin.Context, subsId string)
	// Get an existing individual Application Data Subscription resource
	// (GET /application-data/subs-to-notify/{subsId})
	ReadIndividualApplicationDataSubscription(c *gin.Context, subsId string)
	// Modify a subscription to receive notification of application data changes
	// (PUT /application-data/subs-to-notify/{subsId})
	ReplaceIndividualApplicationDataSubscription(c *gin.Context, subsId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ReadBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) ReadBdtPolicyData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadBdtPolicyDataParams

	// ------------- Optional query parameter "bdt-policy-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "bdt-policy-ids", c.Request.URL.Query(), &params.BdtPolicyIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdt-policy-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "internal-group-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-group-ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadBdtPolicyData(c, params)
}

// DeleteIndividualAppliedBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualAppliedBdtPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameter("simple", false, "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualAppliedBdtPolicyData(c, bdtPolicyId)
}

// UpdateIndividualAppliedBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualAppliedBdtPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameter("simple", false, "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualAppliedBdtPolicyData(c, bdtPolicyId)
}

// CreateIndividualAppliedBdtPolicyData operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualAppliedBdtPolicyData(c *gin.Context) {

	var err error

	// ------------- Path parameter "bdtPolicyId" -------------
	var bdtPolicyId string

	err = runtime.BindStyledParameter("simple", false, "bdtPolicyId", c.Param("bdtPolicyId"), &bdtPolicyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bdtPolicyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualAppliedBdtPolicyData(c, bdtPolicyId)
}

// ReadInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) ReadInfluenceData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadInfluenceDataParams

	// ------------- Optional query parameter "influence-Ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "influence-Ids", c.Request.URL.Query(), &params.InfluenceIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influence-Ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnns" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnns", c.Request.URL.Query(), &params.Dnns)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnns: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssais" -------------

	if paramValue := c.Query("snssais"); paramValue != "" {

		var value []externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssais' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssais = &value

	}

	// ------------- Optional query parameter "internal-Group-Ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-Group-Ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-Group-Ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadInfluenceData(c, params)
}

// ReadInfluenceDataSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ReadInfluenceDataSubscriptions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadInfluenceDataSubscriptionsParams

	// ------------- Optional query parameter "dnn" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnn", c.Request.URL.Query(), &params.Dnn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnn: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssai" -------------

	if paramValue := c.Query("snssai"); paramValue != "" {

		var value externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssai' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssai = &value

	}

	// ------------- Optional query parameter "internal-Group-Id" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-Group-Id", c.Request.URL.Query(), &params.InternalGroupId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-Group-Id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supi" -------------

	err = runtime.BindQueryParameter("form", true, false, "supi", c.Request.URL.Query(), &params.Supi)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supi: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadInfluenceDataSubscriptions(c, params)
}

// CreateIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualInfluenceDataSubscription(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualInfluenceDataSubscription(c)
}

// DeleteIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualInfluenceDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualInfluenceDataSubscription(c, subscriptionId)
}

// ReadIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualInfluenceDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualInfluenceDataSubscription(c, subscriptionId)
}

// ReplaceIndividualInfluenceDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualInfluenceDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", c.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subscriptionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualInfluenceDataSubscription(c, subscriptionId)
}

// DeleteIndividualInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualInfluenceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "influenceId" -------------
	var influenceId string

	err = runtime.BindStyledParameter("simple", false, "influenceId", c.Param("influenceId"), &influenceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influenceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualInfluenceData(c, influenceId)
}

// UpdateIndividualInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualInfluenceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "influenceId" -------------
	var influenceId string

	err = runtime.BindStyledParameter("simple", false, "influenceId", c.Param("influenceId"), &influenceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influenceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualInfluenceData(c, influenceId)
}

// CreateOrReplaceIndividualInfluenceData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceIndividualInfluenceData(c *gin.Context) {

	var err error

	// ------------- Path parameter "influenceId" -------------
	var influenceId string

	err = runtime.BindStyledParameter("simple", false, "influenceId", c.Param("influenceId"), &influenceId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter influenceId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceIndividualInfluenceData(c, influenceId)
}

// ReadIPTVCongifurationData operation middleware
func (siw *ServerInterfaceWrapper) ReadIPTVCongifurationData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadIPTVCongifurationDataParams

	// ------------- Optional query parameter "config-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "config-ids", c.Request.URL.Query(), &params.ConfigIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter config-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnns" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnns", c.Request.URL.Query(), &params.Dnns)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnns: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssais" -------------

	if paramValue := c.Query("snssais"); paramValue != "" {

		var value []externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssais' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssais = &value

	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "inter-group-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "inter-group-ids", c.Request.URL.Query(), &params.InterGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter inter-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIPTVCongifurationData(c, params)
}

// DeleteIndividualIPTVConfigurationData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualIPTVConfigurationData(c *gin.Context) {

	var err error

	// ------------- Path parameter "configurationId" -------------
	var configurationId string

	err = runtime.BindStyledParameter("simple", false, "configurationId", c.Param("configurationId"), &configurationId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter configurationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualIPTVConfigurationData(c, configurationId)
}

// PartialReplaceIndividualIPTVConfigurationData operation middleware
func (siw *ServerInterfaceWrapper) PartialReplaceIndividualIPTVConfigurationData(c *gin.Context) {

	var err error

	// ------------- Path parameter "configurationId" -------------
	var configurationId string

	err = runtime.BindStyledParameter("simple", false, "configurationId", c.Param("configurationId"), &configurationId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter configurationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PartialReplaceIndividualIPTVConfigurationData(c, configurationId)
}

// CreateOrReplaceIndividualIPTVConfigurationData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceIndividualIPTVConfigurationData(c *gin.Context) {

	var err error

	// ------------- Path parameter "configurationId" -------------
	var configurationId string

	err = runtime.BindStyledParameter("simple", false, "configurationId", c.Param("configurationId"), &configurationId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter configurationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceIndividualIPTVConfigurationData(c, configurationId)
}

// ReadPFDData operation middleware
func (siw *ServerInterfaceWrapper) ReadPFDData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadPFDDataParams

	// ------------- Optional query parameter "appId" -------------

	err = runtime.BindQueryParameter("form", true, false, "appId", c.Request.URL.Query(), &params.AppId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadPFDData(c, params)
}

// DeleteIndividualPFDData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualPFDData(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualPFDData(c, appId)
}

// ReadIndividualPFDData operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualPFDData(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualPFDData(c, appId)
}

// CreateOrReplaceIndividualPFDData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceIndividualPFDData(c *gin.Context) {

	var err error

	// ------------- Path parameter "appId" -------------
	var appId string

	err = runtime.BindStyledParameter("simple", false, "appId", c.Param("appId"), &appId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceIndividualPFDData(c, appId)
}

// ReadServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) ReadServiceParameterData(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadServiceParameterDataParams

	// ------------- Optional query parameter "service-param-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "service-param-ids", c.Request.URL.Query(), &params.ServiceParamIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter service-param-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "dnns" -------------

	err = runtime.BindQueryParameter("form", true, false, "dnns", c.Request.URL.Query(), &params.Dnns)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dnns: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "snssais" -------------

	if paramValue := c.Query("snssais"); paramValue != "" {

		var value []externalRef0.Snssai
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'snssais' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.Snssais = &value

	}

	// ------------- Optional query parameter "internal-group-ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "internal-group-ids", c.Request.URL.Query(), &params.InternalGroupIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter internal-group-ids: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supis" -------------

	err = runtime.BindQueryParameter("form", true, false, "supis", c.Request.URL.Query(), &params.Supis)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supis: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-ipv4s" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-ipv4s", c.Request.URL.Query(), &params.UeIpv4s)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-ipv4s: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-ipv6s" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-ipv6s", c.Request.URL.Query(), &params.UeIpv6s)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-ipv6s: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ue-macs" -------------

	err = runtime.BindQueryParameter("form", true, false, "ue-macs", c.Request.URL.Query(), &params.UeMacs)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ue-macs: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supp-feat" -------------

	err = runtime.BindQueryParameter("form", true, false, "supp-feat", c.Request.URL.Query(), &params.SuppFeat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supp-feat: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadServiceParameterData(c, params)
}

// DeleteIndividualServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualServiceParameterData(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceParamId" -------------
	var serviceParamId string

	err = runtime.BindStyledParameter("simple", false, "serviceParamId", c.Param("serviceParamId"), &serviceParamId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceParamId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualServiceParameterData(c, serviceParamId)
}

// UpdateIndividualServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) UpdateIndividualServiceParameterData(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceParamId" -------------
	var serviceParamId string

	err = runtime.BindStyledParameter("simple", false, "serviceParamId", c.Param("serviceParamId"), &serviceParamId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceParamId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIndividualServiceParameterData(c, serviceParamId)
}

// CreateOrReplaceServiceParameterData operation middleware
func (siw *ServerInterfaceWrapper) CreateOrReplaceServiceParameterData(c *gin.Context) {

	var err error

	// ------------- Path parameter "serviceParamId" -------------
	var serviceParamId string

	err = runtime.BindStyledParameter("simple", false, "serviceParamId", c.Param("serviceParamId"), &serviceParamId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter serviceParamId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrReplaceServiceParameterData(c, serviceParamId)
}

// ReadApplicationDataChangeSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ReadApplicationDataChangeSubscriptions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadApplicationDataChangeSubscriptionsParams

	// ------------- Optional query parameter "data-filter" -------------

	if paramValue := c.Query("data-filter"); paramValue != "" {

		var value DataFilter
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Error unmarshaling parameter 'data-filter' as JSON: %w", err), http.StatusBadRequest)
			return
		}

		params.DataFilter = &value

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadApplicationDataChangeSubscriptions(c, params)
}

// CreateIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateIndividualApplicationDataSubscription(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndividualApplicationDataSubscription(c)
}

// DeleteIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndividualApplicationDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndividualApplicationDataSubscription(c, subsId)
}

// ReadIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReadIndividualApplicationDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReadIndividualApplicationDataSubscription(c, subsId)
}

// ReplaceIndividualApplicationDataSubscription operation middleware
func (siw *ServerInterfaceWrapper) ReplaceIndividualApplicationDataSubscription(c *gin.Context) {

	var err error

	// ------------- Path parameter "subsId" -------------
	var subsId string

	err = runtime.BindStyledParameter("simple", false, "subsId", c.Param("subsId"), &subsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subsId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReplaceIndividualApplicationDataSubscription(c, subsId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/application-data/bdtPolicyData", wrapper.ReadBdtPolicyData)
	router.DELETE(options.BaseURL+"/application-data/bdtPolicyData/:bdtPolicyId", wrapper.DeleteIndividualAppliedBdtPolicyData)
	router.PATCH(options.BaseURL+"/application-data/bdtPolicyData/:bdtPolicyId", wrapper.UpdateIndividualAppliedBdtPolicyData)
	router.PUT(options.BaseURL+"/application-data/bdtPolicyData/:bdtPolicyId", wrapper.CreateIndividualAppliedBdtPolicyData)
	router.GET(options.BaseURL+"/application-data/influenceData", wrapper.ReadInfluenceData)
	router.GET(options.BaseURL+"/application-data/influenceData/subs-to-notify", wrapper.ReadInfluenceDataSubscriptions)
	router.POST(options.BaseURL+"/application-data/influenceData/subs-to-notify", wrapper.CreateIndividualInfluenceDataSubscription)
	router.DELETE(options.BaseURL+"/application-data/influenceData/subs-to-notify/:subscriptionId", wrapper.DeleteIndividualInfluenceDataSubscription)
	router.GET(options.BaseURL+"/application-data/influenceData/subs-to-notify/:subscriptionId", wrapper.ReadIndividualInfluenceDataSubscription)
	router.PUT(options.BaseURL+"/application-data/influenceData/subs-to-notify/:subscriptionId", wrapper.ReplaceIndividualInfluenceDataSubscription)
	router.DELETE(options.BaseURL+"/application-data/influenceData/:influenceId", wrapper.DeleteIndividualInfluenceData)
	router.PATCH(options.BaseURL+"/application-data/influenceData/:influenceId", wrapper.UpdateIndividualInfluenceData)
	router.PUT(options.BaseURL+"/application-data/influenceData/:influenceId", wrapper.CreateOrReplaceIndividualInfluenceData)
	router.GET(options.BaseURL+"/application-data/iptvConfigData", wrapper.ReadIPTVCongifurationData)
	router.DELETE(options.BaseURL+"/application-data/iptvConfigData/:configurationId", wrapper.DeleteIndividualIPTVConfigurationData)
	router.PATCH(options.BaseURL+"/application-data/iptvConfigData/:configurationId", wrapper.PartialReplaceIndividualIPTVConfigurationData)
	router.PUT(options.BaseURL+"/application-data/iptvConfigData/:configurationId", wrapper.CreateOrReplaceIndividualIPTVConfigurationData)
	router.GET(options.BaseURL+"/application-data/pfds", wrapper.ReadPFDData)
	router.DELETE(options.BaseURL+"/application-data/pfds/:appId", wrapper.DeleteIndividualPFDData)
	router.GET(options.BaseURL+"/application-data/pfds/:appId", wrapper.ReadIndividualPFDData)
	router.PUT(options.BaseURL+"/application-data/pfds/:appId", wrapper.CreateOrReplaceIndividualPFDData)
	router.GET(options.BaseURL+"/application-data/serviceParamData", wrapper.ReadServiceParameterData)
	router.DELETE(options.BaseURL+"/application-data/serviceParamData/:serviceParamId", wrapper.DeleteIndividualServiceParameterData)
	router.PATCH(options.BaseURL+"/application-data/serviceParamData/:serviceParamId", wrapper.UpdateIndividualServiceParameterData)
	router.PUT(options.BaseURL+"/application-data/serviceParamData/:serviceParamId", wrapper.CreateOrReplaceServiceParameterData)
	router.GET(options.BaseURL+"/application-data/subs-to-notify", wrapper.ReadApplicationDataChangeSubscriptions)
	router.POST(options.BaseURL+"/application-data/subs-to-notify", wrapper.CreateIndividualApplicationDataSubscription)
	router.DELETE(options.BaseURL+"/application-data/subs-to-notify/:subsId", wrapper.DeleteIndividualApplicationDataSubscription)
	router.GET(options.BaseURL+"/application-data/subs-to-notify/:subsId", wrapper.ReadIndividualApplicationDataSubscription)
	router.PUT(options.BaseURL+"/application-data/subs-to-notify/:subsId", wrapper.ReplaceIndividualApplicationDataSubscription)
}

type ReadBdtPolicyDataRequestObject struct {
	Params ReadBdtPolicyDataParams
}

type ReadBdtPolicyDataResponseObject interface {
	VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error
}

type ReadBdtPolicyData200JSONResponse []BdtPolicyData

func (response ReadBdtPolicyData200JSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData406Response externalRef0.N406Response

func (response ReadBdtPolicyData406Response) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadBdtPolicyData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData414ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitReadBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualAppliedBdtPolicyDataRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
}

type DeleteIndividualAppliedBdtPolicyDataResponseObject interface {
	VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualAppliedBdtPolicyData204Response struct {
}

func (response DeleteIndividualAppliedBdtPolicyData204Response) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualAppliedBdtPolicyDataRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
	Body        *UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualAppliedBdtPolicyDataResponseObject interface {
	VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualAppliedBdtPolicyData200JSONResponse BdtPolicyData

func (response UpdateIndividualAppliedBdtPolicyData200JSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData204Response struct {
}

func (response UpdateIndividualAppliedBdtPolicyData204Response) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualAppliedBdtPolicyDataRequestObject struct {
	BdtPolicyId string `json:"bdtPolicyId"`
	Body        *CreateIndividualAppliedBdtPolicyDataJSONRequestBody
}

type CreateIndividualAppliedBdtPolicyDataResponseObject interface {
	VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error
}

type CreateIndividualAppliedBdtPolicyData201ResponseHeaders struct {
	Location string
}

type CreateIndividualAppliedBdtPolicyData201JSONResponse struct {
	Body    BdtPolicyData
	Headers CreateIndividualAppliedBdtPolicyData201ResponseHeaders
}

func (response CreateIndividualAppliedBdtPolicyData201JSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData400ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData401ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData403ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData404ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData411ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData413ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData414ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData415ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData429ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData500ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualAppliedBdtPolicyData503ApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualAppliedBdtPolicyDatadefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualAppliedBdtPolicyDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadInfluenceDataRequestObject struct {
	Params ReadInfluenceDataParams
}

type ReadInfluenceDataResponseObject interface {
	VisitReadInfluenceDataResponse(w http.ResponseWriter) error
}

type ReadInfluenceData200JSONResponse []TrafficInfluData

func (response ReadInfluenceData200JSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData400ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData401ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData403ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData404ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData406Response externalRef0.N406Response

func (response ReadInfluenceData406Response) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadInfluenceData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData414ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData429ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData500ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceData503ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitReadInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadInfluenceDataSubscriptionsRequestObject struct {
	Params ReadInfluenceDataSubscriptionsParams
}

type ReadInfluenceDataSubscriptionsResponseObject interface {
	VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error
}

type ReadInfluenceDataSubscriptions200JSONResponse []TrafficInfluSub

func (response ReadInfluenceDataSubscriptions200JSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions400ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions401ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions403ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions404ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions406Response externalRef0.N406Response

func (response ReadInfluenceDataSubscriptions406Response) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadInfluenceDataSubscriptions414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions414ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions429ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions500ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptions503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadInfluenceDataSubscriptions503ApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadInfluenceDataSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadInfluenceDataSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitReadInfluenceDataSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualInfluenceDataSubscriptionRequestObject struct {
	Body *CreateIndividualInfluenceDataSubscriptionJSONRequestBody
}

type CreateIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualInfluenceDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualInfluenceDataSubscription201JSONResponse struct {
	Body    TrafficInfluSub
	Headers CreateIndividualInfluenceDataSubscription201ResponseHeaders
}

func (response CreateIndividualInfluenceDataSubscription201JSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualInfluenceDataSubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type DeleteIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualInfluenceDataSubscription204Response struct {
}

func (response DeleteIndividualInfluenceDataSubscription204Response) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualInfluenceDataSubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
}

type ReadIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReadIndividualInfluenceDataSubscription200JSONResponse TrafficInfluSub

func (response ReadIndividualInfluenceDataSubscription200JSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription406Response externalRef0.N406Response

func (response ReadIndividualInfluenceDataSubscription406Response) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualInfluenceDataSubscription414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription414ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReadIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualInfluenceDataSubscriptionRequestObject struct {
	SubscriptionId string `json:"subscriptionId"`
	Body           *ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody
}

type ReplaceIndividualInfluenceDataSubscriptionResponseObject interface {
	VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualInfluenceDataSubscription200JSONResponse TrafficInfluSub

func (response ReplaceIndividualInfluenceDataSubscription200JSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription204Response struct {
}

func (response ReplaceIndividualInfluenceDataSubscription204Response) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualInfluenceDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualInfluenceDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualInfluenceDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualInfluenceDataRequestObject struct {
	InfluenceId string `json:"influenceId"`
}

type DeleteIndividualInfluenceDataResponseObject interface {
	VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualInfluenceData204Response struct {
}

func (response DeleteIndividualInfluenceData204Response) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualInfluenceData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualInfluenceDataRequestObject struct {
	InfluenceId string `json:"influenceId"`
	Body        *UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualInfluenceDataResponseObject interface {
	VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualInfluenceData200JSONResponse TrafficInfluData

func (response UpdateIndividualInfluenceData200JSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData204Response struct {
}

func (response UpdateIndividualInfluenceData204Response) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualInfluenceData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualInfluenceDataRequestObject struct {
	InfluenceId string `json:"influenceId"`
	Body        *CreateOrReplaceIndividualInfluenceDataJSONRequestBody
}

type CreateOrReplaceIndividualInfluenceDataResponseObject interface {
	VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceIndividualInfluenceData200JSONResponse TrafficInfluData

func (response CreateOrReplaceIndividualInfluenceData200JSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceIndividualInfluenceData201JSONResponse struct {
	Body    TrafficInfluData
	Headers CreateOrReplaceIndividualInfluenceData201ResponseHeaders
}

func (response CreateOrReplaceIndividualInfluenceData201JSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualInfluenceData204Response struct {
}

func (response CreateOrReplaceIndividualInfluenceData204Response) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceIndividualInfluenceData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualInfluenceData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceIndividualInfluenceDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualInfluenceDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIPTVCongifurationDataRequestObject struct {
	Params ReadIPTVCongifurationDataParams
}

type ReadIPTVCongifurationDataResponseObject interface {
	VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error
}

type ReadIPTVCongifurationData200JSONResponse []IptvConfigData

func (response ReadIPTVCongifurationData200JSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData400ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData401ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData403ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData404ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData406Response externalRef0.N406Response

func (response ReadIPTVCongifurationData406Response) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIPTVCongifurationData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData414ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData429ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData500ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIPTVCongifurationData503ApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadIPTVCongifurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIPTVCongifurationDatadefaultApplicationProblemPlusJSONResponse) VisitReadIPTVCongifurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualIPTVConfigurationDataRequestObject struct {
	ConfigurationId string `json:"configurationId"`
}

type DeleteIndividualIPTVConfigurationDataResponseObject interface {
	VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualIPTVConfigurationData204Response struct {
}

func (response DeleteIndividualIPTVConfigurationData204Response) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PartialReplaceIndividualIPTVConfigurationDataRequestObject struct {
	ConfigurationId string `json:"configurationId"`
	Body            *PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody
}

type PartialReplaceIndividualIPTVConfigurationDataResponseObject interface {
	VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error
}

type PartialReplaceIndividualIPTVConfigurationData200JSONResponse IptvConfigData

func (response PartialReplaceIndividualIPTVConfigurationData200JSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData204Response struct {
}

func (response PartialReplaceIndividualIPTVConfigurationData204Response) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PartialReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response PartialReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PartialReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response PartialReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse) VisitPartialReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualIPTVConfigurationDataRequestObject struct {
	ConfigurationId string `json:"configurationId"`
	Body            *CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody
}

type CreateOrReplaceIndividualIPTVConfigurationDataResponseObject interface {
	VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceIndividualIPTVConfigurationData200JSONResponse IptvConfigData

func (response CreateOrReplaceIndividualIPTVConfigurationData200JSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceIndividualIPTVConfigurationData201JSONResponse struct {
	Body    IptvConfigData
	Headers CreateOrReplaceIndividualIPTVConfigurationData201ResponseHeaders
}

func (response CreateOrReplaceIndividualIPTVConfigurationData201JSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualIPTVConfigurationData204Response struct {
}

func (response CreateOrReplaceIndividualIPTVConfigurationData204Response) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualIPTVConfigurationData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceIndividualIPTVConfigurationDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadPFDDataRequestObject struct {
	Params ReadPFDDataParams
}

type ReadPFDDataResponseObject interface {
	VisitReadPFDDataResponse(w http.ResponseWriter) error
}

type ReadPFDData200JSONResponse []PfdDataForAppExt

func (response ReadPFDData200JSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData400ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData401ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData403ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData404ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData406Response externalRef0.N406Response

func (response ReadPFDData406Response) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadPFDData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData414ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData429ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData500ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadPFDData503ApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadPFDDatadefaultApplicationProblemPlusJSONResponse) VisitReadPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualPFDDataRequestObject struct {
	AppId string `json:"appId"`
}

type DeleteIndividualPFDDataResponseObject interface {
	VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualPFDData204Response struct {
}

func (response DeleteIndividualPFDData204Response) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualPFDData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualPFDDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualPFDDataRequestObject struct {
	AppId string `json:"appId"`
}

type ReadIndividualPFDDataResponseObject interface {
	VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error
}

type ReadIndividualPFDData200JSONResponse PfdDataForAppExt

func (response ReadIndividualPFDData200JSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData400ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData401ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData403ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData404ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDData406Response externalRef0.N406Response

func (response ReadIndividualPFDData406Response) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData429ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData500ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualPFDData503ApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualPFDDatadefaultApplicationProblemPlusJSONResponse) VisitReadIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualPFDDataRequestObject struct {
	AppId string `json:"appId"`
	Body  *CreateOrReplaceIndividualPFDDataJSONRequestBody
}

type CreateOrReplaceIndividualPFDDataResponseObject interface {
	VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceIndividualPFDData200JSONResponse PfdDataForAppExt

func (response CreateOrReplaceIndividualPFDData200JSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceIndividualPFDData201JSONResponse struct {
	Body    PfdDataForAppExt
	Headers CreateOrReplaceIndividualPFDData201ResponseHeaders
}

func (response CreateOrReplaceIndividualPFDData201JSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceIndividualPFDData204Response struct {
}

func (response CreateOrReplaceIndividualPFDData204Response) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceIndividualPFDData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceIndividualPFDData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceIndividualPFDDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceIndividualPFDDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceIndividualPFDDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadServiceParameterDataRequestObject struct {
	Params ReadServiceParameterDataParams
}

type ReadServiceParameterDataResponseObject interface {
	VisitReadServiceParameterDataResponse(w http.ResponseWriter) error
}

type ReadServiceParameterData200JSONResponse []ServiceParameterData

func (response ReadServiceParameterData200JSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData400ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData401ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData403ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData404ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData406Response externalRef0.N406Response

func (response ReadServiceParameterData406Response) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadServiceParameterData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData414ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData429ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData500ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadServiceParameterData503ApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitReadServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualServiceParameterDataRequestObject struct {
	ServiceParamId string `json:"serviceParamId"`
}

type DeleteIndividualServiceParameterDataResponseObject interface {
	VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error
}

type DeleteIndividualServiceParameterData204Response struct {
}

func (response DeleteIndividualServiceParameterData204Response) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualServiceParameterData503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIndividualServiceParameterDataRequestObject struct {
	ServiceParamId string `json:"serviceParamId"`
	Body           *UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody
}

type UpdateIndividualServiceParameterDataResponseObject interface {
	VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error
}

type UpdateIndividualServiceParameterData200JSONResponse ServiceParameterData

func (response UpdateIndividualServiceParameterData200JSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData204Response struct {
}

func (response UpdateIndividualServiceParameterData204Response) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateIndividualServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData400ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData401ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData403ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData404ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData411ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData413ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData415ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData429ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData500ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response UpdateIndividualServiceParameterData503ApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response UpdateIndividualServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitUpdateIndividualServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceServiceParameterDataRequestObject struct {
	ServiceParamId string `json:"serviceParamId"`
	Body           *CreateOrReplaceServiceParameterDataJSONRequestBody
}

type CreateOrReplaceServiceParameterDataResponseObject interface {
	VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error
}

type CreateOrReplaceServiceParameterData200JSONResponse ServiceParameterData

func (response CreateOrReplaceServiceParameterData200JSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData201ResponseHeaders struct {
	Location string
}

type CreateOrReplaceServiceParameterData201JSONResponse struct {
	Body    ServiceParameterData
	Headers CreateOrReplaceServiceParameterData201ResponseHeaders
}

func (response CreateOrReplaceServiceParameterData201JSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateOrReplaceServiceParameterData204Response struct {
}

func (response CreateOrReplaceServiceParameterData204Response) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type CreateOrReplaceServiceParameterData400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData400ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData401ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData403ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData404ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData411ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData413ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData414ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData415ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData429ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData500ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterData503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateOrReplaceServiceParameterData503ApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrReplaceServiceParameterDatadefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateOrReplaceServiceParameterDatadefaultApplicationProblemPlusJSONResponse) VisitCreateOrReplaceServiceParameterDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadApplicationDataChangeSubscriptionsRequestObject struct {
	Params ReadApplicationDataChangeSubscriptionsParams
}

type ReadApplicationDataChangeSubscriptionsResponseObject interface {
	VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error
}

type ReadApplicationDataChangeSubscriptions200JSONResponse []ApplicationDataSubs

func (response ReadApplicationDataChangeSubscriptions200JSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions400ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions401ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions403ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions404ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions406Response externalRef0.N406Response

func (response ReadApplicationDataChangeSubscriptions406Response) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadApplicationDataChangeSubscriptions414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions414ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions429ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions500ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptions503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadApplicationDataChangeSubscriptions503ApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadApplicationDataChangeSubscriptionsdefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadApplicationDataChangeSubscriptionsdefaultApplicationProblemPlusJSONResponse) VisitReadApplicationDataChangeSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualApplicationDataSubscriptionRequestObject struct {
	Body *CreateIndividualApplicationDataSubscriptionJSONRequestBody
}

type CreateIndividualApplicationDataSubscriptionResponseObject interface {
	VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type CreateIndividualApplicationDataSubscription201ResponseHeaders struct {
	Location string
}

type CreateIndividualApplicationDataSubscription201JSONResponse struct {
	Body    ApplicationDataSubs
	Headers CreateIndividualApplicationDataSubscription201ResponseHeaders
}

func (response CreateIndividualApplicationDataSubscription201JSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response CreateIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type CreateIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response CreateIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitCreateIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIndividualApplicationDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
}

type DeleteIndividualApplicationDataSubscriptionResponseObject interface {
	VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteIndividualApplicationDataSubscription204Response struct {
}

func (response DeleteIndividualApplicationDataSubscription204Response) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response DeleteIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response DeleteIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitDeleteIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReadIndividualApplicationDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
}

type ReadIndividualApplicationDataSubscriptionResponseObject interface {
	VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReadIndividualApplicationDataSubscription200JSONResponse ApplicationDataSubs

func (response ReadIndividualApplicationDataSubscription200JSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription406Response externalRef0.N406Response

func (response ReadIndividualApplicationDataSubscription406Response) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(406)
	return nil
}

type ReadIndividualApplicationDataSubscription414ApplicationProblemPlusJSONResponse struct {
	externalRef0.N414ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription414ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(414)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReadIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReadIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReadIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReadIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ReplaceIndividualApplicationDataSubscriptionRequestObject struct {
	SubsId string `json:"subsId"`
	Body   *ReplaceIndividualApplicationDataSubscriptionJSONRequestBody
}

type ReplaceIndividualApplicationDataSubscriptionResponseObject interface {
	VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error
}

type ReplaceIndividualApplicationDataSubscription200JSONResponse ApplicationDataSubs

func (response ReplaceIndividualApplicationDataSubscription200JSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription204Response struct {
}

func (response ReplaceIndividualApplicationDataSubscription204Response) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReplaceIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse struct {
	externalRef0.N400ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription400ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse struct {
	externalRef0.N401ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription401ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse struct {
	externalRef0.N403ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription403ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse struct {
	externalRef0.N404ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription404ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse struct {
	externalRef0.N411ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription411ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(411)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse struct {
	externalRef0.N413ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription413ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse struct {
	externalRef0.N415ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription415ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse struct {
	externalRef0.N429ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription429ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse struct {
	externalRef0.N500ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription500ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse struct {
	externalRef0.N503ApplicationProblemPlusJSONResponse
}

func (response ReplaceIndividualApplicationDataSubscription503ApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse struct {
	Body       externalRef0.ProblemDetails
	StatusCode int
}

func (response ReplaceIndividualApplicationDataSubscriptiondefaultApplicationProblemPlusJSONResponse) VisitReplaceIndividualApplicationDataSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Retrieve applied BDT Policy Data
	// (GET /application-data/bdtPolicyData)
	ReadBdtPolicyData(ctx context.Context, request ReadBdtPolicyDataRequestObject) (ReadBdtPolicyDataResponseObject, error)
	// Delete an individual Applied BDT Policy Data resource
	// (DELETE /application-data/bdtPolicyData/{bdtPolicyId})
	DeleteIndividualAppliedBdtPolicyData(ctx context.Context, request DeleteIndividualAppliedBdtPolicyDataRequestObject) (DeleteIndividualAppliedBdtPolicyDataResponseObject, error)
	// Modify part of the properties of an individual Applied BDT Policy Data resource
	// (PATCH /application-data/bdtPolicyData/{bdtPolicyId})
	UpdateIndividualAppliedBdtPolicyData(ctx context.Context, request UpdateIndividualAppliedBdtPolicyDataRequestObject) (UpdateIndividualAppliedBdtPolicyDataResponseObject, error)
	// Create an individual applied BDT Policy Data resource
	// (PUT /application-data/bdtPolicyData/{bdtPolicyId})
	CreateIndividualAppliedBdtPolicyData(ctx context.Context, request CreateIndividualAppliedBdtPolicyDataRequestObject) (CreateIndividualAppliedBdtPolicyDataResponseObject, error)
	// Retrieve Traffic Influence Data
	// (GET /application-data/influenceData)
	ReadInfluenceData(ctx context.Context, request ReadInfluenceDataRequestObject) (ReadInfluenceDataResponseObject, error)
	// Read Influence Data Subscriptions
	// (GET /application-data/influenceData/subs-to-notify)
	ReadInfluenceDataSubscriptions(ctx context.Context, request ReadInfluenceDataSubscriptionsRequestObject) (ReadInfluenceDataSubscriptionsResponseObject, error)
	// Create a new Individual Influence Data Subscription resource
	// (POST /application-data/influenceData/subs-to-notify)
	CreateIndividualInfluenceDataSubscription(ctx context.Context, request CreateIndividualInfluenceDataSubscriptionRequestObject) (CreateIndividualInfluenceDataSubscriptionResponseObject, error)
	// Delete an individual Influence Data Subscription resource
	// (DELETE /application-data/influenceData/subs-to-notify/{subscriptionId})
	DeleteIndividualInfluenceDataSubscription(ctx context.Context, request DeleteIndividualInfluenceDataSubscriptionRequestObject) (DeleteIndividualInfluenceDataSubscriptionResponseObject, error)
	// Get an existing individual Influence Data Subscription resource
	// (GET /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReadIndividualInfluenceDataSubscription(ctx context.Context, request ReadIndividualInfluenceDataSubscriptionRequestObject) (ReadIndividualInfluenceDataSubscriptionResponseObject, error)
	// Modify an existing individual Influence Data Subscription resource
	// (PUT /application-data/influenceData/subs-to-notify/{subscriptionId})
	ReplaceIndividualInfluenceDataSubscription(ctx context.Context, request ReplaceIndividualInfluenceDataSubscriptionRequestObject) (ReplaceIndividualInfluenceDataSubscriptionResponseObject, error)
	// Delete an individual Influence Data resource
	// (DELETE /application-data/influenceData/{influenceId})
	DeleteIndividualInfluenceData(ctx context.Context, request DeleteIndividualInfluenceDataRequestObject) (DeleteIndividualInfluenceDataResponseObject, error)
	// Modify part of the properties of an individual Influence Data resource
	// (PATCH /application-data/influenceData/{influenceId})
	UpdateIndividualInfluenceData(ctx context.Context, request UpdateIndividualInfluenceDataRequestObject) (UpdateIndividualInfluenceDataResponseObject, error)
	// Create or update an individual Influence Data resource
	// (PUT /application-data/influenceData/{influenceId})
	CreateOrReplaceIndividualInfluenceData(ctx context.Context, request CreateOrReplaceIndividualInfluenceDataRequestObject) (CreateOrReplaceIndividualInfluenceDataResponseObject, error)
	// Retrieve IPTV configuration Data
	// (GET /application-data/iptvConfigData)
	ReadIPTVCongifurationData(ctx context.Context, request ReadIPTVCongifurationDataRequestObject) (ReadIPTVCongifurationDataResponseObject, error)
	// Delete an individual IPTV configuration resource
	// (DELETE /application-data/iptvConfigData/{configurationId})
	DeleteIndividualIPTVConfigurationData(ctx context.Context, request DeleteIndividualIPTVConfigurationDataRequestObject) (DeleteIndividualIPTVConfigurationDataResponseObject, error)
	// Partial update an individual IPTV configuration resource
	// (PATCH /application-data/iptvConfigData/{configurationId})
	PartialReplaceIndividualIPTVConfigurationData(ctx context.Context, request PartialReplaceIndividualIPTVConfigurationDataRequestObject) (PartialReplaceIndividualIPTVConfigurationDataResponseObject, error)
	// Create or update an individual IPTV configuration resource
	// (PUT /application-data/iptvConfigData/{configurationId})
	CreateOrReplaceIndividualIPTVConfigurationData(ctx context.Context, request CreateOrReplaceIndividualIPTVConfigurationDataRequestObject) (CreateOrReplaceIndividualIPTVConfigurationDataResponseObject, error)
	// Retrieve PFDs for application identifier(s)
	// (GET /application-data/pfds)
	ReadPFDData(ctx context.Context, request ReadPFDDataRequestObject) (ReadPFDDataResponseObject, error)
	// Delete the corresponding PFDs of the specified application identifier
	// (DELETE /application-data/pfds/{appId})
	DeleteIndividualPFDData(ctx context.Context, request DeleteIndividualPFDDataRequestObject) (DeleteIndividualPFDDataResponseObject, error)
	// Retrieve the corresponding PFDs of the specified application identifier
	// (GET /application-data/pfds/{appId})
	ReadIndividualPFDData(ctx context.Context, request ReadIndividualPFDDataRequestObject) (ReadIndividualPFDDataResponseObject, error)
	// Create or update the corresponding PFDs for the specified application identifier
	// (PUT /application-data/pfds/{appId})
	CreateOrReplaceIndividualPFDData(ctx context.Context, request CreateOrReplaceIndividualPFDDataRequestObject) (CreateOrReplaceIndividualPFDDataResponseObject, error)
	// Retrieve Service Parameter Data
	// (GET /application-data/serviceParamData)
	ReadServiceParameterData(ctx context.Context, request ReadServiceParameterDataRequestObject) (ReadServiceParameterDataResponseObject, error)
	// Delete an individual Service Parameter Data resource
	// (DELETE /application-data/serviceParamData/{serviceParamId})
	DeleteIndividualServiceParameterData(ctx context.Context, request DeleteIndividualServiceParameterDataRequestObject) (DeleteIndividualServiceParameterDataResponseObject, error)
	// Modify part of the properties of an individual Service Parameter Data resource
	// (PATCH /application-data/serviceParamData/{serviceParamId})
	UpdateIndividualServiceParameterData(ctx context.Context, request UpdateIndividualServiceParameterDataRequestObject) (UpdateIndividualServiceParameterDataResponseObject, error)
	// Create or update an individual Service Parameter Data resource
	// (PUT /application-data/serviceParamData/{serviceParamId})
	CreateOrReplaceServiceParameterData(ctx context.Context, request CreateOrReplaceServiceParameterDataRequestObject) (CreateOrReplaceServiceParameterDataResponseObject, error)
	// Read Application Data change Subscriptions
	// (GET /application-data/subs-to-notify)
	ReadApplicationDataChangeSubscriptions(ctx context.Context, request ReadApplicationDataChangeSubscriptionsRequestObject) (ReadApplicationDataChangeSubscriptionsResponseObject, error)
	// Create a subscription to receive notification of application data changes
	// (POST /application-data/subs-to-notify)
	CreateIndividualApplicationDataSubscription(ctx context.Context, request CreateIndividualApplicationDataSubscriptionRequestObject) (CreateIndividualApplicationDataSubscriptionResponseObject, error)
	// Delete the individual Application Data subscription
	// (DELETE /application-data/subs-to-notify/{subsId})
	DeleteIndividualApplicationDataSubscription(ctx context.Context, request DeleteIndividualApplicationDataSubscriptionRequestObject) (DeleteIndividualApplicationDataSubscriptionResponseObject, error)
	// Get an existing individual Application Data Subscription resource
	// (GET /application-data/subs-to-notify/{subsId})
	ReadIndividualApplicationDataSubscription(ctx context.Context, request ReadIndividualApplicationDataSubscriptionRequestObject) (ReadIndividualApplicationDataSubscriptionResponseObject, error)
	// Modify a subscription to receive notification of application data changes
	// (PUT /application-data/subs-to-notify/{subsId})
	ReplaceIndividualApplicationDataSubscription(ctx context.Context, request ReplaceIndividualApplicationDataSubscriptionRequestObject) (ReplaceIndividualApplicationDataSubscriptionResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ReadBdtPolicyData operation middleware
func (sh *strictHandler) ReadBdtPolicyData(ctx *gin.Context, params ReadBdtPolicyDataParams) {
	var request ReadBdtPolicyDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadBdtPolicyData(ctx, request.(ReadBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitReadBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualAppliedBdtPolicyData operation middleware
func (sh *strictHandler) DeleteIndividualAppliedBdtPolicyData(ctx *gin.Context, bdtPolicyId string) {
	var request DeleteIndividualAppliedBdtPolicyDataRequestObject

	request.BdtPolicyId = bdtPolicyId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualAppliedBdtPolicyData(ctx, request.(DeleteIndividualAppliedBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualAppliedBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualAppliedBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualAppliedBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualAppliedBdtPolicyData operation middleware
func (sh *strictHandler) UpdateIndividualAppliedBdtPolicyData(ctx *gin.Context, bdtPolicyId string) {
	var request UpdateIndividualAppliedBdtPolicyDataRequestObject

	request.BdtPolicyId = bdtPolicyId

	var body UpdateIndividualAppliedBdtPolicyDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualAppliedBdtPolicyData(ctx, request.(UpdateIndividualAppliedBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualAppliedBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualAppliedBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualAppliedBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualAppliedBdtPolicyData operation middleware
func (sh *strictHandler) CreateIndividualAppliedBdtPolicyData(ctx *gin.Context, bdtPolicyId string) {
	var request CreateIndividualAppliedBdtPolicyDataRequestObject

	request.BdtPolicyId = bdtPolicyId

	var body CreateIndividualAppliedBdtPolicyDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualAppliedBdtPolicyData(ctx, request.(CreateIndividualAppliedBdtPolicyDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualAppliedBdtPolicyData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualAppliedBdtPolicyDataResponseObject); ok {
		if err := validResponse.VisitCreateIndividualAppliedBdtPolicyDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadInfluenceData operation middleware
func (sh *strictHandler) ReadInfluenceData(ctx *gin.Context, params ReadInfluenceDataParams) {
	var request ReadInfluenceDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadInfluenceData(ctx, request.(ReadInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadInfluenceDataResponseObject); ok {
		if err := validResponse.VisitReadInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadInfluenceDataSubscriptions operation middleware
func (sh *strictHandler) ReadInfluenceDataSubscriptions(ctx *gin.Context, params ReadInfluenceDataSubscriptionsParams) {
	var request ReadInfluenceDataSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadInfluenceDataSubscriptions(ctx, request.(ReadInfluenceDataSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadInfluenceDataSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadInfluenceDataSubscriptionsResponseObject); ok {
		if err := validResponse.VisitReadInfluenceDataSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualInfluenceDataSubscription(ctx *gin.Context) {
	var request CreateIndividualInfluenceDataSubscriptionRequestObject

	var body CreateIndividualInfluenceDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualInfluenceDataSubscription(ctx, request.(CreateIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualInfluenceDataSubscription(ctx *gin.Context, subscriptionId string) {
	var request DeleteIndividualInfluenceDataSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualInfluenceDataSubscription(ctx, request.(DeleteIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) ReadIndividualInfluenceDataSubscription(ctx *gin.Context, subscriptionId string) {
	var request ReadIndividualInfluenceDataSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualInfluenceDataSubscription(ctx, request.(ReadIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReadIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualInfluenceDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualInfluenceDataSubscription(ctx *gin.Context, subscriptionId string) {
	var request ReplaceIndividualInfluenceDataSubscriptionRequestObject

	request.SubscriptionId = subscriptionId

	var body ReplaceIndividualInfluenceDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualInfluenceDataSubscription(ctx, request.(ReplaceIndividualInfluenceDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualInfluenceDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualInfluenceDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualInfluenceDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualInfluenceData operation middleware
func (sh *strictHandler) DeleteIndividualInfluenceData(ctx *gin.Context, influenceId string) {
	var request DeleteIndividualInfluenceDataRequestObject

	request.InfluenceId = influenceId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualInfluenceData(ctx, request.(DeleteIndividualInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualInfluenceDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualInfluenceData operation middleware
func (sh *strictHandler) UpdateIndividualInfluenceData(ctx *gin.Context, influenceId string) {
	var request UpdateIndividualInfluenceDataRequestObject

	request.InfluenceId = influenceId

	var body UpdateIndividualInfluenceDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualInfluenceData(ctx, request.(UpdateIndividualInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualInfluenceDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceIndividualInfluenceData operation middleware
func (sh *strictHandler) CreateOrReplaceIndividualInfluenceData(ctx *gin.Context, influenceId string) {
	var request CreateOrReplaceIndividualInfluenceDataRequestObject

	request.InfluenceId = influenceId

	var body CreateOrReplaceIndividualInfluenceDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceIndividualInfluenceData(ctx, request.(CreateOrReplaceIndividualInfluenceDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceIndividualInfluenceData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceIndividualInfluenceDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceIndividualInfluenceDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIPTVCongifurationData operation middleware
func (sh *strictHandler) ReadIPTVCongifurationData(ctx *gin.Context, params ReadIPTVCongifurationDataParams) {
	var request ReadIPTVCongifurationDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIPTVCongifurationData(ctx, request.(ReadIPTVCongifurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIPTVCongifurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIPTVCongifurationDataResponseObject); ok {
		if err := validResponse.VisitReadIPTVCongifurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualIPTVConfigurationData operation middleware
func (sh *strictHandler) DeleteIndividualIPTVConfigurationData(ctx *gin.Context, configurationId string) {
	var request DeleteIndividualIPTVConfigurationDataRequestObject

	request.ConfigurationId = configurationId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualIPTVConfigurationData(ctx, request.(DeleteIndividualIPTVConfigurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualIPTVConfigurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualIPTVConfigurationDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualIPTVConfigurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PartialReplaceIndividualIPTVConfigurationData operation middleware
func (sh *strictHandler) PartialReplaceIndividualIPTVConfigurationData(ctx *gin.Context, configurationId string) {
	var request PartialReplaceIndividualIPTVConfigurationDataRequestObject

	request.ConfigurationId = configurationId

	var body PartialReplaceIndividualIPTVConfigurationDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PartialReplaceIndividualIPTVConfigurationData(ctx, request.(PartialReplaceIndividualIPTVConfigurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PartialReplaceIndividualIPTVConfigurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PartialReplaceIndividualIPTVConfigurationDataResponseObject); ok {
		if err := validResponse.VisitPartialReplaceIndividualIPTVConfigurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceIndividualIPTVConfigurationData operation middleware
func (sh *strictHandler) CreateOrReplaceIndividualIPTVConfigurationData(ctx *gin.Context, configurationId string) {
	var request CreateOrReplaceIndividualIPTVConfigurationDataRequestObject

	request.ConfigurationId = configurationId

	var body CreateOrReplaceIndividualIPTVConfigurationDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceIndividualIPTVConfigurationData(ctx, request.(CreateOrReplaceIndividualIPTVConfigurationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceIndividualIPTVConfigurationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceIndividualIPTVConfigurationDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceIndividualIPTVConfigurationDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadPFDData operation middleware
func (sh *strictHandler) ReadPFDData(ctx *gin.Context, params ReadPFDDataParams) {
	var request ReadPFDDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadPFDData(ctx, request.(ReadPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadPFDDataResponseObject); ok {
		if err := validResponse.VisitReadPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualPFDData operation middleware
func (sh *strictHandler) DeleteIndividualPFDData(ctx *gin.Context, appId string) {
	var request DeleteIndividualPFDDataRequestObject

	request.AppId = appId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualPFDData(ctx, request.(DeleteIndividualPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualPFDDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualPFDData operation middleware
func (sh *strictHandler) ReadIndividualPFDData(ctx *gin.Context, appId string) {
	var request ReadIndividualPFDDataRequestObject

	request.AppId = appId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualPFDData(ctx, request.(ReadIndividualPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualPFDDataResponseObject); ok {
		if err := validResponse.VisitReadIndividualPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceIndividualPFDData operation middleware
func (sh *strictHandler) CreateOrReplaceIndividualPFDData(ctx *gin.Context, appId string) {
	var request CreateOrReplaceIndividualPFDDataRequestObject

	request.AppId = appId

	var body CreateOrReplaceIndividualPFDDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceIndividualPFDData(ctx, request.(CreateOrReplaceIndividualPFDDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceIndividualPFDData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceIndividualPFDDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceIndividualPFDDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadServiceParameterData operation middleware
func (sh *strictHandler) ReadServiceParameterData(ctx *gin.Context, params ReadServiceParameterDataParams) {
	var request ReadServiceParameterDataRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadServiceParameterData(ctx, request.(ReadServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitReadServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualServiceParameterData operation middleware
func (sh *strictHandler) DeleteIndividualServiceParameterData(ctx *gin.Context, serviceParamId string) {
	var request DeleteIndividualServiceParameterDataRequestObject

	request.ServiceParamId = serviceParamId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualServiceParameterData(ctx, request.(DeleteIndividualServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIndividualServiceParameterData operation middleware
func (sh *strictHandler) UpdateIndividualServiceParameterData(ctx *gin.Context, serviceParamId string) {
	var request UpdateIndividualServiceParameterDataRequestObject

	request.ServiceParamId = serviceParamId

	var body UpdateIndividualServiceParameterDataApplicationMergePatchPlusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIndividualServiceParameterData(ctx, request.(UpdateIndividualServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIndividualServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateIndividualServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitUpdateIndividualServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateOrReplaceServiceParameterData operation middleware
func (sh *strictHandler) CreateOrReplaceServiceParameterData(ctx *gin.Context, serviceParamId string) {
	var request CreateOrReplaceServiceParameterDataRequestObject

	request.ServiceParamId = serviceParamId

	var body CreateOrReplaceServiceParameterDataJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrReplaceServiceParameterData(ctx, request.(CreateOrReplaceServiceParameterDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrReplaceServiceParameterData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateOrReplaceServiceParameterDataResponseObject); ok {
		if err := validResponse.VisitCreateOrReplaceServiceParameterDataResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadApplicationDataChangeSubscriptions operation middleware
func (sh *strictHandler) ReadApplicationDataChangeSubscriptions(ctx *gin.Context, params ReadApplicationDataChangeSubscriptionsParams) {
	var request ReadApplicationDataChangeSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadApplicationDataChangeSubscriptions(ctx, request.(ReadApplicationDataChangeSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadApplicationDataChangeSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadApplicationDataChangeSubscriptionsResponseObject); ok {
		if err := validResponse.VisitReadApplicationDataChangeSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) CreateIndividualApplicationDataSubscription(ctx *gin.Context) {
	var request CreateIndividualApplicationDataSubscriptionRequestObject

	var body CreateIndividualApplicationDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIndividualApplicationDataSubscription(ctx, request.(CreateIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) DeleteIndividualApplicationDataSubscription(ctx *gin.Context, subsId string) {
	var request DeleteIndividualApplicationDataSubscriptionRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIndividualApplicationDataSubscription(ctx, request.(DeleteIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) ReadIndividualApplicationDataSubscription(ctx *gin.Context, subsId string) {
	var request ReadIndividualApplicationDataSubscriptionRequestObject

	request.SubsId = subsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReadIndividualApplicationDataSubscription(ctx, request.(ReadIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReadIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReadIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceIndividualApplicationDataSubscription operation middleware
func (sh *strictHandler) ReplaceIndividualApplicationDataSubscription(ctx *gin.Context, subsId string) {
	var request ReplaceIndividualApplicationDataSubscriptionRequestObject

	request.SubsId = subsId

	var body ReplaceIndividualApplicationDataSubscriptionJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceIndividualApplicationDataSubscription(ctx, request.(ReplaceIndividualApplicationDataSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceIndividualApplicationDataSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReplaceIndividualApplicationDataSubscriptionResponseObject); ok {
		if err := validResponse.VisitReplaceIndividualApplicationDataSubscriptionResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
